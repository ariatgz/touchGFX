
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000240a8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a54  08024348  08024348  00025348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000709e  08027d9c  08027d9c  00028d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000002f8  0802ee3c  0802ee3c  0002fe3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00249790  90000000  90000000  0003b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000002c  90249790  90249790  00284790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802f134  0802f134  002847bc  2**0
                  CONTENTS
  8 .ARM          00000008  0802f134  0802f134  00030134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0802f13c  0802f13c  002847bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  0802f13c  0802f13c  0003013c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0802f158  0802f158  00030158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  0802f160  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_MCU_Data_OutBuffer1 00004b00  24000140  0802f29c  00031140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_MCU_Data_OutBuffer0 00004b00  24004c40  08033d9c  00035c40  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 TouchGFX_ScratchbufferA 00000100  24009740  0803889c  0003a740  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 TouchGFX_ScratchbufferB 00000100  24009840  0803899c  0003a840  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0001c6dc  24009940  08038a9c  0003a940  2**2
                  ALLOC
 18 ._user_heap_stack 00002004  2402601c  08038a9c  0003b01c  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  002847bc  2**0
                  CONTENTS, READONLY
 20 BufferSection 00232800  d0000000  d0000000  00285000  2**2
                  ALLOC
 21 .debug_info   000e8ea7  00000000  00000000  002847ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 000189d2  00000000  00000000  0036d691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00003f68  00000000  00000000  00386068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000045e7  00000000  00000000  00389fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00053898  00000000  00000000  0038e5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0006bb7e  00000000  00000000  003e1e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    001e51ef  00000000  00000000  0044d9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000c2  00000000  00000000  00632bbc  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000b148  00000000  00000000  00632c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 00026fce  00000000  00000000  0063ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 0000006b  00000000  00000000  00664d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24009940 	.word	0x24009940
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024330 	.word	0x08024330

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24009944 	.word	0x24009944
 80002dc:	08024330 	.word	0x08024330

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00d b8be 	b.w	800d87c <vTaskSetApplicationTaskTag>
 8000700:	08002045 	.word	0x08002045

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f023 f87b 	bl	8023808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f023 f876 	bl	8023808 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f009 fa7d 	bl	8009c1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f009 fd44 	bl	800a210 <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f00a f8ca 	bl	800a940 <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f009 ffd2 	bl	800a760 <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f023 f816 	bl	8023808 <memset>
  HAL_MPU_Disable();
 80007dc:	f006 fc26 	bl	800702c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f006 fc39 	bl	8007068 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f006 fc31 	bl	8007068 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f006 fc23 	bl	8007068 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f006 fc14 	bl	8007068 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f006 fc09 	bl	8007068 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f006 fbfc 	bl	8007068 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f006 fbe9 	bl	8007048 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82e3 	beq.w	8000ecc <main+0x704>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f009 fa95 	bl	8009e54 <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f005 fe55 	bl	80065ec <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f005 fdfc 	bl	8006544 <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f006 fc0c 	bl	8007182 <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4639      	mov	r1, r7
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f007 fae6 	bl	8007f48 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f006 fad9 	bl	8006f34 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4639      	mov	r1, r7
 8000984:	462a      	mov	r2, r5
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f007 fade 	bl	8007f48 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f006 fad1 	bl	8006f34 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f022 ff36 	bl	8023808 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f022 ff31 	bl	8023808 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f022 ff2c 	bl	8023808 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f022 ff27 	bl	8023808 <memset>
  hdsi.Instance = DSI;
 80009ba:	4f51      	ldr	r7, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f006 fd22 	bl	800741c <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4638      	mov	r0, r7
 80009f4:	f006 ff7e 	bl	80078f4 <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f006 ff30 	bl	800787a <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f006 ff18 	bl	8007858 <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f007 f8e7 	bl	8007c06 <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f006 fc88 	bl	8007356 <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f006 fea6 	bl	80077f0 <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f006 fe1b 	bl	800770c <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240099c8 	.word	0x240099c8
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24009c08 	.word	0x24009c08
 8000afc:	58021800 	.word	0x58021800
 8000b00:	24009bec 	.word	0x24009bec
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	485b      	ldr	r0, [pc, #364]	@ (8000c78 <main+0x4b0>)
 8000b0a:	f006 fdee 	bl	80076ea <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d57      	ldr	r5, [pc, #348]	@ (8000c7c <main+0x4b4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f022 fe73 	bl	8023808 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cbc <main+0x4f4>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f008 fd51 	bl	8009608 <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b70:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b72:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b76:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7a:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7e:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b80:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b84:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8e:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b92:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b98:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f008 fde6 	bl	8009772 <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	4831      	ldr	r0, [pc, #196]	@ (8000c78 <main+0x4b0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f006 ff01 	bl	80079c0 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4930      	ldr	r1, [pc, #192]	@ (8000c80 <main+0x4b8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <main+0x4bc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x4c4>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <main+0x4c8>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f005 faae 	bl	8006130 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <main+0x4c0>)
 8000bda:	f004 ff19 	bl	8005a10 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <main+0x4b0>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f006 ff1d 	bl	8007a26 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <main+0x4b0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f006 fdf3 	bl	80077f0 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f008 fddb 	bl	80097cc <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <main+0x4cc>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <main+0x4d0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f006 fa47 	bl	80070c0 <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <main+0x4d4>)
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x4d8>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f007 fedd 	bl	80089fc <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  MX_TouchGFX_Init();
 8000c48:	f000 fd8e 	bl	8001768 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4c:	f000 fd8b 	bl	8001766 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c50:	f00b f8b6 	bl	800bdc0 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <main+0x4e0>)
 8000c5a:	f00b f8dd 	bl	800be18 <osThreadNew>
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <main+0x4e4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c64:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <main+0x4ec>)
 8000c68:	f00b f8d6 	bl	800be18 <osThreadNew>
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x4f0>)
 8000c6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c70:	f00b f8b8 	bl	800bde4 <osKernelStart>
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x4ac>
 8000c76:	bf00      	nop
 8000c78:	24009bec 	.word	0x24009bec
 8000c7c:	24009a14 	.word	0x24009a14
 8000c80:	2400995c 	.word	0x2400995c
 8000c84:	08006515 	.word	0x08006515
 8000c88:	2400996c 	.word	0x2400996c
 8000c8c:	08001d3d 	.word	0x08001d3d
 8000c90:	08001d75 	.word	0x08001d75
 8000c94:	24009c70 	.word	0x24009c70
 8000c98:	58024c00 	.word	0x58024c00
 8000c9c:	24009b94 	.word	0x24009b94
 8000ca0:	52003000 	.word	0x52003000
 8000ca4:	080265a0 	.word	0x080265a0
 8000ca8:	08001777 	.word	0x08001777
 8000cac:	24009990 	.word	0x24009990
 8000cb0:	0802657c 	.word	0x0802657c
 8000cb4:	080038d1 	.word	0x080038d1
 8000cb8:	2400998c 	.word	0x2400998c
 8000cbc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f022 fd9e 	bl	8023808 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	f04f 0900 	mov.w	r9, #0
 8000ce0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf2:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f007 f8b8 	bl	8007f48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	484d      	ldr	r0, [pc, #308]	@ (8000f14 <main+0x74c>)
 8000dde:	f007 f8b3 	bl	8007f48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x750>)
 8000dea:	f007 f8ad 	bl	8007f48 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92d      	add	r1, sp, #180	@ 0xb4
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f006 ff19 	bl	8007c34 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f006 ff0f 	bl	8007c34 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	483e      	ldr	r0, [pc, #248]	@ (8000f14 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f006 ff07 	bl	8007c34 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f006 feff 	bl	8007c34 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e42:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e46:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e50:	402b      	ands	r3, r5
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e56:	f006 f897 	bl	8006f88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e5a:	207a      	movs	r0, #122	@ 0x7a
 8000e5c:	f006 f8c6 	bl	8006fec <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <main+0x758>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e62:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x75c>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e64:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <main+0x760>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e74:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e78:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e7c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e7e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e82:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e90:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e9c:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000e9e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ea2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000ea6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eaa:	f00a fcd5 	bl	800b858 <HAL_SDRAM_Init>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	f47f ad2c 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eb6:	f005 fd53 	bl	8006960 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f005 fd9e 	bl	80069fc <BSP_SDRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f43f ad25 	beq.w	8000912 <main+0x14a>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x702>
  HAL_Init();
 8000ecc:	f005 fff2 	bl	8006eb4 <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff fc18 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ed8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ee2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eee:	f007 f839 	bl	8007f64 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f007 f843 	bl	8007f80 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	4c0c      	ldr	r4, [pc, #48]	@ (8000f2c <main+0x764>)
timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	f53f aedc 	bmi.w	8000cc0 <main+0x4f8>
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	d2f9      	bcs.n	8000f00 <main+0x738>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x746>
 8000f10:	58022400 	.word	0x58022400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	52004000 	.word	0x52004000
 8000f24:	24009994 	.word	0x24009994
 8000f28:	52004140 	.word	0x52004140
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f38:	f005 bfea 	b.w	8006f10 <HAL_IncTick>
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <Error_Handler+0x2>

08000f48 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x2c>)
{
 8000f4a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	f006 b80b 	b.w	8006f88 <HAL_NVIC_SetPriority>
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x2c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <HAL_CRC_MspInit+0x26>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024c00 	.word	0x58024c00

08000fa8 <HAL_DMA2D_MspInit>:
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DMA2D_MspInit+0x40>)
{
 8000faa:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fac:	6802      	ldr	r2, [r0, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fbc:	f042 0210 	orr.w	r2, r2, #16
 8000fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd2:	f005 ffd9 	bl	8006f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd6:	205a      	movs	r0, #90	@ 0x5a

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fd8:	b003      	add	sp, #12
 8000fda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fde:	f006 b805 	b.w	8006fec <HAL_NVIC_EnableIRQ>
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	52001000 	.word	0x52001000
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f022 fc04 	bl	8023808 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c8      	movs	r2, #200	@ 0xc8
 8001002:	2100      	movs	r1, #0
 8001004:	a808      	add	r0, sp, #32
 8001006:	f022 fbff 	bl	8023808 <memset>
  if(hdsi->Instance==DSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d138      	bne.n	8001084 <HAL_DSI_MspInit+0x94>

    /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001016:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f009 ff11 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	b108      	cbz	r0, 8001028 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001024:	f7ff ff8e 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001030:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800103c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001040:	f002 0210 	and.w	r2, r2, #16
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001068:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800106e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001070:	f006 fde0 	bl	8007c34 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001074:	207b      	movs	r0, #123	@ 0x7b
 8001076:	4622      	mov	r2, r4
 8001078:	2107      	movs	r1, #7
 800107a:	f005 ff85 	bl	8006f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800107e:	207b      	movs	r0, #123	@ 0x7b
 8001080:	f005 ffb4 	bl	8006fec <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 8001084:	b03a      	add	sp, #232	@ 0xe8
 8001086:	bd10      	pop	{r4, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58022400 	.word	0x58022400

08001090 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_JPEG_MspInit+0xf4>)
{
 8001094:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d170      	bne.n	800117e <HAL_JPEG_MspInit+0xee>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800109e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010a0:	4c3a      	ldr	r4, [pc, #232]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010a2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010aa:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001198 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ae:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010b8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010c6:	2311      	movs	r3, #17
 80010c8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010d6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010d8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010da:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010de:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010e2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010ee:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010f2:	f008 fbc8 	bl	8009886 <HAL_MDMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80010f8:	f7ff ff24 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010fc:	2200      	movs	r2, #0
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
 8001100:	4611      	mov	r1, r2
 8001102:	f008 fc4e 	bl	80099a2 <HAL_MDMA_ConfigPostRequestMask>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001108:	f7ff ff1c 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800110c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800110e:	2313      	movs	r3, #19
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001112:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001114:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001116:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800111a:	4c1e      	ldr	r4, [pc, #120]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	22c0      	movs	r2, #192	@ 0xc0
 8001124:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800112c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001130:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001134:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001138:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800113c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001140:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001142:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800114a:	f008 fb9c 	bl	8009886 <HAL_MDMA_Init>
 800114e:	b108      	cbz	r0, 8001154 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001150:	f7ff fef8 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001154:	2200      	movs	r2, #0
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
 8001158:	4611      	mov	r1, r2
 800115a:	f008 fc22 	bl	80099a2 <HAL_MDMA_ConfigPostRequestMask>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001160:	f7ff fef0 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001164:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800116c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800116e:	f005 ff0b 	bl	8006f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001172:	2079      	movs	r0, #121	@ 0x79

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800117a:	f005 bf37 	b.w	8006fec <HAL_NVIC_EnableIRQ>
}
 800117e:	b003      	add	sp, #12
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	52003000 	.word	0x52003000
 8001188:	58024400 	.word	0x58024400
 800118c:	24009b28 	.word	0x24009b28
 8001190:	520001c0 	.word	0x520001c0
 8001194:	24009abc 	.word	0x24009abc
 8001198:	52000200 	.word	0x52000200

0800119c <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b510      	push	{r4, lr}
 800119e:	b0b4      	sub	sp, #208	@ 0xd0
 80011a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a2:	22c8      	movs	r2, #200	@ 0xc8
 80011a4:	2100      	movs	r1, #0
 80011a6:	a802      	add	r0, sp, #8
 80011a8:	f022 fb2e 	bl	8023808 <memset>
  if(hltdc->Instance==LTDC)
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_LTDC_MspInit+0x74>)
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d12b      	bne.n	800120c <HAL_LTDC_MspInit+0x70>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ba:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011c2:	23a1      	movs	r3, #161	@ 0xa1
 80011c4:	2205      	movs	r2, #5
 80011c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011cc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f009 fe34 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80011de:	f7ff feb1 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011e4:	2058      	movs	r0, #88	@ 0x58
 80011e6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011ec:	f042 0208 	orr.w	r2, r2, #8
 80011f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001202:	f005 fec1 	bl	8006f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f005 fef0 	bl	8006fec <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800120c:	b034      	add	sp, #208	@ 0xd0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	50001000 	.word	0x50001000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b0bf      	sub	sp, #252	@ 0xfc
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a807      	add	r0, sp, #28
 8001224:	f022 faf0 	bl	8023808 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	2100      	movs	r1, #0
 800122c:	a80c      	add	r0, sp, #48	@ 0x30
 800122e:	f022 faeb 	bl	8023808 <memset>
  if(hqspi->Instance==QUADSPI)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_QSPI_MspInit+0x16c>)
 8001236:	429a      	cmp	r2, r3
 8001238:	f040 80a1 	bne.w	800137e <HAL_QSPI_MspInit+0x166>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001244:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f009 fdfc 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800124e:	f7ff fe79 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	a907      	add	r1, sp, #28
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001268:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800126c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001270:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f042 0202 	orr.w	r2, r2, #2
 80012c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f002 0202 	and.w	r2, r2, #2
 80012d4:	9205      	str	r2, [sp, #20]
 80012d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80012f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f006 fc99 	bl	8007c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	a907      	add	r1, sp, #28
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001308:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f006 fc8f 	bl	8007c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f006 fc85 	bl	8007c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	a907      	add	r1, sp, #28
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f006 fc7a 	bl	8007c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001340:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f006 fc70 	bl	8007c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f006 fc66 	bl	8007c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001370:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f006 fc5b 	bl	8007c34 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800137e:	b03f      	add	sp, #252	@ 0xfc
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	52005000 	.word	0x52005000
 8001388:	58024400 	.word	0x58024400
 800138c:	58021800 	.word	0x58021800
 8001390:	58021400 	.word	0x58021400
 8001394:	58021c00 	.word	0x58021c00
 8001398:	58020400 	.word	0x58020400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a4:	2100      	movs	r1, #0
 80013a6:	2214      	movs	r2, #20
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f022 fa2d 	bl	8023808 <memset>
  if (FMC_Initialized) {
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_SDRAM_MspInit+0x10c>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d177      	bne.n	80014a6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013b6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ba:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	f022 fa23 	bl	8023808 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f009 fd39 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013d4:	f7ff fdb6 	bl	8000f44 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2600      	movs	r6, #0
 80013de:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e6:	a901      	add	r1, sp, #4
 80013e8:	4832      	ldr	r0, [pc, #200]	@ (80014b4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f006 fc12 	bl	8007c34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001410:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
 8001414:	4828      	ldr	r0, [pc, #160]	@ (80014b8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f006 fc08 	bl	8007c34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001424:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	a901      	add	r1, sp, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f006 fbfd 	bl	8007c34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800143a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f006 fbf2 	bl	8007c34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001450:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	a901      	add	r1, sp, #4
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f006 fbe7 	bl	8007c34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001466:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f006 fbdc 	bl	8007c34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	a901      	add	r1, sp, #4
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f006 fbd1 	bl	8007c34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f006 fbc7 	bl	8007c34 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a6:	b039      	add	sp, #228	@ 0xe4
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24009c98 	.word	0x24009c98
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_SDRAM_MspDeInit+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d8:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014da:	bb82      	cbnz	r2, 800153e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014de:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014e4:	4818      	ldr	r0, [pc, #96]	@ (8001548 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014e6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f006 fc86 	bl	8007e04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80014f8:	2160      	movs	r1, #96	@ 0x60
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <HAL_SDRAM_MspDeInit+0x78>)
 80014fc:	f006 fc82 	bl	8007e04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001500:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspDeInit+0x7c>)
 8001506:	f006 fc7d 	bl	8007e04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800150a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_SDRAM_MspDeInit+0x80>)
 8001510:	f006 fc78 	bl	8007e04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001514:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_SDRAM_MspDeInit+0x84>)
 800151a:	f006 fc73 	bl	8007e04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800151e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_SDRAM_MspDeInit+0x88>)
 8001524:	f006 fc6e 	bl	8007e04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001528:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_SDRAM_MspDeInit+0x8c>)
 800152e:	f006 fc69 	bl	8007e04 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001532:	4621      	mov	r1, r4
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800153a:	f006 bc63 	b.w	8007e04 <HAL_GPIO_DeInit>
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	24009c94 	.word	0x24009c94
 8001544:	58024400 	.word	0x58024400
 8001548:	58022000 	.word	0x58022000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58021800 	.word	0x58021800
 800155c:	58020c00 	.word	0x58020c00
 8001560:	58021400 	.word	0x58021400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	280f      	cmp	r0, #15
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	d902      	bls.n	8001578 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001574:	b00a      	add	sp, #40	@ 0x28
 8001576:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001578:	4601      	mov	r1, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f005 fd03 	bl	8006f88 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f005 fd32 	bl	8006fec <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	4669      	mov	r1, sp
 800158c:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800158e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_InitTick+0x88>)
 8001592:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015aa:	f009 fb35 	bl	800ac18 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	9b07      	ldr	r3, [sp, #28]
 80015b0:	b9c3      	cbnz	r3, 80015e4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b2:	f009 fb0d 	bl	800abd0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015b6:	4c0f      	ldr	r4, [pc, #60]	@ (80015f4 <HAL_InitTick+0x8c>)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_InitTick+0x90>)
 80015ba:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_InitTick+0x94>)
 80015c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015c8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ca:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ce:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015d0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015d4:	f00a fb1e 	bl	800bc14 <HAL_TIM_Base_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ca      	bne.n	8001572 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015dc:	4620      	mov	r0, r4
 80015de:	f00a f9e3 	bl	800b9a8 <HAL_TIM_Base_Start_IT>
 80015e2:	e7c7      	b.n	8001574 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e4:	f009 faf4 	bl	800abd0 <HAL_RCC_GetPCLK1Freq>
 80015e8:	0040      	lsls	r0, r0, #1
 80015ea:	e7e4      	b.n	80015b6 <HAL_InitTick+0x4e>
 80015ec:	24000074 	.word	0x24000074
 80015f0:	58024400 	.word	0x58024400
 80015f4:	24009c9c 	.word	0x24009c9c
 80015f8:	40001000 	.word	0x40001000
 80015fc:	000f4240 	.word	0x000f4240

08001600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler>

08001602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	4770      	bx	lr

0800160c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4801      	ldr	r0, [pc, #4]	@ (8001614 <TIM6_DAC_IRQHandler+0x8>)
 800160e:	f00a ba0d 	b.w	800ba2c <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	24009c9c 	.word	0x24009c9c

08001618 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4801      	ldr	r0, [pc, #4]	@ (8001620 <LTDC_IRQHandler+0x8>)
 800161a:	f008 b84d 	b.w	80096b8 <HAL_LTDC_IRQHandler>
 800161e:	bf00      	nop
 8001620:	24009a14 	.word	0x24009a14

08001624 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4801      	ldr	r0, [pc, #4]	@ (800162c <DMA2D_IRQHandler+0x8>)
 8001626:	f005 bdeb 	b.w	8007200 <HAL_DMA2D_IRQHandler>
 800162a:	bf00      	nop
 800162c:	24009c08 	.word	0x24009c08

08001630 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <JPEG_IRQHandler+0x8>)
 8001632:	f007 bf19 	b.w	8009468 <HAL_JPEG_IRQHandler>
 8001636:	bf00      	nop
 8001638:	24009b94 	.word	0x24009b94

0800163c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MDMA_IRQHandler+0x14>)
{
 800163e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001640:	f008 fa34 	bl	8009aac <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800164a:	f008 ba2f 	b.w	8009aac <HAL_MDMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	24009abc 	.word	0x24009abc
 8001654:	24009b28 	.word	0x24009b28

08001658 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <DSI_IRQHandler+0x8>)
 800165a:	f005 bfd4 	b.w	8007606 <HAL_DSI_IRQHandler>
 800165e:	bf00      	nop
 8001660:	24009bec 	.word	0x24009bec

08001664 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b508      	push	{r3, lr}
	errno = EINVAL;
 800166a:	f022 f981 	bl	8023970 <__errno>
 800166e:	2316      	movs	r3, #22
 8001670:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	bd08      	pop	{r3, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167a:	f022 f979 	bl	8023970 <__errno>
 800167e:	2316      	movs	r3, #22
 8001680:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0xa>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460d      	mov	r5, r1
 8001688:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	460e      	mov	r6, r1
 800168c:	1b73      	subs	r3, r6, r5
 800168e:	429c      	cmp	r4, r3
 8001690:	dc01      	bgt.n	8001696 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	e7f5      	b.n	800168c <_read+0x8>

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460d      	mov	r5, r1
 80016a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	460e      	mov	r6, r1
 80016a8:	1b73      	subs	r3, r6, r5
 80016aa:	429c      	cmp	r4, r3
 80016ac:	dc01      	bgt.n	80016b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	e7f5      	b.n	80016a8 <_write+0x8>

080016bc <_close>:

int _close(int file)
{
	return -1;
}
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016c8:	604b      	str	r3, [r1, #4]
}
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <_sbrk+0x30>)
{
 80016d6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016d8:	6811      	ldr	r1, [r2, #0]
{
 80016da:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016dc:	b909      	cbnz	r1, 80016e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <_sbrk+0x34>)
 80016e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <_sbrk+0x38>)
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <_sbrk+0x3c>)
 80016e8:	4403      	add	r3, r0
 80016ea:	1b09      	subs	r1, r1, r4
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d906      	bls.n	80016fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80016f0:	f022 f93e 	bl	8023970 <__errno>
 80016f4:	230c      	movs	r3, #12
 80016f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80016fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001700:	e7fc      	b.n	80016fc <_sbrk+0x28>
 8001702:	bf00      	nop
 8001704:	24009ce8 	.word	0x24009ce8
 8001708:	24026020 	.word	0x24026020
 800170c:	24080000 	.word	0x24080000
 8001710:	00001000 	.word	0x00001000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f005 fb5c 	bl	8006dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f022 f91b 	bl	802397c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83f 	bl	80007c8 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001758:	0802f160 	.word	0x0802f160
  ldr r2, =_sbss
 800175c:	24009940 	.word	0x24009940
  ldr r4, =_ebss
 8001760:	2402601c 	.word	0x2402601c

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>

08001766 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001766:	4770      	bx	lr

08001768 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001768:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800176a:	f001 fd25 	bl	80031b8 <touchgfx_components_init>
    touchgfx_init();
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001772:	f001 bca9 	b.w	80030c8 <touchgfx_init>

08001776 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001776:	f001 bd21 	b.w	80031bc <touchgfx_taskEntry>

0800177a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800177a:	6840      	ldr	r0, [r0, #4]
    }
 800177c:	4770      	bx	lr

0800177e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800177e:	6041      	str	r1, [r0, #4]
    }
 8001780:	4770      	bx	lr

08001782 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001788:	fbb2 f0f3 	udiv	r0, r2, r3
 800178c:	4770      	bx	lr
	...

08001790 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001792:	68c0      	ldr	r0, [r0, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001798:	4358      	muls	r0, r3
 800179a:	4770      	bx	lr
 800179c:	24009cec 	.word	0x24009cec

080017a0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017ac:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017cc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017d0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017d6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017d8:	2101      	movs	r1, #1
 80017da:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017dc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	2210      	movs	r2, #16
 80017e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b983      	cbnz	r3, 8001816 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80017f4:	f009 f9ca 	bl	800ab8c <HAL_RCC_GetHCLKFreq>
 80017f8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80017fa:	f008 ffff 	bl	800a7fc <HAL_RCC_GetSysClockFreq>
 80017fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001802:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001806:	f00a fa05 	bl	800bc14 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001812:	f00a b88f 	b.w	800b934 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001816:	f009 f9db 	bl	800abd0 <HAL_RCC_GetPCLK1Freq>
 800181a:	0044      	lsls	r4, r0, #1
 800181c:	e7ed      	b.n	80017fa <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	24009cec 	.word	0x24009cec
 8001828:	080270f4 	.word	0x080270f4

0800182c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	2110      	movs	r1, #16
 8001832:	f021 f9d7 	bl	8022be4 <_ZdlPvj>
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}

0800183a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800183a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800183c:	6803      	ldr	r3, [r0, #0]
{
 800183e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001840:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001842:	b131      	cbz	r1, 8001852 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001844:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001846:	4798      	blx	r3
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1b5b      	subs	r3, r3, r5
 800184c:	4403      	add	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001852:	4798      	blx	r3
 8001854:	60a0      	str	r0, [r4, #8]
}
 8001856:	e7fb      	b.n	8001850 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001858 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001858:	4770      	bx	lr
	...

0800185c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001860:	460f      	mov	r7, r1
 8001862:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001864:	781d      	ldrb	r5, [r3, #0]
 8001866:	b915      	cbnz	r5, 800186e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001868:	2500      	movs	r5, #0
}
 800186a:	4628      	mov	r0, r5
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800186e:	4c07      	ldr	r4, [pc, #28]	@ (800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001870:	2000      	movs	r0, #0
 8001872:	4621      	mov	r1, r4
 8001874:	f005 fa52 	bl	8006d1c <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	6033      	str	r3, [r6, #0]
            return true;
 8001886:	e7f0      	b.n	800186a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001888:	24009d48 	.word	0x24009d48
 800188c:	24009d38 	.word	0x24009d38

08001890 <_ZN20STM32TouchControllerD0Ev>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	2104      	movs	r1, #4
 8001896:	f021 f9a5 	bl	8022be4 <_ZdlPvj>
 800189a:	4620      	mov	r0, r4
 800189c:	bd10      	pop	{r4, pc}
	...

080018a0 <_ZN20STM32TouchController4initEv>:
{
 80018a0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018a8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018aa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018b4:	230c      	movs	r3, #12
 80018b6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ba:	f005 f99f 	bl	8006bfc <BSP_TS_Init>
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_ZN20STM32TouchController4initEv+0x40>)
 80018c0:	b910      	cbnz	r0, 80018c8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fb      	bne.n	80018c6 <_ZN20STM32TouchController4initEv+0x26>
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_ZN20STM32TouchController4initEv+0x44>)
 80018d0:	212e      	movs	r1, #46	@ 0x2e
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN20STM32TouchController4initEv+0x48>)
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <_ZN20STM32TouchController4initEv+0x4c>)
 80018d6:	f021 fcfb 	bl	80232d0 <__assert_func>
 80018da:	bf00      	nop
 80018dc:	24009d44 	.word	0x24009d44
 80018e0:	24009d48 	.word	0x24009d48
 80018e4:	0802445f 	.word	0x0802445f
 80018e8:	08024472 	.word	0x08024472
 80018ec:	0802449c 	.word	0x0802449c

080018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80018f0:	2803      	cmp	r0, #3
 80018f2:	d825      	bhi.n	8001940 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80018f4:	e8df f000 	tbb	[pc, r0]
 80018f8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80018fe:	2108      	movs	r1, #8
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800190a:	f006 bb1d 	b.w	8007f48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	0952      	lsrs	r2, r2, #5
 800191c:	e7f4      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
 800192c:	e7ec      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	0952      	lsrs	r2, r2, #5
 800193e:	e7e4      	b.n	800190a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	24009d4c 	.word	0x24009d4c
 8001948:	58022400 	.word	0x58022400
 800194c:	58021400 	.word	0x58021400

08001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001950:	2803      	cmp	r0, #3
 8001952:	d825      	bhi.n	80019a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001954:	e8df f000 	tbb	[pc, r0]
 8001958:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800195e:	2108      	movs	r1, #8
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	3a00      	subs	r2, #0
 8001964:	bf18      	it	ne
 8001966:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001968:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800196a:	f006 baed 	b.w	8007f48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	3a00      	subs	r2, #0
 8001978:	bf18      	it	ne
 800197a:	2201      	movne	r2, #1
 800197c:	e7f4      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
 800198c:	e7ec      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	3a00      	subs	r2, #0
 800199a:	bf18      	it	ne
 800199c:	2201      	movne	r2, #1
 800199e:	e7e4      	b.n	800196a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	24009d4c 	.word	0x24009d4c
 80019a8:	58022400 	.word	0x58022400
 80019ac:	58021400 	.word	0x58021400

080019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d811      	bhi.n	80019d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019b4:	e8df f000 	tbb	[pc, r0]
 80019b8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019bc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019c0:	f006 bac7 	b.w	8007f52 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	e7f9      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	e7f6      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019d6:	e7f3      	b.n	80019c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58021400 	.word	0x58021400

080019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80019e4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d815      	bhi.n	8001a16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80019ea:	e8df f000 	tbb	[pc, r0]
 80019ee:	0a02      	.short	0x0a02
 80019f0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019f2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f6:	f006 faa1 	bl	8007f3c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4258      	negs	r0, r3
 80019fe:	4158      	adcs	r0, r3
 8001a00:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	e7f5      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0c:	e7f2      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a14:	e7ef      	b.n	80019f6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7ef      	b.n	80019fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	58021400 	.word	0x58021400

08001a24 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	@ (8001a48 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a28:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a2a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a2c:	b2e0      	uxtb	r0, r4
 8001a2e:	f7ff ffd9 	bl	80019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a32:	b118      	cbz	r0, 8001a3c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a38:	bf18      	it	ne
 8001a3a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	3504      	adds	r5, #4
 8001a40:	2c05      	cmp	r4, #5
 8001a42:	d1f3      	bne.n	8001a2c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	24009d4c 	.word	0x24009d4c

08001a4c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a4c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a4e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a52:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 8001a58:	4770      	bx	lr

08001a5a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	4770      	bx	lr
	...

08001a60 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a60:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a62:	3900      	subs	r1, #0
 8001a64:	4b02      	ldr	r3, [pc, #8]	@ (8001a70 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a66:	bf18      	it	ne
 8001a68:	2101      	movne	r1, #1
 8001a6a:	7019      	strb	r1, [r3, #0]
    }
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	240252fb 	.word	0x240252fb

08001a74 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 8001a74:	4770      	bx	lr

08001a76 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a76:	2000      	movs	r0, #0
 8001a78:	4770      	bx	lr

08001a7a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a7a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a7c:	b10b      	cbz	r3, 8001a82 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a7e:	4608      	mov	r0, r1
 8001a80:	4718      	bx	r3
        }
    }
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a84:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a88:	4770      	bx	lr

08001a8a <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a8a:	6840      	ldr	r0, [r0, #4]
 8001a8c:	6803      	ldr	r3, [r0, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4718      	bx	r3

08001a92 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 8001a92:	4770      	bx	lr

08001a94 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8001a94:	4770      	bx	lr
	...

08001a98 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a98:	4b01      	ldr	r3, [pc, #4]	@ (8001aa0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	24009d70 	.word	0x24009d70

08001aa4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001aa4:	4770      	bx	lr

08001aa6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001aa6:	f001 bc86 	b.w	80033b6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001aaa <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001aaa:	f001 bc17 	b.w	80032dc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001aae <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001aae:	f001 bde7 	b.w	8003680 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001ab2 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001ab2:	f001 bdd9 	b.w	8003668 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001ab8 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001abc:	f001 fd9c 	bl	80035f8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ac0:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ac4:	b113      	cbz	r3, 8001acc <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001ac6:	4b02      	ldr	r3, [pc, #8]	@ (8001ad0 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
    }
}
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	2400000c 	.word	0x2400000c

08001ad4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ad4:	f001 bc0a 	b.w	80032ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001ad8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001adc:	f00d fe74 	bl	800f7c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 8001ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001aec:	4718      	bx	r3

08001aee <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001aee:	b510      	push	{r4, lr}
 8001af0:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001af2:	f00d f9cf 	bl	800ee94 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001af6:	6860      	ldr	r0, [r4, #4]
 8001af8:	6803      	ldr	r3, [r0, #0]
    }
 8001afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	4718      	bx	r3

08001b02 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001b02:	f00d b88e 	b.w	800ec22 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001b06 <_ZN11TouchGFXHALD0Ev>:
 8001b06:	b510      	push	{r4, lr}
 8001b08:	4604      	mov	r4, r0
 8001b0a:	2184      	movs	r1, #132	@ 0x84
 8001b0c:	f021 f86a 	bl	8022be4 <_ZdlPvj>
 8001b10:	4620      	mov	r0, r4
 8001b12:	bd10      	pop	{r4, pc}

08001b14 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b14:	4b02      	ldr	r3, [pc, #8]	@ (8001b20 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b1a:	f00d b8bf 	b.w	800ec9c <_ZN8touchgfx3HAL10beginFrameEv>
 8001b1e:	bf00      	nop
 8001b20:	2400000c 	.word	0x2400000c

08001b24 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b24:	b538      	push	{r3, r4, r5, lr}
 8001b26:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b28:	4d06      	ldr	r5, [pc, #24]	@ (8001b44 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b2a:	f001 fc05 	bl	8003338 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b2e:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b30:	4628      	mov	r0, r5
 8001b32:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b36:	f7ff fe35 	bl	80017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b3a:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b3c:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b3e:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b42:	bd38      	pop	{r3, r4, r5, pc}
 8001b44:	24009d60 	.word	0x24009d60

08001b48 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b48:	6803      	ldr	r3, [r0, #0]
{
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b52:	4798      	blx	r3
    enableInterrupts();
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4620      	mov	r0, r4
 8001b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b5a:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b5c:	f000 ff66 	bl	8002a2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	4620      	mov	r0, r4
 8001b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b66:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2329      	movs	r3, #41	@ 0x29
 8001b6c:	2215      	movs	r2, #21
 8001b6e:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b70:	9100      	str	r1, [sp, #0]
 8001b72:	f005 ff58 	bl	8007a26 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b76:	f000 ff59 	bl	8002a2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b80:	4798      	blx	r3
    for (;;)
 8001b82:	e7f8      	b.n	8001b76 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b84:	24009bec 	.word	0x24009bec

08001b88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
        if (requestedOrientation != nativeDisplayOrientation)
 8001b88:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
            if (DISPLAY_ROTATION == rotate0)
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b8e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b90:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b94:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b96:	428c      	cmp	r4, r1
 8001b98:	d009      	beq.n	8001bae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b9a:	b93a      	cbnz	r2, 8001bac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b9c:	490a      	ldr	r1, [pc, #40]	@ (8001bc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001ba0:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba2:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001ba4:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001ba6:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba8:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001baa:	701a      	strb	r2, [r3, #0]
    }
 8001bac:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d0fc      	beq.n	8001bac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bb2:	4a06      	ldr	r2, [pc, #24]	@ (8001bcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bb4:	4904      	ldr	r1, [pc, #16]	@ (8001bc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bb6:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bb8:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bba:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bbc:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	e7f3      	b.n	8001baa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bc2:	bf00      	nop
 8001bc4:	240252f4 	.word	0x240252f4
 8001bc8:	240252f2 	.word	0x240252f2
 8001bcc:	240252f0 	.word	0x240252f0

08001bd0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bd0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	428b      	cmp	r3, r1
 8001bd8:	d803      	bhi.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bda:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d905      	bls.n	8001bee <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001be4:	21a3      	movs	r1, #163	@ 0xa3
 8001be6:	4a07      	ldr	r2, [pc, #28]	@ (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001be8:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bea:	f021 fb71 	bl	80232d0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001bf0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001bf4:	801a      	strh	r2, [r3, #0]
    }
 8001bf6:	bd08      	pop	{r3, pc}
 8001bf8:	240252f0 	.word	0x240252f0
 8001bfc:	240252f2 	.word	0x240252f2
 8001c00:	080244e9 	.word	0x080244e9
 8001c04:	0802454c 	.word	0x0802454c
 8001c08:	0802458f 	.word	0x0802458f
 8001c0c:	240252f6 	.word	0x240252f6
 8001c10:	240252f8 	.word	0x240252f8

08001c14 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c14:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c16:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c1a:	b118      	cbz	r0, 8001c24 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c1c:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c1e:	6803      	ldr	r3, [r0, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4718      	bx	r3
    }
 8001c24:	4770      	bx	lr
	...

08001c28 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	460d      	mov	r5, r1
 8001c2c:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c30:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c32:	b935      	cbnz	r5, 8001c42 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c36:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c3c:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c3e:	f021 fb47 	bl	80232d0 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c42:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c46:	3a00      	subs	r2, #0
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c4a:	bf18      	it	ne
 8001c4c:	2201      	movne	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c50:	6803      	ldr	r3, [r0, #0]
}
 8001c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5a:	4718      	bx	r3
 8001c5c:	24009d70 	.word	0x24009d70
 8001c60:	080245e2 	.word	0x080245e2
 8001c64:	0802461a 	.word	0x0802461a
 8001c68:	0802458f 	.word	0x0802458f
 8001c6c:	240252fa 	.word	0x240252fa

08001c70 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c70:	b570      	push	{r4, r5, r6, lr}
          lcdRef(display),
 8001c72:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c76:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c78:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c82:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001c86:	2103      	movs	r1, #3
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c88:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c8a:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8001c8e:	3520      	adds	r5, #32
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c90:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c92:	8603      	strh	r3, [r0, #48]	@ 0x30
 8001c94:	b2ad      	uxth	r5, r5
          useAuxiliaryLCD(false),
 8001c96:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c9a:	6643      	str	r3, [r0, #100]	@ 0x64
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c9c:	42b5      	cmp	r5, r6
          updateMCULoad(0),
 8001c9e:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          auxiliaryLCD(0),
 8001ca2:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
          vSyncCompensationEnabled(false),
 8001ca8:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cac:	4a1b      	ldr	r2, [pc, #108]	@ (8001d1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xac>)
          buttonController(0),
 8001cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001cb2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001cb6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001cba:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cbe:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cc2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cc6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          cc_begin(0),
 8001cca:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001ccc:	6782      	str	r2, [r0, #120]	@ 0x78
          isFrontPorchEntered(false),
 8001cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd2:	f8a0 207c 	strh.w	r2, [r0, #124]	@ 0x7c
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8001cd6:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8001cda:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001cde:	fbb2 f2f1 	udiv	r2, r2, r1
 8001ce2:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
          maxBlockLines(20)
 8001ce6:	f04f 0214 	mov.w	r2, #20
 8001cea:	f8a0 2082 	strh.w	r2, [r0, #130]	@ 0x82
        instance = this;
 8001cee:	4a0c      	ldr	r2, [pc, #48]	@ (8001d20 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb0>)
 8001cf0:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb4>)
 8001cf4:	8015      	strh	r5, [r2, #0]
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb8>)
 8001cf8:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cfa:	bf28      	it	cs
 8001cfc:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xbc>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001d00:	bf38      	it	cc
 8001d02:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001d04:	8016      	strh	r6, [r2, #0]
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001d08:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001d0c:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001d0e:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc4>)
 8001d10:	7013      	strb	r3, [r2, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc8>)
 8001d14:	6003      	str	r3, [r0, #0]
}
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
 8001d18:	01000001 	.word	0x01000001
 8001d1c:	01010000 	.word	0x01010000
 8001d20:	240252fc 	.word	0x240252fc
 8001d24:	240252f0 	.word	0x240252f0
 8001d28:	240252f6 	.word	0x240252f6
 8001d2c:	240252f2 	.word	0x240252f2
 8001d30:	240252f8 	.word	0x240252f8
 8001d34:	240252f4 	.word	0x240252f4
 8001d38:	0802660c 	.word	0x0802660c

08001d3c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d3c:	2b01      	cmp	r3, #1
    {
 8001d3e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d40:	d80e      	bhi.n	8001d60 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	2215      	movs	r2, #21
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <DSI_IO_Write+0x34>)
 8001d4e:	f005 fe6a 	bl	8007a26 <HAL_DSI_ShortWrite>
 8001d52:	b118      	cbz	r0, 8001d5c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d54:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	e7fb      	b.n	8001d58 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d60:	e9cd 1200 	strd	r1, r2, [sp]
 8001d64:	4601      	mov	r1, r0
 8001d66:	2239      	movs	r2, #57	@ 0x39
 8001d68:	4801      	ldr	r0, [pc, #4]	@ (8001d70 <DSI_IO_Write+0x34>)
 8001d6a:	f005 fe6d 	bl	8007a48 <HAL_DSI_LongWrite>
 8001d6e:	e7f0      	b.n	8001d52 <DSI_IO_Write+0x16>
 8001d70:	24009bec 	.word	0x24009bec

08001d74 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d76:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d7a:	2106      	movs	r1, #6
 8001d7c:	9100      	str	r1, [sp, #0]
 8001d7e:	4601      	mov	r1, r0
 8001d80:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <DSI_IO_Read+0x24>)
 8001d82:	f005 fec1 	bl	8007b08 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d86:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d88:	bf14      	ite	ne
 8001d8a:	f06f 0007 	mvnne.w	r0, #7
 8001d8e:	2000      	moveq	r0, #0
 8001d90:	b005      	add	sp, #20
 8001d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d96:	bf00      	nop
 8001d98:	24009bec 	.word	0x24009bec

08001d9c <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d9e:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001da2:	4c0b      	ldr	r4, [pc, #44]	@ (8001dd0 <LCD_ReqTear+0x34>)
 8001da4:	2239      	movs	r2, #57	@ 0x39
 8001da6:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001da8:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001dac:	ab03      	add	r3, sp, #12
 8001dae:	4620      	mov	r0, r4
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	2344      	movs	r3, #68	@ 0x44
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2302      	movs	r3, #2
 8001db8:	f005 fe46 	bl	8007a48 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2335      	movs	r3, #53	@ 0x35
 8001dc0:	2215      	movs	r2, #21
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	9100      	str	r1, [sp, #0]
 8001dc6:	f005 fe2e 	bl	8007a26 <HAL_DSI_ShortWrite>
    }
 8001dca:	b004      	add	sp, #16
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	bf00      	nop
 8001dd0:	24009bec 	.word	0x24009bec

08001dd4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001dd4:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001dd6:	f7ff ffe1 	bl	8001d9c <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dda:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001ddc:	2202      	movs	r2, #2
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001de4:	2201      	movs	r2, #1
 8001de6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001dea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001df6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dfa:	f042 0202 	orr.w	r2, r2, #2
 8001dfe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001e02:	2203      	movs	r2, #3
 8001e04:	4b02      	ldr	r3, [pc, #8]	@ (8001e10 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001e06:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e08:	bd08      	pop	{r3, pc}
 8001e0a:	bf00      	nop
 8001e0c:	24009bec 	.word	0x24009bec
 8001e10:	50001000 	.word	0x50001000

08001e14 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001e14:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <LCD_ReqEnable+0x20>)
    {
 8001e16:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001e18:	7819      	ldrb	r1, [r3, #0]
 8001e1a:	b939      	cbnz	r1, 8001e2c <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001e1c:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001e20:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001e22:	2329      	movs	r3, #41	@ 0x29
 8001e24:	2215      	movs	r2, #21
 8001e26:	9100      	str	r1, [sp, #0]
 8001e28:	f005 fdfd 	bl	8007a26 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e2c:	b003      	add	sp, #12
 8001e2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e32:	bf00      	nop
 8001e34:	24009d5c 	.word	0x24009d5c
 8001e38:	24009bec 	.word	0x24009bec

08001e3c <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e3e:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	232a      	movs	r3, #42	@ 0x2a
 8001e44:	2239      	movs	r2, #57	@ 0x39
 8001e46:	2100      	movs	r1, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	4803      	ldr	r0, [pc, #12]	@ (8001e5c <LCD_SetUpdateRegionLeft+0x20>)
 8001e4e:	f005 fdfb 	bl	8007a48 <HAL_DSI_LongWrite>
    }
 8001e52:	b003      	add	sp, #12
 8001e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e58:	24000008 	.word	0x24000008
 8001e5c:	24009bec 	.word	0x24009bec

08001e60 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e62:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	232a      	movs	r3, #42	@ 0x2a
 8001e68:	2239      	movs	r2, #57	@ 0x39
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2304      	movs	r3, #4
 8001e70:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <LCD_SetUpdateRegionRight+0x20>)
 8001e72:	f005 fde9 	bl	8007a48 <HAL_DSI_LongWrite>
    }
 8001e76:	b003      	add	sp, #12
 8001e78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e7c:	24000004 	.word	0x24000004
 8001e80:	24009bec 	.word	0x24009bec

08001e84 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e84:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e86:	4d15      	ldr	r5, [pc, #84]	@ (8001edc <HAL_DSI_TearingEffectCallback+0x58>)
 8001e88:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff fd30 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e90:	682b      	ldr	r3, [r5, #0]
        vSyncCnt++;
 8001e92:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8001e96:	3201      	adds	r2, #1
 8001e98:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001ea2:	f000 fdb7 	bl	8002a14 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_DSI_TearingEffectCallback+0x5c>)
        lockDMAToPorch = enableLock;
 8001ea8:	682a      	ldr	r2, [r5, #0]
 8001eaa:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001eb2:	b173      	cbz	r3, 8001ed2 <HAL_DSI_TearingEffectCallback+0x4e>
 8001eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8001ee4 <HAL_DSI_TearingEffectCallback+0x60>)
 8001eb6:	782b      	ldrb	r3, [r5, #0]
 8001eb8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001ebc:	b94b      	cbnz	r3, 8001ed2 <HAL_DSI_TearingEffectCallback+0x4e>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_DSI_TearingEffectCallback+0x64>)
 8001ec0:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001ec2:	f7ff ffbb 	bl	8001e3c <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f005 fd9d 	bl	8007a06 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001ed0:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ed2:	2000      	movs	r0, #0
    }
 8001ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ed8:	f7ff bd3a 	b.w	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001edc:	240252fc 	.word	0x240252fc
 8001ee0:	2400000c 	.word	0x2400000c
 8001ee4:	24009d78 	.word	0x24009d78
 8001ee8:	24009d74 	.word	0x24009d74

08001eec <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ef0:	4e49      	ldr	r6, [pc, #292]	@ (8002018 <HAL_DSI_EndOfRefreshCallback+0x12c>)
    {
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001ef6:	7833      	ldrb	r3, [r6, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8089 	beq.w	8002010 <HAL_DSI_EndOfRefreshCallback+0x124>
        {
            if (updateRegion == 0)
 8001efe:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 800203c <HAL_DSI_EndOfRefreshCallback+0x150>
 8001f02:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8002040 <HAL_DSI_EndOfRefreshCallback+0x154>
 8001f06:	f8d9 5000 	ldr.w	r5, [r9]
 8001f0a:	4f44      	ldr	r7, [pc, #272]	@ (800201c <HAL_DSI_EndOfRefreshCallback+0x130>)
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	d13e      	bne.n	8001f8e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001f10:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f12:	4e43      	ldr	r6, [pc, #268]	@ (8002020 <HAL_DSI_EndOfRefreshCallback+0x134>)
                HAL_Delay(1);
 8001f14:	f005 f80e 	bl	8006f34 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	9500      	str	r5, [sp, #0]
 8001f1c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f20:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f22:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f26:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f2a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f32:	f002 0208 	and.w	r2, r2, #8
 8001f36:	9200      	str	r2, [sp, #0]
 8001f38:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f3a:	f8d8 2000 	ldr.w	r2, [r8]
 8001f3e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f42:	4838      	ldr	r0, [pc, #224]	@ (8002024 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f44:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f46:	4e38      	ldr	r6, [pc, #224]	@ (8002028 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f48:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f4a:	4838      	ldr	r0, [pc, #224]	@ (800202c <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f4c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f50:	4837      	ldr	r0, [pc, #220]	@ (8002030 <HAL_DSI_EndOfRefreshCallback+0x144>)
 8001f52:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f56:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f58:	f041 0101 	orr.w	r1, r1, #1
 8001f5c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f5e:	9501      	str	r5, [sp, #4]
 8001f60:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f64:	f042 0208 	orr.w	r2, r2, #8
 8001f68:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f78:	f7ff ff72 	bl	8001e60 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f7c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f7e:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f80:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f84:	b005      	add	sp, #20
 8001f86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f8a:	f005 bd3c 	b.w	8007a06 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f92:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f94:	9502      	str	r5, [sp, #8]
 8001f96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f9a:	4c26      	ldr	r4, [pc, #152]	@ (8002034 <HAL_DSI_EndOfRefreshCallback+0x148>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f9c:	f022 0208 	bic.w	r2, r2, #8
 8001fa0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fa4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fa8:	f002 0208 	and.w	r2, r2, #8
 8001fac:	9202      	str	r2, [sp, #8]
 8001fae:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001fb0:	f8d8 2000 	ldr.w	r2, [r8]
 8001fb4:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001fb8:	481a      	ldr	r0, [pc, #104]	@ (8002024 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001fba:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001fbc:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001fc0:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001fc2:	481a      	ldr	r0, [pc, #104]	@ (800202c <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001fc4:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001fc8:	4819      	ldr	r0, [pc, #100]	@ (8002030 <HAL_DSI_EndOfRefreshCallback+0x144>)
 8001fca:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fce:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fd0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fd2:	f041 0101 	orr.w	r1, r1, #1
 8001fd6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fd8:	9503      	str	r5, [sp, #12]
 8001fda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fde:	f042 0208 	orr.w	r2, r2, #8
 8001fe2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	9303      	str	r3, [sp, #12]
 8001ff0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001ff2:	f7ff fcad 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001ff6:	f7ff ff0d 	bl	8001e14 <LCD_ReqEnable>
        return instance;
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_DSI_EndOfRefreshCallback+0x14c>)
                displayRefreshing = false;
 8001ffc:	7035      	strb	r5, [r6, #0]
 8001ffe:	681c      	ldr	r4, [r3, #0]
                if (HAL::getInstance())
 8002000:	b134      	cbz	r4, 8002010 <HAL_DSI_EndOfRefreshCallback+0x124>
        allowDMATransfers();
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	4620      	mov	r0, r4
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4798      	blx	r3
        isFrontPorchEntered = true;
 800200a:	2301      	movs	r3, #1
 800200c:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    }
 8002010:	b005      	add	sp, #20
 8002012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002016:	bf00      	nop
 8002018:	24009d78 	.word	0x24009d78
 800201c:	24009d70 	.word	0x24009d70
 8002020:	01b201e2 	.word	0x01b201e2
 8002024:	50001000 	.word	0x50001000
 8002028:	019201e3 	.word	0x019201e3
 800202c:	01920003 	.word	0x01920003
 8002030:	09c004b3 	.word	0x09c004b3
 8002034:	019201e2 	.word	0x019201e2
 8002038:	240252fc 	.word	0x240252fc
 800203c:	24009d74 	.word	0x24009d74
 8002040:	24009a14 	.word	0x24009a14

08002044 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002044:	4601      	mov	r1, r0
 8002046:	b508      	push	{r3, lr}
        return instance;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <IdleTaskHook+0x14>)
 800204a:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 800204c:	b101      	cbz	r1, 8002050 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800204e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002050:	f00d fbd4 	bl	800f7fc <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002054:	2001      	movs	r0, #1
 8002056:	bd08      	pop	{r3, pc}
 8002058:	240252fc 	.word	0x240252fc

0800205c <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800205e:	2200      	movs	r2, #0
 8002060:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	4a02      	ldr	r2, [pc, #8]	@ (8002070 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002066:	601a      	str	r2, [r3, #0]

}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	24009d60 	.word	0x24009d60
 8002070:	080265cc 	.word	0x080265cc

08002074 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002074:	6940      	ldr	r0, [r0, #20]
 8002076:	4770      	bx	lr

08002078 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002078:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 800207c:	4770      	bx	lr

0800207e <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800207e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002080:	b923      	cbnz	r3, 800208c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8002082:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002084:	3800      	subs	r0, #0
 8002086:	bf18      	it	ne
 8002088:	2001      	movne	r0, #1
 800208a:	4770      	bx	lr
 800208c:	2001      	movs	r0, #1
}
 800208e:	4770      	bx	lr

08002090 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002090:	6880      	ldr	r0, [r0, #8]
 8002092:	4770      	bx	lr

08002094 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002094:	4770      	bx	lr

08002096 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002096:	3004      	adds	r0, #4
{
 8002098:	b510      	push	{r4, lr}
 800209a:	460c      	mov	r4, r1
    *data = videoInfo;
 800209c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800209e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80020a4:	4770      	bx	lr
	...

080020a8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80020a8:	b508      	push	{r3, lr}
    assert(0);
 80020aa:	4a03      	ldr	r2, [pc, #12]	@ (80020b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80020ac:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 80020b0:	4b02      	ldr	r3, [pc, #8]	@ (80020bc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80020b2:	4803      	ldr	r0, [pc, #12]	@ (80020c0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80020b4:	f021 f90c 	bl	80232d0 <__assert_func>
 80020b8:	08024668 	.word	0x08024668
 80020bc:	0802624f 	.word	0x0802624f
 80020c0:	080246c3 	.word	0x080246c3

080020c4 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80020c4:	b510      	push	{r4, lr}
 80020c6:	4604      	mov	r4, r0
 80020c8:	2148      	movs	r1, #72	@ 0x48
 80020ca:	f020 fd8b 	bl	8022be4 <_ZdlPvj>
 80020ce:	4620      	mov	r0, r4
 80020d0:	bd10      	pop	{r4, pc}
	...

080020d4 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020d4:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020d8:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020da:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020dc:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020de:	6003      	str	r3, [r0, #0]
 80020e0:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020e2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020e6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020ea:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020ee:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020f2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020f6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020fa:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020fe:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 8002102:	2001      	movs	r0, #1
 8002104:	f009 ff46 	bl	800bf94 <osSemaphoreNew>
 8002108:	4b02      	ldr	r3, [pc, #8]	@ (8002114 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 800210a:	6018      	str	r0, [r3, #0]
}
 800210c:	4620      	mov	r0, r4
 800210e:	bd10      	pop	{r4, pc}
 8002110:	080266f8 	.word	0x080266f8
 8002114:	24009d98 	.word	0x24009d98

08002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002118:	b410      	push	{r4}
 800211a:	460c      	mov	r4, r1
 800211c:	4611      	mov	r1, r2
 800211e:	461a      	mov	r2, r3
    if (reader != 0)
 8002120:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002122:	b13b      	cbz	r3, 8002134 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002124:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002126:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002128:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800212a:	4420      	add	r0, r4
}
 800212c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002130:	f021 bb72 	b.w	8023818 <strncmp>
        src = (const char*)movieData + offset;
 8002134:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002136:	e7f8      	b.n	800212a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002138 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002138:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800213a:	b510      	push	{r4, lr}
    if (reader != 0)
 800213c:	b173      	cbz	r3, 800215c <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800213e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002140:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002142:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002144:	1853      	adds	r3, r2, r1
 8002146:	5c52      	ldrb	r2, [r2, r1]
 8002148:	7898      	ldrb	r0, [r3, #2]
 800214a:	785c      	ldrb	r4, [r3, #1]
 800214c:	0400      	lsls	r0, r0, #16
 800214e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002152:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002154:	78db      	ldrb	r3, [r3, #3]
 8002156:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800215a:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 800215c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800215e:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002160:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002162:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002164:	7898      	ldrb	r0, [r3, #2]
 8002166:	0400      	lsls	r0, r0, #16
 8002168:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800216c:	e7f1      	b.n	8002152 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800216e <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800216e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002170:	b143      	cbz	r3, 8002184 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002172:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002174:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002176:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002178:	185a      	adds	r2, r3, r1
 800217a:	5c58      	ldrb	r0, [r3, r1]
 800217c:	7852      	ldrb	r2, [r2, #1]
 800217e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002182:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002184:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002186:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002188:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 800218a:	7853      	ldrb	r3, [r2, #1]
 800218c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002190:	4770      	bx	lr
	...

08002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	4604      	mov	r4, r0
    if (reader != 0)
 8002198:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800219a:	460d      	mov	r5, r1
 800219c:	4616      	mov	r6, r2
    if (reader != 0)
 800219e:	b1d8      	cbz	r0, 80021d8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80021a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d208      	bcs.n	80021b8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80021a6:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80021aa:	21a0      	movs	r1, #160	@ 0xa0
 80021ac:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80021ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80021b2:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80021b4:	f021 f88c 	bl	80232d0 <__assert_func>
        reader->seek(offset);
 80021b8:	6803      	ldr	r3, [r0, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80021be:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80021c0:	4632      	mov	r2, r6
 80021c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021c4:	6803      	ldr	r3, [r0, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	4798      	blx	r3
 80021ca:	b910      	cbnz	r0, 80021d2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80021cc:	230d      	movs	r3, #13
 80021ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80021d2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021d4:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021d8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021da:	4408      	add	r0, r1
 80021dc:	e7fb      	b.n	80021d6 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021de:	bf00      	nop
 80021e0:	0802472d 	.word	0x0802472d
 80021e4:	080246c3 	.word	0x080246c3
 80021e8:	0802471a 	.word	0x0802471a

080021ec <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021f0:	6943      	ldr	r3, [r0, #20]
{
 80021f2:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021f4:	b92b      	cbnz	r3, 8002202 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021f6:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021f8:	21e6      	movs	r1, #230	@ 0xe6
 80021fa:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021fc:	4822      	ldr	r0, [pc, #136]	@ (8002288 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021fe:	f021 f867 	bl	80232d0 <__assert_func>
    readData(currentMovieOffset, 8);
 8002202:	2208      	movs	r2, #8
 8002204:	6981      	ldr	r1, [r0, #24]
 8002206:	f7ff ffc5 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800220a:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800220c:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002210:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002214:	3104      	adds	r1, #4
 8002216:	4620      	mov	r0, r4
 8002218:	f7ff ff8e 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800221c:	69a3      	ldr	r3, [r4, #24]
 800221e:	4418      	add	r0, r3
 8002220:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002222:	f100 0208 	add.w	r2, r0, #8
 8002226:	429a      	cmp	r2, r3
 8002228:	d306      	bcc.n	8002238 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800222a:	2301      	movs	r3, #1
    return false;
 800222c:	2000      	movs	r0, #0
    frameNumber = 1;
 800222e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002230:	6a23      	ldr	r3, [r4, #32]
 8002232:	61a3      	str	r3, [r4, #24]
}
 8002234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002238:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800223a:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800223e:	2208      	movs	r2, #8
 8002240:	4620      	mov	r0, r4
        frameNumber++;
 8002242:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002244:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002248:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800224a:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800224c:	f7ff ffa2 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002250:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002254:	4620      	mov	r0, r4
 8002256:	4649      	mov	r1, r9
 8002258:	f7ff ff89 	bl	800216e <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800225c:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002260:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff ff83 	bl	800216e <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002268:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800226c:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800226e:	4620      	mov	r0, r4
 8002270:	f7ff ff62 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002274:	45b0      	cmp	r8, r6
 8002276:	d1d1      	bne.n	800221c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002278:	42bd      	cmp	r5, r7
 800227a:	d1cf      	bne.n	800221c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 800227c:	2001      	movs	r0, #1
 800227e:	e7d9      	b.n	8002234 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002280:	0802476f 	.word	0x0802476f
 8002284:	080247b8 	.word	0x080247b8
 8002288:	080246c3 	.word	0x080246c3

0800228c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 800228c:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800228e:	6803      	ldr	r3, [r0, #0]
 8002290:	bf38      	it	cc
 8002292:	2101      	movcc	r1, #1
 8002294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002296:	b570      	push	{r4, r5, r6, lr}
 8002298:	460d      	mov	r5, r1
 800229a:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 800229c:	4798      	blx	r3
 800229e:	42a8      	cmp	r0, r5
 80022a0:	d204      	bcs.n	80022ac <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	4620      	mov	r0, r4
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	4798      	blx	r3
 80022aa:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80022ac:	1e6b      	subs	r3, r5, #1
 80022ae:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80022b0:	2210      	movs	r2, #16
 80022b2:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80022b4:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80022b8:	f106 0108 	add.w	r1, r6, #8
 80022bc:	f7ff ff6a 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80022c0:	f106 0110 	add.w	r1, r6, #16
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ff37 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80022ca:	6a23      	ldr	r3, [r4, #32]
 80022cc:	3b04      	subs	r3, #4
 80022ce:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80022d0:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080022d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022d8:	2100      	movs	r1, #0
    readData(0, 72);
 80022da:	2248      	movs	r2, #72	@ 0x48
{
 80022dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e0:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022e2:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022e4:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022e8:	f7ff ff54 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022ec:	69a6      	ldr	r6, [r4, #24]
 80022ee:	2304      	movs	r3, #4
 80022f0:	4a63      	ldr	r2, [pc, #396]	@ (8002480 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022f2:	4631      	mov	r1, r6
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff ff0f 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022fa:	b148      	cbz	r0, 8002310 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022fc:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022fe:	4a61      	ldr	r2, [pc, #388]	@ (8002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002300:	f44f 7197 	mov.w	r1, #302	@ 0x12e
        lastError = AVI_ERROR_NOT_RIFF;
 8002304:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002308:	4b5f      	ldr	r3, [pc, #380]	@ (8002488 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 800230a:	4860      	ldr	r0, [pc, #384]	@ (800248c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800230c:	f020 ffe0 	bl	80232d0 <__assert_func>
    currentMovieOffset += 8;
 8002310:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002314:	2304      	movs	r3, #4
 8002316:	4a5e      	ldr	r2, [pc, #376]	@ (8002490 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002318:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800231a:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800231c:	f7ff fefc 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002320:	b138      	cbz	r0, 8002332 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002322:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002324:	4a57      	ldr	r2, [pc, #348]	@ (8002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002326:	f44f 719b 	mov.w	r1, #310	@ 0x136
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800232a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800232e:	4b59      	ldr	r3, [pc, #356]	@ (8002494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002330:	e7eb      	b.n	800230a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002332:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002336:	2304      	movs	r3, #4
 8002338:	4a57      	ldr	r2, [pc, #348]	@ (8002498 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800233a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800233c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800233e:	f7ff feeb 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002342:	4607      	mov	r7, r0
 8002344:	b138      	cbz	r0, 8002356 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002346:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002348:	4a4e      	ldr	r2, [pc, #312]	@ (8002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800234a:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800234e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002352:	4b52      	ldr	r3, [pc, #328]	@ (800249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002354:	e7d9      	b.n	800230a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002356:	f106 0110 	add.w	r1, r6, #16
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff feec 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002360:	4605      	mov	r5, r0
 8002362:	b920      	cbnz	r0, 800236e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002364:	4b4e      	ldr	r3, [pc, #312]	@ (80024a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002366:	f240 1143 	movw	r1, #323	@ 0x143
 800236a:	4a46      	ldr	r2, [pc, #280]	@ (8002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800236c:	e7cd      	b.n	800230a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800236e:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 8002372:	2304      	movs	r3, #4
 8002374:	4a4b      	ldr	r2, [pc, #300]	@ (80024a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002376:	4620      	mov	r0, r4
 8002378:	4641      	mov	r1, r8
 800237a:	f7ff fecd 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800237e:	2800      	cmp	r0, #0
 8002380:	d049      	beq.n	8002416 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002382:	2306      	movs	r3, #6
 8002384:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002388:	2304      	movs	r3, #4
 800238a:	4a47      	ldr	r2, [pc, #284]	@ (80024a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800238c:	f106 0118 	add.w	r1, r6, #24
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff fec1 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002396:	2800      	cmp	r0, #0
 8002398:	d03f      	beq.n	800241a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800239a:	2307      	movs	r3, #7
 800239c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80023a0:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80023a2:	4f42      	ldr	r7, [pc, #264]	@ (80024ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80023a4:	220c      	movs	r2, #12
 80023a6:	4620      	mov	r0, r4
 80023a8:	4629      	mov	r1, r5
 80023aa:	f7ff fef3 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80023ae:	f105 0608 	add.w	r6, r5, #8
 80023b2:	2304      	movs	r3, #4
 80023b4:	463a      	mov	r2, r7
 80023b6:	4620      	mov	r0, r4
 80023b8:	4631      	mov	r1, r6
 80023ba:	f7ff fead 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023be:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d048      	beq.n	8002458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d148      	bne.n	800245c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80023ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80023cc:	42ab      	cmp	r3, r5
 80023ce:	d849      	bhi.n	8002464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023d0:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023d4:	3504      	adds	r5, #4
 80023d6:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023d8:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023da:	4629      	mov	r1, r5
 80023dc:	f7ff feac 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023e0:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023e2:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023e4:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023e6:	4620      	mov	r0, r4
 80023e8:	f7ff fea6 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023ec:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023ee:	2204      	movs	r2, #4
 80023f0:	4620      	mov	r0, r4
 80023f2:	4631      	mov	r1, r6
 80023f4:	f7ff fece 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023f8:	2304      	movs	r3, #4
 80023fa:	4a2d      	ldr	r2, [pc, #180]	@ (80024b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023fc:	4631      	mov	r1, r6
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff fe8a 	bl	8002118 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002404:	2800      	cmp	r0, #0
 8002406:	d138      	bne.n	800247a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002408:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800240a:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 800240c:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800240e:	69a3      	ldr	r3, [r4, #24]
 8002410:	6223      	str	r3, [r4, #32]
}
 8002412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002416:	2701      	movs	r7, #1
 8002418:	e7b6      	b.n	8002388 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800241a:	2f00      	cmp	r7, #0
 800241c:	d0c0      	beq.n	80023a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800241e:	f106 0120 	add.w	r1, r6, #32
 8002422:	4620      	mov	r0, r4
 8002424:	f7ff fe88 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002428:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800242c:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002430:	fbb0 f0f3 	udiv	r0, r0, r3
 8002434:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002436:	4620      	mov	r0, r4
 8002438:	f7ff fe7e 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800243c:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002440:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff fe78 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002448:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800244c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff fe72 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002454:	6120      	str	r0, [r4, #16]
 8002456:	e7a3      	b.n	80023a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0b9      	beq.n	80023d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800245c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800245e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002462:	e7d6      	b.n	8002412 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002464:	1d29      	adds	r1, r5, #4
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff fe66 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 800246c:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800246e:	220c      	movs	r2, #12
 8002470:	4620      	mov	r0, r4
 8002472:	4629      	mov	r1, r5
 8002474:	f7ff fe8e 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002478:	e799      	b.n	80023ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800247a:	230b      	movs	r3, #11
 800247c:	e7ef      	b.n	800245e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800247e:	bf00      	nop
 8002480:	080247eb 	.word	0x080247eb
 8002484:	08024809 	.word	0x08024809
 8002488:	080247f0 	.word	0x080247f0
 800248c:	080246c3 	.word	0x080246c3
 8002490:	08024836 	.word	0x08024836
 8002494:	0802483b 	.word	0x0802483b
 8002498:	08024853 	.word	0x08024853
 800249c:	08024858 	.word	0x08024858
 80024a0:	0802486e 	.word	0x0802486e
 80024a4:	0802487a 	.word	0x0802487a
 80024a8:	0802487f 	.word	0x0802487f
 80024ac:	08024884 	.word	0x08024884
 80024b0:	08024889 	.word	0x08024889

080024b4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80024b4:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80024b8:	2200      	movs	r2, #0
 80024ba:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80024bc:	f7ff bf0c 	b.w	80022d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080024c0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80024c0:	b510      	push	{r4, lr}
    movieData = 0;
 80024c2:	2300      	movs	r3, #0
{
 80024c4:	4604      	mov	r4, r0
 80024c6:	4608      	mov	r0, r1
    movieData = 0;
 80024c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80024ca:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80024cc:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4798      	blx	r3
 80024d2:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024d4:	4620      	mov	r0, r4
}
 80024d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024da:	f7ff befd 	b.w	80022d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024e0 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JPEG_output_is_paused = 0;
 80024e2:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <JPEG_Decode_DMA+0x50>)
 80024e4:	2400      	movs	r4, #0
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024e6:	4d13      	ldr	r5, [pc, #76]	@ (8002534 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
 80024e8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024ea:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <JPEG_Decode_DMA+0x58>)
 80024ec:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <JPEG_Decode_DMA+0x5c>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024f0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024f2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024f4:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <JPEG_Decode_DMA+0x60>)
 80024f6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024f8:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <JPEG_Decode_DMA+0x64>)
 80024fa:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <JPEG_Decode_DMA+0x68>)
 80024fe:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <JPEG_Decode_DMA+0x6c>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002502:	682a      	ldr	r2, [r5, #0]
 8002504:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002508:	701c      	strb	r4, [r3, #0]
 800250a:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 800250c:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002510:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002514:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002518:	4a0d      	ldr	r2, [pc, #52]	@ (8002550 <JPEG_Decode_DMA+0x70>)
 800251a:	68d2      	ldr	r2, [r2, #12]
 800251c:	436a      	muls	r2, r5
 800251e:	9200      	str	r2, [sp, #0]
 8002520:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f006 fc17 	bl	8008d58 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 800252a:	4620      	mov	r0, r4
 800252c:	b003      	add	sp, #12
 800252e:	bd30      	pop	{r4, r5, pc}
 8002530:	24009db0 	.word	0x24009db0
 8002534:	24009da0 	.word	0x24009da0
 8002538:	24009d94 	.word	0x24009d94
 800253c:	24009dc0 	.word	0x24009dc0
 8002540:	24009db8 	.word	0x24009db8
 8002544:	24009dbc 	.word	0x24009dbc
 8002548:	24009d9c 	.word	0x24009d9c
 800254c:	24000010 	.word	0x24000010
 8002550:	24009d7c 	.word	0x24009d7c

08002554 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002554:	684b      	ldr	r3, [r1, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d115      	bne.n	8002586 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800255a:	68cb      	ldr	r3, [r1, #12]
 800255c:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800255e:	bf1e      	ittt	ne
 8002560:	f023 030f 	bicne.w	r3, r3, #15
 8002564:	3310      	addne	r3, #16
 8002566:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002568:	688b      	ldr	r3, [r1, #8]
 800256a:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800256c:	bf1e      	ittt	ne
 800256e:	f023 030f 	bicne.w	r3, r3, #15
 8002572:	3310      	addne	r3, #16
 8002574:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002576:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002578:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800257a:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800257c:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 800257e:	4353      	muls	r3, r2
 8002580:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <HAL_JPEG_InfoReadyCallback+0x68>)
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002586:	2b02      	cmp	r3, #2
 8002588:	d10e      	bne.n	80025a8 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800258a:	68cb      	ldr	r3, [r1, #12]
 800258c:	071a      	lsls	r2, r3, #28
 800258e:	d003      	beq.n	8002598 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002590:	f023 030f 	bic.w	r3, r3, #15
 8002594:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002596:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002598:	688b      	ldr	r3, [r1, #8]
 800259a:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800259c:	bf1e      	ittt	ne
 800259e:	f023 0307 	bicne.w	r3, r3, #7
 80025a2:	3308      	addne	r3, #8
 80025a4:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80025a6:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1fc      	bne.n	80025a6 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80025ac:	68cb      	ldr	r3, [r1, #12]
 80025ae:	0758      	lsls	r0, r3, #29
 80025b0:	d0f2      	beq.n	8002598 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80025b2:	f023 0307 	bic.w	r3, r3, #7
 80025b6:	3308      	adds	r3, #8
 80025b8:	e7ed      	b.n	8002596 <HAL_JPEG_InfoReadyCallback+0x42>
 80025ba:	bf00      	nop
 80025bc:	24009da8 	.word	0x24009da8

080025c0 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80025c0:	4a0b      	ldr	r2, [pc, #44]	@ (80025f0 <HAL_JPEG_GetDataCallback+0x30>)
 80025c2:	6813      	ldr	r3, [r2, #0]
 80025c4:	440b      	add	r3, r1
    {
 80025c6:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80025c8:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_JPEG_GetDataCallback+0x34>)
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d20c      	bcs.n	80025ec <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025d2:	4c09      	ldr	r4, [pc, #36]	@ (80025f8 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025d4:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025d6:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025d8:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025dc:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025de:	bf28      	it	cs
 80025e0:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025e4:	6021      	str	r1, [r4, #0]
        }
    }
 80025e6:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025e8:	f006 bc18 	b.w	8008e1c <HAL_JPEG_ConfigInputBuffer>
    }
 80025ec:	bc30      	pop	{r4, r5}
 80025ee:	4770      	bx	lr
 80025f0:	24009dc0 	.word	0x24009dc0
 80025f4:	24009dbc 	.word	0x24009dbc
 80025f8:	24009db8 	.word	0x24009db8

080025fc <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025fe:	4c20      	ldr	r4, [pc, #128]	@ (8002680 <HAL_JPEG_DataReadyCallback+0x84>)
 8002600:	2101      	movs	r1, #1
 8002602:	4d20      	ldr	r5, [pc, #128]	@ (8002684 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002604:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002606:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002608:	4f1f      	ldr	r7, [pc, #124]	@ (8002688 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002614:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002616:	4b1d      	ldr	r3, [pc, #116]	@ (800268c <HAL_JPEG_DataReadyCallback+0x90>)
 8002618:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002620:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68f9      	ldr	r1, [r7, #12]
 8002626:	440a      	add	r2, r1
 8002628:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d901      	bls.n	800263a <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	5ceb      	ldrb	r3, [r5, r3]
 8002640:	b133      	cbz	r3, 8002650 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002642:	2102      	movs	r1, #2
 8002644:	4630      	mov	r0, r6
 8002646:	f006 fbbb 	bl	8008dc0 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_JPEG_DataReadyCallback+0x94>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002650:	6822      	ldr	r2, [r4, #0]
 8002652:	4630      	mov	r0, r6
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800265a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800265e:	6869      	ldr	r1, [r5, #4]
 8002660:	435a      	muls	r2, r3
 8002662:	f006 fbde 	bl	8008e22 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_JPEG_DataReadyCallback+0x98>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	7a1a      	ldrb	r2, [r3, #8]
 800266c:	b93a      	cbnz	r2, 800267e <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 800266e:	7a9b      	ldrb	r3, [r3, #10]
 8002670:	b92b      	cbnz	r3, 800267e <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002674:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800267a:	f009 bd01 	b.w	800c080 <osSemaphoreRelease>
    }
 800267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002680:	24009da0 	.word	0x24009da0
 8002684:	24000010 	.word	0x24000010
 8002688:	24009d7c 	.word	0x24009d7c
 800268c:	24009d9c 	.word	0x24009d9c
 8002690:	24009db0 	.word	0x24009db0
 8002694:	24009da4 	.word	0x24009da4
 8002698:	24009d98 	.word	0x24009d98

0800269c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 800269c:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 800269e:	e7fe      	b.n	800269e <HAL_JPEG_ErrorCallback+0x2>

080026a0 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 80026a0:	4b01      	ldr	r3, [pc, #4]	@ (80026a8 <HAL_JPEG_DecodeCpltCallback+0x8>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
    }
 80026a6:	4770      	bx	lr
 80026a8:	24009db4 	.word	0x24009db4

080026ac <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 80026ac:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80026ae:	4d16      	ldr	r5, [pc, #88]	@ (8002708 <JPEG_OutputHandler+0x5c>)
{
 80026b0:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80026b2:	682b      	ldr	r3, [r5, #0]
 80026b4:	b113      	cbz	r3, 80026bc <JPEG_OutputHandler+0x10>
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <JPEG_OutputHandler+0x60>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	bb1b      	cbnz	r3, 8002704 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <JPEG_OutputHandler+0x64>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	7a03      	ldrb	r3, [r0, #8]
 80026c2:	b963      	cbnz	r3, 80026de <JPEG_OutputHandler+0x32>
 80026c4:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <JPEG_OutputHandler+0x68>)
 80026c6:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <JPEG_OutputHandler+0x6c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <JPEG_OutputHandler+0x32>
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <JPEG_OutputHandler+0x60>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b913      	cbnz	r3, 80026de <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026d8:	6803      	ldr	r3, [r0, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026de:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <JPEG_OutputHandler+0x70>)
 80026e0:	6813      	ldr	r3, [r2, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10c      	bne.n	8002700 <JPEG_OutputHandler+0x54>
 80026e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <JPEG_OutputHandler+0x74>)
 80026e8:	490b      	ldr	r1, [pc, #44]	@ (8002718 <JPEG_OutputHandler+0x6c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	b933      	cbnz	r3, 8002700 <JPEG_OutputHandler+0x54>
 80026f2:	682b      	ldr	r3, [r5, #0]
 80026f4:	b923      	cbnz	r3, 8002700 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026f6:	2102      	movs	r1, #2
 80026f8:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026fa:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026fc:	f006 fdbd 	bl	800927a <HAL_JPEG_Resume>
        return 1;
 8002700:	2002      	movs	r0, #2
    }

    return 2;
}
 8002702:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002704:	2001      	movs	r0, #1
 8002706:	e7fc      	b.n	8002702 <JPEG_OutputHandler+0x56>
 8002708:	24009db4 	.word	0x24009db4
 800270c:	24009d90 	.word	0x24009d90
 8002710:	24009da4 	.word	0x24009da4
 8002714:	24009d94 	.word	0x24009d94
 8002718:	24000010 	.word	0x24000010
 800271c:	24009db0 	.word	0x24009db0
 8002720:	24009da0 	.word	0x24009da0

08002724 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4605      	mov	r5, r0
    if (length == 0)
 8002728:	2a00      	cmp	r2, #0
 800272a:	d037      	beq.n	800279c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
    if (outputBuffer) /* only decode if buffers are assigned. */
 800272c:	2b00      	cmp	r3, #0
 800272e:	d035      	beq.n	800279c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002730:	481b      	ldr	r0, [pc, #108]	@ (80027a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002732:	2403      	movs	r4, #3
 8002734:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002736:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002738:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800273a:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800273e:	bf18      	it	ne
 8002740:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002744:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002746:	bf18      	it	ne
 8002748:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800274a:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800274c:	0924      	lsrs	r4, r4, #4
 800274e:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002750:	692c      	ldr	r4, [r5, #16]
 8002752:	f014 040f 	ands.w	r4, r4, #15
 8002756:	bf18      	it	ne
 8002758:	f1c4 0410 	rsbne	r4, r4, #16
 800275c:	6084      	str	r4, [r0, #8]
        FrameBufferAddress = outputBuffer;
 800275e:	4811      	ldr	r0, [pc, #68]	@ (80027a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002760:	4c11      	ldr	r4, [pc, #68]	@ (80027a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
        FrameBufferAddress = outputBuffer;
 8002762:	6003      	str	r3, [r0, #0]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002764:	4811      	ldr	r0, [pc, #68]	@ (80027ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002766:	f7ff febb 	bl	80024e0 <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 800276a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800276c:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800276e:	4d0f      	ldr	r5, [pc, #60]	@ (80027ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
        DMA2D_reference = dma;
 8002770:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002772:	4628      	mov	r0, r5
 8002774:	f7ff ff9a 	bl	80026ac <JPEG_OutputHandler>
 8002778:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d105      	bne.n	800278c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
                SEM_WAIT(semDecodingDone);
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002782:	f04f 31ff 	mov.w	r1, #4294967295
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	f009 fc4e 	bl	800c028 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d1ef      	bne.n	8002772 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4e>
        Jpeg_HWDecodingEnd = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	4a08      	ldr	r2, [pc, #32]	@ (80027b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x94>)
 8002796:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002798:	4a08      	ldr	r2, [pc, #32]	@ (80027bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x98>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bd70      	pop	{r4, r5, r6, pc}
 800279e:	bf00      	nop
 80027a0:	24009d7c 	.word	0x24009d7c
 80027a4:	24009dc4 	.word	0x24009dc4
 80027a8:	24009dac 	.word	0x24009dac
 80027ac:	24009b94 	.word	0x24009b94
 80027b0:	24009da4 	.word	0x24009da4
 80027b4:	24009d98 	.word	0x24009d98
 80027b8:	24009db4 	.word	0x24009db4
 80027bc:	24009d90 	.word	0x24009d90

080027c0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80027c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80027c6:	6943      	ldr	r3, [r0, #20]
{
 80027c8:	b085      	sub	sp, #20
 80027ca:	4604      	mov	r4, r0
 80027cc:	460f      	mov	r7, r1
 80027ce:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80027d0:	b92b      	cbnz	r3, 80027de <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 80027d2:	4b29      	ldr	r3, [pc, #164]	@ (8002878 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027d4:	21b2      	movs	r1, #178	@ 0xb2
 80027d6:	4a29      	ldr	r2, [pc, #164]	@ (800287c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027d8:	4829      	ldr	r0, [pc, #164]	@ (8002880 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027da:	f020 fd79 	bl	80232d0 <__assert_func>
    readData(currentMovieOffset, 8);
 80027de:	2208      	movs	r2, #8
 80027e0:	6981      	ldr	r1, [r0, #24]
 80027e2:	f7ff fcd7 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027e6:	69a6      	ldr	r6, [r4, #24]
 80027e8:	4620      	mov	r0, r4
 80027ea:	4631      	mov	r1, r6
 80027ec:	f7ff fcbf 	bl	800216e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027f0:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027f2:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fcba 	bl	800216e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027fa:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027fc:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff fc9a 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002804:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002808:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800280a:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800280c:	180a      	adds	r2, r1, r0
 800280e:	429a      	cmp	r2, r3
 8002810:	d226      	bcs.n	8002860 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002812:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002816:	459b      	cmp	fp, r3
 8002818:	d117      	bne.n	800284a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800281a:	f246 3364 	movw	r3, #25444	@ 0x6364
 800281e:	459a      	cmp	sl, r3
 8002820:	d113      	bne.n	800284a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002822:	b190      	cbz	r0, 800284a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002824:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002826:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002828:	4620      	mov	r0, r4
 800282a:	f7ff fcb3 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800282e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002830:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002832:	462a      	mov	r2, r5
 8002834:	4620      	mov	r0, r4
 8002836:	f8cd 8000 	str.w	r8, [sp]
 800283a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800283e:	463b      	mov	r3, r7
 8002840:	f7ff ff70 	bl	8002724 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002844:	6963      	ldr	r3, [r4, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 800284a:	69a3      	ldr	r3, [r4, #24]
 800284c:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800284e:	b905      	cbnz	r5, 8002852 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002850:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002852:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002854:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002856:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 800285a:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800285c:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800285e:	d109      	bne.n	8002874 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002860:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002862:	2001      	movs	r0, #1
        frameNumber = 1;
 8002864:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002866:	6a23      	ldr	r3, [r4, #32]
 8002868:	61a3      	str	r3, [r4, #24]
}
 800286a:	f080 0001 	eor.w	r0, r0, #1
 800286e:	b005      	add	sp, #20
 8002870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002874:	2000      	movs	r0, #0
 8002876:	e7f8      	b.n	800286a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002878:	0802476f 	.word	0x0802476f
 800287c:	0802488e 	.word	0x0802488e
 8002880:	080246c3 	.word	0x080246c3

08002884 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002888:	6981      	ldr	r1, [r0, #24]
{
 800288a:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 800288c:	2208      	movs	r2, #8
 800288e:	f7ff fc81 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002892:	69a7      	ldr	r7, [r4, #24]
 8002894:	4620      	mov	r0, r4
 8002896:	1d39      	adds	r1, r7, #4
 8002898:	f7ff fc4e 	bl	8002138 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800289c:	f107 0108 	add.w	r1, r7, #8
 80028a0:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80028a2:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7ff fc75 	bl	8002194 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80028aa:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 80028ac:	b16e      	cbz	r6, 80028ca <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80028ae:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80028b0:	4c07      	ldr	r4, [pc, #28]	@ (80028d0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 80028b2:	4d08      	ldr	r5, [pc, #32]	@ (80028d4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80028b4:	4633      	mov	r3, r6
 80028b6:	4807      	ldr	r0, [pc, #28]	@ (80028d4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 80028b8:	f7ff fe12 	bl	80024e0 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80028bc:	4628      	mov	r0, r5
 80028be:	f7ff fef5 	bl	80026ac <JPEG_OutputHandler>
 80028c2:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f8      	beq.n	80028bc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 80028ca:	2001      	movs	r0, #1
 80028cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	24009dac 	.word	0x24009dac
 80028d4:	24009b94 	.word	0x24009b94

080028d8 <DMA2D_CopyBuffer>:
 * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
 * @param job: External job reference
 * @retval None
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t yRef, refline;
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028da:	68c7      	ldr	r7, [r0, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028dc:	2201      	movs	r2, #1
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028de:	4c15      	ldr	r4, [pc, #84]	@ (8002934 <DMA2D_CopyBuffer+0x5c>)
 80028e0:	0139      	lsls	r1, r7, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028e2:	4e15      	ldr	r6, [pc, #84]	@ (8002938 <DMA2D_CopyBuffer+0x60>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	fbb1 f1f3 	udiv	r1, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 80028ea:	6863      	ldr	r3, [r4, #4]
 80028ec:	4359      	muls	r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028ee:	4b13      	ldr	r3, [pc, #76]	@ (800293c <DMA2D_CopyBuffer+0x64>)
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 80028f2:	0109      	lsls	r1, r1, #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028f4:	68e2      	ldr	r2, [r4, #12]
 80028f6:	6836      	ldr	r6, [r6, #0]
    {
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028f8:	0515      	lsls	r5, r2, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028fa:	1ab6      	subs	r6, r6, r2
 80028fc:	42b7      	cmp	r7, r6
 80028fe:	d315      	bcc.n	800292c <DMA2D_CopyBuffer+0x54>
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002900:	68a4      	ldr	r4, [r4, #8]
 8002902:	f1c4 0410 	rsb	r4, r4, #16
 8002906:	432c      	orrs	r4, r5
 8002908:	645c      	str	r4, [r3, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 800290a:	4c0d      	ldr	r4, [pc, #52]	@ (8002940 <DMA2D_CopyBuffer+0x68>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 800290c:	f1c2 0232 	rsb	r2, r2, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002910:	6824      	ldr	r4, [r4, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002912:	0112      	lsls	r2, r2, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002914:	4421      	add	r1, r4
 8002916:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002918:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 800291e:	4a09      	ldr	r2, [pc, #36]	@ (8002944 <DMA2D_CopyBuffer+0x6c>)
 8002920:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002922:	6842      	ldr	r2, [r0, #4]
 8002924:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002926:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <DMA2D_CopyBuffer+0x70>)
 8002928:	601a      	str	r2, [r3, #0]
}
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800292c:	f045 0510 	orr.w	r5, r5, #16
 8002930:	645d      	str	r5, [r3, #68]	@ 0x44
 8002932:	e7ea      	b.n	800290a <DMA2D_CopyBuffer+0x32>
 8002934:	24009d7c 	.word	0x24009d7c
 8002938:	24009da8 	.word	0x24009da8
 800293c:	52001000 	.word	0x52001000
 8002940:	24009dc4 	.word	0x24009dc4
 8002944:	ff09000b 	.word	0xff09000b
 8002948:	00012301 	.word	0x00012301

0800294c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800294e:	2200      	movs	r2, #0
 8002950:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002952:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002954:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002956:	3101      	adds	r1, #1
 8002958:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	2901      	cmp	r1, #1
 800295e:	d900      	bls.n	8002962 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002960:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002962:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <DMA2D_ExternalJobCompleted+0x38>)
 8002964:	4a08      	ldr	r2, [pc, #32]	@ (8002988 <DMA2D_ExternalJobCompleted+0x3c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	68c2      	ldr	r2, [r0, #12]
 800296e:	429a      	cmp	r2, r3
 8002970:	d302      	bcc.n	8002978 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <DMA2D_ExternalJobCompleted+0x40>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <DMA2D_ExternalJobCompleted+0x44>)
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	f009 bb80 	b.w	800c080 <osSemaphoreRelease>
 8002980:	24009d94 	.word	0x24009d94
 8002984:	24009da8 	.word	0x24009da8
 8002988:	24009d7c 	.word	0x24009d7c
 800298c:	24009d90 	.word	0x24009d90
 8002990:	24009d98 	.word	0x24009d98

08002994 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002994:	2101      	movs	r1, #1
 8002996:	2200      	movs	r2, #0
{
 8002998:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800299a:	4608      	mov	r0, r1
 800299c:	f009 fafa 	bl	800bf94 <osSemaphoreNew>
 80029a0:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80029a2:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80029a4:	b928      	cbnz	r0, 80029b2 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80029a8:	2128      	movs	r1, #40	@ 0x28
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029ac:	480a      	ldr	r0, [pc, #40]	@ (80029d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80029ae:	f020 fc8f 	bl	80232d0 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2104      	movs	r1, #4
 80029b6:	2001      	movs	r0, #1
 80029b8:	f009 fb8b 	bl	800c0d2 <osMessageQueueNew>
 80029bc:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80029be:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029c0:	b918      	cbnz	r0, 80029ca <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029c2:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029c4:	212c      	movs	r1, #44	@ 0x2c
 80029c6:	4a03      	ldr	r2, [pc, #12]	@ (80029d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029c8:	e7f0      	b.n	80029ac <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029ca:	bd08      	pop	{r3, pc}
 80029cc:	24009dcc 	.word	0x24009dcc
 80029d0:	080248e9 	.word	0x080248e9
 80029d4:	08024932 	.word	0x08024932
 80029d8:	08024961 	.word	0x08024961
 80029dc:	24009dc8 	.word	0x24009dc8
 80029e0:	080249ae 	.word	0x080249ae

080029e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029e4:	4b02      	ldr	r3, [pc, #8]	@ (80029f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029e6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	f009 bb1c 	b.w	800c028 <osSemaphoreAcquire>
 80029f0:	24009dcc 	.word	0x24009dcc

080029f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029f4:	4b01      	ldr	r3, [pc, #4]	@ (80029fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	f009 bb42 	b.w	800c080 <osSemaphoreRelease>
 80029fc:	24009dcc 	.word	0x24009dcc

08002a00 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002a00:	4b02      	ldr	r3, [pc, #8]	@ (8002a0c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002a02:	2100      	movs	r1, #0
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	f009 bb0f 	b.w	800c028 <osSemaphoreAcquire>
 8002a0a:	bf00      	nop
 8002a0c:	24009dcc 	.word	0x24009dcc

08002a10 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002a10:	f7ff bff0 	b.w	80029f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002a14 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002a14:	2300      	movs	r3, #0
 8002a16:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6800      	ldr	r0, [r0, #0]
 8002a1e:	f009 bb93 	b.w	800c148 <osMessageQueuePut>
 8002a22:	bf00      	nop
 8002a24:	24009dc8 	.word	0x24009dc8
 8002a28:	24000030 	.word	0x24000030

08002a2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a2c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	4c07      	ldr	r4, [pc, #28]	@ (8002a50 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a32:	a901      	add	r1, sp, #4
 8002a34:	461a      	mov	r2, r3
 8002a36:	6820      	ldr	r0, [r4, #0]
 8002a38:	f009 fbb7 	bl	800c1aa <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a40:	2200      	movs	r2, #0
 8002a42:	a901      	add	r1, sp, #4
 8002a44:	6820      	ldr	r0, [r4, #0]
 8002a46:	f009 fbb0 	bl	800c1aa <osMessageQueueGet>
}
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	bf00      	nop
 8002a50:	24009dc8 	.word	0x24009dc8

08002a54 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a54:	6803      	ldr	r3, [r0, #0]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	4718      	bx	r3

08002a5a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	4770      	bx	lr

08002a5e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002a5e:	e7fe      	b.n	8002a5e <DMA2D_XferErrorCallback>

08002a60 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a60:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a64:	4770      	bx	lr
	...

08002a68 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a70:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a74:	f009 fa4c 	bl	800bf10 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a78:	6860      	ldr	r0, [r4, #4]
 8002a7a:	6803      	ldr	r3, [r0, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4798      	blx	r3
 8002a80:	b978      	cbnz	r0, 8002aa2 <_ZN8STM32DMA5startEv+0x3a>
 8002a82:	7a63      	ldrb	r3, [r4, #9]
 8002a84:	b16b      	cbz	r3, 8002aa2 <_ZN8STM32DMA5startEv+0x3a>
 8002a86:	7a23      	ldrb	r3, [r4, #8]
 8002a88:	b95b      	cbnz	r3, 8002aa2 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a8a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a8e:	4620      	mov	r0, r4
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a96:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a9e:	f009 ba5a 	b.w	800bf56 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002aa2:	490b      	ldr	r1, [pc, #44]	@ (8002ad0 <_ZN8STM32DMA5startEv+0x68>)
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad4 <_ZN8STM32DMA5startEv+0x6c>)
 8002aa6:	680b      	ldr	r3, [r1, #0]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d1f2      	bne.n	8002a96 <_ZN8STM32DMA5startEv+0x2e>
 8002ab0:	7a20      	ldrb	r0, [r4, #8]
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d1ef      	bne.n	8002a96 <_ZN8STM32DMA5startEv+0x2e>
 8002ab6:	7aa0      	ldrb	r0, [r4, #10]
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d1ec      	bne.n	8002a96 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002abc:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002abe:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ac2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002ac6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ac8:	f7ff ff06 	bl	80028d8 <DMA2D_CopyBuffer>
    }
 8002acc:	e7e3      	b.n	8002a96 <_ZN8STM32DMA5startEv+0x2e>
 8002ace:	bf00      	nop
 8002ad0:	24009d94 	.word	0x24009d94
 8002ad4:	24000010 	.word	0x24000010

08002ad8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ada:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ade:	6003      	str	r3, [r0, #0]
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <_ZN8STM32DMAD1Ev+0x1c>)
 8002ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ae6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aea:	f3bf 8f6f 	isb	sy
}
 8002aee:	4770      	bx	lr
 8002af0:	0802673c 	.word	0x0802673c
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002af8:	b510      	push	{r4, lr}
 8002afa:	4604      	mov	r4, r0
}
 8002afc:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002b00:	f7ff ffea 	bl	8002ad8 <_ZN8STM32DMAD1Ev>
 8002b04:	4620      	mov	r0, r4
 8002b06:	f020 f86d 	bl	8022be4 <_ZdlPvj>
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	bd10      	pop	{r4, pc}
	...

08002b10 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b10:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002b12:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b14:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b18:	f042 0210 	orr.w	r2, r2, #16
 8002b1c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002b20:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b24:	f002 0210 	and.w	r2, r2, #16
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b2c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b2e:	f042 0210 	orr.w	r2, r2, #16
 8002b32:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b34:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b36:	f022 0210 	bic.w	r2, r2, #16
 8002b3a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <_ZN8STM32DMA10initializeEv+0x48>)
 8002b3e:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b40:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002b42:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <_ZN8STM32DMA10initializeEv+0x50>)
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <_ZN8STM32DMA10initializeEv+0x54>)
 8002b48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b4c:	609a      	str	r2, [r3, #8]
}
 8002b4e:	b002      	add	sp, #8
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	58024400 	.word	0x58024400
 8002b58:	24009c08 	.word	0x24009c08
 8002b5c:	08002dad 	.word	0x08002dad
 8002b60:	08002a5f 	.word	0x08002a5f
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b68:	b508      	push	{r3, lr}
    switch (format)
 8002b6a:	280a      	cmp	r0, #10
 8002b6c:	d809      	bhi.n	8002b82 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b6e:	e8df f000 	tbb	[pc, r0]
 8002b72:	1006      	.short	0x1006
 8002b74:	0808080e 	.word	0x0808080e
 8002b78:	10101008 	.word	0x10101008
 8002b7c:	10          	.byte	0x10
 8002b7d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b7e:	2002      	movs	r0, #2
}
 8002b80:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b84:	2191      	movs	r1, #145	@ 0x91
 8002b86:	4a05      	ldr	r2, [pc, #20]	@ (8002b9c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b88:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b8a:	f020 fba1 	bl	80232d0 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b8e:	2000      	movs	r0, #0
 8002b90:	e7f6      	b.n	8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b92:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b94:	e7f4      	b.n	8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b96:	bf00      	nop
 8002b98:	080249f0 	.word	0x080249f0
 8002b9c:	08024a0b 	.word	0x08024a0b
 8002ba0:	08024a56 	.word	0x08024a56

08002ba4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ba8:	7f88      	ldrb	r0, [r1, #30]
 8002baa:	f7ff ffdd 	bl	8002b68 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bb0:	8aa5      	ldrh	r5, [r4, #20]
 8002bb2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002bb4:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bb6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bba:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bbe:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bc2:	1b52      	subs	r2, r2, r5
 8002bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002bc6:	6825      	ldr	r5, [r4, #0]
 8002bc8:	2d08      	cmp	r5, #8
 8002bca:	d10e      	bne.n	8002bea <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bcc:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bce:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bd0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002bd4:	7f20      	ldrb	r0, [r4, #28]
 8002bd6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bda:	61da      	str	r2, [r3, #28]
        return color;
 8002bdc:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bde:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002be0:	4a07      	ldr	r2, [pc, #28]	@ (8002c00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002be2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002be4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002be6:	601a      	str	r2, [r3, #0]
    }
}
 8002be8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bea:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bec:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bee:	611a      	str	r2, [r3, #16]
 8002bf0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bf2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bf4:	4a03      	ldr	r2, [pc, #12]	@ (8002c04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bf6:	e7f6      	b.n	8002be6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bf8:	52001000 	.word	0x52001000
 8002bfc:	00010009 	.word	0x00010009
 8002c00:	00022301 	.word	0x00022301
 8002c04:	00032301 	.word	0x00032301

08002c08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002c08:	b508      	push	{r3, lr}
    switch (format)
 8002c0a:	280b      	cmp	r0, #11
 8002c0c:	d80b      	bhi.n	8002c26 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002c0e:	e8df f000 	tbb	[pc, r0]
 8002c12:	1206      	.short	0x1206
 8002c14:	0a0a0a10 	.word	0x0a0a0a10
 8002c18:	0808080a 	.word	0x0808080a
 8002c1c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002c1e:	2002      	movs	r0, #2
}
 8002c20:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c22:	2005      	movs	r0, #5
        break;
 8002c24:	e7fc      	b.n	8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002c26:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c28:	2170      	movs	r1, #112	@ 0x70
 8002c2a:	4a05      	ldr	r2, [pc, #20]	@ (8002c40 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c2c:	4805      	ldr	r0, [pc, #20]	@ (8002c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c2e:	f020 fb4f 	bl	80232d0 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c32:	2000      	movs	r0, #0
 8002c34:	e7f4      	b.n	8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c36:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c38:	e7f2      	b.n	8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c3a:	bf00      	nop
 8002c3c:	080249f0 	.word	0x080249f0
 8002c40:	08024aa1 	.word	0x08024aa1
 8002c44:	08024a56 	.word	0x08024a56

08002c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c4c:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c4e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c50:	4638      	mov	r0, r7
 8002c52:	f7ff ffd9 	bl	8002c08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c56:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c5a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f7ff ffd3 	bl	8002c08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c62:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c64:	4628      	mov	r0, r5
 8002c66:	f7ff ff7f 	bl	8002b68 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c6a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c6e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c72:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c76:	4b45      	ldr	r3, [pc, #276]	@ (8002d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c78:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c7a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c7c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c7e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c80:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c82:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c86:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c90:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c92:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c96:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c98:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c9a:	f8d9 4000 	ldr.w	r4, [r9]
 8002c9e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002ca2:	2c80      	cmp	r4, #128	@ 0x80
 8002ca4:	d022      	beq.n	8002cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002ca6:	d80f      	bhi.n	8002cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002ca8:	2c20      	cmp	r4, #32
 8002caa:	d066      	beq.n	8002d7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002cac:	2c40      	cmp	r4, #64	@ 0x40
 8002cae:	d064      	beq.n	8002d7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002cb0:	2c04      	cmp	r4, #4
 8002cb2:	d05c      	beq.n	8002d6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002cb8:	4b34      	ldr	r3, [pc, #208]	@ (8002d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002cba:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cbc:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cc0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002cc2:	d060      	beq.n	8002d86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002cc4:	4a32      	ldr	r2, [pc, #200]	@ (8002d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002cc6:	e03f      	b.n	8002d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002cc8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002ccc:	d004      	beq.n	8002cd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002cce:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002cd2:	d1ef      	bne.n	8002cb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd4:	482f      	ldr	r0, [pc, #188]	@ (8002d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002cd6:	e000      	b.n	8002cda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd8:	482f      	ldr	r0, [pc, #188]	@ (8002d98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cda:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002cde:	61da      	str	r2, [r3, #28]
 8002ce0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002ce4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ce6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ce8:	6159      	str	r1, [r3, #20]
 8002cea:	e02c      	b.n	8002d46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cec:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cf0:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cf4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cf8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cfa:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cfc:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002cfe:	1d21      	adds	r1, r4, #4
 8002d00:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002d02:	7821      	ldrb	r1, [r4, #0]
 8002d04:	b141      	cbz	r1, 8002d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002d06:	2901      	cmp	r1, #1
 8002d08:	d021      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002d0a:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002d0c:	f240 110b 	movw	r1, #267	@ 0x10b
 8002d10:	4a23      	ldr	r2, [pc, #140]	@ (8002da0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002d12:	4824      	ldr	r0, [pc, #144]	@ (8002da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002d14:	f020 fadc 	bl	80232d0 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	8861      	ldrh	r1, [r4, #2]
 8002d1c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d20:	3901      	subs	r1, #1
 8002d22:	f022 0210 	bic.w	r2, r2, #16
 8002d26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d2a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d2c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d2e:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d30:	69d9      	ldr	r1, [r3, #28]
 8002d32:	f041 0120 	orr.w	r1, r1, #32
 8002d36:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d38:	69d9      	ldr	r1, [r3, #28]
 8002d3a:	0689      	lsls	r1, r1, #26
 8002d3c:	d4fc      	bmi.n	8002d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d3e:	2110      	movs	r1, #16
 8002d40:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d0be      	beq.n	8002cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d46:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d4e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d50:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d52:	8860      	ldrh	r0, [r4, #2]
 8002d54:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d58:	bf18      	it	ne
 8002d5a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d5c:	3801      	subs	r0, #1
 8002d5e:	f021 0110 	bic.w	r1, r1, #16
 8002d62:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d66:	f041 0110 	orr.w	r1, r1, #16
 8002d6a:	61d9      	str	r1, [r3, #28]
                break;
 8002d6c:	e7df      	b.n	8002d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d6e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d72:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d76:	61da      	str	r2, [r3, #28]
 8002d78:	e7b5      	b.n	8002ce6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d7a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d7e:	4b03      	ldr	r3, [pc, #12]	@ (8002d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d80:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d84:	e7f7      	b.n	8002d76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d86:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002d8a:	e7dd      	b.n	8002d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d8c:	52001000 	.word	0x52001000
 8002d90:	00012301 	.word	0x00012301
 8002d94:	00020009 	.word	0x00020009
 8002d98:	0002000a 	.word	0x0002000a
 8002d9c:	08024aeb 	.word	0x08024aeb
 8002da0:	08024b05 	.word	0x08024b05
 8002da4:	08024a56 	.word	0x08024a56
 8002da8:	00022301 	.word	0x00022301

08002dac <DMA2D_XferCpltCallback>:
 8002dac:	4b02      	ldr	r3, [pc, #8]	@ (8002db8 <DMA2D_XferCpltCallback+0xc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4718      	bx	r3
 8002db8:	240252fc 	.word	0x240252fc

08002dbc <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002dbc:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002dc4:	b9d3      	cbnz	r3, 8002dfc <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002dc6:	6803      	ldr	r3, [r0, #0]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002dcc:	4919      	ldr	r1, [pc, #100]	@ (8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dce:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dd0:	680b      	ldr	r3, [r1, #0]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d12a      	bne.n	8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dda:	4818      	ldr	r0, [pc, #96]	@ (8002e3c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	bb38      	cbnz	r0, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002de0:	7a20      	ldrb	r0, [r4, #8]
 8002de2:	bb28      	cbnz	r0, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002de4:	7aa0      	ldrb	r0, [r4, #10]
 8002de6:	bb18      	cbnz	r0, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002de8:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dea:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002dee:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002df0:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002df8:	f7ff bd6e 	b.w	80028d8 <DMA2D_CopyBuffer>
        if (isRunning)
 8002dfc:	7a03      	ldrb	r3, [r0, #8]
 8002dfe:	b143      	cbz	r3, 8002e12 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002e00:	2300      	movs	r3, #0
 8002e02:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002e0a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002e0e:	f7ff fd9d 	bl	800294c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002e12:	6860      	ldr	r0, [r4, #4]
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4798      	blx	r3
 8002e1a:	b948      	cbnz	r0, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002e1c:	7a63      	ldrb	r3, [r4, #9]
 8002e1e:	b13b      	cbz	r3, 8002e30 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002e20:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002e22:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002e26:	4620      	mov	r0, r4
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e2e:	4718      	bx	r3
    }
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	bf00      	nop
 8002e34:	24009d94 	.word	0x24009d94
 8002e38:	24000010 	.word	0x24000010
 8002e3c:	24009d90 	.word	0x24009d90

08002e40 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e44:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <_ZN8STM32DMAC1Ev+0x40>)
 8002e46:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e48:	2600      	movs	r6, #0
 8002e4a:	4625      	mov	r5, r4
 8002e4c:	2260      	movs	r2, #96	@ 0x60
 8002e4e:	6060      	str	r0, [r4, #4]
 8002e50:	7226      	strb	r6, [r4, #8]
 8002e52:	7266      	strb	r6, [r4, #9]
 8002e54:	f845 3b20 	str.w	r3, [r5], #32
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f00c fe11 	bl	800fa80 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e5e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e62:	60ee      	str	r6, [r5, #12]
 8002e64:	3524      	adds	r5, #36	@ 0x24
 8002e66:	429d      	cmp	r5, r3
 8002e68:	d1fb      	bne.n	8002e62 <_ZN8STM32DMAC1Ev+0x22>
 8002e6a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e6e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e70:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e74:	f009 f814 	bl	800bea0 <osMutexNew>
 8002e78:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	0802673c 	.word	0x0802673c

08002e84 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	07d2      	lsls	r2, r2, #31
 8002e8a:	d4fc      	bmi.n	8002e86 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e8c:	2223      	movs	r2, #35	@ 0x23
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	52001000 	.word	0x52001000

08002e98 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002e9a:	6953      	ldr	r3, [r2, #20]
 8002e9c:	03db      	lsls	r3, r3, #15
 8002e9e:	d511      	bpl.n	8002ec4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002ea0:	2900      	cmp	r1, #0
 8002ea2:	dd0f      	ble.n	8002ec4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002ea4:	f000 031f 	and.w	r3, r0, #31
 8002ea8:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002eaa:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002eae:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002eb0:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002eb4:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002eb6:	1a0b      	subs	r3, r1, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	dcf9      	bgt.n	8002eb0 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002ebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ec0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002ecc:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002ece:	4c10      	ldr	r4, [pc, #64]	@ (8002f10 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002ed0:	6825      	ldr	r5, [r4, #0]
 8002ed2:	07ed      	lsls	r5, r5, #31
 8002ed4:	d4fc      	bmi.n	8002ed0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ed6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ed8:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002eda:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002edc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ede:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ee2:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ee6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ee8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002eea:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002eec:	d00c      	beq.n	8002f08 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002eee:	4909      	ldr	r1, [pc, #36]	@ (8002f14 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ef0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ef4:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ef6:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002efa:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002efe:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002f00:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002f02:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f04:	6023      	str	r3, [r4, #0]
    }
}
 8002f06:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002f08:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002f0c:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f0e:	e7f9      	b.n	8002f04 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002f10:	52001000 	.word	0x52001000
 8002f14:	00010009 	.word	0x00010009
 8002f18:	00020001 	.word	0x00020001
 8002f1c:	00030001 	.word	0x00030001

08002f20 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f20:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f22:	4c0e      	ldr	r4, [pc, #56]	@ (8002f5c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002f24:	6825      	ldr	r5, [r4, #0]
 8002f26:	07ed      	lsls	r5, r5, #31
 8002f28:	d4fc      	bmi.n	8002f24 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f2a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f2c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002f2e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f30:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f32:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f36:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f3a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f3c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f3e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f40:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002f42:	d007      	beq.n	8002f54 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f44:	4a06      	ldr	r2, [pc, #24]	@ (8002f60 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002f46:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002f4a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f4c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f4e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f50:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002f52:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f54:	4b03      	ldr	r3, [pc, #12]	@ (8002f64 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002f56:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002f58:	6025      	str	r5, [r4, #0]
}
 8002f5a:	e7fa      	b.n	8002f52 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002f5c:	52001000 	.word	0x52001000
 8002f60:	00020001 	.word	0x00020001
 8002f64:	ff020001 	.word	0xff020001

08002f68 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f68:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f6a:	4c0b      	ldr	r4, [pc, #44]	@ (8002f98 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002f6c:	6825      	ldr	r5, [r4, #0]
 8002f6e:	07ed      	lsls	r5, r5, #31
 8002f70:	d4fc      	bmi.n	8002f6c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f72:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f74:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f76:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f78:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f7a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f80:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f82:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f84:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f86:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f88:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f8a:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f8c:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f8e:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f90:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f92:	6023      	str	r3, [r4, #0]
}
 8002f94:	bd30      	pop	{r4, r5, pc}
 8002f96:	bf00      	nop
 8002f98:	52001000 	.word	0x52001000
 8002f9c:	00020001 	.word	0x00020001

08002fa0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15BlockTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	4770      	bx	lr

08002fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15BlockTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002fa4:	2014      	movs	r0, #20
 8002fa6:	4770      	bx	lr

08002fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15BlockTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002fa8:	2314      	movs	r3, #20
 8002faa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fae:	3008      	adds	r0, #8
 8002fb0:	4770      	bx	lr

08002fb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15BlockTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002fb2:	2314      	movs	r3, #20
 8002fb4:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fb8:	3008      	adds	r0, #8
 8002fba:	4770      	bx	lr

08002fbc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	4770      	bx	lr

08002fc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fc0:	f44f 702b 	mov.w	r0, #684	@ 0x2ac
 8002fc4:	4770      	bx	lr

08002fc6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fc6:	f44f 732b 	mov.w	r3, #684	@ 0x2ac
 8002fca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fce:	3008      	adds	r0, #8
 8002fd0:	4770      	bx	lr

08002fd2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fd2:	f44f 732b 	mov.w	r3, #684	@ 0x2ac
 8002fd6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fda:	3008      	adds	r0, #8
 8002fdc:	4770      	bx	lr

08002fde <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fde:	2001      	movs	r0, #1
 8002fe0:	4770      	bx	lr

08002fe2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fe2:	2010      	movs	r0, #16
 8002fe4:	4770      	bx	lr

08002fe6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fe6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fea:	3008      	adds	r0, #8
 8002fec:	4770      	bx	lr

08002fee <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fee:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002ff2:	3008      	adds	r0, #8
 8002ff4:	4770      	bx	lr

08002ff6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002ff6:	4608      	mov	r0, r1
 8002ff8:	f001 b864 	b.w	80040c4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002ffc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15BlockTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15BlockTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002ffe:	b510      	push	{r4, lr}
 8003000:	4604      	mov	r4, r0
 8003002:	6003      	str	r3, [r0, #0]
 8003004:	f00b f8a9 	bl	800e15a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003008:	4620      	mov	r0, r4
 800300a:	bd10      	pop	{r4, pc}
 800300c:	080267f4 	.word	0x080267f4

08003010 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15BlockTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003010:	b510      	push	{r4, lr}
 8003012:	4604      	mov	r4, r0
 8003014:	f7ff fff2 	bl	8002ffc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15BlockTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003018:	211c      	movs	r1, #28
 800301a:	4620      	mov	r0, r4
 800301c:	f01f fde2 	bl	8022be4 <_ZdlPvj>
 8003020:	4620      	mov	r0, r4
 8003022:	bd10      	pop	{r4, pc}

08003024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003024:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003026:	b510      	push	{r4, lr}
 8003028:	4604      	mov	r4, r0
 800302a:	6003      	str	r3, [r0, #0]
 800302c:	f00b f895 	bl	800e15a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003030:	4620      	mov	r0, r4
 8003032:	bd10      	pop	{r4, pc}
 8003034:	080267c0 	.word	0x080267c0

08003038 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003038:	b510      	push	{r4, lr}
 800303a:	4604      	mov	r4, r0
 800303c:	f7ff fff2 	bl	8003024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003040:	f44f 712d 	mov.w	r1, #692	@ 0x2b4
 8003044:	4620      	mov	r0, r4
 8003046:	f01f fdcd 	bl	8022be4 <_ZdlPvj>
 800304a:	4620      	mov	r0, r4
 800304c:	bd10      	pop	{r4, pc}
	...

08003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003050:	4b03      	ldr	r3, [pc, #12]	@ (8003060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003052:	b510      	push	{r4, lr}
 8003054:	4604      	mov	r4, r0
 8003056:	6003      	str	r3, [r0, #0]
 8003058:	f00b f87f 	bl	800e15a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800305c:	4620      	mov	r0, r4
 800305e:	bd10      	pop	{r4, pc}
 8003060:	0802678c 	.word	0x0802678c

08003064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003064:	b510      	push	{r4, lr}
 8003066:	4604      	mov	r4, r0
 8003068:	f7ff fff2 	bl	8003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800306c:	2118      	movs	r1, #24
 800306e:	4620      	mov	r0, r4
 8003070:	f01f fdb8 	bl	8022be4 <_ZdlPvj>
 8003074:	4620      	mov	r0, r4
 8003076:	bd10      	pop	{r4, pc}

08003078 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003078:	4b08      	ldr	r3, [pc, #32]	@ (800309c <_ZN12FrontendHeapD1Ev+0x24>)
 800307a:	b510      	push	{r4, lr}
 800307c:	4604      	mov	r4, r0
 800307e:	6003      	str	r3, [r0, #0]
 8003080:	f500 7038 	add.w	r0, r0, #736	@ 0x2e0
 8003084:	f7ff ffba 	bl	8002ffc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15BlockTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003088:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800308c:	f7ff ffca 	bl	8003024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003090:	f104 0014 	add.w	r0, r4, #20
 8003094:	f7ff ffdc 	bl	8003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003098:	4620      	mov	r0, r4
 800309a:	bd10      	pop	{r4, pc}
 800309c:	08026828 	.word	0x08026828

080030a0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80030a0:	b508      	push	{r3, lr}
 80030a2:	4802      	ldr	r0, [pc, #8]	@ (80030ac <__tcf_0+0xc>)
 80030a4:	f7ff ffe8 	bl	8003078 <_ZN12FrontendHeapD1Ev>
 80030a8:	bd08      	pop	{r3, pc}
 80030aa:	bf00      	nop
 80030ac:	2400ac90 	.word	0x2400ac90

080030b0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80030b0:	b510      	push	{r4, lr}
 80030b2:	4604      	mov	r4, r0
 80030b4:	f7ff ffe0 	bl	8003078 <_ZN12FrontendHeapD1Ev>
 80030b8:	f240 4164 	movw	r1, #1124	@ 0x464
 80030bc:	4620      	mov	r0, r4
 80030be:	f01f fd91 	bl	8022be4 <_ZdlPvj>
 80030c2:	4620      	mov	r0, r4
 80030c4:	bd10      	pop	{r4, pc}
	...

080030c8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80030c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030cc:	f000 fc52 	bl	8003974 <_ZN14BitmapDatabase11getInstanceEv>
 80030d0:	2400      	movs	r4, #0
 80030d2:	4605      	mov	r5, r0
 80030d4:	f000 fc52 	bl	800397c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030d8:	4623      	mov	r3, r4
 80030da:	4601      	mov	r1, r0
 80030dc:	4622      	mov	r2, r4
 80030de:	4628      	mov	r0, r5
 80030e0:	9400      	str	r4, [sp, #0]
 80030e2:	f014 ff89 	bl	8017ff8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80030e6:	4b27      	ldr	r3, [pc, #156]	@ (8003184 <touchgfx_init+0xbc>)
 80030e8:	4a27      	ldr	r2, [pc, #156]	@ (8003188 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80030ea:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80030ec:	4d27      	ldr	r5, [pc, #156]	@ (800318c <touchgfx_init+0xc4>)
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f001 ff04 	bl	8004efc <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80030f4:	4b26      	ldr	r3, [pc, #152]	@ (8003190 <touchgfx_init+0xc8>)
 80030f6:	4a27      	ldr	r2, [pc, #156]	@ (8003194 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80030f8:	4827      	ldr	r0, [pc, #156]	@ (8003198 <touchgfx_init+0xd0>)
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	f014 fe28 	bl	8017d50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	f3bf 8f5b 	dmb	ish
 8003106:	07db      	lsls	r3, r3, #31
 8003108:	d435      	bmi.n	8003176 <touchgfx_init+0xae>
 800310a:	4628      	mov	r0, r5
 800310c:	f01f fd6c 	bl	8022be8 <__cxa_guard_acquire>
 8003110:	b388      	cbz	r0, 8003176 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003112:	4c22      	ldr	r4, [pc, #136]	@ (800319c <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003114:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003116:	f504 7642 	add.w	r6, r4, #776	@ 0x308
        : presenterStorage(pres),
 800311a:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800311e:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8003122:	f504 7738 	add.w	r7, r4, #736	@ 0x2e0
 8003126:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003128:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800312a:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800312e:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003130:	6126      	str	r6, [r4, #16]
 8003132:	f00b f813 	bl	800e15c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003136:	4b1b      	ldr	r3, [pc, #108]	@ (80031a4 <touchgfx_init+0xdc>)
 8003138:	4640      	mov	r0, r8
 800313a:	6163      	str	r3, [r4, #20]
 800313c:	f00b f80e 	bl	800e15c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003140:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <touchgfx_init+0xe0>)
 8003142:	4638      	mov	r0, r7
 8003144:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003146:	f00b f809 	bl	800e15c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800314a:	4b18      	ldr	r3, [pc, #96]	@ (80031ac <touchgfx_init+0xe4>)
 800314c:	f504 703f 	add.w	r0, r4, #764	@ 0x2fc
 8003150:	f8c4 32e0 	str.w	r3, [r4, #736]	@ 0x2e0
 8003154:	f001 ff56 	bl	8005004 <_ZN5ModelC1Ev>
 8003158:	4622      	mov	r2, r4
 800315a:	f504 713f 	add.w	r1, r4, #764	@ 0x2fc
 800315e:	4630      	mov	r0, r6
 8003160:	f001 ff46 	bl	8004ff0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003164:	4630      	mov	r0, r6
 8003166:	f000 ffad 	bl	80040c4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800316a:	4811      	ldr	r0, [pc, #68]	@ (80031b0 <touchgfx_init+0xe8>)
 800316c:	f020 f8ce 	bl	802330c <atexit>
 8003170:	4628      	mov	r0, r5
 8003172:	f01f fd45 	bl	8022c00 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003176:	480f      	ldr	r0, [pc, #60]	@ (80031b4 <touchgfx_init+0xec>)
}
 8003178:	b002      	add	sp, #8
 800317a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800317e:	f7fe bcd1 	b.w	8001b24 <_ZN11TouchGFXHAL10initializeEv>
 8003182:	bf00      	nop
 8003184:	24025360 	.word	0x24025360
 8003188:	24009e54 	.word	0x24009e54
 800318c:	2400ac8c 	.word	0x2400ac8c
 8003190:	24009e74 	.word	0x24009e74
 8003194:	24009e58 	.word	0x24009e58
 8003198:	24000034 	.word	0x24000034
 800319c:	2400ac90 	.word	0x2400ac90
 80031a0:	08026828 	.word	0x08026828
 80031a4:	0802678c 	.word	0x0802678c
 80031a8:	080267c0 	.word	0x080267c0
 80031ac:	080267f4 	.word	0x080267f4
 80031b0:	080030a1 	.word	0x080030a1
 80031b4:	24009dd0 	.word	0x24009dd0

080031b8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80031b8:	4770      	bx	lr
	...

080031bc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80031bc:	4801      	ldr	r0, [pc, #4]	@ (80031c4 <touchgfx_taskEntry+0x8>)
 80031be:	f7fe bcc3 	b.w	8001b48 <_ZN11TouchGFXHAL9taskEntryEv>
 80031c2:	bf00      	nop
 80031c4:	24009dd0 	.word	0x24009dd0

080031c8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80031c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80031ca:	4c0e      	ldr	r4, [pc, #56]	@ (8003204 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80031cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80031ce:	4e0f      	ldr	r6, [pc, #60]	@ (800320c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80031d0:	4620      	mov	r0, r4
static LCD24bpp display;
 80031d2:	4d0f      	ldr	r5, [pc, #60]	@ (8003210 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80031d4:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80031d6:	f7ff fe33 	bl	8002e40 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80031da:	4628      	mov	r0, r5
 80031dc:	f018 fd76 	bl	801bccc <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80031e0:	480c      	ldr	r0, [pc, #48]	@ (8003214 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80031e2:	f012 fa71 	bl	80156c8 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80031e6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80031ee:	4621      	mov	r1, r4
 80031f0:	4809      	ldr	r0, [pc, #36]	@ (8003218 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80031f2:	e9cd 3200 	strd	r3, r2, [sp]
 80031f6:	4633      	mov	r3, r6
 80031f8:	462a      	mov	r2, r5
 80031fa:	f7fe fd39 	bl	8001c70 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80031fe:	b002      	add	sp, #8
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	bf00      	nop
 8003204:	24009ee0 	.word	0x24009ee0
 8003208:	080265f4 	.word	0x080265f4
 800320c:	2400ac88 	.word	0x2400ac88
 8003210:	24009e74 	.word	0x24009e74
 8003214:	24009e58 	.word	0x24009e58
 8003218:	24009dd0 	.word	0x24009dd0

0800321c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800321c:	4801      	ldr	r0, [pc, #4]	@ (8003224 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800321e:	f7ff bc5b 	b.w	8002ad8 <_ZN8STM32DMAD1Ev>
 8003222:	bf00      	nop
 8003224:	24009ee0 	.word	0x24009ee0

08003228 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003228:	2000      	movs	r0, #0
 800322a:	4770      	bx	lr

0800322c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800322c:	8081      	strh	r1, [r0, #4]
    }
 800322e:	4770      	bx	lr

08003230 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003230:	80c1      	strh	r1, [r0, #6]
    }
 8003232:	4770      	bx	lr

08003234 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003234:	8101      	strh	r1, [r0, #8]
    }
 8003236:	4770      	bx	lr

08003238 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003238:	8141      	strh	r1, [r0, #10]
    }
 800323a:	4770      	bx	lr

0800323c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800323c:	4770      	bx	lr

0800323e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800323e:	4770      	bx	lr

08003240 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003240:	4770      	bx	lr

08003242 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003242:	4770      	bx	lr

08003244 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003244:	4770      	bx	lr

08003246 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003246:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003248:	88c4      	ldrh	r4, [r0, #6]
 800324a:	6803      	ldr	r3, [r0, #0]
 800324c:	1b12      	subs	r2, r2, r4
 800324e:	8884      	ldrh	r4, [r0, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003252:	1b09      	subs	r1, r1, r4
 8003254:	b212      	sxth	r2, r2
    }
 8003256:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800325a:	b209      	sxth	r1, r1
 800325c:	4718      	bx	r3

0800325e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800325e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003262:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800326e:	6010      	str	r0, [r2, #0]
    }
 8003270:	4770      	bx	lr

08003272 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003272:	2000      	movs	r0, #0
 8003274:	4770      	bx	lr

08003276 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003276:	888b      	ldrh	r3, [r1, #4]
 8003278:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800327a:	2001      	movs	r0, #1
 800327c:	4770      	bx	lr

0800327e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800327e:	4770      	bx	lr

08003280 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003280:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003284:	4770      	bx	lr

08003286 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003286:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800328a:	4770      	bx	lr

0800328c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800328c:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800328e:	2200      	movs	r2, #0
        return rect.width;
 8003290:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003294:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003298:	8002      	strh	r2, [r0, #0]
 800329a:	8042      	strh	r2, [r0, #2]
 800329c:	8084      	strh	r4, [r0, #4]
 800329e:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80032a0:	bd10      	pop	{r4, pc}

080032a2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80032a2:	2200      	movs	r2, #0
 80032a4:	8002      	strh	r2, [r0, #0]
 80032a6:	8042      	strh	r2, [r0, #2]
 80032a8:	8082      	strh	r2, [r0, #4]
 80032aa:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80032ac:	4770      	bx	lr

080032ae <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80032ae:	7701      	strb	r1, [r0, #28]
    }
 80032b0:	4770      	bx	lr

080032b2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80032b2:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80032b8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80032bc:	4770      	bx	lr

080032be <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80032be:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80032c2:	4770      	bx	lr

080032c4 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80032c4:	2001      	movs	r0, #1
 80032c6:	4770      	bx	lr

080032c8 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80032c8:	3098      	adds	r0, #152	@ 0x98
 80032ca:	4770      	bx	lr

080032cc <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80032cc:	308c      	adds	r0, #140	@ 0x8c
 80032ce:	4770      	bx	lr

080032d0 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80032d0:	3084      	adds	r0, #132	@ 0x84
 80032d2:	4770      	bx	lr

080032d4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80032d4:	4770      	bx	lr

080032d6 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80032d6:	4770      	bx	lr

080032d8 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80032d8:	4770      	bx	lr
	...

080032dc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	4b02      	ldr	r3, [pc, #8]	@ (80032e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80032de:	2290      	movs	r2, #144	@ 0x90
 80032e0:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e100 	.word	0xe000e100

080032ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80032ec:	4770      	bx	lr

080032ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80032ee:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80032f0:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80032f4:	4770      	bx	lr

080032f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032f6:	4770      	bx	lr

080032f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80032f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80032fc:	4611      	mov	r1, r2
 80032fe:	6840      	ldr	r0, [r0, #4]
 8003300:	6803      	ldr	r3, [r0, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4718      	bx	r3

08003306 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003306:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800330a:	4770      	bx	lr

0800330c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800330c:	b510      	push	{r4, lr}
 800330e:	4604      	mov	r4, r0
 8003310:	2148      	movs	r1, #72	@ 0x48
 8003312:	f01f fc67 	bl	8022be4 <_ZdlPvj>
 8003316:	4620      	mov	r0, r4
 8003318:	bd10      	pop	{r4, pc}

0800331a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 800331a:	b510      	push	{r4, lr}
 800331c:	4604      	mov	r4, r0
 800331e:	212c      	movs	r1, #44	@ 0x2c
 8003320:	f01f fc60 	bl	8022be4 <_ZdlPvj>
 8003324:	4620      	mov	r0, r4
 8003326:	bd10      	pop	{r4, pc}

08003328 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003328:	b510      	push	{r4, lr}
 800332a:	4604      	mov	r4, r0
 800332c:	21bc      	movs	r1, #188	@ 0xbc
 800332e:	f01f fc59 	bl	8022be4 <_ZdlPvj>
 8003332:	4620      	mov	r0, r4
 8003334:	bd10      	pop	{r4, pc}
	...

08003338 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	4604      	mov	r4, r0
    HAL::initialize();
 800333c:	f00b fcc7 	bl	800ecce <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8003344:	f010 ff2a 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 8003348:	4601      	mov	r1, r0
 800334a:	4620      	mov	r0, r4
 800334c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	4908      	ldr	r1, [pc, #32]	@ (8003374 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003352:	4620      	mov	r0, r4
 8003354:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8003358:	2300      	movs	r3, #0
 800335a:	461a      	mov	r2, r3
 800335c:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800335e:	6863      	ldr	r3, [r4, #4]
 8003360:	4a05      	ldr	r2, [pc, #20]	@ (8003378 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003362:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003366:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003368:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 800336c:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800336e:	4a05      	ldr	r2, [pc, #20]	@ (8003384 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003370:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003372:	bd38      	pop	{r3, r4, r5, pc}
 8003374:	d0119400 	.word	0xd0119400
 8003378:	2400b1fc 	.word	0x2400b1fc
 800337c:	2400b1b4 	.word	0x2400b1b4
 8003380:	d0000000 	.word	0xd0000000
 8003384:	00119400 	.word	0x00119400

08003388 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4604      	mov	r4, r0
 800338c:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800338e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
 8003394:	f008 fdbc 	bl	800bf10 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003398:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800339a:	f008 fddc 	bl	800bf56 <osMutexRelease>
        streams[handle].isActive = false;
 800339e:	2324      	movs	r3, #36	@ 0x24
 80033a0:	fb03 4505 	mla	r5, r3, r5, r4
 80033a4:	2300      	movs	r3, #0
 80033a6:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80033aa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80033ae:	b90b      	cbnz	r3, 80033b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80033b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80033b2:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80033b4:	bd38      	pop	{r3, r4, r5, pc}

080033b6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80033b6:	f00b bc3a 	b.w	800ec2e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080033ba <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80033ba:	f00b bdaa 	b.w	800ef12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080033be <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80033be:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80033c2:	b112      	cbz	r2, 80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80033c4:	6803      	ldr	r3, [r0, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	4718      	bx	r3
    }
 80033ca:	4770      	bx	lr

080033cc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033cc:	4a12      	ldr	r2, [pc, #72]	@ (8003418 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80033ce:	6953      	ldr	r3, [r2, #20]
 80033d0:	03db      	lsls	r3, r3, #15
{
 80033d2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033d4:	d51e      	bpl.n	8003414 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80033dc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80033e0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e4:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033e8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80033ec:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80033f0:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033f2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033f6:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033f8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80033fc:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033fe:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003402:	d2f9      	bcs.n	80033f8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003404:	3b20      	subs	r3, #32
 8003406:	f113 0f20 	cmn.w	r3, #32
 800340a:	d1f2      	bne.n	80033f2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800340c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003410:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003414:	bd70      	pop	{r4, r5, r6, pc}
 8003416:	bf00      	nop
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800341c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800341e:	b131      	cbz	r1, 800342e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003420:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003422:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003426:	4a04      	ldr	r2, [pc, #16]	@ (8003438 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003428:	4804      	ldr	r0, [pc, #16]	@ (800343c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800342a:	f01f ff51 	bl	80232d0 <__assert_func>
    }
 800342e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003432:	bd08      	pop	{r3, pc}
 8003434:	08024b43 	.word	0x08024b43
 8003438:	08024b57 	.word	0x08024b57
 800343c:	08024ce1 	.word	0x08024ce1

08003440 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003440:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003442:	b131      	cbz	r1, 8003452 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003444:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003446:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800344a:	4a06      	ldr	r2, [pc, #24]	@ (8003464 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800344c:	4806      	ldr	r0, [pc, #24]	@ (8003468 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800344e:	f01f ff3f 	bl	80232d0 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003452:	6840      	ldr	r0, [r0, #4]
 8003454:	4611      	mov	r1, r2
 8003456:	6803      	ldr	r3, [r0, #0]
    }
 8003458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	4718      	bx	r3
 8003460:	08024b43 	.word	0x08024b43
 8003464:	08024d2b 	.word	0x08024d2b
 8003468:	08024ce1 	.word	0x08024ce1

0800346c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 800346c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800346e:	b129      	cbz	r1, 800347c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003470:	4b03      	ldr	r3, [pc, #12]	@ (8003480 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003472:	2179      	movs	r1, #121	@ 0x79
 8003474:	4a03      	ldr	r2, [pc, #12]	@ (8003484 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003476:	4804      	ldr	r0, [pc, #16]	@ (8003488 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003478:	f01f ff2a 	bl	80232d0 <__assert_func>
    }
 800347c:	68c0      	ldr	r0, [r0, #12]
 800347e:	bd08      	pop	{r3, pc}
 8003480:	08024b43 	.word	0x08024b43
 8003484:	08024ed9 	.word	0x08024ed9
 8003488:	08024ce1 	.word	0x08024ce1

0800348c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 800348c:	b510      	push	{r4, lr}
 800348e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003490:	b129      	cbz	r1, 800349e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8003492:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003494:	21a2      	movs	r1, #162	@ 0xa2
 8003496:	4a19      	ldr	r2, [pc, #100]	@ (80034fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003498:	4819      	ldr	r0, [pc, #100]	@ (8003500 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 800349a:	f01f ff19 	bl	80232d0 <__assert_func>
        switch (cmd)
 800349e:	2a05      	cmp	r2, #5
 80034a0:	d815      	bhi.n	80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034a2:	e8df f002 	tbb	[pc, r2]
 80034a6:	1103      	.short	0x1103
 80034a8:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80034ac:	6840      	ldr	r0, [r0, #4]
 80034ae:	6803      	ldr	r3, [r0, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	4798      	blx	r3
 80034b4:	b158      	cbz	r0, 80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80034bc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80034c0:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80034c2:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80034c6:	e002      	b.n	80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80034ce:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80034d0:	6203      	str	r3, [r0, #32]
 80034d2:	e7f5      	b.n	80034c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80034d4:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80034dc:	e7f0      	b.n	80034c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80034de:	2300      	movs	r3, #0
 80034e0:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80034e4:	2301      	movs	r3, #1
 80034e6:	6203      	str	r3, [r0, #32]
            break;
 80034e8:	e7f1      	b.n	80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80034ea:	3b00      	subs	r3, #0
 80034ec:	bf18      	it	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80034f4:	e7eb      	b.n	80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034f6:	bf00      	nop
 80034f8:	08024b43 	.word	0x08024b43
 80034fc:	0802508e 	.word	0x0802508e
 8003500:	08024ce1 	.word	0x08024ce1

08003504 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003504:	b510      	push	{r4, lr}
 8003506:	460c      	mov	r4, r1
 8003508:	4611      	mov	r1, r2
 800350a:	461a      	mov	r2, r3
        assert(handle < no_streams);
 800350c:	b12c      	cbz	r4, 800351a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003510:	2190      	movs	r1, #144	@ 0x90
 8003512:	4a06      	ldr	r2, [pc, #24]	@ (800352c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003514:	4806      	ldr	r0, [pc, #24]	@ (8003530 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003516:	f01f fedb 	bl	80232d0 <__assert_func>
        stream.frameNumber = 0;
 800351a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800351c:	6840      	ldr	r0, [r0, #4]
 800351e:	6803      	ldr	r3, [r0, #0]
    }
 8003520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4718      	bx	r3
 8003528:	08024b43 	.word	0x08024b43
 800352c:	08025262 	.word	0x08025262
 8003530:	08024ce1 	.word	0x08024ce1

08003534 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003534:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003536:	b129      	cbz	r1, 8003544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 800353a:	2182      	movs	r1, #130	@ 0x82
 800353c:	4a05      	ldr	r2, [pc, #20]	@ (8003554 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800353e:	4806      	ldr	r0, [pc, #24]	@ (8003558 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003540:	f01f fec6 	bl	80232d0 <__assert_func>
        stream.tickCount = 0;
 8003544:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003548:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800354c:	bd08      	pop	{r3, pc}
 800354e:	bf00      	nop
 8003550:	08024b43 	.word	0x08024b43
 8003554:	0802543d 	.word	0x0802543d
 8003558:	08024ce1 	.word	0x08024ce1

0800355c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800355c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003560:	b510      	push	{r4, lr}
 8003562:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003564:	b153      	cbz	r3, 800357c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003566:	f04f 31ff 	mov.w	r1, #4294967295
 800356a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800356c:	f008 fcd0 	bl	800bf10 <osMutexAcquire>
            firstDrawThisFrame = false;
 8003570:	2300      	movs	r3, #0
 8003572:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003576:	2301      	movs	r3, #1
 8003578:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 800357c:	bd10      	pop	{r4, pc}

0800357e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800357e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003582:	b11a      	cbz	r2, 800358c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003584:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003588:	b102      	cbz	r2, 800358c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800358a:	6018      	str	r0, [r3, #0]
        }
    }
 800358c:	4770      	bx	lr
	...

08003590 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003590:	b510      	push	{r4, lr}
 8003592:	4604      	mov	r4, r0
 8003594:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003596:	b129      	cbz	r1, 80035a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003598:	4b13      	ldr	r3, [pc, #76]	@ (80035e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 800359a:	21d0      	movs	r1, #208	@ 0xd0
 800359c:	4a13      	ldr	r2, [pc, #76]	@ (80035ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800359e:	4814      	ldr	r0, [pc, #80]	@ (80035f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80035a0:	f01f fe96 	bl	80232d0 <__assert_func>
        if (stream.isPlaying)
 80035a4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80035a8:	b133      	cbz	r3, 80035b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80035aa:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80035b2:	6963      	ldr	r3, [r4, #20]
 80035b4:	4413      	add	r3, r2
 80035b6:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80035b8:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80035bc:	b90b      	cbnz	r3, 80035c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80035be:	2001      	movs	r0, #1
    }
 80035c0:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80035c2:	68a3      	ldr	r3, [r4, #8]
 80035c4:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80035c6:	6803      	ldr	r3, [r0, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80035cc:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80035ce:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80035d2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d1f1      	bne.n	80035be <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80035da:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ee      	bne.n	80035c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80035e2:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80035e6:	e7eb      	b.n	80035c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80035e8:	08024b43 	.word	0x08024b43
 80035ec:	080255f9 	.word	0x080255f9
 80035f0:	08024ce1 	.word	0x08024ce1
 80035f4:	240252fc 	.word	0x240252fc

080035f8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80035fa:	4c1a      	ldr	r4, [pc, #104]	@ (8003664 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 80035fc:	4605      	mov	r5, r0
    HAL::endFrame();
 80035fe:	f00b fb59 	bl	800ecb4 <_ZN8touchgfx3HAL8endFrameEv>
 8003602:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003606:	b913      	cbnz	r3, 800360e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003608:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800360c:	b1ab      	cbz	r3, 800363a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800360e:	69e1      	ldr	r1, [r4, #28]
 8003610:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003614:	4353      	muls	r3, r2
 8003616:	6922      	ldr	r2, [r4, #16]
 8003618:	434a      	muls	r2, r1
 800361a:	4293      	cmp	r3, r2
 800361c:	d30d      	bcc.n	800363a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800361e:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003622:	b138      	cbz	r0, 8003634 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800362a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 800362c:	bf98      	it	ls
 800362e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003632:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003634:	2301      	movs	r3, #1
 8003636:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 800363a:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 800363c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 800363e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003642:	f008 fd1d 	bl	800c080 <osSemaphoreRelease>
        if (uiHasMutex)
 8003646:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800364a:	b12b      	cbz	r3, 8003658 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 800364c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800364e:	f008 fc82 	bl	800bf56 <osMutexRelease>
            uiHasMutex = false;
 8003652:	2300      	movs	r3, #0
 8003654:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003658:	6868      	ldr	r0, [r5, #4]
 800365a:	6803      	ldr	r3, [r0, #0]
}
 800365c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	4718      	bx	r3
 8003664:	2400b1b4 	.word	0x2400b1b4

08003668 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003668:	4b04      	ldr	r3, [pc, #16]	@ (800367c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800366a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800366e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003672:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003676:	f3bf 8f6f 	isb	sy
}
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100

08003680 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003680:	4b02      	ldr	r3, [pc, #8]	@ (800368c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003682:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003686:	609a      	str	r2, [r3, #8]
}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	e000e100 	.word	0xe000e100

08003690 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003694:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003698:	b9d8      	cbnz	r0, 80036d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 800369a:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800369e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 80036a0:	2501      	movs	r5, #1
                streams[i] = Stream();
 80036a2:	60d8      	str	r0, [r3, #12]
 80036a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036a6:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 80036aa:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036ac:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 80036b0:	6158      	str	r0, [r3, #20]
 80036b2:	6198      	str	r0, [r3, #24]
 80036b4:	61d8      	str	r0, [r3, #28]
 80036b6:	6218      	str	r0, [r3, #32]
 80036b8:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80036ba:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80036bc:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036c0:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80036c4:	443c      	add	r4, r7
 80036c6:	42a2      	cmp	r2, r4
 80036c8:	d90a      	bls.n	80036e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80036cc:	2152      	movs	r1, #82	@ 0x52
 80036ce:	4a0b      	ldr	r2, [pc, #44]	@ (80036fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80036d0:	e003      	b.n	80036da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80036d4:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80036d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036da:	480b      	ldr	r0, [pc, #44]	@ (8003708 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80036dc:	f01f fdf8 	bl	80232d0 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80036e0:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80036e2:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80036e4:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80036e8:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80036ec:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80036ee:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80036f2:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 80036f4:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 80036f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f8:	08025951 	.word	0x08025951
 80036fc:	0802598c 	.word	0x0802598c
 8003700:	0802579a 	.word	0x0802579a
 8003704:	080257ca 	.word	0x080257ca
 8003708:	08024ce1 	.word	0x08024ce1

0800370c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 800370c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800370e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003710:	4e12      	ldr	r6, [pc, #72]	@ (800375c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003712:	4604      	mov	r4, r0
 8003714:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003716:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003718:	6003      	str	r3, [r0, #0]
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003720:	b10a      	cbz	r2, 8003726 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003722:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003724:	b900      	cbnz	r0, 8003728 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003726:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003728:	6803      	ldr	r3, [r0, #0]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	4798      	blx	r3
 800372e:	1e43      	subs	r3, r0, #1
 8003730:	425d      	negs	r5, r3
 8003732:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003734:	6833      	ldr	r3, [r6, #0]
 8003736:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003738:	b130      	cbz	r0, 8003748 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800373a:	6803      	ldr	r3, [r0, #0]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	4798      	blx	r3
 8003740:	2801      	cmp	r0, #1
 8003742:	bf08      	it	eq
 8003744:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003748:	b92d      	cbnz	r5, 8003756 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 800374c:	2127      	movs	r1, #39	@ 0x27
 800374e:	4a06      	ldr	r2, [pc, #24]	@ (8003768 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003750:	4806      	ldr	r0, [pc, #24]	@ (800376c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003752:	f01f fdbd 	bl	80232d0 <__assert_func>
    }
 8003756:	4620      	mov	r0, r4
 8003758:	bd70      	pop	{r4, r5, r6, pc}
 800375a:	bf00      	nop
 800375c:	240252fc 	.word	0x240252fc
 8003760:	0802683c 	.word	0x0802683c
 8003764:	08025b2f 	.word	0x08025b2f
 8003768:	08025b8d 	.word	0x08025b8d
 800376c:	08025bc6 	.word	0x08025bc6

08003770 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003770:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003772:	4e25      	ldr	r6, [pc, #148]	@ (8003808 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003774:	6835      	ldr	r5, [r6, #0]
 8003776:	f3bf 8f5b 	dmb	ish
 800377a:	f015 0501 	ands.w	r5, r5, #1
 800377e:	d140      	bne.n	8003802 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
 8003780:	4630      	mov	r0, r6
 8003782:	f01f fa31 	bl	8022be8 <__cxa_guard_acquire>
 8003786:	2800      	cmp	r0, #0
 8003788:	d03b      	beq.n	8003802 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
class CWRVectorRenderer : public VectorRenderer
 800378a:	4c20      	ldr	r4, [pc, #128]	@ (800380c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 800378c:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
 800378e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003792:	6125      	str	r5, [r4, #16]
 8003794:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003796:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003798:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 800379a:	e9c4 3500 	strd	r3, r5, [r4]
 800379e:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80037a2:	f012 fa76 	bl	8015c92 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 80037a6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037aa:	f00d fda9 	bl	8011300 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80037ae:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80037b0:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 80037b2:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80037b4:	4b18      	ldr	r3, [pc, #96]	@ (8003818 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80037b6:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80037ba:	f7ff ffa7 	bl	800370c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80037be:	4b17      	ldr	r3, [pc, #92]	@ (800381c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80037c0:	4817      	ldr	r0, [pc, #92]	@ (8003820 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 80037c2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80037c6:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80037c8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80037cc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80037d0:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 80037d4:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80037d8:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80037dc:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 80037e6:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80037ea:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 80037ee:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 80037f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb4>)
 80037f4:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80037f8:	f01f fd88 	bl	802330c <atexit>
 80037fc:	4630      	mov	r0, r6
 80037fe:	f01f f9ff 	bl	8022c00 <__cxa_guard_release>
}
 8003802:	4802      	ldr	r0, [pc, #8]	@ (800380c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003804:	bd70      	pop	{r4, r5, r6, pc}
 8003806:	bf00      	nop
 8003808:	2400b0f4 	.word	0x2400b0f4
 800380c:	2400b0f8 	.word	0x2400b0f8
 8003810:	08027544 	.word	0x08027544
 8003814:	0802685c 	.word	0x0802685c
 8003818:	080268d4 	.word	0x080268d4
 800381c:	08027590 	.word	0x08027590
 8003820:	080032d9 	.word	0x080032d9
 8003824:	080275c8 	.word	0x080275c8

08003828 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800382c:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 800382e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003830:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003834:	f04f 31ff 	mov.w	r1, #4294967295
 8003838:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800383a:	f008 fbf5 	bl	800c028 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800383e:	f04f 31ff 	mov.w	r1, #4294967295
 8003842:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003844:	f008 fb64 	bl	800bf10 <osMutexAcquire>
                if (stream.doDecode)
 8003848:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800384c:	b343      	cbz	r3, 80038a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 800384e:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003850:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003854:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003856:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 800385a:	f1b8 0f00 	cmp.w	r8, #0
 800385e:	d023      	beq.n	80038a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	4641      	mov	r1, r8
 8003864:	4628      	mov	r0, r5
 8003866:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003872:	9700      	str	r7, [sp, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800387a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800387e:	68a1      	ldr	r1, [r4, #8]
 8003880:	47c0      	blx	r8
                    stream.frameCount++;
 8003882:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003884:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003888:	3301      	adds	r3, #1
 800388a:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 800388c:	b1f0      	cbz	r0, 80038cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800388e:	682b      	ldr	r3, [r5, #0]
 8003890:	4628      	mov	r0, r5
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	4798      	blx	r3
 8003896:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003898:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800389a:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 800389c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80038a0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80038a2:	f008 fb58 	bl	800bf56 <osMutexRelease>
        while (1)
 80038a6:	e7c5      	b.n	8003834 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80038a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80038aa:	2a00      	cmp	r2, #0
 80038ac:	d0de      	beq.n	800386c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80038ae:	4628      	mov	r0, r5
 80038b0:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 80038b4:	4798      	blx	r3
 80038b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80038b8:	4401      	add	r1, r0
 80038ba:	4628      	mov	r0, r5
 80038bc:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80038c2:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80038c6:	4413      	add	r3, r2
 80038c8:	6123      	str	r3, [r4, #16]
 80038ca:	e7cf      	b.n	800386c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80038cc:	2001      	movs	r0, #1
 80038ce:	e7e3      	b.n	8003898 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080038d0 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80038d0:	4801      	ldr	r0, [pc, #4]	@ (80038d8 <videoTaskFunc+0x8>)
{
 80038d2:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80038d4:	f7ff ffa8 	bl	8003828 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80038d8:	2400b1b4 	.word	0x2400b1b4

080038dc <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80038dc:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80038de:	4814      	ldr	r0, [pc, #80]	@ (8003930 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038e0:	2500      	movs	r5, #0
 80038e2:	f7fe fbf7 	bl	80020d4 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038e6:	4c13      	ldr	r4, [pc, #76]	@ (8003934 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80038e8:	4b13      	ldr	r3, [pc, #76]	@ (8003938 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80038ea:	462a      	mov	r2, r5
 80038ec:	4629      	mov	r1, r5
 80038ee:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038f6:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038f8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038fa:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038fc:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003900:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003904:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003908:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 800390c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003910:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003914:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003918:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800391c:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003920:	f008 fb38 	bl	800bf94 <osSemaphoreNew>
 8003924:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003926:	4628      	mov	r0, r5
 8003928:	f008 faba 	bl	800bea0 <osMutexNew>
 800392c:	6460      	str	r0, [r4, #68]	@ 0x44
}
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	2400b1fc 	.word	0x2400b1fc
 8003934:	2400b1b4 	.word	0x2400b1b4
 8003938:	08026920 	.word	0x08026920

0800393c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800393c:	4770      	bx	lr

0800393e <_ZN23ApplicationFontProviderD0Ev>:
 800393e:	b510      	push	{r4, lr}
 8003940:	4604      	mov	r4, r0
 8003942:	2104      	movs	r1, #4
 8003944:	f01f f94e 	bl	8022be4 <_ZdlPvj>
 8003948:	4620      	mov	r0, r4
 800394a:	bd10      	pop	{r4, pc}

0800394c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 800394c:	2901      	cmp	r1, #1
{
 800394e:	b508      	push	{r3, lr}
    switch (typography)
 8003950:	d006      	beq.n	8003960 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003952:	2902      	cmp	r1, #2
 8003954:	d008      	beq.n	8003968 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003956:	b959      	cbnz	r1, 8003970 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003958:	f001 fb1c 	bl	8004f94 <_ZN17TypedTextDatabase8getFontsEv>
 800395c:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800395e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003960:	f001 fb18 	bl	8004f94 <_ZN17TypedTextDatabase8getFontsEv>
 8003964:	6840      	ldr	r0, [r0, #4]
 8003966:	e7fa      	b.n	800395e <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003968:	f001 fb14 	bl	8004f94 <_ZN17TypedTextDatabase8getFontsEv>
 800396c:	6880      	ldr	r0, [r0, #8]
 800396e:	e7f6      	b.n	800395e <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003970:	2000      	movs	r0, #0
 8003972:	e7f4      	b.n	800395e <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003974 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003974:	4800      	ldr	r0, [pc, #0]	@ (8003978 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003976:	4770      	bx	lr
 8003978:	08026970 	.word	0x08026970

0800397c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800397c:	200a      	movs	r0, #10
 800397e:	4770      	bx	lr

08003980 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003980:	b513      	push	{r0, r1, r4, lr}
 8003982:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003984:	b151      	cbz	r1, 800399c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003986:	6803      	ldr	r3, [r0, #0]
 8003988:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800398a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800398c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003990:	689c      	ldr	r4, [r3, #8]
 8003992:	f10d 0303 	add.w	r3, sp, #3
 8003996:	47a0      	blx	r4
        return glyph;
    }
 8003998:	b002      	add	sp, #8
 800399a:	bd10      	pop	{r4, pc}
            return 0;
 800399c:	4608      	mov	r0, r1
 800399e:	e7fb      	b.n	8003998 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080039a0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80039a0:	89c0      	ldrh	r0, [r0, #14]
 80039a2:	4770      	bx	lr

080039a4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80039a4:	8a00      	ldrh	r0, [r0, #16]
 80039a6:	4770      	bx	lr

080039a8 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80039a8:	88c0      	ldrh	r0, [r0, #6]
 80039aa:	4770      	bx	lr

080039ac <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80039ac:	8880      	ldrh	r0, [r0, #4]
 80039ae:	4770      	bx	lr

080039b0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80039b0:	7a80      	ldrb	r0, [r0, #10]
    }
 80039b2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80039b6:	4770      	bx	lr

080039b8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80039b8:	7a80      	ldrb	r0, [r0, #10]
    }
 80039ba:	09c0      	lsrs	r0, r0, #7
 80039bc:	4770      	bx	lr

080039be <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80039be:	2000      	movs	r0, #0
 80039c0:	4770      	bx	lr
	...

080039c4 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80039c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80039cc <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	00000000 	.word	0x00000000

080039d0 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80039d0:	4770      	bx	lr

080039d2 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80039d2:	b510      	push	{r4, lr}
 80039d4:	4604      	mov	r4, r0
    }
 80039d6:	2108      	movs	r1, #8
 80039d8:	f01f f904 	bl	8022be4 <_ZdlPvj>
 80039dc:	4620      	mov	r0, r4
 80039de:	bd10      	pop	{r4, pc}

080039e0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80039e0:	4770      	bx	lr

080039e2 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80039e2:	4770      	bx	lr

080039e4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80039e4:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80039e8:	6808      	ldr	r0, [r1, #0]
 80039ea:	6849      	ldr	r1, [r1, #4]
 80039ec:	c303      	stmia	r3!, {r0, r1}
    }
 80039ee:	4770      	bx	lr

080039f0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80039f0:	4770      	bx	lr

080039f2 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80039f2:	4770      	bx	lr

080039f4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80039f4:	6041      	str	r1, [r0, #4]
    }
 80039f6:	4770      	bx	lr

080039f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80039f8:	4770      	bx	lr

080039fa <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80039fa:	4770      	bx	lr

080039fc <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 80039fc:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80039fe:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003a02:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003a06:	2300      	movs	r3, #0
 8003a08:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003a0c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003a10:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	08003ef9 	.word	0x08003ef9

08003a1c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	7203      	strb	r3, [r0, #8]
    }
 8003a20:	4770      	bx	lr

08003a22 <_ZN8touchgfx15BlockTransition8tearDownEv>:
        }
    }

    virtual void tearDown()
    {
    }
 8003a22:	4770      	bx	lr

08003a24 <_ZN8touchgfx15BlockTransition4initEv>:

    virtual void init()
    {
        Transition::init();
    }
 8003a24:	4770      	bx	lr

08003a26 <_ZN8touchgfx15BlockTransition10invalidateEv>:
     * Block transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 8003a26:	4770      	bx	lr

08003a28 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 8003a28:	4770      	bx	lr

08003a2a <_ZN8touchgfx15BlockTransitionD1Ev>:
class BlockTransition : public Transition
 8003a2a:	4770      	bx	lr

08003a2c <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003a2c:	4770      	bx	lr

08003a2e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
    {
        Transition::init();
    }
 8003a2e:	4770      	bx	lr

08003a30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003a30:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003a32:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003a34:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003a36:	68c2      	ldr	r2, [r0, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	1054      	asrs	r4, r2, #1
 8003a3c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003a40:	07d2      	lsls	r2, r2, #31
 8003a42:	bf48      	it	mi
 8003a44:	590a      	ldrmi	r2, [r1, r4]
    }
 8003a46:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003a4a:	bf48      	it	mi
 8003a4c:	58d3      	ldrmi	r3, [r2, r3]
 8003a4e:	4718      	bx	r3

08003a50 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003a50:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003a52:	6840      	ldr	r0, [r0, #4]
 8003a54:	b130      	cbz	r0, 8003a64 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	b91a      	cbnz	r2, 8003a62 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003a5a:	68d8      	ldr	r0, [r3, #12]
 8003a5c:	f000 0001 	and.w	r0, r0, #1
 8003a60:	4770      	bx	lr
 8003a62:	2001      	movs	r0, #1
    }
 8003a64:	4770      	bx	lr

08003a66 <_ZN8touchgfx15BlockTransitionD0Ev>:
 8003a66:	b510      	push	{r4, lr}
 8003a68:	4604      	mov	r4, r0
 8003a6a:	2114      	movs	r1, #20
 8003a6c:	f01f f8ba 	bl	8022be4 <_ZdlPvj>
 8003a70:	4620      	mov	r0, r4
 8003a72:	bd10      	pop	{r4, pc}

08003a74 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003a74:	b510      	push	{r4, lr}
 8003a76:	4604      	mov	r4, r0
 8003a78:	210c      	movs	r1, #12
 8003a7a:	f01f f8b3 	bl	8022be4 <_ZdlPvj>
 8003a7e:	4620      	mov	r0, r4
 8003a80:	bd10      	pop	{r4, pc}

08003a82 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 8003a82:	b510      	push	{r4, lr}
 8003a84:	4604      	mov	r4, r0
 8003a86:	2114      	movs	r1, #20
 8003a88:	f01f f8ac 	bl	8022be4 <_ZdlPvj>
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bd10      	pop	{r4, pc}

08003a90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a90:	b510      	push	{r4, lr}
 8003a92:	4604      	mov	r4, r0
 8003a94:	2110      	movs	r1, #16
 8003a96:	f01f f8a5 	bl	8022be4 <_ZdlPvj>
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	bd10      	pop	{r4, pc}

08003a9e <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003a9e:	b510      	push	{r4, lr}
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003aa6:	f01f f89d 	bl	8022be4 <_ZdlPvj>
 8003aaa:	4620      	mov	r0, r4
 8003aac:	bd10      	pop	{r4, pc}

08003aae <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003aae:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003ab0:	f010 fb74 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 8003ab4:	6803      	ldr	r3, [r0, #0]
    }
 8003ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	4718      	bx	r3

08003abe <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:

    virtual void invalidate()
 8003abe:	b510      	push	{r4, lr}
    {
        // The last step when finalizing a transition (see MVPApplication::finalizeTransition)
        // is to call invalidate on the transition. For the WipeTransition we want to erase any
        // invalidated areas that might have been added when setting up the new screen, which
        // is the first step of finalizing a transition (see MVPApplication::finalizeTransition).
        Application::getInstance()->clearCachedAreas();
 8003ac0:	f010 fb6c 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 8003ac4:	6803      	ldr	r3, [r0, #0]
    }
 8003ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->clearCachedAreas();
 8003aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003acc:	4718      	bx	r3
	...

08003ad0 <_ZN8touchgfx15BlockTransition15handleTickEventEv>:
    virtual void handleTickEvent()
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	b0b2      	sub	sp, #200	@ 0xc8
 8003ad4:	4604      	mov	r4, r0
        const int indeces[animationSteps] = { 20, 11, 47, 14, 10, 0, 18, 28, 13, 6, 2, 41,
 8003ad6:	22c0      	movs	r2, #192	@ 0xc0
 8003ad8:	491d      	ldr	r1, [pc, #116]	@ (8003b50 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x80>)
 8003ada:	a802      	add	r0, sp, #8
 8003adc:	f01f ff75 	bl	80239ca <memcpy>
        if (animationCounter >= animationSteps)
 8003ae0:	7c23      	ldrb	r3, [r4, #16]
 8003ae2:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ae4:	d903      	bls.n	8003aee <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x1e>
            done = true;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	7223      	strb	r3, [r4, #8]
    }
 8003aea:	b032      	add	sp, #200	@ 0xc8
 8003aec:	bd70      	pop	{r4, r5, r6, pc}
        if (animationCounter == 0 && HAL::USE_DOUBLE_BUFFERING)
 8003aee:	b933      	cbnz	r3, 8003afe <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x2e>
 8003af0:	4b18      	ldr	r3, [pc, #96]	@ (8003b54 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x84>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	b11b      	cbz	r3, 8003afe <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x2e>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8003af6:	f010 fb51 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 8003afa:	f010 fb55 	bl	80141a8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        while (blocks_per_tick-- > 0 && animationCounter <= animationSteps)
 8003afe:	2502      	movs	r5, #2
 8003b00:	7c23      	ldrb	r3, [r4, #16]
 8003b02:	2b30      	cmp	r3, #48	@ 0x30
 8003b04:	d8f1      	bhi.n	8003aea <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x1a>
            const int index = indeces[animationCounter];
 8003b06:	aa32      	add	r2, sp, #200	@ 0xc8
            const int16_t x = (index % blocksHorizontal) * blockWidth;
 8003b08:	89e6      	ldrh	r6, [r4, #14]
 8003b0a:	8960      	ldrh	r0, [r4, #10]
            const int index = indeces[animationCounter];
 8003b0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            const int16_t y = (index / blocksHorizontal) * blockHeight;
 8003b10:	89a1      	ldrh	r1, [r4, #12]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003b12:	f8ad 0004 	strh.w	r0, [sp, #4]
            const int index = indeces[animationCounter];
 8003b16:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 8003b1a:	f8ad 1006 	strh.w	r1, [sp, #6]
            const int16_t x = (index % blocksHorizontal) * blockWidth;
 8003b1e:	fb93 f2f6 	sdiv	r2, r3, r6
 8003b22:	fb06 3312 	mls	r3, r6, r2, r3
            const int16_t y = (index / blocksHorizontal) * blockHeight;
 8003b26:	fb12 f201 	smulbb	r2, r2, r1
            screenContainer->invalidateRect(invRect);
 8003b2a:	4669      	mov	r1, sp
            const int16_t x = (index % blocksHorizontal) * blockWidth;
 8003b2c:	fb13 f300 	smulbb	r3, r3, r0
            screenContainer->invalidateRect(invRect);
 8003b30:	6860      	ldr	r0, [r4, #4]
 8003b32:	f8ad 2002 	strh.w	r2, [sp, #2]
 8003b36:	f8ad 3000 	strh.w	r3, [sp]
 8003b3a:	6803      	ldr	r3, [r0, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	4798      	blx	r3
            animationCounter++;
 8003b40:	7c23      	ldrb	r3, [r4, #16]
        while (blocks_per_tick-- > 0 && animationCounter <= animationSteps)
 8003b42:	2d01      	cmp	r5, #1
            animationCounter++;
 8003b44:	f103 0301 	add.w	r3, r3, #1
 8003b48:	7423      	strb	r3, [r4, #16]
        while (blocks_per_tick-- > 0 && animationCounter <= animationSteps)
 8003b4a:	d0ce      	beq.n	8003aea <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x1a>
 8003b4c:	2501      	movs	r5, #1
 8003b4e:	e7d7      	b.n	8003b00 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x30>
 8003b50:	08024348 	.word	0x08024348
 8003b54:	240252fa 	.word	0x240252fa

08003b58 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8003b58:	b513      	push	{r0, r1, r4, lr}
 8003b5a:	4604      	mov	r4, r0
        animationCounter++;
 8003b5c:	7a80      	ldrb	r0, [r0, #10]
 8003b5e:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 8003b60:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8003b62:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8003b64:	4298      	cmp	r0, r3
        animationCounter++;
 8003b66:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8003b68:	d905      	bls.n	8003b76 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	72a3      	strb	r3, [r4, #10]
    }
 8003b72:	b002      	add	sp, #8
 8003b74:	bd10      	pop	{r4, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8003b76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f012 fdc0 	bl	8016700 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8003b80:	07c3      	lsls	r3, r0, #31
 8003b82:	d507      	bpl.n	8003b94 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8003b84:	2800      	cmp	r0, #0
 8003b86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b8a:	bfc8      	it	gt
 8003b8c:	2301      	movgt	r3, #1
 8003b8e:	fa13 f080 	uxtah	r0, r3, r0
 8003b92:	b200      	sxth	r0, r0
        : x(0), y(0), width(0), height(0)
 8003b94:	2300      	movs	r3, #0
                rect.x = HAL::DISPLAY_WIDTH - calculatedValue;
 8003b96:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8003b98:	81e0      	strh	r0, [r4, #14]
                rect.x = HAL::DISPLAY_WIDTH - calculatedValue;
 8003b9a:	8812      	ldrh	r2, [r2, #0]
 8003b9c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8003ba0:	b283      	uxth	r3, r0
 8003ba2:	1ad2      	subs	r2, r2, r3
 8003ba4:	f8ad 2000 	strh.w	r2, [sp]
                rect.width = calculatedValue - prevCalculatedValue;
 8003ba8:	8a22      	ldrh	r2, [r4, #16]
        prevCalculatedValue = calculatedValue;
 8003baa:	8220      	strh	r0, [r4, #16]
                rect.width = calculatedValue - prevCalculatedValue;
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	f8ad 3004 	strh.w	r3, [sp, #4]
                rect.height = HAL::DISPLAY_HEIGHT;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8003bba:	f010 faef 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 8003bbe:	aa02      	add	r2, sp, #8
 8003bc0:	6803      	ldr	r3, [r0, #0]
 8003bc2:	e912 0006 	ldmdb	r2, {r1, r2}
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8003bca:	7aa3      	ldrb	r3, [r4, #10]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d1d0      	bne.n	8003b72 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0cc      	beq.n	8003b72 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8003bd8:	f010 fae0 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
    }
 8003bdc:	b002      	add	sp, #8
 8003bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8003be2:	f010 bae1 	b.w	80141a8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 8003be6:	bf00      	nop
 8003be8:	240252f0 	.word	0x240252f0
 8003bec:	240252f2 	.word	0x240252f2
 8003bf0:	240252fa 	.word	0x240252fa

08003bf4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003bf8:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003bfc:	b158      	cbz	r0, 8003c16 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003bfe:	6803      	ldr	r3, [r0, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4798      	blx	r3
 8003c04:	b138      	cbz	r0, 8003c16 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003c06:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003c0a:	6803      	ldr	r3, [r0, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003c16:	bd10      	pop	{r4, pc}

08003c18 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenWipeTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenWipeTransitionEastImpl()
{
 8003c18:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003c1c:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8003c20:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003c22:	f8db 0008 	ldr.w	r0, [fp, #8]
 8003c26:	6803      	ldr	r3, [r0, #0]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4798      	blx	r3
 8003c2c:	f5b0 7f2b 	cmp.w	r0, #684	@ 0x2ac
 8003c30:	d205      	bcs.n	8003c3e <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x26>
 8003c32:	4b49      	ldr	r3, [pc, #292]	@ (8003d58 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x140>)
 8003c34:	21a3      	movs	r1, #163	@ 0xa3
 8003c36:	4a49      	ldr	r2, [pc, #292]	@ (8003d5c <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x144>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003c38:	4849      	ldr	r0, [pc, #292]	@ (8003d60 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x148>)
 8003c3a:	f01f fb49 	bl	80232d0 <__assert_func>
 8003c3e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003c42:	6803      	ldr	r3, [r0, #0]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4798      	blx	r3
 8003c48:	280f      	cmp	r0, #15
 8003c4a:	d803      	bhi.n	8003c54 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x3c>
 8003c4c:	4b45      	ldr	r3, [pc, #276]	@ (8003d64 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x14c>)
 8003c4e:	21a4      	movs	r1, #164	@ 0xa4
 8003c50:	4a42      	ldr	r2, [pc, #264]	@ (8003d5c <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x144>)
 8003c52:	e7f1      	b.n	8003c38 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003c54:	f8db 000c 	ldr.w	r0, [fp, #12]
 8003c58:	6803      	ldr	r3, [r0, #0]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4798      	blx	r3
 8003c5e:	2813      	cmp	r0, #19
 8003c60:	d803      	bhi.n	8003c6a <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x52>
 8003c62:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x150>)
 8003c64:	21a5      	movs	r1, #165	@ 0xa5
 8003c66:	4a3d      	ldr	r2, [pc, #244]	@ (8003d5c <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x144>)
 8003c68:	e7e6      	b.n	8003c38 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x20>
    if (*currentTrans)
 8003c6a:	f8df 9108 	ldr.w	r9, [pc, #264]	@ 8003d74 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x15c>
    Application::getInstance()->clearAllTimerWidgets();
 8003c6e:	f010 fa95 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003c72:	3004      	adds	r0, #4
 8003c74:	f010 fadf 	bl	8014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003c78:	f8d9 0000 	ldr.w	r0, [r9]
 8003c7c:	b110      	cbz	r0, 8003c84 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 8003c7e:	6803      	ldr	r3, [r0, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	4798      	blx	r3
    if (*currentTrans)
 8003c84:	f8d9 0000 	ldr.w	r0, [r9]
 8003c88:	b110      	cbz	r0, 8003c90 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 8003c8a:	6803      	ldr	r3, [r0, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4798      	blx	r3
    if (*currentScreen)
 8003c90:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 8003d78 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x160>
 8003c94:	f8d8 0000 	ldr.w	r0, [r8]
 8003c98:	b110      	cbz	r0, 8003ca0 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 8003c9a:	6803      	ldr	r3, [r0, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	4798      	blx	r3
    if (*currentPresenter)
 8003ca0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003ca4:	b110      	cbz	r0, 8003cac <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8003ca6:	6803      	ldr	r3, [r0, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4798      	blx	r3
    if (*currentScreen)
 8003cac:	f8d8 0000 	ldr.w	r0, [r8]
 8003cb0:	b110      	cbz	r0, 8003cb8 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 8003cb2:	6803      	ldr	r3, [r0, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4798      	blx	r3
    if (*currentPresenter)
 8003cb8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003cbc:	b110      	cbz	r0, 8003cc4 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8003cbe:	6803      	ldr	r3, [r0, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003cc4:	f8db 000c 	ldr.w	r0, [fp, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003cc8:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003cca:	2600      	movs	r6, #0
 8003ccc:	6803      	ldr	r3, [r0, #0]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	4798      	blx	r3
          prevCalculatedValue(0)
 8003cd2:	4b26      	ldr	r3, [pc, #152]	@ (8003d6c <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x154>)
 8003cd4:	4604      	mov	r4, r0
          animationCounter(0),
 8003cd6:	7286      	strb	r6, [r0, #10]
          prevCalculatedValue(0)
 8003cd8:	6003      	str	r3, [r0, #0]
 8003cda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003cde:	6046      	str	r6, [r0, #4]
 8003ce0:	4631      	mov	r1, r6
 8003ce2:	8103      	strh	r3, [r0, #8]
            targetValue = HAL::DISPLAY_WIDTH;
 8003ce4:	4b22      	ldr	r3, [pc, #136]	@ (8003d70 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x158>)
          calculatedValue(0),
 8003ce6:	81c6      	strh	r6, [r0, #14]
            targetValue = HAL::DISPLAY_WIDTH;
 8003ce8:	881b      	ldrh	r3, [r3, #0]
          prevCalculatedValue(0)
 8003cea:	8206      	strh	r6, [r0, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 8003cec:	8183      	strh	r3, [r0, #12]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003cee:	f8db 0008 	ldr.w	r0, [fp, #8]
 8003cf2:	6803      	ldr	r3, [r0, #0]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	4798      	blx	r3
 8003cf8:	4605      	mov	r5, r0
 8003cfa:	f001 fa65 	bl	80051c8 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003cfe:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003d02:	4631      	mov	r1, r6
 8003d04:	6803      	ldr	r3, [r0, #0]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	4798      	blx	r3
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f001 fa39 	bl	8005184 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003d12:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003d14:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003d18:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003d1a:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003d1e:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003d22:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003d26:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003d28:	f8c6 a008 	str.w	sl, [r6, #8]
 8003d2c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003d2e:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003d30:	4798      	blx	r3
    newPresenter->activate();
 8003d32:	6833      	ldr	r3, [r6, #0]
 8003d34:	4630      	mov	r0, r6
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	f012 fcd9 	bl	80166f4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	4620      	mov	r0, r4
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	4798      	blx	r3
    newTransition->invalidate();
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	695b      	ldr	r3, [r3, #20]
}
 8003d50:	b001      	add	sp, #4
 8003d52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d56:	4718      	bx	r3
 8003d58:	08025c36 	.word	0x08025c36
 8003d5c:	08025cc4 	.word	0x08025cc4
 8003d60:	08025da8 	.word	0x08025da8
 8003d64:	08025dfd 	.word	0x08025dfd
 8003d68:	08025ea0 	.word	0x08025ea0
 8003d6c:	08026b04 	.word	0x08026b04
 8003d70:	240252f0 	.word	0x240252f0
 8003d74:	24025344 	.word	0x24025344
 8003d78:	24025340 	.word	0x24025340

08003d7c <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv>:
{
 8003d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003d80:	e9d0 6955 	ldrd	r6, r9, [r0, #340]	@ 0x154
{
 8003d84:	4605      	mov	r5, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003d86:	68b0      	ldr	r0, [r6, #8]
 8003d88:	6803      	ldr	r3, [r0, #0]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4798      	blx	r3
 8003d8e:	f5b0 7ff8 	cmp.w	r0, #496	@ 0x1f0
 8003d92:	d205      	bcs.n	8003da0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x24>
 8003d94:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x154>)
 8003d96:	21a3      	movs	r1, #163	@ 0xa3
 8003d98:	4a4e      	ldr	r2, [pc, #312]	@ (8003ed4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x158>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003d9a:	484f      	ldr	r0, [pc, #316]	@ (8003ed8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x15c>)
 8003d9c:	f01f fa98 	bl	80232d0 <__assert_func>
 8003da0:	6870      	ldr	r0, [r6, #4]
 8003da2:	6803      	ldr	r3, [r0, #0]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4798      	blx	r3
 8003da8:	280f      	cmp	r0, #15
 8003daa:	d803      	bhi.n	8003db4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x38>
 8003dac:	4b4b      	ldr	r3, [pc, #300]	@ (8003edc <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x160>)
 8003dae:	21a4      	movs	r1, #164	@ 0xa4
 8003db0:	4a48      	ldr	r2, [pc, #288]	@ (8003ed4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x158>)
 8003db2:	e7f2      	b.n	8003d9a <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003db4:	68f0      	ldr	r0, [r6, #12]
 8003db6:	6803      	ldr	r3, [r0, #0]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4798      	blx	r3
 8003dbc:	2813      	cmp	r0, #19
 8003dbe:	d803      	bhi.n	8003dc8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x4c>
 8003dc0:	4b47      	ldr	r3, [pc, #284]	@ (8003ee0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x164>)
 8003dc2:	21a5      	movs	r1, #165	@ 0xa5
 8003dc4:	4a43      	ldr	r2, [pc, #268]	@ (8003ed4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x158>)
 8003dc6:	e7e8      	b.n	8003d9a <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x1e>
    if (*currentTrans)
 8003dc8:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 8003ef4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x178>
    Application::getInstance()->clearAllTimerWidgets();
 8003dcc:	f010 f9e6 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 8003dd0:	3004      	adds	r0, #4
 8003dd2:	f010 fa30 	bl	8014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003dd6:	f8d8 0000 	ldr.w	r0, [r8]
 8003dda:	b110      	cbz	r0, 8003de2 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003ddc:	6803      	ldr	r3, [r0, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4798      	blx	r3
    if (*currentTrans)
 8003de2:	f8d8 0000 	ldr.w	r0, [r8]
 8003de6:	b110      	cbz	r0, 8003dee <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003de8:	6803      	ldr	r3, [r0, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4798      	blx	r3
    if (*currentScreen)
 8003dee:	4f3d      	ldr	r7, [pc, #244]	@ (8003ee4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x168>)
 8003df0:	6838      	ldr	r0, [r7, #0]
 8003df2:	b110      	cbz	r0, 8003dfa <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x7e>
        (*currentScreen)->tearDownScreen();
 8003df4:	6803      	ldr	r3, [r0, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	4798      	blx	r3
    if (*currentPresenter)
 8003dfa:	f8d5 013c 	ldr.w	r0, [r5, #316]	@ 0x13c
 8003dfe:	b110      	cbz	r0, 8003e06 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x8a>
        (*currentPresenter)->deactivate();
 8003e00:	6803      	ldr	r3, [r0, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4798      	blx	r3
    if (*currentScreen)
 8003e06:	6838      	ldr	r0, [r7, #0]
 8003e08:	b110      	cbz	r0, 8003e10 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x94>
        (*currentScreen)->~Screen();
 8003e0a:	6803      	ldr	r3, [r0, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4798      	blx	r3
    if (*currentPresenter)
 8003e10:	f8d5 013c 	ldr.w	r0, [r5, #316]	@ 0x13c
 8003e14:	b110      	cbz	r0, 8003e1c <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0xa0>
        (*currentPresenter)->~Presenter();
 8003e16:	6803      	ldr	r3, [r0, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003e1c:	68f0      	ldr	r0, [r6, #12]
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6803      	ldr	r3, [r0, #0]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	4798      	blx	r3
 8003e26:	2300      	movs	r3, #0
          animationCounter(0)
 8003e28:	4a2f      	ldr	r2, [pc, #188]	@ (8003ee8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x16c>)
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	6043      	str	r3, [r0, #4]
 8003e2e:	7203      	strb	r3, [r0, #8]
 8003e30:	7403      	strb	r3, [r0, #16]
        if (HAL::DISPLAY_WIDTH > HAL::DISPLAY_HEIGHT)
 8003e32:	4b2e      	ldr	r3, [pc, #184]	@ (8003eec <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x170>)
          animationCounter(0)
 8003e34:	6002      	str	r2, [r0, #0]
        if (HAL::DISPLAY_WIDTH > HAL::DISPLAY_HEIGHT)
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x174>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d93f      	bls.n	8003ec0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0x144>
            blockHeight = (HAL::DISPLAY_HEIGHT + 5) / 6;
 8003e40:	2106      	movs	r1, #6
 8003e42:	3305      	adds	r3, #5
            blockWidth = (HAL::DISPLAY_WIDTH + 7) / 8;
 8003e44:	3207      	adds	r2, #7
            blockHeight = (HAL::DISPLAY_HEIGHT + 5) / 6;
 8003e46:	fbb3 f3f1 	udiv	r3, r3, r1
            blockWidth = (HAL::DISPLAY_WIDTH + 7) / 8;
 8003e4a:	08d2      	lsrs	r2, r2, #3
            blockHeight = (HAL::DISPLAY_HEIGHT + 5) / 6;
 8003e4c:	2108      	movs	r1, #8
 8003e4e:	b29b      	uxth	r3, r3
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003e50:	68b0      	ldr	r0, [r6, #8]
 8003e52:	81a3      	strh	r3, [r4, #12]
 8003e54:	6803      	ldr	r3, [r0, #0]
            blockWidth = (HAL::DISPLAY_WIDTH + 7) / 8;
 8003e56:	8162      	strh	r2, [r4, #10]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            blocksHorizontal = 8;
 8003e5a:	81e1      	strh	r1, [r4, #14]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4798      	blx	r3
 8003e60:	4682      	mov	sl, r0
 8003e62:	f001 f937 	bl	80050d4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003e66:	6870      	ldr	r0, [r6, #4]
 8003e68:	2100      	movs	r1, #0
 8003e6a:	6803      	ldr	r3, [r0, #0]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	4798      	blx	r3
 8003e70:	4606      	mov	r6, r0
 8003e72:	4651      	mov	r1, sl
 8003e74:	f001 f8ee 	bl	8005054 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8003e78:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003e7a:	f8c5 613c 	str.w	r6, [r5, #316]	@ 0x13c
    newScreen->setupScreen();
 8003e7e:	4650      	mov	r0, sl
    *currentTrans = newTransition;
 8003e80:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 8003e84:	f8c7 a000 	str.w	sl, [r7]
 8003e88:	f8c9 3000 	str.w	r3, [r9]
    newScreen->setupScreen();
 8003e8c:	f8da 3000 	ldr.w	r3, [sl]
 8003e90:	f8c6 9008 	str.w	r9, [r6, #8]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f8ca 603c 	str.w	r6, [sl, #60]	@ 0x3c
 8003e9a:	4798      	blx	r3
    newPresenter->activate();
 8003e9c:	6833      	ldr	r3, [r6, #0]
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	f012 fc24 	bl	80166f4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	4620      	mov	r0, r4
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	4798      	blx	r3
    newTransition->invalidate();
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	695b      	ldr	r3, [r3, #20]
}
 8003eba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ebe:	4718      	bx	r3
            blockWidth = (HAL::DISPLAY_WIDTH + 5) / 6;
 8003ec0:	3205      	adds	r2, #5
 8003ec2:	2106      	movs	r1, #6
            blockHeight = (HAL::DISPLAY_HEIGHT + 7) / 8;
 8003ec4:	3307      	adds	r3, #7
            blockWidth = (HAL::DISPLAY_WIDTH + 5) / 6;
 8003ec6:	fbb2 f2f1 	udiv	r2, r2, r1
            blockHeight = (HAL::DISPLAY_HEIGHT + 7) / 8;
 8003eca:	08db      	lsrs	r3, r3, #3
            blockWidth = (HAL::DISPLAY_WIDTH + 5) / 6;
 8003ecc:	b292      	uxth	r2, r2
            blocksHorizontal = 6;
 8003ece:	e7bf      	b.n	8003e50 <_ZN23FrontendApplicationBase36gotoScreen1ScreenBlockTransitionImplEv+0xd4>
 8003ed0:	08025c36 	.word	0x08025c36
 8003ed4:	08025f43 	.word	0x08025f43
 8003ed8:	08025da8 	.word	0x08025da8
 8003edc:	08025dfd 	.word	0x08025dfd
 8003ee0:	08025ea0 	.word	0x08025ea0
 8003ee4:	24025340 	.word	0x24025340
 8003ee8:	08026ae0 	.word	0x08026ae0
 8003eec:	240252f0 	.word	0x240252f0
 8003ef0:	240252f2 	.word	0x240252f2
 8003ef4:	24025344 	.word	0x24025344

08003ef8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 8003ef8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003efc:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003f00:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003f02:	68b0      	ldr	r0, [r6, #8]
 8003f04:	6803      	ldr	r3, [r0, #0]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	4798      	blx	r3
 8003f0a:	f5b0 7ff8 	cmp.w	r0, #496	@ 0x1f0
 8003f0e:	d205      	bcs.n	8003f1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003f10:	4b44      	ldr	r3, [pc, #272]	@ (8004024 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003f12:	21a3      	movs	r1, #163	@ 0xa3
 8003f14:	4a44      	ldr	r2, [pc, #272]	@ (8004028 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003f16:	4845      	ldr	r0, [pc, #276]	@ (800402c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003f18:	f01f f9da 	bl	80232d0 <__assert_func>
 8003f1c:	6870      	ldr	r0, [r6, #4]
 8003f1e:	6803      	ldr	r3, [r0, #0]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	4798      	blx	r3
 8003f24:	280f      	cmp	r0, #15
 8003f26:	d803      	bhi.n	8003f30 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003f28:	4b41      	ldr	r3, [pc, #260]	@ (8004030 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003f2a:	21a4      	movs	r1, #164	@ 0xa4
 8003f2c:	4a3e      	ldr	r2, [pc, #248]	@ (8004028 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003f2e:	e7f2      	b.n	8003f16 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003f30:	68f0      	ldr	r0, [r6, #12]
 8003f32:	6803      	ldr	r3, [r0, #0]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4798      	blx	r3
 8003f38:	280b      	cmp	r0, #11
 8003f3a:	d803      	bhi.n	8003f44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003f3e:	21a5      	movs	r1, #165	@ 0xa5
 8003f40:	4a39      	ldr	r2, [pc, #228]	@ (8004028 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003f42:	e7e8      	b.n	8003f16 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003f44:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 800403c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003f48:	f010 f928 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 8003f4c:	3004      	adds	r0, #4
 8003f4e:	f010 f972 	bl	8014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003f52:	f8d9 0000 	ldr.w	r0, [r9]
 8003f56:	b110      	cbz	r0, 8003f5e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003f58:	6803      	ldr	r3, [r0, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4798      	blx	r3
    if (*currentTrans)
 8003f5e:	f8d9 0000 	ldr.w	r0, [r9]
 8003f62:	b110      	cbz	r0, 8003f6a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003f64:	6803      	ldr	r3, [r0, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4798      	blx	r3
    if (*currentScreen)
 8003f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003f6e:	f8d8 0000 	ldr.w	r0, [r8]
 8003f72:	b110      	cbz	r0, 8003f7a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003f74:	6803      	ldr	r3, [r0, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	4798      	blx	r3
    if (*currentPresenter)
 8003f7a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f7e:	b110      	cbz	r0, 8003f86 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003f80:	6803      	ldr	r3, [r0, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4798      	blx	r3
    if (*currentScreen)
 8003f86:	f8d8 0000 	ldr.w	r0, [r8]
 8003f8a:	b110      	cbz	r0, 8003f92 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003f8c:	6803      	ldr	r3, [r0, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4798      	blx	r3
    if (*currentPresenter)
 8003f92:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f96:	b110      	cbz	r0, 8003f9e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003f98:	6803      	ldr	r3, [r0, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003f9e:	68f0      	ldr	r0, [r6, #12]
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f04f 0b00 	mov.w	fp, #0
 8003fa6:	6803      	ldr	r3, [r0, #0]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	4798      	blx	r3
 8003fac:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003fae:	4604      	mov	r4, r0
 8003fb0:	f8c0 b004 	str.w	fp, [r0, #4]
 8003fb4:	f880 b008 	strb.w	fp, [r0, #8]
 8003fb8:	4659      	mov	r1, fp
 8003fba:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003fbc:	68b0      	ldr	r0, [r6, #8]
 8003fbe:	6803      	ldr	r3, [r0, #0]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	4798      	blx	r3
 8003fc4:	4605      	mov	r5, r0
 8003fc6:	f001 f885 	bl	80050d4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003fca:	6870      	ldr	r0, [r6, #4]
 8003fcc:	4659      	mov	r1, fp
 8003fce:	6803      	ldr	r3, [r0, #0]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	4798      	blx	r3
 8003fd4:	4606      	mov	r6, r0
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	f001 f83c 	bl	8005054 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8003fdc:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003fde:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003fe2:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003fe4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003fe8:	f8c8 5000 	str.w	r5, [r8]
 8003fec:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	f8c6 a008 	str.w	sl, [r6, #8]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003ffa:	4798      	blx	r3
    newPresenter->activate();
 8003ffc:	6833      	ldr	r3, [r6, #0]
 8003ffe:	4630      	mov	r0, r6
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004004:	4621      	mov	r1, r4
 8004006:	4628      	mov	r0, r5
 8004008:	f012 fb74 	bl	80166f4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	4620      	mov	r0, r4
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	4798      	blx	r3
    newTransition->invalidate();
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	4620      	mov	r0, r4
 8004018:	695b      	ldr	r3, [r3, #20]
}
 800401a:	b001      	add	sp, #4
 800401c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	4718      	bx	r3
 8004022:	bf00      	nop
 8004024:	08025c36 	.word	0x08025c36
 8004028:	08026018 	.word	0x08026018
 800402c:	08025da8 	.word	0x08025da8
 8004030:	08025dfd 	.word	0x08025dfd
 8004034:	08025ea0 	.word	0x08025ea0
 8004038:	08026abc 	.word	0x08026abc
 800403c:	24025344 	.word	0x24025344
 8004040:	24025340 	.word	0x24025340

08004044 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004044:	4b04      	ldr	r3, [pc, #16]	@ (8004058 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800404c:	b10a      	cbz	r2, 8004052 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800404e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004050:	b900      	cbnz	r0, 8004054 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8004052:	6898      	ldr	r0, [r3, #8]
    }
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	240252fc 	.word	0x240252fc

0800405c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	4617      	mov	r7, r2
 8004060:	4604      	mov	r4, r0
 8004062:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8004064:	f010 f988 	bl	8014378 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004068:	4b12      	ldr	r3, [pc, #72]	@ (80040b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 800406a:	2500      	movs	r5, #0
        instance = this;
 800406c:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800406e:	4629      	mov	r1, r5
      model(m)
 8004070:	4b11      	ldr	r3, [pc, #68]	@ (80040b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8004072:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8004074:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8004076:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 800407a:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004082:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004084:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8004088:	689b      	ldr	r3, [r3, #8]
      model(m)
 800408a:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800408e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004090:	4628      	mov	r0, r5
 8004092:	f000 ff33 	bl	8004efc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004096:	f7ff ffd5 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800409a:	f018 ff18 	bl	801cece <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800409e:	f7ff ffd1 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 80040a2:	f018 ff8b 	bl	801cfbc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 80040a6:	f7ff ffcd 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 80040aa:	f018 ff93 	bl	801cfd4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 80040ae:	4620      	mov	r0, r4
 80040b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040b2:	bf00      	nop
 80040b4:	24025350 	.word	0x24025350
 80040b8:	08026a68 	.word	0x08026a68
 80040bc:	08026a50 	.word	0x08026a50
 80040c0:	240252fc 	.word	0x240252fc

080040c4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80040c6:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80040ca:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80040ce:	2300      	movs	r3, #0
 80040d0:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80040d4:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80040d8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	08003ef9 	.word	0x08003ef9

080040e4 <_ZN23FrontendApplicationBase32gotoScreen1ScreenBlockTransitionEv>:
 80040e4:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <_ZN23FrontendApplicationBase32gotoScreen1ScreenBlockTransitionEv+0x1c>)
 80040e6:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80040ea:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80040f4:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80040f8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	08003d7d 	.word	0x08003d7d

08004104 <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv>:
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv+0x1c>)
 8004106:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800410a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800410e:	2300      	movs	r3, #0
 8004110:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004114:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004118:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	08003c19 	.word	0x08003c19

08004124 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8004124:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8004126:	4770      	bx	lr

08004128 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8004128:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800412a:	4770      	bx	lr

0800412c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800412c:	4770      	bx	lr

0800412e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
 800412e:	880b      	ldrh	r3, [r1, #0]
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8004130:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 8004132:	b29b      	uxth	r3, r3
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8004134:	0ad2      	lsrs	r2, r2, #11
{
 8004136:	b510      	push	{r4, lr}
    offset |= dataOffset[1] << 16;
 8004138:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800413a:	69c1      	ldr	r1, [r0, #28]
    offset |= dataOffset[1] << 16;
 800413c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    return pixels + offset;
 8004140:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 8004144:	4418      	add	r0, r3
 8004146:	bd10      	pop	{r4, pc}

08004148 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004148:	b510      	push	{r4, lr}
 800414a:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 800414c:	b1ba      	cbz	r2, 800417e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800414e:	7b10      	ldrb	r0, [r2, #12]
 8004150:	b168      	cbz	r0, 800416e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004152:	7b53      	ldrb	r3, [r2, #13]
 8004154:	7ad2      	ldrb	r2, [r2, #11]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800415c:	431a      	orrs	r2, r3
 800415e:	6a23      	ldr	r3, [r4, #32]
 8004160:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004164:	881a      	ldrh	r2, [r3, #0]
 8004166:	428a      	cmp	r2, r1
 8004168:	d102      	bne.n	8004170 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800416a:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 800416e:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8004170:	d805      	bhi.n	800417e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004172:	3801      	subs	r0, #1
 8004174:	3304      	adds	r3, #4
 8004176:	b280      	uxth	r0, r0
 8004178:	2800      	cmp	r0, #0
 800417a:	d1f3      	bne.n	8004164 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800417c:	e7f7      	b.n	800416e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800417e:	2000      	movs	r0, #0
 8004180:	e7f5      	b.n	800416e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004182 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004182:	b510      	push	{r4, lr}
 8004184:	4604      	mov	r4, r0
 8004186:	212c      	movs	r1, #44	@ 0x2c
 8004188:	f01e fd2c 	bl	8022be4 <_ZdlPvj>
 800418c:	4620      	mov	r0, r4
 800418e:	bd10      	pop	{r4, pc}

08004190 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004190:	b530      	push	{r4, r5, lr}
 8004192:	b08b      	sub	sp, #44	@ 0x2c
 8004194:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004196:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800419a:	9508      	str	r5, [sp, #32]
 800419c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 80041a0:	9507      	str	r5, [sp, #28]
 80041a2:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80041a6:	9506      	str	r5, [sp, #24]
 80041a8:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 80041ac:	9505      	str	r5, [sp, #20]
 80041ae:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80041b2:	9504      	str	r5, [sp, #16]
 80041b4:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80041b8:	9503      	str	r5, [sp, #12]
 80041ba:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80041be:	9502      	str	r5, [sp, #8]
 80041c0:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80041c4:	9501      	str	r5, [sp, #4]
 80041c6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80041ca:	9500      	str	r5, [sp, #0]
 80041cc:	f011 fe1e 	bl	8015e0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80041d0:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80041d2:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80041d4:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80041d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80041d8:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80041da:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80041dc:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80041de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80041e0:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 80041e2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80041e4:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80041e6:	b00b      	add	sp, #44	@ 0x2c
 80041e8:	bd30      	pop	{r4, r5, pc}
 80041ea:	bf00      	nop
 80041ec:	08026b28 	.word	0x08026b28

080041f0 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80041f0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80041f2:	4770      	bx	lr

080041f4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80041f4:	4770      	bx	lr

080041f6 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80041f6:	4770      	bx	lr

080041f8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80041f8:	4770      	bx	lr

080041fa <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80041fa:	4770      	bx	lr

080041fc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80041fc:	4770      	bx	lr

080041fe <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80041fe:	b530      	push	{r4, r5, lr}
 8004200:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8004202:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8004204:	4604      	mov	r4, r0
        rect.width = width;
 8004206:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8004208:	466d      	mov	r5, sp
 800420a:	4601      	mov	r1, r0
 800420c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004210:	343c      	adds	r4, #60	@ 0x3c
 8004212:	4628      	mov	r0, r5
 8004214:	4798      	blx	r3
 8004216:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800421a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800421e:	b005      	add	sp, #20
 8004220:	bd30      	pop	{r4, r5, pc}

08004222 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8004222:	b530      	push	{r4, r5, lr}
 8004224:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004226:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8004228:	4604      	mov	r4, r0
        rect.height = height;
 800422a:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 800422c:	466d      	mov	r5, sp
 800422e:	4601      	mov	r1, r0
 8004230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004234:	343c      	adds	r4, #60	@ 0x3c
 8004236:	4628      	mov	r0, r5
 8004238:	4798      	blx	r3
 800423a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800423e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004242:	b005      	add	sp, #20
 8004244:	bd30      	pop	{r4, r5, pc}

08004246 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8004246:	2200      	movs	r2, #0
 8004248:	8002      	strh	r2, [r0, #0]
 800424a:	8042      	strh	r2, [r0, #2]
 800424c:	8082      	strh	r2, [r0, #4]
 800424e:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8004250:	4770      	bx	lr

08004252 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004252:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8004256:	4770      	bx	lr

08004258 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8004258:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800425a:	b570      	push	{r4, r5, r6, lr}
 800425c:	4604      	mov	r4, r0
        setX(x);
 800425e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004260:	4615      	mov	r5, r2
        setX(x);
 8004262:	4798      	blx	r3
        setBaselineY(baselineY);
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	4620      	mov	r0, r4
 8004268:	4629      	mov	r1, r5
 800426a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 800426c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8004270:	4718      	bx	r3

08004272 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8004272:	2000      	movs	r0, #0
 8004274:	4770      	bx	lr

08004276 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004276:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8004278:	4770      	bx	lr

0800427a <_ZN15Screen1ViewBase13TogglePressedEv>:
     * Virtual Action Handlers
     */
    virtual void TogglePressed()
    {
        // Override and implement this function in Screen1
    }
 800427a:	4770      	bx	lr

0800427c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 800427c:	4770      	bx	lr

0800427e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 800427e:	4770      	bx	lr

08004280 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004280:	4770      	bx	lr

08004282 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004282:	4770      	bx	lr

08004284 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 8004284:	4770      	bx	lr

08004286 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8004286:	4770      	bx	lr

08004288 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8004288:	4770      	bx	lr

0800428a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
     *
     * @see setPressed
     */
    bool getPressed() const
    {
        return pressed;
 800428a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800428e:	b14b      	cbz	r3, 80042a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x1a>
 8004290:	f100 026c 	add.w	r2, r0, #108	@ 0x6c
 8004294:	6812      	ldr	r2, [r2, #0]
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004296:	65c2      	str	r2, [r0, #92]	@ 0x5c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004298:	b13b      	cbz	r3, 80042aa <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x20>
 800429a:	f100 0374 	add.w	r3, r0, #116	@ 0x74
 800429e:	681b      	ldr	r3, [r3, #0]
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 80042a0:	6603      	str	r3, [r0, #96]	@ 0x60
        T::handlePressedUpdated();
    }
 80042a2:	4770      	bx	lr
        borderBox.setColor(T::getPressed() ? down : up);
 80042a4:	f100 0268 	add.w	r2, r0, #104	@ 0x68
 80042a8:	e7f4      	b.n	8004294 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xa>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80042aa:	f100 0370 	add.w	r3, r0, #112	@ 0x70
 80042ae:	e7f6      	b.n	800429e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x14>

080042b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80042b0:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80042b2:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80042b4:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80042b6:	68c2      	ldr	r2, [r0, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	1055      	asrs	r5, r2, #1
 80042bc:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80042c0:	07d2      	lsls	r2, r2, #31
 80042c2:	bf48      	it	mi
 80042c4:	5962      	ldrmi	r2, [r4, r5]
    }
 80042c6:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80042c8:	bf48      	it	mi
 80042ca:	58d3      	ldrmi	r3, [r2, r3]
 80042cc:	4718      	bx	r3

080042ce <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80042ce:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80042d0:	6840      	ldr	r0, [r0, #4]
 80042d2:	b130      	cbz	r0, 80042e2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	b91a      	cbnz	r2, 80042e0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80042d8:	68d8      	ldr	r0, [r3, #12]
 80042da:	f000 0001 	and.w	r0, r0, #1
 80042de:	4770      	bx	lr
 80042e0:	2001      	movs	r0, #1
    }
 80042e2:	4770      	bx	lr

080042e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80042e4:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80042e6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80042e8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80042ea:	68c2      	ldr	r2, [r0, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	1055      	asrs	r5, r2, #1
 80042f0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80042f4:	07d2      	lsls	r2, r2, #31
 80042f6:	bf48      	it	mi
 80042f8:	5962      	ldrmi	r2, [r4, r5]
    }
 80042fa:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80042fc:	bf48      	it	mi
 80042fe:	58d3      	ldrmi	r3, [r2, r3]
 8004300:	4718      	bx	r3

08004302 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8004302:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004304:	6840      	ldr	r0, [r0, #4]
 8004306:	b130      	cbz	r0, 8004316 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	b91a      	cbnz	r2, 8004314 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 800430c:	68d8      	ldr	r0, [r3, #12]
 800430e:	f000 0001 	and.w	r0, r0, #1
 8004312:	4770      	bx	lr
 8004314:	2001      	movs	r0, #1
    }
 8004316:	4770      	bx	lr

08004318 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
    {
        return alpha;
 8004318:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800431c:	f880 30a4 	strb.w	r3, [r0, #164]	@ 0xa4
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004320:	f880 305a 	strb.w	r3, [r0, #90]	@ 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004324:	4770      	bx	lr

08004326 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
 8004326:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800432a:	f880 305a 	strb.w	r3, [r0, #90]	@ 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 800432e:	4770      	bx	lr

08004330 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8004330:	b510      	push	{r4, lr}
 8004332:	4604      	mov	r4, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8004334:	307c      	adds	r0, #124	@ 0x7c
 8004336:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800433a:	b13b      	cbz	r3, 800434c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x1c>
 800433c:	f104 017a 	add.w	r1, r4, #122	@ 0x7a
 8004340:	f00d fb42 	bl	80119c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 8004344:	4620      	mov	r0, r4
 8004346:	f7ff ffa0 	bl	800428a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 800434a:	bd10      	pop	{r4, pc}
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 800434c:	f104 0178 	add.w	r1, r4, #120	@ 0x78
 8004350:	e7f6      	b.n	8004340 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x10>

08004352 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8004352:	b510      	push	{r4, lr}
 8004354:	4604      	mov	r4, r0
 8004356:	214c      	movs	r1, #76	@ 0x4c
 8004358:	f01e fc44 	bl	8022be4 <_ZdlPvj>
 800435c:	4620      	mov	r0, r4
 800435e:	bd10      	pop	{r4, pc}

08004360 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
 8004360:	b510      	push	{r4, lr}
 8004362:	4604      	mov	r4, r0
 8004364:	2178      	movs	r1, #120	@ 0x78
 8004366:	f01e fc3d 	bl	8022be4 <_ZdlPvj>
 800436a:	4620      	mov	r0, r4
 800436c:	bd10      	pop	{r4, pc}

0800436e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
class IconButtonStyle : public T
 800436e:	b510      	push	{r4, lr}
 8004370:	4604      	mov	r4, r0
 8004372:	21a8      	movs	r1, #168	@ 0xa8
 8004374:	f01e fc36 	bl	8022be4 <_ZdlPvj>
 8004378:	4620      	mov	r0, r4
 800437a:	bd10      	pop	{r4, pc}

0800437c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800437c:	b510      	push	{r4, lr}
 800437e:	4604      	mov	r4, r0
 8004380:	2110      	movs	r1, #16
 8004382:	f01e fc2f 	bl	8022be4 <_ZdlPvj>
 8004386:	4620      	mov	r0, r4
 8004388:	bd10      	pop	{r4, pc}

0800438a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800438a:	b510      	push	{r4, lr}
 800438c:	4604      	mov	r4, r0
 800438e:	2110      	movs	r1, #16
 8004390:	f01e fc28 	bl	8022be4 <_ZdlPvj>
 8004394:	4620      	mov	r0, r4
 8004396:	bd10      	pop	{r4, pc}

08004398 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8004398:	b510      	push	{r4, lr}
 800439a:	4604      	mov	r4, r0
}
 800439c:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80043a0:	f01e fc20 	bl	8022be4 <_ZdlPvj>
 80043a4:	4620      	mov	r0, r4
 80043a6:	bd10      	pop	{r4, pc}

080043a8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80043a8:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80043aa:	f7ff f808 	bl	80033be <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80043ae:	bd08      	pop	{r3, pc}

080043b0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 80043b0:	b510      	push	{r4, lr}
 80043b2:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 80043b4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80043b6:	b150      	cbz	r0, 80043ce <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 80043b8:	6803      	ldr	r3, [r0, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4798      	blx	r3
 80043be:	b130      	cbz	r0, 80043ce <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 80043c0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80043c2:	4621      	mov	r1, r4
 80043c4:	6803      	ldr	r3, [r0, #0]
        }
    }
 80043c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4718      	bx	r3
    }
 80043ce:	bd10      	pop	{r4, pc}

080043d0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
    }
}

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &toggleButton1)
 80043d0:	f500 72a0 	add.w	r2, r0, #320	@ 0x140
 80043d4:	428a      	cmp	r2, r1
 80043d6:	d102      	bne.n	80043de <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    {
        //Interaction2
        //When toggleButton1 clicked call virtual function
        //Call TogglePressed
        TogglePressed();
 80043d8:	6803      	ldr	r3, [r0, #0]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	4718      	bx	r3
    }
}
 80043de:	4770      	bx	lr

080043e0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 80043e0:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80043e2:	b570      	push	{r4, r5, r6, lr}
 80043e4:	4604      	mov	r4, r0
 80043e6:	460d      	mov	r5, r1
        return pressed;
 80043e8:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80043ec:	b90b      	cbnz	r3, 80043f2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 80043ee:	b116      	cbz	r6, 80043f6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 80043f0:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80043f2:	2e00      	cmp	r6, #0
 80043f4:	d0fc      	beq.n	80043f0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80043f6:	fab3 f383 	clz	r3, r3
        handlePressedUpdated();
 80043fa:	4620      	mov	r0, r4
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004408:	4798      	blx	r3
            invalidate();
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	4620      	mov	r0, r4
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8004412:	2e00      	cmp	r6, #0
 8004414:	d0ec      	beq.n	80043f0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 8004416:	792b      	ldrb	r3, [r5, #4]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d1e9      	bne.n	80043f0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	4620      	mov	r0, r4
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8004424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8004428:	4718      	bx	r3
	...

0800442c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800442c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 800442e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004430:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8004432:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004434:	4b11      	ldr	r3, [pc, #68]	@ (800447c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004436:	b28d      	uxth	r5, r1
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	b92b      	cbnz	r3, 8004448 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 800443c:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800443e:	216c      	movs	r1, #108	@ 0x6c
 8004440:	4a10      	ldr	r2, [pc, #64]	@ (8004484 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004442:	4811      	ldr	r0, [pc, #68]	@ (8004488 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004444:	f01e ff44 	bl	80232d0 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004448:	4910      	ldr	r1, [pc, #64]	@ (800448c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800444a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800444c:	8809      	ldrh	r1, [r1, #0]
 800444e:	4291      	cmp	r1, r2
 8004450:	d803      	bhi.n	800445a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8004452:	4b0f      	ldr	r3, [pc, #60]	@ (8004490 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004454:	216d      	movs	r1, #109	@ 0x6d
 8004456:	4a0b      	ldr	r2, [pc, #44]	@ (8004484 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004458:	e7f3      	b.n	8004442 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 800445a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004466:	6803      	ldr	r3, [r0, #0]
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	4798      	blx	r3
 800446c:	1a29      	subs	r1, r5, r0
 800446e:	4633      	mov	r3, r6
 8004470:	4620      	mov	r0, r4
 8004472:	b209      	sxth	r1, r1
    }
 8004474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004478:	4718      	bx	r3
 800447a:	bf00      	nop
 800447c:	24025354 	.word	0x24025354
 8004480:	080260ea 	.word	0x080260ea
 8004484:	0802612c 	.word	0x0802612c
 8004488:	08026167 	.word	0x08026167
 800448c:	24025358 	.word	0x24025358
 8004490:	080261bc 	.word	0x080261bc
 8004494:	2402535c 	.word	0x2402535c

08004498 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:
    if (&src == &flexButton1)
 8004498:	3098      	adds	r0, #152	@ 0x98
 800449a:	4288      	cmp	r0, r1
{
 800449c:	b508      	push	{r3, lr}
    if (&src == &flexButton1)
 800449e:	d105      	bne.n	80044ac <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x14>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80044a0:	f00f fe7c 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
}
 80044a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenWipeTransitionEast();
 80044a8:	f7ff be2c 	b.w	8004104 <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv>
}
 80044ac:	bd08      	pop	{r3, pc}

080044ae <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80044ae:	2200      	movs	r2, #0
 80044b0:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 80044b4:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80044b6:	e9c0 2100 	strd	r2, r1, [r0]
    }
 80044ba:	4770      	bx	lr

080044bc <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80044bc:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80044be:	b570      	push	{r4, r5, r6, lr}
 80044c0:	4604      	mov	r4, r0
        setX(x);
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 80044c4:	4615      	mov	r5, r2
        setX(x);
 80044c6:	4798      	blx	r3
        setY(y);
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 80044d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80044d4:	4718      	bx	r3

080044d6 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
        iconReleased = newIconReleased;
 80044d6:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80044d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 80044dc:	f8a0 3078 	strh.w	r3, [r0, #120]	@ 0x78
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80044e0:	4604      	mov	r4, r0
        iconPressed = newIconPressed;
 80044e2:	8813      	ldrh	r3, [r2, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80044e4:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 80044e6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 80044ea:	f8a0 307a 	strh.w	r3, [r0, #122]	@ 0x7a
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 80044ee:	4610      	mov	r0, r2
 80044f0:	f013 fd96 	bl	8018020 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80044f4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80044f8:	4607      	mov	r7, r0
 80044fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004502:	4640      	mov	r0, r8
 8004504:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8004508:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800450c:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8004510:	f013 fdba 	bl	8018088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8004514:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004518:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 800451c:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8004520:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 8004524:	b209      	sxth	r1, r1
 8004526:	b212      	sxth	r2, r2
 8004528:	f7ff ffc8 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	4620      	mov	r0, r4
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8004534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8004538:	4718      	bx	r3

0800453a <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800453a:	b570      	push	{r4, r5, r6, lr}
 800453c:	4604      	mov	r4, r0
 800453e:	461d      	mov	r5, r3
 8004540:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8004544:	f7ff ffba 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	4629      	mov	r1, r5
 800454c:	4620      	mov	r0, r4
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	4798      	blx	r3
        setHeight(height);
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	4631      	mov	r1, r6
 8004556:	4620      	mov	r0, r4
 8004558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 800455a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 800455e:	4718      	bx	r3

08004560 <_ZN8touchgfx6WidgetC1Ev>:
 8004560:	2200      	movs	r2, #0
 8004562:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004566:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 800456a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 800456e:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8004572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004576:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8004578:	4a01      	ldr	r2, [pc, #4]	@ (8004580 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800457a:	6002      	str	r2, [r0, #0]
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	08026b90 	.word	0x08026b90

08004584 <_ZN8touchgfx3BoxC1Ev>:
    Box()
 8004584:	b510      	push	{r4, lr}
 8004586:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8004588:	2226      	movs	r2, #38	@ 0x26
 800458a:	2100      	movs	r1, #0
 800458c:	f01f f93c 	bl	8023808 <memset>
 8004590:	4620      	mov	r0, r4
 8004592:	f7ff ffe5 	bl	8004560 <_ZN8touchgfx6WidgetC1Ev>
 8004596:	4b04      	ldr	r3, [pc, #16]	@ (80045a8 <_ZN8touchgfx3BoxC1Ev+0x24>)
    }
 8004598:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	23ff      	movs	r3, #255	@ 0xff
 800459e:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
        : color(col)
 80045a2:	2300      	movs	r3, #0
 80045a4:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	080276d4 	.word	0x080276d4

080045ac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4604      	mov	r4, r0
 80045b0:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 80045b2:	2226      	movs	r2, #38	@ 0x26
 80045b4:	2100      	movs	r1, #0
 80045b6:	f01f f927 	bl	8023808 <memset>
 80045ba:	4620      	mov	r0, r4
 80045bc:	f7ff ffd0 	bl	8004560 <_ZN8touchgfx6WidgetC1Ev>
 80045c0:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
        Image::setBitmap(bmp);
 80045c2:	4620      	mov	r0, r4
 80045c4:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	882b      	ldrh	r3, [r5, #0]
 80045ca:	84e3      	strh	r3, [r4, #38]	@ 0x26
 80045cc:	23ff      	movs	r3, #255	@ 0xff
 80045ce:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 80045d2:	f00d f9f9 	bl	80119c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80045d6:	4620      	mov	r0, r4
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	080277a4 	.word	0x080277a4

080045e0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
        : pressed(false), alpha(255), action(0)
 80045e0:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
    IconButtonStyle()
 80045e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045e6:	8583      	strh	r3, [r0, #44]	@ 0x2c
        touchable = touch;
 80045e8:	f240 1301 	movw	r3, #257	@ 0x101
          firstChild(0)
 80045ec:	2500      	movs	r5, #0
        : T(), up(), down()
 80045ee:	4606      	mov	r6, r0
 80045f0:	8483      	strh	r3, [r0, #36]	@ 0x24
 80045f2:	4604      	mov	r4, r0
 80045f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004668 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x88>)
 80045f6:	6285      	str	r5, [r0, #40]	@ 0x28
 80045f8:	6305      	str	r5, [r0, #48]	@ 0x30
        : x(0), y(0), width(0), height(0)
 80045fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80045fe:	e9c0 5503 	strd	r5, r5, [r0, #12]
          nextSibling(0),
 8004602:	e9c0 5505 	strd	r5, r5, [r0, #20]
          cachedAbsX(0),
 8004606:	e9c0 5507 	strd	r5, r5, [r0, #28]
 800460a:	f846 3b34 	str.w	r3, [r6], #52
        : Box(), borderColor(0), borderSize(0)
 800460e:	4630      	mov	r0, r6
 8004610:	f7ff ffb8 	bl	8004584 <_ZN8touchgfx3BoxC1Ev>
 8004614:	4b15      	ldr	r3, [pc, #84]	@ (800466c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x8c>)
        borderBox.setXY(0, 0);
 8004616:	462a      	mov	r2, r5
 8004618:	4629      	mov	r1, r5
 800461a:	6363      	str	r3, [r4, #52]	@ 0x34
 800461c:	4630      	mov	r0, r6
        : color(col)
 800461e:	6625      	str	r5, [r4, #96]	@ 0x60
 8004620:	f8a4 5064 	strh.w	r5, [r4, #100]	@ 0x64
        : color(0)
 8004624:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8004628:	e9c4 551c 	strd	r5, r5, [r4, #112]	@ 0x70
 800462c:	f7ff ff46 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8004630:	4631      	mov	r1, r6
 8004632:	4620      	mov	r0, r4
        : T()
 8004634:	f104 057c 	add.w	r5, r4, #124	@ 0x7c
 8004638:	f009 fda2 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800463c:	4b0c      	ldr	r3, [pc, #48]	@ (8004670 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x90>)
 800463e:	a901      	add	r1, sp, #4
 8004640:	4628      	mov	r0, r5
 8004642:	6023      	str	r3, [r4, #0]
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004644:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004648:	f8a4 3078 	strh.w	r3, [r4, #120]	@ 0x78
 800464c:	f8a4 307a 	strh.w	r3, [r4, #122]	@ 0x7a
 8004650:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004654:	f7ff ffaa 	bl	80045ac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8004658:	4620      	mov	r0, r4
 800465a:	4629      	mov	r1, r5
 800465c:	f009 fd90 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8004660:	4620      	mov	r0, r4
 8004662:	b002      	add	sp, #8
 8004664:	bd70      	pop	{r4, r5, r6, pc}
 8004666:	bf00      	nop
 8004668:	08026c88 	.word	0x08026c88
 800466c:	0802773c 	.word	0x0802773c
 8004670:	08026d24 	.word	0x08026d24

08004674 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	4604      	mov	r4, r0
 800467a:	b08b      	sub	sp, #44	@ 0x2c
        : presenter(0)
 800467c:	2500      	movs	r5, #0
 800467e:	f011 fe8d 	bl	801639c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8004682:	46a2      	mov	sl, r4
 8004684:	4b97      	ldr	r3, [pc, #604]	@ (80048e4 <_ZN15Screen1ViewBaseC1Ev+0x270>)
 8004686:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 800468a:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800468e:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 8004692:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8004694:	f84a 3b40 	str.w	r3, [sl], #64
 8004698:	4650      	mov	r0, sl
 800469a:	f7ff ff73 	bl	8004584 <_ZN8touchgfx3BoxC1Ev>
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 800469e:	f504 78a0 	add.w	r8, r4, #320	@ 0x140
 80046a2:	a908      	add	r1, sp, #32
 80046a4:	4658      	mov	r0, fp
 80046a6:	f8ad 7020 	strh.w	r7, [sp, #32]
 80046aa:	f7ff ff7f 	bl	80045ac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80046ae:	4648      	mov	r0, r9
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80046b0:	f504 76bc 	add.w	r6, r4, #376	@ 0x178
 80046b4:	f7ff ff94 	bl	80045e0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 80046b8:	4629      	mov	r1, r5
 80046ba:	2226      	movs	r2, #38	@ 0x26
 80046bc:	4640      	mov	r0, r8
 80046be:	f01f f8a3 	bl	8023808 <memset>
 80046c2:	4640      	mov	r0, r8
 80046c4:	f7ff ff4c 	bl	8004560 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 80046c8:	2301      	movs	r3, #1
 80046ca:	4629      	mov	r1, r5
 80046cc:	2226      	movs	r2, #38	@ 0x26
 80046ce:	f884 3164 	strb.w	r3, [r4, #356]	@ 0x164
 80046d2:	4630      	mov	r0, r6
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 80046d4:	4b84      	ldr	r3, [pc, #528]	@ (80048e8 <_ZN15Screen1ViewBaseC1Ev+0x274>)
 80046d6:	f8c4 5168 	str.w	r5, [r4, #360]	@ 0x168
 80046da:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 80046de:	f884 516c 	strb.w	r5, [r4, #364]	@ 0x16c
 80046e2:	f8a4 716e 	strh.w	r7, [r4, #366]	@ 0x16e
 80046e6:	f8a4 7170 	strh.w	r7, [r4, #368]	@ 0x170
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 80046ea:	f884 7172 	strb.w	r7, [r4, #370]	@ 0x172
 80046ee:	f8a4 7174 	strh.w	r7, [r4, #372]	@ 0x174
 80046f2:	f01f f889 	bl	8023808 <memset>
 80046f6:	4630      	mov	r0, r6
 80046f8:	f7ff ff32 	bl	8004560 <_ZN8touchgfx6WidgetC1Ev>
        : typedTextId(id)
 80046fc:	4b7b      	ldr	r3, [pc, #492]	@ (80048ec <_ZN15Screen1ViewBaseC1Ev+0x278>)
    __background.setPosition(0, 0, 800, 480);
 80046fe:	462a      	mov	r2, r5
 8004700:	4629      	mov	r1, r5
 8004702:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
 8004706:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800470a:	4650      	mov	r0, sl
 800470c:	f8a4 71a4 	strh.w	r7, [r4, #420]	@ 0x1a4
 8004710:	f8c4 31ac 	str.w	r3, [r4, #428]	@ 0x1ac
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004714:	1d27      	adds	r7, r4, #4
        : TextAreaWithWildcardBase(), wc1(0)
 8004716:	4b76      	ldr	r3, [pc, #472]	@ (80048f0 <_ZN15Screen1ViewBaseC1Ev+0x27c>)
        : color(col)
 8004718:	f8c4 51a8 	str.w	r5, [r4, #424]	@ 0x1a8
 800471c:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004720:	f04f 33ff 	mov.w	r3, #4294967295
 8004724:	f8a4 51b0 	strh.w	r5, [r4, #432]	@ 0x1b0
 8004728:	f8c4 51b4 	str.w	r5, [r4, #436]	@ 0x1b4
 800472c:	f8c4 51c0 	str.w	r5, [r4, #448]	@ 0x1c0
              text(0)
 8004730:	e9c4 356e 	strd	r3, r5, [r4, #440]	@ 0x1b8
        : pobject(pObject), pmemfun(pmemfun_1)
 8004734:	4b6f      	ldr	r3, [pc, #444]	@ (80048f4 <_ZN15Screen1ViewBaseC1Ev+0x280>)
 8004736:	e9c4 3474 	strd	r3, r4, [r4, #464]	@ 0x1d0
 800473a:	4b6f      	ldr	r3, [pc, #444]	@ (80048f8 <_ZN15Screen1ViewBaseC1Ev+0x284>)
 800473c:	e9c4 3576 	strd	r3, r5, [r4, #472]	@ 0x1d8
 8004740:	4b6e      	ldr	r3, [pc, #440]	@ (80048fc <_ZN15Screen1ViewBaseC1Ev+0x288>)
 8004742:	e9c4 3478 	strd	r3, r4, [r4, #480]	@ 0x1e0
 8004746:	4b6e      	ldr	r3, [pc, #440]	@ (8004900 <_ZN15Screen1ViewBaseC1Ev+0x28c>)
 8004748:	e9c4 357a 	strd	r3, r5, [r4, #488]	@ 0x1e8
 800474c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004756:	f7ff fef0 	bl	800453a <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800475a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800475e:	4651      	mov	r1, sl
 8004760:	4638      	mov	r0, r7
 8004762:	66a3      	str	r3, [r4, #104]	@ 0x68
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8004764:	f04f 0a05 	mov.w	sl, #5
 8004768:	f009 fd0a 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 800476c:	462a      	mov	r2, r5
 800476e:	4629      	mov	r1, r5
 8004770:	4658      	mov	r0, fp
 8004772:	f7ff fea3 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_PUZZLE_ID));
 8004776:	4658      	mov	r0, fp
 8004778:	a908      	add	r1, sp, #32
 800477a:	f8ad 5020 	strh.w	r5, [sp, #32]
 800477e:	f00d f923 	bl	80119c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004782:	4659      	mov	r1, fp
        borderBox.setPosition(x, y, width, height);
 8004784:	f04f 0b32 	mov.w	fp, #50	@ 0x32
 8004788:	4638      	mov	r0, r7
 800478a:	f009 fcf9 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800478e:	462a      	mov	r2, r5
 8004790:	4629      	mov	r1, r5
 8004792:	238b      	movs	r3, #139	@ 0x8b
 8004794:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 8004798:	f8cd b000 	str.w	fp, [sp]
 800479c:	f7ff fecd 	bl	800453a <_ZN8touchgfx8Drawable11setPositionEssss>
        up = colorReleased;
 80047a0:	4b58      	ldr	r3, [pc, #352]	@ (8004904 <_ZN15Screen1ViewBaseC1Ev+0x290>)
        handlePressedUpdated();
 80047a2:	4648      	mov	r0, r9
 80047a4:	f8a4 a0fc 	strh.w	sl, [r4, #252]	@ 0xfc
        up = colorReleased;
 80047a8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
        down = colorPressed;
 80047ac:	f503 534c 	add.w	r3, r3, #13056	@ 0x3300
 80047b0:	3333      	adds	r3, #51	@ 0x33
 80047b2:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
        borderUp = borderColorReleased;
 80047b6:	f5a3 43cc 	sub.w	r3, r3, #26112	@ 0x6600
 80047ba:	3b66      	subs	r3, #102	@ 0x66
 80047bc:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
        borderDown = borderColorPressed;
 80047c0:	f103 1333 	add.w	r3, r3, #3342387	@ 0x330033
 80047c4:	f503 534c 	add.w	r3, r3, #13056	@ 0x3300
 80047c8:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
        handlePressedUpdated();
 80047cc:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80047d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047d4:	4798      	blx	r3
 80047d6:	2309      	movs	r3, #9
    flexButton1.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_IMAGE_NAVIGATE_NEXT_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 80047d8:	aa08      	add	r2, sp, #32
 80047da:	a907      	add	r1, sp, #28
 80047dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80047e0:	2307      	movs	r3, #7
 80047e2:	4648      	mov	r0, r9
 80047e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80047e8:	f7ff fe75 	bl	80044d6 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
        rect.x = x;
 80047ec:	2329      	movs	r3, #41	@ 0x29
    flexButton1.setPosition(661, 430, 139, 50);
 80047ee:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80047f2:	f240 2195 	movw	r1, #661	@ 0x295
 80047f6:	4648      	mov	r0, r9
 80047f8:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
    flexButton1.setAction(flexButtonCallback);
 80047fc:	f504 73e8 	add.w	r3, r4, #464	@ 0x1d0
        action = &callback;
 8004800:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
    flexButton1.setPosition(661, 430, 139, 50);
 8004804:	238b      	movs	r3, #139	@ 0x8b
 8004806:	f8cd b000 	str.w	fp, [sp]
 800480a:	f7ff fe96 	bl	800453a <_ZN8touchgfx8Drawable11setPositionEssss>
 800480e:	4649      	mov	r1, r9
 8004810:	4638      	mov	r0, r7
 8004812:	f009 fcb5 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    toggleButton1.setXY(296, 78);
 8004816:	224e      	movs	r2, #78	@ 0x4e
 8004818:	f44f 7194 	mov.w	r1, #296	@ 0x128
 800481c:	4640      	mov	r0, r8
 800481e:	f7ff fe4d 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 8004822:	2306      	movs	r3, #6
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8004824:	aa08      	add	r2, sp, #32
 8004826:	a907      	add	r1, sp, #28
 8004828:	4640      	mov	r0, r8
        originalPressed = bitmapPressed;
 800482a:	f8a4 3174 	strh.w	r3, [r4, #372]	@ 0x174
 800482e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004832:	f8ad a01c 	strh.w	sl, [sp, #28]
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8004836:	f00c ff1b 	bl	8011670 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    toggleButton1.setAction(buttonCallback);
 800483a:	f504 73f0 	add.w	r3, r4, #480	@ 0x1e0
 800483e:	4641      	mov	r1, r8
 8004840:	4638      	mov	r0, r7
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8004842:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
 8004846:	f009 fc9b 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setPosition(351, 207, 255, 167);
 800484a:	23a7      	movs	r3, #167	@ 0xa7
 800484c:	22cf      	movs	r2, #207	@ 0xcf
 800484e:	f240 115f 	movw	r1, #351	@ 0x15f
 8004852:	4630      	mov	r0, r6
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	23ff      	movs	r3, #255	@ 0xff
 8004858:	f7ff fe6f 	bl	800453a <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800485c:	4b2a      	ldr	r3, [pc, #168]	@ (8004908 <_ZN15Screen1ViewBaseC1Ev+0x294>)
        linespace = space;
 800485e:	f8a4 51ac 	strh.w	r5, [r4, #428]	@ 0x1ac
        boundingArea = calculateBoundingArea();
 8004862:	ad02      	add	r5, sp, #8
        color = newColor;
 8004864:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
        boundingArea = calculateBoundingArea();
 8004868:	4631      	mov	r1, r6
 800486a:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
 800486e:	4628      	mov	r0, r5
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004874:	4798      	blx	r3
 8004876:	f504 73da 	add.w	r3, r4, #436	@ 0x1b4
 800487a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800487e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004882:	4b22      	ldr	r3, [pc, #136]	@ (800490c <_ZN15Screen1ViewBaseC1Ev+0x298>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OQ0Q).getText());
 8004884:	f504 75e2 	add.w	r5, r4, #452	@ 0x1c4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b92b      	cbnz	r3, 8004898 <_ZN15Screen1ViewBaseC1Ev+0x224>
 800488c:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <_ZN15Screen1ViewBaseC1Ev+0x29c>)
 800488e:	2160      	movs	r1, #96	@ 0x60
 8004890:	4a20      	ldr	r2, [pc, #128]	@ (8004914 <_ZN15Screen1ViewBaseC1Ev+0x2a0>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004892:	4821      	ldr	r0, [pc, #132]	@ (8004918 <_ZN15Screen1ViewBaseC1Ev+0x2a4>)
 8004894:	f01e fd1c 	bl	80232d0 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004898:	4b20      	ldr	r3, [pc, #128]	@ (800491c <_ZN15Screen1ViewBaseC1Ev+0x2a8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d803      	bhi.n	80048a8 <_ZN15Screen1ViewBaseC1Ev+0x234>
 80048a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004920 <_ZN15Screen1ViewBaseC1Ev+0x2ac>)
 80048a2:	2161      	movs	r1, #97	@ 0x61
 80048a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004914 <_ZN15Screen1ViewBaseC1Ev+0x2a0>)
 80048a6:	e7f4      	b.n	8004892 <_ZN15Screen1ViewBaseC1Ev+0x21e>
        return texts->getText(typedTextId);
 80048a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004924 <_ZN15Screen1ViewBaseC1Ev+0x2b0>)
 80048aa:	2102      	movs	r1, #2
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	f000 fb61 	bl	8004f74 <_ZNK8touchgfx5Texts7getTextEt>
 80048b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004928 <_ZN15Screen1ViewBaseC1Ev+0x2b4>)
 80048b4:	4603      	mov	r3, r0
 80048b6:	4651      	mov	r1, sl
 80048b8:	4628      	mov	r0, r5
 80048ba:	f013 fa3b 	bl	8017d34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80048be:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <_ZN15Screen1ViewBaseC1Ev+0x278>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FMXQ));
 80048c0:	a908      	add	r1, sp, #32
 80048c2:	4630      	mov	r0, r6
 80048c4:	9308      	str	r3, [sp, #32]
 80048c6:	2303      	movs	r3, #3
        wc1 = value;
 80048c8:	f8c4 51c0 	str.w	r5, [r4, #448]	@ 0x1c0
 80048cc:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80048d0:	f00c fe74 	bl	80115bc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80048d4:	4638      	mov	r0, r7
 80048d6:	4631      	mov	r1, r6
 80048d8:	f009 fc52 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80048dc:	4620      	mov	r0, r4
 80048de:	b00b      	add	sp, #44	@ 0x2c
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e4:	08026df4 	.word	0x08026df4
 80048e8:	08027660 	.word	0x08027660
 80048ec:	08026a40 	.word	0x08026a40
 80048f0:	08026bf8 	.word	0x08026bf8
 80048f4:	08026dc4 	.word	0x08026dc4
 80048f8:	08004499 	.word	0x08004499
 80048fc:	08026ddc 	.word	0x08026ddc
 8004900:	080043d1 	.word	0x080043d1
 8004904:	ff006699 	.word	0xff006699
 8004908:	fffffcfc 	.word	0xfffffcfc
 800490c:	24025354 	.word	0x24025354
 8004910:	080260ea 	.word	0x080260ea
 8004914:	080261fa 	.word	0x080261fa
 8004918:	08026167 	.word	0x08026167
 800491c:	24025358 	.word	0x24025358
 8004920:	080261bc 	.word	0x080261bc
 8004924:	24025360 	.word	0x24025360
 8004928:	08026245 	.word	0x08026245

0800492c <_ZN15Screen2ViewBase13SliderUpdatedEi>:
     * Virtual Action Handlers
     */
    virtual void SliderUpdated(int value)
    {
        // Override and implement this function in Screen2
    }
 800492c:	4770      	bx	lr

0800492e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800492e:	4770      	bx	lr

08004930 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8004930:	4770      	bx	lr

08004932 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8004932:	4770      	bx	lr

08004934 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8004934:	4770      	bx	lr

08004936 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8004936:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8004938:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 800493a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 800493c:	68c4      	ldr	r4, [r0, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	1066      	asrs	r6, r4, #1
 8004942:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8004946:	07e4      	lsls	r4, r4, #31
 8004948:	bf44      	itt	mi
 800494a:	59ac      	ldrmi	r4, [r5, r6]
 800494c:	58e3      	ldrmi	r3, [r4, r3]
    }
 800494e:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8004950:	4718      	bx	r3

08004952 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 8004952:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004954:	6840      	ldr	r0, [r0, #4]
 8004956:	b130      	cbz	r0, 8004966 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivE7isValidEv+0x14>
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	b91a      	cbnz	r2, 8004964 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivE7isValidEv+0x12>
 800495c:	68d8      	ldr	r0, [r3, #12]
 800495e:	f000 0001 	and.w	r0, r0, #1
 8004962:	4770      	bx	lr
 8004964:	2001      	movs	r0, #1
    }
 8004966:	4770      	bx	lr

08004968 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004968:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800496a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800496c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800496e:	68c2      	ldr	r2, [r0, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	1055      	asrs	r5, r2, #1
 8004974:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004978:	07d2      	lsls	r2, r2, #31
 800497a:	bf48      	it	mi
 800497c:	5962      	ldrmi	r2, [r4, r5]
    }
 800497e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004980:	bf48      	it	mi
 8004982:	58d3      	ldrmi	r3, [r2, r3]
 8004984:	4718      	bx	r3

08004986 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8004986:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004988:	6840      	ldr	r0, [r0, #4]
 800498a:	b130      	cbz	r0, 800499a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	b91a      	cbnz	r2, 8004998 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8004990:	68d8      	ldr	r0, [r3, #12]
 8004992:	f000 0001 	and.w	r0, r0, #1
 8004996:	4770      	bx	lr
 8004998:	2001      	movs	r0, #1
    }
 800499a:	4770      	bx	lr

0800499c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800499c:	b510      	push	{r4, lr}
 800499e:	4604      	mov	r4, r0
 80049a0:	2110      	movs	r1, #16
 80049a2:	f01e f91f 	bl	8022be4 <_ZdlPvj>
 80049a6:	4620      	mov	r0, r4
 80049a8:	bd10      	pop	{r4, pc}

080049aa <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 80049aa:	b510      	push	{r4, lr}
 80049ac:	4604      	mov	r4, r0
 80049ae:	2110      	movs	r1, #16
 80049b0:	f01e f918 	bl	8022be4 <_ZdlPvj>
 80049b4:	4620      	mov	r0, r4
 80049b6:	bd10      	pop	{r4, pc}

080049b8 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 80049b8:	b510      	push	{r4, lr}
 80049ba:	4604      	mov	r4, r0
}
 80049bc:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 80049c0:	f01e f910 	bl	8022be4 <_ZdlPvj>
 80049c4:	4620      	mov	r0, r4
 80049c6:	bd10      	pop	{r4, pc}

080049c8 <_ZN15Screen2ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:
        application().gotoScreen1ScreenBlockTransition();
    }
}

void Screen2ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 80049c8:	b410      	push	{r4}
    if (&src == &slider1)
 80049ca:	f500 74a0 	add.w	r4, r0, #320	@ 0x140
 80049ce:	428c      	cmp	r4, r1
 80049d0:	d105      	bne.n	80049de <_ZN15Screen2ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x16>
    {
        //Interaction2
        //When slider1 value changed call virtual function
        //Call SliderUpdated
        SliderUpdated(value);
 80049d2:	6803      	ldr	r3, [r0, #0]
 80049d4:	4611      	mov	r1, r2
    }
}
 80049d6:	f85d 4b04 	ldr.w	r4, [sp], #4
        SliderUpdated(value);
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	4718      	bx	r3
}
 80049de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:
    if (&src == &flexButton1)
 80049e4:	3098      	adds	r0, #152	@ 0x98
 80049e6:	4288      	cmp	r0, r1
{
 80049e8:	b508      	push	{r3, lr}
    if (&src == &flexButton1)
 80049ea:	d105      	bne.n	80049f8 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x14>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80049ec:	f00f fbd6 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
}
 80049f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenBlockTransition();
 80049f4:	f7ff bb76 	b.w	80040e4 <_ZN23FrontendApplicationBase32gotoScreen1ScreenBlockTransitionEv>
}
 80049f8:	bd08      	pop	{r3, pc}
	...

080049fc <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	4604      	mov	r4, r0
 8004a02:	b08b      	sub	sp, #44	@ 0x2c
 8004a04:	2500      	movs	r5, #0
 8004a06:	f011 fcc9 	bl	801639c <_ZN8touchgfx6ScreenC1Ev>
    sliderValueChangedCallback(this, &Screen2ViewBase::sliderValueChangedCallbackHandler)
 8004a0a:	46a2      	mov	sl, r4
 8004a0c:	4b95      	ldr	r3, [pc, #596]	@ (8004c64 <_ZN15Screen2ViewBaseC1Ev+0x268>)
 8004a0e:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8004a12:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 8004a16:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 8004a1a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8004a1c:	f84a 3b40 	str.w	r3, [sl], #64
 8004a20:	4650      	mov	r0, sl
 8004a22:	f504 76a0 	add.w	r6, r4, #320	@ 0x140
 8004a26:	f7ff fdad 	bl	8004584 <_ZN8touchgfx3BoxC1Ev>
 8004a2a:	a908      	add	r1, sp, #32
 8004a2c:	4658      	mov	r0, fp
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004a2e:	f504 770d 	add.w	r7, r4, #564	@ 0x234
 8004a32:	f8ad 8020 	strh.w	r8, [sp, #32]
 8004a36:	f7ff fdb9 	bl	80045ac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004a3a:	4648      	mov	r0, r9
 8004a3c:	f7ff fdd0 	bl	80045e0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8004a40:	4630      	mov	r0, r6
 8004a42:	f00a f855 	bl	800eaf0 <_ZN8touchgfx6SliderC1Ev>
 8004a46:	2226      	movs	r2, #38	@ 0x26
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f01e fedc 	bl	8023808 <memset>
 8004a50:	4638      	mov	r0, r7
 8004a52:	f7ff fd85 	bl	8004560 <_ZN8touchgfx6WidgetC1Ev>
 8004a56:	4b84      	ldr	r3, [pc, #528]	@ (8004c68 <_ZN15Screen2ViewBaseC1Ev+0x26c>)
    __background.setPosition(0, 0, 800, 480);
 8004a58:	462a      	mov	r2, r5
 8004a5a:	4650      	mov	r0, sl
 8004a5c:	f8c4 325c 	str.w	r3, [r4, #604]	@ 0x25c
 8004a60:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8004a64:	f8a4 8260 	strh.w	r8, [r4, #608]	@ 0x260
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
 8004a6e:	f104 0804 	add.w	r8, r4, #4
        : TextAreaWithWildcardBase(), wc1(0)
 8004a72:	4b7e      	ldr	r3, [pc, #504]	@ (8004c6c <_ZN15Screen2ViewBaseC1Ev+0x270>)
        : color(col)
 8004a74:	f8c4 5264 	str.w	r5, [r4, #612]	@ 0x264
 8004a78:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	f8a4 526c 	strh.w	r5, [r4, #620]	@ 0x26c
 8004a84:	f8c4 5270 	str.w	r5, [r4, #624]	@ 0x270
 8004a88:	f8c4 527c 	str.w	r5, [r4, #636]	@ 0x27c
              text(0)
 8004a8c:	e9c4 359d 	strd	r3, r5, [r4, #628]	@ 0x274
        : pobject(pObject), pmemfun(pmemfun_1)
 8004a90:	4b77      	ldr	r3, [pc, #476]	@ (8004c70 <_ZN15Screen2ViewBaseC1Ev+0x274>)
 8004a92:	e9c4 34a3 	strd	r3, r4, [r4, #652]	@ 0x28c
 8004a96:	4b77      	ldr	r3, [pc, #476]	@ (8004c74 <_ZN15Screen2ViewBaseC1Ev+0x278>)
 8004a98:	e9c4 35a5 	strd	r3, r5, [r4, #660]	@ 0x294
        : pobject(pObject), pmemfun(pmemfun_2)
 8004a9c:	4b76      	ldr	r3, [pc, #472]	@ (8004c78 <_ZN15Screen2ViewBaseC1Ev+0x27c>)
 8004a9e:	e9c4 34a7 	strd	r3, r4, [r4, #668]	@ 0x29c
 8004aa2:	4b76      	ldr	r3, [pc, #472]	@ (8004c7c <_ZN15Screen2ViewBaseC1Ev+0x280>)
 8004aa4:	e9c4 35a9 	strd	r3, r5, [r4, #676]	@ 0x2a4
 8004aa8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004ab2:	f7ff fd42 	bl	800453a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004ab6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004aba:	4651      	mov	r1, sl
 8004abc:	4640      	mov	r0, r8
 8004abe:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004ac0:	f04f 0a01 	mov.w	sl, #1
 8004ac4:	f009 fb5c 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8004ac8:	462a      	mov	r2, r5
 8004aca:	4658      	mov	r0, fp
 8004acc:	4629      	mov	r1, r5
 8004ace:	f7ff fcf5 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_RAYS_ID));
 8004ad2:	4658      	mov	r0, fp
 8004ad4:	a908      	add	r1, sp, #32
 8004ad6:	f8ad a020 	strh.w	sl, [sp, #32]
 8004ada:	f00c ff75 	bl	80119c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004ade:	4659      	mov	r1, fp
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	f04f 0b05 	mov.w	fp, #5
 8004ae6:	f009 fb4b 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderBox.setPosition(x, y, width, height);
 8004aea:	2332      	movs	r3, #50	@ 0x32
 8004aec:	462a      	mov	r2, r5
 8004aee:	4629      	mov	r1, r5
 8004af0:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	2390      	movs	r3, #144	@ 0x90
 8004af8:	f7ff fd1f 	bl	800453a <_ZN8touchgfx8Drawable11setPositionEssss>
        up = colorReleased;
 8004afc:	4b60      	ldr	r3, [pc, #384]	@ (8004c80 <_ZN15Screen2ViewBaseC1Ev+0x284>)
        handlePressedUpdated();
 8004afe:	4648      	mov	r0, r9
 8004b00:	f8a4 b0fc 	strh.w	fp, [r4, #252]	@ 0xfc
        up = colorReleased;
 8004b04:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
        down = colorPressed;
 8004b08:	f503 534c 	add.w	r3, r3, #13056	@ 0x3300
 8004b0c:	3333      	adds	r3, #51	@ 0x33
 8004b0e:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
        borderUp = borderColorReleased;
 8004b12:	f5a3 43cc 	sub.w	r3, r3, #26112	@ 0x6600
 8004b16:	3b66      	subs	r3, #102	@ 0x66
 8004b18:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
        borderDown = borderColorPressed;
 8004b1c:	f103 1333 	add.w	r3, r3, #3342387	@ 0x330033
 8004b20:	f503 534c 	add.w	r3, r3, #13056	@ 0x3300
 8004b24:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
        handlePressedUpdated();
 8004b28:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8004b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b30:	4798      	blx	r3
 8004b32:	2308      	movs	r3, #8
    flexButton1.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_AV_SKIP_PREVIOUS_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8004b34:	aa08      	add	r2, sp, #32
 8004b36:	a907      	add	r1, sp, #28
 8004b38:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004b3c:	2307      	movs	r3, #7
 8004b3e:	4648      	mov	r0, r9
 8004b40:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004b44:	f7ff fcc7 	bl	80044d6 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
 8004b48:	232b      	movs	r3, #43	@ 0x2b
    flexButton1.setPosition(0, 430, 144, 50);
 8004b4a:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4648      	mov	r0, r9
 8004b52:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
    flexButton1.setAction(flexButtonCallback);
 8004b56:	f504 7323 	add.w	r3, r4, #652	@ 0x28c
 8004b5a:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
    flexButton1.setPosition(0, 430, 144, 50);
 8004b5e:	2332      	movs	r3, #50	@ 0x32
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2390      	movs	r3, #144	@ 0x90
 8004b64:	f7ff fce9 	bl	800453a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004b68:	4649      	mov	r1, r9
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f009 fb08 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    slider1.setXY(125, 175);
 8004b70:	4630      	mov	r0, r6
 8004b72:	22af      	movs	r2, #175	@ 0xaf
 8004b74:	217d      	movs	r1, #125	@ 0x7d
 8004b76:	f7ff fca1 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 8004b7a:	2304      	movs	r3, #4
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_ACTIVE_ID));
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	aa07      	add	r2, sp, #28
 8004b80:	f8ad 3018 	strh.w	r3, [sp, #24]
 8004b84:	2302      	movs	r3, #2
 8004b86:	a906      	add	r1, sp, #24
 8004b88:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004b92:	ab08      	add	r3, sp, #32
 8004b94:	f00a f806 	bl	800eba4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(16, 11, 0, 0, 200);
 8004b98:	23c8      	movs	r3, #200	@ 0xc8
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	220b      	movs	r2, #11
 8004b9e:	2110      	movs	r1, #16
 8004ba0:	e9cd 5300 	strd	r5, r3, [sp]
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	f009 ff1f 	bl	800e9e8 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>
    slider1.setValueRange(0, 100);
 8004baa:	2264      	movs	r2, #100	@ 0x64
 8004bac:	4630      	mov	r0, r6
 8004bae:	4629      	mov	r1, r5
 8004bb0:	f009 fdb3 	bl	800e71a <_ZN8touchgfx6Slider13setValueRangeEss>
    slider1.setValue(0);
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	f009 fd77 	bl	800e6aa <_ZN8touchgfx6Slider8setValueEs>
    slider1.setNewValueCallback(sliderValueChangedCallback);
 8004bbc:	f504 7327 	add.w	r3, r4, #668	@ 0x29c
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	4640      	mov	r0, r8
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
    {
        newValueCallback = &callback;
 8004bc4:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
        boundingArea = calculateBoundingArea();
 8004bc8:	ae02      	add	r6, sp, #8
 8004bca:	f009 fad9 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setPosition(520, 175, 147, 41);
 8004bce:	2329      	movs	r3, #41	@ 0x29
 8004bd0:	22af      	movs	r2, #175	@ 0xaf
 8004bd2:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	2393      	movs	r3, #147	@ 0x93
 8004bdc:	f7ff fcad 	bl	800453a <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8004be0:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 8004be4:	4630      	mov	r0, r6
 8004be6:	4639      	mov	r1, r7
        color = newColor;
 8004be8:	f8c4 3264 	str.w	r3, [r4, #612]	@ 0x264
        boundingArea = calculateBoundingArea();
 8004bec:	f8d4 3234 	ldr.w	r3, [r4, #564]	@ 0x234
        linespace = space;
 8004bf0:	f8a4 5268 	strh.w	r5, [r4, #616]	@ 0x268
        boundingArea = calculateBoundingArea();
 8004bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bf8:	4798      	blx	r3
 8004bfa:	f504 731c 	add.w	r3, r4, #624	@ 0x270
 8004bfe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004c02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004c06:	4b1f      	ldr	r3, [pc, #124]	@ (8004c84 <_ZN15Screen2ViewBaseC1Ev+0x288>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_K327).getText());
 8004c08:	f504 7620 	add.w	r6, r4, #640	@ 0x280
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	b92b      	cbnz	r3, 8004c1c <_ZN15Screen2ViewBaseC1Ev+0x220>
 8004c10:	4b1d      	ldr	r3, [pc, #116]	@ (8004c88 <_ZN15Screen2ViewBaseC1Ev+0x28c>)
 8004c12:	2160      	movs	r1, #96	@ 0x60
 8004c14:	4a1d      	ldr	r2, [pc, #116]	@ (8004c8c <_ZN15Screen2ViewBaseC1Ev+0x290>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004c16:	481e      	ldr	r0, [pc, #120]	@ (8004c90 <_ZN15Screen2ViewBaseC1Ev+0x294>)
 8004c18:	f01e fb5a 	bl	80232d0 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c94 <_ZN15Screen2ViewBaseC1Ev+0x298>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b91b      	cbnz	r3, 8004c2a <_ZN15Screen2ViewBaseC1Ev+0x22e>
 8004c22:	4b1d      	ldr	r3, [pc, #116]	@ (8004c98 <_ZN15Screen2ViewBaseC1Ev+0x29c>)
 8004c24:	2161      	movs	r1, #97	@ 0x61
 8004c26:	4a19      	ldr	r2, [pc, #100]	@ (8004c8c <_ZN15Screen2ViewBaseC1Ev+0x290>)
 8004c28:	e7f5      	b.n	8004c16 <_ZN15Screen2ViewBaseC1Ev+0x21a>
        return texts->getText(typedTextId);
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c9c <_ZN15Screen2ViewBaseC1Ev+0x2a0>)
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	f000 f9a0 	bl	8004f74 <_ZNK8touchgfx5Texts7getTextEt>
 8004c34:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca0 <_ZN15Screen2ViewBaseC1Ev+0x2a4>)
 8004c36:	4603      	mov	r3, r0
 8004c38:	4659      	mov	r1, fp
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f013 f87a 	bl	8017d34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <_ZN15Screen2ViewBaseC1Ev+0x26c>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5G32));
 8004c42:	a908      	add	r1, sp, #32
 8004c44:	4638      	mov	r0, r7
        wc1 = value;
 8004c46:	f8c4 627c 	str.w	r6, [r4, #636]	@ 0x27c
 8004c4a:	9308      	str	r3, [sp, #32]
 8004c4c:	f8ad a024 	strh.w	sl, [sp, #36]	@ 0x24
 8004c50:	f00c fcb4 	bl	80115bc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004c54:	4640      	mov	r0, r8
 8004c56:	4639      	mov	r1, r7
 8004c58:	f009 fa92 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	b00b      	add	sp, #44	@ 0x2c
 8004c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c64:	08026e5c 	.word	0x08026e5c
 8004c68:	08026a40 	.word	0x08026a40
 8004c6c:	08026bf8 	.word	0x08026bf8
 8004c70:	08026e2c 	.word	0x08026e2c
 8004c74:	080049e5 	.word	0x080049e5
 8004c78:	08026e44 	.word	0x08026e44
 8004c7c:	080049c9 	.word	0x080049c9
 8004c80:	ff006699 	.word	0xff006699
 8004c84:	24025354 	.word	0x24025354
 8004c88:	080260ea 	.word	0x080260ea
 8004c8c:	080261fa 	.word	0x080261fa
 8004c90:	08026167 	.word	0x08026167
 8004c94:	24025358 	.word	0x24025358
 8004c98:	080261bc 	.word	0x080261bc
 8004c9c:	24025360 	.word	0x24025360
 8004ca0:	08026245 	.word	0x08026245

08004ca4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004ca4:	4770      	bx	lr
	...

08004ca8 <_Z23getFont_verdana_10_4bppv>:
{
 8004ca8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004caa:	4d16      	ldr	r5, [pc, #88]	@ (8004d04 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8004cac:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004cae:	682c      	ldr	r4, [r5, #0]
 8004cb0:	f3bf 8f5b 	dmb	ish
 8004cb4:	f014 0401 	ands.w	r4, r4, #1
 8004cb8:	d120      	bne.n	8004cfc <_Z23getFont_verdana_10_4bppv+0x54>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f01d ff94 	bl	8022be8 <__cxa_guard_acquire>
 8004cc0:	b1e0      	cbz	r0, 8004cfc <_Z23getFont_verdana_10_4bppv+0x54>
 8004cc2:	233f      	movs	r3, #63	@ 0x3f
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4910      	ldr	r1, [pc, #64]	@ (8004d08 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cca:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <_Z23getFont_verdana_10_4bppv+0x64>)
 8004ccc:	4810      	ldr	r0, [pc, #64]	@ (8004d10 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004cce:	9308      	str	r3, [sp, #32]
 8004cd0:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004cd2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004cd4:	9405      	str	r4, [sp, #20]
 8004cd6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004cda:	2304      	movs	r3, #4
 8004cdc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004ce0:	230a      	movs	r3, #10
 8004ce2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004cec:	f7ff fa50 	bl	8004190 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004cf0:	4809      	ldr	r0, [pc, #36]	@ (8004d18 <_Z23getFont_verdana_10_4bppv+0x70>)
 8004cf2:	f01e fb0b 	bl	802330c <atexit>
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f01d ff82 	bl	8022c00 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004cfc:	4804      	ldr	r0, [pc, #16]	@ (8004d10 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004cfe:	b00f      	add	sp, #60	@ 0x3c
 8004d00:	bd30      	pop	{r4, r5, pc}
 8004d02:	bf00      	nop
 8004d04:	2400b244 	.word	0x2400b244
 8004d08:	0802e8e8 	.word	0x0802e8e8
 8004d0c:	0802ee3c 	.word	0x0802ee3c
 8004d10:	2400b248 	.word	0x2400b248
 8004d14:	0802f128 	.word	0x0802f128
 8004d18:	08004ca5 	.word	0x08004ca5

08004d1c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004d1c:	4770      	bx	lr
	...

08004d20 <_Z23getFont_verdana_20_4bppv>:
{
 8004d20:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004d22:	4d16      	ldr	r5, [pc, #88]	@ (8004d7c <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8004d24:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004d26:	682c      	ldr	r4, [r5, #0]
 8004d28:	f3bf 8f5b 	dmb	ish
 8004d2c:	f014 0401 	ands.w	r4, r4, #1
 8004d30:	d120      	bne.n	8004d74 <_Z23getFont_verdana_20_4bppv+0x54>
 8004d32:	4628      	mov	r0, r5
 8004d34:	f01d ff58 	bl	8022be8 <__cxa_guard_acquire>
 8004d38:	b1e0      	cbz	r0, 8004d74 <_Z23getFont_verdana_20_4bppv+0x54>
 8004d3a:	233f      	movs	r3, #63	@ 0x3f
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4910      	ldr	r1, [pc, #64]	@ (8004d80 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d42:	4b10      	ldr	r3, [pc, #64]	@ (8004d84 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004d44:	4810      	ldr	r0, [pc, #64]	@ (8004d88 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004d46:	9308      	str	r3, [sp, #32]
 8004d48:	4b10      	ldr	r3, [pc, #64]	@ (8004d8c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004d4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8004d4c:	9405      	str	r4, [sp, #20]
 8004d4e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004d52:	2304      	movs	r3, #4
 8004d54:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004d58:	2314      	movs	r3, #20
 8004d5a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004d64:	f7ff fa14 	bl	8004190 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004d68:	4809      	ldr	r0, [pc, #36]	@ (8004d90 <_Z23getFont_verdana_20_4bppv+0x70>)
 8004d6a:	f01e facf 	bl	802330c <atexit>
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f01d ff46 	bl	8022c00 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8004d74:	4804      	ldr	r0, [pc, #16]	@ (8004d88 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004d76:	b00f      	add	sp, #60	@ 0x3c
 8004d78:	bd30      	pop	{r4, r5, pc}
 8004d7a:	bf00      	nop
 8004d7c:	2400b274 	.word	0x2400b274
 8004d80:	0802e8f8 	.word	0x0802e8f8
 8004d84:	0802ee40 	.word	0x0802ee40
 8004d88:	2400b278 	.word	0x2400b278
 8004d8c:	0802f12c 	.word	0x0802f12c
 8004d90:	08004d1d 	.word	0x08004d1d

08004d94 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004d94:	4770      	bx	lr
	...

08004d98 <_Z23getFont_verdana_40_4bppv>:
{
 8004d98:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004d9a:	4d17      	ldr	r5, [pc, #92]	@ (8004df8 <_Z23getFont_verdana_40_4bppv+0x60>)
{
 8004d9c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004d9e:	682c      	ldr	r4, [r5, #0]
 8004da0:	f3bf 8f5b 	dmb	ish
 8004da4:	f014 0401 	ands.w	r4, r4, #1
 8004da8:	d123      	bne.n	8004df2 <_Z23getFont_verdana_40_4bppv+0x5a>
 8004daa:	4628      	mov	r0, r5
 8004dac:	f01d ff1c 	bl	8022be8 <__cxa_guard_acquire>
 8004db0:	b1f8      	cbz	r0, 8004df2 <_Z23getFont_verdana_40_4bppv+0x5a>
 8004db2:	233f      	movs	r3, #63	@ 0x3f
 8004db4:	2201      	movs	r2, #1
 8004db6:	4911      	ldr	r1, [pc, #68]	@ (8004dfc <_Z23getFont_verdana_40_4bppv+0x64>)
 8004db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dba:	4b11      	ldr	r3, [pc, #68]	@ (8004e00 <_Z23getFont_verdana_40_4bppv+0x68>)
 8004dbc:	4811      	ldr	r0, [pc, #68]	@ (8004e04 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004dbe:	9308      	str	r3, [sp, #32]
 8004dc0:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <_Z23getFont_verdana_40_4bppv+0x70>)
 8004dc2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004dc4:	9307      	str	r3, [sp, #28]
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004dcc:	2304      	movs	r3, #4
 8004dce:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004dd2:	2328      	movs	r3, #40	@ 0x28
 8004dd4:	225f      	movs	r2, #95	@ 0x5f
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	2330      	movs	r3, #48	@ 0x30
 8004dda:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004dde:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004de2:	f7ff f9d5 	bl	8004190 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004de6:	4809      	ldr	r0, [pc, #36]	@ (8004e0c <_Z23getFont_verdana_40_4bppv+0x74>)
 8004de8:	f01e fa90 	bl	802330c <atexit>
 8004dec:	4628      	mov	r0, r5
 8004dee:	f01d ff07 	bl	8022c00 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8004df2:	4804      	ldr	r0, [pc, #16]	@ (8004e04 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004df4:	b00f      	add	sp, #60	@ 0x3c
 8004df6:	bd30      	pop	{r4, r5, pc}
 8004df8:	2400b2a4 	.word	0x2400b2a4
 8004dfc:	0802e908 	.word	0x0802e908
 8004e00:	0802ee44 	.word	0x0802ee44
 8004e04:	2400b2a8 	.word	0x2400b2a8
 8004e08:	0802f130 	.word	0x0802f130
 8004e0c:	08004d95 	.word	0x08004d95

08004e10 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8004e10:	2000      	movs	r0, #0
 8004e12:	4770      	bx	lr

08004e14 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8004e14:	2000      	movs	r0, #0
 8004e16:	4770      	bx	lr

08004e18 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004e18:	b40e      	push	{r1, r2, r3}
 8004e1a:	b503      	push	{r0, r1, lr}
 8004e1c:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004e1e:	2100      	movs	r1, #0
{
 8004e20:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004e24:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004e26:	f010 fa6f 	bl	8015308 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004e2a:	b002      	add	sp, #8
 8004e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e30:	b003      	add	sp, #12
 8004e32:	4770      	bx	lr

08004e34 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004e34:	b40c      	push	{r2, r3}
 8004e36:	b507      	push	{r0, r1, r2, lr}
 8004e38:	ab04      	add	r3, sp, #16
 8004e3a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004e3e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004e40:	f010 fa62 	bl	8015308 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004e44:	b003      	add	sp, #12
 8004e46:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e4a:	b002      	add	sp, #8
 8004e4c:	4770      	bx	lr
	...

08004e50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004e50:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8004e52:	b510      	push	{r4, lr}
 8004e54:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004e56:	b373      	cbz	r3, 8004eb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004e58:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8004e5a:	b92b      	cbnz	r3, 8004e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004e5c:	4b18      	ldr	r3, [pc, #96]	@ (8004ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004e5e:	21c5      	movs	r1, #197	@ 0xc5
 8004e60:	4a18      	ldr	r2, [pc, #96]	@ (8004ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004e62:	4819      	ldr	r0, [pc, #100]	@ (8004ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004e64:	f01e fa34 	bl	80232d0 <__assert_func>
            return buffer[pos];
 8004e68:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8004e6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004e6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004e70:	b30b      	cbz	r3, 8004eb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004e72:	f012 f9b7 	bl	80171e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004e76:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d803      	bhi.n	8004e84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004e7c:	4b13      	ldr	r3, [pc, #76]	@ (8004ecc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004e7e:	21cb      	movs	r1, #203	@ 0xcb
 8004e80:	4a13      	ldr	r2, [pc, #76]	@ (8004ed0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004e82:	e7ee      	b.n	8004e62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004e84:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004e86:	f640 103f 	movw	r0, #2367	@ 0x93f
 8004e8a:	1c53      	adds	r3, r2, #1
 8004e8c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004e8e:	2b09      	cmp	r3, #9
 8004e90:	4619      	mov	r1, r3
 8004e92:	bf88      	it	hi
 8004e94:	f1a3 010a 	subhi.w	r1, r3, #10
 8004e98:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004e9c:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8004e9e:	4281      	cmp	r1, r0
 8004ea0:	d109      	bne.n	8004eb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004ea2:	2b0a      	cmp	r3, #10
 8004ea4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004ea8:	bf28      	it	cs
 8004eaa:	2300      	movcs	r3, #0
            return buffer[pos];
 8004eac:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8004eae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004eb2:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8004eb4:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8004eb6:	4620      	mov	r0, r4
}
 8004eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004ebc:	f012 b894 	b.w	8016fe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004ec0:	08026248 	.word	0x08026248
 8004ec4:	08026251 	.word	0x08026251
 8004ec8:	080262fc 	.word	0x080262fc
 8004ecc:	08026354 	.word	0x08026354
 8004ed0:	08026362 	.word	0x08026362

08004ed4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004ed4:	f012 b851 	b.w	8016f7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004ed8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	ac02      	add	r4, sp, #8
 8004ede:	e884 0006 	stmia.w	r4, {r1, r2}
 8004ee2:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8004ee4:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004ee6:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004ee8:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	9b08      	ldr	r3, [sp, #32]
 8004ef2:	f00e fcf1 	bl	80138d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004ef6:	b006      	add	sp, #24
 8004ef8:	bd10      	pop	{r4, pc}
	...

08004efc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004efc:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004efe:	bb18      	cbnz	r0, 8004f48 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004f00:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8004f02:	4813      	ldr	r0, [pc, #76]	@ (8004f50 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004f04:	681c      	ldr	r4, [r3, #0]
 8004f06:	4913      	ldr	r1, [pc, #76]	@ (8004f54 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004f08:	b1b4      	cbz	r4, 8004f38 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	4422      	add	r2, r4
 8004f0e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004f10:	6862      	ldr	r2, [r4, #4]
 8004f12:	4422      	add	r2, r4
 8004f14:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004f16:	68a2      	ldr	r2, [r4, #8]
 8004f18:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f58 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004f20:	f000 f838 	bl	8004f94 <_ZN17TypedTextDatabase8getFontsEv>
 8004f24:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004f26:	f000 f833 	bl	8004f90 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f5c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004f2c:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004f30:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004f32:	4b0c      	ldr	r3, [pc, #48]	@ (8004f64 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004f34:	8018      	strh	r0, [r3, #0]
    }
}
 8004f36:	e007      	b.n	8004f48 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004f3a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f6c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004f3e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004f42:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004f44:	2c00      	cmp	r4, #0
 8004f46:	d1e8      	bne.n	8004f1a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	bf00      	nop
 8004f4c:	2400b2e0 	.word	0x2400b2e0
 8004f50:	2400b2d8 	.word	0x2400b2d8
 8004f54:	2400b2d4 	.word	0x2400b2d4
 8004f58:	2400b2dc 	.word	0x2400b2dc
 8004f5c:	24025354 	.word	0x24025354
 8004f60:	2402535c 	.word	0x2402535c
 8004f64:	24025358 	.word	0x24025358
 8004f68:	902497a0 	.word	0x902497a0
 8004f6c:	90249790 	.word	0x90249790
 8004f70:	902497b0 	.word	0x902497b0

08004f74 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004f74:	4b04      	ldr	r3, [pc, #16]	@ (8004f88 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004f7c:	4b03      	ldr	r3, [pc, #12]	@ (8004f8c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	2400b2d4 	.word	0x2400b2d4
 8004f8c:	2400b2d8 	.word	0x2400b2d8

08004f90 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004f90:	2004      	movs	r0, #4
 8004f92:	4770      	bx	lr

08004f94 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004f94:	4800      	ldr	r0, [pc, #0]	@ (8004f98 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004f96:	4770      	bx	lr
 8004f98:	2400b2e4 	.word	0x2400b2e4

08004f9c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004f9c:	b510      	push	{r4, lr}
};
 8004f9e:	4c05      	ldr	r4, [pc, #20]	@ (8004fb4 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004fa0:	f7ff febe 	bl	8004d20 <_Z23getFont_verdana_20_4bppv>
};
 8004fa4:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004fa6:	f7ff fef7 	bl	8004d98 <_Z23getFont_verdana_40_4bppv>
};
 8004faa:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004fac:	f7ff fe7c 	bl	8004ca8 <_Z23getFont_verdana_10_4bppv>
};
 8004fb0:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8004fb2:	bd10      	pop	{r4, pc}
 8004fb4:	2400b2e4 	.word	0x2400b2e4

08004fb8 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8004fb8:	b510      	push	{r4, lr}
    pointArray = 0;
 8004fba:	2400      	movs	r4, #0
 8004fbc:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8004fbe:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004fc0:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8004fc2:	601c      	str	r4, [r3, #0]
}
 8004fc4:	bd10      	pop	{r4, pc}

08004fc6 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004fc6:	4770      	bx	lr

08004fc8 <_ZN19FrontendApplicationD0Ev>:
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	4604      	mov	r4, r0
 8004fcc:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004fd0:	f01d fe08 	bl	8022be4 <_ZdlPvj>
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	bd10      	pop	{r4, pc}

08004fd8 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
    {
        model.tick();
 8004fdc:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8004fe0:	f000 f816 	bl	8005010 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004fe4:	4620      	mov	r0, r4
    }
 8004fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004fea:	f00f b981 	b.w	80142f0 <_ZN8touchgfx11Application15handleTickEventEv>
	...

08004ff0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004ff4:	f7ff f832 	bl	800405c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004ff8:	4b01      	ldr	r3, [pc, #4]	@ (8005000 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8004ffa:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004ffc:	6023      	str	r3, [r4, #0]
}
 8004ffe:	bd10      	pop	{r4, pc}
 8005000:	08026e94 	.word	0x08026e94

08005004 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0), btnState(false),Slider_val(10)
 8005004:	2200      	movs	r2, #0
 8005006:	6002      	str	r2, [r0, #0]
 8005008:	7102      	strb	r2, [r0, #4]
 800500a:	220a      	movs	r2, #10
 800500c:	6082      	str	r2, [r0, #8]
{

}
 800500e:	4770      	bx	lr

08005010 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8005010:	4770      	bx	lr

08005012 <_ZN5Model16saveToggleButtonEb>:

void Model::saveToggleButton(bool state){

	btnState = state;
 8005012:	7101      	strb	r1, [r0, #4]


}
 8005014:	4770      	bx	lr

08005016 <_ZN5Model11getBtnStateEv>:

bool Model::getBtnState(){

	return btnState;

}
 8005016:	7900      	ldrb	r0, [r0, #4]
 8005018:	4770      	bx	lr

0800501a <_ZN5Model14setSliderValueEi>:


void Model::setSliderValue(int value){

	Slider_val = value;
 800501a:	6081      	str	r1, [r0, #8]

}
 800501c:	4770      	bx	lr

0800501e <_ZN5Model14getSliderValueEv>:

int Model::getSliderValue(){

	return Slider_val;

}
 800501e:	6880      	ldr	r0, [r0, #8]
 8005020:	4770      	bx	lr

08005022 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8005022:	4770      	bx	lr

08005024 <_ZThn4_N16Screen1PresenterD1Ev>:
 8005024:	3804      	subs	r0, #4
 8005026:	4770      	bx	lr

08005028 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::deactivate()
{

}
 8005028:	4770      	bx	lr

0800502a <_ZN16Screen1PresenterD0Ev>:
 800502a:	b510      	push	{r4, lr}
 800502c:	4604      	mov	r4, r0
 800502e:	2110      	movs	r1, #16
 8005030:	f01d fdd8 	bl	8022be4 <_ZdlPvj>
 8005034:	4620      	mov	r0, r4
 8005036:	bd10      	pop	{r4, pc}

08005038 <_ZThn4_N16Screen1PresenterD0Ev>:
 8005038:	f1a0 0004 	sub.w	r0, r0, #4
 800503c:	e7f5      	b.n	800502a <_ZN16Screen1PresenterD0Ev>

0800503e <_ZN16Screen1Presenter8activateEv>:
{
 800503e:	b510      	push	{r4, lr}
	view.setToggleState(model->getBtnState());
 8005040:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 8005044:	f7ff ffe7 	bl	8005016 <_ZN5Model11getBtnStateEv>
 8005048:	4601      	mov	r1, r0
 800504a:	4620      	mov	r0, r4
}
 800504c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	view.setToggleState(model->getBtnState());
 8005050:	f000 b84a 	b.w	80050e8 <_ZN11Screen1View14setToggleStateEb>

08005054 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8005054:	2200      	movs	r2, #0
    : view(v)
 8005056:	60c1      	str	r1, [r0, #12]
 8005058:	6082      	str	r2, [r0, #8]
 800505a:	4a02      	ldr	r2, [pc, #8]	@ (8005064 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 800505c:	6002      	str	r2, [r0, #0]
 800505e:	3218      	adds	r2, #24
 8005060:	6042      	str	r2, [r0, #4]
}
 8005062:	4770      	bx	lr
 8005064:	08026ee8 	.word	0x08026ee8

08005068 <_ZN16Screen1Presenter16saveToggleButtonEb>:
void Screen1Presenter::saveToggleButton(bool state){

	model->saveToggleButton(state);
 8005068:	6880      	ldr	r0, [r0, #8]
 800506a:	f7ff bfd2 	b.w	8005012 <_ZN5Model16saveToggleButtonEb>

0800506e <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800506e:	4770      	bx	lr

08005070 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8005070:	4b03      	ldr	r3, [pc, #12]	@ (8005080 <_ZN11Screen1ViewD1Ev+0x10>)
 8005072:	b510      	push	{r4, lr}
 8005074:	4604      	mov	r4, r0
 8005076:	6003      	str	r3, [r0, #0]
 8005078:	f7ff f905 	bl	8004286 <_ZN15Screen1ViewBaseD1Ev>
 800507c:	4620      	mov	r0, r4
 800507e:	bd10      	pop	{r4, pc}
 8005080:	08026f10 	.word	0x08026f10

08005084 <_ZN11Screen1ViewD0Ev>:
 8005084:	b510      	push	{r4, lr}
 8005086:	4604      	mov	r4, r0
 8005088:	f7ff fff2 	bl	8005070 <_ZN11Screen1ViewD1Ev>
 800508c:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8005090:	4620      	mov	r0, r4
 8005092:	f01d fda7 	bl	8022be4 <_ZdlPvj>
 8005096:	4620      	mov	r0, r4
 8005098:	bd10      	pop	{r4, pc}
	...

0800509c <_ZNK8touchgfx6Bitmap5getIdEv.part.0>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800509c:	b508      	push	{r3, lr}
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800509e:	4a03      	ldr	r2, [pc, #12]	@ (80050ac <_ZNK8touchgfx6Bitmap5getIdEv.part.0+0x10>)
 80050a0:	2194      	movs	r1, #148	@ 0x94
 80050a2:	4b03      	ldr	r3, [pc, #12]	@ (80050b0 <_ZNK8touchgfx6Bitmap5getIdEv.part.0+0x14>)
 80050a4:	4803      	ldr	r0, [pc, #12]	@ (80050b4 <_ZNK8touchgfx6Bitmap5getIdEv.part.0+0x18>)
 80050a6:	f01e f913 	bl	80232d0 <__assert_func>
 80050aa:	bf00      	nop
 80050ac:	08026470 	.word	0x08026470
 80050b0:	08026434 	.word	0x08026434
 80050b4:	080264a3 	.word	0x080264a3

080050b8 <_ZNK8touchgfx12ToggleButton8getStateEv>:
 80050b8:	4a05      	ldr	r2, [pc, #20]	@ (80050d0 <_ZNK8touchgfx12ToggleButton8getStateEv+0x18>)
 80050ba:	6812      	ldr	r2, [r2, #0]
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 80050bc:	b508      	push	{r3, lr}
 80050be:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80050c0:	b90a      	cbnz	r2, 80050c6 <_ZNK8touchgfx12ToggleButton8getStateEv+0xe>
 80050c2:	f7ff ffeb 	bl	800509c <_ZNK8touchgfx6Bitmap5getIdEv.part.0>
    {
        return up.getId() == originalPressed.getId();
 80050c6:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
    }
 80050c8:	1ac3      	subs	r3, r0, r3
 80050ca:	4258      	negs	r0, r3
 80050cc:	4158      	adcs	r0, r3
 80050ce:	bd08      	pop	{r3, pc}
 80050d0:	2402538c 	.word	0x2402538c

080050d4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4604      	mov	r4, r0
 80050d8:	f7ff facc 	bl	8004674 <_ZN15Screen1ViewBaseC1Ev>
 80050dc:	4b01      	ldr	r3, [pc, #4]	@ (80050e4 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80050de:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80050e0:	6023      	str	r3, [r4, #0]
}
 80050e2:	bd10      	pop	{r4, pc}
 80050e4:	08026f10 	.word	0x08026f10

080050e8 <_ZN11Screen1View14setToggleStateEb>:
textArea1.invalidate();
presenter->saveToggleButton(toggleButton1.getState());
}


void Screen1View::setToggleState(bool state){
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	460d      	mov	r5, r1
 80050ec:	4604      	mov	r4, r0

	toggleButton1.forceState(state);
 80050ee:	f500 70a0 	add.w	r0, r0, #320	@ 0x140
 80050f2:	f00c f956 	bl	80113a2 <_ZN8touchgfx12ToggleButton10forceStateEb>
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d",state?1:0);
 80050f6:	462b      	mov	r3, r5
 80050f8:	f504 70e2 	add.w	r0, r4, #452	@ 0x1c4
 80050fc:	4a02      	ldr	r2, [pc, #8]	@ (8005108 <_ZN11Screen1View14setToggleStateEb+0x20>)
 80050fe:	2105      	movs	r1, #5
}
 8005100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d",state?1:0);
 8005104:	f012 be16 	b.w	8017d34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8005108:	080264f5 	.word	0x080264f5

0800510c <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 800510c:	f7ff b8bc 	b.w	8004288 <_ZN15Screen1ViewBase11setupScreenEv>

08005110 <_ZN11Screen1View13TogglePressedEv>:
void Screen1View::TogglePressed(){
 8005110:	b538      	push	{r3, r4, r5, lr}
Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d",toggleButton1.getState()? 1:0);
 8005112:	f500 75a0 	add.w	r5, r0, #320	@ 0x140
void Screen1View::TogglePressed(){
 8005116:	4604      	mov	r4, r0
Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d",toggleButton1.getState()? 1:0);
 8005118:	4628      	mov	r0, r5
 800511a:	f7ff ffcd 	bl	80050b8 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800511e:	2105      	movs	r1, #5
 8005120:	4603      	mov	r3, r0
 8005122:	4a09      	ldr	r2, [pc, #36]	@ (8005148 <_ZN11Screen1View13TogglePressedEv+0x38>)
 8005124:	f504 70e2 	add.w	r0, r4, #452	@ 0x1c4
 8005128:	f012 fe04 	bl	8017d34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
textArea1.invalidate();
 800512c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8005130:	f010 fa15 	bl	801555e <_ZNK8touchgfx8Drawable10invalidateEv>
presenter->saveToggleButton(toggleButton1.getState());
 8005134:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8005136:	4628      	mov	r0, r5
 8005138:	f7ff ffbe 	bl	80050b8 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800513c:	4601      	mov	r1, r0
 800513e:	4620      	mov	r0, r4
}
 8005140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
presenter->saveToggleButton(toggleButton1.getState());
 8005144:	f7ff bf90 	b.w	8005068 <_ZN16Screen1Presenter16saveToggleButtonEb>
 8005148:	080264f5 	.word	0x080264f5

0800514c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {}
 800514c:	4770      	bx	lr

0800514e <_ZThn4_N16Screen2PresenterD1Ev>:
 800514e:	3804      	subs	r0, #4
 8005150:	4770      	bx	lr

08005152 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::deactivate()
{

}
 8005152:	4770      	bx	lr

08005154 <_ZN16Screen2PresenterD0Ev>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4604      	mov	r4, r0
 8005158:	2110      	movs	r1, #16
 800515a:	f01d fd43 	bl	8022be4 <_ZdlPvj>
 800515e:	4620      	mov	r0, r4
 8005160:	bd10      	pop	{r4, pc}

08005162 <_ZThn4_N16Screen2PresenterD0Ev>:
 8005162:	f1a0 0004 	sub.w	r0, r0, #4
 8005166:	e7f5      	b.n	8005154 <_ZN16Screen2PresenterD0Ev>

08005168 <_ZN16Screen2Presenter8activateEv>:
{
 8005168:	b510      	push	{r4, lr}
	view.setSlider(model->getSliderValue());
 800516a:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 800516e:	f7ff ff56 	bl	800501e <_ZN5Model14getSliderValueEv>
 8005172:	4601      	mov	r1, r0
 8005174:	4620      	mov	r0, r4
}
 8005176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	view.setSlider(model->getSliderValue());
 800517a:	f000 b849 	b.w	8005210 <_ZN11Screen2View9setSliderEi>

0800517e <_ZN16Screen2Presenter14setSliderValueEi>:

void Screen2Presenter::setSliderValue(int value){

	model->setSliderValue(value);
 800517e:	6880      	ldr	r0, [r0, #8]
 8005180:	f7ff bf4b 	b.w	800501a <_ZN5Model14setSliderValueEi>

08005184 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8005184:	2200      	movs	r2, #0
    : view(v)
 8005186:	60c1      	str	r1, [r0, #12]
 8005188:	6082      	str	r2, [r0, #8]
 800518a:	4a02      	ldr	r2, [pc, #8]	@ (8005194 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 800518c:	6002      	str	r2, [r0, #0]
 800518e:	321c      	adds	r2, #28
 8005190:	6042      	str	r2, [r0, #4]
}
 8005192:	4770      	bx	lr
 8005194:	08026f48 	.word	0x08026f48

08005198 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8005198:	4770      	bx	lr
	...

0800519c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800519c:	4b03      	ldr	r3, [pc, #12]	@ (80051ac <_ZN11Screen2ViewD1Ev+0x10>)
 800519e:	b510      	push	{r4, lr}
 80051a0:	4604      	mov	r4, r0
 80051a2:	6003      	str	r3, [r0, #0]
 80051a4:	f7ff fbc5 	bl	8004932 <_ZN15Screen2ViewBaseD1Ev>
 80051a8:	4620      	mov	r0, r4
 80051aa:	bd10      	pop	{r4, pc}
 80051ac:	08026f74 	.word	0x08026f74

080051b0 <_ZN11Screen2ViewD0Ev>:
 80051b0:	b510      	push	{r4, lr}
 80051b2:	4604      	mov	r4, r0
 80051b4:	f7ff fff2 	bl	800519c <_ZN11Screen2ViewD1Ev>
 80051b8:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 80051bc:	4620      	mov	r0, r4
 80051be:	f01d fd11 	bl	8022be4 <_ZdlPvj>
 80051c2:	4620      	mov	r0, r4
 80051c4:	bd10      	pop	{r4, pc}
	...

080051c8 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4604      	mov	r4, r0
 80051cc:	f7ff fc16 	bl	80049fc <_ZN15Screen2ViewBaseC1Ev>
 80051d0:	4b01      	ldr	r3, [pc, #4]	@ (80051d8 <_ZN11Screen2ViewC1Ev+0x10>)
}
 80051d2:	4620      	mov	r0, r4
Screen2View::Screen2View()
 80051d4:	6023      	str	r3, [r4, #0]
}
 80051d6:	bd10      	pop	{r4, pc}
 80051d8:	08026f74 	.word	0x08026f74

080051dc <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 80051dc:	f7ff bbaa 	b.w	8004934 <_ZN15Screen2ViewBase11setupScreenEv>

080051e0 <_ZN11Screen2View13SliderUpdatedEi>:

void Screen2View::SliderUpdated(int value){
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	4604      	mov	r4, r0

    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", value);
 80051e4:	460b      	mov	r3, r1
void Screen2View::SliderUpdated(int value){
 80051e6:	460d      	mov	r5, r1
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", value);
 80051e8:	4a08      	ldr	r2, [pc, #32]	@ (800520c <_ZN11Screen2View13SliderUpdatedEi+0x2c>)
 80051ea:	2105      	movs	r1, #5
 80051ec:	f500 7020 	add.w	r0, r0, #640	@ 0x280
 80051f0:	f012 fda0 	bl	8017d34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.invalidate();
 80051f4:	f504 700d 	add.w	r0, r4, #564	@ 0x234
 80051f8:	f010 f9b1 	bl	801555e <_ZNK8touchgfx8Drawable10invalidateEv>
    presenter->setSliderValue(value);
 80051fc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80051fe:	4629      	mov	r1, r5
 8005200:	6803      	ldr	r3, [r0, #0]


}
 8005202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    presenter->setSliderValue(value);
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	4718      	bx	r3
 800520a:	bf00      	nop
 800520c:	080264f5 	.word	0x080264f5

08005210 <_ZN11Screen2View9setSliderEi>:


void Screen2View::setSlider(int val){

	slider1.setValue(val);
 8005210:	b209      	sxth	r1, r1
 8005212:	f500 70a0 	add.w	r0, r0, #320	@ 0x140
 8005216:	f009 ba48 	b.w	800e6aa <_ZN8touchgfx6Slider8setValueEs>

0800521a <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800521a:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800521c:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8005220:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8005222:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8005224:	2302      	movs	r3, #2
 8005226:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8005228:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800522c:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8005230:	4770      	bx	lr

08005232 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8005232:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8005236:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8005238:	bf04      	itt	eq
 800523a:	2300      	moveq	r3, #0
 800523c:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8005240:	2000      	movs	r0, #0
 8005242:	4770      	bx	lr

08005244 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8005244:	2000      	movs	r0, #0
 8005246:	4770      	bx	lr

08005248 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005248:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800524a:	6904      	ldr	r4, [r0, #16]
 800524c:	8900      	ldrh	r0, [r0, #8]
 800524e:	46a4      	mov	ip, r4
}
 8005250:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005254:	4760      	bx	ip

08005256 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005256:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005258:	68c4      	ldr	r4, [r0, #12]
 800525a:	8900      	ldrh	r0, [r0, #8]
 800525c:	46a4      	mov	ip, r4
}
 800525e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005262:	4760      	bx	ip

08005264 <FT6X06_GestureConfig>:
{
 8005264:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005266:	f100 0518 	add.w	r5, r0, #24
{
 800526a:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800526c:	7809      	ldrb	r1, [r1, #0]
 800526e:	4628      	mov	r0, r5
 8005270:	f000 f912 	bl	8005498 <ft6x06_radian_value>
 8005274:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8005276:	7931      	ldrb	r1, [r6, #4]
 8005278:	4628      	mov	r0, r5
 800527a:	f000 f919 	bl	80054b0 <ft6x06_offset_left_right>
 800527e:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8005280:	7a31      	ldrb	r1, [r6, #8]
 8005282:	4628      	mov	r0, r5
 8005284:	f000 f920 	bl	80054c8 <ft6x06_offset_up_down>
 8005288:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800528a:	7b31      	ldrb	r1, [r6, #12]
 800528c:	4628      	mov	r0, r5
 800528e:	f000 f927 	bl	80054e0 <ft6x06_disatnce_left_right>
 8005292:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8005294:	7c31      	ldrb	r1, [r6, #16]
 8005296:	4628      	mov	r0, r5
 8005298:	f000 f92e 	bl	80054f8 <ft6x06_distance_up_down>
 800529c:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800529e:	7d31      	ldrb	r1, [r6, #20]
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 f935 	bl	8005510 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80052a6:	42c4      	cmn	r4, r0
}
 80052a8:	bf14      	ite	ne
 80052aa:	f04f 30ff 	movne.w	r0, #4294967295
 80052ae:	2000      	moveq	r0, #0
 80052b0:	bd70      	pop	{r4, r5, r6, pc}

080052b2 <FT6X06_ReadID>:
{
 80052b2:	b513      	push	{r0, r1, r4, lr}
 80052b4:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80052b6:	3018      	adds	r0, #24
 80052b8:	f10d 0107 	add.w	r1, sp, #7
 80052bc:	f000 f940 	bl	8005540 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 80052c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052c4:	6023      	str	r3, [r4, #0]
}
 80052c6:	b002      	add	sp, #8
 80052c8:	bd10      	pop	{r4, pc}

080052ca <FT6X06_GetState>:
{
 80052ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80052cc:	f100 0518 	add.w	r5, r0, #24
{
 80052d0:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80052d2:	a901      	add	r1, sp, #4
 80052d4:	4628      	mov	r0, r5
 80052d6:	f000 f8d2 	bl	800547e <ft6x06_td_status>
 80052da:	bb08      	cbnz	r0, 8005320 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80052dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	bf98      	it	ls
 80052e4:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80052e6:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80052e8:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80052ea:	2103      	movs	r1, #3
 80052ec:	4628      	mov	r0, r5
 80052ee:	eb0d 0203 	add.w	r2, sp, r3
 80052f2:	f000 f8b1 	bl	8005458 <ft6x06_read_reg>
 80052f6:	b9b0      	cbnz	r0, 8005326 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80052f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80052fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005306:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005308:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800530c:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800530e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005318:	4313      	orrs	r3, r2
 800531a:	60a3      	str	r3, [r4, #8]
}
 800531c:	b003      	add	sp, #12
 800531e:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	e7df      	b.n	80052e6 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8005326:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800532a:	e7f7      	b.n	800531c <FT6X06_GetState+0x52>

0800532c <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800532c:	3018      	adds	r0, #24
 800532e:	f000 b8a1 	b.w	8005474 <ft6x06_gest_id>

08005332 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8005332:	2101      	movs	r1, #1
 8005334:	3018      	adds	r0, #24
 8005336:	f000 b8f7 	b.w	8005528 <ft6x06_g_mode>

0800533a <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 800533a:	2100      	movs	r1, #0
 800533c:	3018      	adds	r0, #24
 800533e:	f000 b8f3 	b.w	8005528 <ft6x06_g_mode>

08005342 <FT6X06_Init>:
{
 8005342:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8005344:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8005348:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800534a:	b96b      	cbnz	r3, 8005368 <FT6X06_Init+0x26>
    pObj->IO.Init();
 800534c:	6803      	ldr	r3, [r0, #0]
 800534e:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8005350:	4620      	mov	r0, r4
 8005352:	f7ff fff2 	bl	800533a <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8005356:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8005358:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800535c:	bf18      	it	ne
 800535e:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8005360:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8005364:	4240      	negs	r0, r0
}
 8005366:	bd10      	pop	{r4, pc}
 8005368:	2000      	movs	r0, #0
  return ret;
 800536a:	e7fc      	b.n	8005366 <FT6X06_Init+0x24>

0800536c <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 800536c:	2000      	movs	r0, #0
 800536e:	4770      	bx	lr

08005370 <FT6X06_GetMultiTouchState>:
{
 8005370:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005372:	f100 0518 	add.w	r5, r0, #24
{
 8005376:	b085      	sub	sp, #20
 8005378:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800537a:	4628      	mov	r0, r5
 800537c:	a901      	add	r1, sp, #4
 800537e:	f000 f87e 	bl	800547e <ft6x06_td_status>
 8005382:	2800      	cmp	r0, #0
 8005384:	d145      	bne.n	8005412 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8005386:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800538a:	2b02      	cmp	r3, #2
 800538c:	bf98      	it	ls
 800538e:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005390:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005392:	230c      	movs	r3, #12
 8005394:	aa01      	add	r2, sp, #4
 8005396:	2103      	movs	r1, #3
 8005398:	4628      	mov	r0, r5
 800539a:	f000 f85d 	bl	8005458 <ft6x06_read_reg>
 800539e:	2800      	cmp	r0, #0
 80053a0:	d13a      	bne.n	8005418 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80053a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80053a6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80053aa:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80053ac:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80053ae:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80053b2:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80053b4:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80053b6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80053ba:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80053be:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80053c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053ca:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80053cc:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80053d0:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80053d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80053d6:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 80053d8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80053e0:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80053e2:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80053e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80053e8:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80053ea:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80053ec:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80053f0:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80053f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053fc:	430b      	orrs	r3, r1
 80053fe:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8005400:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005404:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8005406:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800540e:	b005      	add	sp, #20
 8005410:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005412:	f04f 30ff 	mov.w	r0, #4294967295
 8005416:	e7bb      	b.n	8005390 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8005418:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800541c:	e7f7      	b.n	800540e <FT6X06_GetMultiTouchState+0x9e>
	...

08005420 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8005420:	b190      	cbz	r0, 8005448 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8005422:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005424:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005426:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8005428:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800542a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 800542c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800542e:	68ca      	ldr	r2, [r1, #12]
 8005430:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005432:	690a      	ldr	r2, [r1, #16]
 8005434:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005436:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8005438:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800543a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800543c:	4a04      	ldr	r2, [pc, #16]	@ (8005450 <FT6X06_RegisterBusIO+0x30>)
 800543e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005440:	4a04      	ldr	r2, [pc, #16]	@ (8005454 <FT6X06_RegisterBusIO+0x34>)
 8005442:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8005444:	b103      	cbz	r3, 8005448 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8005446:	4718      	bx	r3
}
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	08005249 	.word	0x08005249
 8005454:	08005257 	.word	0x08005257

08005458 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8005458:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800545a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800545e:	46a4      	mov	ip, r4
}
 8005460:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005464:	4760      	bx	ip

08005466 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8005466:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005468:	6804      	ldr	r4, [r0, #0]
 800546a:	6880      	ldr	r0, [r0, #8]
 800546c:	46a4      	mov	ip, r4
}
 800546e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005472:	4760      	bx	ip

08005474 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005474:	2301      	movs	r3, #1
{
 8005476:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005478:	4619      	mov	r1, r3
 800547a:	f7ff bfed 	b.w	8005458 <ft6x06_read_reg>

0800547e <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800547e:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005480:	460a      	mov	r2, r1
{
 8005482:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005484:	2301      	movs	r3, #1
 8005486:	2102      	movs	r1, #2
 8005488:	f7ff ffe6 	bl	8005458 <ft6x06_read_reg>
  
  if(ret == 0)
 800548c:	b918      	cbnz	r0, 8005496 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 800548e:	7823      	ldrb	r3, [r4, #0]
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8005496:	bd10      	pop	{r4, pc}

08005498 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005498:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800549a:	2301      	movs	r3, #1
{
 800549c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80054a0:	f10d 0207 	add.w	r2, sp, #7
 80054a4:	2191      	movs	r1, #145	@ 0x91
 80054a6:	f7ff ffde 	bl	8005466 <ft6x06_write_reg>
}
 80054aa:	b003      	add	sp, #12
 80054ac:	f85d fb04 	ldr.w	pc, [sp], #4

080054b0 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80054b0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80054b2:	2301      	movs	r3, #1
{
 80054b4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80054b8:	f10d 0207 	add.w	r2, sp, #7
 80054bc:	2192      	movs	r1, #146	@ 0x92
 80054be:	f7ff ffd2 	bl	8005466 <ft6x06_write_reg>
}
 80054c2:	b003      	add	sp, #12
 80054c4:	f85d fb04 	ldr.w	pc, [sp], #4

080054c8 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80054c8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80054ca:	2301      	movs	r3, #1
{
 80054cc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80054d0:	f10d 0207 	add.w	r2, sp, #7
 80054d4:	2193      	movs	r1, #147	@ 0x93
 80054d6:	f7ff ffc6 	bl	8005466 <ft6x06_write_reg>
}
 80054da:	b003      	add	sp, #12
 80054dc:	f85d fb04 	ldr.w	pc, [sp], #4

080054e0 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80054e0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80054e2:	2301      	movs	r3, #1
{
 80054e4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80054e8:	f10d 0207 	add.w	r2, sp, #7
 80054ec:	2194      	movs	r1, #148	@ 0x94
 80054ee:	f7ff ffba 	bl	8005466 <ft6x06_write_reg>
}
 80054f2:	b003      	add	sp, #12
 80054f4:	f85d fb04 	ldr.w	pc, [sp], #4

080054f8 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80054f8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80054fa:	2301      	movs	r3, #1
{
 80054fc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005500:	f10d 0207 	add.w	r2, sp, #7
 8005504:	2195      	movs	r1, #149	@ 0x95
 8005506:	f7ff ffae 	bl	8005466 <ft6x06_write_reg>
}
 800550a:	b003      	add	sp, #12
 800550c:	f85d fb04 	ldr.w	pc, [sp], #4

08005510 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005510:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005512:	2301      	movs	r3, #1
{
 8005514:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005518:	f10d 0207 	add.w	r2, sp, #7
 800551c:	2196      	movs	r1, #150	@ 0x96
 800551e:	f7ff ffa2 	bl	8005466 <ft6x06_write_reg>
}
 8005522:	b003      	add	sp, #12
 8005524:	f85d fb04 	ldr.w	pc, [sp], #4

08005528 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005528:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800552a:	2301      	movs	r3, #1
{
 800552c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005530:	f10d 0207 	add.w	r2, sp, #7
 8005534:	21a4      	movs	r1, #164	@ 0xa4
 8005536:	f7ff ff96 	bl	8005466 <ft6x06_write_reg>
}
 800553a:	b003      	add	sp, #12
 800553c:	f85d fb04 	ldr.w	pc, [sp], #4

08005540 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005540:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8005542:	2301      	movs	r3, #1
 8005544:	21a8      	movs	r1, #168	@ 0xa8
 8005546:	f7ff bf87 	b.w	8005458 <ft6x06_read_reg>
	...

0800554c <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800554c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800554e:	2201      	movs	r2, #1
 8005550:	4b07      	ldr	r3, [pc, #28]	@ (8005570 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8005552:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8005556:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005558:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800555a:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 800555c:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800555e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005562:	f006 f9af 	bl	800b8c4 <HAL_SDRAM_SendCommand>
 8005566:	3800      	subs	r0, #0
 8005568:	bf18      	it	ne
 800556a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800556c:	4240      	negs	r0, r0
 800556e:	bd08      	pop	{r3, pc}
 8005570:	2400b2f0 	.word	0x2400b2f0

08005574 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005574:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8005576:	2202      	movs	r2, #2
 8005578:	4b08      	ldr	r3, [pc, #32]	@ (800559c <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800557a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 800557e:	2101      	movs	r1, #1
 8005580:	2200      	movs	r2, #0
 8005582:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800558a:	4619      	mov	r1, r3
 800558c:	f006 f99a 	bl	800b8c4 <HAL_SDRAM_SendCommand>
 8005590:	3800      	subs	r0, #0
 8005592:	bf18      	it	ne
 8005594:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005596:	4240      	negs	r0, r0
 8005598:	bd08      	pop	{r3, pc}
 800559a:	bf00      	nop
 800559c:	2400b2f0 	.word	0x2400b2f0

080055a0 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80055a0:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80055a2:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80055a6:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80055a8:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80055aa:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80055ac:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 80055ae:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 80055b0:	6991      	ldr	r1, [r2, #24]
 80055b2:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80055b4:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 80055b6:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80055b8:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80055ba:	4907      	ldr	r1, [pc, #28]	@ (80055d8 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 80055bc:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 80055be:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80055c0:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 80055c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80055c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055ca:	f006 f97b 	bl	800b8c4 <HAL_SDRAM_SendCommand>
 80055ce:	3800      	subs	r0, #0
 80055d0:	bf18      	it	ne
 80055d2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80055d4:	4240      	negs	r0, r0
 80055d6:	bd10      	pop	{r4, pc}
 80055d8:	2400b2f0 	.word	0x2400b2f0

080055dc <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80055dc:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80055de:	4b08      	ldr	r3, [pc, #32]	@ (8005600 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80055e0:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80055e4:	2108      	movs	r1, #8
 80055e6:	2200      	movs	r2, #0
 80055e8:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80055ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055f0:	4619      	mov	r1, r3
 80055f2:	f006 f967 	bl	800b8c4 <HAL_SDRAM_SendCommand>
 80055f6:	3800      	subs	r0, #0
 80055f8:	bf18      	it	ne
 80055fa:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80055fc:	4240      	negs	r0, r0
 80055fe:	bd08      	pop	{r3, pc}
 8005600:	2400b2f0 	.word	0x2400b2f0

08005604 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8005604:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8005606:	f006 f97c 	bl	800b902 <HAL_SDRAM_ProgramRefreshRate>
 800560a:	3800      	subs	r0, #0
 800560c:	bf18      	it	ne
 800560e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005610:	4240      	negs	r0, r0
 8005612:	bd08      	pop	{r3, pc}

08005614 <IS42S32800J_Init>:
{
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005618:	6809      	ldr	r1, [r1, #0]
{
 800561a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800561c:	f7ff ff96 	bl	800554c <IS42S32800J_ClockEnable>
 8005620:	b110      	cbz	r0, 8005628 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8005622:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005626:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8005628:	f001 fc7e 	bl	8006f28 <HAL_GetTick>
 800562c:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800562e:	f001 fc7b 	bl	8006f28 <HAL_GetTick>
 8005632:	4286      	cmp	r6, r0
 8005634:	d0fb      	beq.n	800562e <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005636:	6821      	ldr	r1, [r4, #0]
 8005638:	4628      	mov	r0, r5
 800563a:	f7ff ff9b 	bl	8005574 <IS42S32800J_Precharge>
 800563e:	2800      	cmp	r0, #0
 8005640:	d1ef      	bne.n	8005622 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8005642:	4628      	mov	r0, r5
 8005644:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005648:	f7ff ffc8 	bl	80055dc <IS42S32800J_RefreshMode>
 800564c:	2800      	cmp	r0, #0
 800564e:	d1e8      	bne.n	8005622 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8005650:	4621      	mov	r1, r4
 8005652:	4628      	mov	r0, r5
 8005654:	f7ff ffa4 	bl	80055a0 <IS42S32800J_ModeRegConfig>
 8005658:	2800      	cmp	r0, #0
 800565a:	d1e2      	bne.n	8005622 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 800565c:	68a1      	ldr	r1, [r4, #8]
 800565e:	4628      	mov	r0, r5
 8005660:	f7ff ffd0 	bl	8005604 <IS42S32800J_RefreshRate>
 8005664:	3800      	subs	r0, #0
 8005666:	bf18      	it	ne
 8005668:	2001      	movne	r0, #1
 800566a:	4240      	negs	r0, r0
  return ret;
 800566c:	e7db      	b.n	8005626 <IS42S32800J_Init+0x12>

0800566e <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800566e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005676:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800567a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800567e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005682:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8005686:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800568a:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 800568c:	2000      	movs	r0, #0
 800568e:	4770      	bx	lr

08005690 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005690:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005692:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8005696:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005698:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800569c:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800569e:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80056a0:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 80056a2:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80056a4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80056a6:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80056a8:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056aa:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80056ac:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 80056ae:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80056b0:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80056b2:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056b4:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80056b6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80056ba:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 80056be:	2310      	movs	r3, #16
 80056c0:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80056c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80056c6:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80056c8:	f240 1301 	movw	r3, #257	@ 0x101
 80056cc:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80056d2:	f004 fd0b 	bl	800a0ec <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80056d6:	2800      	cmp	r0, #0

}
 80056d8:	bf14      	ite	ne
 80056da:	f06f 0004 	mvnne.w	r0, #4
 80056de:	2000      	moveq	r0, #0
 80056e0:	b015      	add	sp, #84	@ 0x54
 80056e2:	f85d fb04 	ldr.w	pc, [sp], #4

080056e6 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80056e6:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056e8:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80056ec:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80056ee:	bf18      	it	ne
 80056f0:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80056f4:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80056f6:	bf08      	it	eq
 80056f8:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80056fc:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056fe:	a906      	add	r1, sp, #24
{
 8005700:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005702:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8005704:	2306      	movs	r3, #6
 8005706:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005708:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800570a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800570e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8005710:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005712:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005714:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005718:	f004 fbe8 	bl	8009eec <HAL_QSPI_Command>
 800571c:	bb20      	cbnz	r0, 8005768 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800571e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8005722:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005724:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005726:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800572a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800572c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800572e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8005732:	f04f 0310 	mov.w	r3, #16
 8005736:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800573a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800573e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005740:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005744:	bf14      	ite	ne
 8005746:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 800574a:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800574e:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005750:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005752:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005756:	f004 fcc9 	bl	800a0ec <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800575a:	2800      	cmp	r0, #0
 800575c:	bf14      	ite	ne
 800575e:	f06f 0004 	mvnne.w	r0, #4
 8005762:	2000      	moveq	r0, #0
}
 8005764:	b015      	add	sp, #84	@ 0x54
 8005766:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8005768:	f06f 0001 	mvn.w	r0, #1
 800576c:	e7fa      	b.n	8005764 <MT25TL01G_WriteEnable+0x7e>

0800576e <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800576e:	2903      	cmp	r1, #3
{
 8005770:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005772:	bf18      	it	ne
 8005774:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005778:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800577a:	bf08      	it	eq
 800577c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8005780:	4604      	mov	r4, r0
 8005782:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005784:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8005786:	23b7      	movs	r3, #183	@ 0xb7
 8005788:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800578a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800578c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005790:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005792:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005794:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005796:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800579a:	f7ff ffa4 	bl	80056e6 <MT25TL01G_WriteEnable>
 800579e:	b118      	cbz	r0, 80057a8 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 80057a0:	f06f 0001 	mvn.w	r0, #1
}
 80057a4:	b00f      	add	sp, #60	@ 0x3c
 80057a6:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ac:	4669      	mov	r1, sp
 80057ae:	4620      	mov	r0, r4
 80057b0:	f004 fb9c 	bl	8009eec <HAL_QSPI_Command>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d1f3      	bne.n	80057a0 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80057b8:	4629      	mov	r1, r5
 80057ba:	4620      	mov	r0, r4
 80057bc:	f7ff ff68 	bl	8005690 <MT25TL01G_AutoPollingMemReady>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d0ef      	beq.n	80057a4 <MT25TL01G_Enter4BytesAddressMode+0x36>
 80057c4:	e7ec      	b.n	80057a0 <MT25TL01G_Enter4BytesAddressMode+0x32>

080057c6 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80057c6:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80057c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80057cc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057ce:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80057d2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80057d4:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057d6:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80057d8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80057da:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80057dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80057e0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80057e2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80057e4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80057e6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057ea:	f004 fb7f 	bl	8009eec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80057ee:	2800      	cmp	r0, #0
}
 80057f0:	bf14      	ite	ne
 80057f2:	f06f 0001 	mvnne.w	r0, #1
 80057f6:	2000      	moveq	r0, #0
 80057f8:	b00f      	add	sp, #60	@ 0x3c
 80057fa:	f85d fb04 	ldr.w	pc, [sp], #4

080057fe <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80057fe:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005800:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8005804:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005806:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800580a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800580c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800580e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005810:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005812:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005814:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005818:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800581a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800581c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800581e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005822:	f004 fb63 	bl	8009eec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8005826:	2800      	cmp	r0, #0
}
 8005828:	bf14      	ite	ne
 800582a:	f06f 0001 	mvnne.w	r0, #1
 800582e:	2000      	moveq	r0, #0
 8005830:	b00f      	add	sp, #60	@ 0x3c
 8005832:	f85d fb04 	ldr.w	pc, [sp], #4

08005836 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005836:	b500      	push	{lr}
 8005838:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800583a:	2903      	cmp	r1, #3
 800583c:	d80e      	bhi.n	800585c <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 800583e:	e8df f001 	tbb	[pc, r1]
 8005842:	2902      	.short	0x2902
 8005844:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005846:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800584a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800584c:	230e      	movs	r3, #14
 800584e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005854:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8005856:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800585a:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800585c:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800585e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005862:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005866:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8005868:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800586a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800586e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005870:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005872:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005876:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005878:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800587a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800587c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005880:	f004 fc85 	bl	800a18e <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8005884:	2800      	cmp	r0, #0
}
 8005886:	bf14      	ite	ne
 8005888:	f06f 0005 	mvnne.w	r0, #5
 800588c:	2000      	moveq	r0, #0
 800588e:	b011      	add	sp, #68	@ 0x44
 8005890:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005898:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800589a:	233d      	movs	r3, #61	@ 0x3d
 800589c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800589e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058a2:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80058a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058a8:	e7d7      	b.n	800585a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80058aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058ae:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80058b0:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80058b2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80058b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80058b8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80058ba:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80058be:	e7cc      	b.n	800585a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80058c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80058c4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80058c6:	23ed      	movs	r3, #237	@ 0xed
 80058c8:	e7f3      	b.n	80058b2 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

080058ca <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80058ca:	b500      	push	{lr}
 80058cc:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80058ce:	2903      	cmp	r1, #3
 80058d0:	d80e      	bhi.n	80058f0 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 80058d2:	e8df f001 	tbb	[pc, r1]
 80058d6:	2502      	.short	0x2502
 80058d8:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80058da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058de:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80058e0:	230c      	movs	r3, #12
 80058e2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80058e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058e8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80058ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80058ee:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80058f0:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80058f2:	466a      	mov	r2, sp
 80058f4:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80058f6:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80058f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80058fc:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80058fe:	2300      	movs	r3, #0
 8005900:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005902:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005904:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005908:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800590c:	f004 fc3f 	bl	800a18e <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8005910:	2800      	cmp	r0, #0
}
 8005912:	bf14      	ite	ne
 8005914:	f06f 0005 	mvnne.w	r0, #5
 8005918:	2000      	moveq	r0, #0
 800591a:	b011      	add	sp, #68	@ 0x44
 800591c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005924:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005926:	23bc      	movs	r3, #188	@ 0xbc
 8005928:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800592a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800592e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005930:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005934:	e7db      	b.n	80058ee <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005936:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800593a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800593c:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800593e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005940:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005944:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005946:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800594a:	e7d0      	b.n	80058ee <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800594c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005950:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005952:	23eb      	movs	r3, #235	@ 0xeb
 8005954:	e7f3      	b.n	800593e <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08005956 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005956:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005958:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800595c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800595e:	bf18      	it	ne
 8005960:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005964:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005966:	bf08      	it	eq
 8005968:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800596c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800596e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8005970:	2366      	movs	r3, #102	@ 0x66
 8005972:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005974:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005976:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800597a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800597c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800597e:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005980:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005984:	f004 fab2 	bl	8009eec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8005988:	2800      	cmp	r0, #0
}
 800598a:	bf14      	ite	ne
 800598c:	f06f 0001 	mvnne.w	r0, #1
 8005990:	2000      	moveq	r0, #0
 8005992:	b00f      	add	sp, #60	@ 0x3c
 8005994:	f85d fb04 	ldr.w	pc, [sp], #4

08005998 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005998:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800599a:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800599e:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80059a0:	bf18      	it	ne
 80059a2:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80059a6:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80059a8:	bf08      	it	eq
 80059aa:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059ae:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80059b0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80059b2:	2399      	movs	r3, #153	@ 0x99
 80059b4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80059b6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80059b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80059bc:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80059be:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80059c0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80059c2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059c6:	f004 fa91 	bl	8009eec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80059ca:	2800      	cmp	r0, #0
}
 80059cc:	bf14      	ite	ne
 80059ce:	f06f 0001 	mvnne.w	r0, #1
 80059d2:	2000      	moveq	r0, #0
 80059d4:	b00f      	add	sp, #60	@ 0x3c
 80059d6:	f85d fb04 	ldr.w	pc, [sp], #4

080059da <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80059da:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80059dc:	6884      	ldr	r4, [r0, #8]
 80059de:	8800      	ldrh	r0, [r0, #0]
 80059e0:	46a4      	mov	ip, r4
}
 80059e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80059e6:	4760      	bx	ip

080059e8 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80059e8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80059ea:	6844      	ldr	r4, [r0, #4]
 80059ec:	8800      	ldrh	r0, [r0, #0]
 80059ee:	46a4      	mov	ip, r4
}
 80059f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80059f4:	4760      	bx	ip

080059f6 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80059f6:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80059f8:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80059fa:	4604      	mov	r4, r0
 80059fc:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 80059fe:	4798      	blx	r3
 8005a00:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	4798      	blx	r3
 8005a06:	1b83      	subs	r3, r0, r6
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	d3fa      	bcc.n	8005a02 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a10 <OTM8009A_Init>:
{
 8005a10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005a14:	2300      	movs	r3, #0
 8005a16:	f100 0510 	add.w	r5, r0, #16
{
 8005a1a:	4607      	mov	r7, r0
 8005a1c:	460e      	mov	r6, r1
 8005a1e:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005a20:	4619      	mov	r1, r3
 8005a22:	4ade      	ldr	r2, [pc, #888]	@ (8005d9c <OTM8009A_Init+0x38c>)
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 fb99 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005a2a:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005a2c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005a2e:	4adc      	ldr	r2, [pc, #880]	@ (8005da0 <OTM8009A_Init+0x390>)
 8005a30:	21ff      	movs	r1, #255	@ 0xff
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 fb92 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005a38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005a3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005a3c:	4ad9      	ldr	r2, [pc, #868]	@ (8005da4 <OTM8009A_Init+0x394>)
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4628      	mov	r0, r5
 8005a42:	f000 fb8b 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005a46:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005a48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005a4a:	4ad7      	ldr	r2, [pc, #860]	@ (8005da8 <OTM8009A_Init+0x398>)
 8005a4c:	21ff      	movs	r1, #255	@ 0xff
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 fb84 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005a54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005a56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005a58:	4ad2      	ldr	r2, [pc, #840]	@ (8005da4 <OTM8009A_Init+0x394>)
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 fb7d 	bl	800615c <otm8009a_write_reg>
 8005a62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005a64:	2300      	movs	r3, #0
 8005a66:	4ad1      	ldr	r2, [pc, #836]	@ (8005dac <OTM8009A_Init+0x39c>)
 8005a68:	21c4      	movs	r1, #196	@ 0xc4
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 fb76 	bl	800615c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005a70:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005a72:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7ff ffbe 	bl	80059f6 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4acc      	ldr	r2, [pc, #816]	@ (8005db0 <OTM8009A_Init+0x3a0>)
 8005a7e:	4628      	mov	r0, r5
 8005a80:	4619      	mov	r1, r3
 8005a82:	f000 fb6b 	bl	800615c <otm8009a_write_reg>
 8005a86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4aca      	ldr	r2, [pc, #808]	@ (8005db4 <OTM8009A_Init+0x3a4>)
 8005a8c:	21c4      	movs	r1, #196	@ 0xc4
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 fb64 	bl	800615c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005a94:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005a96:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005a98:	4638      	mov	r0, r7
 8005a9a:	f7ff ffac 	bl	80059f6 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4ac5      	ldr	r2, [pc, #788]	@ (8005db8 <OTM8009A_Init+0x3a8>)
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f000 fb59 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005aaa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005aac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005aae:	4ac3      	ldr	r2, [pc, #780]	@ (8005dbc <OTM8009A_Init+0x3ac>)
 8005ab0:	21c5      	movs	r1, #197	@ 0xc5
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 fb52 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005ab8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005aba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005abc:	4ac0      	ldr	r2, [pc, #768]	@ (8005dc0 <OTM8009A_Init+0x3b0>)
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 fb4b 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005ac6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005ac8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005aca:	4abe      	ldr	r2, [pc, #760]	@ (8005dc4 <OTM8009A_Init+0x3b4>)
 8005acc:	21c5      	movs	r1, #197	@ 0xc5
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 fb44 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005ad4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005ad6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005ad8:	4abb      	ldr	r2, [pc, #748]	@ (8005dc8 <OTM8009A_Init+0x3b8>)
 8005ada:	4619      	mov	r1, r3
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 fb3d 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005ae2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005ae4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005ae6:	4ab9      	ldr	r2, [pc, #740]	@ (8005dcc <OTM8009A_Init+0x3bc>)
 8005ae8:	21c0      	movs	r1, #192	@ 0xc0
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 fb36 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005af0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005af2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005af4:	4aa9      	ldr	r2, [pc, #676]	@ (8005d9c <OTM8009A_Init+0x38c>)
 8005af6:	4619      	mov	r1, r3
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 fb2f 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005afe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005b00:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005b02:	4ab3      	ldr	r2, [pc, #716]	@ (8005dd0 <OTM8009A_Init+0x3c0>)
 8005b04:	21d9      	movs	r1, #217	@ 0xd9
 8005b06:	4628      	mov	r0, r5
 8005b08:	f000 fb28 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005b0c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005b0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005b10:	4ab0      	ldr	r2, [pc, #704]	@ (8005dd4 <OTM8009A_Init+0x3c4>)
 8005b12:	4619      	mov	r1, r3
 8005b14:	4628      	mov	r0, r5
 8005b16:	f000 fb21 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005b1a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005b1c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005b1e:	4aae      	ldr	r2, [pc, #696]	@ (8005dd8 <OTM8009A_Init+0x3c8>)
 8005b20:	21c1      	movs	r1, #193	@ 0xc1
 8005b22:	4628      	mov	r0, r5
 8005b24:	f000 fb1a 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005b28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005b2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005b2c:	4aab      	ldr	r2, [pc, #684]	@ (8005ddc <OTM8009A_Init+0x3cc>)
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4628      	mov	r0, r5
 8005b32:	f000 fb13 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005b36:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005b38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005b3a:	4aa9      	ldr	r2, [pc, #676]	@ (8005de0 <OTM8009A_Init+0x3d0>)
 8005b3c:	21c5      	movs	r1, #197	@ 0xc5
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 fb0c 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005b44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005b46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005b48:	4aa6      	ldr	r2, [pc, #664]	@ (8005de4 <OTM8009A_Init+0x3d4>)
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f000 fb05 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005b52:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005b54:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005b56:	4a9b      	ldr	r2, [pc, #620]	@ (8005dc4 <OTM8009A_Init+0x3b4>)
 8005b58:	21c5      	movs	r1, #197	@ 0xc5
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 fafe 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005b60:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005b62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005b64:	4a8d      	ldr	r2, [pc, #564]	@ (8005d9c <OTM8009A_Init+0x38c>)
 8005b66:	4619      	mov	r1, r3
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f000 faf7 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005b6e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005b70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005b72:	4a9d      	ldr	r2, [pc, #628]	@ (8005de8 <OTM8009A_Init+0x3d8>)
 8005b74:	21d8      	movs	r1, #216	@ 0xd8
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 faf0 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005b7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005b7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005b80:	4a9a      	ldr	r2, [pc, #616]	@ (8005dec <OTM8009A_Init+0x3dc>)
 8005b82:	4619      	mov	r1, r3
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 fae9 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005b8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005b8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005b8e:	4a98      	ldr	r2, [pc, #608]	@ (8005df0 <OTM8009A_Init+0x3e0>)
 8005b90:	21c5      	movs	r1, #197	@ 0xc5
 8005b92:	4628      	mov	r0, r5
 8005b94:	f000 fae2 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005b98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005b9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005b9c:	4a95      	ldr	r2, [pc, #596]	@ (8005df4 <OTM8009A_Init+0x3e4>)
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 fadb 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005ba6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005ba8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005baa:	4a93      	ldr	r2, [pc, #588]	@ (8005df8 <OTM8009A_Init+0x3e8>)
 8005bac:	21c0      	movs	r1, #192	@ 0xc0
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 fad4 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005bb4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005bb6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005bb8:	4a90      	ldr	r2, [pc, #576]	@ (8005dfc <OTM8009A_Init+0x3ec>)
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 facd 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005bc2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005bc4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005bc6:	4a8e      	ldr	r2, [pc, #568]	@ (8005e00 <OTM8009A_Init+0x3f0>)
 8005bc8:	21c5      	movs	r1, #197	@ 0xc5
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f000 fac6 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005bd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005bd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005bd4:	4a8b      	ldr	r2, [pc, #556]	@ (8005e04 <OTM8009A_Init+0x3f4>)
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 fabf 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005bde:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005be0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005be2:	4a89      	ldr	r2, [pc, #548]	@ (8005e08 <OTM8009A_Init+0x3f8>)
 8005be4:	21c4      	movs	r1, #196	@ 0xc4
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 fab8 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005bec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005bee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005bf0:	4a78      	ldr	r2, [pc, #480]	@ (8005dd4 <OTM8009A_Init+0x3c4>)
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 fab1 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005bfa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005bfc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005bfe:	4a83      	ldr	r2, [pc, #524]	@ (8005e0c <OTM8009A_Init+0x3fc>)
 8005c00:	21c1      	movs	r1, #193	@ 0xc1
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 faaa 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005c08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005c0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005c0c:	4a80      	ldr	r2, [pc, #512]	@ (8005e10 <OTM8009A_Init+0x400>)
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4628      	mov	r0, r5
 8005c12:	f000 faa3 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005c16:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005c18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8005e14 <OTM8009A_Init+0x404>)
 8005c1c:	21b3      	movs	r1, #179	@ 0xb3
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 fa9c 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005c24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005c26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005c28:	4a5e      	ldr	r2, [pc, #376]	@ (8005da4 <OTM8009A_Init+0x394>)
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f000 fa95 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005c32:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005c34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005c36:	4a78      	ldr	r2, [pc, #480]	@ (8005e18 <OTM8009A_Init+0x408>)
 8005c38:	21ce      	movs	r1, #206	@ 0xce
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 fa8e 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005c40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005c42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005c44:	4a75      	ldr	r2, [pc, #468]	@ (8005e1c <OTM8009A_Init+0x40c>)
 8005c46:	4619      	mov	r1, r3
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f000 fa87 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005c4e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005c50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005c52:	4a73      	ldr	r2, [pc, #460]	@ (8005e20 <OTM8009A_Init+0x410>)
 8005c54:	21ce      	movs	r1, #206	@ 0xce
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 fa80 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005c5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005c5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005c60:	4a70      	ldr	r2, [pc, #448]	@ (8005e24 <OTM8009A_Init+0x414>)
 8005c62:	4619      	mov	r1, r3
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 fa79 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005c6a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005c6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8005e28 <OTM8009A_Init+0x418>)
 8005c70:	21ce      	movs	r1, #206	@ 0xce
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 fa72 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005c78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005c7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005c7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005e2c <OTM8009A_Init+0x41c>)
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4628      	mov	r0, r5
 8005c82:	f000 fa6b 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005c86:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005c88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005c8a:	4a69      	ldr	r2, [pc, #420]	@ (8005e30 <OTM8009A_Init+0x420>)
 8005c8c:	21cf      	movs	r1, #207	@ 0xcf
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 fa64 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005c94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005c96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005c98:	4a66      	ldr	r2, [pc, #408]	@ (8005e34 <OTM8009A_Init+0x424>)
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f000 fa5d 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005ca2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005ca4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005ca6:	4a64      	ldr	r2, [pc, #400]	@ (8005e38 <OTM8009A_Init+0x428>)
 8005ca8:	21cf      	movs	r1, #207	@ 0xcf
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 fa56 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005cb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005cb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8005da4 <OTM8009A_Init+0x394>)
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 fa4f 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005cbe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005cc0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e3c <OTM8009A_Init+0x42c>)
 8005cc4:	21cb      	movs	r1, #203	@ 0xcb
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 fa48 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005ccc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005cce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005cd0:	4a5b      	ldr	r2, [pc, #364]	@ (8005e40 <OTM8009A_Init+0x430>)
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f000 fa41 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005cda:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005cdc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005cde:	4a59      	ldr	r2, [pc, #356]	@ (8005e44 <OTM8009A_Init+0x434>)
 8005ce0:	21cb      	movs	r1, #203	@ 0xcb
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fa3a 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005ce8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005cea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005cec:	4a4b      	ldr	r2, [pc, #300]	@ (8005e1c <OTM8009A_Init+0x40c>)
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f000 fa33 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005cf6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005cf8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005cfa:	4a53      	ldr	r2, [pc, #332]	@ (8005e48 <OTM8009A_Init+0x438>)
 8005cfc:	21cb      	movs	r1, #203	@ 0xcb
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f000 fa2c 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005d04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005d06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005d08:	4a46      	ldr	r2, [pc, #280]	@ (8005e24 <OTM8009A_Init+0x414>)
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 fa25 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005d12:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005d14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005d16:	4a4d      	ldr	r2, [pc, #308]	@ (8005e4c <OTM8009A_Init+0x43c>)
 8005d18:	21cb      	movs	r1, #203	@ 0xcb
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 fa1e 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005d20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005d22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005d24:	4a41      	ldr	r2, [pc, #260]	@ (8005e2c <OTM8009A_Init+0x41c>)
 8005d26:	4619      	mov	r1, r3
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 fa17 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005d2e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005d30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005d32:	4a47      	ldr	r2, [pc, #284]	@ (8005e50 <OTM8009A_Init+0x440>)
 8005d34:	21cb      	movs	r1, #203	@ 0xcb
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 fa10 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005d3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005d3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005d40:	4a3c      	ldr	r2, [pc, #240]	@ (8005e34 <OTM8009A_Init+0x424>)
 8005d42:	4619      	mov	r1, r3
 8005d44:	4628      	mov	r0, r5
 8005d46:	f000 fa09 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005d4a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005d4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005d4e:	4a41      	ldr	r2, [pc, #260]	@ (8005e54 <OTM8009A_Init+0x444>)
 8005d50:	21cb      	movs	r1, #203	@ 0xcb
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 fa02 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005d58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005d5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005d5c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e58 <OTM8009A_Init+0x448>)
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4628      	mov	r0, r5
 8005d62:	f000 f9fb 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005d66:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005d68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005d6a:	4a3c      	ldr	r2, [pc, #240]	@ (8005e5c <OTM8009A_Init+0x44c>)
 8005d6c:	21cb      	movs	r1, #203	@ 0xcb
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 f9f4 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005d74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005d76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005d78:	4a39      	ldr	r2, [pc, #228]	@ (8005e60 <OTM8009A_Init+0x450>)
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 f9ed 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005d82:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005d84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005d86:	4a37      	ldr	r2, [pc, #220]	@ (8005e64 <OTM8009A_Init+0x454>)
 8005d88:	21cb      	movs	r1, #203	@ 0xcb
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 f9e6 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005d92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d94:	4a03      	ldr	r2, [pc, #12]	@ (8005da4 <OTM8009A_Init+0x394>)
 8005d96:	4619      	mov	r1, r3
 8005d98:	4628      	mov	r0, r5
 8005d9a:	e065      	b.n	8005e68 <OTM8009A_Init+0x458>
 8005d9c:	080270b1 	.word	0x080270b1
 8005da0:	080270ad 	.word	0x080270ad
 8005da4:	080270b2 	.word	0x080270b2
 8005da8:	080270ab 	.word	0x080270ab
 8005dac:	080270b3 	.word	0x080270b3
 8005db0:	080270b4 	.word	0x080270b4
 8005db4:	080270b5 	.word	0x080270b5
 8005db8:	080270b6 	.word	0x080270b6
 8005dbc:	080270b7 	.word	0x080270b7
 8005dc0:	080270b8 	.word	0x080270b8
 8005dc4:	080270b9 	.word	0x080270b9
 8005dc8:	080270ba 	.word	0x080270ba
 8005dcc:	080270bb 	.word	0x080270bb
 8005dd0:	080270bc 	.word	0x080270bc
 8005dd4:	080270bf 	.word	0x080270bf
 8005dd8:	080270c0 	.word	0x080270c0
 8005ddc:	080270c1 	.word	0x080270c1
 8005de0:	080270c2 	.word	0x080270c2
 8005de4:	080270c3 	.word	0x080270c3
 8005de8:	080270a9 	.word	0x080270a9
 8005dec:	080270c4 	.word	0x080270c4
 8005df0:	080270c5 	.word	0x080270c5
 8005df4:	080270c6 	.word	0x080270c6
 8005df8:	080270c7 	.word	0x080270c7
 8005dfc:	080270c8 	.word	0x080270c8
 8005e00:	080270c9 	.word	0x080270c9
 8005e04:	080270bd 	.word	0x080270bd
 8005e08:	080270ca 	.word	0x080270ca
 8005e0c:	080270cb 	.word	0x080270cb
 8005e10:	080270cc 	.word	0x080270cc
 8005e14:	080270a7 	.word	0x080270a7
 8005e18:	080270a1 	.word	0x080270a1
 8005e1c:	080270cd 	.word	0x080270cd
 8005e20:	08027093 	.word	0x08027093
 8005e24:	080270ce 	.word	0x080270ce
 8005e28:	08027085 	.word	0x08027085
 8005e2c:	080270cf 	.word	0x080270cf
 8005e30:	0802707b 	.word	0x0802707b
 8005e34:	080270d0 	.word	0x080270d0
 8005e38:	080270dd 	.word	0x080270dd
 8005e3c:	08027071 	.word	0x08027071
 8005e40:	080270d1 	.word	0x080270d1
 8005e44:	08027062 	.word	0x08027062
 8005e48:	08027053 	.word	0x08027053
 8005e4c:	08027049 	.word	0x08027049
 8005e50:	0802703a 	.word	0x0802703a
 8005e54:	0802702b 	.word	0x0802702b
 8005e58:	080270d2 	.word	0x080270d2
 8005e5c:	08027021 	.word	0x08027021
 8005e60:	080270d3 	.word	0x080270d3
 8005e64:	08027017 	.word	0x08027017
 8005e68:	f000 f978 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005e6c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005e6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005e70:	4a8e      	ldr	r2, [pc, #568]	@ (80060ac <OTM8009A_Init+0x69c>)
 8005e72:	21cc      	movs	r1, #204	@ 0xcc
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 f971 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005e7a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005e7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005e7e:	4a8c      	ldr	r2, [pc, #560]	@ (80060b0 <OTM8009A_Init+0x6a0>)
 8005e80:	4619      	mov	r1, r3
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 f96a 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005e88:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005e8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005e8c:	4a89      	ldr	r2, [pc, #548]	@ (80060b4 <OTM8009A_Init+0x6a4>)
 8005e8e:	21cc      	movs	r1, #204	@ 0xcc
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 f963 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005e96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005e98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005e9a:	4a87      	ldr	r2, [pc, #540]	@ (80060b8 <OTM8009A_Init+0x6a8>)
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 f95c 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005ea4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005ea6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005ea8:	4a84      	ldr	r2, [pc, #528]	@ (80060bc <OTM8009A_Init+0x6ac>)
 8005eaa:	21cc      	movs	r1, #204	@ 0xcc
 8005eac:	4628      	mov	r0, r5
 8005eae:	f000 f955 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005eb2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005eb4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005eb6:	4a82      	ldr	r2, [pc, #520]	@ (80060c0 <OTM8009A_Init+0x6b0>)
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 f94e 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005ec0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005ec2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005ec4:	4a7f      	ldr	r2, [pc, #508]	@ (80060c4 <OTM8009A_Init+0x6b4>)
 8005ec6:	21cc      	movs	r1, #204	@ 0xcc
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 f947 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005ece:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005ed0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005ed2:	4a7d      	ldr	r2, [pc, #500]	@ (80060c8 <OTM8009A_Init+0x6b8>)
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f940 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005edc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005ede:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005ee0:	4a7a      	ldr	r2, [pc, #488]	@ (80060cc <OTM8009A_Init+0x6bc>)
 8005ee2:	21cc      	movs	r1, #204	@ 0xcc
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	f000 f939 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005eea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005eec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005eee:	4a78      	ldr	r2, [pc, #480]	@ (80060d0 <OTM8009A_Init+0x6c0>)
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 f932 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005ef8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005efa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005efc:	4a75      	ldr	r2, [pc, #468]	@ (80060d4 <OTM8009A_Init+0x6c4>)
 8005efe:	21cc      	movs	r1, #204	@ 0xcc
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 f92b 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005f06:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005f08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005f0a:	4a73      	ldr	r2, [pc, #460]	@ (80060d8 <OTM8009A_Init+0x6c8>)
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f924 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005f14:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005f16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005f18:	4a70      	ldr	r2, [pc, #448]	@ (80060dc <OTM8009A_Init+0x6cc>)
 8005f1a:	21c5      	movs	r1, #197	@ 0xc5
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 f91d 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005f22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005f24:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005f26:	4a6e      	ldr	r2, [pc, #440]	@ (80060e0 <OTM8009A_Init+0x6d0>)
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 f916 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005f30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005f32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005f34:	4a6b      	ldr	r2, [pc, #428]	@ (80060e4 <OTM8009A_Init+0x6d4>)
 8005f36:	21f5      	movs	r1, #245	@ 0xf5
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f000 f90f 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005f3e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005f40:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005f42:	4a69      	ldr	r2, [pc, #420]	@ (80060e8 <OTM8009A_Init+0x6d8>)
 8005f44:	4619      	mov	r1, r3
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 f908 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005f4c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005f4e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005f50:	4a66      	ldr	r2, [pc, #408]	@ (80060ec <OTM8009A_Init+0x6dc>)
 8005f52:	21c6      	movs	r1, #198	@ 0xc6
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 f901 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f5a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005f5c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f5e:	4a64      	ldr	r2, [pc, #400]	@ (80060f0 <OTM8009A_Init+0x6e0>)
 8005f60:	4619      	mov	r1, r3
 8005f62:	4628      	mov	r0, r5
 8005f64:	f000 f8fa 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005f68:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f6a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005f6c:	4a61      	ldr	r2, [pc, #388]	@ (80060f4 <OTM8009A_Init+0x6e4>)
 8005f6e:	21ff      	movs	r1, #255	@ 0xff
 8005f70:	4628      	mov	r0, r5
 8005f72:	f000 f8f3 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f76:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005f78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f7a:	4a5d      	ldr	r2, [pc, #372]	@ (80060f0 <OTM8009A_Init+0x6e0>)
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 f8ec 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f88:	4a59      	ldr	r2, [pc, #356]	@ (80060f0 <OTM8009A_Init+0x6e0>)
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 f8e5 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005f92:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f94:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005f96:	4a58      	ldr	r2, [pc, #352]	@ (80060f8 <OTM8009A_Init+0x6e8>)
 8005f98:	21e1      	movs	r1, #225	@ 0xe1
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f000 f8de 	bl	800615c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005fa0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005fa2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005fa4:	4a52      	ldr	r2, [pc, #328]	@ (80060f0 <OTM8009A_Init+0x6e0>)
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 f8d7 	bl	800615c <otm8009a_write_reg>
 8005fae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	4a52      	ldr	r2, [pc, #328]	@ (80060fc <OTM8009A_Init+0x6ec>)
 8005fb4:	21e2      	movs	r1, #226	@ 0xe2
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 f8d0 	bl	800615c <otm8009a_write_reg>
 8005fbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8006100 <OTM8009A_Init+0x6f0>)
 8005fc2:	2111      	movs	r1, #17
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 f8c9 	bl	800615c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005fca:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005fcc:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005fce:	4638      	mov	r0, r7
 8005fd0:	f7ff fd11 	bl	80059f6 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8005fd4:	4f4b      	ldr	r7, [pc, #300]	@ (8006104 <OTM8009A_Init+0x6f4>)
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	d061      	beq.n	800609e <OTM8009A_Init+0x68e>
 8005fda:	2e02      	cmp	r6, #2
 8005fdc:	d107      	bne.n	8005fee <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	4a49      	ldr	r2, [pc, #292]	@ (8006108 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005fe2:	213a      	movs	r1, #58	@ 0x3a
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	f000 f8b9 	bl	800615c <otm8009a_write_reg>
 8005fea:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005fec:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005fee:	f1b8 0f01 	cmp.w	r8, #1
 8005ff2:	d157      	bne.n	80060a4 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005ff4:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005ff6:	f10d 0207 	add.w	r2, sp, #7
 8005ffa:	2136      	movs	r1, #54	@ 0x36
 8005ffc:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005ffe:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006002:	2300      	movs	r3, #0
 8006004:	f000 f8aa 	bl	800615c <otm8009a_write_reg>
 8006008:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800600a:	2304      	movs	r3, #4
 800600c:	4a3f      	ldr	r2, [pc, #252]	@ (800610c <OTM8009A_Init+0x6fc>)
 800600e:	212a      	movs	r1, #42	@ 0x2a
 8006010:	4628      	mov	r0, r5
 8006012:	f000 f8a3 	bl	800615c <otm8009a_write_reg>
 8006016:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006018:	2304      	movs	r3, #4
 800601a:	4a3d      	ldr	r2, [pc, #244]	@ (8006110 <OTM8009A_Init+0x700>)
 800601c:	212b      	movs	r1, #43	@ 0x2b
 800601e:	4628      	mov	r0, r5
 8006020:	f000 f89c 	bl	800615c <otm8009a_write_reg>
 8006024:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006026:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800602a:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800602c:	2300      	movs	r3, #0
 800602e:	4a39      	ldr	r2, [pc, #228]	@ (8006114 <OTM8009A_Init+0x704>)
 8006030:	2151      	movs	r1, #81	@ 0x51
 8006032:	4628      	mov	r0, r5
 8006034:	f000 f892 	bl	800615c <otm8009a_write_reg>
 8006038:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800603a:	4633      	mov	r3, r6
 800603c:	4a36      	ldr	r2, [pc, #216]	@ (8006118 <OTM8009A_Init+0x708>)
 800603e:	2153      	movs	r1, #83	@ 0x53
 8006040:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006042:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006044:	f000 f88a 	bl	800615c <otm8009a_write_reg>
 8006048:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800604a:	4633      	mov	r3, r6
 800604c:	4a33      	ldr	r2, [pc, #204]	@ (800611c <OTM8009A_Init+0x70c>)
 800604e:	2155      	movs	r1, #85	@ 0x55
 8006050:	4628      	mov	r0, r5
 8006052:	f000 f883 	bl	800615c <otm8009a_write_reg>
 8006056:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006058:	4633      	mov	r3, r6
 800605a:	4a31      	ldr	r2, [pc, #196]	@ (8006120 <OTM8009A_Init+0x710>)
 800605c:	215e      	movs	r1, #94	@ 0x5e
 800605e:	4628      	mov	r0, r5
 8006060:	f000 f87c 	bl	800615c <otm8009a_write_reg>
 8006064:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006066:	4633      	mov	r3, r6
 8006068:	4a2e      	ldr	r2, [pc, #184]	@ (8006124 <OTM8009A_Init+0x714>)
 800606a:	2129      	movs	r1, #41	@ 0x29
 800606c:	4628      	mov	r0, r5
 800606e:	f000 f875 	bl	800615c <otm8009a_write_reg>
 8006072:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006074:	4633      	mov	r3, r6
 8006076:	4631      	mov	r1, r6
 8006078:	4a1d      	ldr	r2, [pc, #116]	@ (80060f0 <OTM8009A_Init+0x6e0>)
 800607a:	4628      	mov	r0, r5
 800607c:	f000 f86e 	bl	800615c <otm8009a_write_reg>
 8006080:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8006082:	4633      	mov	r3, r6
 8006084:	4a28      	ldr	r2, [pc, #160]	@ (8006128 <OTM8009A_Init+0x718>)
 8006086:	212c      	movs	r1, #44	@ 0x2c
 8006088:	4628      	mov	r0, r5
 800608a:	f000 f867 	bl	800615c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800608e:	42c4      	cmn	r4, r0
}
 8006090:	bf14      	ite	ne
 8006092:	f04f 30ff 	movne.w	r0, #4294967295
 8006096:	4630      	moveq	r0, r6
 8006098:	b002      	add	sp, #8
 800609a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800609e:	4633      	mov	r3, r6
 80060a0:	4a22      	ldr	r2, [pc, #136]	@ (800612c <OTM8009A_Init+0x71c>)
 80060a2:	e79e      	b.n	8005fe2 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80060a4:	2300      	movs	r3, #0
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	e7bf      	b.n	800602a <OTM8009A_Init+0x61a>
 80060aa:	bf00      	nop
 80060ac:	0802700d 	.word	0x0802700d
 80060b0:	080270d1 	.word	0x080270d1
 80060b4:	08026ffe 	.word	0x08026ffe
 80060b8:	080270cd 	.word	0x080270cd
 80060bc:	08026fef 	.word	0x08026fef
 80060c0:	080270ce 	.word	0x080270ce
 80060c4:	08026fe5 	.word	0x08026fe5
 80060c8:	080270cf 	.word	0x080270cf
 80060cc:	08026fd6 	.word	0x08026fd6
 80060d0:	080270d0 	.word	0x080270d0
 80060d4:	08026fc7 	.word	0x08026fc7
 80060d8:	080270bd 	.word	0x080270bd
 80060dc:	080270de 	.word	0x080270de
 80060e0:	080270df 	.word	0x080270df
 80060e4:	080270e0 	.word	0x080270e0
 80060e8:	080270e1 	.word	0x080270e1
 80060ec:	080270e2 	.word	0x080270e2
 80060f0:	080270b1 	.word	0x080270b1
 80060f4:	08026fc4 	.word	0x08026fc4
 80060f8:	08026fb4 	.word	0x08026fb4
 80060fc:	08026fa4 	.word	0x08026fa4
 8006100:	080270d4 	.word	0x080270d4
 8006104:	2400b300 	.word	0x2400b300
 8006108:	080270d5 	.word	0x080270d5
 800610c:	080270e7 	.word	0x080270e7
 8006110:	080270e3 	.word	0x080270e3
 8006114:	080270d7 	.word	0x080270d7
 8006118:	080270d8 	.word	0x080270d8
 800611c:	080270d9 	.word	0x080270d9
 8006120:	080270da 	.word	0x080270da
 8006124:	080270db 	.word	0x080270db
 8006128:	080270dc 	.word	0x080270dc
 800612c:	080270d6 	.word	0x080270d6

08006130 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8006130:	b160      	cbz	r0, 800614c <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006132:	684b      	ldr	r3, [r1, #4]
 8006134:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006136:	688b      	ldr	r3, [r1, #8]
 8006138:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800613a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800613c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800613e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8006140:	4b04      	ldr	r3, [pc, #16]	@ (8006154 <OTM8009A_RegisterBusIO+0x24>)
 8006142:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8006144:	4b04      	ldr	r3, [pc, #16]	@ (8006158 <OTM8009A_RegisterBusIO+0x28>)
 8006146:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8006148:	2000      	movs	r0, #0
 800614a:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	080059db 	.word	0x080059db
 8006158:	080059e9 	.word	0x080059e9

0800615c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800615c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800615e:	6804      	ldr	r4, [r0, #0]
 8006160:	6880      	ldr	r0, [r0, #8]
 8006162:	46a4      	mov	ip, r4
}
 8006164:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006168:	4760      	bx	ip
	...

0800616c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800616c:	4a10      	ldr	r2, [pc, #64]	@ (80061b0 <BSP_I2C4_DeInit+0x44>)
{
 800616e:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8006170:	6813      	ldr	r3, [r2, #0]
 8006172:	3b01      	subs	r3, #1
 8006174:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8006176:	b10b      	cbz	r3, 800617c <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8006178:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800617a:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800617c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006180:	480c      	ldr	r0, [pc, #48]	@ (80061b4 <BSP_I2C4_DeInit+0x48>)
 8006182:	f001 fe3f 	bl	8007e04 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8006186:	480b      	ldr	r0, [pc, #44]	@ (80061b4 <BSP_I2C4_DeInit+0x48>)
 8006188:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800618c:	f001 fe3a 	bl	8007e04 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8006190:	4a09      	ldr	r2, [pc, #36]	@ (80061b8 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006192:	480a      	ldr	r0, [pc, #40]	@ (80061bc <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8006194:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8006198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800619c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80061a0:	f002 f880 	bl	80082a4 <HAL_I2C_DeInit>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d0e7      	beq.n	8006178 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80061a8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80061ac:	e7e5      	b.n	800617a <BSP_I2C4_DeInit+0xe>
 80061ae:	bf00      	nop
 80061b0:	2400bd64 	.word	0x2400bd64
 80061b4:	58020c00 	.word	0x58020c00
 80061b8:	58024400 	.word	0x58024400
 80061bc:	2400b30c 	.word	0x2400b30c

080061c0 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80061c0:	2300      	movs	r3, #0
 80061c2:	2201      	movs	r2, #1
{
 80061c4:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80061c6:	6041      	str	r1, [r0, #4]
{
 80061c8:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80061ca:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80061cc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80061d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80061d4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80061d8:	f002 f80e 	bl	80081f8 <HAL_I2C_Init>
 80061dc:	4601      	mov	r1, r0
 80061de:	b108      	cbz	r0, 80061e4 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80061e0:	2001      	movs	r0, #1
}
 80061e2:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80061e4:	4620      	mov	r0, r4
 80061e6:	f002 fa34 	bl	8008652 <HAL_I2CEx_ConfigAnalogFilter>
 80061ea:	4601      	mov	r1, r0
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d1f7      	bne.n	80061e0 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80061f0:	4620      	mov	r0, r4
 80061f2:	f002 fa54 	bl	800869e <HAL_I2CEx_ConfigDigitalFilter>
 80061f6:	3800      	subs	r0, #0
 80061f8:	bf18      	it	ne
 80061fa:	2001      	movne	r0, #1
 80061fc:	e7f1      	b.n	80061e2 <MX_I2C4_Init+0x22>
	...

08006200 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8006200:	4ba2      	ldr	r3, [pc, #648]	@ (800648c <BSP_I2C4_Init+0x28c>)
 8006202:	48a3      	ldr	r0, [pc, #652]	@ (8006490 <BSP_I2C4_Init+0x290>)
{
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	b093      	sub	sp, #76	@ 0x4c
  hbus_i2c4.Instance = BUS_I2C4;
 800620a:	6003      	str	r3, [r0, #0]
  if (I2c4InitCounter == 0U)
 800620c:	4ba1      	ldr	r3, [pc, #644]	@ (8006494 <BSP_I2C4_Init+0x294>)
 800620e:	681c      	ldr	r4, [r3, #0]
 8006210:	b11c      	cbz	r4, 800621a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006212:	2000      	movs	r0, #0
}
 8006214:	b013      	add	sp, #76	@ 0x4c
 8006216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800621a:	2201      	movs	r2, #1
 800621c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800621e:	f002 fa13 	bl	8008648 <HAL_I2C_GetState>
 8006222:	2800      	cmp	r0, #0
 8006224:	d1f5      	bne.n	8006212 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006226:	4d9c      	ldr	r5, [pc, #624]	@ (8006498 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006228:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800622c:	2702      	movs	r7, #2
 800622e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006230:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006234:	a90d      	add	r1, sp, #52	@ 0x34
 8006236:	4899      	ldr	r0, [pc, #612]	@ (800649c <BSP_I2C4_Init+0x29c>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006238:	f043 0308 	orr.w	r3, r3, #8
 800623c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006240:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	930a      	str	r3, [sp, #40]	@ 0x28
 800624a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800624c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006250:	f043 0308 	orr.w	r3, r3, #8
 8006254:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006258:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800625c:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800626a:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800626e:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006272:	f001 fcdf 	bl	8007c34 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8006276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800627a:	a90d      	add	r1, sp, #52	@ 0x34
 800627c:	4887      	ldr	r0, [pc, #540]	@ (800649c <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800627e:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006280:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006284:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006288:	f001 fcd4 	bl	8007c34 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800628c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006294:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8006298:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800629c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80062a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80062a4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80062a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ac:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80062b0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80062b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b8:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80062bc:	f004 fc9a 	bl	800abf4 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d06d      	beq.n	80063a0 <BSP_I2C4_Init+0x1a0>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80062c4:	4b76      	ldr	r3, [pc, #472]	@ (80064a0 <BSP_I2C4_Init+0x2a0>)
  if (tsdadel_max <= 0)
 80062c6:	4622      	mov	r2, r4
 80062c8:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 80062ca:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80062ce:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80062d2:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 80064a8 <BSP_I2C4_Init+0x2a8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80062d6:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80062da:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80062de:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 80062e2:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80062e4:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80062e8:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 80062ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 80062f0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 80062f4:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80062f6:	4b6b      	ldr	r3, [pc, #428]	@ (80064a4 <BSP_I2C4_Init+0x2a4>)
 80062f8:	681b      	ldr	r3, [r3, #0]
{
 80062fa:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80062fc:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8006300:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8006304:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006308:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800630c:	d35b      	bcc.n	80063c6 <BSP_I2C4_Init+0x1c6>
 800630e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006310:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006312:	9d00      	ldr	r5, [sp, #0]
 8006314:	42bd      	cmp	r5, r7
 8006316:	d850      	bhi.n	80063ba <BSP_I2C4_Init+0x1ba>
 8006318:	42be      	cmp	r6, r7
 800631a:	d34e      	bcc.n	80063ba <BSP_I2C4_Init+0x1ba>
            if(presc != prev_presc)
 800631c:	4591      	cmp	r9, r2
 800631e:	d04c      	beq.n	80063ba <BSP_I2C4_Init+0x1ba>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006320:	2514      	movs	r5, #20
 8006322:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8006326:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8006328:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800632a:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800632e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006330:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8006334:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006338:	d93c      	bls.n	80063b4 <BSP_I2C4_Init+0x1b4>
 800633a:	4a5a      	ldr	r2, [pc, #360]	@ (80064a4 <BSP_I2C4_Init+0x2a4>)
 800633c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800633e:	4b59      	ldr	r3, [pc, #356]	@ (80064a4 <BSP_I2C4_Init+0x2a4>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006340:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8006344:	4958      	ldr	r1, [pc, #352]	@ (80064a8 <BSP_I2C4_Init+0x2a8>)
 8006346:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800634c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8006350:	9304      	str	r3, [sp, #16]
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	f10b 0332 	add.w	r3, fp, #50	@ 0x32
 800635c:	9309      	str	r3, [sp, #36]	@ 0x24
 800635e:	f5cb 6380 	rsb	r3, fp, #1024	@ 0x400
 8006362:	3301      	adds	r3, #1
 8006364:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006366:	9b06      	ldr	r3, [sp, #24]
 8006368:	429f      	cmp	r7, r3
 800636a:	d138      	bne.n	80063de <BSP_I2C4_Init+0x1de>
        if (idx < I2C_VALID_TIMING_NBR)
 800636c:	9b00      	ldr	r3, [sp, #0]
 800636e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006370:	d816      	bhi.n	80063a0 <BSP_I2C4_Init+0x1a0>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006372:	2114      	movs	r1, #20
 8006374:	9a00      	ldr	r2, [sp, #0]
 8006376:	4b4c      	ldr	r3, [pc, #304]	@ (80064a8 <BSP_I2C4_Init+0x2a8>)
 8006378:	434a      	muls	r2, r1
 800637a:	1899      	adds	r1, r3, r2
 800637c:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800637e:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006380:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006384:	684b      	ldr	r3, [r1, #4]
 8006386:	051b      	lsls	r3, r3, #20
 8006388:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800638c:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800638e:	688b      	ldr	r3, [r1, #8]
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006396:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8006398:	68cb      	ldr	r3, [r1, #12]
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800639e:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80063a0:	4621      	mov	r1, r4
 80063a2:	483b      	ldr	r0, [pc, #236]	@ (8006490 <BSP_I2C4_Init+0x290>)
 80063a4:	f7ff ff0c 	bl	80061c0 <MX_I2C4_Init>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	f43f af32 	beq.w	8006212 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 80063ae:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80063b2:	e72f      	b.n	8006214 <BSP_I2C4_Init+0x14>
              prev_presc = presc;
 80063b4:	4691      	mov	r9, r2
 80063b6:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80063ba:	f10e 0e01 	add.w	lr, lr, #1
 80063be:	440f      	add	r7, r1
 80063c0:	f1be 0f10 	cmp.w	lr, #16
 80063c4:	d1a5      	bne.n	8006312 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80063c6:	f1bc 0f10 	cmp.w	ip, #16
 80063ca:	4488      	add	r8, r1
 80063cc:	d198      	bne.n	8006300 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80063ce:	3201      	adds	r2, #1
 80063d0:	4401      	add	r1, r0
 80063d2:	2a10      	cmp	r2, #16
 80063d4:	d191      	bne.n	80062fa <BSP_I2C4_Init+0xfa>
 80063d6:	f1ba 0f00 	cmp.w	sl, #0
 80063da:	d1ae      	bne.n	800633a <BSP_I2C4_Init+0x13a>
 80063dc:	e7af      	b.n	800633e <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80063de:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80063e0:	f04f 0c00 	mov.w	ip, #0
 80063e4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80063e6:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80063ea:	441d      	add	r5, r3
 80063ec:	eb03 060b 	add.w	r6, r3, fp
 80063f0:	9503      	str	r5, [sp, #12]
 80063f2:	f6a6 0634 	subw	r6, r6, #2100	@ 0x834
 80063f6:	9d02      	ldr	r5, [sp, #8]
 80063f8:	9608      	str	r6, [sp, #32]
 80063fa:	1aed      	subs	r5, r5, r3
 80063fc:	006d      	lsls	r5, r5, #1
 80063fe:	9501      	str	r5, [sp, #4]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006400:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006402:	f240 5214 	movw	r2, #1300	@ 0x514
 8006406:	f8cd c014 	str.w	ip, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800640a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800640e:	4295      	cmp	r5, r2
 8006410:	d930      	bls.n	8006474 <BSP_I2C4_Init+0x274>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006412:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006416:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800641a:	d22b      	bcs.n	8006474 <BSP_I2C4_Init+0x274>
 800641c:	9e08      	ldr	r6, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800641e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006422:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006426:	442e      	add	r6, r5
 8006428:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800642c:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8006430:	f240 4212 	movw	r2, #1042	@ 0x412
 8006434:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8006438:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800643c:	4592      	cmp	sl, r2
 800643e:	d812      	bhi.n	8006466 <BSP_I2C4_Init+0x266>
 8006440:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8006444:	d30f      	bcc.n	8006466 <BSP_I2C4_Init+0x266>
 8006446:	4540      	cmp	r0, r8
 8006448:	d20d      	bcs.n	8006466 <BSP_I2C4_Init+0x266>
              error = -error;
 800644a:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800644e:	bf28      	it	cs
 8006450:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8006452:	9a04      	ldr	r2, [sp, #16]
 8006454:	4592      	cmp	sl, r2
 8006456:	d206      	bcs.n	8006466 <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8006458:	9a05      	ldr	r2, [sp, #20]
              prev_error = (uint32_t)error;
 800645a:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
 800645e:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8006460:	9a07      	ldr	r2, [sp, #28]
              ret = count;
 8006462:	9700      	str	r7, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
 8006464:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006466:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 800646a:	4498      	add	r8, r3
 800646c:	441e      	add	r6, r3
 800646e:	eba9 0903 	sub.w	r9, r9, r3
 8006472:	d1db      	bne.n	800642c <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006474:	9a01      	ldr	r2, [sp, #4]
 8006476:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800647a:	441d      	add	r5, r3
 800647c:	eba2 0203 	sub.w	r2, r2, r3
 8006480:	9201      	str	r2, [sp, #4]
 8006482:	d1be      	bne.n	8006402 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006484:	3701      	adds	r7, #1
 8006486:	3114      	adds	r1, #20
 8006488:	e76d      	b.n	8006366 <BSP_I2C4_Init+0x166>
 800648a:	bf00      	nop
 800648c:	58001c00 	.word	0x58001c00
 8006490:	2400b30c 	.word	0x2400b30c
 8006494:	2400bd64 	.word	0x2400bd64
 8006498:	58024400 	.word	0x58024400
 800649c:	58020c00 	.word	0x58020c00
 80064a0:	3b9aca00 	.word	0x3b9aca00
 80064a4:	2400b360 	.word	0x2400b360
 80064a8:	2400b364 	.word	0x2400b364

080064ac <BSP_I2C4_WriteReg>:
{
 80064ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80064ae:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80064b2:	9200      	str	r2, [sp, #0]
 80064b4:	460a      	mov	r2, r1
 80064b6:	4601      	mov	r1, r0
 80064b8:	4808      	ldr	r0, [pc, #32]	@ (80064dc <BSP_I2C4_WriteReg+0x30>)
 80064ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064be:	2301      	movs	r3, #1
 80064c0:	f001 ff0a 	bl	80082d8 <HAL_I2C_Mem_Write>
 80064c4:	b140      	cbz	r0, 80064d8 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80064c6:	4805      	ldr	r0, [pc, #20]	@ (80064dc <BSP_I2C4_WriteReg+0x30>)
 80064c8:	f002 f8c1 	bl	800864e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80064cc:	2804      	cmp	r0, #4
 80064ce:	bf14      	ite	ne
 80064d0:	f06f 0003 	mvnne.w	r0, #3
 80064d4:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80064d8:	b004      	add	sp, #16
 80064da:	bd10      	pop	{r4, pc}
 80064dc:	2400b30c 	.word	0x2400b30c

080064e0 <BSP_I2C4_ReadReg>:
{
 80064e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80064e2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80064e6:	9200      	str	r2, [sp, #0]
 80064e8:	460a      	mov	r2, r1
 80064ea:	4601      	mov	r1, r0
 80064ec:	4808      	ldr	r0, [pc, #32]	@ (8006510 <BSP_I2C4_ReadReg+0x30>)
 80064ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064f2:	2301      	movs	r3, #1
 80064f4:	f001 ffca 	bl	800848c <HAL_I2C_Mem_Read>
 80064f8:	b140      	cbz	r0, 800650c <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80064fa:	4805      	ldr	r0, [pc, #20]	@ (8006510 <BSP_I2C4_ReadReg+0x30>)
 80064fc:	f002 f8a7 	bl	800864e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006500:	2804      	cmp	r0, #4
 8006502:	bf14      	ite	ne
 8006504:	f06f 0003 	mvnne.w	r0, #3
 8006508:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800650c:	b004      	add	sp, #16
 800650e:	bd10      	pop	{r4, pc}
 8006510:	2400b30c 	.word	0x2400b30c

08006514 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8006514:	f000 bd08 	b.w	8006f28 <HAL_GetTick>

08006518 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8006518:	4a09      	ldr	r2, [pc, #36]	@ (8006540 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800651a:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 800651e:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8006520:	684a      	ldr	r2, [r1, #4]
 8006522:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8006524:	2201      	movs	r2, #1
 8006526:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8006528:	688a      	ldr	r2, [r1, #8]
 800652a:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800652c:	680a      	ldr	r2, [r1, #0]
 800652e:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006530:	2200      	movs	r2, #0
 8006532:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8006536:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8006538:	68ca      	ldr	r2, [r1, #12]
 800653a:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800653c:	f003 bc8a 	b.w	8009e54 <HAL_QSPI_Init>
 8006540:	52005000 	.word	0x52005000

08006544 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8006544:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006546:	b988      	cbnz	r0, 800656c <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006548:	4c0a      	ldr	r4, [pc, #40]	@ (8006574 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800654a:	480b      	ldr	r0, [pc, #44]	@ (8006578 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800654c:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800654e:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006550:	b94b      	cbnz	r3, 8006566 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006552:	f7ff f9ba 	bl	80058ca <MT25TL01G_EnableMemoryMappedModeSTR>
 8006556:	b110      	cbz	r0, 800655e <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006558:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 800655c:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800655e:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8006560:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006562:	7023      	strb	r3, [r4, #0]
 8006564:	e7fa      	b.n	800655c <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006566:	f7ff f966 	bl	8005836 <MT25TL01G_EnableMemoryMappedModeDTR>
 800656a:	e7f4      	b.n	8006556 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 800656c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006570:	e7f4      	b.n	800655c <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8006572:	bf00      	nop
 8006574:	2400bd68 	.word	0x2400bd68
 8006578:	240099c8 	.word	0x240099c8

0800657c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	460c      	mov	r4, r1
 8006580:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006582:	bb30      	cbnz	r0, 80065d2 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8006584:	4d17      	ldr	r5, [pc, #92]	@ (80065e4 <BSP_QSPI_ConfigFlash+0x68>)
 8006586:	782b      	ldrb	r3, [r5, #0]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d025      	beq.n	80065d8 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800658c:	fab2 f382 	clz	r3, r2
 8006590:	4e15      	ldr	r6, [pc, #84]	@ (80065e8 <BSP_QSPI_ConfigFlash+0x6c>)
 8006592:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006594:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800659a:	f003 fc5b 	bl	8009e54 <HAL_QSPI_Init>
 800659e:	b9f0      	cbnz	r0, 80065de <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80065a0:	786b      	ldrb	r3, [r5, #1]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d10f      	bne.n	80065c6 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80065a6:	2c03      	cmp	r4, #3
 80065a8:	d105      	bne.n	80065b6 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80065aa:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80065ac:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80065ae:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80065b0:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80065b2:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 80065b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80065b6:	4630      	mov	r0, r6
 80065b8:	f7ff f921 	bl	80057fe <MT25TL01G_ExitQPIMode>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d0f4      	beq.n	80065aa <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80065c0:	f06f 0004 	mvn.w	r0, #4
 80065c4:	e7f6      	b.n	80065b4 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 80065c6:	2c03      	cmp	r4, #3
 80065c8:	d1ef      	bne.n	80065aa <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff f8fb 	bl	80057c6 <MT25TL01G_EnterQPIMode>
 80065d0:	e7f4      	b.n	80065bc <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 80065d2:	f06f 0001 	mvn.w	r0, #1
 80065d6:	e7ed      	b.n	80065b4 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 80065d8:	f06f 0019 	mvn.w	r0, #25
 80065dc:	e7ea      	b.n	80065b4 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80065de:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80065e2:	e7e7      	b.n	80065b4 <BSP_QSPI_ConfigFlash+0x38>
 80065e4:	2400bd68 	.word	0x2400bd68
 80065e8:	240099c8 	.word	0x240099c8

080065ec <BSP_QSPI_Init>:
{
 80065ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	460c      	mov	r4, r1
 80065f2:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80065f4:	2800      	cmp	r0, #0
 80065f6:	f040 81ac 	bne.w	8006952 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80065fa:	4d03      	ldr	r5, [pc, #12]	@ (8006608 <BSP_QSPI_Init+0x1c>)
 80065fc:	782f      	ldrb	r7, [r5, #0]
 80065fe:	b12f      	cbz	r7, 800660c <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8006600:	2000      	movs	r0, #0
}
 8006602:	b024      	add	sp, #144	@ 0x90
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006608:	2400bd68 	.word	0x2400bd68
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800660c:	4bc3      	ldr	r3, [pc, #780]	@ (800691c <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800660e:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006612:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006614:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8006616:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800661a:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800661e:	48c0      	ldr	r0, [pc, #768]	@ (8006920 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006620:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8006624:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006628:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800662c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006630:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006634:	9201      	str	r2, [sp, #4]
 8006636:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8006638:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800663a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800663e:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8006640:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006642:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006646:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8006648:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800664c:	f042 0202 	orr.w	r2, r2, #2
 8006650:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006654:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006658:	f002 0202 	and.w	r2, r2, #2
 800665c:	9202      	str	r2, [sp, #8]
 800665e:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8006660:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006668:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800666c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006670:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006674:	9203      	str	r2, [sp, #12]
 8006676:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8006678:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800667c:	f042 0208 	orr.w	r2, r2, #8
 8006680:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006684:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006688:	f002 0208 	and.w	r2, r2, #8
 800668c:	9204      	str	r2, [sp, #16]
 800668e:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8006690:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006694:	f042 0220 	orr.w	r2, r2, #32
 8006698:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800669c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066a0:	f002 0220 	and.w	r2, r2, #32
 80066a4:	9205      	str	r2, [sp, #20]
 80066a6:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80066a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066ac:	f042 0220 	orr.w	r2, r2, #32
 80066b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80066b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066b8:	f002 0220 	and.w	r2, r2, #32
 80066bc:	9206      	str	r2, [sp, #24]
 80066be:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80066c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066c4:	f042 0220 	orr.w	r2, r2, #32
 80066c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80066cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066d0:	f002 0220 	and.w	r2, r2, #32
 80066d4:	9207      	str	r2, [sp, #28]
 80066d6:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80066d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80066e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066e8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80066ec:	9208      	str	r2, [sp, #32]
 80066ee:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80066f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80066f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80066fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006700:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006704:	9209      	str	r2, [sp, #36]	@ 0x24
 8006706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8006708:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800670c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006710:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006714:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006718:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800671c:	920a      	str	r2, [sp, #40]	@ 0x28
 800671e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8006720:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006724:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006728:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800672c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006730:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006734:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006736:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8006738:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800673c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006740:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674c:	930c      	str	r3, [sp, #48]	@ 0x30
 800674e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006750:	2302      	movs	r3, #2
 8006752:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006756:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006758:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800675a:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800675e:	f001 fa69 	bl	8007c34 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006762:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006764:	a916      	add	r1, sp, #88	@ 0x58
 8006766:	486f      	ldr	r0, [pc, #444]	@ (8006924 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006768:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800676a:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800676e:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006772:	f001 fa5f 	bl	8007c34 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8006776:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800677a:	a916      	add	r1, sp, #88	@ 0x58
 800677c:	486a      	ldr	r0, [pc, #424]	@ (8006928 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800677e:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006780:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006782:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8006784:	f001 fa56 	bl	8007c34 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006788:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800678a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800678e:	4867      	ldr	r0, [pc, #412]	@ (800692c <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8006790:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006794:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006796:	f001 fa4d 	bl	8007c34 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800679a:	a916      	add	r1, sp, #88	@ 0x58
 800679c:	4864      	ldr	r0, [pc, #400]	@ (8006930 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800679e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80067a2:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80067a6:	f001 fa45 	bl	8007c34 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80067aa:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80067ac:	a916      	add	r1, sp, #88	@ 0x58
 80067ae:	485f      	ldr	r0, [pc, #380]	@ (800692c <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80067b0:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80067b2:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80067b4:	f001 fa3e 	bl	8007c34 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80067b8:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80067ba:	a916      	add	r1, sp, #88	@ 0x58
 80067bc:	485c      	ldr	r0, [pc, #368]	@ (8006930 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80067be:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80067c0:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80067c2:	f001 fa37 	bl	8007c34 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80067c6:	a916      	add	r1, sp, #88	@ 0x58
 80067c8:	4856      	ldr	r0, [pc, #344]	@ (8006924 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80067ca:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80067ce:	f001 fa31 	bl	8007c34 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80067d2:	a916      	add	r1, sp, #88	@ 0x58
 80067d4:	4856      	ldr	r0, [pc, #344]	@ (8006930 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80067d6:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80067da:	f001 fa2b 	bl	8007c34 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80067de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80067e2:	a916      	add	r1, sp, #88	@ 0x58
 80067e4:	484f      	ldr	r0, [pc, #316]	@ (8006924 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80067e6:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80067e8:	f001 fa24 	bl	8007c34 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80067ec:	463a      	mov	r2, r7
 80067ee:	210f      	movs	r1, #15
 80067f0:	205c      	movs	r0, #92	@ 0x5c
 80067f2:	f000 fbc9 	bl	8006f88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80067f6:	205c      	movs	r0, #92	@ 0x5c
 80067f8:	f000 fbf8 	bl	8006fec <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 80067fc:	a811      	add	r0, sp, #68	@ 0x44
 80067fe:	f7fe ff36 	bl	800566e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8006802:	7863      	ldrb	r3, [r4, #1]
 8006804:	4a4b      	ldr	r2, [pc, #300]	@ (8006934 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8006806:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800680a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800680e:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006810:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006812:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006816:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 800681a:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800681e:	a90d      	add	r1, sp, #52	@ 0x34
 8006820:	4845      	ldr	r0, [pc, #276]	@ (8006938 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006822:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8006824:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006826:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8006828:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800682a:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800682c:	f7ff fe74 	bl	8006518 <MX_QSPI_Init>
 8006830:	2800      	cmp	r0, #0
 8006832:	f040 8091 	bne.w	8006958 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006836:	2103      	movs	r1, #3
 8006838:	483f      	ldr	r0, [pc, #252]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 800683a:	f7ff f88c 	bl	8005956 <MT25TL01G_ResetEnable>
 800683e:	2800      	cmp	r0, #0
 8006840:	f040 8084 	bne.w	800694c <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006844:	2103      	movs	r1, #3
 8006846:	483c      	ldr	r0, [pc, #240]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 8006848:	f7ff f8a6 	bl	8005998 <MT25TL01G_ResetMemory>
 800684c:	2800      	cmp	r0, #0
 800684e:	d17d      	bne.n	800694c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006850:	7869      	ldrb	r1, [r5, #1]
 8006852:	4839      	ldr	r0, [pc, #228]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 8006854:	f7fe ff1c 	bl	8005690 <MT25TL01G_AutoPollingMemReady>
 8006858:	4601      	mov	r1, r0
 800685a:	2800      	cmp	r0, #0
 800685c:	d176      	bne.n	800694c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800685e:	4836      	ldr	r0, [pc, #216]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 8006860:	f7ff f879 	bl	8005956 <MT25TL01G_ResetEnable>
 8006864:	4601      	mov	r1, r0
 8006866:	2800      	cmp	r0, #0
 8006868:	d170      	bne.n	800694c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800686a:	4833      	ldr	r0, [pc, #204]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 800686c:	f7ff f894 	bl	8005998 <MT25TL01G_ResetMemory>
 8006870:	4601      	mov	r1, r0
 8006872:	2800      	cmp	r0, #0
 8006874:	d16a      	bne.n	800694c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8006876:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8006878:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800687a:	482f      	ldr	r0, [pc, #188]	@ (8006938 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800687c:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800687e:	f7fe ff07 	bl	8005690 <MT25TL01G_AutoPollingMemReady>
 8006882:	2800      	cmp	r0, #0
 8006884:	d162      	bne.n	800694c <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006886:	7869      	ldrb	r1, [r5, #1]
 8006888:	482b      	ldr	r0, [pc, #172]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 800688a:	f7fe ff70 	bl	800576e <MT25TL01G_Enter4BytesAddressMode>
 800688e:	2800      	cmp	r0, #0
 8006890:	d15c      	bne.n	800694c <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006892:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8006896:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800689a:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800689c:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80068a0:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80068a2:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80068a4:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80068a6:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80068a8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80068ac:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 80068ae:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80068b0:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80068b4:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80068b8:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80068bc:	481e      	ldr	r0, [pc, #120]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 80068be:	f003 fb15 	bl	8009eec <HAL_QSPI_Command>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d142      	bne.n	800694c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80068c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ca:	f10d 0102 	add.w	r1, sp, #2
 80068ce:	481a      	ldr	r0, [pc, #104]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 80068d0:	f003 fbac 	bl	800a02c <HAL_QSPI_Receive>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d139      	bne.n	800694c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80068d8:	7869      	ldrb	r1, [r5, #1]
 80068da:	4817      	ldr	r0, [pc, #92]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 80068dc:	f7fe ff03 	bl	80056e6 <MT25TL01G_WriteEnable>
 80068e0:	bba0      	cbnz	r0, 800694c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80068e2:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80068e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e8:	a916      	add	r1, sp, #88	@ 0x58
 80068ea:	4813      	ldr	r0, [pc, #76]	@ (8006938 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80068ec:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80068ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80068f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068f6:	051b      	lsls	r3, r3, #20
 80068f8:	0d1b      	lsrs	r3, r3, #20
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006902:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006906:	f003 faf1 	bl	8009eec <HAL_QSPI_Command>
 800690a:	b9f8      	cbnz	r0, 800694c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800690c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006910:	f10d 0102 	add.w	r1, sp, #2
 8006914:	4808      	ldr	r0, [pc, #32]	@ (8006938 <BSP_QSPI_Init+0x34c>)
 8006916:	f003 fb2d 	bl	8009f74 <HAL_QSPI_Transmit>
 800691a:	e00f      	b.n	800693c <BSP_QSPI_Init+0x350>
 800691c:	58024400 	.word	0x58024400
 8006920:	58020400 	.word	0x58020400
 8006924:	58021800 	.word	0x58021800
 8006928:	58020c00 	.word	0x58020c00
 800692c:	58021c00 	.word	0x58021c00
 8006930:	58021400 	.word	0x58021400
 8006934:	080270ec 	.word	0x080270ec
 8006938:	240099c8 	.word	0x240099c8
 800693c:	b930      	cbnz	r0, 800694c <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800693e:	7862      	ldrb	r2, [r4, #1]
 8006940:	7821      	ldrb	r1, [r4, #0]
 8006942:	f7ff fe1b 	bl	800657c <BSP_QSPI_ConfigFlash>
 8006946:	2800      	cmp	r0, #0
 8006948:	f43f ae5a 	beq.w	8006600 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800694c:	f06f 0004 	mvn.w	r0, #4
 8006950:	e657      	b.n	8006602 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8006952:	f06f 0001 	mvn.w	r0, #1
 8006956:	e654      	b.n	8006602 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006958:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800695c:	e651      	b.n	8006602 <BSP_QSPI_Init+0x16>
 800695e:	bf00      	nop

08006960 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8006960:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8006962:	4604      	mov	r4, r0
 8006964:	b970      	cbnz	r0, 8006984 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8006966:	4b09      	ldr	r3, [pc, #36]	@ (800698c <BSP_SDRAM_DeInit+0x2c>)
 8006968:	4809      	ldr	r0, [pc, #36]	@ (8006990 <BSP_SDRAM_DeInit+0x30>)
 800696a:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800696c:	f004 ff9c 	bl	800b8a8 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8006970:	207a      	movs	r0, #122	@ 0x7a
 8006972:	f000 fb49 	bl	8007008 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8006976:	4807      	ldr	r0, [pc, #28]	@ (8006994 <BSP_SDRAM_DeInit+0x34>)
 8006978:	4b07      	ldr	r3, [pc, #28]	@ (8006998 <BSP_SDRAM_DeInit+0x38>)
 800697a:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800697c:	f002 fff2 	bl	8009964 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8006980:	4620      	mov	r0, r4
}
 8006982:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006984:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006988:	e7fb      	b.n	8006982 <BSP_SDRAM_DeInit+0x22>
 800698a:	bf00      	nop
 800698c:	52004140 	.word	0x52004140
 8006990:	2400be6c 	.word	0x2400be6c
 8006994:	2400bd74 	.word	0x2400bd74
 8006998:	52000040 	.word	0x52000040

0800699c <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800699c:	2201      	movs	r2, #1
 800699e:	4915      	ldr	r1, [pc, #84]	@ (80069f4 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80069a0:	4b15      	ldr	r3, [pc, #84]	@ (80069f8 <MX_SDRAM_Init+0x5c>)
{
 80069a2:	b510      	push	{r4, lr}
 80069a4:	b088      	sub	sp, #32
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80069a6:	6082      	str	r2, [r0, #8]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80069a8:	2440      	movs	r4, #64	@ 0x40
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80069aa:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80069ae:	2104      	movs	r1, #4
 80069b0:	2220      	movs	r2, #32
 80069b2:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80069b6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80069ba:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80069be:	2200      	movs	r2, #0
 80069c0:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80069c4:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80069c8:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 80069cc:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80069ce:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 80069d0:	2207      	movs	r2, #7
 80069d2:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 80069d4:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80069d8:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 80069da:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80069dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 80069e0:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80069e4:	f004 ff38 	bl	800b858 <HAL_SDRAM_Init>
}
 80069e8:	3800      	subs	r0, #0
 80069ea:	bf18      	it	ne
 80069ec:	2001      	movne	r0, #1
 80069ee:	b008      	add	sp, #32
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	bf00      	nop
 80069f4:	52004140 	.word	0x52004140
 80069f8:	2400be6c 	.word	0x2400be6c

080069fc <BSP_SDRAM_Init>:
{
 80069fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 80069fe:	4605      	mov	r5, r0
{
 8006a00:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8006a02:	2800      	cmp	r0, #0
 8006a04:	f040 80dd 	bne.w	8006bc2 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8006a08:	4b71      	ldr	r3, [pc, #452]	@ (8006bd0 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006a0a:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006a0c:	a909      	add	r1, sp, #36	@ 0x24
 8006a0e:	4871      	ldr	r0, [pc, #452]	@ (8006bd4 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006a10:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006a14:	4c70      	ldr	r4, [pc, #448]	@ (8006bd8 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006a16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006a1a:	4e70      	ldr	r6, [pc, #448]	@ (8006bdc <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006a1c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006a20:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006a24:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006a28:	9201      	str	r2, [sp, #4]
 8006a2a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8006a2c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006a38:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006a3c:	f002 0201 	and.w	r2, r2, #1
 8006a40:	9202      	str	r2, [sp, #8]
 8006a42:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a48:	f042 0208 	orr.w	r2, r2, #8
 8006a4c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006a50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a54:	f002 0208 	and.w	r2, r2, #8
 8006a58:	9203      	str	r2, [sp, #12]
 8006a5a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a60:	f042 0210 	orr.w	r2, r2, #16
 8006a64:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006a68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a6c:	f002 0210 	and.w	r2, r2, #16
 8006a70:	9204      	str	r2, [sp, #16]
 8006a72:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a78:	f042 0220 	orr.w	r2, r2, #32
 8006a7c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006a80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a84:	f002 0220 	and.w	r2, r2, #32
 8006a88:	9205      	str	r2, [sp, #20]
 8006a8a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a94:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006a98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a9c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006aa0:	9206      	str	r2, [sp, #24]
 8006aa2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006aa4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006aa8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006aac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006ab0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ab4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006ab8:	9207      	str	r2, [sp, #28]
 8006aba:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006abc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006ac8:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad2:	9308      	str	r3, [sp, #32]
 8006ad4:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006adc:	230c      	movs	r3, #12
 8006ade:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006ae2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8006ae6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006ae8:	f001 f8a4 	bl	8007c34 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006aec:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006af0:	a909      	add	r1, sp, #36	@ 0x24
 8006af2:	483b      	ldr	r0, [pc, #236]	@ (8006be0 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006af4:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006af6:	f001 f89d 	bl	8007c34 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006afa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006afe:	a909      	add	r1, sp, #36	@ 0x24
 8006b00:	4838      	ldr	r0, [pc, #224]	@ (8006be4 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006b02:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006b04:	f001 f896 	bl	8007c34 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006b08:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006b0c:	a909      	add	r1, sp, #36	@ 0x24
 8006b0e:	4836      	ldr	r0, [pc, #216]	@ (8006be8 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006b10:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006b12:	f001 f88f 	bl	8007c34 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006b16:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006b1a:	a909      	add	r1, sp, #36	@ 0x24
 8006b1c:	4833      	ldr	r0, [pc, #204]	@ (8006bec <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006b1e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006b20:	f001 f888 	bl	8007c34 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006b24:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006b28:	a909      	add	r1, sp, #36	@ 0x24
 8006b2a:	4831      	ldr	r0, [pc, #196]	@ (8006bf0 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006b2c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006b2e:	f001 f881 	bl	8007c34 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006b32:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006b36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006b3a:	f240 2002 	movw	r0, #514	@ 0x202
 8006b3e:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006b42:	6334      	str	r4, [r6, #48]	@ 0x30
 8006b44:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006b46:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006b4a:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8006b4e:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8006b50:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006b52:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8006b54:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8006b56:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006b5a:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006b5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006b62:	4b24      	ldr	r3, [pc, #144]	@ (8006bf4 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006b64:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006b66:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8006b68:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006b6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006b70:	f002 fef8 	bl	8009964 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8006b74:	4620      	mov	r0, r4
 8006b76:	f002 fe86 	bl	8009886 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8006b7a:	462a      	mov	r2, r5
 8006b7c:	210f      	movs	r1, #15
 8006b7e:	207a      	movs	r0, #122	@ 0x7a
 8006b80:	f000 fa02 	bl	8006f88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8006b84:	207a      	movs	r0, #122	@ 0x7a
 8006b86:	f000 fa31 	bl	8006fec <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7ff ff06 	bl	800699c <MX_SDRAM_Init>
 8006b90:	b9d0      	cbnz	r0, 8006bc8 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006b92:	4919      	ldr	r1, [pc, #100]	@ (8006bf8 <BSP_SDRAM_Init+0x1fc>)
 8006b94:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8006b96:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8006b9a:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8006b9e:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8006ba0:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006ba4:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8006ba6:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006baa:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006bae:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006bb0:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006bb2:	f7fe fd2f 	bl	8005614 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	bf18      	it	ne
 8006bba:	f06f 0004 	mvnne.w	r0, #4
}
 8006bbe:	b00f      	add	sp, #60	@ 0x3c
 8006bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006bc2:	f06f 0001 	mvn.w	r0, #1
 8006bc6:	e7fa      	b.n	8006bbe <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8006bcc:	e7f7      	b.n	8006bbe <BSP_SDRAM_Init+0x1c2>
 8006bce:	bf00      	nop
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	58020c00 	.word	0x58020c00
 8006bd8:	2400bde0 	.word	0x2400bde0
 8006bdc:	2400be6c 	.word	0x2400be6c
 8006be0:	58021000 	.word	0x58021000
 8006be4:	58021400 	.word	0x58021400
 8006be8:	58021800 	.word	0x58021800
 8006bec:	58021c00 	.word	0x58021c00
 8006bf0:	58022000 	.word	0x58022000
 8006bf4:	52000040 	.word	0x52000040
 8006bf8:	2400be4c 	.word	0x2400be4c

08006bfc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c00:	460c      	mov	r4, r1
 8006c02:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006c04:	4606      	mov	r6, r0
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d15c      	bne.n	8006cc4 <BSP_TS_Init+0xc8>
 8006c0a:	680b      	ldr	r3, [r1, #0]
 8006c0c:	1e5a      	subs	r2, r3, #1
 8006c0e:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8006c12:	d257      	bcs.n	8006cc4 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006c14:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006c16:	1e51      	subs	r1, r2, #1
 8006c18:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8006c1c:	d252      	bcs.n	8006cc4 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	bf28      	it	cs
 8006c22:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006c24:	68e2      	ldr	r2, [r4, #12]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d84c      	bhi.n	8006cc4 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006c2a:	2370      	movs	r3, #112	@ 0x70
 8006c2c:	2254      	movs	r2, #84	@ 0x54
 8006c2e:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006c32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d08 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006c36:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8006c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8006cf4 <BSP_TS_Init+0xf8>)
 8006c3c:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8006c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8006cf8 <BSP_TS_Init+0xfc>)
 8006c40:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8006c42:	4b2e      	ldr	r3, [pc, #184]	@ (8006cfc <BSP_TS_Init+0x100>)
 8006c44:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8006c46:	4b2e      	ldr	r3, [pc, #184]	@ (8006d00 <BSP_TS_Init+0x104>)
 8006c48:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8006c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8006d04 <BSP_TS_Init+0x108>)
 8006c4c:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006c4e:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006c52:	a906      	add	r1, sp, #24
 8006c54:	482c      	ldr	r0, [pc, #176]	@ (8006d08 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006c56:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006c5a:	f7fe fbe1 	bl	8005420 <FT6X06_RegisterBusIO>
 8006c5e:	b9c0      	cbnz	r0, 8006c92 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8006c60:	4669      	mov	r1, sp
 8006c62:	4829      	ldr	r0, [pc, #164]	@ (8006d08 <BSP_TS_Init+0x10c>)
 8006c64:	f7fe fb25 	bl	80052b2 <FT6X06_ReadID>
 8006c68:	b998      	cbnz	r0, 8006c92 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8006c6a:	9b00      	ldr	r3, [sp, #0]
 8006c6c:	2b11      	cmp	r3, #17
 8006c6e:	d110      	bne.n	8006c92 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8006c70:	a903      	add	r1, sp, #12
 8006c72:	4825      	ldr	r0, [pc, #148]	@ (8006d08 <BSP_TS_Init+0x10c>)
 8006c74:	f7fe fad1 	bl	800521a <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006c78:	4f24      	ldr	r7, [pc, #144]	@ (8006d0c <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006c7a:	4b25      	ldr	r3, [pc, #148]	@ (8006d10 <BSP_TS_Init+0x114>)
 8006c7c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006d18 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006c80:	4821      	ldr	r0, [pc, #132]	@ (8006d08 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006c82:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006c86:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4798      	blx	r3
 8006c8e:	4605      	mov	r5, r0
 8006c90:	b1d8      	cbz	r0, 8006cca <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8006c92:	b116      	cbz	r6, 8006c9a <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8006c94:	f04f 35ff 	mov.w	r5, #4294967295
 8006c98:	e010      	b.n	8006cbc <BSP_TS_Init+0xc0>
 8006c9a:	2601      	movs	r6, #1
 8006c9c:	e7d7      	b.n	8006c4e <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006c9e:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006ca0:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006ca2:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006ca4:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006ca6:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006ca8:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006caa:	68e3      	ldr	r3, [r4, #12]
 8006cac:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006cae:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006cb0:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006cb2:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006cb4:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006cb6:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006cb8:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	b00c      	add	sp, #48	@ 0x30
 8006cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006cc4:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8006cc8:	e7f8      	b.n	8006cbc <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006cca:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006ccc:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006cce:	4e11      	ldr	r6, [pc, #68]	@ (8006d14 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006cd0:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006cd2:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8006cd4:	6863      	ldr	r3, [r4, #4]
 8006cd6:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8006cd8:	68a3      	ldr	r3, [r4, #8]
 8006cda:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8006cdc:	68e3      	ldr	r3, [r4, #12]
 8006cde:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	4798      	blx	r3
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	dad8      	bge.n	8006c9e <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cec:	f06f 0504 	mvn.w	r5, #4
 8006cf0:	e7e4      	b.n	8006cbc <BSP_TS_Init+0xc0>
 8006cf2:	bf00      	nop
 8006cf4:	08006201 	.word	0x08006201
 8006cf8:	0800616d 	.word	0x0800616d
 8006cfc:	080064e1 	.word	0x080064e1
 8006d00:	080064ad 	.word	0x080064ad
 8006d04:	08006515 	.word	0x08006515
 8006d08:	2400bea0 	.word	0x2400bea0
 8006d0c:	2400bec8 	.word	0x2400bec8
 8006d10:	24000038 	.word	0x24000038
 8006d14:	2400becc 	.word	0x2400becc
 8006d18:	2400bef4 	.word	0x2400bef4

08006d1c <BSP_TS_GetState>:
{
 8006d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d1e:	460c      	mov	r4, r1
 8006d20:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d14d      	bne.n	8006dc2 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006d26:	4b28      	ldr	r3, [pc, #160]	@ (8006dc8 <BSP_TS_GetState+0xac>)
 8006d28:	a901      	add	r1, sp, #4
 8006d2a:	4a28      	ldr	r2, [pc, #160]	@ (8006dcc <BSP_TS_GetState+0xb0>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6810      	ldr	r0, [r2, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	4798      	blx	r3
 8006d34:	2800      	cmp	r0, #0
 8006d36:	db41      	blt.n	8006dbc <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006d38:	4925      	ldr	r1, [pc, #148]	@ (8006dd0 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8006d3a:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006d3c:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006d3e:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	d037      	beq.n	8006db4 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006d44:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006d46:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006d4a:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8006d4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006d52:	bf02      	ittt	eq
 8006d54:	4694      	moveq	ip, r2
      x_oriented = state.TouchX;
 8006d56:	461a      	moveq	r2, r3
      y_oriented = state.TouchY;
 8006d58:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006d5a:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006d5e:	bf1c      	itt	ne
 8006d60:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8006d64:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006d68:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006d6c:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006d6e:	bf44      	itt	mi
 8006d70:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8006d74:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006d76:	680f      	ldr	r7, [r1, #0]
 8006d78:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006d7a:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8006d7c:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006d7e:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006d80:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006d82:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006d86:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006d8a:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006d8c:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006d8e:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006d90:	bf8c      	ite	hi
 8006d92:	eba2 0c05 	subhi.w	ip, r2, r5
 8006d96:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8006d9a:	4283      	cmp	r3, r0
 8006d9c:	bf8c      	ite	hi
 8006d9e:	1a1e      	subhi	r6, r3, r0
 8006da0:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006da2:	4567      	cmp	r7, ip
 8006da4:	d301      	bcc.n	8006daa <BSP_TS_GetState+0x8e>
 8006da6:	42b7      	cmp	r7, r6
 8006da8:	d205      	bcs.n	8006db6 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8006daa:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006dac:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8006dae:	2000      	movs	r0, #0
}
 8006db0:	b005      	add	sp, #20
 8006db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8006db4:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006db6:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8006dba:	e7f8      	b.n	8006dae <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006dbc:	f06f 0004 	mvn.w	r0, #4
 8006dc0:	e7f6      	b.n	8006db0 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006dc2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006dc6:	e7f3      	b.n	8006db0 <BSP_TS_GetState+0x94>
 8006dc8:	2400bef4 	.word	0x2400bef4
 8006dcc:	2400bec8 	.word	0x2400bec8
 8006dd0:	2400becc 	.word	0x2400becc

08006dd4 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8006e8c <SystemInit+0xb8>)
 8006dd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006dda:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8006dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	f042 0210 	orr.w	r2, r2, #16
 8006de8:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006dea:	4a29      	ldr	r2, [pc, #164]	@ (8006e90 <SystemInit+0xbc>)
 8006dec:	6813      	ldr	r3, [r2, #0]
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	2b06      	cmp	r3, #6
 8006df4:	d805      	bhi.n	8006e02 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	f023 030f 	bic.w	r3, r3, #15
 8006dfc:	f043 0307 	orr.w	r3, r3, #7
 8006e00:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006e02:	4b24      	ldr	r3, [pc, #144]	@ (8006e94 <SystemInit+0xc0>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006e10:	4a21      	ldr	r2, [pc, #132]	@ (8006e98 <SystemInit+0xc4>)
 8006e12:	6819      	ldr	r1, [r3, #0]
 8006e14:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006e16:	491e      	ldr	r1, [pc, #120]	@ (8006e90 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006e18:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006e1a:	680a      	ldr	r2, [r1, #0]
 8006e1c:	0712      	lsls	r2, r2, #28
 8006e1e:	d505      	bpl.n	8006e2c <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006e20:	680a      	ldr	r2, [r1, #0]
 8006e22:	f022 020f 	bic.w	r2, r2, #15
 8006e26:	f042 0207 	orr.w	r2, r2, #7
 8006e2a:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006e2c:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006e2e:	491b      	ldr	r1, [pc, #108]	@ (8006e9c <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006e30:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006e32:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006e34:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006e36:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006e38:	4919      	ldr	r1, [pc, #100]	@ (8006ea0 <SystemInit+0xcc>)
 8006e3a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006e3c:	4919      	ldr	r1, [pc, #100]	@ (8006ea4 <SystemInit+0xd0>)
 8006e3e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006e42:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006e44:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006e46:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006e48:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006e4a:	6819      	ldr	r1, [r3, #0]
 8006e4c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8006e50:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006e52:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e58:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e60:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006e64:	4b10      	ldr	r3, [pc, #64]	@ (8006ea8 <SystemInit+0xd4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f36f 030f 	bfc	r3, #0, #16
 8006e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e70:	d203      	bcs.n	8006e7a <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006e72:	4b0e      	ldr	r3, [pc, #56]	@ (8006eac <SystemInit+0xd8>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <SystemInit+0xdc>)
 8006e7c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006e80:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006e82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006e86:	4b01      	ldr	r3, [pc, #4]	@ (8006e8c <SystemInit+0xb8>)
 8006e88:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8006e8a:	4770      	bx	lr
 8006e8c:	e000ed00 	.word	0xe000ed00
 8006e90:	52002000 	.word	0x52002000
 8006e94:	58024400 	.word	0x58024400
 8006e98:	eaf6ed7f 	.word	0xeaf6ed7f
 8006e9c:	02020200 	.word	0x02020200
 8006ea0:	01ff0000 	.word	0x01ff0000
 8006ea4:	01010280 	.word	0x01010280
 8006ea8:	5c001000 	.word	0x5c001000
 8006eac:	51008000 	.word	0x51008000
 8006eb0:	52004000 	.word	0x52004000

08006eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006eb4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006eb6:	2003      	movs	r0, #3
 8006eb8:	f000 f854 	bl	8006f64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ebc:	f003 fc9e 	bl	800a7fc <HAL_RCC_GetSysClockFreq>
 8006ec0:	490f      	ldr	r1, [pc, #60]	@ (8006f00 <HAL_Init+0x4c>)
 8006ec2:	4a10      	ldr	r2, [pc, #64]	@ (8006f04 <HAL_Init+0x50>)
 8006ec4:	698b      	ldr	r3, [r1, #24]
 8006ec6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006eca:	5cd3      	ldrb	r3, [r2, r3]
 8006ecc:	f003 031f 	and.w	r3, r3, #31
 8006ed0:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ed2:	698b      	ldr	r3, [r1, #24]
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	5cd3      	ldrb	r3, [r2, r3]
 8006eda:	4a0b      	ldr	r2, [pc, #44]	@ (8006f08 <HAL_Init+0x54>)
 8006edc:	f003 031f 	and.w	r3, r3, #31
 8006ee0:	fa20 f303 	lsr.w	r3, r0, r3
 8006ee4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ee6:	4b09      	ldr	r3, [pc, #36]	@ (8006f0c <HAL_Init+0x58>)
 8006ee8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006eea:	2000      	movs	r0, #0
 8006eec:	f7fa fb3c 	bl	8001568 <HAL_InitTick>
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	b918      	cbnz	r0, 8006efc <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006ef4:	f7fa f828 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006ef8:	4620      	mov	r0, r4
 8006efa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006efc:	2401      	movs	r4, #1
 8006efe:	e7fb      	b.n	8006ef8 <HAL_Init+0x44>
 8006f00:	58024400 	.word	0x58024400
 8006f04:	080270f4 	.word	0x080270f4
 8006f08:	24000068 	.word	0x24000068
 8006f0c:	2400006c 	.word	0x2400006c

08006f10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006f10:	4a03      	ldr	r2, [pc, #12]	@ (8006f20 <HAL_IncTick+0x10>)
 8006f12:	4b04      	ldr	r3, [pc, #16]	@ (8006f24 <HAL_IncTick+0x14>)
 8006f14:	6811      	ldr	r1, [r2, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	440b      	add	r3, r1
 8006f1a:	6013      	str	r3, [r2, #0]
}
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	2400bef8 	.word	0x2400bef8
 8006f24:	24000070 	.word	0x24000070

08006f28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006f28:	4b01      	ldr	r3, [pc, #4]	@ (8006f30 <HAL_GetTick+0x8>)
 8006f2a:	6818      	ldr	r0, [r3, #0]
}
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	2400bef8 	.word	0x2400bef8

08006f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006f38:	f7ff fff6 	bl	8006f28 <HAL_GetTick>
 8006f3c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f3e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006f40:	bf1e      	ittt	ne
 8006f42:	4b04      	ldrne	r3, [pc, #16]	@ (8006f54 <HAL_Delay+0x20>)
 8006f44:	781b      	ldrbne	r3, [r3, #0]
 8006f46:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f48:	f7ff ffee 	bl	8006f28 <HAL_GetTick>
 8006f4c:	1b43      	subs	r3, r0, r5
 8006f4e:	42a3      	cmp	r3, r4
 8006f50:	d3fa      	bcc.n	8006f48 <HAL_Delay+0x14>
  {
  }
}
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	24000070 	.word	0x24000070

08006f58 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006f58:	4b01      	ldr	r3, [pc, #4]	@ (8006f60 <HAL_GetREVID+0x8>)
 8006f5a:	6818      	ldr	r0, [r3, #0]
}
 8006f5c:	0c00      	lsrs	r0, r0, #16
 8006f5e:	4770      	bx	lr
 8006f60:	5c001000 	.word	0x5c001000

08006f64 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f64:	4907      	ldr	r1, [pc, #28]	@ (8006f84 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f66:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f68:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f6a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f72:	0412      	lsls	r2, r2, #16
 8006f74:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006f80:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006f82:	4770      	bx	lr
 8006f84:	e000ed00 	.word	0xe000ed00

08006f88 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f88:	4b16      	ldr	r3, [pc, #88]	@ (8006fe4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f8a:	b530      	push	{r4, r5, lr}
 8006f8c:	68dc      	ldr	r4, [r3, #12]
 8006f8e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f92:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f96:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	bf28      	it	cs
 8006f9c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f9e:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fa0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fa4:	bf8c      	ite	hi
 8006fa6:	3c03      	subhi	r4, #3
 8006fa8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006faa:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8006fae:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fb0:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fb4:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fb8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fbc:	fa03 f304 	lsl.w	r3, r3, r4
 8006fc0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fc4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006fc8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006fca:	db06      	blt.n	8006fda <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fcc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006fd0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006fd4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006fd8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fda:	f000 000f 	and.w	r0, r0, #15
 8006fde:	4a02      	ldr	r2, [pc, #8]	@ (8006fe8 <HAL_NVIC_SetPriority+0x60>)
 8006fe0:	5413      	strb	r3, [r2, r0]
 8006fe2:	e7f9      	b.n	8006fd8 <HAL_NVIC_SetPriority+0x50>
 8006fe4:	e000ed00 	.word	0xe000ed00
 8006fe8:	e000ed14 	.word	0xe000ed14

08006fec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006fec:	2800      	cmp	r0, #0
 8006fee:	db07      	blt.n	8007000 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	0941      	lsrs	r1, r0, #5
 8006ff4:	f000 001f 	and.w	r0, r0, #31
 8006ff8:	4a02      	ldr	r2, [pc, #8]	@ (8007004 <HAL_NVIC_EnableIRQ+0x18>)
 8006ffa:	4083      	lsls	r3, r0
 8006ffc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	e000e100 	.word	0xe000e100

08007008 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007008:	2800      	cmp	r0, #0
 800700a:	db0c      	blt.n	8007026 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800700c:	0943      	lsrs	r3, r0, #5
 800700e:	2201      	movs	r2, #1
 8007010:	f000 001f 	and.w	r0, r0, #31
 8007014:	4904      	ldr	r1, [pc, #16]	@ (8007028 <HAL_NVIC_DisableIRQ+0x20>)
 8007016:	3320      	adds	r3, #32
 8007018:	4082      	lsls	r2, r0
 800701a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800701e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007022:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007026:	4770      	bx	lr
 8007028:	e000e100 	.word	0xe000e100

0800702c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800702c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007030:	4b04      	ldr	r3, [pc, #16]	@ (8007044 <HAL_MPU_Disable+0x18>)
 8007032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007034:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007038:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	e000ed00 	.word	0xe000ed00

08007048 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007048:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <HAL_MPU_Enable+0x1c>)
 800704a:	f040 0001 	orr.w	r0, r0, #1
 800704e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007054:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007058:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800705a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800705e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007062:	4770      	bx	lr
 8007064:	e000ed00 	.word	0xe000ed00

08007068 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007068:	7843      	ldrb	r3, [r0, #1]
 800706a:	4a14      	ldr	r2, [pc, #80]	@ (80070bc <HAL_MPU_ConfigRegion+0x54>)
 800706c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007070:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800707c:	6843      	ldr	r3, [r0, #4]
 800707e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007082:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007084:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007086:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007088:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800708c:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800708e:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007090:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007092:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007096:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007098:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800709c:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800709e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80070a2:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80070a8:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80070ae:	7a01      	ldrb	r1, [r0, #8]
 80070b0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070b4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	e000ed00 	.word	0xe000ed00

080070c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80070c0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80070c2:	4604      	mov	r4, r0
 80070c4:	b908      	cbnz	r0, 80070ca <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80070c6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80070c8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80070ca:	7f43      	ldrb	r3, [r0, #29]
 80070cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80070d0:	b913      	cbnz	r3, 80070d8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80070d2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80070d4:	f7f9 ff50 	bl	8000f78 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80070d8:	2302      	movs	r3, #2
 80070da:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80070dc:	7923      	ldrb	r3, [r4, #4]
 80070de:	b9e3      	cbnz	r3, 800711a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	4a13      	ldr	r2, [pc, #76]	@ (8007130 <HAL_CRC_Init+0x70>)
 80070e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	f022 0218 	bic.w	r2, r2, #24
 80070ec:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80070ee:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80070f0:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80070f2:	b9d2      	cbnz	r2, 800712a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80070f4:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80070f8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80070fa:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	6961      	ldr	r1, [r4, #20]
 8007100:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007104:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007106:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007108:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007110:	430a      	orrs	r2, r1
 8007112:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8007114:	2301      	movs	r3, #1
 8007116:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8007118:	e7d6      	b.n	80070c8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800711a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f808 	bl	8007134 <HAL_CRCEx_Polynomial_Set>
 8007124:	2800      	cmp	r0, #0
 8007126:	d0e2      	beq.n	80070ee <HAL_CRC_Init+0x2e>
 8007128:	e7cd      	b.n	80070c6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800712a:	6922      	ldr	r2, [r4, #16]
 800712c:	e7e4      	b.n	80070f8 <HAL_CRC_Init+0x38>
 800712e:	bf00      	nop
 8007130:	04c11db7 	.word	0x04c11db7

08007134 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007134:	07cb      	lsls	r3, r1, #31
{
 8007136:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007138:	d50d      	bpl.n	8007156 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800713a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800713c:	3b01      	subs	r3, #1
 800713e:	d31d      	bcc.n	800717c <HAL_CRCEx_Polynomial_Set+0x48>
 8007140:	fa21 f403 	lsr.w	r4, r1, r3
 8007144:	07e4      	lsls	r4, r4, #31
 8007146:	d5f9      	bpl.n	800713c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8007148:	2a10      	cmp	r2, #16
 800714a:	d013      	beq.n	8007174 <HAL_CRCEx_Polynomial_Set+0x40>
 800714c:	2a10      	cmp	r2, #16
 800714e:	d804      	bhi.n	800715a <HAL_CRCEx_Polynomial_Set+0x26>
 8007150:	b13a      	cbz	r2, 8007162 <HAL_CRCEx_Polynomial_Set+0x2e>
 8007152:	2a08      	cmp	r2, #8
 8007154:	d010      	beq.n	8007178 <HAL_CRCEx_Polynomial_Set+0x44>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
        {
          status =   HAL_ERROR;
 8007156:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8007158:	e00b      	b.n	8007172 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800715a:	2a18      	cmp	r2, #24
 800715c:	d1fb      	bne.n	8007156 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800715e:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8007160:	d8f9      	bhi.n	8007156 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007162:	6800      	ldr	r0, [r0, #0]
 8007164:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007166:	6883      	ldr	r3, [r0, #8]
 8007168:	f023 0318 	bic.w	r3, r3, #24
 800716c:	4313      	orrs	r3, r2
 800716e:	6083      	str	r3, [r0, #8]
 8007170:	2000      	movs	r0, #0
}
 8007172:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8007174:	2b07      	cmp	r3, #7
 8007176:	e7f3      	b.n	8007160 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8007178:	2b0f      	cmp	r3, #15
 800717a:	e7f1      	b.n	8007160 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 800717c:	2a10      	cmp	r2, #16
 800717e:	d1e5      	bne.n	800714c <HAL_CRCEx_Polynomial_Set+0x18>
 8007180:	e7e9      	b.n	8007156 <HAL_CRCEx_Polynomial_Set+0x22>

08007182 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007182:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007184:	4604      	mov	r4, r0
 8007186:	2800      	cmp	r0, #0
 8007188:	d036      	beq.n	80071f8 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800718a:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800718e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007192:	b91b      	cbnz	r3, 800719c <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007194:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007198:	f7f9 ff06 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800719c:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800719e:	69e0      	ldr	r0, [r4, #28]
 80071a0:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071a2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80071aa:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80071ac:	6819      	ldr	r1, [r3, #0]
 80071ae:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80071b2:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80071b6:	430a      	orrs	r2, r1
 80071b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80071ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80071bc:	68a2      	ldr	r2, [r4, #8]
 80071be:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 80071c2:	4302      	orrs	r2, r0
 80071c4:	f021 0101 	bic.w	r1, r1, #1
 80071c8:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80071ca:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80071cc:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80071ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071d0:	f36f 020f 	bfc	r2, #0, #16
 80071d4:	430a      	orrs	r2, r1
 80071d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80071d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80071da:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80071de:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80071e2:	0552      	lsls	r2, r2, #21
 80071e4:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80071e8:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80071ea:	430a      	orrs	r2, r1
 80071ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80071ee:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80071f0:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80071f2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 80071f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80071f8:	2001      	movs	r0, #1
 80071fa:	e7fc      	b.n	80071f6 <HAL_DMA2D_Init+0x74>

080071fc <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80071fc:	4770      	bx	lr

080071fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80071fe:	4770      	bx	lr

08007200 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007200:	6803      	ldr	r3, [r0, #0]
{
 8007202:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007204:	685e      	ldr	r6, [r3, #4]
{
 8007206:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007208:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800720a:	07f2      	lsls	r2, r6, #31
 800720c:	d514      	bpl.n	8007238 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800720e:	05e9      	lsls	r1, r5, #23
 8007210:	d512      	bpl.n	8007238 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007218:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800721a:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800721c:	f042 0201 	orr.w	r2, r2, #1
 8007220:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007222:	2201      	movs	r2, #1
 8007224:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007226:	2304      	movs	r3, #4
 8007228:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800722c:	2300      	movs	r3, #0
 800722e:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007232:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007234:	b103      	cbz	r3, 8007238 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8007236:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007238:	06b2      	lsls	r2, r6, #26
 800723a:	d516      	bpl.n	800726a <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800723c:	04ab      	lsls	r3, r5, #18
 800723e:	d514      	bpl.n	800726a <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007248:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800724a:	2220      	movs	r2, #32
 800724c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800724e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007250:	f043 0302 	orr.w	r3, r3, #2
 8007254:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007256:	2304      	movs	r3, #4
 8007258:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800725c:	2300      	movs	r3, #0
 800725e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007262:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007264:	b10b      	cbz	r3, 800726a <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8007266:	4620      	mov	r0, r4
 8007268:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800726a:	0730      	lsls	r0, r6, #28
 800726c:	d516      	bpl.n	800729c <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800726e:	0529      	lsls	r1, r5, #20
 8007270:	d514      	bpl.n	800729c <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800727a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800727c:	2208      	movs	r2, #8
 800727e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007282:	f043 0304 	orr.w	r3, r3, #4
 8007286:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007288:	2304      	movs	r3, #4
 800728a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800728e:	2300      	movs	r3, #0
 8007290:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007294:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007296:	b10b      	cbz	r3, 800729c <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8007298:	4620      	mov	r0, r4
 800729a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800729c:	0772      	lsls	r2, r6, #29
 800729e:	d50b      	bpl.n	80072b8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80072a0:	056b      	lsls	r3, r5, #21
 80072a2:	d509      	bpl.n	80072b8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80072a4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80072a6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80072b0:	2204      	movs	r2, #4
 80072b2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80072b4:	f7ff ffa2 	bl	80071fc <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80072b8:	07b0      	lsls	r0, r6, #30
 80072ba:	d514      	bpl.n	80072e6 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80072bc:	05a9      	lsls	r1, r5, #22
 80072be:	d512      	bpl.n	80072e6 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80072c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80072ca:	2202      	movs	r2, #2
 80072cc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80072ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072d0:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80072d8:	2300      	movs	r3, #0
 80072da:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80072de:	6a23      	ldr	r3, [r4, #32]
 80072e0:	b10b      	cbz	r3, 80072e6 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80072e2:	4620      	mov	r0, r4
 80072e4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80072e6:	06f2      	lsls	r2, r6, #27
 80072e8:	d513      	bpl.n	8007312 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80072ea:	04eb      	lsls	r3, r5, #19
 80072ec:	d511      	bpl.n	8007312 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80072ee:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80072f0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80072fa:	2210      	movs	r2, #16
 80072fc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80072fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007300:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007302:	2301      	movs	r3, #1
 8007304:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007308:	2300      	movs	r3, #0
 800730a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800730e:	f7ff ff76 	bl	80071fe <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8007312:	bd70      	pop	{r4, r5, r6, pc}

08007314 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8007314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	4607      	mov	r7, r0
 800731a:	460d      	mov	r5, r1
 800731c:	4614      	mov	r4, r2
 800731e:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007320:	f7ff fe02 	bl	8006f28 <HAL_GetTick>
 8007324:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800732a:	07d2      	lsls	r2, r2, #31
 800732c:	d50a      	bpl.n	8007344 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800732e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007332:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8007334:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800733a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800733e:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007344:	f7ff fdf0 	bl	8006f28 <HAL_GetTick>
 8007348:	eba0 0008 	sub.w	r0, r0, r8
 800734c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007350:	d9e9      	bls.n	8007326 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8007352:	2003      	movs	r0, #3
 8007354:	e7f4      	b.n	8007340 <DSI_ShortWrite.constprop.0+0x2c>

08007356 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007356:	7c03      	ldrb	r3, [r0, #16]
{
 8007358:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800735a:	2b01      	cmp	r3, #1
 800735c:	d05b      	beq.n	8007416 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800735e:	6803      	ldr	r3, [r0, #0]
 8007360:	2000      	movs	r0, #0
 8007362:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007366:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800736a:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800736c:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800736e:	d507      	bpl.n	8007380 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8007370:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007374:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8007378:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 800737c:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8007380:	0788      	lsls	r0, r1, #30
 8007382:	d505      	bpl.n	8007390 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8007384:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007388:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 800738c:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8007390:	0748      	lsls	r0, r1, #29
 8007392:	d505      	bpl.n	80073a0 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8007394:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007398:	f040 0001 	orr.w	r0, r0, #1
 800739c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80073a0:	0708      	lsls	r0, r1, #28
 80073a2:	d505      	bpl.n	80073b0 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80073a4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80073a8:	f040 0002 	orr.w	r0, r0, #2
 80073ac:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80073b0:	06c8      	lsls	r0, r1, #27
 80073b2:	d505      	bpl.n	80073c0 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80073b4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80073b8:	f040 000c 	orr.w	r0, r0, #12
 80073bc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80073c0:	0688      	lsls	r0, r1, #26
 80073c2:	d505      	bpl.n	80073d0 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80073c4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80073c8:	f040 0010 	orr.w	r0, r0, #16
 80073cc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80073d0:	0648      	lsls	r0, r1, #25
 80073d2:	d505      	bpl.n	80073e0 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80073d4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80073d8:	f040 0020 	orr.w	r0, r0, #32
 80073dc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80073e0:	0608      	lsls	r0, r1, #24
 80073e2:	d505      	bpl.n	80073f0 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80073e4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80073e8:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 80073ec:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80073f0:	05c8      	lsls	r0, r1, #23
 80073f2:	d505      	bpl.n	8007400 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80073f4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80073f8:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80073fc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8007400:	0589      	lsls	r1, r1, #22
 8007402:	d505      	bpl.n	8007410 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8007404:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8007408:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 800740c:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007410:	2000      	movs	r0, #0
 8007412:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8007414:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007416:	2002      	movs	r0, #2
}
 8007418:	4770      	bx	lr
	...

0800741c <HAL_DSI_Init>:
{
 800741c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800741e:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8007420:	4604      	mov	r4, r0
 8007422:	2800      	cmp	r0, #0
 8007424:	f000 80ea 	beq.w	80075fc <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007428:	7c43      	ldrb	r3, [r0, #17]
 800742a:	b90b      	cbnz	r3, 8007430 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800742c:	f7f9 fde0 	bl	8000ff0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007430:	2303      	movs	r3, #3
 8007432:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007434:	2300      	movs	r3, #0
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800743e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007442:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8007446:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800744a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007452:	f7ff fd69 	bl	8006f28 <HAL_GetTick>
 8007456:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007458:	6822      	ldr	r2, [r4, #0]
 800745a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800745e:	04d9      	lsls	r1, r3, #19
 8007460:	d56e      	bpl.n	8007540 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007462:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007466:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800746a:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800746e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007472:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007476:	e9d5 0300 	ldrd	r0, r3, [r5]
 800747a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800747c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8007480:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007482:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8007486:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007488:	430b      	orrs	r3, r1
 800748a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800748e:	2300      	movs	r3, #0
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007496:	f043 0301 	orr.w	r3, r3, #1
 800749a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800749e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80074aa:	f7ff fd43 	bl	8006f34 <HAL_Delay>
  tickstart = HAL_GetTick();
 80074ae:	f7ff fd3b 	bl	8006f28 <HAL_GetTick>
 80074b2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80074ba:	05d2      	lsls	r2, r2, #23
 80074bc:	d548      	bpl.n	8007550 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 80074be:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80074c0:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 80074c2:	9202      	str	r2, [sp, #8]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	f042 0201 	orr.w	r2, r2, #1
 80074ca:	605a      	str	r2, [r3, #4]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	f002 0201 	and.w	r2, r2, #1
 80074d2:	9202      	str	r2, [sp, #8]
 80074d4:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80074dc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80074e2:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80074e4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80074e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80074ea:	f042 0202 	orr.w	r2, r2, #2
 80074ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80074f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80074f6:	f042 0204 	orr.w	r2, r2, #4
 80074fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80074fe:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007502:	f022 0203 	bic.w	r2, r2, #3
 8007506:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800750a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800750e:	430a      	orrs	r2, r1
 8007510:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8007514:	f7ff fd08 	bl	8006f28 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007518:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800751a:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800751c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007520:	079b      	lsls	r3, r3, #30
 8007522:	d025      	beq.n	8007570 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800752a:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800752e:	2b94      	cmp	r3, #148	@ 0x94
 8007530:	d025      	beq.n	800757e <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007532:	f7ff fcf9 	bl	8006f28 <HAL_GetTick>
 8007536:	1b80      	subs	r0, r0, r6
 8007538:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800753c:	d9f2      	bls.n	8007524 <HAL_DSI_Init+0x108>
 800753e:	e014      	b.n	800756a <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007540:	f7ff fcf2 	bl	8006f28 <HAL_GetTick>
 8007544:	1b80      	subs	r0, r0, r6
 8007546:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800754a:	d985      	bls.n	8007458 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800754c:	2003      	movs	r0, #3
 800754e:	e053      	b.n	80075f8 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007550:	f7ff fcea 	bl	8006f28 <HAL_GetTick>
 8007554:	1b80      	subs	r0, r0, r6
 8007556:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800755a:	d9ab      	bls.n	80074b4 <HAL_DSI_Init+0x98>
 800755c:	e7f6      	b.n	800754c <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800755e:	f7ff fce3 	bl	8006f28 <HAL_GetTick>
 8007562:	1b80      	subs	r0, r0, r6
 8007564:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007568:	d902      	bls.n	8007570 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 800756a:	2300      	movs	r3, #0
 800756c:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800756e:	e7ed      	b.n	800754c <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007576:	f003 0314 	and.w	r3, r3, #20
 800757a:	2b14      	cmp	r3, #20
 800757c:	d1ef      	bne.n	800755e <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800757e:	686b      	ldr	r3, [r5, #4]
 8007580:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8007584:	4a1e      	ldr	r2, [pc, #120]	@ (8007600 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8007586:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007588:	2b01      	cmp	r3, #1
 800758a:	bf38      	it	cc
 800758c:	2301      	movcc	r3, #1
 800758e:	435a      	muls	r2, r3
 8007590:	68ab      	ldr	r3, [r5, #8]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	409a      	lsls	r2, r3
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	434b      	muls	r3, r1
 800759c:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80075a6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80075aa:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80075ae:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80075b2:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80075b4:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80075b6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 80075ba:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80075be:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 80075c2:	9003      	str	r0, [sp, #12]
 80075c4:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 80075c6:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 80075c8:	f022 0201 	bic.w	r2, r2, #1
 80075cc:	605a      	str	r2, [r3, #4]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	f002 0201 	and.w	r2, r2, #1
 80075d4:	9203      	str	r2, [sp, #12]
 80075d6:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80075d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80075dc:	f022 0203 	bic.w	r2, r2, #3
 80075e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80075e4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80075e8:	430a      	orrs	r2, r1
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 80075f2:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80075f4:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 80075f6:	7463      	strb	r3, [r4, #17]
}
 80075f8:	b004      	add	sp, #16
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80075fc:	2001      	movs	r0, #1
 80075fe:	e7fb      	b.n	80075f8 <HAL_DSI_Init+0x1dc>
 8007600:	003d0900 	.word	0x003d0900

08007604 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8007604:	4770      	bx	lr

08007606 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007606:	6803      	ldr	r3, [r0, #0]
 8007608:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800760c:	07d1      	lsls	r1, r2, #31
{
 800760e:	b510      	push	{r4, lr}
 8007610:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007612:	d508      	bpl.n	8007626 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007614:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007618:	07d2      	lsls	r2, r2, #31
 800761a:	d504      	bpl.n	8007626 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800761c:	2201      	movs	r2, #1
 800761e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007622:	f7fa fc2f 	bl	8001e84 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800762c:	0791      	lsls	r1, r2, #30
 800762e:	d509      	bpl.n	8007644 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007630:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007634:	0792      	lsls	r2, r2, #30
 8007636:	d505      	bpl.n	8007644 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007638:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800763a:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800763c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007640:	f7fa fc54 	bl	8001eec <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8007644:	69a3      	ldr	r3, [r4, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d04e      	beq.n	80076e8 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800764a:	6821      	ldr	r1, [r4, #0]
 800764c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007650:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8007654:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007656:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800765a:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800765e:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007660:	b291      	uxth	r1, r2
 8007662:	b119      	cbz	r1, 800766c <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007664:	6961      	ldr	r1, [r4, #20]
 8007666:	f041 0101 	orr.w	r1, r1, #1
 800766a:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800766c:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8007670:	d003      	beq.n	800767a <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007672:	6962      	ldr	r2, [r4, #20]
 8007674:	f042 0202 	orr.w	r2, r2, #2
 8007678:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800767a:	07d8      	lsls	r0, r3, #31
 800767c:	d503      	bpl.n	8007686 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800767e:	6962      	ldr	r2, [r4, #20]
 8007680:	f042 0204 	orr.w	r2, r2, #4
 8007684:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007686:	0799      	lsls	r1, r3, #30
 8007688:	d503      	bpl.n	8007692 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800768a:	6962      	ldr	r2, [r4, #20]
 800768c:	f042 0208 	orr.w	r2, r2, #8
 8007690:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007692:	f013 0f0c 	tst.w	r3, #12
 8007696:	d003      	beq.n	80076a0 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007698:	6962      	ldr	r2, [r4, #20]
 800769a:	f042 0210 	orr.w	r2, r2, #16
 800769e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80076a0:	06da      	lsls	r2, r3, #27
 80076a2:	d503      	bpl.n	80076ac <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80076a4:	6962      	ldr	r2, [r4, #20]
 80076a6:	f042 0220 	orr.w	r2, r2, #32
 80076aa:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80076ac:	0698      	lsls	r0, r3, #26
 80076ae:	d503      	bpl.n	80076b8 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80076b0:	6962      	ldr	r2, [r4, #20]
 80076b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076b6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80076b8:	0659      	lsls	r1, r3, #25
 80076ba:	d503      	bpl.n	80076c4 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80076bc:	6962      	ldr	r2, [r4, #20]
 80076be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076c2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80076c4:	061a      	lsls	r2, r3, #24
 80076c6:	d503      	bpl.n	80076d0 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80076c8:	6962      	ldr	r2, [r4, #20]
 80076ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076ce:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80076d0:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 80076d4:	d003      	beq.n	80076de <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80076d6:	6963      	ldr	r3, [r4, #20]
 80076d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076dc:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80076de:	6963      	ldr	r3, [r4, #20]
 80076e0:	b113      	cbz	r3, 80076e8 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 80076e2:	4620      	mov	r0, r4
 80076e4:	f7ff ff8e 	bl	8007604 <HAL_DSI_ErrorCallback>
}
 80076e8:	bd10      	pop	{r4, pc}

080076ea <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80076ea:	7c02      	ldrb	r2, [r0, #16]
{
 80076ec:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80076ee:	2a01      	cmp	r2, #1
 80076f0:	d00a      	beq.n	8007708 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80076f2:	6802      	ldr	r2, [r0, #0]
 80076f4:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80076f6:	f020 0003 	bic.w	r0, r0, #3
 80076fa:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80076fc:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80076fe:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007700:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007702:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8007704:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007706:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007708:	2002      	movs	r0, #2
}
 800770a:	4770      	bx	lr

0800770c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800770c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800770e:	7c03      	ldrb	r3, [r0, #16]
{
 8007710:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007712:	2b01      	cmp	r3, #1
 8007714:	d069      	beq.n	80077ea <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007716:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007718:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800771a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800771c:	f042 0201 	orr.w	r2, r2, #1
 8007720:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007722:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800772e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	f022 0203 	bic.w	r2, r2, #3
 8007740:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	4302      	orrs	r2, r0
 8007746:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007748:	695a      	ldr	r2, [r3, #20]
 800774a:	f022 0207 	bic.w	r2, r2, #7
 800774e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007750:	6958      	ldr	r0, [r3, #20]
 8007752:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8007756:	432a      	orrs	r2, r5
 8007758:	694d      	ldr	r5, [r1, #20]
 800775a:	432a      	orrs	r2, r5
 800775c:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800775e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007760:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	f022 020f 	bic.w	r2, r2, #15
 8007768:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	4302      	orrs	r2, r0
 800776e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007770:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007774:	f022 020e 	bic.w	r2, r2, #14
 8007778:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800777c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007780:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007784:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007786:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800778a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800778c:	f36f 020f 	bfc	r2, #0, #16
 8007790:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007792:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007794:	4302      	orrs	r2, r0
 8007796:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007798:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800779c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80077a0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80077a4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80077a8:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80077ac:	432a      	orrs	r2, r5
 80077ae:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80077b0:	432a      	orrs	r2, r5
 80077b2:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80077b4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80077b6:	432a      	orrs	r2, r5
 80077b8:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80077ba:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80077bc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80077c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80077c2:	f022 0201 	bic.w	r2, r2, #1
 80077c6:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80077c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80077ca:	430a      	orrs	r2, r1
 80077cc:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80077ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80077da:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80077de:	f042 0202 	orr.w	r2, r2, #2
 80077e2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 80077e6:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80077e8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80077ea:	2002      	movs	r0, #2
 80077ec:	e7fc      	b.n	80077e8 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080077f0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80077f0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80077f2:	7c03      	ldrb	r3, [r0, #16]
{
 80077f4:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d029      	beq.n	800784e <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80077fa:	6800      	ldr	r0, [r0, #0]
 80077fc:	4b15      	ldr	r3, [pc, #84]	@ (8007854 <HAL_DSI_ConfigCommand+0x64>)
 80077fe:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8007800:	4023      	ands	r3, r4
 8007802:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007804:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8007806:	e9d1 3500 	ldrd	r3, r5, [r1]
 800780a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800780c:	688d      	ldr	r5, [r1, #8]
 800780e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8007810:	68cd      	ldr	r5, [r1, #12]
 8007812:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8007814:	690d      	ldr	r5, [r1, #16]
 8007816:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8007818:	694d      	ldr	r5, [r1, #20]
 800781a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800781c:	698d      	ldr	r5, [r1, #24]
 800781e:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8007820:	69cd      	ldr	r5, [r1, #28]
 8007822:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8007824:	6a0d      	ldr	r5, [r1, #32]
 8007826:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8007828:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800782a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800782c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800782e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8007830:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007832:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8007834:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007836:	4323      	orrs	r3, r4
 8007838:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800783a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800783c:	f023 0302 	bic.w	r3, r3, #2
 8007840:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007842:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007844:	430b      	orrs	r3, r1
 8007846:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007848:	2000      	movs	r0, #0
 800784a:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 800784c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800784e:	2002      	movs	r0, #2
 8007850:	e7fc      	b.n	800784c <HAL_DSI_ConfigCommand+0x5c>
 8007852:	bf00      	nop
 8007854:	fef080ff 	.word	0xfef080ff

08007858 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007858:	7c02      	ldrb	r2, [r0, #16]
{
 800785a:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800785c:	2a01      	cmp	r2, #1
 800785e:	d00a      	beq.n	8007876 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007860:	6802      	ldr	r2, [r0, #0]
 8007862:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007864:	f020 001f 	bic.w	r0, r0, #31
 8007868:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800786a:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800786c:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800786e:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8007870:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8007872:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007874:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007876:	2002      	movs	r0, #2
}
 8007878:	4770      	bx	lr

0800787a <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800787a:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800787c:	7c03      	ldrb	r3, [r0, #16]
{
 800787e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007880:	2b01      	cmp	r3, #1
 8007882:	d034      	beq.n	80078ee <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007884:	e9d1 0300 	ldrd	r0, r3, [r1]
 8007888:	4298      	cmp	r0, r3
 800788a:	bf38      	it	cc
 800788c:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007894:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8007898:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800789c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80078a0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80078a4:	4302      	orrs	r2, r0
 80078a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80078aa:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80078ae:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80078b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80078b6:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80078ba:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80078be:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80078c0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80078c4:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80078c6:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80078c8:	432a      	orrs	r2, r5
 80078ca:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80078cc:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80078ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80078d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80078d6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80078da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80078de:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80078e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80078e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 80078ea:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80078ec:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80078ee:	2002      	movs	r0, #2
 80078f0:	e7fc      	b.n	80078ec <HAL_DSI_ConfigPhyTimer+0x72>
	...

080078f4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80078f4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078f6:	7c03      	ldrb	r3, [r0, #16]
{
 80078f8:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d05b      	beq.n	80079b6 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80078fe:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007900:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007902:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007904:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007906:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800790a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007912:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007914:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8007916:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007918:	b292      	uxth	r2, r2
 800791a:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800791c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800791e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007922:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007924:	4a25      	ldr	r2, [pc, #148]	@ (80079bc <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8007926:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007928:	4010      	ands	r0, r2
 800792a:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800792c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800792e:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007930:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007932:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007934:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007936:	4010      	ands	r0, r2
 8007938:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800793a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800793c:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800793e:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007940:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8007942:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007946:	4010      	ands	r0, r2
 8007948:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800794c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007950:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007952:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007954:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007958:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800795c:	4010      	ands	r0, r2
 800795e:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007962:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007966:	4328      	orrs	r0, r5
 8007968:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800796c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007970:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8007974:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007978:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800797c:	698d      	ldr	r5, [r1, #24]
 800797e:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007980:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007982:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007984:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007988:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800798c:	4010      	ands	r0, r2
 800798e:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007992:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8007996:	4328      	orrs	r0, r5
 8007998:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800799c:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80079a0:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80079a2:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80079a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80079a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80079ac:	430a      	orrs	r2, r1
 80079ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80079b2:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80079b4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80079b6:	2002      	movs	r0, #2
 80079b8:	e7fc      	b.n	80079b4 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80079ba:	bf00      	nop
 80079bc:	ffff0000 	.word	0xffff0000

080079c0 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80079c0:	7c03      	ldrb	r3, [r0, #16]
{
 80079c2:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d01c      	beq.n	8007a02 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80079c8:	6802      	ldr	r2, [r0, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	6851      	ldr	r1, [r2, #4]
 80079d0:	f041 0101 	orr.w	r1, r1, #1
 80079d4:	6051      	str	r1, [r2, #4]
 80079d6:	6851      	ldr	r1, [r2, #4]
 80079d8:	f001 0101 	and.w	r1, r1, #1
 80079dc:	9100      	str	r1, [sp, #0]
 80079de:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 80079e6:	f041 0108 	orr.w	r1, r1, #8
 80079ea:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 80079ee:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80079f2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80079f4:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80079f6:	f002 0208 	and.w	r2, r2, #8
 80079fa:	9201      	str	r2, [sp, #4]
 80079fc:	9a01      	ldr	r2, [sp, #4]
}
 80079fe:	b002      	add	sp, #8
 8007a00:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007a02:	2002      	movs	r0, #2
 8007a04:	e7fb      	b.n	80079fe <HAL_DSI_Start+0x3e>

08007a06 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a06:	7c02      	ldrb	r2, [r0, #16]
{
 8007a08:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007a0a:	2a01      	cmp	r2, #1
 8007a0c:	d009      	beq.n	8007a22 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007a0e:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a10:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007a12:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8007a16:	f042 0204 	orr.w	r2, r2, #4
 8007a1a:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8007a1e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007a20:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007a22:	2002      	movs	r0, #2
}
 8007a24:	4770      	bx	lr

08007a26 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007a26:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a28:	7c05      	ldrb	r5, [r0, #16]
{
 8007a2a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007a2c:	2d01      	cmp	r5, #1
 8007a2e:	d009      	beq.n	8007a44 <HAL_DSI_ShortWrite+0x1e>
 8007a30:	2501      	movs	r5, #1
 8007a32:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007a34:	9d06      	ldr	r5, [sp, #24]
 8007a36:	9500      	str	r5, [sp, #0]
 8007a38:	f7ff fc6c 	bl	8007314 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007a40:	b003      	add	sp, #12
 8007a42:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007a44:	2002      	movs	r0, #2
 8007a46:	e7fb      	b.n	8007a40 <HAL_DSI_ShortWrite+0x1a>

08007a48 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8007a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a4e:	7c03      	ldrb	r3, [r0, #16]
{
 8007a50:	4606      	mov	r6, r0
 8007a52:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007a54:	2b01      	cmp	r3, #1
{
 8007a56:	4615      	mov	r5, r2
 8007a58:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8007a5c:	d052      	beq.n	8007b04 <HAL_DSI_LongWrite+0xbc>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a62:	f7ff fa61 	bl	8006f28 <HAL_GetTick>
 8007a66:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007a68:	6832      	ldr	r2, [r6, #0]
 8007a6a:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007a6c:	f013 0a01 	ands.w	sl, r3, #1
 8007a70:	d019      	beq.n	8007aa6 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007a72:	2c03      	cmp	r4, #3
 8007a74:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8007a76:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007a7a:	bf28      	it	cs
 8007a7c:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8007a7e:	4283      	cmp	r3, r0
 8007a80:	d11d      	bne.n	8007abe <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8007a82:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8007a84:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8007a86:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8007a8a:	bb10      	cbnz	r0, 8007ad2 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007a8c:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a8e:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8007a92:	0223      	lsls	r3, r4, #8
 8007a94:	0224      	lsls	r4, r4, #8
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8007a9c:	431d      	orrs	r5, r3
 8007a9e:	4325      	orrs	r5, r4
 8007aa0:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007aa2:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8007aa4:	e009      	b.n	8007aba <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007aa6:	f7ff fa3f 	bl	8006f28 <HAL_GetTick>
 8007aaa:	eba0 000b 	sub.w	r0, r0, fp
 8007aae:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007ab2:	d9d9      	bls.n	8007a68 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8007ab4:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007ab6:	f886 a010 	strb.w	sl, [r6, #16]
}
 8007aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8007abe:	f818 1003 	ldrb.w	r1, [r8, r3]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8007ac8:	fa01 f10c 	lsl.w	r1, r1, ip
 8007acc:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8007ad0:	e7d5      	b.n	8007a7e <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007ad2:	2804      	cmp	r0, #4
    fifoword = 0U;
 8007ad4:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007ad8:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8007ada:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007adc:	bf28      	it	cs
 8007ade:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007ae2:	f813 8001 	ldrb.w	r8, [r3, r1]
 8007ae6:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8007aea:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007aec:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8007af0:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007af2:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8007af6:	d1f4      	bne.n	8007ae2 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8007af8:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8007afc:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8007afe:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8007b02:	e7c2      	b.n	8007a8a <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8007b04:	2002      	movs	r0, #2
 8007b06:	e7d8      	b.n	8007aba <HAL_DSI_LongWrite+0x72>

08007b08 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8007b08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b0c:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007b0e:	7c03      	ldrb	r3, [r0, #16]
{
 8007b10:	4605      	mov	r5, r0
 8007b12:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8007b14:	2b01      	cmp	r3, #1
{
 8007b16:	4617      	mov	r7, r2
 8007b18:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007b1c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8007b20:	d06f      	beq.n	8007c02 <HAL_DSI_Read+0xfa>
 8007b22:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8007b24:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8007b26:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8007b28:	d90d      	bls.n	8007b46 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8007b2a:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007b2e:	2237      	movs	r2, #55	@ 0x37
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	b2f3      	uxtb	r3, r6
 8007b34:	f7ff fbee 	bl	8007314 <DSI_ShortWrite.constprop.0>
 8007b38:	b128      	cbz	r0, 8007b46 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8007b3a:	2300      	movs	r3, #0

      return HAL_ERROR;
 8007b3c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8007b3e:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8007b40:	b003      	add	sp, #12
 8007b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8007b46:	f1b9 0f06 	cmp.w	r9, #6
 8007b4a:	d10f      	bne.n	8007b6c <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8007b4e:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8007b56:	f043 0306 	orr.w	r3, r3, #6
 8007b5a:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8007b5c:	f7ff f9e4 	bl	8006f28 <HAL_GetTick>
 8007b60:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	dc27      	bgt.n	8007bb6 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8007b66:	2000      	movs	r0, #0
 8007b68:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8007b6a:	e7e9      	b.n	8007b40 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007b6c:	f1b9 0f04 	cmp.w	r9, #4
 8007b70:	d105      	bne.n	8007b7e <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b72:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007b74:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b76:	f044 0404 	orr.w	r4, r4, #4
 8007b7a:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007b7c:	e7ee      	b.n	8007b5c <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8007b7e:	f1b9 0f14 	cmp.w	r9, #20
 8007b82:	d108      	bne.n	8007b96 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007b84:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b88:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007b8a:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b8c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8007b90:	f044 0414 	orr.w	r4, r4, #20
 8007b94:	e7f1      	b.n	8007b7a <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8007b96:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8007b9a:	d1ce      	bne.n	8007b3a <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007b9c:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007ba0:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007ba2:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007ba4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007ba8:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bac:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8007bb0:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8007bb4:	e7e1      	b.n	8007b7a <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8007bb6:	682a      	ldr	r2, [r5, #0]
 8007bb8:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007bba:	f013 0310 	ands.w	r3, r3, #16
 8007bbe:	d10d      	bne.n	8007bdc <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007bc0:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8007bc2:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007bc4:	4632      	mov	r2, r6
 8007bc6:	bf28      	it	cs
 8007bc8:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8007bca:	00d9      	lsls	r1, r3, #3
 8007bcc:	fa20 f101 	lsr.w	r1, r0, r1
 8007bd0:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d1f8      	bne.n	8007bca <HAL_DSI_Read+0xc2>
 8007bd8:	4417      	add	r7, r2
 8007bda:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007bdc:	f7ff f9a4 	bl	8006f28 <HAL_GetTick>
 8007be0:	1b00      	subs	r0, r0, r4
 8007be2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007be6:	d903      	bls.n	8007bf0 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8007be8:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007bea:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007bec:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8007bee:	e7a7      	b.n	8007b40 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007bf4:	0652      	lsls	r2, r2, #25
 8007bf6:	d4b4      	bmi.n	8007b62 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8007bf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007bfc:	069b      	lsls	r3, r3, #26
 8007bfe:	d49c      	bmi.n	8007b3a <HAL_DSI_Read+0x32>
 8007c00:	e7af      	b.n	8007b62 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8007c02:	2002      	movs	r0, #2
 8007c04:	e79c      	b.n	8007b40 <HAL_DSI_Read+0x38>

08007c06 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007c06:	7c02      	ldrb	r2, [r0, #16]
{
 8007c08:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007c0a:	2a01      	cmp	r2, #1
 8007c0c:	d00f      	beq.n	8007c2e <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8007c0e:	6802      	ldr	r2, [r0, #0]
 8007c10:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007c14:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8007c18:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007c1c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007c20:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007c24:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007c26:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8007c2a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007c2c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007c2e:	2002      	movs	r0, #2
}
 8007c30:	4770      	bx	lr
	...

08007c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007c38:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c3a:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8007e00 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c3e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c42:	680a      	ldr	r2, [r1, #0]
 8007c44:	fa32 f503 	lsrs.w	r5, r2, r3
 8007c48:	d102      	bne.n	8007c50 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8007c4a:	b003      	add	sp, #12
 8007c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c50:	2501      	movs	r5, #1
 8007c52:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8007c56:	ea18 0202 	ands.w	r2, r8, r2
 8007c5a:	f000 80bb 	beq.w	8007dd4 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c5e:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c60:	2703      	movs	r7, #3
 8007c62:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c66:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c6a:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c6e:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c70:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c74:	2f01      	cmp	r7, #1
 8007c76:	d834      	bhi.n	8007ce2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8007c78:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c7a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c7e:	68cf      	ldr	r7, [r1, #12]
 8007c80:	fa07 f70e 	lsl.w	r7, r7, lr
 8007c84:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8007c88:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007c8a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c8c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c90:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8007c94:	409f      	lsls	r7, r3
 8007c96:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8007c9a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007c9c:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c9e:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ca0:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ca4:	688f      	ldr	r7, [r1, #8]
 8007ca6:	fa07 f70e 	lsl.w	r7, r7, lr
 8007caa:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8007cae:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cb0:	d119      	bne.n	8007ce6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8007cb2:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cb6:	f003 0a07 	and.w	sl, r3, #7
 8007cba:	f04f 0b0f 	mov.w	fp, #15
 8007cbe:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8007cc2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007cc6:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cca:	fa0b fb0a 	lsl.w	fp, fp, sl
 8007cce:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cd2:	690f      	ldr	r7, [r1, #16]
 8007cd4:	fa07 f70a 	lsl.w	r7, r7, sl
 8007cd8:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8007cdc:	f8c8 7020 	str.w	r7, [r8, #32]
 8007ce0:	e001      	b.n	8007ce6 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ce2:	2d03      	cmp	r5, #3
 8007ce4:	d1da      	bne.n	8007c9c <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8007ce6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ce8:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cec:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007cf0:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cf4:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8007cf8:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cfa:	d06b      	beq.n	8007dd4 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cfc:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8007d00:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d04:	f003 0c03 	and.w	ip, r3, #3
 8007d08:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d0c:	f045 0502 	orr.w	r5, r5, #2
 8007d10:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d14:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d18:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8007d1c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8007d20:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d24:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d28:	f005 0502 	and.w	r5, r5, #2
 8007d2c:	9501      	str	r5, [sp, #4]
 8007d2e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007d30:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d32:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d36:	4d31      	ldr	r5, [pc, #196]	@ (8007dfc <HAL_GPIO_Init+0x1c8>)
 8007d38:	42a8      	cmp	r0, r5
 8007d3a:	d04d      	beq.n	8007dd8 <HAL_GPIO_Init+0x1a4>
 8007d3c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d40:	42a8      	cmp	r0, r5
 8007d42:	d04b      	beq.n	8007ddc <HAL_GPIO_Init+0x1a8>
 8007d44:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d48:	42a8      	cmp	r0, r5
 8007d4a:	d049      	beq.n	8007de0 <HAL_GPIO_Init+0x1ac>
 8007d4c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d50:	42a8      	cmp	r0, r5
 8007d52:	d047      	beq.n	8007de4 <HAL_GPIO_Init+0x1b0>
 8007d54:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d58:	42a8      	cmp	r0, r5
 8007d5a:	d045      	beq.n	8007de8 <HAL_GPIO_Init+0x1b4>
 8007d5c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d60:	42a8      	cmp	r0, r5
 8007d62:	d043      	beq.n	8007dec <HAL_GPIO_Init+0x1b8>
 8007d64:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d68:	42a8      	cmp	r0, r5
 8007d6a:	d041      	beq.n	8007df0 <HAL_GPIO_Init+0x1bc>
 8007d6c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d70:	42a8      	cmp	r0, r5
 8007d72:	d03f      	beq.n	8007df4 <HAL_GPIO_Init+0x1c0>
 8007d74:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d78:	42a8      	cmp	r0, r5
 8007d7a:	d03d      	beq.n	8007df8 <HAL_GPIO_Init+0x1c4>
 8007d7c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d80:	42a8      	cmp	r0, r5
 8007d82:	bf14      	ite	ne
 8007d84:	250a      	movne	r5, #10
 8007d86:	2509      	moveq	r5, #9
 8007d88:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d8c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d90:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d94:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007d96:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8007d9a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8007d9c:	bf0c      	ite	eq
 8007d9e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007da0:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007da2:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8007da6:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8007da8:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8007daa:	bf0c      	ite	eq
 8007dac:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007dae:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007db0:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8007db4:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8007db6:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8007dba:	bf0c      	ite	eq
 8007dbc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007dbe:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dc0:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8007dc2:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007dc6:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8007dca:	bf54      	ite	pl
 8007dcc:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007dce:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007dd0:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	e734      	b.n	8007c42 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007dd8:	2500      	movs	r5, #0
 8007dda:	e7d5      	b.n	8007d88 <HAL_GPIO_Init+0x154>
 8007ddc:	2501      	movs	r5, #1
 8007dde:	e7d3      	b.n	8007d88 <HAL_GPIO_Init+0x154>
 8007de0:	2502      	movs	r5, #2
 8007de2:	e7d1      	b.n	8007d88 <HAL_GPIO_Init+0x154>
 8007de4:	2503      	movs	r5, #3
 8007de6:	e7cf      	b.n	8007d88 <HAL_GPIO_Init+0x154>
 8007de8:	2504      	movs	r5, #4
 8007dea:	e7cd      	b.n	8007d88 <HAL_GPIO_Init+0x154>
 8007dec:	2505      	movs	r5, #5
 8007dee:	e7cb      	b.n	8007d88 <HAL_GPIO_Init+0x154>
 8007df0:	2506      	movs	r5, #6
 8007df2:	e7c9      	b.n	8007d88 <HAL_GPIO_Init+0x154>
 8007df4:	2507      	movs	r5, #7
 8007df6:	e7c7      	b.n	8007d88 <HAL_GPIO_Init+0x154>
 8007df8:	2508      	movs	r5, #8
 8007dfa:	e7c5      	b.n	8007d88 <HAL_GPIO_Init+0x154>
 8007dfc:	58020000 	.word	0x58020000
 8007e00:	58024400 	.word	0x58024400

08007e04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007e08:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007e0a:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e0e:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007e12:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007e16:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8007e1a:	fa31 f302 	lsrs.w	r3, r1, r2
 8007e1e:	d101      	bne.n	8007e24 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007e24:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8007e28:	ea1c 0601 	ands.w	r6, ip, r1
 8007e2c:	d070      	beq.n	8007f10 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007e2e:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e32:	f002 0703 	and.w	r7, r2, #3
 8007e36:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8007e3a:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007e3c:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e40:	fa08 f907 	lsl.w	r9, r8, r7
 8007e44:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007e48:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8007f38 <HAL_GPIO_DeInit+0x134>)
 8007e4e:	4298      	cmp	r0, r3
 8007e50:	d060      	beq.n	8007f14 <HAL_GPIO_DeInit+0x110>
 8007e52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e56:	4298      	cmp	r0, r3
 8007e58:	d05e      	beq.n	8007f18 <HAL_GPIO_DeInit+0x114>
 8007e5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e5e:	4298      	cmp	r0, r3
 8007e60:	d05c      	beq.n	8007f1c <HAL_GPIO_DeInit+0x118>
 8007e62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e66:	4298      	cmp	r0, r3
 8007e68:	d05a      	beq.n	8007f20 <HAL_GPIO_DeInit+0x11c>
 8007e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e6e:	4298      	cmp	r0, r3
 8007e70:	d058      	beq.n	8007f24 <HAL_GPIO_DeInit+0x120>
 8007e72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e76:	4298      	cmp	r0, r3
 8007e78:	d056      	beq.n	8007f28 <HAL_GPIO_DeInit+0x124>
 8007e7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e7e:	4298      	cmp	r0, r3
 8007e80:	d054      	beq.n	8007f2c <HAL_GPIO_DeInit+0x128>
 8007e82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e86:	4298      	cmp	r0, r3
 8007e88:	d052      	beq.n	8007f30 <HAL_GPIO_DeInit+0x12c>
 8007e8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e8e:	4298      	cmp	r0, r3
 8007e90:	d050      	beq.n	8007f34 <HAL_GPIO_DeInit+0x130>
 8007e92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e96:	4298      	cmp	r0, r3
 8007e98:	bf14      	ite	ne
 8007e9a:	230a      	movne	r3, #10
 8007e9c:	2309      	moveq	r3, #9
 8007e9e:	40bb      	lsls	r3, r7
 8007ea0:	4573      	cmp	r3, lr
 8007ea2:	d117      	bne.n	8007ed4 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007ea4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007ea8:	ea23 0306 	bic.w	r3, r3, r6
 8007eac:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007eb0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8007eb4:	ea23 0306 	bic.w	r3, r3, r6
 8007eb8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007ebc:	6863      	ldr	r3, [r4, #4]
 8007ebe:	ea23 0306 	bic.w	r3, r3, r6
 8007ec2:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	ea23 0306 	bic.w	r3, r3, r6
 8007eca:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007ecc:	68ab      	ldr	r3, [r5, #8]
 8007ece:	ea23 0309 	bic.w	r3, r3, r9
 8007ed2:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007ed4:	0053      	lsls	r3, r2, #1
 8007ed6:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007ed8:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007eda:	fa0b f303 	lsl.w	r3, fp, r3
 8007ede:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007ee2:	431d      	orrs	r5, r3
 8007ee4:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007ee6:	f002 0507 	and.w	r5, r2, #7
 8007eea:	6a37      	ldr	r7, [r6, #32]
 8007eec:	00ad      	lsls	r5, r5, #2
 8007eee:	fa08 f505 	lsl.w	r5, r8, r5
 8007ef2:	ea27 0705 	bic.w	r7, r7, r5
 8007ef6:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ef8:	68c5      	ldr	r5, [r0, #12]
 8007efa:	ea25 0503 	bic.w	r5, r5, r3
 8007efe:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f00:	6845      	ldr	r5, [r0, #4]
 8007f02:	ea25 050c 	bic.w	r5, r5, ip
 8007f06:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f08:	6885      	ldr	r5, [r0, #8]
 8007f0a:	ea25 0303 	bic.w	r3, r5, r3
 8007f0e:	6083      	str	r3, [r0, #8]
    position++;
 8007f10:	3201      	adds	r2, #1
 8007f12:	e782      	b.n	8007e1a <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007f14:	2300      	movs	r3, #0
 8007f16:	e7c2      	b.n	8007e9e <HAL_GPIO_DeInit+0x9a>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e7c0      	b.n	8007e9e <HAL_GPIO_DeInit+0x9a>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e7be      	b.n	8007e9e <HAL_GPIO_DeInit+0x9a>
 8007f20:	2303      	movs	r3, #3
 8007f22:	e7bc      	b.n	8007e9e <HAL_GPIO_DeInit+0x9a>
 8007f24:	2304      	movs	r3, #4
 8007f26:	e7ba      	b.n	8007e9e <HAL_GPIO_DeInit+0x9a>
 8007f28:	2305      	movs	r3, #5
 8007f2a:	e7b8      	b.n	8007e9e <HAL_GPIO_DeInit+0x9a>
 8007f2c:	2306      	movs	r3, #6
 8007f2e:	e7b6      	b.n	8007e9e <HAL_GPIO_DeInit+0x9a>
 8007f30:	2307      	movs	r3, #7
 8007f32:	e7b4      	b.n	8007e9e <HAL_GPIO_DeInit+0x9a>
 8007f34:	2308      	movs	r3, #8
 8007f36:	e7b2      	b.n	8007e9e <HAL_GPIO_DeInit+0x9a>
 8007f38:	58020000 	.word	0x58020000

08007f3c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f3c:	6903      	ldr	r3, [r0, #16]
 8007f3e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007f40:	bf14      	ite	ne
 8007f42:	2001      	movne	r0, #1
 8007f44:	2000      	moveq	r0, #0
 8007f46:	4770      	bx	lr

08007f48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f48:	b10a      	cbz	r2, 8007f4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f4a:	6181      	str	r1, [r0, #24]
  }
}
 8007f4c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f4e:	0409      	lsls	r1, r1, #16
 8007f50:	e7fb      	b.n	8007f4a <HAL_GPIO_WritePin+0x2>

08007f52 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007f52:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007f54:	ea01 0203 	and.w	r2, r1, r3
 8007f58:	ea21 0103 	bic.w	r1, r1, r3
 8007f5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f60:	6181      	str	r1, [r0, #24]
}
 8007f62:	4770      	bx	lr

08007f64 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007f64:	4b04      	ldr	r3, [pc, #16]	@ (8007f78 <HAL_HSEM_FastTake+0x14>)
 8007f66:	3020      	adds	r0, #32
 8007f68:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007f6c:	4b03      	ldr	r3, [pc, #12]	@ (8007f7c <HAL_HSEM_FastTake+0x18>)
 8007f6e:	1ac0      	subs	r0, r0, r3
 8007f70:	bf18      	it	ne
 8007f72:	2001      	movne	r0, #1
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	58026400 	.word	0x58026400
 8007f7c:	80000300 	.word	0x80000300

08007f80 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007f80:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8007f84:	4b01      	ldr	r3, [pc, #4]	@ (8007f8c <HAL_HSEM_Release+0xc>)
 8007f86:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007f8a:	4770      	bx	lr
 8007f8c:	58026400 	.word	0x58026400

08007f90 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f90:	6803      	ldr	r3, [r0, #0]
 8007f92:	699a      	ldr	r2, [r3, #24]
 8007f94:	0791      	lsls	r1, r2, #30
 8007f96:	d501      	bpl.n	8007f9c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f98:	2200      	movs	r2, #0
 8007f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	07d2      	lsls	r2, r2, #31
 8007fa0:	d403      	bmi.n	8007faa <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007fa2:	699a      	ldr	r2, [r3, #24]
 8007fa4:	f042 0201 	orr.w	r2, r2, #1
 8007fa8:	619a      	str	r2, [r3, #24]
  }
}
 8007faa:	4770      	bx	lr

08007fac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007fac:	b530      	push	{r4, r5, lr}
 8007fae:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fb0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007fb4:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fb6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007fb8:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8007fbe:	4a05      	ldr	r2, [pc, #20]	@ (8007fd4 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fc0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007fc2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8007fca:	ea20 0002 	bic.w	r0, r0, r2
 8007fce:	4303      	orrs	r3, r0
 8007fd0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007fd2:	bd30      	pop	{r4, r5, pc}
 8007fd4:	03ff63ff 	.word	0x03ff63ff

08007fd8 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8007fd8:	6803      	ldr	r3, [r0, #0]
{
 8007fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8007fde:	699c      	ldr	r4, [r3, #24]
{
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	460f      	mov	r7, r1
 8007fe4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007fe6:	f014 0410 	ands.w	r4, r4, #16
 8007fea:	d06f      	beq.n	80080cc <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8007fec:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fee:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8007ff0:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ff2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	0690      	lsls	r0, r2, #26
 8007ffa:	d461      	bmi.n	80080c0 <I2C_IsErrorOccurred+0xe8>
 8007ffc:	f1b8 0f00 	cmp.w	r8, #0
 8008000:	d035      	beq.n	800806e <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8008002:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8008006:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8008008:	682e      	ldr	r6, [r5, #0]
 800800a:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800800c:	05d9      	lsls	r1, r3, #23
 800800e:	d505      	bpl.n	800801c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008010:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8008014:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8008018:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800801a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800801c:	055a      	lsls	r2, r3, #21
 800801e:	d505      	bpl.n	800802c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008020:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008024:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8008028:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800802a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800802c:	059b      	lsls	r3, r3, #22
 800802e:	d54f      	bpl.n	80080d0 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008030:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008034:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008038:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800803a:	4628      	mov	r0, r5
 800803c:	f7ff ffa8 	bl	8007f90 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8008040:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8008042:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008044:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8008048:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800804c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8008050:	f023 0301 	bic.w	r3, r3, #1
 8008054:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8008056:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8008058:	4323      	orrs	r3, r4
 800805a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800805c:	2320      	movs	r3, #32
 800805e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008062:	2300      	movs	r3, #0
 8008064:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8008068:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800806c:	e032      	b.n	80080d4 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800806e:	1c7a      	adds	r2, r7, #1
 8008070:	d0c1      	beq.n	8007ff6 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008072:	f7fe ff59 	bl	8006f28 <HAL_GetTick>
 8008076:	1b80      	subs	r0, r0, r6
 8008078:	42b8      	cmp	r0, r7
 800807a:	d801      	bhi.n	8008080 <I2C_IsErrorOccurred+0xa8>
 800807c:	2f00      	cmp	r7, #0
 800807e:	d1b9      	bne.n	8007ff4 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8008084:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008088:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800808a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800808c:	0400      	lsls	r0, r0, #16
 800808e:	d50a      	bpl.n	80080a6 <I2C_IsErrorOccurred+0xce>
 8008090:	0449      	lsls	r1, r1, #17
 8008092:	d408      	bmi.n	80080a6 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8008094:	2a20      	cmp	r2, #32
 8008096:	d006      	beq.n	80080a6 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800809e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80080a0:	f7fe ff42 	bl	8006f28 <HAL_GetTick>
 80080a4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080a6:	682b      	ldr	r3, [r5, #0]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	069b      	lsls	r3, r3, #26
 80080ac:	d4a2      	bmi.n	8007ff4 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80080ae:	f7fe ff3b 	bl	8006f28 <HAL_GetTick>
 80080b2:	1b80      	subs	r0, r0, r6
 80080b4:	2819      	cmp	r0, #25
 80080b6:	d9f6      	bls.n	80080a6 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80080b8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80080ba:	f04f 0801 	mov.w	r8, #1
 80080be:	e799      	b.n	8007ff4 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80080c0:	f1b8 0f00 	cmp.w	r8, #0
 80080c4:	d19d      	bne.n	8008002 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080c6:	2220      	movs	r2, #32
 80080c8:	61da      	str	r2, [r3, #28]
 80080ca:	e79a      	b.n	8008002 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80080cc:	4620      	mov	r0, r4
 80080ce:	e79b      	b.n	8008008 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d1b2      	bne.n	800803a <I2C_IsErrorOccurred+0x62>
}
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080080d8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	4604      	mov	r4, r0
 80080dc:	460d      	mov	r5, r1
 80080de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	079b      	lsls	r3, r3, #30
 80080e6:	d501      	bpl.n	80080ec <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80080e8:	2000      	movs	r0, #0
 80080ea:	e01f      	b.n	800812c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ec:	4632      	mov	r2, r6
 80080ee:	4629      	mov	r1, r5
 80080f0:	4620      	mov	r0, r4
 80080f2:	f7ff ff71 	bl	8007fd8 <I2C_IsErrorOccurred>
 80080f6:	b9c0      	cbnz	r0, 800812a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80080f8:	1c6a      	adds	r2, r5, #1
 80080fa:	d0f1      	beq.n	80080e0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080fc:	f7fe ff14 	bl	8006f28 <HAL_GetTick>
 8008100:	1b80      	subs	r0, r0, r6
 8008102:	42a8      	cmp	r0, r5
 8008104:	d801      	bhi.n	800810a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8008106:	2d00      	cmp	r5, #0
 8008108:	d1ea      	bne.n	80080e0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f013 0302 	ands.w	r3, r3, #2
 8008112:	d1e5      	bne.n	80080e0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008114:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8008116:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800811a:	f042 0220 	orr.w	r2, r2, #32
 800811e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008120:	2220      	movs	r2, #32
 8008122:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008126:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800812a:	2001      	movs	r0, #1
}
 800812c:	bd70      	pop	{r4, r5, r6, pc}

0800812e <I2C_WaitOnFlagUntilTimeout>:
{
 800812e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008136:	4604      	mov	r4, r0
 8008138:	460f      	mov	r7, r1
 800813a:	4616      	mov	r6, r2
 800813c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	ea37 0303 	bics.w	r3, r7, r3
 8008146:	bf0c      	ite	eq
 8008148:	2301      	moveq	r3, #1
 800814a:	2300      	movne	r3, #0
 800814c:	42b3      	cmp	r3, r6
 800814e:	d001      	beq.n	8008154 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8008150:	2000      	movs	r0, #0
 8008152:	e025      	b.n	80081a0 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008154:	4642      	mov	r2, r8
 8008156:	4629      	mov	r1, r5
 8008158:	4620      	mov	r0, r4
 800815a:	f7ff ff3d 	bl	8007fd8 <I2C_IsErrorOccurred>
 800815e:	b9f0      	cbnz	r0, 800819e <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8008160:	1c6b      	adds	r3, r5, #1
 8008162:	d0ec      	beq.n	800813e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008164:	f7fe fee0 	bl	8006f28 <HAL_GetTick>
 8008168:	eba0 0008 	sub.w	r0, r0, r8
 800816c:	42a8      	cmp	r0, r5
 800816e:	d801      	bhi.n	8008174 <I2C_WaitOnFlagUntilTimeout+0x46>
 8008170:	2d00      	cmp	r5, #0
 8008172:	d1e4      	bne.n	800813e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	ea37 0303 	bics.w	r3, r7, r3
 800817c:	bf0c      	ite	eq
 800817e:	2301      	moveq	r3, #1
 8008180:	2300      	movne	r3, #0
 8008182:	42b3      	cmp	r3, r6
 8008184:	d1db      	bne.n	800813e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008186:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008188:	f043 0320 	orr.w	r3, r3, #32
 800818c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800818e:	2320      	movs	r3, #32
 8008190:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008194:	2300      	movs	r3, #0
 8008196:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800819a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800819e:	2001      	movs	r0, #1
}
 80081a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
 80081aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	069b      	lsls	r3, r3, #26
 80081b2:	d501      	bpl.n	80081b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80081b4:	2000      	movs	r0, #0
 80081b6:	e01d      	b.n	80081f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081b8:	4632      	mov	r2, r6
 80081ba:	4629      	mov	r1, r5
 80081bc:	4620      	mov	r0, r4
 80081be:	f7ff ff0b 	bl	8007fd8 <I2C_IsErrorOccurred>
 80081c2:	b9b0      	cbnz	r0, 80081f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081c4:	f7fe feb0 	bl	8006f28 <HAL_GetTick>
 80081c8:	1b80      	subs	r0, r0, r6
 80081ca:	42a8      	cmp	r0, r5
 80081cc:	d801      	bhi.n	80081d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80081ce:	2d00      	cmp	r5, #0
 80081d0:	d1ec      	bne.n	80081ac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f013 0320 	ands.w	r3, r3, #32
 80081da:	d1e7      	bne.n	80081ac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081dc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80081de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081e2:	f042 0220 	orr.w	r2, r2, #32
 80081e6:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081e8:	2220      	movs	r2, #32
 80081ea:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80081f2:	2001      	movs	r0, #1
}
 80081f4:	bd70      	pop	{r4, r5, r6, pc}

080081f6 <HAL_I2C_MspInit>:
}
 80081f6:	4770      	bx	lr

080081f8 <HAL_I2C_Init>:
{
 80081f8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80081fa:	4604      	mov	r4, r0
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d04e      	beq.n	800829e <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008200:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008204:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008208:	b91b      	cbnz	r3, 8008212 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800820a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800820e:	f7ff fff2 	bl	80081f6 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008212:	2324      	movs	r3, #36	@ 0x24
 8008214:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f022 0201 	bic.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008222:	6862      	ldr	r2, [r4, #4]
 8008224:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008228:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008230:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008232:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008236:	2901      	cmp	r1, #1
 8008238:	d106      	bne.n	8008248 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800823a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800823e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008246:	e007      	b.n	8008258 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008248:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800824c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800824e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008250:	d1f6      	bne.n	8008240 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008258:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800825a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8008262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008266:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800826e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008270:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8008274:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008276:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008278:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800827c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800827e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8008282:	430a      	orrs	r2, r1
 8008284:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	f042 0201 	orr.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800828e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008290:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008292:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008296:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008298:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800829c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800829e:	2001      	movs	r0, #1
 80082a0:	e7fc      	b.n	800829c <HAL_I2C_Init+0xa4>

080082a2 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80082a2:	4770      	bx	lr

080082a4 <HAL_I2C_DeInit>:
{
 80082a4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80082a6:	4604      	mov	r4, r0
 80082a8:	b198      	cbz	r0, 80082d2 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80082aa:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80082ac:	2324      	movs	r3, #36	@ 0x24
 80082ae:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80082b2:	6813      	ldr	r3, [r2, #0]
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80082ba:	f7ff fff2 	bl	80082a2 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082be:	2000      	movs	r0, #0
 80082c0:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 80082c2:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80082c6:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082ca:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082cc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80082d0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80082d2:	2001      	movs	r0, #1
 80082d4:	e7fc      	b.n	80082d0 <HAL_I2C_DeInit+0x2c>
	...

080082d8 <HAL_I2C_Mem_Write>:
{
 80082d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80082de:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80082e2:	4604      	mov	r4, r0
 80082e4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80082e6:	2b20      	cmp	r3, #32
{
 80082e8:	4616      	mov	r6, r2
 80082ea:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80082ee:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80082f2:	f040 80c6 	bne.w	8008482 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 80082f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082f8:	b113      	cbz	r3, 8008300 <HAL_I2C_Mem_Write+0x28>
 80082fa:	f1ba 0f00 	cmp.w	sl, #0
 80082fe:	d106      	bne.n	800830e <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008304:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008306:	2001      	movs	r0, #1
}
 8008308:	b003      	add	sp, #12
 800830a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800830e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008312:	2b01      	cmp	r3, #1
 8008314:	f000 80b5 	beq.w	8008482 <HAL_I2C_Mem_Write+0x1aa>
 8008318:	f04f 0b01 	mov.w	fp, #1
 800831c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008320:	f7fe fe02 	bl	8006f28 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008324:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8008326:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008328:	9000      	str	r0, [sp, #0]
 800832a:	465a      	mov	r2, fp
 800832c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008330:	4620      	mov	r0, r4
 8008332:	f7ff fefc 	bl	800812e <I2C_WaitOnFlagUntilTimeout>
 8008336:	2800      	cmp	r0, #0
 8008338:	d1e5      	bne.n	8008306 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800833a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800833c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800833e:	fa5f f289 	uxtb.w	r2, r9
 8008342:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008344:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008348:	2340      	movs	r3, #64	@ 0x40
 800834a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800834e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008350:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008352:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008354:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008356:	4b4c      	ldr	r3, [pc, #304]	@ (8008488 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8008358:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008362:	f7ff fe23 	bl	8007fac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008366:	462a      	mov	r2, r5
 8008368:	4641      	mov	r1, r8
 800836a:	4620      	mov	r0, r4
 800836c:	f7ff feb4 	bl	80080d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008370:	bb18      	cbnz	r0, 80083ba <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008372:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008376:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008378:	d115      	bne.n	80083a6 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800837a:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800837c:	2200      	movs	r2, #0
 800837e:	2180      	movs	r1, #128	@ 0x80
 8008380:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008382:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008384:	4643      	mov	r3, r8
 8008386:	9500      	str	r5, [sp, #0]
 8008388:	f7ff fed1 	bl	800812e <I2C_WaitOnFlagUntilTimeout>
 800838c:	b9a8      	cbnz	r0, 80083ba <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800838e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008390:	b29b      	uxth	r3, r3
 8008392:	2bff      	cmp	r3, #255	@ 0xff
 8008394:	d815      	bhi.n	80083c2 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008396:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008398:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800839c:	b292      	uxth	r2, r2
 800839e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80083a0:	b2d2      	uxtb	r2, r2
 80083a2:	9000      	str	r0, [sp, #0]
 80083a4:	e012      	b.n	80083cc <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083a6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083a8:	4641      	mov	r1, r8
 80083aa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083ac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ae:	462a      	mov	r2, r5
 80083b0:	f7ff fe92 	bl	80080d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80083b4:	b908      	cbnz	r0, 80083ba <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	e7df      	b.n	800837a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80083ba:	2300      	movs	r3, #0
 80083bc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80083c0:	e7a1      	b.n	8008306 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083c2:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80083c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083c8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80083ca:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80083cc:	4639      	mov	r1, r7
 80083ce:	4620      	mov	r0, r4
 80083d0:	f7ff fdec 	bl	8007fac <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083d4:	462a      	mov	r2, r5
 80083d6:	4641      	mov	r1, r8
 80083d8:	4620      	mov	r0, r4
 80083da:	f7ff fe7d 	bl	80080d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d191      	bne.n	8008306 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80083ea:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80083ec:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80083ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80083f0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80083f2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80083f4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80083f6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80083f8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80083fa:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80083fe:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008400:	b29b      	uxth	r3, r3
 8008402:	b1b3      	cbz	r3, 8008432 <HAL_I2C_Mem_Write+0x15a>
 8008404:	b9aa      	cbnz	r2, 8008432 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008406:	4643      	mov	r3, r8
 8008408:	2180      	movs	r1, #128	@ 0x80
 800840a:	4620      	mov	r0, r4
 800840c:	9500      	str	r5, [sp, #0]
 800840e:	f7ff fe8e 	bl	800812e <I2C_WaitOnFlagUntilTimeout>
 8008412:	2800      	cmp	r0, #0
 8008414:	f47f af77 	bne.w	8008306 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008418:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800841a:	b29b      	uxth	r3, r3
 800841c:	2bff      	cmp	r3, #255	@ 0xff
 800841e:	d928      	bls.n	8008472 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008420:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008422:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008426:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008428:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800842a:	4639      	mov	r1, r7
 800842c:	4620      	mov	r0, r4
 800842e:	f7ff fdbd 	bl	8007fac <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008432:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008434:	b29b      	uxth	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1cc      	bne.n	80083d4 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800843a:	462a      	mov	r2, r5
 800843c:	4641      	mov	r1, r8
 800843e:	4620      	mov	r0, r4
 8008440:	f7ff feb0 	bl	80081a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008444:	2800      	cmp	r0, #0
 8008446:	f47f af5e 	bne.w	8008306 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	2120      	movs	r1, #32
 800844e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008456:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800845a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800845e:	f022 0201 	bic.w	r2, r2, #1
 8008462:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008464:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008468:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800846c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008470:	e74a      	b.n	8008308 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008472:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008474:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008478:	b292      	uxth	r2, r2
 800847a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800847c:	b2d2      	uxtb	r2, r2
 800847e:	9000      	str	r0, [sp, #0]
 8008480:	e7d3      	b.n	800842a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8008482:	2002      	movs	r0, #2
 8008484:	e740      	b.n	8008308 <HAL_I2C_Mem_Write+0x30>
 8008486:	bf00      	nop
 8008488:	80002000 	.word	0x80002000

0800848c <HAL_I2C_Mem_Read>:
{
 800848c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008492:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008496:	4604      	mov	r4, r0
 8008498:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800849a:	2b20      	cmp	r3, #32
{
 800849c:	4616      	mov	r6, r2
 800849e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80084a2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80084a6:	f040 80c9 	bne.w	800863c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80084aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084ac:	b113      	cbz	r3, 80084b4 <HAL_I2C_Mem_Read+0x28>
 80084ae:	f1ba 0f00 	cmp.w	sl, #0
 80084b2:	d106      	bne.n	80084c2 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80084b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084b8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80084ba:	2001      	movs	r0, #1
}
 80084bc:	b003      	add	sp, #12
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80084c2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	f000 80b8 	beq.w	800863c <HAL_I2C_Mem_Read+0x1b0>
 80084cc:	f04f 0b01 	mov.w	fp, #1
 80084d0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80084d4:	f7fe fd28 	bl	8006f28 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80084d8:	2319      	movs	r3, #25
 80084da:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80084dc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80084de:	465a      	mov	r2, fp
 80084e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80084e4:	4620      	mov	r0, r4
 80084e6:	f7ff fe22 	bl	800812e <I2C_WaitOnFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d1e4      	bne.n	80084ba <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084f0:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 80084f2:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80084f4:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084f6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084fa:	2240      	movs	r2, #64	@ 0x40
 80084fc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008500:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008502:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008504:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008506:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008508:	4a4d      	ldr	r2, [pc, #308]	@ (8008640 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800850a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800850e:	9200      	str	r2, [sp, #0]
 8008510:	fa5f f289 	uxtb.w	r2, r9
 8008514:	f7ff fd4a 	bl	8007fac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008518:	462a      	mov	r2, r5
 800851a:	4641      	mov	r1, r8
 800851c:	4620      	mov	r0, r4
 800851e:	f7ff fddb 	bl	80080d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008522:	bb20      	cbnz	r0, 800856e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008524:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008528:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800852a:	d116      	bne.n	800855a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800852c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800852e:	2200      	movs	r2, #0
 8008530:	2140      	movs	r1, #64	@ 0x40
 8008532:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008534:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008536:	4643      	mov	r3, r8
 8008538:	9500      	str	r5, [sp, #0]
 800853a:	f7ff fdf8 	bl	800812e <I2C_WaitOnFlagUntilTimeout>
 800853e:	b9b0      	cbnz	r0, 800856e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008540:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008542:	b29b      	uxth	r3, r3
 8008544:	2bff      	cmp	r3, #255	@ 0xff
 8008546:	4b3f      	ldr	r3, [pc, #252]	@ (8008644 <HAL_I2C_Mem_Read+0x1b8>)
 8008548:	d815      	bhi.n	8008576 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800854a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800854c:	b292      	uxth	r2, r2
 800854e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008550:	b2d2      	uxtb	r2, r2
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008558:	e012      	b.n	8008580 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800855a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800855c:	4641      	mov	r1, r8
 800855e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008560:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008562:	462a      	mov	r2, r5
 8008564:	f7ff fdb8 	bl	80080d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008568:	b908      	cbnz	r0, 800856e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	e7de      	b.n	800852c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800856e:	2300      	movs	r3, #0
 8008570:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008574:	e7a1      	b.n	80084ba <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008576:	22ff      	movs	r2, #255	@ 0xff
 8008578:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008580:	4639      	mov	r1, r7
 8008582:	4620      	mov	r0, r4
 8008584:	f7ff fd12 	bl	8007fac <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008588:	4643      	mov	r3, r8
 800858a:	2200      	movs	r2, #0
 800858c:	2104      	movs	r1, #4
 800858e:	4620      	mov	r0, r4
 8008590:	9500      	str	r5, [sp, #0]
 8008592:	f7ff fdcc 	bl	800812e <I2C_WaitOnFlagUntilTimeout>
 8008596:	2800      	cmp	r0, #0
 8008598:	d18f      	bne.n	80084ba <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800859e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80085a0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80085a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80085a4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80085a6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80085a8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80085aa:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80085ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80085ae:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80085b0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80085b2:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	b1b3      	cbz	r3, 80085ec <HAL_I2C_Mem_Read+0x160>
 80085be:	b9aa      	cbnz	r2, 80085ec <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80085c0:	4643      	mov	r3, r8
 80085c2:	2180      	movs	r1, #128	@ 0x80
 80085c4:	4620      	mov	r0, r4
 80085c6:	9500      	str	r5, [sp, #0]
 80085c8:	f7ff fdb1 	bl	800812e <I2C_WaitOnFlagUntilTimeout>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	f47f af74 	bne.w	80084ba <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2bff      	cmp	r3, #255	@ 0xff
 80085d8:	d928      	bls.n	800862c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80085da:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80085dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80085e0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80085e2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085e4:	4639      	mov	r1, r7
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7ff fce0 	bl	8007fac <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80085ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1c9      	bne.n	8008588 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085f4:	462a      	mov	r2, r5
 80085f6:	4641      	mov	r1, r8
 80085f8:	4620      	mov	r0, r4
 80085fa:	f7ff fdd3 	bl	80081a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80085fe:	2800      	cmp	r0, #0
 8008600:	f47f af5b 	bne.w	80084ba <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	2120      	movs	r1, #32
 8008608:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008610:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008614:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008618:	f022 0201 	bic.w	r2, r2, #1
 800861c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800861e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008622:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008626:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800862a:	e747      	b.n	80084bc <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800862c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800862e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008632:	b292      	uxth	r2, r2
 8008634:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	9000      	str	r0, [sp, #0]
 800863a:	e7d3      	b.n	80085e4 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800863c:	2002      	movs	r0, #2
 800863e:	e73d      	b.n	80084bc <HAL_I2C_Mem_Read+0x30>
 8008640:	80002000 	.word	0x80002000
 8008644:	80002400 	.word	0x80002400

08008648 <HAL_I2C_GetState>:
  return hi2c->State;
 8008648:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800864c:	4770      	bx	lr

0800864e <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800864e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8008650:	4770      	bx	lr

08008652 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008652:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008654:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008658:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800865a:	2a20      	cmp	r2, #32
 800865c:	b2d4      	uxtb	r4, r2
 800865e:	d11c      	bne.n	800869a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008660:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008664:	2a01      	cmp	r2, #1
 8008666:	d018      	beq.n	800869a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008668:	2224      	movs	r2, #36	@ 0x24
 800866a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800866e:	6802      	ldr	r2, [r0, #0]
 8008670:	6810      	ldr	r0, [r2, #0]
 8008672:	f020 0001 	bic.w	r0, r0, #1
 8008676:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008678:	6810      	ldr	r0, [r2, #0]
 800867a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800867e:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008680:	6810      	ldr	r0, [r2, #0]
 8008682:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008684:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8008686:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008688:	6811      	ldr	r1, [r2, #0]
 800868a:	f041 0101 	orr.w	r1, r1, #1
 800868e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008690:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008694:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008698:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800869a:	2002      	movs	r0, #2
 800869c:	e7fc      	b.n	8008698 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800869e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800869e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086a0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80086a4:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80086a6:	2a20      	cmp	r2, #32
 80086a8:	b2d4      	uxtb	r4, r2
 80086aa:	d11b      	bne.n	80086e4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086ac:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80086b0:	2a01      	cmp	r2, #1
 80086b2:	d017      	beq.n	80086e4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086b4:	2224      	movs	r2, #36	@ 0x24
 80086b6:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086ba:	6802      	ldr	r2, [r0, #0]
 80086bc:	6810      	ldr	r0, [r2, #0]
 80086be:	f020 0001 	bic.w	r0, r0, #1
 80086c2:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80086c4:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086c6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086ca:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086ce:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 80086d0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80086d2:	6811      	ldr	r1, [r2, #0]
 80086d4:	f041 0101 	orr.w	r1, r1, #1
 80086d8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80086da:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80086de:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80086e2:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80086e4:	2002      	movs	r0, #2
 80086e6:	e7fc      	b.n	80086e2 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080086e8 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80086e8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 80086ea:	2401      	movs	r4, #1
 80086ec:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 80086ee:	2500      	movs	r5, #0
 80086f0:	194e      	adds	r6, r1, r5
 80086f2:	443d      	add	r5, r7
 80086f4:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 80086f6:	42be      	cmp	r6, r7
 80086f8:	d112      	bne.n	8008720 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 80086fa:	2c10      	cmp	r4, #16
 80086fc:	d108      	bne.n	8008710 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 80086fe:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008700:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8008702:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8008704:	601d      	str	r5, [r3, #0]
  p = 0;
 8008706:	4623      	mov	r3, r4
  si = Huffsize[0];
 8008708:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800870a:	5cc8      	ldrb	r0, [r1, r3]
 800870c:	b9d8      	cbnz	r0, 8008746 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800870e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8008710:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8008712:	3401      	adds	r4, #1
 8008714:	197e      	adds	r6, r7, r5
 8008716:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800871a:	d9e9      	bls.n	80086f0 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800871c:	2001      	movs	r0, #1
 800871e:	e7f6      	b.n	800870e <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8008720:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8008724:	e7e7      	b.n	80086f6 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8008726:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800872a:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800872c:	5cc8      	ldrb	r0, [r1, r3]
 800872e:	19dc      	adds	r4, r3, r7
 8008730:	42a8      	cmp	r0, r5
 8008732:	d0f8      	beq.n	8008726 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8008734:	2d1f      	cmp	r5, #31
 8008736:	d8f1      	bhi.n	800871c <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008738:	fa06 f005 	lsl.w	r0, r6, r5
 800873c:	42a0      	cmp	r0, r4
 800873e:	d9ed      	bls.n	800871c <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8008740:	0064      	lsls	r4, r4, #1
    si++;
 8008742:	3501      	adds	r5, #1
 8008744:	e7e1      	b.n	800870a <JPEG_Bits_To_SizeCodes+0x22>
 8008746:	1ae7      	subs	r7, r4, r3
 8008748:	e7f0      	b.n	800872c <JPEG_Bits_To_SizeCodes+0x44>

0800874a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800874a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800874c:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8008750:	460d      	mov	r5, r1
 8008752:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008754:	ab01      	add	r3, sp, #4
 8008756:	aa43      	add	r2, sp, #268	@ 0x10c
 8008758:	a902      	add	r1, sp, #8
 800875a:	f7ff ffc5 	bl	80086e8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800875e:	b940      	cbnz	r0, 8008772 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
 8008760:	9e01      	ldr	r6, [sp, #4]
 8008762:	4613      	mov	r3, r2
 8008764:	460a      	mov	r2, r1
 8008766:	f104 010f 	add.w	r1, r4, #15
 800876a:	360f      	adds	r6, #15
 800876c:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800876e:	42a1      	cmp	r1, r4
 8008770:	d102      	bne.n	8008778 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008772:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8008776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8008778:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800877c:	2e0b      	cmp	r6, #11
 800877e:	d80a      	bhi.n	8008796 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008780:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8008784:	f853 cb04 	ldr.w	ip, [r3], #4
 8008788:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800878c:	f812 7b01 	ldrb.w	r7, [r2], #1
 8008790:	3f01      	subs	r7, #1
 8008792:	55af      	strb	r7, [r5, r6]
      k++;
 8008794:	e7eb      	b.n	800876e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008796:	2001      	movs	r0, #1
 8008798:	e7eb      	b.n	8008772 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

0800879a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800879a:	4603      	mov	r3, r0
 800879c:	4608      	mov	r0, r1
 800879e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80087a0:	681c      	ldr	r4, [r3, #0]
{
 80087a2:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80087a4:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d125      	bne.n	80087f8 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80087ac:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80087b0:	a901      	add	r1, sp, #4
 80087b2:	f7ff ffca 	bl	800874a <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80087b6:	b9e8      	cbnz	r0, 80087f4 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 80087b8:	aa01      	add	r2, sp, #4
 80087ba:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 80087be:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 80087c2:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 80087c4:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80087c6:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80087c8:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 80087ca:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80087cc:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 80087d0:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80087d2:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80087d4:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80087d8:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80087dc:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80087de:	7b13      	ldrb	r3, [r2, #12]
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80087e6:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80087e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80087ec:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80087f0:	42b4      	cmp	r4, r6
 80087f2:	d1e9      	bne.n	80087c8 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80087f4:	b011      	add	sp, #68	@ 0x44
 80087f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80087f8:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d102      	bne.n	8008806 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008800:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8008804:	e7d4      	b.n	80087b0 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8008806:	2001      	movs	r0, #1
 8008808:	e7f4      	b.n	80087f4 <JPEG_Set_HuffDC_Mem+0x5a>

0800880a <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800880a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800880e:	6804      	ldr	r4, [r0, #0]
{
 8008810:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8008814:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008816:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800881a:	429a      	cmp	r2, r3
 800881c:	d149      	bne.n	80088b2 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800881e:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008822:	466b      	mov	r3, sp
 8008824:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8008828:	a901      	add	r1, sp, #4
 800882a:	4630      	mov	r0, r6
 800882c:	f7ff ff5c 	bl	80086e8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8008830:	2800      	cmp	r0, #0
 8008832:	d13a      	bne.n	80088aa <JPEG_Set_HuffAC_Mem+0xa0>
 8008834:	9b00      	ldr	r3, [sp, #0]
 8008836:	460d      	mov	r5, r1
 8008838:	f106 0c0f 	add.w	ip, r6, #15
 800883c:	4617      	mov	r7, r2
 800883e:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8008840:	f04f 0e0a 	mov.w	lr, #10
 8008844:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008846:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8008848:	4561      	cmp	r1, ip
 800884a:	d139      	bne.n	80088c0 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800884c:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8008850:	a942      	add	r1, sp, #264	@ 0x108
 8008852:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8008856:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8008858:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800885a:	6063      	str	r3, [r4, #4]
 800885c:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800885e:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8008862:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8008866:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8008868:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800886c:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800886e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008872:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8008874:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008878:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800887a:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800887e:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008880:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 8008884:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008886:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008888:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800888c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8008890:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008892:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800889c:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800889e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088a2:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80088a6:	42b4      	cmp	r4, r6
 80088a8:	d1e7      	bne.n	800887a <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80088aa:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 80088ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80088b2:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d10f      	bne.n	80088da <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80088ba:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80088be:	e7b0      	b.n	8008822 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80088c0:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 80088c4:	b15b      	cbz	r3, 80088de <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80088c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80088c8:	d015      	beq.n	80088f6 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 80088ca:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80088cc:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80088d0:	3b01      	subs	r3, #1
 80088d2:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80088d6:	2ba1      	cmp	r3, #161	@ 0xa1
 80088d8:	d902      	bls.n	80088e0 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 80088da:	2001      	movs	r0, #1
 80088dc:	e7e5      	b.n	80088aa <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 80088de:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80088e0:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80088e4:	f857 8b04 	ldr.w	r8, [r7], #4
 80088e8:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80088ec:	f815 2b01 	ldrb.w	r2, [r5], #1
 80088f0:	3a01      	subs	r2, #1
 80088f2:	54f2      	strb	r2, [r6, r3]
      k++;
 80088f4:	e7a8      	b.n	8008848 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 80088f6:	23a1      	movs	r3, #161	@ 0xa1
 80088f8:	e7f2      	b.n	80088e0 <JPEG_Set_HuffAC_Mem+0xd6>

080088fa <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80088fa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80088fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008900:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008902:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8008904:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008906:	f002 0203 	and.w	r2, r2, #3
 800890a:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	bf0c      	ite	eq
 8008910:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8008914:	f022 0208 	bicne.w	r2, r2, #8
 8008918:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	f022 0201 	bic.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008924:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008928:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800892a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800892c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008930:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008934:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008938:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800893a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800893c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008940:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	f042 0201 	orr.w	r2, r2, #1
 8008948:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800894a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800894c:	f002 020c 	and.w	r2, r2, #12
 8008950:	2a08      	cmp	r2, #8
 8008952:	d104      	bne.n	800895e <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8008954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008956:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800895a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800895c:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800895e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008960:	f002 020c 	and.w	r2, r2, #12
 8008964:	2a0c      	cmp	r2, #12
 8008966:	d1f9      	bne.n	800895c <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800896a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800896e:	e7f4      	b.n	800895a <JPEG_Init_Process+0x60>

08008970 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8008970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008972:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8008974:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008976:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008978:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800897a:	42aa      	cmp	r2, r5
 800897c:	d313      	bcc.n	80089a6 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800897e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008980:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008982:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008984:	428b      	cmp	r3, r1
 8008986:	d30e      	bcc.n	80089a6 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8008988:	4f18      	ldr	r7, [pc, #96]	@ (80089ec <JPEG_DMA_StartProcess+0x7c>)
 800898a:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800898c:	4f18      	ldr	r7, [pc, #96]	@ (80089f0 <JPEG_DMA_StartProcess+0x80>)
 800898e:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8008990:	4e18      	ldr	r6, [pc, #96]	@ (80089f4 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8008992:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8008994:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8008996:	4e18      	ldr	r6, [pc, #96]	@ (80089f8 <JPEG_DMA_StartProcess+0x88>)
 8008998:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800899a:	b105      	cbz	r5, 800899e <JPEG_DMA_StartProcess+0x2e>
 800899c:	b931      	cbnz	r1, 80089ac <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800899e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80089a0:	f043 0304 	orr.w	r3, r3, #4
 80089a4:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80089a6:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80089a8:	b003      	add	sp, #12
 80089aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80089ac:	fbb2 f6f5 	udiv	r6, r2, r5
 80089b0:	fb05 2516 	mls	r5, r5, r6, r2
 80089b4:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80089b6:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80089b8:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80089ba:	fbb3 f2f1 	udiv	r2, r3, r1
 80089be:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80089c2:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80089c4:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80089c6:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80089c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80089ca:	9500      	str	r5, [sp, #0]
 80089cc:	69e2      	ldr	r2, [r4, #28]
 80089ce:	f001 f810 	bl	80099f2 <HAL_MDMA_Start_IT>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d1e3      	bne.n	800899e <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80089d6:	6822      	ldr	r2, [r4, #0]
 80089d8:	9500      	str	r5, [sp, #0]
 80089da:	3240      	adds	r2, #64	@ 0x40
 80089dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80089de:	69a1      	ldr	r1, [r4, #24]
 80089e0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80089e2:	f001 f806 	bl	80099f2 <HAL_MDMA_Start_IT>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d0de      	beq.n	80089a8 <JPEG_DMA_StartProcess+0x38>
 80089ea:	e7d8      	b.n	800899e <JPEG_DMA_StartProcess+0x2e>
 80089ec:	08008f2f 	.word	0x08008f2f
 80089f0:	08008e2b 	.word	0x08008e2b
 80089f4:	080093ed 	.word	0x080093ed
 80089f8:	080093df 	.word	0x080093df

080089fc <HAL_JPEG_Init>:
{
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 80089fe:	4605      	mov	r5, r0
 8008a00:	2800      	cmp	r0, #0
 8008a02:	f000 80f2 	beq.w	8008bea <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8008a06:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8008a0a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008a0e:	b91b      	cbnz	r3, 8008a18 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8008a10:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8008a14:	f7f8 fb3c 	bl	8001090 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8008a18:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	4a86      	ldr	r2, [pc, #536]	@ (8008c38 <HAL_JPEG_Init+0x23c>)
 8008a1e:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8008a22:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8008a26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a28:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8008a2c:	f043 0301 	orr.w	r3, r3, #1
 8008a30:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008a3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a3c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008a40:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008a42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008a48:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008a4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a50:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008a52:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008a54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008a58:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008a5a:	4b78      	ldr	r3, [pc, #480]	@ (8008c3c <HAL_JPEG_Init+0x240>)
 8008a5c:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8008a5e:	4b78      	ldr	r3, [pc, #480]	@ (8008c40 <HAL_JPEG_Init+0x244>)
 8008a60:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8008a62:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8008a64:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008a68:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8008a6a:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008a6c:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008a6e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008a70:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8008a74:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008a76:	4333      	orrs	r3, r6
 8008a78:	7c56      	ldrb	r6, [r2, #17]
 8008a7a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008a7e:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8008a82:	4281      	cmp	r1, r0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008a86:	4b6f      	ldr	r3, [pc, #444]	@ (8008c44 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008a88:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8008a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8008c48 <HAL_JPEG_Init+0x24c>)
 8008a8e:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008a92:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8008a96:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008a9e:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8008aa2:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008aa6:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008aaa:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 8008aac:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008aae:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008ab2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008ab4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8008ab8:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008abc:	ea43 030c 	orr.w	r3, r3, ip
 8008ac0:	f890 c011 	ldrb.w	ip, [r0, #17]
 8008ac4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008ac8:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8008acc:	42be      	cmp	r6, r7
 8008ace:	d1ec      	bne.n	8008aaa <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8008ad0:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8008ad4:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8008ad8:	f36f 030f 	bfc	r3, #0, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8008adc:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8008ae0:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8008ae4:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008ae8:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8008aec:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008aee:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008af2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008af4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8008af8:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8008afc:	4333      	orrs	r3, r6
 8008afe:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8008b02:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008b06:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8008b0a:	4281      	cmp	r1, r0
 8008b0c:	d1ec      	bne.n	8008ae8 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8008b0e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8008b12:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8008b16:	4a4d      	ldr	r2, [pc, #308]	@ (8008c4c <HAL_JPEG_Init+0x250>)
 8008b18:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8008b1c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8008b1e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8008b22:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8008b26:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008b2a:	4013      	ands	r3, r2
  *address = value;
 8008b2c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008b30:	2301      	movs	r3, #1
 8008b32:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8008b36:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8008b3a:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8008b3e:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8008b42:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008b46:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8008b48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8008b4c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8008b50:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008b54:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8008b56:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8008b5a:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8008b5e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008b62:	4b3b      	ldr	r3, [pc, #236]	@ (8008c50 <HAL_JPEG_Init+0x254>)
 8008b64:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8008b68:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008b6c:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8008b70:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008b74:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8008b76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8008b7a:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8008b7e:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8008b82:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8008b84:	4a33      	ldr	r2, [pc, #204]	@ (8008c54 <HAL_JPEG_Init+0x258>)
 8008b86:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8008b8a:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8008b8e:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008b92:	4b31      	ldr	r3, [pc, #196]	@ (8008c58 <HAL_JPEG_Init+0x25c>)
 8008b94:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8008b98:	4b30      	ldr	r3, [pc, #192]	@ (8008c5c <HAL_JPEG_Init+0x260>)
 8008b9a:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8008b9e:	4b30      	ldr	r3, [pc, #192]	@ (8008c60 <HAL_JPEG_Init+0x264>)
 8008ba0:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8008ba4:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8008ba8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8008baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8008bae:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8008bb2:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8008bb6:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008bb8:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8008bbc:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8008bbe:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8008bc2:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8008bc6:	4333      	orrs	r3, r6
 8008bc8:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8008bcc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008bd0:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8008bd4:	4281      	cmp	r1, r0
 8008bd6:	d1ec      	bne.n	8008bb2 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008bd8:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8008bdc:	491a      	ldr	r1, [pc, #104]	@ (8008c48 <HAL_JPEG_Init+0x24c>)
 8008bde:	4628      	mov	r0, r5
 8008be0:	f7ff fe13 	bl	800880a <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008be4:	b118      	cbz	r0, 8008bee <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8008be6:	2301      	movs	r3, #1
 8008be8:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8008bea:	2001      	movs	r0, #1
}
 8008bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8008bee:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8008bf2:	4918      	ldr	r1, [pc, #96]	@ (8008c54 <HAL_JPEG_Init+0x258>)
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f7ff fe08 	bl	800880a <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d1f3      	bne.n	8008be6 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8008bfe:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8008c02:	490d      	ldr	r1, [pc, #52]	@ (8008c38 <HAL_JPEG_Init+0x23c>)
 8008c04:	4628      	mov	r0, r5
 8008c06:	f7ff fdc8 	bl	800879a <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d1eb      	bne.n	8008be6 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8008c0e:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8008c12:	4914      	ldr	r1, [pc, #80]	@ (8008c64 <HAL_JPEG_Init+0x268>)
 8008c14:	4628      	mov	r0, r5
 8008c16:	f7ff fdc0 	bl	800879a <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d1e3      	bne.n	8008be6 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c24:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008c26:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8008c28:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8008c2a:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008c2c:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008c30:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8008c32:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8008c34:	e7da      	b.n	8008bec <HAL_JPEG_Init+0x1f0>
 8008c36:	bf00      	nop
 8008c38:	08027344 	.word	0x08027344
 8008c3c:	08027144 	.word	0x08027144
 8008c40:	08027104 	.word	0x08027104
 8008c44:	0b0a0908 	.word	0x0b0a0908
 8008c48:	08027276 	.word	0x08027276
 8008c4c:	ffff0000 	.word	0xffff0000
 8008c50:	09080706 	.word	0x09080706
 8008c54:	080271c4 	.word	0x080271c4
 8008c58:	01000404 	.word	0x01000404
 8008c5c:	05070403 	.word	0x05070403
 8008c60:	04040201 	.word	0x04040201
 8008c64:	08027328 	.word	0x08027328

08008c68 <HAL_JPEG_GetInfo>:
{
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d06f      	beq.n	8008d50 <HAL_JPEG_GetInfo+0xe8>
 8008c70:	2900      	cmp	r1, #0
 8008c72:	d06d      	beq.n	8008d50 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008c74:	6804      	ldr	r4, [r0, #0]
 8008c76:	6863      	ldr	r3, [r4, #4]
 8008c78:	f003 0303 	and.w	r3, r3, #3
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d047      	beq.n	8008d10 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8008c80:	6863      	ldr	r3, [r4, #4]
 8008c82:	f013 0303 	ands.w	r3, r3, #3
 8008c86:	d005      	beq.n	8008c94 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008c88:	6863      	ldr	r3, [r4, #4]
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d15e      	bne.n	8008d50 <HAL_JPEG_GetInfo+0xe8>
 8008c92:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008c94:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008c96:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008c98:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008c9c:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008c9e:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008ca0:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008ca2:	68e2      	ldr	r2, [r4, #12]
 8008ca4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008ca8:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008caa:	d13c      	bne.n	8008d26 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008cac:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008cae:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008cb0:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008cb4:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008cb6:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008cb8:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008cba:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008cbe:	d129      	bne.n	8008d14 <HAL_JPEG_GetInfo+0xac>
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	f013 0f0f 	tst.w	r3, #15
 8008cc6:	bf0c      	ite	eq
 8008cc8:	2301      	moveq	r3, #1
 8008cca:	2300      	movne	r3, #0
 8008ccc:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8008cce:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	3450      	adds	r4, #80	@ 0x50
 8008cd4:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8008d54 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8008cd8:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008cda:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8008cde:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8008ce2:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8008ce6:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8008cea:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8008cec:	fa29 f206 	lsr.w	r2, r9, r6
 8008cf0:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8008cf2:	2a01      	cmp	r2, #1
 8008cf4:	d119      	bne.n	8008d2a <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8008cf6:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8008cf8:	3608      	adds	r6, #8
 8008cfa:	3701      	adds	r7, #1
 8008cfc:	2e20      	cmp	r6, #32
 8008cfe:	d1f5      	bne.n	8008cec <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8008d00:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8008d02:	2d40      	cmp	r5, #64	@ 0x40
 8008d04:	d1ed      	bne.n	8008ce2 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8008d06:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8008d08:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008d0a:	610b      	str	r3, [r1, #16]
}
 8008d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d10:	2310      	movs	r3, #16
 8008d12:	e7bf      	b.n	8008c94 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008d14:	2d03      	cmp	r5, #3
 8008d16:	d106      	bne.n	8008d26 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	f013 0f0f 	tst.w	r3, #15
 8008d1e:	bf0c      	ite	eq
 8008d20:	2301      	moveq	r3, #1
 8008d22:	2300      	movne	r3, #0
 8008d24:	e7d3      	b.n	8008cce <HAL_JPEG_GetInfo+0x66>
 8008d26:	2300      	movs	r3, #0
 8008d28:	e7d1      	b.n	8008cce <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008d2a:	fb0e fb02 	mul.w	fp, lr, r2
 8008d2e:	f897 a000 	ldrb.w	sl, [r7]
 8008d32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d34:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8008d38:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8008d3c:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8008d3e:	bf8b      	itete	hi
 8008d40:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8008d44:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8008d48:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8008d4a:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8008d4e:	e7d3      	b.n	8008cf8 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8008d50:	2001      	movs	r0, #1
 8008d52:	e7db      	b.n	8008d0c <HAL_JPEG_GetInfo+0xa4>
 8008d54:	08027184 	.word	0x08027184

08008d58 <HAL_JPEG_Decode_DMA>:
{
 8008d58:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	b348      	cbz	r0, 8008db2 <HAL_JPEG_Decode_DMA+0x5a>
 8008d5e:	b341      	cbz	r1, 8008db2 <HAL_JPEG_Decode_DMA+0x5a>
 8008d60:	b33b      	cbz	r3, 8008db2 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8008d62:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8008d66:	2d01      	cmp	r5, #1
 8008d68:	d028      	beq.n	8008dbc <HAL_JPEG_Decode_DMA+0x64>
 8008d6a:	2501      	movs	r5, #1
 8008d6c:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008d70:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8008d74:	2d01      	cmp	r5, #1
 8008d76:	d11e      	bne.n	8008db6 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008d78:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8008d7a:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008d7c:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008d80:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8008d82:	f025 050f 	bic.w	r5, r5, #15
 8008d86:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008d88:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8008d8a:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8008d8e:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008d92:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8008d94:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8008d96:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8008d98:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8008d9a:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8008d9c:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8008d9e:	f7ff fdac 	bl	80088fa <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8008da2:	f7ff fde5 	bl	8008970 <JPEG_DMA_StartProcess>
 8008da6:	b128      	cbz	r0, 8008db4 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008da8:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8008daa:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008dae:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008db2:	2001      	movs	r0, #1
}
 8008db4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8008db6:	2300      	movs	r3, #0
 8008db8:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8008dbc:	2002      	movs	r0, #2
 8008dbe:	e7f9      	b.n	8008db4 <HAL_JPEG_Decode_DMA+0x5c>

08008dc0 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008dc0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008dc2:	f003 030c 	and.w	r3, r3, #12
 8008dc6:	2b0c      	cmp	r3, #12
 8008dc8:	d10d      	bne.n	8008de6 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008dca:	07cb      	lsls	r3, r1, #31
 8008dcc:	d503      	bpl.n	8008dd6 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008dce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008dd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008dd4:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008dd6:	0789      	lsls	r1, r1, #30
 8008dd8:	d503      	bpl.n	8008de2 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008dda:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008ddc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008de0:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8008de2:	2000      	movs	r0, #0
 8008de4:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008de6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008de8:	f003 030c 	and.w	r3, r3, #12
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d1f8      	bne.n	8008de2 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008df0:	f011 0301 	ands.w	r3, r1, #1
 8008df4:	d004      	beq.n	8008e00 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008df6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008dfc:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008dfe:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008e00:	078a      	lsls	r2, r1, #30
 8008e02:	d505      	bpl.n	8008e10 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008e04:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008e06:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008e0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e0e:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008e10:	6801      	ldr	r1, [r0, #0]
 8008e12:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008e14:	ea22 0303 	bic.w	r3, r2, r3
 8008e18:	630b      	str	r3, [r1, #48]	@ 0x30
 8008e1a:	e7e2      	b.n	8008de2 <HAL_JPEG_Pause+0x22>

08008e1c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008e1c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8008e1e:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8008e20:	4770      	bx	lr

08008e22 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008e22:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008e24:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8008e26:	4770      	bx	lr

08008e28 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8008e28:	4770      	bx	lr

08008e2a <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008e2a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8008e2c:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008e2e:	6803      	ldr	r3, [r0, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	f022 0201 	bic.w	r2, r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008e38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e3a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008e40:	2301      	movs	r3, #1
 8008e42:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008e46:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008e48:	f043 0304 	orr.w	r3, r3, #4
 8008e4c:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8008e4e:	f7f9 fc25 	bl	800269c <HAL_JPEG_ErrorCallback>
}
 8008e52:	bd08      	pop	{r3, pc}

08008e54 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008e54:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8008e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008e5c:	b922      	cbnz	r2, 8008e68 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8008e5e:	2101      	movs	r1, #1
 8008e60:	f7ff ffae 	bl	8008dc0 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8008e64:	2200      	movs	r2, #0
 8008e66:	e004      	b.n	8008e72 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008e68:	6a03      	ldr	r3, [r0, #32]
 8008e6a:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008e6c:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008e6e:	d924      	bls.n	8008eba <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008e70:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8008e72:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008e74:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008e78:	d11e      	bne.n	8008eb8 <JPEG_ReadInputData+0x64>
 8008e7a:	b1ea      	cbz	r2, 8008eb8 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8008e7c:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008e80:	69a0      	ldr	r0, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8008e82:	ea4f 0692 	mov.w	r6, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008e86:	6821      	ldr	r1, [r4, #0]
    if (nb_words >= nbRequestWords)
 8008e88:	d826      	bhi.n	8008ed8 <JPEG_ReadInputData+0x84>
        input_count = hjpeg->JpegInCount;
 8008e8a:	6a27      	ldr	r7, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008e8c:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008e8e:	19c6      	adds	r6, r0, r7
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008e90:	5dc7      	ldrb	r7, [r0, r7]
      for (index = 0; index < nbRequestWords; index++)
 8008e92:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008e94:	78b2      	ldrb	r2, [r6, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008e96:	f896 c001 	ldrb.w	ip, [r6, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008e9a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008e9e:	78f6      	ldrb	r6, [r6, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ea0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008ea4:	ea42 0207 	orr.w	r2, r2, r7
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008ea8:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008eac:	640a      	str	r2, [r1, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008eae:	6a22      	ldr	r2, [r4, #32]
 8008eb0:	f102 0204 	add.w	r2, r2, #4
 8008eb4:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008eb6:	d1e8      	bne.n	8008e8a <JPEG_ReadInputData+0x36>
}
 8008eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d1d2      	bne.n	8008e64 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008ebe:	6a01      	ldr	r1, [r0, #32]
 8008ec0:	f7f9 fb7e 	bl	80025c0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8008ec4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008ec6:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008ec8:	bf84      	itt	hi
 8008eca:	f023 0303 	bichi.w	r3, r3, #3
 8008ece:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008ed0:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8008ed2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008ed4:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8008ed6:	e7cc      	b.n	8008e72 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8008ed8:	2a03      	cmp	r2, #3
 8008eda:	d917      	bls.n	8008f0c <JPEG_ReadInputData+0xb8>
          input_count = hjpeg->JpegInCount;
 8008edc:	6a27      	ldr	r7, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008ede:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ee0:	19c5      	adds	r5, r0, r7
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008ee2:	5dc7      	ldrb	r7, [r0, r7]
        for (index = 0; index < nb_words; index++)
 8008ee4:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008ee6:	78aa      	ldrb	r2, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ee8:	f895 c001 	ldrb.w	ip, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008eec:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008ef0:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ef2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008ef6:	ea42 0207 	orr.w	r2, r2, r7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008efa:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008efe:	640a      	str	r2, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008f00:	6a22      	ldr	r2, [r4, #32]
 8008f02:	f102 0204 	add.w	r2, r2, #4
 8008f06:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008f08:	d8e8      	bhi.n	8008edc <JPEG_ReadInputData+0x88>
 8008f0a:	e7d5      	b.n	8008eb8 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8008f0c:	461d      	mov	r5, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008f0e:	6a26      	ldr	r6, [r4, #32]
 8008f10:	00ef      	lsls	r7, r5, #3
        for (index = 0; index < nb_bytes; index++)
 8008f12:	3501      	adds	r5, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008f14:	5d86      	ldrb	r6, [r0, r6]
        for (index = 0; index < nb_bytes; index++)
 8008f16:	42aa      	cmp	r2, r5
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008f18:	fa06 f607 	lsl.w	r6, r6, r7
 8008f1c:	ea43 0306 	orr.w	r3, r3, r6
          hjpeg->JpegInCount++;
 8008f20:	6a26      	ldr	r6, [r4, #32]
 8008f22:	f106 0601 	add.w	r6, r6, #1
 8008f26:	6226      	str	r6, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008f28:	d1f1      	bne.n	8008f0e <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = dataword;
 8008f2a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8008f2c:	e7c4      	b.n	8008eb8 <JPEG_ReadInputData+0x64>

08008f2e <JPEG_MDMAInCpltCallback>:
{
 8008f2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008f30:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008f36:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008f3a:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8008f3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008f3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008f42:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8008f46:	041b      	lsls	r3, r3, #16
 8008f48:	0c1b      	lsrs	r3, r3, #16
 8008f4a:	2b0c      	cmp	r3, #12
 8008f4c:	d11a      	bne.n	8008f84 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008f4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008f50:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008f52:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008f54:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008f56:	695a      	ldr	r2, [r3, #20]
 8008f58:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008f5a:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008f5e:	1a9b      	subs	r3, r3, r2
 8008f60:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008f62:	6a21      	ldr	r1, [r4, #32]
 8008f64:	f7f9 fb2c 	bl	80025c0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8008f68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008f6a:	42ab      	cmp	r3, r5
 8008f6c:	d327      	bcc.n	8008fbe <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008f6e:	b95d      	cbnz	r5, 8008f88 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008f70:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8008f72:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008f74:	f043 0304 	orr.w	r3, r3, #4
 8008f78:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008f7a:	2306      	movs	r3, #6
 8008f7c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008f80:	f7f9 fb8c 	bl	800269c <HAL_JPEG_ErrorCallback>
}
 8008f84:	b003      	add	sp, #12
 8008f86:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008f88:	fbb3 f2f5 	udiv	r2, r3, r5
 8008f8c:	fb05 3212 	mls	r2, r5, r2, r3
 8008f90:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008f92:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008f94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008f96:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008f98:	04db      	lsls	r3, r3, #19
 8008f9a:	d40a      	bmi.n	8008fb2 <JPEG_MDMAInCpltCallback+0x84>
 8008f9c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008f9e:	b143      	cbz	r3, 8008fb2 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	3240      	adds	r2, #64	@ 0x40
 8008fa4:	9100      	str	r1, [sp, #0]
 8008fa6:	69a1      	ldr	r1, [r4, #24]
 8008fa8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008faa:	f000 fd22 	bl	80099f2 <HAL_MDMA_Start_IT>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d1de      	bne.n	8008f70 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008fb2:	6822      	ldr	r2, [r4, #0]
 8008fb4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008fb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8008fbc:	e7e2      	b.n	8008f84 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0e8      	beq.n	8008f94 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8008fc2:	079a      	lsls	r2, r3, #30
 8008fc4:	d0e6      	beq.n	8008f94 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008fc6:	f023 0303 	bic.w	r3, r3, #3
 8008fca:	3304      	adds	r3, #4
 8008fcc:	e7e1      	b.n	8008f92 <JPEG_MDMAInCpltCallback+0x64>

08008fce <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008fce:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008fd2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008fd6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8008fd8:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d32a      	bcc.n	8009034 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8008fde:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008fe0:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8008fe2:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008fe4:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8008fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8008fe8:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008fea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008fec:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008fee:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008ff0:	69e0      	ldr	r0, [r4, #28]
 8008ff2:	4428      	add	r0, r5
 8008ff4:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8008ff8:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008ffa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008ffc:	69e0      	ldr	r0, [r4, #28]
 8008ffe:	4428      	add	r0, r5
 8009000:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009004:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009008:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800900a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800900c:	69e0      	ldr	r0, [r4, #28]
 800900e:	4428      	add	r0, r5
 8009010:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8009012:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009014:	f103 0304 	add.w	r3, r3, #4
 8009018:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800901a:	d1e1      	bne.n	8008fe0 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800901c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800901e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009020:	429a      	cmp	r2, r3
 8009022:	d106      	bne.n	8009032 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009024:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009026:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009028:	4620      	mov	r0, r4
 800902a:	f7f9 fae7 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8009032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009034:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009036:	4293      	cmp	r3, r2
 8009038:	d9fb      	bls.n	8009032 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800903a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800903c:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800903e:	1a9b      	subs	r3, r3, r2
 8009040:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8009042:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009044:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8009046:	d105      	bne.n	8009054 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009048:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800904a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800904c:	429f      	cmp	r7, r3
 800904e:	d119      	bne.n	8009084 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009050:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009052:	e7e9      	b.n	8009028 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8009054:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8009056:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8009058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800905a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800905c:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800905e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009060:	69e1      	ldr	r1, [r4, #28]
 8009062:	4429      	add	r1, r5
 8009064:	0a1d      	lsrs	r5, r3, #8
 8009066:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009068:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800906a:	69e1      	ldr	r1, [r4, #28]
 800906c:	4429      	add	r1, r5
 800906e:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009070:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009072:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009074:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009076:	69e1      	ldr	r1, [r4, #28]
 8009078:	4429      	add	r1, r5
 800907a:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800907c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800907e:	3304      	adds	r3, #4
 8009080:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009082:	e7de      	b.n	8009042 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009084:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009086:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8009088:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800908a:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800908c:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800908e:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009090:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 8009092:	d114      	bne.n	80090be <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009094:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009096:	4620      	mov	r0, r4
 8009098:	f7f9 fab0 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80090a0:	1d2b      	adds	r3, r5, #4
 80090a2:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	d8c4      	bhi.n	8009032 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80090a8:	00da      	lsls	r2, r3, #3
 80090aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80090ac:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80090ae:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80090b0:	fa26 f202 	lsr.w	r2, r6, r2
 80090b4:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80090b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80090b8:	3201      	adds	r2, #1
 80090ba:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80090bc:	e7f2      	b.n	80090a4 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80090be:	f002 0303 	and.w	r3, r2, #3
 80090c2:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80090c6:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80090c8:	00db      	lsls	r3, r3, #3
 80090ca:	fa26 f303 	lsr.w	r3, r6, r3
 80090ce:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 80090d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80090d4:	3301      	adds	r3, #1
 80090d6:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80090d8:	e7d9      	b.n	800908e <JPEG_StoreOutputData+0xc0>

080090da <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80090da:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	2b02      	cmp	r3, #2
{
 80090e2:	b510      	push	{r4, lr}
 80090e4:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80090e6:	d114      	bne.n	8009112 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80090e8:	6803      	ldr	r3, [r0, #0]
 80090ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ec:	065b      	lsls	r3, r3, #25
 80090ee:	d510      	bpl.n	8009112 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80090f0:	1d01      	adds	r1, r0, #4
 80090f2:	f7ff fdb9 	bl	8008c68 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80090f6:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80090f8:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80090fa:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80090fc:	f7f9 fa2a 	bl	8002554 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009104:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009108:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800910a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800910c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009110:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009112:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009114:	04d9      	lsls	r1, r3, #19
 8009116:	d407      	bmi.n	8009128 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800911c:	0792      	lsls	r2, r2, #30
 800911e:	d544      	bpl.n	80091aa <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009120:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8009122:	4620      	mov	r0, r4
 8009124:	f7ff fe96 	bl	8008e54 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009128:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800912a:	0499      	lsls	r1, r3, #18
 800912c:	d407      	bmi.n	800913e <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009132:	0712      	lsls	r2, r2, #28
 8009134:	d53e      	bpl.n	80091b4 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009136:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8009138:	4620      	mov	r0, r4
 800913a:	f7ff ff48 	bl	8008fce <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009142:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009146:	2a20      	cmp	r2, #32
 8009148:	d13c      	bne.n	80091c4 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	f022 0201 	bic.w	r2, r2, #1
 8009150:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009152:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009154:	f002 020c 	and.w	r2, r2, #12
 8009158:	2a08      	cmp	r2, #8
 800915a:	d103      	bne.n	8009164 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800915c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800915e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009162:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009166:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800916a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800916c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800916e:	b133      	cbz	r3, 800917e <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009170:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009172:	4620      	mov	r0, r4
 8009174:	69e1      	ldr	r1, [r4, #28]
 8009176:	f7f9 fa41 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800917e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009180:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009182:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009184:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009188:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800918c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800918e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009190:	f04f 0200 	mov.w	r2, #0
 8009194:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009198:	f04f 0201 	mov.w	r2, #1
 800919c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80091a0:	d10d      	bne.n	80091be <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80091a2:	f7f9 fa7d 	bl	80026a0 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80091a6:	2001      	movs	r0, #1
}
 80091a8:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80091aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ac:	0758      	lsls	r0, r3, #29
 80091ae:	d5bb      	bpl.n	8009128 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80091b0:	2101      	movs	r1, #1
 80091b2:	e7b6      	b.n	8009122 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80091b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b6:	06db      	lsls	r3, r3, #27
 80091b8:	d5c1      	bpl.n	800913e <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80091ba:	2101      	movs	r1, #1
 80091bc:	e7bc      	b.n	8009138 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80091be:	f7ff fe33 	bl	8008e28 <HAL_JPEG_EncodeCpltCallback>
 80091c2:	e7f0      	b.n	80091a6 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 80091c4:	2000      	movs	r0, #0
 80091c6:	e7ef      	b.n	80091a8 <JPEG_Process+0xce>

080091c8 <JPEG_DMA_PollResidualData>:
{
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	4604      	mov	r4, r0
 80091cc:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80091ce:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80091d0:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80091d2:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80091d6:	d122      	bne.n	800921e <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80091d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091da:	06d0      	lsls	r0, r2, #27
 80091dc:	d51f      	bpl.n	800921e <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 80091de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80091e0:	69e1      	ldr	r1, [r4, #28]
 80091e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80091e4:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80091e6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80091e8:	69e2      	ldr	r2, [r4, #28]
 80091ea:	440a      	add	r2, r1
 80091ec:	0a19      	lsrs	r1, r3, #8
 80091ee:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80091f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80091f2:	69e2      	ldr	r2, [r4, #28]
 80091f4:	440a      	add	r2, r1
 80091f6:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80091f8:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80091fa:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80091fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80091fe:	69e2      	ldr	r2, [r4, #28]
 8009200:	440a      	add	r2, r1
 8009202:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8009204:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009206:	3304      	adds	r3, #4
 8009208:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800920a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800920c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800920e:	429a      	cmp	r2, r3
 8009210:	d105      	bne.n	800921e <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009212:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009214:	4620      	mov	r0, r4
 8009216:	69e1      	ldr	r1, [r4, #28]
 8009218:	f7f9 f9f0 	bl	80025fc <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800921c:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800921e:	3e01      	subs	r6, #1
 8009220:	d1d5      	bne.n	80091ce <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009222:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8009224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009226:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009228:	06c9      	lsls	r1, r1, #27
 800922a:	d501      	bpl.n	8009230 <JPEG_DMA_PollResidualData+0x68>
 800922c:	0492      	lsls	r2, r2, #18
 800922e:	d420      	bmi.n	8009272 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	f022 0201 	bic.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8009238:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800923a:	b133      	cbz	r3, 800924a <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800923c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800923e:	4620      	mov	r0, r4
 8009240:	69e1      	ldr	r1, [r4, #28]
 8009242:	f7f9 f9db 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800924a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800924c:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800924e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009250:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009254:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009258:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800925a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009264:	f04f 0201 	mov.w	r2, #1
 8009268:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800926c:	d102      	bne.n	8009274 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800926e:	f7f9 fa17 	bl	80026a0 <HAL_JPEG_DecodeCpltCallback>
}
 8009272:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009274:	f7ff fdd8 	bl	8008e28 <HAL_JPEG_EncodeCpltCallback>
}
 8009278:	e7fb      	b.n	8009272 <JPEG_DMA_PollResidualData+0xaa>

0800927a <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800927a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800927c:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8009280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009282:	4604      	mov	r4, r0
 8009284:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8009286:	d014      	beq.n	80092b2 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009288:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800928a:	f003 030c 	and.w	r3, r3, #12
 800928e:	2b0c      	cmp	r3, #12
 8009290:	d146      	bne.n	8009320 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009292:	07cb      	lsls	r3, r1, #31
 8009294:	d520      	bpl.n	80092d8 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009296:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009298:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800929c:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800929e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80092a0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 80092a2:	b941      	cbnz	r1, 80092b6 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80092a4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80092a6:	f043 0304 	orr.w	r3, r3, #4
 80092aa:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80092ac:	2306      	movs	r3, #6
 80092ae:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80092b2:	2001      	movs	r0, #1
 80092b4:	e01d      	b.n	80092f2 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 80092b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80092b8:	fbb3 f2f1 	udiv	r2, r3, r1
 80092bc:	fb01 3212 	mls	r2, r1, r2, r3
 80092c0:	1a9b      	subs	r3, r3, r2
 80092c2:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 80092c4:	b143      	cbz	r3, 80092d8 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80092c6:	6822      	ldr	r2, [r4, #0]
 80092c8:	2101      	movs	r1, #1
 80092ca:	3240      	adds	r2, #64	@ 0x40
 80092cc:	9100      	str	r1, [sp, #0]
 80092ce:	69a1      	ldr	r1, [r4, #24]
 80092d0:	f000 fb8f 	bl	80099f2 <HAL_MDMA_Start_IT>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d1e5      	bne.n	80092a4 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80092d8:	07a8      	lsls	r0, r5, #30
 80092da:	d509      	bpl.n	80092f0 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80092dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80092de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092e2:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80092e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80092e6:	0419      	lsls	r1, r3, #16
 80092e8:	d505      	bpl.n	80092f6 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7ff ff6c 	bl	80091c8 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 80092f0:	2000      	movs	r0, #0
}
 80092f2:	b003      	add	sp, #12
 80092f4:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80092f6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80092f8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d0d2      	beq.n	80092a4 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80092fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009300:	fbb3 f2f1 	udiv	r2, r3, r1
 8009304:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009308:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800930a:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800930c:	2201      	movs	r2, #1
 800930e:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009310:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009312:	9200      	str	r2, [sp, #0]
 8009314:	69e2      	ldr	r2, [r4, #28]
 8009316:	f000 fb6c 	bl	80099f2 <HAL_MDMA_Start_IT>
 800931a:	2800      	cmp	r0, #0
 800931c:	d0e8      	beq.n	80092f0 <HAL_JPEG_Resume+0x76>
 800931e:	e7c1      	b.n	80092a4 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009320:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009322:	f003 030c 	and.w	r3, r3, #12
 8009326:	2b08      	cmp	r3, #8
 8009328:	d1e2      	bne.n	80092f0 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800932a:	f011 0301 	ands.w	r3, r1, #1
 800932e:	d004      	beq.n	800933a <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009330:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009336:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009338:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800933a:	07aa      	lsls	r2, r5, #30
 800933c:	d505      	bpl.n	800934a <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800933e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009340:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009344:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009348:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800934a:	6821      	ldr	r1, [r4, #0]
 800934c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800934e:	4313      	orrs	r3, r2
 8009350:	630b      	str	r3, [r1, #48]	@ 0x30
 8009352:	e7cd      	b.n	80092f0 <HAL_JPEG_Resume+0x76>

08009354 <JPEG_DMA_EndProcess>:
{
 8009354:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009356:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8009358:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800935a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009368:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800936a:	429a      	cmp	r2, r3
 800936c:	d105      	bne.n	800937a <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800936e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009370:	69c1      	ldr	r1, [r0, #28]
 8009372:	f7f9 f943 	bl	80025fc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800937e:	f015 0510 	ands.w	r5, r5, #16
 8009382:	d124      	bne.n	80093ce <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8009384:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009386:	b12b      	cbz	r3, 8009394 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009388:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800938a:	4620      	mov	r0, r4
 800938c:	69e1      	ldr	r1, [r4, #28]
 800938e:	f7f9 f935 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009392:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009394:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009396:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009398:	6813      	ldr	r3, [r2, #0]
 800939a:	f023 0301 	bic.w	r3, r3, #1
 800939e:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80093a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80093a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80093a4:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80093a8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80093ac:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80093ae:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80093b8:	f04f 0201 	mov.w	r2, #1
 80093bc:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80093c0:	d102      	bne.n	80093c8 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80093c2:	f7f9 f96d 	bl	80026a0 <HAL_JPEG_DecodeCpltCallback>
}
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80093c8:	f7ff fd2e 	bl	8008e28 <HAL_JPEG_EncodeCpltCallback>
 80093cc:	e7fb      	b.n	80093c6 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80093ce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80093d0:	049b      	lsls	r3, r3, #18
 80093d2:	d4f8      	bmi.n	80093c6 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 80093d4:	4620      	mov	r0, r4
}
 80093d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 80093da:	f7ff bef5 	b.w	80091c8 <JPEG_DMA_PollResidualData>

080093de <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80093de:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80093e0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80093e2:	041b      	lsls	r3, r3, #16
 80093e4:	d501      	bpl.n	80093ea <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 80093e6:	f7ff bfb5 	b.w	8009354 <JPEG_DMA_EndProcess>
}
 80093ea:	4770      	bx	lr

080093ec <JPEG_MDMAOutCpltCallback>:
{
 80093ec:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80093ee:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093f4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80093f8:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80093fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093fc:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8009400:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8009404:	0412      	lsls	r2, r2, #16
 8009406:	0c12      	lsrs	r2, r2, #16
 8009408:	2a0c      	cmp	r2, #12
 800940a:	d125      	bne.n	8009458 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800940c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800940e:	069a      	lsls	r2, r3, #26
 8009410:	d424      	bmi.n	800945c <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009412:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009414:	4620      	mov	r0, r4
 8009416:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009418:	695a      	ldr	r2, [r3, #20]
 800941a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800941c:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009420:	1a9b      	subs	r3, r3, r2
 8009422:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009424:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009426:	f7f9 f8e9 	bl	80025fc <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800942a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800942c:	049b      	lsls	r3, r3, #18
 800942e:	d415      	bmi.n	800945c <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009430:	6821      	ldr	r1, [r4, #0]
 8009432:	2301      	movs	r3, #1
 8009434:	3144      	adds	r1, #68	@ 0x44
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800943a:	69e2      	ldr	r2, [r4, #28]
 800943c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800943e:	f000 fad8 	bl	80099f2 <HAL_MDMA_Start_IT>
 8009442:	b158      	cbz	r0, 800945c <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009444:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8009446:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009448:	f043 0304 	orr.w	r3, r3, #4
 800944c:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800944e:	2306      	movs	r3, #6
 8009450:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8009454:	f7f9 f922 	bl	800269c <HAL_JPEG_ErrorCallback>
}
 8009458:	b002      	add	sp, #8
 800945a:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800945c:	6822      	ldr	r2, [r4, #0]
 800945e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009460:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009464:	6313      	str	r3, [r2, #48]	@ 0x30
 8009466:	e7f7      	b.n	8009458 <JPEG_MDMAOutCpltCallback+0x6c>

08009468 <HAL_JPEG_IRQHandler>:
{
 8009468:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800946a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800946e:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8009470:	3b03      	subs	r3, #3
 8009472:	2b01      	cmp	r3, #1
 8009474:	d850      	bhi.n	8009518 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009476:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009478:	f003 030c 	and.w	r3, r3, #12
 800947c:	2b08      	cmp	r3, #8
 800947e:	d103      	bne.n	8009488 <HAL_JPEG_IRQHandler+0x20>
}
 8009480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8009484:	f7ff be29 	b.w	80090da <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009488:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800948a:	f003 030c 	and.w	r3, r3, #12
 800948e:	2b0c      	cmp	r3, #12
 8009490:	d142      	bne.n	8009518 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009492:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009494:	f003 0303 	and.w	r3, r3, #3
 8009498:	2b02      	cmp	r3, #2
 800949a:	d114      	bne.n	80094c6 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800949c:	6803      	ldr	r3, [r0, #0]
 800949e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a0:	0659      	lsls	r1, r3, #25
 80094a2:	d510      	bpl.n	80094c6 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80094a4:	1d01      	adds	r1, r0, #4
 80094a6:	f7ff fbdf 	bl	8008c68 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80094aa:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80094ac:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80094ae:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80094b0:	f7f9 f850 	bl	8002554 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094bc:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80094be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094c4:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094ca:	0692      	lsls	r2, r2, #26
 80094cc:	d524      	bpl.n	8009518 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80094ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80094d0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80094d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80094d6:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	f022 0201 	bic.w	r2, r2, #1
 80094de:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80094e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094e2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80094e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80094e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094ea:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80094ee:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80094f0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d101      	bne.n	80094fc <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80094f8:	f000 fac4 	bl	8009a84 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80094fc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80094fe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009502:	2b02      	cmp	r3, #2
 8009504:	d103      	bne.n	800950e <HAL_JPEG_IRQHandler+0xa6>
}
 8009506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800950a:	f000 babb 	b.w	8009a84 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800950e:	4620      	mov	r0, r4
}
 8009510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8009514:	f7ff bf1e 	b.w	8009354 <JPEG_DMA_EndProcess>
}
 8009518:	bd10      	pop	{r4, pc}
	...

0800951c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800951c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800951e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009520:	3284      	adds	r2, #132	@ 0x84
 8009522:	1883      	adds	r3, r0, r2
{
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009526:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009528:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800952a:	684c      	ldr	r4, [r1, #4]
 800952c:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009530:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009534:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009536:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009538:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800953a:	f106 0c01 	add.w	ip, r6, #1
 800953e:	68c5      	ldr	r5, [r0, #12]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009540:	1ba4      	subs	r4, r4, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009542:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8009546:	4465      	add	r5, ip
 8009548:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800954c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800954e:	68c7      	ldr	r7, [r0, #12]
 8009550:	68cd      	ldr	r5, [r1, #12]
 8009552:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8009556:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009558:	689d      	ldr	r5, [r3, #8]
 800955a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800955e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009560:	688d      	ldr	r5, [r1, #8]
 8009562:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8009566:	3501      	adds	r5, #1
 8009568:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 800956c:	4465      	add	r5, ip
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800956e:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009572:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009576:	698f      	ldr	r7, [r1, #24]
 8009578:	f1bc 0f07 	cmp.w	ip, #7
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800957c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800957e:	691d      	ldr	r5, [r3, #16]
 8009580:	f025 0507 	bic.w	r5, r5, #7
 8009584:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009586:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800958a:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800958e:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009592:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009596:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800959a:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800959e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80095a2:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80095a4:	695d      	ldr	r5, [r3, #20]
 80095a6:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80095aa:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80095ac:	694d      	ldr	r5, [r1, #20]
 80095ae:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80095b0:	69dd      	ldr	r5, [r3, #28]
 80095b2:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80095b6:	f025 0507 	bic.w	r5, r5, #7
 80095ba:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80095bc:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80095c0:	ea45 0507 	orr.w	r5, r5, r7
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80095c4:	bf88      	it	hi
 80095c6:	2701      	movhi	r7, #1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80095c8:	61dd      	str	r5, [r3, #28]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80095ca:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80095cc:	629d      	str	r5, [r3, #40]	@ 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80095ce:	bf9c      	itt	ls
 80095d0:	4d0c      	ldrls	r5, [pc, #48]	@ (8009604 <LTDC_SetConfig+0xe8>)
 80095d2:	f815 700c 	ldrbls.w	r7, [r5, ip]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80095d6:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80095d8:	437c      	muls	r4, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80095da:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80095de:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80095e0:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80095e2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80095e4:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80095e6:	437d      	muls	r5, r7
 80095e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80095ec:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80095ee:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80095f0:	f36f 040a 	bfc	r4, #0, #11
 80095f4:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80095f6:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80095f8:	5883      	ldr	r3, [r0, r2]
 80095fa:	f043 0301 	orr.w	r3, r3, #1
 80095fe:	5083      	str	r3, [r0, r2]
}
 8009600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009602:	bf00      	nop
 8009604:	08027360 	.word	0x08027360

08009608 <HAL_LTDC_Init>:
{
 8009608:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800960a:	4604      	mov	r4, r0
 800960c:	2800      	cmp	r0, #0
 800960e:	d04e      	beq.n	80096ae <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009610:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009614:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009618:	b91b      	cbnz	r3, 8009622 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800961a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800961e:	f7f7 fdbd 	bl	800119c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009622:	2302      	movs	r3, #2
 8009624:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	699a      	ldr	r2, [r3, #24]
 800962c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009630:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009632:	6999      	ldr	r1, [r3, #24]
 8009634:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8009638:	4302      	orrs	r2, r0
 800963a:	68e0      	ldr	r0, [r4, #12]
 800963c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800963e:	6920      	ldr	r0, [r4, #16]
 8009640:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009642:	430a      	orrs	r2, r1
 8009644:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009646:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800964a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800964e:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009650:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8009654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009658:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800965a:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 800965e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009662:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009664:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8009668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800966c:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800966e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009670:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009674:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009678:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800967c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800967e:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8009680:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8009684:	432a      	orrs	r2, r5
 8009686:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800968a:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800968c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009690:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009694:	f042 0206 	orr.w	r2, r2, #6
 8009698:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800969a:	699a      	ldr	r2, [r3, #24]
 800969c:	f042 0201 	orr.w	r2, r2, #1
 80096a0:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80096a2:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80096a4:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80096a8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80096ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80096ae:	2001      	movs	r0, #1
 80096b0:	e7fc      	b.n	80096ac <HAL_LTDC_Init+0xa4>

080096b2 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80096b2:	4770      	bx	lr

080096b4 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 80096b4:	4770      	bx	lr

080096b6 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80096b6:	4770      	bx	lr

080096b8 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80096b8:	6803      	ldr	r3, [r0, #0]
{
 80096ba:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80096bc:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 80096be:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80096c0:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80096c2:	0772      	lsls	r2, r6, #29
 80096c4:	d514      	bpl.n	80096f0 <HAL_LTDC_IRQHandler+0x38>
 80096c6:	0769      	lsls	r1, r5, #29
 80096c8:	d512      	bpl.n	80096f0 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80096ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096cc:	f022 0204 	bic.w	r2, r2, #4
 80096d0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80096d2:	2204      	movs	r2, #4
 80096d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80096d6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80096da:	f043 0301 	orr.w	r3, r3, #1
 80096de:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80096e2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80096e4:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80096e8:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80096ec:	f7ff ffe1 	bl	80096b2 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80096f0:	07b2      	lsls	r2, r6, #30
 80096f2:	d516      	bpl.n	8009722 <HAL_LTDC_IRQHandler+0x6a>
 80096f4:	07ab      	lsls	r3, r5, #30
 80096f6:	d514      	bpl.n	8009722 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80096f8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80096fa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80096fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096fe:	f022 0202 	bic.w	r2, r2, #2
 8009702:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009704:	2202      	movs	r2, #2
 8009706:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009708:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009712:	2304      	movs	r3, #4
 8009714:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009718:	2300      	movs	r3, #0
 800971a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800971e:	f7ff ffc8 	bl	80096b2 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009722:	07f0      	lsls	r0, r6, #31
 8009724:	d510      	bpl.n	8009748 <HAL_LTDC_IRQHandler+0x90>
 8009726:	07e9      	lsls	r1, r5, #31
 8009728:	d50e      	bpl.n	8009748 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800972a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800972c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800972e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009730:	f022 0201 	bic.w	r2, r2, #1
 8009734:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009736:	2201      	movs	r2, #1
 8009738:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800973a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800973c:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009740:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8009744:	f7ff ffb6 	bl	80096b4 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009748:	0732      	lsls	r2, r6, #28
 800974a:	d511      	bpl.n	8009770 <HAL_LTDC_IRQHandler+0xb8>
 800974c:	072b      	lsls	r3, r5, #28
 800974e:	d50f      	bpl.n	8009770 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009750:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009752:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009756:	f022 0208 	bic.w	r2, r2, #8
 800975a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800975c:	2208      	movs	r2, #8
 800975e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8009760:	2301      	movs	r3, #1
 8009762:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009766:	2300      	movs	r3, #0
 8009768:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800976c:	f7ff ffa3 	bl	80096b6 <HAL_LTDC_ReloadEventCallback>
}
 8009770:	bd70      	pop	{r4, r5, r6, pc}

08009772 <HAL_LTDC_ConfigLayer>:
{
 8009772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8009776:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800977a:	4606      	mov	r6, r0
 800977c:	460f      	mov	r7, r1
 800977e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8009780:	2b01      	cmp	r3, #1
 8009782:	f04f 0002 	mov.w	r0, #2
 8009786:	d01f      	beq.n	80097c8 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009788:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800978a:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800978e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009790:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009794:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8009798:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800979c:	3438      	adds	r4, #56	@ 0x38
 800979e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097aa:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80097ac:	4630      	mov	r0, r6
 80097ae:	4662      	mov	r2, ip
 80097b0:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097b2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80097b4:	f7ff feb2 	bl	800951c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80097b8:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80097ba:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80097bc:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80097c0:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80097c4:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80097c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097cc <HAL_LTDC_SetPitch>:
{
 80097cc:	4603      	mov	r3, r0
 80097ce:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 80097d0:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 80097d4:	2801      	cmp	r0, #1
 80097d6:	f04f 0002 	mov.w	r0, #2
 80097da:	d026      	beq.n	800982a <HAL_LTDC_SetPitch+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80097dc:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80097e0:	2034      	movs	r0, #52	@ 0x34
 80097e2:	fb00 3002 	mla	r0, r0, r2, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80097e6:	01d2      	lsls	r2, r2, #7
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80097e8:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80097ea:	3284      	adds	r2, #132	@ 0x84
 80097ec:	2807      	cmp	r0, #7
 80097ee:	bf96      	itet	ls
 80097f0:	4c0e      	ldrls	r4, [pc, #56]	@ (800982c <HAL_LTDC_SetPitch+0x60>)
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80097f2:	2401      	movhi	r4, #1
 80097f4:	5c24      	ldrbls	r4, [r4, r0]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80097f6:	6818      	ldr	r0, [r3, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 80097f8:	434c      	muls	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80097fa:	4402      	add	r2, r0
 80097fc:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80097fe:	f36f 401c 	bfc	r0, #16, #13
 8009802:	62d0      	str	r0, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009804:	480a      	ldr	r0, [pc, #40]	@ (8009830 <HAL_LTDC_SetPitch+0x64>)
 8009806:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8009808:	f045 0501 	orr.w	r5, r5, #1
 800980c:	6245      	str	r5, [r0, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800980e:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8009810:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8009814:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009816:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009818:	f042 0201 	orr.w	r2, r2, #1
 800981c:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800981e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 8009820:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8009822:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009826:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 800982a:	bd30      	pop	{r4, r5, pc}
 800982c:	08027360 	.word	0x08027360
 8009830:	50001000 	.word	0x50001000

08009834 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8009834:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8009836:	6804      	ldr	r4, [r0, #0]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8009838:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800983c:	6965      	ldr	r5, [r4, #20]
 800983e:	f363 0510 	bfi	r5, r3, #0, #17
 8009842:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8009844:	9d03      	ldr	r5, [sp, #12]
 8009846:	6963      	ldr	r3, [r4, #20]
 8009848:	f105 35ff 	add.w	r5, r5, #4294967295
 800984c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009850:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8009854:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8009856:	f04f 031f 	mov.w	r3, #31
 800985a:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800985c:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800985e:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8009860:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009862:	bf0c      	ite	eq
 8009864:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8009868:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800986c:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8009870:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8009872:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009874:	bf0c      	ite	eq
 8009876:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800987a:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800987e:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8009880:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8009882:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8009884:	bd30      	pop	{r4, r5, pc}

08009886 <HAL_MDMA_Init>:
{
 8009886:	b538      	push	{r3, r4, r5, lr}
 8009888:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800988a:	f7fd fb4d 	bl	8006f28 <HAL_GetTick>
 800988e:	4605      	mov	r5, r0
  if(hmdma == NULL)
 8009890:	2c00      	cmp	r4, #0
 8009892:	d061      	beq.n	8009958 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8009894:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8009896:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8009898:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800989c:	2302      	movs	r3, #2
 800989e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80098a2:	68d3      	ldr	r3, [r2, #12]
 80098a4:	f023 0301 	bic.w	r3, r3, #1
 80098a8:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	07d2      	lsls	r2, r2, #31
 80098b0:	d448      	bmi.n	8009944 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80098b2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80098ba:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80098be:	430a      	orrs	r2, r1
 80098c0:	69e1      	ldr	r1, [r4, #28]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	6a21      	ldr	r1, [r4, #32]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80098ca:	430a      	orrs	r2, r1
 80098cc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80098ce:	430a      	orrs	r2, r1
 80098d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80098d2:	430a      	orrs	r2, r1
 80098d4:	68a1      	ldr	r1, [r4, #8]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80098da:	3901      	subs	r1, #1
 80098dc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80098e0:	6861      	ldr	r1, [r4, #4]
 80098e2:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80098e6:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80098e8:	d103      	bne.n	80098f2 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80098f0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80098f2:	2200      	movs	r2, #0
 80098f4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80098f6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80098f8:	2a00      	cmp	r2, #0
 80098fa:	da04      	bge.n	8009906 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80098fc:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80098fe:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009900:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8009904:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8009906:	b292      	uxth	r2, r2
 8009908:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800990a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800990c:	2a00      	cmp	r2, #0
 800990e:	da25      	bge.n	800995c <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009910:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8009912:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009914:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8009918:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800991a:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800991c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009920:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009924:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009926:	f04f 0200 	mov.w	r2, #0
 800992a:	d019      	beq.n	8009960 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800992c:	b2c9      	uxtb	r1, r1
 800992e:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009930:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8009932:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009934:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8009936:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8009938:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800993a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800993e:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8009942:	e00a      	b.n	800995a <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8009944:	f7fd faf0 	bl	8006f28 <HAL_GetTick>
 8009948:	1b40      	subs	r0, r0, r5
 800994a:	2805      	cmp	r0, #5
 800994c:	d9ad      	bls.n	80098aa <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800994e:	2340      	movs	r3, #64	@ 0x40
 8009950:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009952:	2303      	movs	r3, #3
 8009954:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8009958:	2001      	movs	r0, #1
}
 800995a:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800995c:	6a18      	ldr	r0, [r3, #32]
 800995e:	e7dd      	b.n	800991c <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8009960:	629a      	str	r2, [r3, #40]	@ 0x28
 8009962:	e7e5      	b.n	8009930 <HAL_MDMA_Init+0xaa>

08009964 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8009964:	b1d8      	cbz	r0, 800999e <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8009966:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8009968:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800996a:	68d3      	ldr	r3, [r2, #12]
 800996c:	f023 0301 	bic.w	r3, r3, #1
 8009970:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8009972:	2300      	movs	r3, #0
 8009974:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8009976:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8009978:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800997a:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800997c:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800997e:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8009980:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8009982:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8009984:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8009986:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8009988:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800998a:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800998c:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800998e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8009992:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8009996:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800999a:	4618      	mov	r0, r3
 800999c:	4770      	bx	lr
    return HAL_ERROR;
 800999e:	2001      	movs	r0, #1
}
 80099a0:	4770      	bx	lr

080099a2 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 80099a2:	4603      	mov	r3, r0
{
 80099a4:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 80099a6:	b300      	cbz	r0, 80099ea <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 80099a8:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80099ac:	2801      	cmp	r0, #1
 80099ae:	d01e      	beq.n	80099ee <HAL_MDMA_ConfigPostRequestMask+0x4c>
 80099b0:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80099b2:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 80099b6:	42a5      	cmp	r5, r4
 80099b8:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 80099ba:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80099be:	d112      	bne.n	80099e6 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80099c0:	681c      	ldr	r4, [r3, #0]
 80099c2:	6925      	ldr	r5, [r4, #16]
 80099c4:	006d      	lsls	r5, r5, #1
 80099c6:	d407      	bmi.n	80099d8 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 80099c8:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 80099ca:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80099cc:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 80099ce:	b939      	cbnz	r1, 80099e0 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80099d0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 80099d4:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80099d6:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80099de:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80099e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80099e4:	e7f6      	b.n	80099d4 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 80099e6:	4620      	mov	r0, r4
 80099e8:	e7f6      	b.n	80099d8 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 80099ea:	2001      	movs	r0, #1
 80099ec:	e7f7      	b.n	80099de <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 80099ee:	2002      	movs	r0, #2
 80099f0:	e7f5      	b.n	80099de <HAL_MDMA_ConfigPostRequestMask+0x3c>

080099f2 <HAL_MDMA_Start_IT>:
{
 80099f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 80099f4:	4604      	mov	r4, r0
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d042      	beq.n	8009a80 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 80099fa:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 80099fe:	2d01      	cmp	r5, #1
 8009a00:	d03c      	beq.n	8009a7c <HAL_MDMA_Start_IT+0x8a>
 8009a02:	2501      	movs	r5, #1
 8009a04:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8009a08:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8009a0c:	2d01      	cmp	r5, #1
 8009a0e:	f04f 0500 	mov.w	r5, #0
 8009a12:	d131      	bne.n	8009a78 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8009a14:	2602      	movs	r6, #2
 8009a16:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009a1a:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8009a1c:	6805      	ldr	r5, [r0, #0]
 8009a1e:	68ee      	ldr	r6, [r5, #12]
 8009a20:	f026 0601 	bic.w	r6, r6, #1
 8009a24:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8009a26:	9e06      	ldr	r6, [sp, #24]
 8009a28:	9600      	str	r6, [sp, #0]
 8009a2a:	f7ff ff03 	bl	8009834 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8009a2e:	68eb      	ldr	r3, [r5, #12]
 8009a30:	f043 0306 	orr.w	r3, r3, #6
 8009a34:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8009a36:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009a38:	b11b      	cbz	r3, 8009a42 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8009a3a:	68eb      	ldr	r3, [r5, #12]
 8009a3c:	f043 0310 	orr.w	r3, r3, #16
 8009a40:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009a42:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009a44:	b11b      	cbz	r3, 8009a4e <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8009a46:	68eb      	ldr	r3, [r5, #12]
 8009a48:	f043 0308 	orr.w	r3, r3, #8
 8009a4c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8009a4e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009a50:	b11b      	cbz	r3, 8009a5a <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8009a52:	68eb      	ldr	r3, [r5, #12]
 8009a54:	f043 0320 	orr.w	r3, r3, #32
 8009a58:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8009a5a:	68eb      	ldr	r3, [r5, #12]
 8009a5c:	f043 0301 	orr.w	r3, r3, #1
 8009a60:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009a62:	6863      	ldr	r3, [r4, #4]
 8009a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a68:	d103      	bne.n	8009a72 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8009a6a:	68eb      	ldr	r3, [r5, #12]
 8009a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a70:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8009a72:	2000      	movs	r0, #0
}
 8009a74:	b002      	add	sp, #8
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8009a78:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8009a7c:	2002      	movs	r0, #2
 8009a7e:	e7f9      	b.n	8009a74 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8009a80:	2001      	movs	r0, #1
 8009a82:	e7f7      	b.n	8009a74 <HAL_MDMA_Start_IT+0x82>

08009a84 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8009a84:	b128      	cbz	r0, 8009a92 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8009a86:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d003      	beq.n	8009a96 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8009a8e:	2380      	movs	r3, #128	@ 0x80
 8009a90:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8009a92:	2001      	movs	r0, #1
 8009a94:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8009a96:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009a98:	2304      	movs	r3, #4
 8009a9a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 8009a9e:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8009aa0:	68d3      	ldr	r3, [r2, #12]
 8009aa2:	f023 0301 	bic.w	r3, r3, #1
 8009aa6:	60d3      	str	r3, [r2, #12]
}
 8009aa8:	4770      	bx	lr
	...

08009aac <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 8009aac:	2300      	movs	r3, #0
{
 8009aae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 8009ab0:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8009ab2:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 8009ab6:	4b58      	ldr	r3, [pc, #352]	@ (8009c18 <HAL_MDMA_IRQHandler+0x16c>)
{
 8009ab8:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8009aba:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8009abc:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8009abe:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8009ac0:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8009ac2:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 8009ac6:	3a40      	subs	r2, #64	@ 0x40
 8009ac8:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8009acc:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8009ad0:	4202      	tst	r2, r0
 8009ad2:	f000 809e 	beq.w	8009c12 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	07d1      	lsls	r1, r2, #31
 8009ada:	d529      	bpl.n	8009b30 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	0792      	lsls	r2, r2, #30
 8009ae0:	d526      	bpl.n	8009b30 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	f022 0202 	bic.w	r2, r2, #2
 8009ae8:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8009aea:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009aec:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8009aee:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009af0:	bf54      	ite	pl
 8009af2:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8009af6:	f041 0102 	orrmi.w	r1, r1, #2
 8009afa:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8009afc:	0591      	lsls	r1, r2, #22
 8009afe:	d503      	bpl.n	8009b08 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8009b00:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009b02:	f041 0104 	orr.w	r1, r1, #4
 8009b06:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8009b08:	05d0      	lsls	r0, r2, #23
 8009b0a:	d503      	bpl.n	8009b14 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8009b0c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009b0e:	f041 0108 	orr.w	r1, r1, #8
 8009b12:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8009b14:	0551      	lsls	r1, r2, #21
 8009b16:	d503      	bpl.n	8009b20 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8009b18:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009b1a:	f041 0110 	orr.w	r1, r1, #16
 8009b1e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8009b20:	0512      	lsls	r2, r2, #20
 8009b22:	d503      	bpl.n	8009b2c <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8009b24:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8009b26:	f042 0220 	orr.w	r2, r2, #32
 8009b2a:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	06d0      	lsls	r0, r2, #27
 8009b34:	d508      	bpl.n	8009b48 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	0691      	lsls	r1, r2, #26
 8009b3a:	d505      	bpl.n	8009b48 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8009b3c:	2210      	movs	r2, #16
 8009b3e:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8009b40:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009b42:	b10b      	cbz	r3, 8009b48 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8009b44:	4620      	mov	r0, r4
 8009b46:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	0712      	lsls	r2, r2, #28
 8009b4e:	d508      	bpl.n	8009b62 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	06d0      	lsls	r0, r2, #27
 8009b54:	d505      	bpl.n	8009b62 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8009b56:	2208      	movs	r2, #8
 8009b58:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8009b5a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009b5c:	b10b      	cbz	r3, 8009b62 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	0751      	lsls	r1, r2, #29
 8009b68:	d508      	bpl.n	8009b7c <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	0712      	lsls	r2, r2, #28
 8009b6e:	d505      	bpl.n	8009b7c <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8009b70:	2204      	movs	r2, #4
 8009b72:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009b74:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009b76:	b10b      	cbz	r3, 8009b7c <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8009b78:	4620      	mov	r0, r4
 8009b7a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	0790      	lsls	r0, r2, #30
 8009b82:	d524      	bpl.n	8009bce <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8009b84:	68da      	ldr	r2, [r3, #12]
 8009b86:	0751      	lsls	r1, r2, #29
 8009b88:	d521      	bpl.n	8009bce <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8009b90:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8009b92:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8009b96:	2a04      	cmp	r2, #4
 8009b98:	f04f 0200 	mov.w	r2, #0
 8009b9c:	d10c      	bne.n	8009bb8 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 8009b9e:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8009ba0:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8009ba4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8009ba8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d031      	beq.n	8009c12 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 8009bae:	4620      	mov	r0, r4
}
 8009bb0:	b003      	add	sp, #12
 8009bb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8009bb6:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8009bb8:	2102      	movs	r1, #2
 8009bba:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8009bbc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 8009bbe:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8009bc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8009bc6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009bc8:	b10b      	cbz	r3, 8009bce <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8009bce:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009bd0:	b1fb      	cbz	r3, 8009c12 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8009bd2:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8009bd6:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009bda:	2304      	movs	r3, #4
 8009bdc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	68da      	ldr	r2, [r3, #12]
 8009be4:	f022 0201 	bic.w	r2, r2, #1
 8009be8:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8009bea:	9a01      	ldr	r2, [sp, #4]
 8009bec:	3201      	adds	r2, #1
 8009bee:	42aa      	cmp	r2, r5
 8009bf0:	9201      	str	r2, [sp, #4]
 8009bf2:	d802      	bhi.n	8009bfa <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8009bf4:	68da      	ldr	r2, [r3, #12]
 8009bf6:	07d2      	lsls	r2, r2, #31
 8009bf8:	d4f7      	bmi.n	8009bea <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009c04:	bf4c      	ite	mi
 8009c06:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8009c08:	2301      	movpl	r3, #1
 8009c0a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8009c0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009c10:	e7cb      	b.n	8009baa <HAL_MDMA_IRQHandler+0xfe>
}
 8009c12:	b003      	add	sp, #12
 8009c14:	bd30      	pop	{r4, r5, pc}
 8009c16:	bf00      	nop
 8009c18:	2400006c 	.word	0x2400006c

08009c1c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c1c:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009c1e:	4d1c      	ldr	r5, [pc, #112]	@ (8009c90 <HAL_PWREx_ConfigSupply+0x74>)
{
 8009c20:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009c22:	68eb      	ldr	r3, [r5, #12]
 8009c24:	f003 0307 	and.w	r3, r3, #7
 8009c28:	2b06      	cmp	r3, #6
 8009c2a:	d006      	beq.n	8009c3a <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c2c:	68e8      	ldr	r0, [r5, #12]
 8009c2e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8009c32:	1b00      	subs	r0, r0, r4
 8009c34:	bf18      	it	ne
 8009c36:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8009c38:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c3a:	68eb      	ldr	r3, [r5, #12]
 8009c3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009c40:	4303      	orrs	r3, r0
 8009c42:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8009c44:	f7fd f970 	bl	8006f28 <HAL_GetTick>
 8009c48:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c4a:	686b      	ldr	r3, [r5, #4]
 8009c4c:	049a      	lsls	r2, r3, #18
 8009c4e:	d508      	bpl.n	8009c62 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009c50:	f1a4 031d 	sub.w	r3, r4, #29
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d90c      	bls.n	8009c72 <HAL_PWREx_ConfigSupply+0x56>
 8009c58:	3c2d      	subs	r4, #45	@ 0x2d
 8009c5a:	2c01      	cmp	r4, #1
 8009c5c:	d909      	bls.n	8009c72 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8009c5e:	2000      	movs	r0, #0
 8009c60:	e7ea      	b.n	8009c38 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c62:	f7fd f961 	bl	8006f28 <HAL_GetTick>
 8009c66:	1b80      	subs	r0, r0, r6
 8009c68:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009c6c:	d9ed      	bls.n	8009c4a <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8009c6e:	2001      	movs	r0, #1
 8009c70:	e7e2      	b.n	8009c38 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8009c72:	f7fd f959 	bl	8006f28 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009c76:	4d06      	ldr	r5, [pc, #24]	@ (8009c90 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8009c78:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009c7a:	68eb      	ldr	r3, [r5, #12]
 8009c7c:	03db      	lsls	r3, r3, #15
 8009c7e:	d4ee      	bmi.n	8009c5e <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c80:	f7fd f952 	bl	8006f28 <HAL_GetTick>
 8009c84:	1b00      	subs	r0, r0, r4
 8009c86:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009c8a:	d9f6      	bls.n	8009c7a <HAL_PWREx_ConfigSupply+0x5e>
 8009c8c:	e7ef      	b.n	8009c6e <HAL_PWREx_ConfigSupply+0x52>
 8009c8e:	bf00      	nop
 8009c90:	58024800 	.word	0x58024800

08009c94 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8009c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8009c98:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8009c9a:	b134      	cbz	r4, 8009caa <QSPI_Config+0x16>
 8009c9c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8009ca0:	d003      	beq.n	8009caa <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009ca2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009ca4:	6805      	ldr	r5, [r0, #0]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	612b      	str	r3, [r5, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009caa:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009cae:	e9d1 c607 	ldrd	ip, r6, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009cb2:	f1ba 0f00 	cmp.w	sl, #0
 8009cb6:	d052      	beq.n	8009d5e <QSPI_Config+0xca>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009cb8:	694f      	ldr	r7, [r1, #20]
 8009cba:	ea44 0a0a 	orr.w	sl, r4, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009cbe:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009cc0:	04bf      	lsls	r7, r7, #18
 8009cc2:	680b      	ldr	r3, [r1, #0]
 8009cc4:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 8009cc8:	ea4a 0a02 	orr.w	sl, sl, r2
 8009ccc:	e9d1 980b 	ldrd	r9, r8, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009cd0:	b34e      	cbz	r6, 8009d26 <QSPI_Config+0x92>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009cd2:	688c      	ldr	r4, [r1, #8]
 8009cd4:	ea4a 0006 	orr.w	r0, sl, r6
 8009cd8:	61ec      	str	r4, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009cda:	690c      	ldr	r4, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009cdc:	f1bc 0f00 	cmp.w	ip, #0
 8009ce0:	d013      	beq.n	8009d0a <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009ce2:	ea43 030c 	orr.w	r3, r3, ip
 8009ce6:	ea43 0309 	orr.w	r3, r3, r9
 8009cea:	ea43 0308 	orr.w	r3, r3, r8
 8009cee:	ea43 030e 	orr.w	r3, r3, lr
 8009cf2:	4323      	orrs	r3, r4
 8009cf4:	68cc      	ldr	r4, [r1, #12]
 8009cf6:	4323      	orrs	r3, r4
 8009cf8:	433b      	orrs	r3, r7
 8009cfa:	4303      	orrs	r3, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009cfc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d00:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009d02:	d00e      	beq.n	8009d22 <QSPI_Config+0x8e>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009d04:	684b      	ldr	r3, [r1, #4]
 8009d06:	61ab      	str	r3, [r5, #24]
 8009d08:	e00b      	b.n	8009d22 <QSPI_Config+0x8e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d0a:	ea43 0309 	orr.w	r3, r3, r9
 8009d0e:	ea43 0308 	orr.w	r3, r3, r8
 8009d12:	ea43 030e 	orr.w	r3, r3, lr
 8009d16:	4323      	orrs	r3, r4
 8009d18:	433b      	orrs	r3, r7
 8009d1a:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d1c:	616b      	str	r3, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8009d1e:	f8c5 c018 	str.w	ip, [r5, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 8009d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009d26:	f1bc 0f00 	cmp.w	ip, #0
 8009d2a:	d00d      	beq.n	8009d48 <QSPI_Config+0xb4>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d2c:	ea43 030c 	orr.w	r3, r3, ip
 8009d30:	68c8      	ldr	r0, [r1, #12]
 8009d32:	ea43 0309 	orr.w	r3, r3, r9
 8009d36:	ea43 0308 	orr.w	r3, r3, r8
 8009d3a:	ea43 030e 	orr.w	r3, r3, lr
 8009d3e:	4303      	orrs	r3, r0
 8009d40:	433b      	orrs	r3, r7
 8009d42:	ea43 030a 	orr.w	r3, r3, sl
 8009d46:	e7d9      	b.n	8009cfc <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d48:	ea43 0309 	orr.w	r3, r3, r9
 8009d4c:	ea43 0308 	orr.w	r3, r3, r8
 8009d50:	ea43 000e 	orr.w	r0, r3, lr
 8009d54:	ea40 0307 	orr.w	r3, r0, r7
 8009d58:	ea43 030a 	orr.w	r3, r3, sl
 8009d5c:	e7de      	b.n	8009d1c <QSPI_Config+0x88>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009d5e:	b316      	cbz	r6, 8009da6 <QSPI_Config+0x112>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009d60:	688b      	ldr	r3, [r1, #8]
 8009d62:	4326      	orrs	r6, r4
 8009d64:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d66:	694f      	ldr	r7, [r1, #20]
 8009d68:	4316      	orrs	r6, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009d6a:	61eb      	str	r3, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d6c:	04bf      	lsls	r7, r7, #18
 8009d6e:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d70:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8009d72:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009d76:	f1bc 0f00 	cmp.w	ip, #0
 8009d7a:	d00b      	beq.n	8009d94 <QSPI_Config+0x100>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d7c:	ea43 030c 	orr.w	r3, r3, ip
 8009d80:	68c8      	ldr	r0, [r1, #12]
 8009d82:	ea43 0308 	orr.w	r3, r3, r8
 8009d86:	ea43 030e 	orr.w	r3, r3, lr
 8009d8a:	4323      	orrs	r3, r4
 8009d8c:	4303      	orrs	r3, r0
 8009d8e:	433b      	orrs	r3, r7
 8009d90:	4333      	orrs	r3, r6
 8009d92:	e7b3      	b.n	8009cfc <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d94:	ea43 0208 	orr.w	r2, r3, r8
 8009d98:	ea42 020e 	orr.w	r2, r2, lr
 8009d9c:	4322      	orrs	r2, r4
 8009d9e:	433a      	orrs	r2, r7
 8009da0:	4332      	orrs	r2, r6
 8009da2:	616a      	str	r2, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8009da4:	e7bb      	b.n	8009d1e <QSPI_Config+0x8a>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009da6:	f1bc 0f00 	cmp.w	ip, #0
 8009daa:	d01a      	beq.n	8009de2 <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009dac:	ea44 030c 	orr.w	r3, r4, ip
 8009db0:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8009db2:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009db4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009db8:	ea43 0302 	orr.w	r3, r3, r2
 8009dbc:	ea43 0304 	orr.w	r3, r3, r4
 8009dc0:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8009dc2:	ea43 0304 	orr.w	r3, r3, r4
 8009dc6:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8009dc8:	ea43 0304 	orr.w	r3, r3, r4
 8009dcc:	68cc      	ldr	r4, [r1, #12]
 8009dce:	ea43 0304 	orr.w	r3, r3, r4
 8009dd2:	694c      	ldr	r4, [r1, #20]
 8009dd4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8009dd8:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009dda:	d0a2      	beq.n	8009d22 <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009ddc:	684b      	ldr	r3, [r1, #4]
 8009dde:	6183      	str	r3, [r0, #24]
 8009de0:	e79f      	b.n	8009d22 <QSPI_Config+0x8e>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8009de2:	2c00      	cmp	r4, #0
 8009de4:	d09d      	beq.n	8009d22 <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009de6:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009de8:	6800      	ldr	r0, [r0, #0]
 8009dea:	4323      	orrs	r3, r4
 8009dec:	4313      	orrs	r3, r2
 8009dee:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009df0:	4313      	orrs	r3, r2
 8009df2:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8009df4:	4313      	orrs	r3, r2
 8009df6:	694a      	ldr	r2, [r1, #20]
 8009df8:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009dfc:	6143      	str	r3, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8009dfe:	f8c0 c018 	str.w	ip, [r0, #24]
}
 8009e02:	e78e      	b.n	8009d22 <QSPI_Config+0x8e>

08009e04 <QSPI_WaitFlagStateUntilTimeout>:
{
 8009e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e08:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	460e      	mov	r6, r1
 8009e10:	4615      	mov	r5, r2
 8009e12:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009e14:	6822      	ldr	r2, [r4, #0]
 8009e16:	6893      	ldr	r3, [r2, #8]
 8009e18:	4233      	tst	r3, r6
 8009e1a:	bf14      	ite	ne
 8009e1c:	2301      	movne	r3, #1
 8009e1e:	2300      	moveq	r3, #0
 8009e20:	42ab      	cmp	r3, r5
 8009e22:	d101      	bne.n	8009e28 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8009e24:	2000      	movs	r0, #0
 8009e26:	e00f      	b.n	8009e48 <QSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8009e28:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009e2c:	d0f3      	beq.n	8009e16 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e2e:	f7fd f87b 	bl	8006f28 <HAL_GetTick>
 8009e32:	1bc0      	subs	r0, r0, r7
 8009e34:	4540      	cmp	r0, r8
 8009e36:	d909      	bls.n	8009e4c <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009e38:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009e3a:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009e3c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009e40:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009e42:	f043 0301 	orr.w	r3, r3, #1
 8009e46:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4c:	f1b8 0f00 	cmp.w	r8, #0
 8009e50:	d1e0      	bne.n	8009e14 <QSPI_WaitFlagStateUntilTimeout+0x10>
 8009e52:	e7f1      	b.n	8009e38 <QSPI_WaitFlagStateUntilTimeout+0x34>

08009e54 <HAL_QSPI_Init>:
{
 8009e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009e58:	f7fd f866 	bl	8006f28 <HAL_GetTick>
 8009e5c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8009e5e:	2c00      	cmp	r4, #0
 8009e60:	d03f      	beq.n	8009ee2 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009e62:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009e66:	b92b      	cbnz	r3, 8009e74 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f7f7 f9d5 	bl	8001218 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009e6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009e72:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009e74:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009e76:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009e78:	68a3      	ldr	r3, [r4, #8]
 8009e7a:	680a      	ldr	r2, [r1, #0]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8009e82:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009e86:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009e88:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	2120      	movs	r1, #32
 8009e90:	462b      	mov	r3, r5
 8009e92:	f7ff ffb7 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8009e96:	bb10      	cbnz	r0, 8009ede <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009e98:	6822      	ldr	r2, [r4, #0]
 8009e9a:	69e5      	ldr	r5, [r4, #28]
 8009e9c:	68e3      	ldr	r3, [r4, #12]
 8009e9e:	6811      	ldr	r1, [r2, #0]
 8009ea0:	432b      	orrs	r3, r5
 8009ea2:	6a25      	ldr	r5, [r4, #32]
 8009ea4:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8009ea8:	432b      	orrs	r3, r5
 8009eaa:	6865      	ldr	r5, [r4, #4]
 8009eac:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8009eb0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009eb4:	430b      	orrs	r3, r1
 8009eb6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009eb8:	6855      	ldr	r5, [r2, #4]
 8009eba:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	6921      	ldr	r1, [r4, #16]
 8009ec2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009ec6:	4908      	ldr	r1, [pc, #32]	@ (8009ee8 <HAL_QSPI_Init+0x94>)
 8009ec8:	4029      	ands	r1, r5
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8009ece:	6813      	ldr	r3, [r2, #0]
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8009ed6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009ed8:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8009eda:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8009ede:	b003      	add	sp, #12
 8009ee0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	e7fb      	b.n	8009ede <HAL_QSPI_Init+0x8a>
 8009ee6:	bf00      	nop
 8009ee8:	ffe0f8fe 	.word	0xffe0f8fe

08009eec <HAL_QSPI_Command>:
{
 8009eec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	468a      	mov	sl, r1
 8009ef4:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8009ef6:	f7fd f817 	bl	8006f28 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009efa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009efe:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d035      	beq.n	8009f70 <HAL_QSPI_Command+0x84>
 8009f04:	2301      	movs	r3, #1
 8009f06:	2602      	movs	r6, #2
 8009f08:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009f0c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	fa5f f983 	uxtb.w	r9, r3
 8009f16:	d129      	bne.n	8009f6c <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f18:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2120      	movs	r1, #32
 8009f1e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f20:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009f22:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009f26:	f8cd 8000 	str.w	r8, [sp]
 8009f2a:	f7ff ff6b 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009f2e:	4605      	mov	r5, r0
 8009f30:	b9a8      	cbnz	r0, 8009f5e <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009f32:	4602      	mov	r2, r0
 8009f34:	4651      	mov	r1, sl
 8009f36:	4620      	mov	r0, r4
 8009f38:	f7ff feac 	bl	8009c94 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009f3c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009f40:	b95b      	cbnz	r3, 8009f5a <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009f42:	463b      	mov	r3, r7
 8009f44:	464a      	mov	r2, r9
 8009f46:	4631      	mov	r1, r6
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f8cd 8000 	str.w	r8, [sp]
 8009f4e:	f7ff ff59 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009f52:	4605      	mov	r5, r0
 8009f54:	b918      	cbnz	r0, 8009f5e <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009f5a:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009f64:	4628      	mov	r0, r5
 8009f66:	b002      	add	sp, #8
 8009f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8009f6c:	4635      	mov	r5, r6
 8009f6e:	e7f6      	b.n	8009f5e <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 8009f70:	2502      	movs	r5, #2
 8009f72:	e7f7      	b.n	8009f64 <HAL_QSPI_Command+0x78>

08009f74 <HAL_QSPI_Transmit>:
{
 8009f74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f78:	4604      	mov	r4, r0
 8009f7a:	4688      	mov	r8, r1
 8009f7c:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8009f7e:	f7fc ffd3 	bl	8006f28 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009f82:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009f86:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009f88:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d04c      	beq.n	800a028 <HAL_QSPI_Transmit+0xb4>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009f94:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	b2d8      	uxtb	r0, r3
 8009f9c:	d142      	bne.n	800a024 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009fa2:	f1b8 0f00 	cmp.w	r8, #0
 8009fa6:	d038      	beq.n	800a01a <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8009fa8:	2312      	movs	r3, #18
 8009faa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009fae:	692b      	ldr	r3, [r5, #16]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009fb4:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8009fb6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009fba:	3301      	adds	r3, #1
 8009fbc:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009fbe:	696b      	ldr	r3, [r5, #20]
 8009fc0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8009fc4:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8009fc6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009fc8:	b99b      	cbnz	r3, 8009ff2 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009fca:	4633      	mov	r3, r6
 8009fcc:	2201      	movs	r2, #1
 8009fce:	2102      	movs	r1, #2
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	9700      	str	r7, [sp, #0]
 8009fd4:	f7ff ff16 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009fd8:	b910      	cbnz	r0, 8009fe0 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	2202      	movs	r2, #2
 8009fde:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009fec:	b002      	add	sp, #8
 8009fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009ff2:	4633      	mov	r3, r6
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	2104      	movs	r1, #4
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	9700      	str	r7, [sp, #0]
 8009ffc:	f7ff ff02 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800a000:	2800      	cmp	r0, #0
 800a002:	d1ed      	bne.n	8009fe0 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a004:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800a00c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a00e:	3301      	adds	r3, #1
 800a010:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800a012:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a014:	3b01      	subs	r3, #1
 800a016:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a018:	e7d5      	b.n	8009fc6 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a01a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a01c:	f043 0308 	orr.w	r3, r3, #8
 800a020:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800a022:	e7e0      	b.n	8009fe6 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800a024:	2002      	movs	r0, #2
 800a026:	e7de      	b.n	8009fe6 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800a028:	2002      	movs	r0, #2
 800a02a:	e7df      	b.n	8009fec <HAL_QSPI_Transmit+0x78>

0800a02c <HAL_QSPI_Receive>:
{
 800a02c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a030:	4604      	mov	r4, r0
 800a032:	4617      	mov	r7, r2
 800a034:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800a036:	f7fc ff77 	bl	8006f28 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a03a:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800a03c:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a03e:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800a040:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a044:	2b01      	cmp	r3, #1
 800a046:	d04f      	beq.n	800a0e8 <HAL_QSPI_Receive+0xbc>
 800a048:	2301      	movs	r3, #1
 800a04a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a04e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a052:	2b01      	cmp	r3, #1
 800a054:	b2d8      	uxtb	r0, r3
 800a056:	d145      	bne.n	800a0e4 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a058:	2300      	movs	r3, #0
 800a05a:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800a05c:	f1b8 0f00 	cmp.w	r8, #0
 800a060:	d03b      	beq.n	800a0da <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a062:	2322      	movs	r3, #34	@ 0x22
 800a064:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a068:	692b      	ldr	r3, [r5, #16]
 800a06a:	3301      	adds	r3, #1
 800a06c:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a06e:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800a070:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a074:	3301      	adds	r3, #1
 800a076:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a078:	6969      	ldr	r1, [r5, #20]
 800a07a:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800a07e:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800a082:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a084:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800a086:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a088:	b99b      	cbnz	r3, 800a0b2 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a08a:	4633      	mov	r3, r6
 800a08c:	2201      	movs	r2, #1
 800a08e:	2102      	movs	r1, #2
 800a090:	4620      	mov	r0, r4
 800a092:	9700      	str	r7, [sp, #0]
 800a094:	f7ff feb6 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800a098:	b910      	cbnz	r0, 800a0a0 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	2202      	movs	r2, #2
 800a09e:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a0ac:	b002      	add	sp, #8
 800a0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a0b2:	4633      	mov	r3, r6
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	2106      	movs	r1, #6
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	9700      	str	r7, [sp, #0]
 800a0bc:	f7ff fea2 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d1ed      	bne.n	800a0a0 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a0c4:	f895 2020 	ldrb.w	r2, [r5, #32]
 800a0c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a0ca:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a0cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800a0d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a0d8:	e7d5      	b.n	800a086 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a0da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a0dc:	f043 0308 	orr.w	r3, r3, #8
 800a0e0:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800a0e2:	e7e0      	b.n	800a0a6 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800a0e4:	2002      	movs	r0, #2
 800a0e6:	e7de      	b.n	800a0a6 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800a0e8:	2002      	movs	r0, #2
 800a0ea:	e7df      	b.n	800a0ac <HAL_QSPI_Receive+0x80>

0800a0ec <HAL_QSPI_AutoPolling>:
{
 800a0ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	461f      	mov	r7, r3
 800a0f4:	4689      	mov	r9, r1
 800a0f6:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800a0f8:	f7fc ff16 	bl	8006f28 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a0fc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a100:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800a102:	2b01      	cmp	r3, #1
 800a104:	d041      	beq.n	800a18a <HAL_QSPI_AutoPolling+0x9e>
 800a106:	2301      	movs	r3, #1
 800a108:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a10c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a110:	2b01      	cmp	r3, #1
 800a112:	fa5f f883 	uxtb.w	r8, r3
 800a116:	d136      	bne.n	800a186 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a118:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a11a:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a11c:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a11e:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a120:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a124:	4603      	mov	r3, r0
 800a126:	9700      	str	r7, [sp, #0]
 800a128:	4620      	mov	r0, r4
 800a12a:	f7ff fe6b 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a12e:	bb20      	cbnz	r0, 800a17a <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a130:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a132:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a134:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a136:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a138:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a13a:	686b      	ldr	r3, [r5, #4]
 800a13c:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a13e:	68ab      	ldr	r3, [r5, #8]
 800a140:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a142:	6813      	ldr	r3, [r2, #0]
 800a144:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a148:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a14a:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a14c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a150:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a152:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800a156:	68eb      	ldr	r3, [r5, #12]
 800a158:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a15c:	f7ff fd9a 	bl	8009c94 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a160:	4633      	mov	r3, r6
 800a162:	4642      	mov	r2, r8
 800a164:	2108      	movs	r1, #8
 800a166:	4620      	mov	r0, r4
 800a168:	9700      	str	r7, [sp, #0]
 800a16a:	f7ff fe4b 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800a16e:	b920      	cbnz	r0, 800a17a <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	2208      	movs	r2, #8
 800a174:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a176:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a17a:	2300      	movs	r3, #0
 800a17c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a180:	b003      	add	sp, #12
 800a182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800a186:	2002      	movs	r0, #2
 800a188:	e7f7      	b.n	800a17a <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800a18a:	2002      	movs	r0, #2
 800a18c:	e7f8      	b.n	800a180 <HAL_QSPI_AutoPolling+0x94>

0800a18e <HAL_QSPI_MemoryMapped>:
{
 800a18e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a190:	4604      	mov	r4, r0
 800a192:	4616      	mov	r6, r2
 800a194:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800a196:	f7fc fec7 	bl	8006f28 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a19a:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a19e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800a1a0:	2a01      	cmp	r2, #1
 800a1a2:	d033      	beq.n	800a20c <HAL_QSPI_MemoryMapped+0x7e>
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a1aa:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800a1ae:	2a01      	cmp	r2, #1
 800a1b0:	d12a      	bne.n	800a208 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a1b2:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a1b4:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a1b6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a1b8:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a1ba:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a1be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a1c0:	9100      	str	r1, [sp, #0]
 800a1c2:	2120      	movs	r1, #32
 800a1c4:	f7ff fe1e 	bl	8009e04 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a1c8:	4605      	mov	r5, r0
 800a1ca:	b9b8      	cbnz	r0, 800a1fc <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	6872      	ldr	r2, [r6, #4]
 800a1d0:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a1d2:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a1d4:	f020 0008 	bic.w	r0, r0, #8
 800a1d8:	ea40 0002 	orr.w	r0, r0, r2
 800a1dc:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a1de:	d107      	bne.n	800a1f0 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a1e0:	6832      	ldr	r2, [r6, #0]
 800a1e2:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a1e4:	2210      	movs	r2, #16
 800a1e6:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a1ee:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800a1f0:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7ff fd4c 	bl	8009c94 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a202:	4628      	mov	r0, r5
 800a204:	b003      	add	sp, #12
 800a206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800a208:	2502      	movs	r5, #2
 800a20a:	e7f7      	b.n	800a1fc <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800a20c:	2502      	movs	r5, #2
 800a20e:	e7f8      	b.n	800a202 <HAL_QSPI_MemoryMapped+0x74>

0800a210 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a212:	4604      	mov	r4, r0
 800a214:	2800      	cmp	r0, #0
 800a216:	d074      	beq.n	800a302 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a218:	6803      	ldr	r3, [r0, #0]
 800a21a:	07d8      	lsls	r0, r3, #31
 800a21c:	d45e      	bmi.n	800a2dc <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	0799      	lsls	r1, r3, #30
 800a222:	f100 80ad 	bmi.w	800a380 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	06da      	lsls	r2, r3, #27
 800a22a:	d527      	bpl.n	800a27c <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a22c:	4a9c      	ldr	r2, [pc, #624]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
 800a22e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a230:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a232:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a236:	2b08      	cmp	r3, #8
 800a238:	d007      	beq.n	800a24a <HAL_RCC_OscConfig+0x3a>
 800a23a:	2b18      	cmp	r3, #24
 800a23c:	f040 8103 	bne.w	800a446 <HAL_RCC_OscConfig+0x236>
 800a240:	f001 0303 	and.w	r3, r1, #3
 800a244:	2b01      	cmp	r3, #1
 800a246:	f040 80fe 	bne.w	800a446 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a24a:	6813      	ldr	r3, [r2, #0]
 800a24c:	05db      	lsls	r3, r3, #23
 800a24e:	d502      	bpl.n	800a256 <HAL_RCC_OscConfig+0x46>
 800a250:	69e3      	ldr	r3, [r4, #28]
 800a252:	2b80      	cmp	r3, #128	@ 0x80
 800a254:	d155      	bne.n	800a302 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a256:	f7fc fe7f 	bl	8006f58 <HAL_GetREVID>
 800a25a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a25e:	6a21      	ldr	r1, [r4, #32]
 800a260:	4298      	cmp	r0, r3
 800a262:	4b8f      	ldr	r3, [pc, #572]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
 800a264:	f200 80e8 	bhi.w	800a438 <HAL_RCC_OscConfig+0x228>
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	2920      	cmp	r1, #32
 800a26c:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800a270:	bf0c      	ite	eq
 800a272:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800a276:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800a27a:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	0719      	lsls	r1, r3, #28
 800a280:	f100 8123 	bmi.w	800a4ca <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	069a      	lsls	r2, r3, #26
 800a288:	f100 8144 	bmi.w	800a514 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	075d      	lsls	r5, r3, #29
 800a290:	d51e      	bpl.n	800a2d0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a292:	4d84      	ldr	r5, [pc, #528]	@ (800a4a4 <HAL_RCC_OscConfig+0x294>)
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a29a:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a29c:	f7fc fe44 	bl	8006f28 <HAL_GetTick>
 800a2a0:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2a2:	682b      	ldr	r3, [r5, #0]
 800a2a4:	05da      	lsls	r2, r3, #23
 800a2a6:	f140 815a 	bpl.w	800a55e <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2aa:	68a3      	ldr	r3, [r4, #8]
 800a2ac:	4d7c      	ldr	r5, [pc, #496]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	f040 815c 	bne.w	800a56c <HAL_RCC_OscConfig+0x35c>
 800a2b4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a2b6:	f043 0301 	orr.w	r3, r3, #1
 800a2ba:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2bc:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800a2c0:	f7fc fe32 	bl	8006f28 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2c4:	4e76      	ldr	r6, [pc, #472]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800a2c6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2c8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800a2ca:	079b      	lsls	r3, r3, #30
 800a2cc:	f140 8174 	bpl.w	800a5b8 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a2d2:	2900      	cmp	r1, #0
 800a2d4:	f040 8177 	bne.w	800a5c6 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e02b      	b.n	800a334 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2dc:	4a70      	ldr	r2, [pc, #448]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
 800a2de:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2e0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a2e6:	2b10      	cmp	r3, #16
 800a2e8:	d005      	beq.n	800a2f6 <HAL_RCC_OscConfig+0xe6>
 800a2ea:	2b18      	cmp	r3, #24
 800a2ec:	d10b      	bne.n	800a306 <HAL_RCC_OscConfig+0xf6>
 800a2ee:	f001 0303 	and.w	r3, r1, #3
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d107      	bne.n	800a306 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2f6:	6813      	ldr	r3, [r2, #0]
 800a2f8:	039a      	lsls	r2, r3, #14
 800a2fa:	d590      	bpl.n	800a21e <HAL_RCC_OscConfig+0xe>
 800a2fc:	6863      	ldr	r3, [r4, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d18d      	bne.n	800a21e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800a302:	2001      	movs	r0, #1
 800a304:	e016      	b.n	800a334 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a306:	6863      	ldr	r3, [r4, #4]
 800a308:	4d65      	ldr	r5, [pc, #404]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
 800a30a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a30e:	d112      	bne.n	800a336 <HAL_RCC_OscConfig+0x126>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a316:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a318:	f7fc fe06 	bl	8006f28 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a31c:	4e60      	ldr	r6, [pc, #384]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800a31e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a320:	6833      	ldr	r3, [r6, #0]
 800a322:	039b      	lsls	r3, r3, #14
 800a324:	f53f af7b 	bmi.w	800a21e <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a328:	f7fc fdfe 	bl	8006f28 <HAL_GetTick>
 800a32c:	1b40      	subs	r0, r0, r5
 800a32e:	2864      	cmp	r0, #100	@ 0x64
 800a330:	d9f6      	bls.n	800a320 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800a332:	2003      	movs	r0, #3
}
 800a334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a336:	b9a3      	cbnz	r3, 800a362 <HAL_RCC_OscConfig+0x152>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a33e:	602b      	str	r3, [r5, #0]
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a346:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a348:	f7fc fdee 	bl	8006f28 <HAL_GetTick>
 800a34c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a34e:	682b      	ldr	r3, [r5, #0]
 800a350:	039f      	lsls	r7, r3, #14
 800a352:	f57f af64 	bpl.w	800a21e <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a356:	f7fc fde7 	bl	8006f28 <HAL_GetTick>
 800a35a:	1b80      	subs	r0, r0, r6
 800a35c:	2864      	cmp	r0, #100	@ 0x64
 800a35e:	d9f6      	bls.n	800a34e <HAL_RCC_OscConfig+0x13e>
 800a360:	e7e7      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a362:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a366:	682b      	ldr	r3, [r5, #0]
 800a368:	d103      	bne.n	800a372 <HAL_RCC_OscConfig+0x162>
 800a36a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a36e:	602b      	str	r3, [r5, #0]
 800a370:	e7ce      	b.n	800a310 <HAL_RCC_OscConfig+0x100>
 800a372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a376:	602b      	str	r3, [r5, #0]
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a37e:	e7ca      	b.n	800a316 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a380:	4947      	ldr	r1, [pc, #284]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
 800a382:	68e2      	ldr	r2, [r4, #12]
 800a384:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a386:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a388:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800a38c:	d003      	beq.n	800a396 <HAL_RCC_OscConfig+0x186>
 800a38e:	2b18      	cmp	r3, #24
 800a390:	d12a      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x1d8>
 800a392:	0780      	lsls	r0, r0, #30
 800a394:	d128      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a396:	680b      	ldr	r3, [r1, #0]
 800a398:	075b      	lsls	r3, r3, #29
 800a39a:	d501      	bpl.n	800a3a0 <HAL_RCC_OscConfig+0x190>
 800a39c:	2a00      	cmp	r2, #0
 800a39e:	d0b0      	beq.n	800a302 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a3a0:	4d3f      	ldr	r5, [pc, #252]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
 800a3a2:	682b      	ldr	r3, [r5, #0]
 800a3a4:	f023 0319 	bic.w	r3, r3, #25
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a3ac:	f7fc fdbc 	bl	8006f28 <HAL_GetTick>
 800a3b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3b2:	682b      	ldr	r3, [r5, #0]
 800a3b4:	075f      	lsls	r7, r3, #29
 800a3b6:	d511      	bpl.n	800a3dc <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3b8:	f7fc fdce 	bl	8006f58 <HAL_GetREVID>
 800a3bc:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a3c0:	6922      	ldr	r2, [r4, #16]
 800a3c2:	4298      	cmp	r0, r3
 800a3c4:	686b      	ldr	r3, [r5, #4]
 800a3c6:	d822      	bhi.n	800a40e <HAL_RCC_OscConfig+0x1fe>
 800a3c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a3cc:	2a40      	cmp	r2, #64	@ 0x40
 800a3ce:	bf0c      	ite	eq
 800a3d0:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800a3d4:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800a3d8:	606b      	str	r3, [r5, #4]
 800a3da:	e724      	b.n	800a226 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3dc:	f7fc fda4 	bl	8006f28 <HAL_GetTick>
 800a3e0:	1b80      	subs	r0, r0, r6
 800a3e2:	2802      	cmp	r0, #2
 800a3e4:	d9e5      	bls.n	800a3b2 <HAL_RCC_OscConfig+0x1a2>
 800a3e6:	e7a4      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a3e8:	4d2d      	ldr	r5, [pc, #180]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a3ea:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a3ec:	b1a2      	cbz	r2, 800a418 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a3ee:	f023 0319 	bic.w	r3, r3, #25
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a3f6:	f7fc fd97 	bl	8006f28 <HAL_GetTick>
 800a3fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	0758      	lsls	r0, r3, #29
 800a400:	d4da      	bmi.n	800a3b8 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a402:	f7fc fd91 	bl	8006f28 <HAL_GetTick>
 800a406:	1b80      	subs	r0, r0, r6
 800a408:	2802      	cmp	r0, #2
 800a40a:	d9f7      	bls.n	800a3fc <HAL_RCC_OscConfig+0x1ec>
 800a40c:	e791      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a40e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a412:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a416:	e7df      	b.n	800a3d8 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800a418:	f023 0301 	bic.w	r3, r3, #1
 800a41c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a41e:	f7fc fd83 	bl	8006f28 <HAL_GetTick>
 800a422:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	0759      	lsls	r1, r3, #29
 800a428:	f57f aefd 	bpl.w	800a226 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a42c:	f7fc fd7c 	bl	8006f28 <HAL_GetTick>
 800a430:	1b80      	subs	r0, r0, r6
 800a432:	2802      	cmp	r0, #2
 800a434:	d9f6      	bls.n	800a424 <HAL_RCC_OscConfig+0x214>
 800a436:	e77c      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800a43e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a442:	60da      	str	r2, [r3, #12]
 800a444:	e71a      	b.n	800a27c <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a446:	69e3      	ldr	r3, [r4, #28]
 800a448:	4d15      	ldr	r5, [pc, #84]	@ (800a4a0 <HAL_RCC_OscConfig+0x290>)
 800a44a:	b36b      	cbz	r3, 800a4a8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a452:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a454:	f7fc fd68 	bl	8006f28 <HAL_GetTick>
 800a458:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	05df      	lsls	r7, r3, #23
 800a45e:	d511      	bpl.n	800a484 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a460:	f7fc fd7a 	bl	8006f58 <HAL_GetREVID>
 800a464:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a468:	6a22      	ldr	r2, [r4, #32]
 800a46a:	4298      	cmp	r0, r3
 800a46c:	d810      	bhi.n	800a490 <HAL_RCC_OscConfig+0x280>
 800a46e:	686b      	ldr	r3, [r5, #4]
 800a470:	2a20      	cmp	r2, #32
 800a472:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a476:	bf0c      	ite	eq
 800a478:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800a47c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a480:	606b      	str	r3, [r5, #4]
 800a482:	e6fb      	b.n	800a27c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a484:	f7fc fd50 	bl	8006f28 <HAL_GetTick>
 800a488:	1b80      	subs	r0, r0, r6
 800a48a:	2802      	cmp	r0, #2
 800a48c:	d9e5      	bls.n	800a45a <HAL_RCC_OscConfig+0x24a>
 800a48e:	e750      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a490:	68eb      	ldr	r3, [r5, #12]
 800a492:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800a496:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a49a:	60eb      	str	r3, [r5, #12]
 800a49c:	e6ee      	b.n	800a27c <HAL_RCC_OscConfig+0x6c>
 800a49e:	bf00      	nop
 800a4a0:	58024400 	.word	0x58024400
 800a4a4:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a4b0:	f7fc fd3a 	bl	8006f28 <HAL_GetTick>
 800a4b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	05d8      	lsls	r0, r3, #23
 800a4ba:	f57f aedf 	bpl.w	800a27c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a4be:	f7fc fd33 	bl	8006f28 <HAL_GetTick>
 800a4c2:	1b80      	subs	r0, r0, r6
 800a4c4:	2802      	cmp	r0, #2
 800a4c6:	d9f6      	bls.n	800a4b6 <HAL_RCC_OscConfig+0x2a6>
 800a4c8:	e733      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a4ca:	6963      	ldr	r3, [r4, #20]
 800a4cc:	4da3      	ldr	r5, [pc, #652]	@ (800a75c <HAL_RCC_OscConfig+0x54c>)
 800a4ce:	b183      	cbz	r3, 800a4f2 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800a4d0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a4d2:	f043 0301 	orr.w	r3, r3, #1
 800a4d6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a4d8:	f7fc fd26 	bl	8006f28 <HAL_GetTick>
 800a4dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4de:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a4e0:	079b      	lsls	r3, r3, #30
 800a4e2:	f53f aecf 	bmi.w	800a284 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4e6:	f7fc fd1f 	bl	8006f28 <HAL_GetTick>
 800a4ea:	1b80      	subs	r0, r0, r6
 800a4ec:	2802      	cmp	r0, #2
 800a4ee:	d9f6      	bls.n	800a4de <HAL_RCC_OscConfig+0x2ce>
 800a4f0:	e71f      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800a4f2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a4f4:	f023 0301 	bic.w	r3, r3, #1
 800a4f8:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a4fa:	f7fc fd15 	bl	8006f28 <HAL_GetTick>
 800a4fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a500:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a502:	079f      	lsls	r7, r3, #30
 800a504:	f57f aebe 	bpl.w	800a284 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a508:	f7fc fd0e 	bl	8006f28 <HAL_GetTick>
 800a50c:	1b80      	subs	r0, r0, r6
 800a50e:	2802      	cmp	r0, #2
 800a510:	d9f6      	bls.n	800a500 <HAL_RCC_OscConfig+0x2f0>
 800a512:	e70e      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a514:	69a3      	ldr	r3, [r4, #24]
 800a516:	4d91      	ldr	r5, [pc, #580]	@ (800a75c <HAL_RCC_OscConfig+0x54c>)
 800a518:	b183      	cbz	r3, 800a53c <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800a51a:	682b      	ldr	r3, [r5, #0]
 800a51c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a520:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a522:	f7fc fd01 	bl	8006f28 <HAL_GetTick>
 800a526:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	0498      	lsls	r0, r3, #18
 800a52c:	f53f aeae 	bmi.w	800a28c <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a530:	f7fc fcfa 	bl	8006f28 <HAL_GetTick>
 800a534:	1b80      	subs	r0, r0, r6
 800a536:	2802      	cmp	r0, #2
 800a538:	d9f6      	bls.n	800a528 <HAL_RCC_OscConfig+0x318>
 800a53a:	e6fa      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a542:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a544:	f7fc fcf0 	bl	8006f28 <HAL_GetTick>
 800a548:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a54a:	682b      	ldr	r3, [r5, #0]
 800a54c:	0499      	lsls	r1, r3, #18
 800a54e:	f57f ae9d 	bpl.w	800a28c <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a552:	f7fc fce9 	bl	8006f28 <HAL_GetTick>
 800a556:	1b80      	subs	r0, r0, r6
 800a558:	2802      	cmp	r0, #2
 800a55a:	d9f6      	bls.n	800a54a <HAL_RCC_OscConfig+0x33a>
 800a55c:	e6e9      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a55e:	f7fc fce3 	bl	8006f28 <HAL_GetTick>
 800a562:	1b80      	subs	r0, r0, r6
 800a564:	2864      	cmp	r0, #100	@ 0x64
 800a566:	f67f ae9c 	bls.w	800a2a2 <HAL_RCC_OscConfig+0x92>
 800a56a:	e6e2      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a56c:	b9b3      	cbnz	r3, 800a59c <HAL_RCC_OscConfig+0x38c>
 800a56e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a570:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a574:	f023 0301 	bic.w	r3, r3, #1
 800a578:	672b      	str	r3, [r5, #112]	@ 0x70
 800a57a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a57c:	f023 0304 	bic.w	r3, r3, #4
 800a580:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800a582:	f7fc fcd1 	bl	8006f28 <HAL_GetTick>
 800a586:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a588:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a58a:	0798      	lsls	r0, r3, #30
 800a58c:	f57f aea0 	bpl.w	800a2d0 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a590:	f7fc fcca 	bl	8006f28 <HAL_GetTick>
 800a594:	1b80      	subs	r0, r0, r6
 800a596:	42b8      	cmp	r0, r7
 800a598:	d9f6      	bls.n	800a588 <HAL_RCC_OscConfig+0x378>
 800a59a:	e6ca      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a59c:	2b05      	cmp	r3, #5
 800a59e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a5a0:	d103      	bne.n	800a5aa <HAL_RCC_OscConfig+0x39a>
 800a5a2:	f043 0304 	orr.w	r3, r3, #4
 800a5a6:	672b      	str	r3, [r5, #112]	@ 0x70
 800a5a8:	e684      	b.n	800a2b4 <HAL_RCC_OscConfig+0xa4>
 800a5aa:	f023 0301 	bic.w	r3, r3, #1
 800a5ae:	672b      	str	r3, [r5, #112]	@ 0x70
 800a5b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a5b2:	f023 0304 	bic.w	r3, r3, #4
 800a5b6:	e680      	b.n	800a2ba <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5b8:	f7fc fcb6 	bl	8006f28 <HAL_GetTick>
 800a5bc:	1b40      	subs	r0, r0, r5
 800a5be:	42b8      	cmp	r0, r7
 800a5c0:	f67f ae82 	bls.w	800a2c8 <HAL_RCC_OscConfig+0xb8>
 800a5c4:	e6b5      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a5c6:	4d65      	ldr	r5, [pc, #404]	@ (800a75c <HAL_RCC_OscConfig+0x54c>)
 800a5c8:	692b      	ldr	r3, [r5, #16]
 800a5ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5ce:	2b18      	cmp	r3, #24
 800a5d0:	d078      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 800a5d2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5d4:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800a5d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5da:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5dc:	d165      	bne.n	800a6aa <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 800a5de:	f7fc fca3 	bl	8006f28 <HAL_GetTick>
 800a5e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	0199      	lsls	r1, r3, #6
 800a5e8:	d459      	bmi.n	800a69e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5ea:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800a5ec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a5ee:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800a5f2:	f023 0303 	bic.w	r3, r3, #3
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a5fa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a5fe:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a602:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a604:	3b01      	subs	r3, #1
 800a606:	3a01      	subs	r2, #1
 800a608:	025b      	lsls	r3, r3, #9
 800a60a:	0412      	lsls	r2, r2, #16
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a612:	4313      	orrs	r3, r2
 800a614:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a616:	3a01      	subs	r2, #1
 800a618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a61c:	4313      	orrs	r3, r2
 800a61e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a620:	3a01      	subs	r2, #1
 800a622:	0612      	lsls	r2, r2, #24
 800a624:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a628:	4313      	orrs	r3, r2
 800a62a:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800a62c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a62e:	f023 0301 	bic.w	r3, r3, #1
 800a632:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a634:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a636:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a638:	f36f 03cf 	bfc	r3, #3, #13
 800a63c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a640:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a642:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a644:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a646:	f023 030c 	bic.w	r3, r3, #12
 800a64a:	4313      	orrs	r3, r2
 800a64c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a64e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a650:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a652:	f023 0302 	bic.w	r3, r3, #2
 800a656:	4313      	orrs	r3, r2
 800a658:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a65a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a65c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a660:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a662:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a668:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a66a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a66c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a670:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800a672:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a674:	f043 0301 	orr.w	r3, r3, #1
 800a678:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800a67a:	682b      	ldr	r3, [r5, #0]
 800a67c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a680:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a682:	f7fc fc51 	bl	8006f28 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a686:	4d35      	ldr	r5, [pc, #212]	@ (800a75c <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 800a688:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a68a:	682b      	ldr	r3, [r5, #0]
 800a68c:	019a      	lsls	r2, r3, #6
 800a68e:	f53f ae23 	bmi.w	800a2d8 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a692:	f7fc fc49 	bl	8006f28 <HAL_GetTick>
 800a696:	1b00      	subs	r0, r0, r4
 800a698:	2802      	cmp	r0, #2
 800a69a:	d9f6      	bls.n	800a68a <HAL_RCC_OscConfig+0x47a>
 800a69c:	e649      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a69e:	f7fc fc43 	bl	8006f28 <HAL_GetTick>
 800a6a2:	1b80      	subs	r0, r0, r6
 800a6a4:	2802      	cmp	r0, #2
 800a6a6:	d99d      	bls.n	800a5e4 <HAL_RCC_OscConfig+0x3d4>
 800a6a8:	e643      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800a6aa:	f7fc fc3d 	bl	8006f28 <HAL_GetTick>
 800a6ae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	019b      	lsls	r3, r3, #6
 800a6b4:	f57f ae10 	bpl.w	800a2d8 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6b8:	f7fc fc36 	bl	8006f28 <HAL_GetTick>
 800a6bc:	1b00      	subs	r0, r0, r4
 800a6be:	2802      	cmp	r0, #2
 800a6c0:	d9f6      	bls.n	800a6b0 <HAL_RCC_OscConfig+0x4a0>
 800a6c2:	e636      	b.n	800a332 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6c4:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6c6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6ca:	f43f ae1a 	beq.w	800a302 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6ce:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6d2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a6d4:	4281      	cmp	r1, r0
 800a6d6:	f47f ae14 	bne.w	800a302 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6da:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a6e0:	428a      	cmp	r2, r1
 800a6e2:	f47f ae0e 	bne.w	800a302 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a6e8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800a6ec:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6ee:	4291      	cmp	r1, r2
 800a6f0:	f47f ae07 	bne.w	800a302 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a6f4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a6f6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800a6fa:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6fc:	4291      	cmp	r1, r2
 800a6fe:	f47f ae00 	bne.w	800a302 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a702:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a704:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800a708:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a70a:	4291      	cmp	r1, r2
 800a70c:	f47f adf9 	bne.w	800a302 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a710:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a712:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a716:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a718:	4293      	cmp	r3, r2
 800a71a:	f47f adf2 	bne.w	800a302 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a71e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a720:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a722:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a726:	429a      	cmp	r2, r3
 800a728:	f43f add6 	beq.w	800a2d8 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800a72c:	4d0b      	ldr	r5, [pc, #44]	@ (800a75c <HAL_RCC_OscConfig+0x54c>)
 800a72e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a730:	f023 0301 	bic.w	r3, r3, #1
 800a734:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800a736:	f7fc fbf7 	bl	8006f28 <HAL_GetTick>
 800a73a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a73c:	f7fc fbf4 	bl	8006f28 <HAL_GetTick>
 800a740:	42b0      	cmp	r0, r6
 800a742:	d0fb      	beq.n	800a73c <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a744:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a746:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a748:	f36f 03cf 	bfc	r3, #3, #13
 800a74c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a750:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800a752:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a754:	f043 0301 	orr.w	r3, r3, #1
 800a758:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800a75a:	e5bd      	b.n	800a2d8 <HAL_RCC_OscConfig+0xc8>
 800a75c:	58024400 	.word	0x58024400

0800a760 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	4c23      	ldr	r4, [pc, #140]	@ (800a7f0 <HAL_RCC_MCOConfig+0x90>)
 800a764:	b088      	sub	sp, #32
 800a766:	460e      	mov	r6, r1
 800a768:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a76a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800a76e:	b9f8      	cbnz	r0, 800a7b0 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800a770:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a774:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a778:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800a77a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a77e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a782:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	9301      	str	r3, [sp, #4]
 800a78a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a78c:	2302      	movs	r3, #2
 800a78e:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a792:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a794:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a798:	4816      	ldr	r0, [pc, #88]	@ (800a7f4 <HAL_RCC_MCOConfig+0x94>)
 800a79a:	f7fd fa4b 	bl	8007c34 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800a7a4:	ea43 0106 	orr.w	r1, r3, r6
 800a7a8:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a7aa:	6121      	str	r1, [r4, #16]
  }
}
 800a7ac:	b008      	add	sp, #32
 800a7ae:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800a7b0:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7b8:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a7ba:	480f      	ldr	r0, [pc, #60]	@ (800a7f8 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800a7bc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a7c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	9302      	str	r3, [sp, #8]
 800a7ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a7d8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a7da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a7dc:	f7fd fa2a 	bl	8007c34 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a7e0:	6923      	ldr	r3, [r4, #16]
 800a7e2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800a7e6:	ea43 0106 	orr.w	r1, r3, r6
 800a7ea:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800a7ee:	e7dc      	b.n	800a7aa <HAL_RCC_MCOConfig+0x4a>
 800a7f0:	58024400 	.word	0x58024400
 800a7f4:	58020000 	.word	0x58020000
 800a7f8:	58020800 	.word	0x58020800

0800a7fc <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7fc:	4b49      	ldr	r3, [pc, #292]	@ (800a924 <HAL_RCC_GetSysClockFreq+0x128>)
 800a7fe:	691a      	ldr	r2, [r3, #16]
 800a800:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800a804:	2a10      	cmp	r2, #16
{
 800a806:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a808:	f000 8088 	beq.w	800a91c <HAL_RCC_GetSysClockFreq+0x120>
 800a80c:	2a18      	cmp	r2, #24
 800a80e:	d00c      	beq.n	800a82a <HAL_RCC_GetSysClockFreq+0x2e>
 800a810:	2a00      	cmp	r2, #0
 800a812:	f040 8085 	bne.w	800a920 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4843      	ldr	r0, [pc, #268]	@ (800a928 <HAL_RCC_GetSysClockFreq+0x12c>)
 800a81a:	f012 0f20 	tst.w	r2, #32
 800a81e:	d003      	beq.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a826:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a828:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a82a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a82c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a82e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800a830:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a834:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800a83a:	d0f5      	beq.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a83c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a840:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a844:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a848:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a84c:	4362      	muls	r2, r4
 800a84e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 800a852:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a858:	ee06 2a90 	vmov	s13, r2
 800a85c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800a860:	d04e      	beq.n	800a900 <HAL_RCC_GetSysClockFreq+0x104>
 800a862:	2902      	cmp	r1, #2
 800a864:	d03e      	beq.n	800a8e4 <HAL_RCC_GetSysClockFreq+0xe8>
 800a866:	2900      	cmp	r1, #0
 800a868:	d14a      	bne.n	800a900 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	0692      	lsls	r2, r2, #26
 800a86e:	d527      	bpl.n	800a8c0 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a870:	6819      	ldr	r1, [r3, #0]
 800a872:	4a2d      	ldr	r2, [pc, #180]	@ (800a928 <HAL_RCC_GetSysClockFreq+0x12c>)
 800a874:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a87a:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a880:	ee07 2a90 	vmov	s15, r2
 800a884:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800a888:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800a88c:	ee07 3a10 	vmov	s14, r3
 800a890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a894:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a898:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a89c:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a8a0:	4b20      	ldr	r3, [pc, #128]	@ (800a924 <HAL_RCC_GetSysClockFreq+0x128>)
 800a8a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a8a8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a8aa:	ee07 3a10 	vmov	s14, r3
 800a8ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800a8b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a8b6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a8ba:	ee17 0a90 	vmov	r0, s15
 800a8be:	e7b3      	b.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c6:	ee07 3a90 	vmov	s15, r3
 800a8ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a8d6:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a92c <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8da:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a8de:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800a8e2:	e7dd      	b.n	800a8a0 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a8fa:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800a930 <HAL_RCC_GetSysClockFreq+0x134>
 800a8fe:	e7ec      	b.n	800a8da <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a906:	ee07 3a90 	vmov	s15, r3
 800a90a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a912:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a916:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800a934 <HAL_RCC_GetSysClockFreq+0x138>
 800a91a:	e7de      	b.n	800a8da <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a91c:	4806      	ldr	r0, [pc, #24]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a91e:	e783      	b.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800a920:	4806      	ldr	r0, [pc, #24]	@ (800a93c <HAL_RCC_GetSysClockFreq+0x140>)
 800a922:	e781      	b.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c>
 800a924:	58024400 	.word	0x58024400
 800a928:	03d09000 	.word	0x03d09000
 800a92c:	4c742400 	.word	0x4c742400
 800a930:	4bbebc20 	.word	0x4bbebc20
 800a934:	4a742400 	.word	0x4a742400
 800a938:	017d7840 	.word	0x017d7840
 800a93c:	003d0900 	.word	0x003d0900

0800a940 <HAL_RCC_ClockConfig>:
{
 800a940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a944:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a946:	4604      	mov	r4, r0
 800a948:	b910      	cbnz	r0, 800a950 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a94a:	2001      	movs	r0, #1
}
 800a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a950:	4a88      	ldr	r2, [pc, #544]	@ (800ab74 <HAL_RCC_ClockConfig+0x234>)
 800a952:	6813      	ldr	r3, [r2, #0]
 800a954:	f003 030f 	and.w	r3, r3, #15
 800a958:	428b      	cmp	r3, r1
 800a95a:	f0c0 8093 	bcc.w	800aa84 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	075f      	lsls	r7, r3, #29
 800a962:	f100 809b 	bmi.w	800aa9c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a966:	071e      	lsls	r6, r3, #28
 800a968:	d50b      	bpl.n	800a982 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a96a:	4983      	ldr	r1, [pc, #524]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800a96c:	6960      	ldr	r0, [r4, #20]
 800a96e:	69ca      	ldr	r2, [r1, #28]
 800a970:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a974:	4290      	cmp	r0, r2
 800a976:	d904      	bls.n	800a982 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a978:	69ca      	ldr	r2, [r1, #28]
 800a97a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a97e:	4302      	orrs	r2, r0
 800a980:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a982:	06d8      	lsls	r0, r3, #27
 800a984:	d50b      	bpl.n	800a99e <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a986:	497c      	ldr	r1, [pc, #496]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800a988:	69a0      	ldr	r0, [r4, #24]
 800a98a:	69ca      	ldr	r2, [r1, #28]
 800a98c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a990:	4290      	cmp	r0, r2
 800a992:	d904      	bls.n	800a99e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a994:	69ca      	ldr	r2, [r1, #28]
 800a996:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a99a:	4302      	orrs	r2, r0
 800a99c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a99e:	0699      	lsls	r1, r3, #26
 800a9a0:	d50b      	bpl.n	800a9ba <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a9a2:	4975      	ldr	r1, [pc, #468]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800a9a4:	69e0      	ldr	r0, [r4, #28]
 800a9a6:	6a0a      	ldr	r2, [r1, #32]
 800a9a8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a9ac:	4290      	cmp	r0, r2
 800a9ae:	d904      	bls.n	800a9ba <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a9b0:	6a0a      	ldr	r2, [r1, #32]
 800a9b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a9b6:	4302      	orrs	r2, r0
 800a9b8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9ba:	079a      	lsls	r2, r3, #30
 800a9bc:	d50b      	bpl.n	800a9d6 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a9be:	496e      	ldr	r1, [pc, #440]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800a9c0:	68e0      	ldr	r0, [r4, #12]
 800a9c2:	698a      	ldr	r2, [r1, #24]
 800a9c4:	f002 020f 	and.w	r2, r2, #15
 800a9c8:	4290      	cmp	r0, r2
 800a9ca:	d904      	bls.n	800a9d6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9cc:	698a      	ldr	r2, [r1, #24]
 800a9ce:	f022 020f 	bic.w	r2, r2, #15
 800a9d2:	4302      	orrs	r2, r0
 800a9d4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9d6:	07df      	lsls	r7, r3, #31
 800a9d8:	d46e      	bmi.n	800aab8 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	079e      	lsls	r6, r3, #30
 800a9de:	f100 80a1 	bmi.w	800ab24 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9e2:	4964      	ldr	r1, [pc, #400]	@ (800ab74 <HAL_RCC_ClockConfig+0x234>)
 800a9e4:	680a      	ldr	r2, [r1, #0]
 800a9e6:	f002 020f 	and.w	r2, r2, #15
 800a9ea:	42aa      	cmp	r2, r5
 800a9ec:	f200 80a8 	bhi.w	800ab40 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9f0:	0758      	lsls	r0, r3, #29
 800a9f2:	f100 80b1 	bmi.w	800ab58 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9f6:	0719      	lsls	r1, r3, #28
 800a9f8:	d50b      	bpl.n	800aa12 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9fa:	495f      	ldr	r1, [pc, #380]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800a9fc:	6960      	ldr	r0, [r4, #20]
 800a9fe:	69ca      	ldr	r2, [r1, #28]
 800aa00:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aa04:	4290      	cmp	r0, r2
 800aa06:	d204      	bcs.n	800aa12 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa08:	69ca      	ldr	r2, [r1, #28]
 800aa0a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800aa0e:	4302      	orrs	r2, r0
 800aa10:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa12:	06da      	lsls	r2, r3, #27
 800aa14:	d50b      	bpl.n	800aa2e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa16:	4958      	ldr	r1, [pc, #352]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800aa18:	69a0      	ldr	r0, [r4, #24]
 800aa1a:	69ca      	ldr	r2, [r1, #28]
 800aa1c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800aa20:	4290      	cmp	r0, r2
 800aa22:	d204      	bcs.n	800aa2e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa24:	69ca      	ldr	r2, [r1, #28]
 800aa26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aa2a:	4302      	orrs	r2, r0
 800aa2c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa2e:	069b      	lsls	r3, r3, #26
 800aa30:	d50b      	bpl.n	800aa4a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa32:	4a51      	ldr	r2, [pc, #324]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800aa34:	69e1      	ldr	r1, [r4, #28]
 800aa36:	6a13      	ldr	r3, [r2, #32]
 800aa38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa3c:	4299      	cmp	r1, r3
 800aa3e:	d204      	bcs.n	800aa4a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa40:	6a13      	ldr	r3, [r2, #32]
 800aa42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa46:	430b      	orrs	r3, r1
 800aa48:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa4a:	f7ff fed7 	bl	800a7fc <HAL_RCC_GetSysClockFreq>
 800aa4e:	494a      	ldr	r1, [pc, #296]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800aa50:	4a4a      	ldr	r2, [pc, #296]	@ (800ab7c <HAL_RCC_ClockConfig+0x23c>)
 800aa52:	698b      	ldr	r3, [r1, #24]
 800aa54:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800aa58:	5cd3      	ldrb	r3, [r2, r3]
 800aa5a:	f003 031f 	and.w	r3, r3, #31
 800aa5e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa60:	698b      	ldr	r3, [r1, #24]
 800aa62:	f003 030f 	and.w	r3, r3, #15
 800aa66:	5cd3      	ldrb	r3, [r2, r3]
 800aa68:	4a45      	ldr	r2, [pc, #276]	@ (800ab80 <HAL_RCC_ClockConfig+0x240>)
 800aa6a:	f003 031f 	and.w	r3, r3, #31
 800aa6e:	fa20 f303 	lsr.w	r3, r0, r3
 800aa72:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800aa74:	4b43      	ldr	r3, [pc, #268]	@ (800ab84 <HAL_RCC_ClockConfig+0x244>)
 800aa76:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800aa78:	4b43      	ldr	r3, [pc, #268]	@ (800ab88 <HAL_RCC_ClockConfig+0x248>)
}
 800aa7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	f7f6 bd72 	b.w	8001568 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa84:	6813      	ldr	r3, [r2, #0]
 800aa86:	f023 030f 	bic.w	r3, r3, #15
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa8e:	6813      	ldr	r3, [r2, #0]
 800aa90:	f003 030f 	and.w	r3, r3, #15
 800aa94:	428b      	cmp	r3, r1
 800aa96:	f47f af58 	bne.w	800a94a <HAL_RCC_ClockConfig+0xa>
 800aa9a:	e760      	b.n	800a95e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa9c:	4936      	ldr	r1, [pc, #216]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800aa9e:	6920      	ldr	r0, [r4, #16]
 800aaa0:	698a      	ldr	r2, [r1, #24]
 800aaa2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aaa6:	4290      	cmp	r0, r2
 800aaa8:	f67f af5d 	bls.w	800a966 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aaac:	698a      	ldr	r2, [r1, #24]
 800aaae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800aab2:	4302      	orrs	r2, r0
 800aab4:	618a      	str	r2, [r1, #24]
 800aab6:	e756      	b.n	800a966 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aab8:	4b2f      	ldr	r3, [pc, #188]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800aaba:	68a1      	ldr	r1, [r4, #8]
 800aabc:	699a      	ldr	r2, [r3, #24]
 800aabe:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800aac2:	430a      	orrs	r2, r1
 800aac4:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aac6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aac8:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aaca:	2902      	cmp	r1, #2
 800aacc:	d11d      	bne.n	800ab0a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aace:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aad2:	f43f af3a 	beq.w	800a94a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aad6:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aad8:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aadc:	4f26      	ldr	r7, [pc, #152]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aade:	f022 0207 	bic.w	r2, r2, #7
 800aae2:	430a      	orrs	r2, r1
 800aae4:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800aae6:	f7fc fa1f 	bl	8006f28 <HAL_GetTick>
 800aaea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	6862      	ldr	r2, [r4, #4]
 800aaf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aaf4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800aaf8:	f43f af6f 	beq.w	800a9da <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aafc:	f7fc fa14 	bl	8006f28 <HAL_GetTick>
 800ab00:	1b80      	subs	r0, r0, r6
 800ab02:	4540      	cmp	r0, r8
 800ab04:	d9f2      	bls.n	800aaec <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800ab06:	2003      	movs	r0, #3
 800ab08:	e720      	b.n	800a94c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab0a:	2903      	cmp	r1, #3
 800ab0c:	d102      	bne.n	800ab14 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab0e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800ab12:	e7de      	b.n	800aad2 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ab14:	2901      	cmp	r1, #1
 800ab16:	d102      	bne.n	800ab1e <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab18:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800ab1c:	e7d9      	b.n	800aad2 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab1e:	f012 0f04 	tst.w	r2, #4
 800ab22:	e7d6      	b.n	800aad2 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab24:	4914      	ldr	r1, [pc, #80]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800ab26:	68e0      	ldr	r0, [r4, #12]
 800ab28:	698a      	ldr	r2, [r1, #24]
 800ab2a:	f002 020f 	and.w	r2, r2, #15
 800ab2e:	4290      	cmp	r0, r2
 800ab30:	f4bf af57 	bcs.w	800a9e2 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab34:	698a      	ldr	r2, [r1, #24]
 800ab36:	f022 020f 	bic.w	r2, r2, #15
 800ab3a:	4302      	orrs	r2, r0
 800ab3c:	618a      	str	r2, [r1, #24]
 800ab3e:	e750      	b.n	800a9e2 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab40:	680a      	ldr	r2, [r1, #0]
 800ab42:	f022 020f 	bic.w	r2, r2, #15
 800ab46:	432a      	orrs	r2, r5
 800ab48:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab4a:	680a      	ldr	r2, [r1, #0]
 800ab4c:	f002 020f 	and.w	r2, r2, #15
 800ab50:	42aa      	cmp	r2, r5
 800ab52:	f47f aefa 	bne.w	800a94a <HAL_RCC_ClockConfig+0xa>
 800ab56:	e74b      	b.n	800a9f0 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab58:	4907      	ldr	r1, [pc, #28]	@ (800ab78 <HAL_RCC_ClockConfig+0x238>)
 800ab5a:	6920      	ldr	r0, [r4, #16]
 800ab5c:	698a      	ldr	r2, [r1, #24]
 800ab5e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ab62:	4290      	cmp	r0, r2
 800ab64:	f4bf af47 	bcs.w	800a9f6 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab68:	698a      	ldr	r2, [r1, #24]
 800ab6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ab6e:	4302      	orrs	r2, r0
 800ab70:	618a      	str	r2, [r1, #24]
 800ab72:	e740      	b.n	800a9f6 <HAL_RCC_ClockConfig+0xb6>
 800ab74:	52002000 	.word	0x52002000
 800ab78:	58024400 	.word	0x58024400
 800ab7c:	080270f4 	.word	0x080270f4
 800ab80:	24000068 	.word	0x24000068
 800ab84:	2400006c 	.word	0x2400006c
 800ab88:	24000074 	.word	0x24000074

0800ab8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab8c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab8e:	f7ff fe35 	bl	800a7fc <HAL_RCC_GetSysClockFreq>
 800ab92:	4a0b      	ldr	r2, [pc, #44]	@ (800abc0 <HAL_RCC_GetHCLKFreq+0x34>)
 800ab94:	490b      	ldr	r1, [pc, #44]	@ (800abc4 <HAL_RCC_GetHCLKFreq+0x38>)
 800ab96:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab98:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab9a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab9e:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aba2:	5ccb      	ldrb	r3, [r1, r3]
 800aba4:	f003 031f 	and.w	r3, r3, #31
 800aba8:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abac:	5c88      	ldrb	r0, [r1, r2]
 800abae:	4a06      	ldr	r2, [pc, #24]	@ (800abc8 <HAL_RCC_GetHCLKFreq+0x3c>)
 800abb0:	f000 001f 	and.w	r0, r0, #31
 800abb4:	fa23 f000 	lsr.w	r0, r3, r0
 800abb8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abba:	4a04      	ldr	r2, [pc, #16]	@ (800abcc <HAL_RCC_GetHCLKFreq+0x40>)
 800abbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800abbe:	bd08      	pop	{r3, pc}
 800abc0:	58024400 	.word	0x58024400
 800abc4:	080270f4 	.word	0x080270f4
 800abc8:	24000068 	.word	0x24000068
 800abcc:	2400006c 	.word	0x2400006c

0800abd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abd0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800abd2:	f7ff ffdb 	bl	800ab8c <HAL_RCC_GetHCLKFreq>
 800abd6:	4b05      	ldr	r3, [pc, #20]	@ (800abec <HAL_RCC_GetPCLK1Freq+0x1c>)
 800abd8:	4a05      	ldr	r2, [pc, #20]	@ (800abf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800abda:	69db      	ldr	r3, [r3, #28]
 800abdc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800abe0:	5cd3      	ldrb	r3, [r2, r3]
 800abe2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800abe6:	40d8      	lsrs	r0, r3
 800abe8:	bd08      	pop	{r3, pc}
 800abea:	bf00      	nop
 800abec:	58024400 	.word	0x58024400
 800abf0:	080270f4 	.word	0x080270f4

0800abf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abf4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800abf6:	f7ff ffc9 	bl	800ab8c <HAL_RCC_GetHCLKFreq>
 800abfa:	4b05      	ldr	r3, [pc, #20]	@ (800ac10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800abfc:	4a05      	ldr	r2, [pc, #20]	@ (800ac14 <HAL_RCC_GetPCLK2Freq+0x20>)
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800ac04:	5cd3      	ldrb	r3, [r2, r3]
 800ac06:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac0a:	40d8      	lsrs	r0, r3
 800ac0c:	bd08      	pop	{r3, pc}
 800ac0e:	bf00      	nop
 800ac10:	58024400 	.word	0x58024400
 800ac14:	080270f4 	.word	0x080270f4

0800ac18 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ac18:	233f      	movs	r3, #63	@ 0x3f
 800ac1a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ac1c:	4b11      	ldr	r3, [pc, #68]	@ (800ac64 <HAL_RCC_GetClockConfig+0x4c>)
 800ac1e:	691a      	ldr	r2, [r3, #16]
 800ac20:	f002 0207 	and.w	r2, r2, #7
 800ac24:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ac26:	699a      	ldr	r2, [r3, #24]
 800ac28:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800ac2c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ac2e:	699a      	ldr	r2, [r3, #24]
 800ac30:	f002 020f 	and.w	r2, r2, #15
 800ac34:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ac36:	699a      	ldr	r2, [r3, #24]
 800ac38:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ac3c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ac3e:	69da      	ldr	r2, [r3, #28]
 800ac40:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ac44:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ac46:	69da      	ldr	r2, [r3, #28]
 800ac48:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800ac4c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ac4e:	6a1b      	ldr	r3, [r3, #32]
 800ac50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ac54:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ac56:	4b04      	ldr	r3, [pc, #16]	@ (800ac68 <HAL_RCC_GetClockConfig+0x50>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 030f 	and.w	r3, r3, #15
 800ac5e:	600b      	str	r3, [r1, #0]
}
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	58024400 	.word	0x58024400
 800ac68:	52002000 	.word	0x52002000

0800ac6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac6e:	4c39      	ldr	r4, [pc, #228]	@ (800ad54 <RCCEx_PLL2_Config+0xe8>)
{
 800ac70:	4606      	mov	r6, r0
 800ac72:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac74:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d067      	beq.n	800ad4e <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac84:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac86:	f7fc f94f 	bl	8006f28 <HAL_GetTick>
 800ac8a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	011a      	lsls	r2, r3, #4
 800ac90:	d449      	bmi.n	800ad26 <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ac92:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ac94:	6832      	ldr	r2, [r6, #0]
 800ac96:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ac9a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ac9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aca0:	68b3      	ldr	r3, [r6, #8]
 800aca2:	68f2      	ldr	r2, [r6, #12]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	3a01      	subs	r2, #1
 800aca8:	025b      	lsls	r3, r3, #9
 800acaa:	0412      	lsls	r2, r2, #16
 800acac:	b29b      	uxth	r3, r3
 800acae:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800acb2:	4313      	orrs	r3, r2
 800acb4:	6872      	ldr	r2, [r6, #4]
 800acb6:	3a01      	subs	r2, #1
 800acb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acbc:	4313      	orrs	r3, r2
 800acbe:	6932      	ldr	r2, [r6, #16]
 800acc0:	3a01      	subs	r2, #1
 800acc2:	0612      	lsls	r2, r2, #24
 800acc4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800acc8:	4313      	orrs	r3, r2
 800acca:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800accc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800acce:	6972      	ldr	r2, [r6, #20]
 800acd0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800acd4:	4313      	orrs	r3, r2
 800acd6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800acd8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800acda:	69b2      	ldr	r2, [r6, #24]
 800acdc:	f023 0320 	bic.w	r3, r3, #32
 800ace0:	4313      	orrs	r3, r2
 800ace2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ace4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ace6:	f023 0310 	bic.w	r3, r3, #16
 800acea:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800acec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800acee:	69f2      	ldr	r2, [r6, #28]
 800acf0:	f36f 03cf 	bfc	r3, #3, #13
 800acf4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800acf8:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800acfa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800acfc:	f043 0310 	orr.w	r3, r3, #16
 800ad00:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad02:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ad04:	b9b5      	cbnz	r5, 800ad34 <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad0c:	4c11      	ldr	r4, [pc, #68]	@ (800ad54 <RCCEx_PLL2_Config+0xe8>)
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad14:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad16:	f7fc f907 	bl	8006f28 <HAL_GetTick>
 800ad1a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad1c:	6823      	ldr	r3, [r4, #0]
 800ad1e:	011b      	lsls	r3, r3, #4
 800ad20:	d50f      	bpl.n	800ad42 <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 800ad22:	2000      	movs	r0, #0
 800ad24:	e005      	b.n	800ad32 <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad26:	f7fc f8ff 	bl	8006f28 <HAL_GetTick>
 800ad2a:	1bc0      	subs	r0, r0, r7
 800ad2c:	2802      	cmp	r0, #2
 800ad2e:	d9ad      	bls.n	800ac8c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800ad30:	2003      	movs	r0, #3
}
 800ad32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad34:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad36:	bf0c      	ite	eq
 800ad38:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad3c:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800ad40:	e7e3      	b.n	800ad0a <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad42:	f7fc f8f1 	bl	8006f28 <HAL_GetTick>
 800ad46:	1b40      	subs	r0, r0, r5
 800ad48:	2802      	cmp	r0, #2
 800ad4a:	d9e7      	bls.n	800ad1c <RCCEx_PLL2_Config+0xb0>
 800ad4c:	e7f0      	b.n	800ad30 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 800ad4e:	2001      	movs	r0, #1
 800ad50:	e7ef      	b.n	800ad32 <RCCEx_PLL2_Config+0xc6>
 800ad52:	bf00      	nop
 800ad54:	58024400 	.word	0x58024400

0800ad58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad5a:	4c39      	ldr	r4, [pc, #228]	@ (800ae40 <RCCEx_PLL3_Config+0xe8>)
{
 800ad5c:	4606      	mov	r6, r0
 800ad5e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad60:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d067      	beq.n	800ae3a <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad70:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad72:	f7fc f8d9 	bl	8006f28 <HAL_GetTick>
 800ad76:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	009a      	lsls	r2, r3, #2
 800ad7c:	d449      	bmi.n	800ae12 <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ad7e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ad80:	6832      	ldr	r2, [r6, #0]
 800ad82:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800ad86:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ad8a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad8c:	68b3      	ldr	r3, [r6, #8]
 800ad8e:	68f2      	ldr	r2, [r6, #12]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	3a01      	subs	r2, #1
 800ad94:	025b      	lsls	r3, r3, #9
 800ad96:	0412      	lsls	r2, r2, #16
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	6872      	ldr	r2, [r6, #4]
 800ada2:	3a01      	subs	r2, #1
 800ada4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ada8:	4313      	orrs	r3, r2
 800adaa:	6932      	ldr	r2, [r6, #16]
 800adac:	3a01      	subs	r2, #1
 800adae:	0612      	lsls	r2, r2, #24
 800adb0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800adb4:	4313      	orrs	r3, r2
 800adb6:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800adb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800adba:	6972      	ldr	r2, [r6, #20]
 800adbc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800adc0:	4313      	orrs	r3, r2
 800adc2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800adc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800adc6:	69b2      	ldr	r2, [r6, #24]
 800adc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800adcc:	4313      	orrs	r3, r2
 800adce:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800add0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800add2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800add6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800add8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800adda:	69f2      	ldr	r2, [r6, #28]
 800addc:	f36f 03cf 	bfc	r3, #3, #13
 800ade0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ade4:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ade6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ade8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adec:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800adee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800adf0:	b9b5      	cbnz	r5, 800ae20 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800adf2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800adf6:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800adf8:	4c11      	ldr	r4, [pc, #68]	@ (800ae40 <RCCEx_PLL3_Config+0xe8>)
 800adfa:	6823      	ldr	r3, [r4, #0]
 800adfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae00:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae02:	f7fc f891 	bl	8006f28 <HAL_GetTick>
 800ae06:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	d50f      	bpl.n	800ae2e <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e005      	b.n	800ae1e <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae12:	f7fc f889 	bl	8006f28 <HAL_GetTick>
 800ae16:	1bc0      	subs	r0, r0, r7
 800ae18:	2802      	cmp	r0, #2
 800ae1a:	d9ad      	bls.n	800ad78 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800ae1c:	2003      	movs	r0, #3
}
 800ae1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ae20:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae22:	bf0c      	ite	eq
 800ae24:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ae28:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800ae2c:	e7e3      	b.n	800adf6 <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae2e:	f7fc f87b 	bl	8006f28 <HAL_GetTick>
 800ae32:	1b40      	subs	r0, r0, r5
 800ae34:	2802      	cmp	r0, #2
 800ae36:	d9e7      	bls.n	800ae08 <RCCEx_PLL3_Config+0xb0>
 800ae38:	e7f0      	b.n	800ae1c <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800ae3a:	2001      	movs	r0, #1
 800ae3c:	e7ef      	b.n	800ae1e <RCCEx_PLL3_Config+0xc6>
 800ae3e:	bf00      	nop
 800ae40:	58024400 	.word	0x58024400

0800ae44 <HAL_RCCEx_PeriphCLKConfig>:
{
 800ae44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae48:	6803      	ldr	r3, [r0, #0]
{
 800ae4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae4c:	011c      	lsls	r4, r3, #4
 800ae4e:	d51e      	bpl.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae50:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ae52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae56:	d02a      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800ae58:	d80f      	bhi.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x36>
 800ae5a:	b1d3      	cbz	r3, 800ae92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800ae5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae60:	d01d      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800ae62:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	05d8      	lsls	r0, r3, #23
 800ae68:	d54f      	bpl.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ae6a:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d84b      	bhi.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800ae70:	e8df f003 	tbb	[pc, r3]
 800ae74:	27443d22 	.word	0x27443d22
 800ae78:	27          	.byte	0x27
 800ae79:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae7e:	d1f0      	bne.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ae80:	4a86      	ldr	r2, [pc, #536]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ae82:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800ae84:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ae86:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ae8a:	430b      	orrs	r3, r1
 800ae8c:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae8e:	2600      	movs	r6, #0
 800ae90:	e7e8      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae92:	4a82      	ldr	r2, [pc, #520]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ae94:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ae96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ae9c:	e7f0      	b.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae9e:	2102      	movs	r1, #2
 800aea0:	3008      	adds	r0, #8
 800aea2:	f7ff fee3 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aea6:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d1db      	bne.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800aeac:	e7e8      	b.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aeae:	2102      	movs	r1, #2
 800aeb0:	3028      	adds	r0, #40	@ 0x28
 800aeb2:	f7ff ff51 	bl	800ad58 <RCCEx_PLL3_Config>
 800aeb6:	e7f6      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeb8:	4a78      	ldr	r2, [pc, #480]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aeba:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aec0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800aec2:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800aec4:	bb1c      	cbnz	r4, 800af0e <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aec6:	4a75      	ldr	r2, [pc, #468]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aec8:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800aeca:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800aecc:	f023 0307 	bic.w	r3, r3, #7
 800aed0:	430b      	orrs	r3, r1
 800aed2:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	0599      	lsls	r1, r3, #22
 800aed8:	d528      	bpl.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800aeda:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800aedc:	2b80      	cmp	r3, #128	@ 0x80
 800aede:	d043      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800aee0:	d817      	bhi.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800aee2:	b3a3      	cbz	r3, 800af4e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800aee4:	2b40      	cmp	r3, #64	@ 0x40
 800aee6:	d038      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800aee8:	2601      	movs	r6, #1
 800aeea:	4634      	mov	r4, r6
 800aeec:	e01e      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aeee:	2100      	movs	r1, #0
 800aef0:	f105 0008 	add.w	r0, r5, #8
 800aef4:	f7ff feba 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aef8:	4604      	mov	r4, r0
        break;
 800aefa:	e7e3      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aefc:	2100      	movs	r1, #0
 800aefe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800af02:	f7ff ff29 	bl	800ad58 <RCCEx_PLL3_Config>
 800af06:	e7f7      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800af08:	2601      	movs	r6, #1
 800af0a:	4634      	mov	r4, r6
 800af0c:	e7e2      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x90>
      status = ret;
 800af0e:	4626      	mov	r6, r4
 800af10:	e7e0      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800af12:	2bc0      	cmp	r3, #192	@ 0xc0
 800af14:	d002      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800af16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af1a:	d1e5      	bne.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800af1c:	bb54      	cbnz	r4, 800af74 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800af1e:	4a5f      	ldr	r2, [pc, #380]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af20:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800af22:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800af24:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800af28:	430b      	orrs	r3, r1
 800af2a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	055a      	lsls	r2, r3, #21
 800af30:	d531      	bpl.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800af32:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800af36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af3a:	d049      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800af3c:	d81c      	bhi.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d039      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800af42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af46:	d03c      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800af48:	2601      	movs	r6, #1
 800af4a:	4634      	mov	r4, r6
 800af4c:	e023      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af4e:	4a53      	ldr	r2, [pc, #332]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af50:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800af52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af56:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800af58:	e7e0      	b.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af5a:	2100      	movs	r1, #0
 800af5c:	f105 0008 	add.w	r0, r5, #8
 800af60:	f7ff fe84 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af64:	4604      	mov	r4, r0
        break;
 800af66:	e7d9      	b.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af68:	2100      	movs	r1, #0
 800af6a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800af6e:	f7ff fef3 	bl	800ad58 <RCCEx_PLL3_Config>
 800af72:	e7f7      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x120>
      status = ret;
 800af74:	4626      	mov	r6, r4
 800af76:	e7d9      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800af78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800af7c:	d002      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800af7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800af82:	d1e1      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800af84:	bb54      	cbnz	r4, 800afdc <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af86:	4a45      	ldr	r2, [pc, #276]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af88:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800af8c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800af8e:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800af92:	430b      	orrs	r3, r1
 800af94:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af96:	682b      	ldr	r3, [r5, #0]
 800af98:	051b      	lsls	r3, r3, #20
 800af9a:	d530      	bpl.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800af9c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800afa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afa4:	d045      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800afa6:	d81b      	bhi.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800afa8:	b3b3      	cbz	r3, 800b018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800afaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afae:	d039      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800afb0:	2601      	movs	r6, #1
 800afb2:	4634      	mov	r4, r6
 800afb4:	e023      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afb6:	4a39      	ldr	r2, [pc, #228]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800afb8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800afba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800afbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800afc0:	e7e0      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afc2:	2100      	movs	r1, #0
 800afc4:	f105 0008 	add.w	r0, r5, #8
 800afc8:	f7ff fe50 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afcc:	4604      	mov	r4, r0
        break;
 800afce:	e7d9      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afd0:	2100      	movs	r1, #0
 800afd2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800afd6:	f7ff febf 	bl	800ad58 <RCCEx_PLL3_Config>
 800afda:	e7f7      	b.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x188>
      status = ret;
 800afdc:	4626      	mov	r6, r4
 800afde:	e7da      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800afe0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800afe4:	d002      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800afe6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800afea:	d1e1      	bne.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800afec:	bb3c      	cbnz	r4, 800b03e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800afee:	4a2b      	ldr	r2, [pc, #172]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aff0:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800aff4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aff6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800affa:	430b      	orrs	r3, r1
 800affc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	019f      	lsls	r7, r3, #6
 800b002:	d528      	bpl.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800b004:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b006:	2b20      	cmp	r3, #32
 800b008:	d03e      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800b00a:	d81a      	bhi.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b00c:	b1db      	cbz	r3, 800b046 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b00e:	2b10      	cmp	r3, #16
 800b010:	d034      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800b012:	2601      	movs	r6, #1
 800b014:	4634      	mov	r4, r6
 800b016:	e01e      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b018:	4a20      	ldr	r2, [pc, #128]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b01a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b01c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b020:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b022:	e7e3      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b024:	2100      	movs	r1, #0
 800b026:	f105 0008 	add.w	r0, r5, #8
 800b02a:	f7ff fe1f 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b02e:	4604      	mov	r4, r0
        break;
 800b030:	e7dc      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b032:	2100      	movs	r1, #0
 800b034:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b038:	f7ff fe8e 	bl	800ad58 <RCCEx_PLL3_Config>
 800b03c:	e7f7      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      status = ret;
 800b03e:	4626      	mov	r6, r4
 800b040:	e7dd      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800b042:	2b30      	cmp	r3, #48	@ 0x30
 800b044:	d1e5      	bne.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800b046:	bb34      	cbnz	r4, 800b096 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b048:	4a14      	ldr	r2, [pc, #80]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b04a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b04c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b04e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b052:	430b      	orrs	r3, r1
 800b054:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b056:	682b      	ldr	r3, [r5, #0]
 800b058:	04d8      	lsls	r0, r3, #19
 800b05a:	d530      	bpl.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b05c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b05e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b062:	f000 8095 	beq.w	800b190 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b066:	d81b      	bhi.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 8084 	beq.w	800b176 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b06e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b072:	f000 8086 	beq.w	800b182 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800b076:	2601      	movs	r6, #1
 800b078:	4634      	mov	r4, r6
 800b07a:	e020      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b07c:	4a07      	ldr	r2, [pc, #28]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b07e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b084:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b086:	e7de      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b088:	2102      	movs	r1, #2
 800b08a:	f105 0008 	add.w	r0, r5, #8
 800b08e:	f7ff fded 	bl	800ac6c <RCCEx_PLL2_Config>
 800b092:	4604      	mov	r4, r0
        break;
 800b094:	e7d7      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x202>
      status = ret;
 800b096:	4626      	mov	r6, r4
 800b098:	e7dd      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800b09a:	bf00      	nop
 800b09c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800b0a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b0a4:	d002      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x268>
 800b0a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0aa:	d1e4      	bne.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800b0ac:	2c00      	cmp	r4, #0
 800b0ae:	d175      	bne.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0b0:	4a93      	ldr	r2, [pc, #588]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b0b2:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800b0b4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b0b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b0be:	682b      	ldr	r3, [r5, #0]
 800b0c0:	0499      	lsls	r1, r3, #18
 800b0c2:	d50c      	bpl.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b0c4:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800b0c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0ca:	f000 8081 	beq.w	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b0ce:	d867      	bhi.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d06d      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b0d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0d8:	d073      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b0da:	2601      	movs	r6, #1
 800b0dc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b0de:	682b      	ldr	r3, [r5, #0]
 800b0e0:	045a      	lsls	r2, r3, #17
 800b0e2:	d50e      	bpl.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b0e4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800b0e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0ec:	f000 8091 	beq.w	800b212 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b0f0:	d876      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d07c      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b0f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0fa:	f000 8083 	beq.w	800b204 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800b0fe:	2601      	movs	r6, #1
 800b100:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b102:	682b      	ldr	r3, [r5, #0]
 800b104:	015b      	lsls	r3, r3, #5
 800b106:	d515      	bpl.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800b108:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b10a:	b14b      	cbz	r3, 800b120 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b10c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b110:	f040 8087 	bne.w	800b222 <HAL_RCCEx_PeriphCLKConfig+0x3de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b114:	2101      	movs	r1, #1
 800b116:	f105 0008 	add.w	r0, r5, #8
 800b11a:	f7ff fda7 	bl	800ac6c <RCCEx_PLL2_Config>
 800b11e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b120:	2c00      	cmp	r4, #0
 800b122:	f040 8081 	bne.w	800b228 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800b126:	4a76      	ldr	r2, [pc, #472]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b128:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800b12a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b12c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b130:	430b      	orrs	r3, r1
 800b132:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	041f      	lsls	r7, r3, #16
 800b138:	d511      	bpl.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800b13a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b13c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b140:	d074      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b146:	d077      	beq.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d17c      	bne.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x402>
    if (ret == HAL_OK)
 800b14c:	2c00      	cmp	r4, #0
 800b14e:	d17d      	bne.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b150:	4a6b      	ldr	r2, [pc, #428]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b152:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800b154:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b156:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800b15a:	430b      	orrs	r3, r1
 800b15c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b15e:	682b      	ldr	r3, [r5, #0]
 800b160:	01d8      	lsls	r0, r3, #7
 800b162:	f140 8083 	bpl.w	800b26c <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch (PeriphClkInit->FmcClockSelection)
 800b166:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800b168:	2b03      	cmp	r3, #3
 800b16a:	f200 80c4 	bhi.w	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b16e:	e8df f003 	tbb	[pc, r3]
 800b172:	6f74      	.short	0x6f74
 800b174:	74bb      	.short	0x74bb
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b176:	4a62      	ldr	r2, [pc, #392]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b178:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b17a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b17e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b180:	e794      	b.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b182:	2100      	movs	r1, #0
 800b184:	f105 0008 	add.w	r0, r5, #8
 800b188:	f7ff fd70 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b18c:	4604      	mov	r4, r0
        break;
 800b18e:	e78d      	b.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b190:	2100      	movs	r1, #0
 800b192:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b196:	f7ff fddf 	bl	800ad58 <RCCEx_PLL3_Config>
 800b19a:	e7f7      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x348>
      status = ret;
 800b19c:	4626      	mov	r6, r4
 800b19e:	e78e      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b1a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b1a4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800b1a8:	d002      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b1aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1ae:	d194      	bne.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800b1b0:	b9a4      	cbnz	r4, 800b1dc <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1b2:	4a53      	ldr	r2, [pc, #332]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b1b4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800b1b6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b1b8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	6513      	str	r3, [r2, #80]	@ 0x50
 800b1c0:	e78d      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	f105 0008 	add.w	r0, r5, #8
 800b1c8:	f7ff fd50 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1cc:	4604      	mov	r4, r0
        break;
 800b1ce:	e7ef      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b1d6:	f7ff fdbf 	bl	800ad58 <RCCEx_PLL3_Config>
 800b1da:	e7f7      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x388>
      status = ret;
 800b1dc:	4626      	mov	r6, r4
 800b1de:	e77e      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b1e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b1e4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b1e8:	d002      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b1ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b1ee:	d186      	bne.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800b1f0:	b9ac      	cbnz	r4, 800b21e <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b1f2:	4a43      	ldr	r2, [pc, #268]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b1f4:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800b1f8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b1fa:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b1fe:	430b      	orrs	r3, r1
 800b200:	6593      	str	r3, [r2, #88]	@ 0x58
 800b202:	e77e      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b204:	2101      	movs	r1, #1
 800b206:	f105 0008 	add.w	r0, r5, #8
 800b20a:	f7ff fd2f 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b20e:	4604      	mov	r4, r0
        break;
 800b210:	e7ee      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b212:	2101      	movs	r1, #1
 800b214:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b218:	f7ff fd9e 	bl	800ad58 <RCCEx_PLL3_Config>
 800b21c:	e7f7      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      status = ret;
 800b21e:	4626      	mov	r6, r4
 800b220:	e76f      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800b222:	2601      	movs	r6, #1
 800b224:	4634      	mov	r4, r6
 800b226:	e785      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      status = ret;
 800b228:	4626      	mov	r6, r4
 800b22a:	e783      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b22c:	4a34      	ldr	r2, [pc, #208]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b22e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b234:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b236:	e789      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b238:	2101      	movs	r1, #1
 800b23a:	f105 0008 	add.w	r0, r5, #8
 800b23e:	f7ff fd15 	bl	800ac6c <RCCEx_PLL2_Config>
 800b242:	4604      	mov	r4, r0
        break;
 800b244:	e782      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800b246:	2601      	movs	r6, #1
 800b248:	4634      	mov	r4, r6
 800b24a:	e788      	b.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x31a>
      status = ret;
 800b24c:	4626      	mov	r6, r4
 800b24e:	e786      	b.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b250:	4a2b      	ldr	r2, [pc, #172]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b252:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b25a:	2c00      	cmp	r4, #0
 800b25c:	d14e      	bne.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b25e:	4a28      	ldr	r2, [pc, #160]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b260:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800b262:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b264:	f023 0303 	bic.w	r3, r3, #3
 800b268:	430b      	orrs	r3, r1
 800b26a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	0259      	lsls	r1, r3, #9
 800b270:	d554      	bpl.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b272:	4f24      	ldr	r7, [pc, #144]	@ (800b304 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b27a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800b27c:	f7fb fe54 	bl	8006f28 <HAL_GetTick>
 800b280:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	05da      	lsls	r2, r3, #23
 800b286:	d541      	bpl.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if (ret == HAL_OK)
 800b288:	2c00      	cmp	r4, #0
 800b28a:	d174      	bne.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x532>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b28c:	4b1c      	ldr	r3, [pc, #112]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b28e:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800b292:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b294:	4042      	eors	r2, r0
 800b296:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800b29a:	d00b      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x470>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b29c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800b29e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b2a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2a4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800b2a8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2aa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b2ac:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800b2b0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800b2b2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b2b4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b2b8:	d048      	beq.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x508>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2ba:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800b2be:	4910      	ldr	r1, [pc, #64]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b2c0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800b2c4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800b2c8:	d151      	bne.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b2ca:	6908      	ldr	r0, [r1, #16]
 800b2cc:	4a0e      	ldr	r2, [pc, #56]	@ (800b308 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b2ce:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800b2d2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800b2d6:	4302      	orrs	r2, r0
 800b2d8:	610a      	str	r2, [r1, #16]
 800b2da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2de:	4a08      	ldr	r2, [pc, #32]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b2e0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800b2e2:	430b      	orrs	r3, r1
 800b2e4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b2e6:	e019      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b2e8:	2102      	movs	r1, #2
 800b2ea:	f105 0008 	add.w	r0, r5, #8
 800b2ee:	f7ff fcbd 	bl	800ac6c <RCCEx_PLL2_Config>
 800b2f2:	4604      	mov	r4, r0
        break;
 800b2f4:	e7b1      	b.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->FmcClockSelection)
 800b2f6:	2601      	movs	r6, #1
 800b2f8:	4634      	mov	r4, r6
 800b2fa:	e7b7      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x428>
      status = ret;
 800b2fc:	4626      	mov	r6, r4
 800b2fe:	e7b5      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b300:	58024400 	.word	0x58024400
 800b304:	58024800 	.word	0x58024800
 800b308:	00ffffcf 	.word	0x00ffffcf
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b30c:	f7fb fe0c 	bl	8006f28 <HAL_GetTick>
 800b310:	eba0 0008 	sub.w	r0, r0, r8
 800b314:	2864      	cmp	r0, #100	@ 0x64
 800b316:	d9b4      	bls.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x43e>
        ret = HAL_TIMEOUT;
 800b318:	2603      	movs	r6, #3
 800b31a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	07d8      	lsls	r0, r3, #31
 800b320:	d509      	bpl.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b322:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800b326:	2b10      	cmp	r3, #16
 800b328:	d03e      	beq.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x564>
 800b32a:	d826      	bhi.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x536>
 800b32c:	b35b      	cbz	r3, 800b386 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800b32e:	2b08      	cmp	r3, #8
 800b330:	d033      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x556>
 800b332:	2601      	movs	r6, #1
 800b334:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b336:	682b      	ldr	r3, [r5, #0]
 800b338:	0799      	lsls	r1, r3, #30
 800b33a:	d54b      	bpl.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b33c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800b33e:	2b05      	cmp	r3, #5
 800b340:	d85e      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b342:	e8df f003 	tbb	[pc, r3]
 800b346:	393f      	.short	0x393f
 800b348:	3f3f3f57 	.word	0x3f3f3f57
        tickstart = HAL_GetTick();
 800b34c:	f7fb fdec 	bl	8006f28 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b350:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800b40c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        tickstart = HAL_GetTick();
 800b354:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b356:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b35a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800b35e:	079b      	lsls	r3, r3, #30
 800b360:	d4ab      	bmi.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x476>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b362:	f7fb fde1 	bl	8006f28 <HAL_GetTick>
 800b366:	1bc0      	subs	r0, r0, r7
 800b368:	4548      	cmp	r0, r9
 800b36a:	d9f6      	bls.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x516>
 800b36c:	e7d4      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b36e:	690a      	ldr	r2, [r1, #16]
 800b370:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800b374:	e7b0      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
      status = ret;
 800b376:	4626      	mov	r6, r4
 800b378:	e7d0      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b37a:	f023 0208 	bic.w	r2, r3, #8
 800b37e:	2a20      	cmp	r2, #32
 800b380:	d001      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800b382:	2b18      	cmp	r3, #24
 800b384:	d1d5      	bne.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if (ret == HAL_OK)
 800b386:	b9ac      	cbnz	r4, 800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b388:	4a20      	ldr	r2, [pc, #128]	@ (800b40c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b38a:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800b38e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b390:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800b394:	430b      	orrs	r3, r1
 800b396:	6553      	str	r3, [r2, #84]	@ 0x54
 800b398:	e7cd      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b39a:	2101      	movs	r1, #1
 800b39c:	f105 0008 	add.w	r0, r5, #8
 800b3a0:	f7ff fc64 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3a4:	4604      	mov	r4, r0
        break;
 800b3a6:	e7ee      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b3ae:	f7ff fcd3 	bl	800ad58 <RCCEx_PLL3_Config>
 800b3b2:	e7f7      	b.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = ret;
 800b3b4:	4626      	mov	r6, r4
 800b3b6:	e7be      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	f105 0008 	add.w	r0, r5, #8
 800b3be:	f7ff fc55 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3c2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b3c4:	b9fc      	cbnz	r4, 800b406 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b3c6:	4a11      	ldr	r2, [pc, #68]	@ (800b40c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3c8:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800b3ca:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b3cc:	f023 0307 	bic.w	r3, r3, #7
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	075a      	lsls	r2, r3, #29
 800b3d8:	d52b      	bpl.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b3da:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800b3de:	2b05      	cmp	r3, #5
 800b3e0:	f200 816e 	bhi.w	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800b3e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b3e8:	0014001a 	.word	0x0014001a
 800b3ec:	001a0166 	.word	0x001a0166
 800b3f0:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3f4:	2101      	movs	r1, #1
 800b3f6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b3fa:	f7ff fcad 	bl	800ad58 <RCCEx_PLL3_Config>
 800b3fe:	e7e0      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b400:	2601      	movs	r6, #1
 800b402:	4634      	mov	r4, r6
 800b404:	e7e6      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x590>
      status = ret;
 800b406:	4626      	mov	r6, r4
 800b408:	e7e4      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x590>
 800b40a:	bf00      	nop
 800b40c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b410:	2101      	movs	r1, #1
 800b412:	f105 0008 	add.w	r0, r5, #8
 800b416:	f7ff fc29 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b41a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b41c:	2c00      	cmp	r4, #0
 800b41e:	f040 8152 	bne.w	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b422:	4aaa      	ldr	r2, [pc, #680]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b424:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800b428:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b42a:	f023 0307 	bic.w	r3, r3, #7
 800b42e:	430b      	orrs	r3, r1
 800b430:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b432:	682b      	ldr	r3, [r5, #0]
 800b434:	069b      	lsls	r3, r3, #26
 800b436:	d510      	bpl.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b438:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800b43c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b440:	f000 8160 	beq.w	800b704 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800b444:	f200 8144 	bhi.w	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 814a 	beq.w	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800b44e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b452:	f000 8150 	beq.w	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800b456:	2601      	movs	r6, #1
 800b458:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b45a:	682b      	ldr	r3, [r5, #0]
 800b45c:	065f      	lsls	r7, r3, #25
 800b45e:	d510      	bpl.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b460:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800b464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b468:	f000 816e 	beq.w	800b748 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800b46c:	f200 8152 	bhi.w	800b714 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800b470:	2b00      	cmp	r3, #0
 800b472:	f000 8158 	beq.w	800b726 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b47a:	f000 815e 	beq.w	800b73a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800b47e:	2601      	movs	r6, #1
 800b480:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b482:	682b      	ldr	r3, [r5, #0]
 800b484:	0618      	lsls	r0, r3, #24
 800b486:	d510      	bpl.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b488:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800b48c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b490:	f000 817c 	beq.w	800b78c <HAL_RCCEx_PeriphCLKConfig+0x948>
 800b494:	f200 8160 	bhi.w	800b758 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 8166 	beq.w	800b76a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800b49e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4a2:	f000 816c 	beq.w	800b77e <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800b4a6:	2601      	movs	r6, #1
 800b4a8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b4aa:	682b      	ldr	r3, [r5, #0]
 800b4ac:	0719      	lsls	r1, r3, #28
 800b4ae:	d514      	bpl.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x696>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b4b0:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800b4b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4b8:	d107      	bne.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x686>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4ba:	2102      	movs	r1, #2
 800b4bc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b4c0:	f7ff fc4a 	bl	800ad58 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	bf18      	it	ne
 800b4c8:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b4ca:	4a80      	ldr	r2, [pc, #512]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b4cc:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800b4d0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b4d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b4d6:	430b      	orrs	r3, r1
 800b4d8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b4da:	682b      	ldr	r3, [r5, #0]
 800b4dc:	06da      	lsls	r2, r3, #27
 800b4de:	d514      	bpl.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b4e0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800b4e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4e8:	d107      	bne.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4ea:	2102      	movs	r1, #2
 800b4ec:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b4f0:	f7ff fc32 	bl	800ad58 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	bf18      	it	ne
 800b4f8:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b4fa:	4a74      	ldr	r2, [pc, #464]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b4fc:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800b500:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b506:	430b      	orrs	r3, r1
 800b508:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b50a:	682b      	ldr	r3, [r5, #0]
 800b50c:	031b      	lsls	r3, r3, #12
 800b50e:	d51b      	bpl.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 800b510:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b514:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b518:	f000 8140 	beq.w	800b79c <HAL_RCCEx_PeriphCLKConfig+0x958>
 800b51c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b520:	d007      	beq.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b522:	2900      	cmp	r1, #0
 800b524:	f040 8140 	bne.w	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x964>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b528:	f105 0008 	add.w	r0, r5, #8
 800b52c:	f7ff fb9e 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b530:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b532:	2c00      	cmp	r4, #0
 800b534:	f040 813b 	bne.w	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b538:	4a64      	ldr	r2, [pc, #400]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b53a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b53e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b540:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800b544:	430b      	orrs	r3, r1
 800b546:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	035f      	lsls	r7, r3, #13
 800b54c:	d50f      	bpl.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x72a>
    switch (PeriphClkInit->UsbClockSelection)
 800b54e:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800b552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b556:	f000 813b 	beq.w	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b55a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b55e:	f000 812d 	beq.w	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x978>
 800b562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b566:	f000 8124 	beq.w	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b56a:	2601      	movs	r6, #1
 800b56c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b56e:	682b      	ldr	r3, [r5, #0]
 800b570:	03d8      	lsls	r0, r3, #15
 800b572:	d509      	bpl.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b574:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 8133 	beq.w	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800b57c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b580:	f000 813d 	beq.w	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b584:	2601      	movs	r6, #1
 800b586:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	0099      	lsls	r1, r3, #2
 800b58c:	d507      	bpl.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x75a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b58e:	2102      	movs	r1, #2
 800b590:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b594:	f7ff fbe0 	bl	800ad58 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800b598:	2800      	cmp	r0, #0
 800b59a:	bf18      	it	ne
 800b59c:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b59e:	e9d5 3100 	ldrd	r3, r1, [r5]
 800b5a2:	039a      	lsls	r2, r3, #14
 800b5a4:	f140 8143 	bpl.w	800b82e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    switch (PeriphClkInit->RngClockSelection)
 800b5a8:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800b5ac:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b5b0:	f000 813f 	beq.w	800b832 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800b5b4:	f200 812c 	bhi.w	800b810 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	f000 812f 	beq.w	800b81c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800b5be:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b5c0:	02df      	lsls	r7, r3, #11
 800b5c2:	d506      	bpl.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b5c4:	4841      	ldr	r0, [pc, #260]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b5c6:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800b5c8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b5ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b5ce:	4332      	orrs	r2, r6
 800b5d0:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b5d2:	00de      	lsls	r6, r3, #3
 800b5d4:	d507      	bpl.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b5d6:	483d      	ldr	r0, [pc, #244]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b5d8:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800b5dc:	6902      	ldr	r2, [r0, #16]
 800b5de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b5e2:	4332      	orrs	r2, r6
 800b5e4:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b5e6:	0298      	lsls	r0, r3, #10
 800b5e8:	d506      	bpl.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b5ea:	4838      	ldr	r0, [pc, #224]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b5ec:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800b5ee:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b5f0:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b5f4:	4332      	orrs	r2, r6
 800b5f6:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b5f8:	005a      	lsls	r2, r3, #1
 800b5fa:	d509      	bpl.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b5fc:	4a33      	ldr	r2, [pc, #204]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b5fe:	6910      	ldr	r0, [r2, #16]
 800b600:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800b604:	6110      	str	r0, [r2, #16]
 800b606:	6910      	ldr	r0, [r2, #16]
 800b608:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800b60c:	4330      	orrs	r0, r6
 800b60e:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b610:	2b00      	cmp	r3, #0
 800b612:	da06      	bge.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b614:	482d      	ldr	r0, [pc, #180]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b616:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b618:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800b61a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b61e:	4332      	orrs	r2, r6
 800b620:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b622:	021f      	lsls	r7, r3, #8
 800b624:	d507      	bpl.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b626:	4a29      	ldr	r2, [pc, #164]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b628:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800b62c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b62e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b632:	4303      	orrs	r3, r0
 800b634:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b636:	07ce      	lsls	r6, r1, #31
 800b638:	d506      	bpl.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x804>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b63a:	2100      	movs	r1, #0
 800b63c:	f105 0008 	add.w	r0, r5, #8
 800b640:	f7ff fb14 	bl	800ac6c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b644:	4607      	mov	r7, r0
 800b646:	b900      	cbnz	r0, 800b64a <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch (PeriphClkInit->RngClockSelection)
 800b648:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b64a:	686b      	ldr	r3, [r5, #4]
 800b64c:	079c      	lsls	r4, r3, #30
 800b64e:	d506      	bpl.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x81a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b650:	2101      	movs	r1, #1
 800b652:	f105 0008 	add.w	r0, r5, #8
 800b656:	f7ff fb09 	bl	800ac6c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b65a:	4606      	mov	r6, r0
 800b65c:	b900      	cbnz	r0, 800b660 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    switch (PeriphClkInit->RngClockSelection)
 800b65e:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b660:	686b      	ldr	r3, [r5, #4]
 800b662:	0758      	lsls	r0, r3, #29
 800b664:	d506      	bpl.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x830>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b666:	2102      	movs	r1, #2
 800b668:	f105 0008 	add.w	r0, r5, #8
 800b66c:	f7ff fafe 	bl	800ac6c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b670:	4604      	mov	r4, r0
 800b672:	b900      	cbnz	r0, 800b676 <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch (PeriphClkInit->RngClockSelection)
 800b674:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b676:	686b      	ldr	r3, [r5, #4]
 800b678:	0719      	lsls	r1, r3, #28
 800b67a:	d506      	bpl.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x846>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b67c:	2100      	movs	r1, #0
 800b67e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b682:	f7ff fb69 	bl	800ad58 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b686:	4606      	mov	r6, r0
 800b688:	b900      	cbnz	r0, 800b68c <HAL_RCCEx_PeriphCLKConfig+0x848>
    switch (PeriphClkInit->RngClockSelection)
 800b68a:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b68c:	686b      	ldr	r3, [r5, #4]
 800b68e:	06da      	lsls	r2, r3, #27
 800b690:	d506      	bpl.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b692:	2101      	movs	r1, #1
 800b694:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b698:	f7ff fb5e 	bl	800ad58 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b69c:	4604      	mov	r4, r0
 800b69e:	b900      	cbnz	r0, 800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    switch (PeriphClkInit->RngClockSelection)
 800b6a0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b6a2:	686b      	ldr	r3, [r5, #4]
 800b6a4:	069b      	lsls	r3, r3, #26
 800b6a6:	f100 80ca 	bmi.w	800b83e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  if (status == HAL_OK)
 800b6aa:	1e20      	subs	r0, r4, #0
 800b6ac:	bf18      	it	ne
 800b6ae:	2001      	movne	r0, #1
}
 800b6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6b4:	2101      	movs	r1, #1
 800b6b6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b6ba:	f7ff fb4d 	bl	800ad58 <RCCEx_PLL3_Config>
 800b6be:	e6ac      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b6c0:	2601      	movs	r6, #1
 800b6c2:	4634      	mov	r4, r6
 800b6c4:	e6b5      	b.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 800b6c6:	4626      	mov	r6, r4
 800b6c8:	e6b3      	b.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800b6ca:	bf00      	nop
 800b6cc:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b6d0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b6d4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b6d8:	d003      	beq.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800b6da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b6de:	f47f aeba 	bne.w	800b456 <HAL_RCCEx_PeriphCLKConfig+0x612>
    if (ret == HAL_OK)
 800b6e2:	b9ac      	cbnz	r4, 800b710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6e4:	4a5b      	ldr	r2, [pc, #364]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b6e6:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800b6ea:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b6ec:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b6f0:	430b      	orrs	r3, r1
 800b6f2:	6553      	str	r3, [r2, #84]	@ 0x54
 800b6f4:	e6b1      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	f105 0008 	add.w	r0, r5, #8
 800b6fc:	f7ff fab6 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b700:	4604      	mov	r4, r0
        break;
 800b702:	e7ee      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b704:	2102      	movs	r1, #2
 800b706:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b70a:	f7ff fb25 	bl	800ad58 <RCCEx_PLL3_Config>
 800b70e:	e7f7      	b.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      status = ret;
 800b710:	4626      	mov	r6, r4
 800b712:	e6a2      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b714:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b718:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800b71c:	d003      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b71e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b722:	f47f aeac 	bne.w	800b47e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if (ret == HAL_OK)
 800b726:	b9ac      	cbnz	r4, 800b754 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b728:	4a4a      	ldr	r2, [pc, #296]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b72a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800b72e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b730:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800b734:	430b      	orrs	r3, r1
 800b736:	6593      	str	r3, [r2, #88]	@ 0x58
 800b738:	e6a3      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b73a:	2100      	movs	r1, #0
 800b73c:	f105 0008 	add.w	r0, r5, #8
 800b740:	f7ff fa94 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b744:	4604      	mov	r4, r0
        break;
 800b746:	e7ee      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b748:	2102      	movs	r1, #2
 800b74a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b74e:	f7ff fb03 	bl	800ad58 <RCCEx_PLL3_Config>
 800b752:	e7f7      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x900>
      status = ret;
 800b754:	4626      	mov	r6, r4
 800b756:	e694      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b758:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b75c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800b760:	d003      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800b762:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b766:	f47f ae9e 	bne.w	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
    if (ret == HAL_OK)
 800b76a:	b9ac      	cbnz	r4, 800b798 <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b76c:	4a39      	ldr	r2, [pc, #228]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b76e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800b772:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b774:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800b778:	430b      	orrs	r3, r1
 800b77a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b77c:	e695      	b.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b77e:	2100      	movs	r1, #0
 800b780:	f105 0008 	add.w	r0, r5, #8
 800b784:	f7ff fa72 	bl	800ac6c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b788:	4604      	mov	r4, r0
        break;
 800b78a:	e7ee      	b.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x926>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b78c:	2102      	movs	r1, #2
 800b78e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b792:	f7ff fae1 	bl	800ad58 <RCCEx_PLL3_Config>
 800b796:	e7f7      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x944>
      status = ret;
 800b798:	4626      	mov	r6, r4
 800b79a:	e686      	b.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b79c:	2102      	movs	r1, #2
 800b79e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b7a2:	f7ff fad9 	bl	800ad58 <RCCEx_PLL3_Config>
 800b7a6:	e6c3      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    switch (PeriphClkInit->AdcClockSelection)
 800b7a8:	2601      	movs	r6, #1
 800b7aa:	4634      	mov	r4, r6
 800b7ac:	e6cc      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x704>
      status = ret;
 800b7ae:	4626      	mov	r6, r4
 800b7b0:	e6ca      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x704>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7b2:	4a28      	ldr	r2, [pc, #160]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b7b4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b7b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b7bc:	b97c      	cbnz	r4, 800b7de <HAL_RCCEx_PeriphCLKConfig+0x99a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b7be:	4a25      	ldr	r2, [pc, #148]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b7c0:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800b7c4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b7c6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b7ca:	430b      	orrs	r3, r1
 800b7cc:	6553      	str	r3, [r2, #84]	@ 0x54
 800b7ce:	e6ce      	b.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x72a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7d0:	2101      	movs	r1, #1
 800b7d2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b7d6:	f7ff fabf 	bl	800ad58 <RCCEx_PLL3_Config>
 800b7da:	4604      	mov	r4, r0
        break;
 800b7dc:	e7ee      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x978>
      status = ret;
 800b7de:	4626      	mov	r6, r4
 800b7e0:	e6c5      	b.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x72a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7e2:	4a1c      	ldr	r2, [pc, #112]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b7e4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b7e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b7ec:	b974      	cbnz	r4, 800b80c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b7ee:	4a19      	ldr	r2, [pc, #100]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b7f0:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800b7f2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b7f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7f8:	430b      	orrs	r3, r1
 800b7fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b7fc:	e6c4      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x744>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7fe:	2102      	movs	r1, #2
 800b800:	f105 0008 	add.w	r0, r5, #8
 800b804:	f7ff fa32 	bl	800ac6c <RCCEx_PLL2_Config>
 800b808:	4604      	mov	r4, r0
        break;
 800b80a:	e7ef      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      status = ret;
 800b80c:	4626      	mov	r6, r4
 800b80e:	e6bb      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->RngClockSelection)
 800b810:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800b814:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b818:	f47f aed1 	bne.w	800b5be <HAL_RCCEx_PeriphCLKConfig+0x77a>
    if (ret == HAL_OK)
 800b81c:	2c00      	cmp	r4, #0
 800b81e:	f47f aecf 	bne.w	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b822:	4c0c      	ldr	r4, [pc, #48]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b826:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b82a:	4302      	orrs	r2, r0
 800b82c:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800b82e:	4634      	mov	r4, r6
 800b830:	e6c6      	b.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b832:	4f08      	ldr	r7, [pc, #32]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b836:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b83a:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800b83c:	e7ee      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b83e:	2102      	movs	r1, #2
 800b840:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b844:	f7ff fa88 	bl	800ad58 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b848:	2800      	cmp	r0, #0
 800b84a:	f43f af2e 	beq.w	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x866>
  return HAL_ERROR;
 800b84e:	2001      	movs	r0, #1
 800b850:	e72e      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800b852:	bf00      	nop
 800b854:	58024400 	.word	0x58024400

0800b858 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b85c:	4604      	mov	r4, r0
 800b85e:	b1f0      	cbz	r0, 800b89e <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b860:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b864:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b868:	b91b      	cbnz	r3, 800b872 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b86a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b86e:	f7f5 fd97 	bl	80013a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b872:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b874:	1d21      	adds	r1, r4, #4
 800b876:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b878:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b87c:	f000 f9fd 	bl	800bc7a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b880:	6862      	ldr	r2, [r4, #4]
 800b882:	4629      	mov	r1, r5
 800b884:	6820      	ldr	r0, [r4, #0]
 800b886:	f000 fa2e 	bl	800bce6 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b88a:	4a06      	ldr	r2, [pc, #24]	@ (800b8a4 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800b88c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800b88e:	6813      	ldr	r3, [r2, #0]
 800b890:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b894:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b896:	2301      	movs	r3, #1
 800b898:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800b89c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b89e:	2001      	movs	r0, #1
 800b8a0:	e7fc      	b.n	800b89c <HAL_SDRAM_Init+0x44>
 800b8a2:	bf00      	nop
 800b8a4:	52004000 	.word	0x52004000

0800b8a8 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800b8a8:	b510      	push	{r4, lr}
 800b8aa:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800b8ac:	f7f5 fe12 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800b8b0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b8b4:	f000 fa4d 	bl	800bd52 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800b8be:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800b8c2:	bd10      	pop	{r4, pc}

0800b8c4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b8c4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b8c6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b8ce:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b8d0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800b8d2:	d010      	beq.n	800b8f6 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b8d4:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800b8d8:	2c01      	cmp	r4, #1
 800b8da:	d110      	bne.n	800b8fe <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b8dc:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b8de:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b8e0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b8e4:	f000 fa44 	bl	800bd70 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b8e8:	6833      	ldr	r3, [r6, #0]
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d104      	bne.n	800b8f8 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b8ee:	2305      	movs	r3, #5
 800b8f0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b8f4:	2000      	movs	r0, #0
}
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b8f8:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800b8fc:	e7fa      	b.n	800b8f4 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800b8fe:	2001      	movs	r0, #1
 800b900:	e7f9      	b.n	800b8f6 <HAL_SDRAM_SendCommand+0x32>

0800b902 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b902:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b904:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800b908:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	b2d8      	uxtb	r0, r3
 800b90e:	d00d      	beq.n	800b92c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b910:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800b914:	2b01      	cmp	r3, #1
 800b916:	b2dd      	uxtb	r5, r3
 800b918:	d109      	bne.n	800b92e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b91a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b91c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b91e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b922:	f000 fa37 	bl	800bd94 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b926:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b928:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800b92c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b92e:	2001      	movs	r0, #1
 800b930:	e7fc      	b.n	800b92c <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800b932 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b932:	4770      	bx	lr

0800b934 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b934:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d12f      	bne.n	800b99c <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b93c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b93e:	4a18      	ldr	r2, [pc, #96]	@ (800b9a0 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b940:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b944:	6803      	ldr	r3, [r0, #0]
 800b946:	4293      	cmp	r3, r2
 800b948:	d01a      	beq.n	800b980 <HAL_TIM_Base_Start+0x4c>
 800b94a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b94e:	d017      	beq.n	800b980 <HAL_TIM_Base_Start+0x4c>
 800b950:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b954:	4293      	cmp	r3, r2
 800b956:	d013      	beq.n	800b980 <HAL_TIM_Base_Start+0x4c>
 800b958:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d00f      	beq.n	800b980 <HAL_TIM_Base_Start+0x4c>
 800b960:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b964:	4293      	cmp	r3, r2
 800b966:	d00b      	beq.n	800b980 <HAL_TIM_Base_Start+0x4c>
 800b968:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d007      	beq.n	800b980 <HAL_TIM_Base_Start+0x4c>
 800b970:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b974:	4293      	cmp	r3, r2
 800b976:	d003      	beq.n	800b980 <HAL_TIM_Base_Start+0x4c>
 800b978:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d107      	bne.n	800b990 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b980:	6899      	ldr	r1, [r3, #8]
 800b982:	4a08      	ldr	r2, [pc, #32]	@ (800b9a4 <HAL_TIM_Base_Start+0x70>)
 800b984:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b986:	2a06      	cmp	r2, #6
 800b988:	d006      	beq.n	800b998 <HAL_TIM_Base_Start+0x64>
 800b98a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b98e:	d003      	beq.n	800b998 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	f042 0201 	orr.w	r2, r2, #1
 800b996:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800b998:	2000      	movs	r0, #0
 800b99a:	4770      	bx	lr
    return HAL_ERROR;
 800b99c:	2001      	movs	r0, #1
}
 800b99e:	4770      	bx	lr
 800b9a0:	40010000 	.word	0x40010000
 800b9a4:	00010007 	.word	0x00010007

0800b9a8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9a8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d133      	bne.n	800ba18 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9b6:	6803      	ldr	r3, [r0, #0]
 800b9b8:	68da      	ldr	r2, [r3, #12]
 800b9ba:	f042 0201 	orr.w	r2, r2, #1
 800b9be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9c0:	4a16      	ldr	r2, [pc, #88]	@ (800ba1c <HAL_TIM_Base_Start_IT+0x74>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d01a      	beq.n	800b9fc <HAL_TIM_Base_Start_IT+0x54>
 800b9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ca:	d017      	beq.n	800b9fc <HAL_TIM_Base_Start_IT+0x54>
 800b9cc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d013      	beq.n	800b9fc <HAL_TIM_Base_Start_IT+0x54>
 800b9d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d00f      	beq.n	800b9fc <HAL_TIM_Base_Start_IT+0x54>
 800b9dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d00b      	beq.n	800b9fc <HAL_TIM_Base_Start_IT+0x54>
 800b9e4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d007      	beq.n	800b9fc <HAL_TIM_Base_Start_IT+0x54>
 800b9ec:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d003      	beq.n	800b9fc <HAL_TIM_Base_Start_IT+0x54>
 800b9f4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d107      	bne.n	800ba0c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9fc:	6899      	ldr	r1, [r3, #8]
 800b9fe:	4a08      	ldr	r2, [pc, #32]	@ (800ba20 <HAL_TIM_Base_Start_IT+0x78>)
 800ba00:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba02:	2a06      	cmp	r2, #6
 800ba04:	d006      	beq.n	800ba14 <HAL_TIM_Base_Start_IT+0x6c>
 800ba06:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ba0a:	d003      	beq.n	800ba14 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	f042 0201 	orr.w	r2, r2, #1
 800ba12:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800ba14:	2000      	movs	r0, #0
 800ba16:	4770      	bx	lr
    return HAL_ERROR;
 800ba18:	2001      	movs	r0, #1
}
 800ba1a:	4770      	bx	lr
 800ba1c:	40010000 	.word	0x40010000
 800ba20:	00010007 	.word	0x00010007

0800ba24 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800ba24:	4770      	bx	lr

0800ba26 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800ba26:	4770      	bx	lr

0800ba28 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800ba28:	4770      	bx	lr

0800ba2a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800ba2c:	6803      	ldr	r3, [r0, #0]
{
 800ba2e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800ba30:	68dd      	ldr	r5, [r3, #12]
{
 800ba32:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800ba34:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba36:	07b2      	lsls	r2, r6, #30
 800ba38:	d50d      	bpl.n	800ba56 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba3a:	07a9      	lsls	r1, r5, #30
 800ba3c:	d50b      	bpl.n	800ba56 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba3e:	f06f 0202 	mvn.w	r2, #2
 800ba42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba44:	2201      	movs	r2, #1
 800ba46:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba48:	699b      	ldr	r3, [r3, #24]
 800ba4a:	079a      	lsls	r2, r3, #30
 800ba4c:	d075      	beq.n	800bb3a <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800ba4e:	f7ff ffea 	bl	800ba26 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba52:	2300      	movs	r3, #0
 800ba54:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba56:	0773      	lsls	r3, r6, #29
 800ba58:	d510      	bpl.n	800ba7c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba5a:	0768      	lsls	r0, r5, #29
 800ba5c:	d50e      	bpl.n	800ba7c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800ba64:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba68:	2202      	movs	r2, #2
 800ba6a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ba72:	d068      	beq.n	800bb46 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800ba74:	f7ff ffd7 	bl	800ba26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ba7c:	0731      	lsls	r1, r6, #28
 800ba7e:	d50f      	bpl.n	800baa0 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ba80:	072a      	lsls	r2, r5, #28
 800ba82:	d50d      	bpl.n	800baa0 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800ba8a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ba8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba8e:	2204      	movs	r2, #4
 800ba90:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba92:	69db      	ldr	r3, [r3, #28]
 800ba94:	079b      	lsls	r3, r3, #30
 800ba96:	d05c      	beq.n	800bb52 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800ba98:	f7ff ffc5 	bl	800ba26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800baa0:	06f1      	lsls	r1, r6, #27
 800baa2:	d510      	bpl.n	800bac6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800baa4:	06ea      	lsls	r2, r5, #27
 800baa6:	d50e      	bpl.n	800bac6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800baae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bab2:	2208      	movs	r2, #8
 800bab4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bab6:	69db      	ldr	r3, [r3, #28]
 800bab8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800babc:	d04f      	beq.n	800bb5e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800babe:	f7ff ffb2 	bl	800ba26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac2:	2300      	movs	r3, #0
 800bac4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bac6:	07f3      	lsls	r3, r6, #31
 800bac8:	d508      	bpl.n	800badc <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800baca:	07e8      	lsls	r0, r5, #31
 800bacc:	d506      	bpl.n	800badc <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800bad4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bad6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bad8:	f7f5 fa2a 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800badc:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800bae0:	d008      	beq.n	800baf4 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bae2:	0629      	lsls	r1, r5, #24
 800bae4:	d506      	bpl.n	800baf4 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800baec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800baee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800baf0:	f000 f8c1 	bl	800bc76 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800baf4:	05f2      	lsls	r2, r6, #23
 800baf6:	d508      	bpl.n	800bb0a <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800baf8:	062b      	lsls	r3, r5, #24
 800bafa:	d506      	bpl.n	800bb0a <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800bb02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb04:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800bb06:	f000 f8b7 	bl	800bc78 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bb0a:	0670      	lsls	r0, r6, #25
 800bb0c:	d508      	bpl.n	800bb20 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bb0e:	0669      	lsls	r1, r5, #25
 800bb10:	d506      	bpl.n	800bb20 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800bb18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bb1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bb1c:	f7ff ff85 	bl	800ba2a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bb20:	06b2      	lsls	r2, r6, #26
 800bb22:	d522      	bpl.n	800bb6a <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bb24:	06ab      	lsls	r3, r5, #26
 800bb26:	d520      	bpl.n	800bb6a <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800bb2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bb30:	611a      	str	r2, [r3, #16]
}
 800bb32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800bb36:	f000 b89d 	b.w	800bc74 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb3a:	f7ff ff73 	bl	800ba24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f7ff ff72 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
 800bb44:	e785      	b.n	800ba52 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb46:	f7ff ff6d 	bl	800ba24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f7ff ff6c 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
 800bb50:	e792      	b.n	800ba78 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb52:	f7ff ff67 	bl	800ba24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb56:	4620      	mov	r0, r4
 800bb58:	f7ff ff66 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
 800bb5c:	e79e      	b.n	800ba9c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb5e:	f7ff ff61 	bl	800ba24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb62:	4620      	mov	r0, r4
 800bb64:	f7ff ff60 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
 800bb68:	e7ab      	b.n	800bac2 <HAL_TIM_IRQHandler+0x96>
}
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}

0800bb6c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb6c:	4a27      	ldr	r2, [pc, #156]	@ (800bc0c <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800bb6e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb70:	4290      	cmp	r0, r2
 800bb72:	d012      	beq.n	800bb9a <TIM_Base_SetConfig+0x2e>
 800bb74:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800bb78:	d00f      	beq.n	800bb9a <TIM_Base_SetConfig+0x2e>
 800bb7a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800bb7e:	4290      	cmp	r0, r2
 800bb80:	d00b      	beq.n	800bb9a <TIM_Base_SetConfig+0x2e>
 800bb82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bb86:	4290      	cmp	r0, r2
 800bb88:	d007      	beq.n	800bb9a <TIM_Base_SetConfig+0x2e>
 800bb8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bb8e:	4290      	cmp	r0, r2
 800bb90:	d003      	beq.n	800bb9a <TIM_Base_SetConfig+0x2e>
 800bb92:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800bb96:	4290      	cmp	r0, r2
 800bb98:	d108      	bne.n	800bbac <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800bb9e:	684a      	ldr	r2, [r1, #4]
 800bba0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bba6:	68ca      	ldr	r2, [r1, #12]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	e00a      	b.n	800bbc2 <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbac:	4a18      	ldr	r2, [pc, #96]	@ (800bc10 <TIM_Base_SetConfig+0xa4>)
 800bbae:	4290      	cmp	r0, r2
 800bbb0:	d0f7      	beq.n	800bba2 <TIM_Base_SetConfig+0x36>
 800bbb2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bbb6:	4290      	cmp	r0, r2
 800bbb8:	d0f3      	beq.n	800bba2 <TIM_Base_SetConfig+0x36>
 800bbba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bbbe:	4290      	cmp	r0, r2
 800bbc0:	d0ef      	beq.n	800bba2 <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bbc2:	694a      	ldr	r2, [r1, #20]
 800bbc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbc8:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bbca:	688a      	ldr	r2, [r1, #8]
 800bbcc:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbce:	680a      	ldr	r2, [r1, #0]
 800bbd0:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbd2:	4a0e      	ldr	r2, [pc, #56]	@ (800bc0c <TIM_Base_SetConfig+0xa0>)
 800bbd4:	4290      	cmp	r0, r2
 800bbd6:	d00f      	beq.n	800bbf8 <TIM_Base_SetConfig+0x8c>
 800bbd8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bbdc:	4290      	cmp	r0, r2
 800bbde:	d00b      	beq.n	800bbf8 <TIM_Base_SetConfig+0x8c>
 800bbe0:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800bbe4:	4290      	cmp	r0, r2
 800bbe6:	d007      	beq.n	800bbf8 <TIM_Base_SetConfig+0x8c>
 800bbe8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bbec:	4290      	cmp	r0, r2
 800bbee:	d003      	beq.n	800bbf8 <TIM_Base_SetConfig+0x8c>
 800bbf0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bbf4:	4290      	cmp	r0, r2
 800bbf6:	d101      	bne.n	800bbfc <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbf8:	690a      	ldr	r2, [r1, #16]
 800bbfa:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bbfc:	6802      	ldr	r2, [r0, #0]
 800bbfe:	f042 0204 	orr.w	r2, r2, #4
 800bc02:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc04:	2201      	movs	r2, #1
 800bc06:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800bc08:	6003      	str	r3, [r0, #0]
}
 800bc0a:	4770      	bx	lr
 800bc0c:	40010000 	.word	0x40010000
 800bc10:	40014000 	.word	0x40014000

0800bc14 <HAL_TIM_Base_Init>:
{
 800bc14:	b510      	push	{r4, lr}
  if (htim == NULL)
 800bc16:	4604      	mov	r4, r0
 800bc18:	b350      	cbz	r0, 800bc70 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bc1a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800bc1e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bc22:	b91b      	cbnz	r3, 800bc2c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800bc24:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800bc28:	f7ff fe83 	bl	800b932 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800bc2c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc2e:	6820      	ldr	r0, [r4, #0]
 800bc30:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bc32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc36:	f7ff ff99 	bl	800bb6c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc3a:	2301      	movs	r3, #1
  return HAL_OK;
 800bc3c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc3e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc42:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800bc46:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800bc4a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800bc4e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800bc52:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc5a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800bc5e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800bc62:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800bc66:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800bc6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800bc6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bc70:	2001      	movs	r0, #1
 800bc72:	e7fc      	b.n	800bc6e <HAL_TIM_Base_Init+0x5a>

0800bc74 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800bc74:	4770      	bx	lr

0800bc76 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800bc76:	4770      	bx	lr

0800bc78 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800bc78:	4770      	bx	lr

0800bc7a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800bc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bc7e:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800bc82:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800bc86:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800bc8a:	ea43 0308 	orr.w	r3, r3, r8
 800bc8e:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800bc92:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bc96:	6809      	ldr	r1, [r1, #0]
 800bc98:	b981      	cbnz	r1, 800bcbc <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bc9a:	ea43 030e 	orr.w	r3, r3, lr
 800bc9e:	6801      	ldr	r1, [r0, #0]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	f36f 010e 	bfc	r1, #0, #15
 800bca6:	ea43 030c 	orr.w	r3, r3, ip
 800bcaa:	433b      	orrs	r3, r7
 800bcac:	4333      	orrs	r3, r6
 800bcae:	432b      	orrs	r3, r5
 800bcb0:	4323      	orrs	r3, r4
 800bcb2:	430b      	orrs	r3, r1
 800bcb4:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bcbc:	6801      	ldr	r1, [r0, #0]
 800bcbe:	ea43 030e 	orr.w	r3, r3, lr
 800bcc2:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800bcc6:	430b      	orrs	r3, r1
 800bcc8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bcca:	ea42 030c 	orr.w	r3, r2, ip
 800bcce:	6841      	ldr	r1, [r0, #4]
 800bcd0:	433b      	orrs	r3, r7
 800bcd2:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800bcd6:	4333      	orrs	r3, r6
 800bcd8:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800bcdc:	432b      	orrs	r3, r5
 800bcde:	4323      	orrs	r3, r4
 800bce0:	4313      	orrs	r3, r2
 800bce2:	6043      	str	r3, [r0, #4]
 800bce4:	e7e7      	b.n	800bcb6 <FMC_SDRAM_Init+0x3c>

0800bce6 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bce6:	68cb      	ldr	r3, [r1, #12]
 800bce8:	f103 3cff 	add.w	ip, r3, #4294967295
 800bcec:	694b      	ldr	r3, [r1, #20]
{
 800bcee:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	684c      	ldr	r4, [r1, #4]
 800bcf4:	688f      	ldr	r7, [r1, #8]
 800bcf6:	690e      	ldr	r6, [r1, #16]
 800bcf8:	051b      	lsls	r3, r3, #20
 800bcfa:	698d      	ldr	r5, [r1, #24]
 800bcfc:	3c01      	subs	r4, #1
 800bcfe:	3f01      	subs	r7, #1
 800bd00:	3e01      	subs	r6, #1
 800bd02:	3d01      	subs	r5, #1
 800bd04:	6809      	ldr	r1, [r1, #0]
 800bd06:	0124      	lsls	r4, r4, #4
 800bd08:	023f      	lsls	r7, r7, #8
 800bd0a:	3901      	subs	r1, #1
 800bd0c:	0436      	lsls	r6, r6, #16
 800bd0e:	062d      	lsls	r5, r5, #24
 800bd10:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800bd14:	b95a      	cbnz	r2, 800bd2e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd16:	430b      	orrs	r3, r1
 800bd18:	6882      	ldr	r2, [r0, #8]
 800bd1a:	4323      	orrs	r3, r4
 800bd1c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800bd20:	433b      	orrs	r3, r7
 800bd22:	4333      	orrs	r3, r6
 800bd24:	432b      	orrs	r3, r5
 800bd26:	4313      	orrs	r3, r2
 800bd28:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd2e:	6882      	ldr	r2, [r0, #8]
 800bd30:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800bd34:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bd3c:	ea44 0307 	orr.w	r3, r4, r7
 800bd40:	68c2      	ldr	r2, [r0, #12]
 800bd42:	430b      	orrs	r3, r1
 800bd44:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800bd48:	4333      	orrs	r3, r6
 800bd4a:	432b      	orrs	r3, r5
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	60c3      	str	r3, [r0, #12]
 800bd50:	e7eb      	b.n	800bd2a <FMC_SDRAM_Timing_Init+0x44>

0800bd52 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800bd52:	4603      	mov	r3, r0
 800bd54:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800bd58:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800bd5c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800bd60:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800bd62:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800bd66:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800bd68:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800bd6a:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800bd6c:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800bd6e:	4770      	bx	lr

0800bd70 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bd70:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800bd72:	e9d1 3400 	ldrd	r3, r4, [r1]
 800bd76:	6902      	ldr	r2, [r0, #16]
 800bd78:	4323      	orrs	r3, r4
 800bd7a:	68cc      	ldr	r4, [r1, #12]
 800bd7c:	f36f 0215 	bfc	r2, #0, #22
 800bd80:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800bd84:	4313      	orrs	r3, r2
 800bd86:	688a      	ldr	r2, [r1, #8]
 800bd88:	3a01      	subs	r2, #1
 800bd8a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800bd8e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800bd90:	2000      	movs	r0, #0
 800bd92:	bd10      	pop	{r4, pc}

0800bd94 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800bd94:	6943      	ldr	r3, [r0, #20]
 800bd96:	f36f 034d 	bfc	r3, #1, #13
 800bd9a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800bd9e:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800bda0:	2000      	movs	r0, #0
 800bda2:	4770      	bx	lr

0800bda4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bda4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800bda6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bdaa:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bdac:	f001 fee2 	bl	800db74 <xTaskGetSchedulerState>
 800bdb0:	2801      	cmp	r0, #1
 800bdb2:	d003      	beq.n	800bdbc <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800bdb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800bdb8:	f000 bc4c 	b.w	800c654 <xPortSysTickHandler>
}
 800bdbc:	bd08      	pop	{r3, pc}
	...

0800bdc0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdc0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdc4:	b92b      	cbnz	r3, 800bdd2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800bdc6:	4b06      	ldr	r3, [pc, #24]	@ (800bde0 <osKernelInitialize+0x20>)
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	b928      	cbnz	r0, 800bdd8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bdcc:	2201      	movs	r2, #1
 800bdce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bdd0:	4770      	bx	lr
    stat = osErrorISR;
 800bdd2:	f06f 0005 	mvn.w	r0, #5
 800bdd6:	4770      	bx	lr
    } else {
      stat = osError;
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	2400c5bc 	.word	0x2400c5bc

0800bde4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bde4:	b510      	push	{r4, lr}
 800bde6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdea:	b95c      	cbnz	r4, 800be04 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800bdec:	4b08      	ldr	r3, [pc, #32]	@ (800be10 <osKernelStart+0x2c>)
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	2a01      	cmp	r2, #1
 800bdf2:	d10a      	bne.n	800be0a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdf4:	4a07      	ldr	r2, [pc, #28]	@ (800be14 <osKernelStart+0x30>)
 800bdf6:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bdfc:	f001 fd5a 	bl	800d8b4 <vTaskStartScheduler>
      stat = osOK;
 800be00:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800be02:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800be04:	f06f 0005 	mvn.w	r0, #5
 800be08:	e7fb      	b.n	800be02 <osKernelStart+0x1e>
      stat = osError;
 800be0a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800be0e:	e7f8      	b.n	800be02 <osKernelStart+0x1e>
 800be10:	2400c5bc 	.word	0x2400c5bc
 800be14:	e000ed00 	.word	0xe000ed00

0800be18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800be18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be1a:	4614      	mov	r4, r2
 800be1c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800be1e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800be20:	460b      	mov	r3, r1
  hTask = NULL;
 800be22:	9205      	str	r2, [sp, #20]
 800be24:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800be28:	b9fa      	cbnz	r2, 800be6a <osThreadNew+0x52>
 800be2a:	b1f0      	cbz	r0, 800be6a <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800be2c:	b354      	cbz	r4, 800be84 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800be2e:	69a5      	ldr	r5, [r4, #24]
 800be30:	b125      	cbz	r5, 800be3c <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be32:	1e69      	subs	r1, r5, #1
 800be34:	2937      	cmp	r1, #55	@ 0x37
 800be36:	d902      	bls.n	800be3e <osThreadNew+0x26>
        return (NULL);
 800be38:	2000      	movs	r0, #0
 800be3a:	e017      	b.n	800be6c <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 800be3c:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be3e:	6862      	ldr	r2, [r4, #4]
 800be40:	07d2      	lsls	r2, r2, #31
 800be42:	d4f9      	bmi.n	800be38 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800be44:	6966      	ldr	r6, [r4, #20]
 800be46:	b19e      	cbz	r6, 800be70 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be48:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800be4a:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be4c:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 800be50:	b187      	cbz	r7, 800be74 <osThreadNew+0x5c>
 800be52:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800be56:	d908      	bls.n	800be6a <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be58:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be5a:	b134      	cbz	r4, 800be6a <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be5c:	b12e      	cbz	r6, 800be6a <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be5e:	9500      	str	r5, [sp, #0]
 800be60:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800be64:	f001 fb8b 	bl	800d57e <xTaskCreateStatic>
 800be68:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800be6a:	9805      	ldr	r0, [sp, #20]
}
 800be6c:	b007      	add	sp, #28
 800be6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800be70:	2280      	movs	r2, #128	@ 0x80
 800be72:	e7ea      	b.n	800be4a <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be74:	f1bc 0f00 	cmp.w	ip, #0
 800be78:	d1f7      	bne.n	800be6a <osThreadNew+0x52>
 800be7a:	6924      	ldr	r4, [r4, #16]
 800be7c:	2c00      	cmp	r4, #0
 800be7e:	d1f4      	bne.n	800be6a <osThreadNew+0x52>
 800be80:	460c      	mov	r4, r1
 800be82:	e001      	b.n	800be88 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800be84:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800be86:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800be88:	a905      	add	r1, sp, #20
 800be8a:	b292      	uxth	r2, r2
 800be8c:	e9cd 5100 	strd	r5, r1, [sp]
 800be90:	4621      	mov	r1, r4
 800be92:	f001 fbac 	bl	800d5ee <xTaskCreate>
 800be96:	2801      	cmp	r0, #1
            hTask = NULL;
 800be98:	bf1c      	itt	ne
 800be9a:	2300      	movne	r3, #0
 800be9c:	9305      	strne	r3, [sp, #20]
 800be9e:	e7e4      	b.n	800be6a <osThreadNew+0x52>

0800bea0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	4605      	mov	r5, r0
 800bea4:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800bea8:	b117      	cbz	r7, 800beb0 <osMutexNew+0x10>
  hMutex = NULL;
 800beaa:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800beac:	4620      	mov	r0, r4
 800beae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (attr != NULL) {
 800beb0:	b320      	cbz	r0, 800befc <osMutexNew+0x5c>
      type = attr->attr_bits;
 800beb2:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800beb4:	0733      	lsls	r3, r6, #28
 800beb6:	d4f8      	bmi.n	800beaa <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800beb8:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bebc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800bec0:	b199      	cbz	r1, 800beea <osMutexNew+0x4a>
 800bec2:	2b4f      	cmp	r3, #79	@ 0x4f
 800bec4:	d9f1      	bls.n	800beaa <osMutexNew+0xa>
          if (rmtx != 0U) {
 800bec6:	b1be      	cbz	r6, 800bef8 <osMutexNew+0x58>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bec8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800beca:	f000 feca 	bl	800cc62 <xQueueCreateMutexStatic>
 800bece:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d0ea      	beq.n	800beaa <osMutexNew+0xa>
          name = attr->name;
 800bed4:	682d      	ldr	r5, [r5, #0]
 800bed6:	4637      	mov	r7, r6
        vQueueAddToRegistry (hMutex, name);
 800bed8:	4629      	mov	r1, r5
 800beda:	4620      	mov	r0, r4
 800bedc:	f001 f98a 	bl	800d1f4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bee0:	2f00      	cmp	r7, #0
 800bee2:	d0e3      	beq.n	800beac <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bee4:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800bee8:	e7e0      	b.n	800beac <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1dd      	bne.n	800beaa <osMutexNew+0xa>
            if (rmtx != 0U) {
 800beee:	b12e      	cbz	r6, 800befc <osMutexNew+0x5c>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bef0:	2004      	movs	r0, #4
 800bef2:	f000 feea 	bl	800ccca <xQueueCreateMutex>
 800bef6:	e7ea      	b.n	800bece <osMutexNew+0x2e>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bef8:	2001      	movs	r0, #1
 800befa:	e7e6      	b.n	800beca <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800befc:	2001      	movs	r0, #1
 800befe:	f000 fee4 	bl	800ccca <xQueueCreateMutex>
      if (hMutex != NULL) {
 800bf02:	4604      	mov	r4, r0
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d0d0      	beq.n	800beaa <osMutexNew+0xa>
        if (attr != NULL) {
 800bf08:	2d00      	cmp	r5, #0
 800bf0a:	d0e5      	beq.n	800bed8 <osMutexNew+0x38>
 800bf0c:	2600      	movs	r6, #0
 800bf0e:	e7e1      	b.n	800bed4 <osMutexNew+0x34>

0800bf10 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4603      	mov	r3, r0
 800bf14:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bf16:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800bf1a:	f003 0201 	and.w	r2, r3, #1
 800bf1e:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800bf22:	b995      	cbnz	r5, 800bf4a <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d913      	bls.n	800bf50 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800bf28:	b162      	cbz	r2, 800bf44 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800bf2a:	f001 f8f4 	bl	800d116 <xQueueTakeMutexRecursive>
 800bf2e:	2801      	cmp	r0, #1
 800bf30:	d101      	bne.n	800bf36 <osMutexAcquire+0x26>
  stat = osOK;
 800bf32:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800bf34:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800bf36:	2c00      	cmp	r4, #0
 800bf38:	bf14      	ite	ne
 800bf3a:	f06f 0001 	mvnne.w	r0, #1
 800bf3e:	f06f 0002 	mvneq.w	r0, #2
 800bf42:	e7f7      	b.n	800bf34 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800bf44:	f001 f82a 	bl	800cf9c <xQueueSemaphoreTake>
 800bf48:	e7f1      	b.n	800bf2e <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800bf4a:	f06f 0005 	mvn.w	r0, #5
 800bf4e:	e7f1      	b.n	800bf34 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800bf50:	f06f 0003 	mvn.w	r0, #3
 800bf54:	e7ee      	b.n	800bf34 <osMutexAcquire+0x24>

0800bf56 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bf56:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bf58:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bf5c:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800bf5e:	f002 0301 	and.w	r3, r2, #1
 800bf62:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800bf66:	b979      	cbnz	r1, 800bf88 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800bf68:	2a01      	cmp	r2, #1
 800bf6a:	d910      	bls.n	800bf8e <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800bf6c:	b13b      	cbz	r3, 800bf7e <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800bf6e:	f000 fe8d 	bl	800cc8c <xQueueGiveMutexRecursive>
 800bf72:	2801      	cmp	r0, #1
  stat = osOK;
 800bf74:	bf0c      	ite	eq
 800bf76:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800bf78:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800bf7c:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bf7e:	461a      	mov	r2, r3
 800bf80:	4619      	mov	r1, r3
 800bf82:	f000 fdbc 	bl	800cafe <xQueueGenericSend>
 800bf86:	e7f4      	b.n	800bf72 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800bf88:	f06f 0005 	mvn.w	r0, #5
 800bf8c:	e7f6      	b.n	800bf7c <osMutexRelease+0x26>
    stat = osErrorParameter;
 800bf8e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800bf92:	e7f3      	b.n	800bf7c <osMutexRelease+0x26>

0800bf94 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bf94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf96:	4604      	mov	r4, r0
 800bf98:	460e      	mov	r6, r1
 800bf9a:	4615      	mov	r5, r2
 800bf9c:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bfa0:	b942      	cbnz	r2, 800bfb4 <osSemaphoreNew+0x20>
 800bfa2:	b138      	cbz	r0, 800bfb4 <osSemaphoreNew+0x20>
 800bfa4:	4288      	cmp	r0, r1
 800bfa6:	d305      	bcc.n	800bfb4 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800bfa8:	b155      	cbz	r5, 800bfc0 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bfaa:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800bfae:	b12b      	cbz	r3, 800bfbc <osSemaphoreNew+0x28>
 800bfb0:	2f4f      	cmp	r7, #79	@ 0x4f
 800bfb2:	d822      	bhi.n	800bffa <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800bfb4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	b003      	add	sp, #12
 800bfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bfbc:	2f00      	cmp	r7, #0
 800bfbe:	d1f9      	bne.n	800bfb4 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800bfc0:	2c01      	cmp	r4, #1
 800bfc2:	d00c      	beq.n	800bfde <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	f000 fd7b 	bl	800cac2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800bfcc:	4604      	mov	r4, r0
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d0f0      	beq.n	800bfb4 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800bfd2:	b985      	cbnz	r5, 800bff6 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f001 f90c 	bl	800d1f4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800bfdc:	e7eb      	b.n	800bfb6 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800bfde:	2203      	movs	r2, #3
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	2001      	movs	r0, #1
 800bfe4:	f000 fd24 	bl	800ca30 <xQueueGenericCreate>
 800bfe8:	e00e      	b.n	800c008 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bfea:	461a      	mov	r2, r3
 800bfec:	f000 fd47 	bl	800ca7e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800bff0:	4604      	mov	r4, r0
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d0de      	beq.n	800bfb4 <osSemaphoreNew+0x20>
          name = attr->name;
 800bff6:	682d      	ldr	r5, [r5, #0]
 800bff8:	e7ec      	b.n	800bfd4 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800bffa:	2801      	cmp	r0, #1
 800bffc:	d1f5      	bne.n	800bfea <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bffe:	2103      	movs	r1, #3
 800c000:	9100      	str	r1, [sp, #0]
 800c002:	4611      	mov	r1, r2
 800c004:	f000 fcc6 	bl	800c994 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800c008:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d0d2      	beq.n	800bfb4 <osSemaphoreNew+0x20>
 800c00e:	2e00      	cmp	r6, #0
 800c010:	d0df      	beq.n	800bfd2 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c012:	2300      	movs	r3, #0
 800c014:	461a      	mov	r2, r3
 800c016:	4619      	mov	r1, r3
 800c018:	f000 fd71 	bl	800cafe <xQueueGenericSend>
 800c01c:	2801      	cmp	r0, #1
 800c01e:	d0d8      	beq.n	800bfd2 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800c020:	4620      	mov	r0, r4
 800c022:	f001 f911 	bl	800d248 <vQueueDelete>
      if (hSemaphore != NULL) {
 800c026:	e7c5      	b.n	800bfb4 <osSemaphoreNew+0x20>

0800c028 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c028:	b513      	push	{r0, r1, r4, lr}
 800c02a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c02c:	b328      	cbz	r0, 800c07a <osSemaphoreAcquire+0x52>
 800c02e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c032:	b1cb      	cbz	r3, 800c068 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800c034:	bb09      	cbnz	r1, 800c07a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c036:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c038:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c03a:	f001 f88d 	bl	800d158 <xQueueReceiveFromISR>
 800c03e:	2801      	cmp	r0, #1
 800c040:	d003      	beq.n	800c04a <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800c042:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c046:	b002      	add	sp, #8
 800c048:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800c04a:	9b01      	ldr	r3, [sp, #4]
 800c04c:	b90b      	cbnz	r3, 800c052 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800c04e:	2000      	movs	r0, #0
 800c050:	e7f9      	b.n	800c046 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800c052:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c05a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	e7f2      	b.n	800c04e <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c068:	f000 ff98 	bl	800cf9c <xQueueSemaphoreTake>
 800c06c:	2801      	cmp	r0, #1
 800c06e:	d0ee      	beq.n	800c04e <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800c070:	2c00      	cmp	r4, #0
 800c072:	d0e6      	beq.n	800c042 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800c074:	f06f 0001 	mvn.w	r0, #1
 800c078:	e7e5      	b.n	800c046 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800c07a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c07e:	e7e2      	b.n	800c046 <osSemaphoreAcquire+0x1e>

0800c080 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c080:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c082:	b318      	cbz	r0, 800c0cc <osSemaphoreRelease+0x4c>
 800c084:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c088:	b1cb      	cbz	r3, 800c0be <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800c08a:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c08c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800c08e:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c090:	f000 fe95 	bl	800cdbe <xQueueGiveFromISR>
 800c094:	2801      	cmp	r0, #1
 800c096:	d004      	beq.n	800c0a2 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800c098:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800c09c:	b003      	add	sp, #12
 800c09e:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800c0a2:	9b01      	ldr	r3, [sp, #4]
 800c0a4:	b14b      	cbz	r3, 800c0ba <osSemaphoreRelease+0x3a>
 800c0a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c0aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	e7ee      	b.n	800c09c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c0be:	461a      	mov	r2, r3
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	f000 fd1c 	bl	800cafe <xQueueGenericSend>
 800c0c6:	2801      	cmp	r0, #1
 800c0c8:	d0f7      	beq.n	800c0ba <osSemaphoreRelease+0x3a>
 800c0ca:	e7e5      	b.n	800c098 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800c0cc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c0d0:	e7e4      	b.n	800c09c <osSemaphoreRelease+0x1c>

0800c0d2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c0d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	460e      	mov	r6, r1
 800c0d8:	4614      	mov	r4, r2
 800c0da:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c0de:	b11f      	cbz	r7, 800c0e8 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800c0e0:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	b003      	add	sp, #12
 800c0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d0f9      	beq.n	800c0e0 <osMessageQueueNew+0xe>
 800c0ec:	2900      	cmp	r1, #0
 800c0ee:	d0f7      	beq.n	800c0e0 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800c0f0:	b1da      	cbz	r2, 800c12a <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0f2:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800c0f6:	b183      	cbz	r3, 800c11a <osMessageQueueNew+0x48>
 800c0f8:	2a4f      	cmp	r2, #79	@ 0x4f
 800c0fa:	d9f1      	bls.n	800c0e0 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0fc:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	d0ee      	beq.n	800c0e0 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c102:	434d      	muls	r5, r1
 800c104:	6966      	ldr	r6, [r4, #20]
 800c106:	42ae      	cmp	r6, r5
 800c108:	d3ea      	bcc.n	800c0e0 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c10a:	9700      	str	r7, [sp, #0]
 800c10c:	f000 fc42 	bl	800c994 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800c110:	4605      	mov	r5, r0
 800c112:	2800      	cmp	r0, #0
 800c114:	d0e4      	beq.n	800c0e0 <osMessageQueueNew+0xe>
        name = attr->name;
 800c116:	6824      	ldr	r4, [r4, #0]
 800c118:	e011      	b.n	800c13e <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c11a:	2a00      	cmp	r2, #0
 800c11c:	d1e0      	bne.n	800c0e0 <osMessageQueueNew+0xe>
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1dd      	bne.n	800c0e0 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c124:	6963      	ldr	r3, [r4, #20]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1da      	bne.n	800c0e0 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800c12a:	4628      	mov	r0, r5
 800c12c:	2200      	movs	r2, #0
 800c12e:	4631      	mov	r1, r6
 800c130:	f000 fc7e 	bl	800ca30 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800c134:	4605      	mov	r5, r0
 800c136:	2800      	cmp	r0, #0
 800c138:	d0d2      	beq.n	800c0e0 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800c13a:	2c00      	cmp	r4, #0
 800c13c:	d1eb      	bne.n	800c116 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800c13e:	4621      	mov	r1, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f001 f857 	bl	800d1f4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800c146:	e7cc      	b.n	800c0e2 <osMessageQueueNew+0x10>

0800c148 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c148:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c14a:	461c      	mov	r4, r3
 800c14c:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800c150:	b1de      	cbz	r6, 800c18a <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c152:	b338      	cbz	r0, 800c1a4 <osMessageQueuePut+0x5c>
 800c154:	b331      	cbz	r1, 800c1a4 <osMessageQueuePut+0x5c>
 800c156:	bb2b      	cbnz	r3, 800c1a4 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c158:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c15a:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c15c:	f000 fdd2 	bl	800cd04 <xQueueGenericSendFromISR>
 800c160:	2801      	cmp	r0, #1
 800c162:	d003      	beq.n	800c16c <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800c164:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c168:	b002      	add	sp, #8
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800c16c:	9b01      	ldr	r3, [sp, #4]
 800c16e:	b90b      	cbnz	r3, 800c174 <osMessageQueuePut+0x2c>
  stat = osOK;
 800c170:	2000      	movs	r0, #0
 800c172:	e7f9      	b.n	800c168 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800c174:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c17c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	e7f2      	b.n	800c170 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c18a:	b158      	cbz	r0, 800c1a4 <osMessageQueuePut+0x5c>
 800c18c:	b151      	cbz	r1, 800c1a4 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c18e:	4633      	mov	r3, r6
 800c190:	4622      	mov	r2, r4
 800c192:	f000 fcb4 	bl	800cafe <xQueueGenericSend>
 800c196:	2801      	cmp	r0, #1
 800c198:	d0ea      	beq.n	800c170 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800c19a:	2c00      	cmp	r4, #0
 800c19c:	d0e2      	beq.n	800c164 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800c19e:	f06f 0001 	mvn.w	r0, #1
 800c1a2:	e7e1      	b.n	800c168 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800c1a4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c1a8:	e7de      	b.n	800c168 <osMessageQueuePut+0x20>

0800c1aa <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c1aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1ac:	461c      	mov	r4, r3
 800c1ae:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800c1b2:	b1db      	cbz	r3, 800c1ec <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c1b4:	b330      	cbz	r0, 800c204 <osMessageQueueGet+0x5a>
 800c1b6:	b329      	cbz	r1, 800c204 <osMessageQueueGet+0x5a>
 800c1b8:	bb24      	cbnz	r4, 800c204 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c1ba:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c1bc:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c1be:	f000 ffcb 	bl	800d158 <xQueueReceiveFromISR>
 800c1c2:	2801      	cmp	r0, #1
 800c1c4:	d003      	beq.n	800c1ce <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800c1c6:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c1ca:	b003      	add	sp, #12
 800c1cc:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800c1ce:	9b01      	ldr	r3, [sp, #4]
 800c1d0:	b90b      	cbnz	r3, 800c1d6 <osMessageQueueGet+0x2c>
  stat = osOK;
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	e7f9      	b.n	800c1ca <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800c1d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c1da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1de:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	e7f2      	b.n	800c1d2 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c1ec:	b150      	cbz	r0, 800c204 <osMessageQueueGet+0x5a>
 800c1ee:	b149      	cbz	r1, 800c204 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	f000 fe35 	bl	800ce60 <xQueueReceive>
 800c1f6:	2801      	cmp	r0, #1
 800c1f8:	d0eb      	beq.n	800c1d2 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800c1fa:	2c00      	cmp	r4, #0
 800c1fc:	d0e3      	beq.n	800c1c6 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800c1fe:	f06f 0001 	mvn.w	r0, #1
 800c202:	e7e2      	b.n	800c1ca <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800c204:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c208:	e7df      	b.n	800c1ca <osMessageQueueGet+0x20>
	...

0800c20c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c20c:	4b03      	ldr	r3, [pc, #12]	@ (800c21c <vApplicationGetIdleTaskMemory+0x10>)
 800c20e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c210:	4b03      	ldr	r3, [pc, #12]	@ (800c220 <vApplicationGetIdleTaskMemory+0x14>)
 800c212:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c214:	2380      	movs	r3, #128	@ 0x80
 800c216:	6013      	str	r3, [r2, #0]
}
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	2400c55c 	.word	0x2400c55c
 800c220:	2400c35c 	.word	0x2400c35c

0800c224 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c224:	4b03      	ldr	r3, [pc, #12]	@ (800c234 <vApplicationGetTimerTaskMemory+0x10>)
 800c226:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c228:	4b03      	ldr	r3, [pc, #12]	@ (800c238 <vApplicationGetTimerTaskMemory+0x14>)
 800c22a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c22c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c230:	6013      	str	r3, [r2, #0]
}
 800c232:	4770      	bx	lr
 800c234:	2400c2fc 	.word	0x2400c2fc
 800c238:	2400befc 	.word	0x2400befc

0800c23c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c23c:	4b10      	ldr	r3, [pc, #64]	@ (800c280 <prvInsertBlockIntoFreeList+0x44>)
{
 800c23e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c240:	461a      	mov	r2, r3
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4283      	cmp	r3, r0
 800c246:	d3fb      	bcc.n	800c240 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c248:	6854      	ldr	r4, [r2, #4]
 800c24a:	1911      	adds	r1, r2, r4
 800c24c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c24e:	bf01      	itttt	eq
 800c250:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800c252:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c254:	1909      	addeq	r1, r1, r4
 800c256:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c258:	6844      	ldr	r4, [r0, #4]
 800c25a:	1901      	adds	r1, r0, r4
 800c25c:	428b      	cmp	r3, r1
 800c25e:	d10c      	bne.n	800c27a <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c260:	4908      	ldr	r1, [pc, #32]	@ (800c284 <prvInsertBlockIntoFreeList+0x48>)
 800c262:	6809      	ldr	r1, [r1, #0]
 800c264:	428b      	cmp	r3, r1
 800c266:	d003      	beq.n	800c270 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c268:	6859      	ldr	r1, [r3, #4]
 800c26a:	4421      	add	r1, r4
 800c26c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c26e:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c270:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c272:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c274:	bf18      	it	ne
 800c276:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c278:	bd10      	pop	{r4, pc}
 800c27a:	4619      	mov	r1, r3
 800c27c:	e7f8      	b.n	800c270 <prvInsertBlockIntoFreeList+0x34>
 800c27e:	bf00      	nop
 800c280:	2400c5d8 	.word	0x2400c5d8
 800c284:	2400c5d4 	.word	0x2400c5d4

0800c288 <pvPortMalloc>:
{
 800c288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800c28e:	f001 f9dd 	bl	800d64c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c292:	4940      	ldr	r1, [pc, #256]	@ (800c394 <pvPortMalloc+0x10c>)
 800c294:	4d40      	ldr	r5, [pc, #256]	@ (800c398 <pvPortMalloc+0x110>)
 800c296:	680b      	ldr	r3, [r1, #0]
 800c298:	b9f3      	cbnz	r3, 800c2d8 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800c29a:	4a40      	ldr	r2, [pc, #256]	@ (800c39c <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800c29c:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c29e:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2a0:	4e3f      	ldr	r6, [pc, #252]	@ (800c3a0 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2a2:	bf1b      	ittet	ne
 800c2a4:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2a6:	4b3f      	ldrne	r3, [pc, #252]	@ (800c3a4 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2a8:	4b3f      	ldreq	r3, [pc, #252]	@ (800c3a8 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2aa:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800c2ae:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2b0:	bf18      	it	ne
 800c2b2:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2b4:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2b6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800c2b8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2ba:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800c2be:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2c2:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800c2c4:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2c6:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2ca:	4b38      	ldr	r3, [pc, #224]	@ (800c3ac <pvPortMalloc+0x124>)
 800c2cc:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2ce:	4b38      	ldr	r3, [pc, #224]	@ (800c3b0 <pvPortMalloc+0x128>)
 800c2d0:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c2d6:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2d8:	682e      	ldr	r6, [r5, #0]
 800c2da:	4226      	tst	r6, r4
 800c2dc:	d155      	bne.n	800c38a <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800c2de:	2c00      	cmp	r4, #0
 800c2e0:	d046      	beq.n	800c370 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800c2e2:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2e6:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2e8:	bf1c      	itt	ne
 800c2ea:	f023 0307 	bicne.w	r3, r3, #7
 800c2ee:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d04a      	beq.n	800c38a <pvPortMalloc+0x102>
 800c2f4:	4f2e      	ldr	r7, [pc, #184]	@ (800c3b0 <pvPortMalloc+0x128>)
 800c2f6:	683c      	ldr	r4, [r7, #0]
 800c2f8:	429c      	cmp	r4, r3
 800c2fa:	d346      	bcc.n	800c38a <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800c2fc:	4a28      	ldr	r2, [pc, #160]	@ (800c3a0 <pvPortMalloc+0x118>)
 800c2fe:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c300:	6868      	ldr	r0, [r5, #4]
 800c302:	4298      	cmp	r0, r3
 800c304:	d204      	bcs.n	800c310 <pvPortMalloc+0x88>
 800c306:	f8d5 c000 	ldr.w	ip, [r5]
 800c30a:	f1bc 0f00 	cmp.w	ip, #0
 800c30e:	d115      	bne.n	800c33c <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800c310:	6809      	ldr	r1, [r1, #0]
 800c312:	42a9      	cmp	r1, r5
 800c314:	d039      	beq.n	800c38a <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c316:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c318:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c31c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c31e:	1ac2      	subs	r2, r0, r3
 800c320:	2a10      	cmp	r2, #16
 800c322:	d912      	bls.n	800c34a <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c324:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c326:	0741      	lsls	r1, r0, #29
 800c328:	d00b      	beq.n	800c342 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	e7fe      	b.n	800c33a <pvPortMalloc+0xb2>
					pxPreviousBlock = pxBlock;
 800c33c:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800c33e:	4665      	mov	r5, ip
 800c340:	e7de      	b.n	800c300 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c342:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c344:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c346:	f7ff ff79 	bl	800c23c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c34a:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c34c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c34e:	4917      	ldr	r1, [pc, #92]	@ (800c3ac <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c350:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c352:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c354:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800c356:	4a17      	ldr	r2, [pc, #92]	@ (800c3b4 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c358:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800c35a:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800c35c:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c35e:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800c360:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c364:	bf38      	it	cc
 800c366:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c368:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c36c:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800c36e:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800c370:	f001 fa10 	bl	800d794 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c374:	0763      	lsls	r3, r4, #29
 800c376:	d00a      	beq.n	800c38e <pvPortMalloc+0x106>
 800c378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	e7fe      	b.n	800c388 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800c38a:	2400      	movs	r4, #0
 800c38c:	e7f0      	b.n	800c370 <pvPortMalloc+0xe8>
}
 800c38e:	4620      	mov	r0, r4
 800c390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c394:	2400c5d4 	.word	0x2400c5d4
 800c398:	2400c5c0 	.word	0x2400c5c0
 800c39c:	2400c5e0 	.word	0x2400c5e0
 800c3a0:	2400c5d8 	.word	0x2400c5d8
 800c3a4:	24024c80 	.word	0x24024c80
 800c3a8:	000186a0 	.word	0x000186a0
 800c3ac:	2400c5cc 	.word	0x2400c5cc
 800c3b0:	2400c5d0 	.word	0x2400c5d0
 800c3b4:	2400c5c8 	.word	0x2400c5c8

0800c3b8 <vPortFree>:
{
 800c3b8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	b390      	cbz	r0, 800c424 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3be:	4a1a      	ldr	r2, [pc, #104]	@ (800c428 <vPortFree+0x70>)
 800c3c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c3c4:	6812      	ldr	r2, [r2, #0]
 800c3c6:	4213      	tst	r3, r2
 800c3c8:	d108      	bne.n	800c3dc <vPortFree+0x24>
 800c3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	e7fe      	b.n	800c3da <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3dc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800c3e0:	b141      	cbz	r1, 800c3f4 <vPortFree+0x3c>
 800c3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	e7fe      	b.n	800c3f2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3f4:	ea23 0302 	bic.w	r3, r3, r2
 800c3f8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800c3fc:	f001 f926 	bl	800d64c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c400:	4a0a      	ldr	r2, [pc, #40]	@ (800c42c <vPortFree+0x74>)
 800c402:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c406:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c40a:	6811      	ldr	r1, [r2, #0]
 800c40c:	440b      	add	r3, r1
 800c40e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c410:	f7ff ff14 	bl	800c23c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c414:	4a06      	ldr	r2, [pc, #24]	@ (800c430 <vPortFree+0x78>)
 800c416:	6813      	ldr	r3, [r2, #0]
 800c418:	3301      	adds	r3, #1
}
 800c41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800c41e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800c420:	f001 b9b8 	b.w	800d794 <xTaskResumeAll>
}
 800c424:	bd10      	pop	{r4, pc}
 800c426:	bf00      	nop
 800c428:	2400c5c0 	.word	0x2400c5c0
 800c42c:	2400c5d0 	.word	0x2400c5d0
 800c430:	2400c5c4 	.word	0x2400c5c4

0800c434 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c434:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c438:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c43c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c43e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c440:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c444:	2300      	movs	r3, #0
 800c446:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c448:	4770      	bx	lr

0800c44a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c44e:	4770      	bx	lr

0800c450 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c450:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c452:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800c454:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c456:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c458:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c45a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800c45c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800c45e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c460:	3301      	adds	r3, #1
 800c462:	6003      	str	r3, [r0, #0]
}
 800c464:	4770      	bx	lr

0800c466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c466:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c468:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c46a:	1c63      	adds	r3, r4, #1
 800c46c:	d10a      	bne.n	800c484 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c46e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c470:	685a      	ldr	r2, [r3, #4]
 800c472:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c474:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c476:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c478:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800c47a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800c47c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c47e:	3301      	adds	r3, #1
 800c480:	6003      	str	r3, [r0, #0]
}
 800c482:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c484:	f100 0208 	add.w	r2, r0, #8
 800c488:	4613      	mov	r3, r2
 800c48a:	6852      	ldr	r2, [r2, #4]
 800c48c:	6815      	ldr	r5, [r2, #0]
 800c48e:	42a5      	cmp	r5, r4
 800c490:	d9fa      	bls.n	800c488 <vListInsert+0x22>
 800c492:	e7ed      	b.n	800c470 <vListInsert+0xa>

0800c494 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c494:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c496:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800c49a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c49c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c49e:	6859      	ldr	r1, [r3, #4]
 800c4a0:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4a2:	bf08      	it	eq
 800c4a4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	3a01      	subs	r2, #1
 800c4ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4b0:	6818      	ldr	r0, [r3, #0]
}
 800c4b2:	4770      	bx	lr

0800c4b4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4b4:	4808      	ldr	r0, [pc, #32]	@ (800c4d8 <prvPortStartFirstTask+0x24>)
 800c4b6:	6800      	ldr	r0, [r0, #0]
 800c4b8:	6800      	ldr	r0, [r0, #0]
 800c4ba:	f380 8808 	msr	MSP, r0
 800c4be:	f04f 0000 	mov.w	r0, #0
 800c4c2:	f380 8814 	msr	CONTROL, r0
 800c4c6:	b662      	cpsie	i
 800c4c8:	b661      	cpsie	f
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	df00      	svc	0
 800c4d4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4d6:	0000      	.short	0x0000
 800c4d8:	e000ed08 	.word	0xe000ed08

0800c4dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4dc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c4ec <vPortEnableVFP+0x10>
 800c4e0:	6801      	ldr	r1, [r0, #0]
 800c4e2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4e6:	6001      	str	r1, [r0, #0]
 800c4e8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4ea:	0000      	.short	0x0000
 800c4ec:	e000ed88 	.word	0xe000ed88

0800c4f0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800c4f0:	2300      	movs	r3, #0
{
 800c4f2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800c4f4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800c4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c52c <prvTaskExitError+0x3c>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	d008      	beq.n	800c510 <prvTaskExitError+0x20>
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	e7fe      	b.n	800c50e <prvTaskExitError+0x1e>
 800c510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800c520:	9b01      	ldr	r3, [sp, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d0fc      	beq.n	800c520 <prvTaskExitError+0x30>
}
 800c526:	b002      	add	sp, #8
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	24000078 	.word	0x24000078

0800c530 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c530:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c534:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c538:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800c53c:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c53e:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c540:	4b03      	ldr	r3, [pc, #12]	@ (800c550 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c542:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c544:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c546:	f06f 0302 	mvn.w	r3, #2
 800c54a:	6203      	str	r3, [r0, #32]
}
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	0800c4f1 	.word	0x0800c4f1
	...

0800c560 <SVC_Handler>:
	__asm volatile (
 800c560:	4b07      	ldr	r3, [pc, #28]	@ (800c580 <pxCurrentTCBConst2>)
 800c562:	6819      	ldr	r1, [r3, #0]
 800c564:	6808      	ldr	r0, [r1, #0]
 800c566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56a:	f380 8809 	msr	PSP, r0
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f04f 0000 	mov.w	r0, #0
 800c576:	f380 8811 	msr	BASEPRI, r0
 800c57a:	4770      	bx	lr
 800c57c:	f3af 8000 	nop.w

0800c580 <pxCurrentTCBConst2>:
 800c580:	240251c0 	.word	0x240251c0

0800c584 <vPortEnterCritical>:
 800c584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800c594:	4a0a      	ldr	r2, [pc, #40]	@ (800c5c0 <vPortEnterCritical+0x3c>)
 800c596:	6813      	ldr	r3, [r2, #0]
 800c598:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800c59a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800c59c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800c59e:	d10e      	bne.n	800c5be <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c5a4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	b143      	cbz	r3, 800c5be <vPortEnterCritical+0x3a>
 800c5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	e7fe      	b.n	800c5bc <vPortEnterCritical+0x38>
}
 800c5be:	4770      	bx	lr
 800c5c0:	24000078 	.word	0x24000078

0800c5c4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800c5c4:	4a08      	ldr	r2, [pc, #32]	@ (800c5e8 <vPortExitCritical+0x24>)
 800c5c6:	6813      	ldr	r3, [r2, #0]
 800c5c8:	b943      	cbnz	r3, 800c5dc <vPortExitCritical+0x18>
 800c5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	e7fe      	b.n	800c5da <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5e0:	b90b      	cbnz	r3, 800c5e6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5e2:	f383 8811 	msr	BASEPRI, r3
}
 800c5e6:	4770      	bx	lr
 800c5e8:	24000078 	.word	0x24000078
 800c5ec:	00000000 	.word	0x00000000

0800c5f0 <PendSV_Handler>:
	__asm volatile
 800c5f0:	f3ef 8009 	mrs	r0, PSP
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	4b15      	ldr	r3, [pc, #84]	@ (800c650 <pxCurrentTCBConst>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	f01e 0f10 	tst.w	lr, #16
 800c600:	bf08      	it	eq
 800c602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60a:	6010      	str	r0, [r2, #0]
 800c60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c614:	f380 8811 	msr	BASEPRI, r0
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f001 f996 	bl	800d950 <vTaskSwitchContext>
 800c624:	f04f 0000 	mov.w	r0, #0
 800c628:	f380 8811 	msr	BASEPRI, r0
 800c62c:	bc09      	pop	{r0, r3}
 800c62e:	6819      	ldr	r1, [r3, #0]
 800c630:	6808      	ldr	r0, [r1, #0]
 800c632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c636:	f01e 0f10 	tst.w	lr, #16
 800c63a:	bf08      	it	eq
 800c63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c640:	f380 8809 	msr	PSP, r0
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	f3af 8000 	nop.w

0800c650 <pxCurrentTCBConst>:
 800c650:	240251c0 	.word	0x240251c0

0800c654 <xPortSysTickHandler>:
{
 800c654:	b508      	push	{r3, lr}
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800c666:	f000 ffff 	bl	800d668 <xTaskIncrementTick>
 800c66a:	b128      	cbz	r0, 800c678 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c66c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c674:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800c678:	2300      	movs	r3, #0
 800c67a:	f383 8811 	msr	BASEPRI, r3
}
 800c67e:	bd08      	pop	{r3, pc}

0800c680 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c680:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800c684:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c686:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c68a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c68c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c68e:	4b04      	ldr	r3, [pc, #16]	@ (800c6a0 <vPortSetupTimerInterrupt+0x20>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	fbb3 f3f1 	udiv	r3, r3, r1
 800c696:	3b01      	subs	r3, #1
 800c698:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c69a:	2307      	movs	r3, #7
 800c69c:	6113      	str	r3, [r2, #16]
}
 800c69e:	4770      	bx	lr
 800c6a0:	2400006c 	.word	0x2400006c

0800c6a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800c6a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800c6ae:	4a38      	ldr	r2, [pc, #224]	@ (800c790 <xPortStartScheduler+0xec>)
 800c6b0:	4291      	cmp	r1, r2
 800c6b2:	d108      	bne.n	800c6c6 <xPortStartScheduler+0x22>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	e7fe      	b.n	800c6c4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800c6ca:	4b32      	ldr	r3, [pc, #200]	@ (800c794 <xPortStartScheduler+0xf0>)
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d108      	bne.n	800c6e2 <xPortStartScheduler+0x3e>
 800c6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	e7fe      	b.n	800c6e0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6e2:	4b2d      	ldr	r3, [pc, #180]	@ (800c798 <xPortStartScheduler+0xf4>)
 800c6e4:	781a      	ldrb	r2, [r3, #0]
 800c6e6:	b2d2      	uxtb	r2, r2
 800c6e8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6ea:	22ff      	movs	r2, #255	@ 0xff
 800c6ec:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6ee:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6f0:	4a2a      	ldr	r2, [pc, #168]	@ (800c79c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c6fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c700:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c702:	2307      	movs	r3, #7
 800c704:	4a26      	ldr	r2, [pc, #152]	@ (800c7a0 <xPortStartScheduler+0xfc>)
 800c706:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c708:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800c70c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c70e:	0609      	lsls	r1, r1, #24
 800c710:	d40a      	bmi.n	800c728 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c712:	2b03      	cmp	r3, #3
 800c714:	d011      	beq.n	800c73a <xPortStartScheduler+0x96>
 800c716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	e7fe      	b.n	800c726 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800c728:	3b01      	subs	r3, #1
 800c72a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c72c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c730:	005b      	lsls	r3, r3, #1
 800c732:	b2db      	uxtb	r3, r3
 800c734:	f88d 3003 	strb.w	r3, [sp, #3]
 800c738:	e7e6      	b.n	800c708 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c73a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c73e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800c742:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c744:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c746:	9b01      	ldr	r3, [sp, #4]
 800c748:	4a13      	ldr	r2, [pc, #76]	@ (800c798 <xPortStartScheduler+0xf4>)
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c74e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800c752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c756:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c75a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800c75e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c762:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800c766:	f7ff ff8b 	bl	800c680 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c76a:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a4 <xPortStartScheduler+0x100>)
 800c76c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800c76e:	f7ff feb5 	bl	800c4dc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c772:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800c776:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c77a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800c77e:	f7ff fe99 	bl	800c4b4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c782:	f001 f8e5 	bl	800d950 <vTaskSwitchContext>
}
 800c786:	4628      	mov	r0, r5
	prvTaskExitError();
 800c788:	f7ff feb2 	bl	800c4f0 <prvTaskExitError>
}
 800c78c:	b003      	add	sp, #12
 800c78e:	bd30      	pop	{r4, r5, pc}
 800c790:	410fc271 	.word	0x410fc271
 800c794:	410fc270 	.word	0x410fc270
 800c798:	e000e400 	.word	0xe000e400
 800c79c:	24024c84 	.word	0x24024c84
 800c7a0:	24024c80 	.word	0x24024c80
 800c7a4:	24000078 	.word	0x24000078

0800c7a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7ac:	2b0f      	cmp	r3, #15
 800c7ae:	d90e      	bls.n	800c7ce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7b0:	4a11      	ldr	r2, [pc, #68]	@ (800c7f8 <vPortValidateInterruptPriority+0x50>)
 800c7b2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7b4:	4a11      	ldr	r2, [pc, #68]	@ (800c7fc <vPortValidateInterruptPriority+0x54>)
 800c7b6:	7812      	ldrb	r2, [r2, #0]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d908      	bls.n	800c7ce <vPortValidateInterruptPriority+0x26>
 800c7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	e7fe      	b.n	800c7cc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c7d2:	4a0b      	ldr	r2, [pc, #44]	@ (800c800 <vPortValidateInterruptPriority+0x58>)
 800c7d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800c7d8:	6812      	ldr	r2, [r2, #0]
 800c7da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d908      	bls.n	800c7f4 <vPortValidateInterruptPriority+0x4c>
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	e7fe      	b.n	800c7f2 <vPortValidateInterruptPriority+0x4a>
	}
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	e000e3f0 	.word	0xe000e3f0
 800c7fc:	24024c84 	.word	0x24024c84
 800c800:	24024c80 	.word	0x24024c80

0800c804 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c804:	b510      	push	{r4, lr}
 800c806:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c808:	f7ff febc 	bl	800c584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c80c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c80e:	f7ff fed9 	bl	800c5c4 <vPortExitCritical>

	return xReturn;
}
 800c812:	fab4 f084 	clz	r0, r4
 800c816:	0940      	lsrs	r0, r0, #5
 800c818:	bd10      	pop	{r4, pc}

0800c81a <prvCopyDataToQueue>:
{
 800c81a:	b570      	push	{r4, r5, r6, lr}
 800c81c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c81e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800c820:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c822:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c824:	b942      	cbnz	r2, 800c838 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c826:	6806      	ldr	r6, [r0, #0]
 800c828:	b99e      	cbnz	r6, 800c852 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c82a:	6880      	ldr	r0, [r0, #8]
 800c82c:	f001 f9f0 	bl	800dc10 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c830:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c832:	3501      	adds	r5, #1
 800c834:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800c836:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800c838:	b96e      	cbnz	r6, 800c856 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c83a:	6840      	ldr	r0, [r0, #4]
 800c83c:	f017 f8c5 	bl	80239ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c840:	6863      	ldr	r3, [r4, #4]
 800c842:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c844:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c846:	68a2      	ldr	r2, [r4, #8]
 800c848:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c84a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c84c:	bf24      	itt	cs
 800c84e:	6823      	ldrcs	r3, [r4, #0]
 800c850:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800c852:	2000      	movs	r0, #0
 800c854:	e7ed      	b.n	800c832 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c856:	68c0      	ldr	r0, [r0, #12]
 800c858:	f017 f8b7 	bl	80239ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c85c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c85e:	68e3      	ldr	r3, [r4, #12]
 800c860:	4251      	negs	r1, r2
 800c862:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c864:	6822      	ldr	r2, [r4, #0]
 800c866:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c868:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c86a:	bf3e      	ittt	cc
 800c86c:	68a3      	ldrcc	r3, [r4, #8]
 800c86e:	185b      	addcc	r3, r3, r1
 800c870:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c872:	2e02      	cmp	r6, #2
 800c874:	d1ed      	bne.n	800c852 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c876:	b10d      	cbz	r5, 800c87c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800c878:	3d01      	subs	r5, #1
 800c87a:	e7ea      	b.n	800c852 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800c87c:	4628      	mov	r0, r5
 800c87e:	e7d8      	b.n	800c832 <prvCopyDataToQueue+0x18>

0800c880 <prvCopyDataFromQueue>:
{
 800c880:	4603      	mov	r3, r0
 800c882:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800c886:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c888:	b162      	cbz	r2, 800c8a4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c88a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c88c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c88e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c890:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c892:	60dc      	str	r4, [r3, #12]
}
 800c894:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c898:	bf24      	itt	cs
 800c89a:	6819      	ldrcs	r1, [r3, #0]
 800c89c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c89e:	68d9      	ldr	r1, [r3, #12]
 800c8a0:	f017 b893 	b.w	80239ca <memcpy>
}
 800c8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <prvUnlockQueue>:
{
 800c8aa:	b570      	push	{r4, r5, r6, lr}
 800c8ac:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c8ae:	f7ff fe69 	bl	800c584 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c8b2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8b6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800c8ba:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8bc:	2d00      	cmp	r5, #0
 800c8be:	dd01      	ble.n	800c8c4 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c8c2:	b9b3      	cbnz	r3, 800c8f2 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 800c8c4:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8c6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800c8ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800c8ce:	f7ff fe79 	bl	800c5c4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c8d2:	f7ff fe57 	bl	800c584 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c8d6:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800c8da:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8dc:	2d00      	cmp	r5, #0
 800c8de:	dd01      	ble.n	800c8e4 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8e0:	6923      	ldr	r3, [r4, #16]
 800c8e2:	b97b      	cbnz	r3, 800c904 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800c8e4:	23ff      	movs	r3, #255	@ 0xff
 800c8e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800c8ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800c8ee:	f7ff be69 	b.w	800c5c4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	f001 f8a8 	bl	800da48 <xTaskRemoveFromEventList>
 800c8f8:	b108      	cbz	r0, 800c8fe <prvUnlockQueue+0x54>
						vTaskMissedYield();
 800c8fa:	f001 f92f 	bl	800db5c <vTaskMissedYield>
			--cTxLock;
 800c8fe:	3d01      	subs	r5, #1
 800c900:	b26d      	sxtb	r5, r5
 800c902:	e7db      	b.n	800c8bc <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c904:	4630      	mov	r0, r6
 800c906:	f001 f89f 	bl	800da48 <xTaskRemoveFromEventList>
 800c90a:	b108      	cbz	r0, 800c910 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800c90c:	f001 f926 	bl	800db5c <vTaskMissedYield>
				--cRxLock;
 800c910:	3d01      	subs	r5, #1
 800c912:	b26d      	sxtb	r5, r5
 800c914:	e7e2      	b.n	800c8dc <prvUnlockQueue+0x32>

0800c916 <xQueueGenericReset>:
{
 800c916:	b538      	push	{r3, r4, r5, lr}
 800c918:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800c91a:	4604      	mov	r4, r0
 800c91c:	b940      	cbnz	r0, 800c930 <xQueueGenericReset+0x1a>
 800c91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	e7fe      	b.n	800c92e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800c930:	f7ff fe28 	bl	800c584 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c934:	6822      	ldr	r2, [r4, #0]
 800c936:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c93a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c93c:	434b      	muls	r3, r1
 800c93e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c940:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c942:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c944:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c946:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800c948:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c94a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c94c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800c94e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c952:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800c956:	b9a5      	cbnz	r5, 800c982 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c958:	6923      	ldr	r3, [r4, #16]
 800c95a:	b173      	cbz	r3, 800c97a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c95c:	f104 0010 	add.w	r0, r4, #16
 800c960:	f001 f872 	bl	800da48 <xTaskRemoveFromEventList>
 800c964:	b148      	cbz	r0, 800c97a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800c966:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c96a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c96e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800c97a:	f7ff fe23 	bl	800c5c4 <vPortExitCritical>
}
 800c97e:	2001      	movs	r0, #1
 800c980:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c982:	f104 0010 	add.w	r0, r4, #16
 800c986:	f7ff fd55 	bl	800c434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c98a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c98e:	f7ff fd51 	bl	800c434 <vListInitialise>
 800c992:	e7f2      	b.n	800c97a <xQueueGenericReset+0x64>

0800c994 <xQueueGenericCreateStatic>:
	{
 800c994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c996:	460d      	mov	r5, r1
 800c998:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c99a:	b940      	cbnz	r0, 800c9ae <xQueueGenericCreateStatic+0x1a>
 800c99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	e7fe      	b.n	800c9ac <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800c9ae:	b943      	cbnz	r3, 800c9c2 <xQueueGenericCreateStatic+0x2e>
 800c9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	e7fe      	b.n	800c9c0 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9c2:	b14a      	cbz	r2, 800c9d8 <xQueueGenericCreateStatic+0x44>
 800c9c4:	b991      	cbnz	r1, 800c9ec <xQueueGenericCreateStatic+0x58>
 800c9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	e7fe      	b.n	800c9d6 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9d8:	b141      	cbz	r1, 800c9ec <xQueueGenericCreateStatic+0x58>
 800c9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	e7fe      	b.n	800c9ea <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c9ec:	2350      	movs	r3, #80	@ 0x50
 800c9ee:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c9f0:	9b01      	ldr	r3, [sp, #4]
 800c9f2:	2b50      	cmp	r3, #80	@ 0x50
 800c9f4:	d008      	beq.n	800ca08 <xQueueGenericCreateStatic+0x74>
 800c9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	e7fe      	b.n	800ca06 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca08:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca0a:	2d00      	cmp	r5, #0
 800ca0c:	bf08      	it	eq
 800ca0e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca10:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca12:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca16:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ca18:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f7ff ff7a 	bl	800c916 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ca22:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800ca26:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800ca28:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800ca2c:	b003      	add	sp, #12
 800ca2e:	bd30      	pop	{r4, r5, pc}

0800ca30 <xQueueGenericCreate>:
	{
 800ca30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca32:	460d      	mov	r5, r1
 800ca34:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca36:	4606      	mov	r6, r0
 800ca38:	b940      	cbnz	r0, 800ca4c <xQueueGenericCreate+0x1c>
 800ca3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	e7fe      	b.n	800ca4a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca4c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca4e:	3050      	adds	r0, #80	@ 0x50
 800ca50:	f7ff fc1a 	bl	800c288 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ca54:	4604      	mov	r4, r0
 800ca56:	b170      	cbz	r0, 800ca76 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca5e:	b165      	cbz	r5, 800ca7a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca60:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca64:	2101      	movs	r1, #1
 800ca66:	4620      	mov	r0, r4
 800ca68:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ca6a:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca6e:	f7ff ff52 	bl	800c916 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ca72:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800ca76:	4620      	mov	r0, r4
 800ca78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	e7f2      	b.n	800ca64 <xQueueGenericCreate+0x34>

0800ca7e <xQueueCreateCountingSemaphoreStatic>:
	{
 800ca7e:	b513      	push	{r0, r1, r4, lr}
 800ca80:	4613      	mov	r3, r2
 800ca82:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ca84:	b940      	cbnz	r0, 800ca98 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	e7fe      	b.n	800ca96 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ca98:	4288      	cmp	r0, r1
 800ca9a:	d208      	bcs.n	800caae <xQueueCreateCountingSemaphoreStatic+0x30>
 800ca9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	e7fe      	b.n	800caac <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800caae:	2202      	movs	r2, #2
 800cab0:	9200      	str	r2, [sp, #0]
 800cab2:	2200      	movs	r2, #0
 800cab4:	4611      	mov	r1, r2
 800cab6:	f7ff ff6d 	bl	800c994 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800caba:	b100      	cbz	r0, 800cabe <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cabc:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800cabe:	b002      	add	sp, #8
 800cac0:	bd10      	pop	{r4, pc}

0800cac2 <xQueueCreateCountingSemaphore>:
	{
 800cac2:	b510      	push	{r4, lr}
 800cac4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800cac6:	b940      	cbnz	r0, 800cada <xQueueCreateCountingSemaphore+0x18>
 800cac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	e7fe      	b.n	800cad8 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cada:	4288      	cmp	r0, r1
 800cadc:	d208      	bcs.n	800caf0 <xQueueCreateCountingSemaphore+0x2e>
 800cade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	e7fe      	b.n	800caee <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800caf0:	2202      	movs	r2, #2
 800caf2:	2100      	movs	r1, #0
 800caf4:	f7ff ff9c 	bl	800ca30 <xQueueGenericCreate>
		if( xHandle != NULL )
 800caf8:	b100      	cbz	r0, 800cafc <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cafa:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800cafc:	bd10      	pop	{r4, pc}

0800cafe <xQueueGenericSend>:
{
 800cafe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cb02:	460f      	mov	r7, r1
 800cb04:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800cb06:	4604      	mov	r4, r0
{
 800cb08:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800cb0a:	b940      	cbnz	r0, 800cb1e <xQueueGenericSend+0x20>
 800cb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	e7fe      	b.n	800cb1c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb1e:	b951      	cbnz	r1, 800cb36 <xQueueGenericSend+0x38>
 800cb20:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cb22:	b143      	cbz	r3, 800cb36 <xQueueGenericSend+0x38>
 800cb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	e7fe      	b.n	800cb34 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb36:	2e02      	cmp	r6, #2
 800cb38:	d10b      	bne.n	800cb52 <xQueueGenericSend+0x54>
 800cb3a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d008      	beq.n	800cb52 <xQueueGenericSend+0x54>
 800cb40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	e7fe      	b.n	800cb50 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb52:	f001 f80f 	bl	800db74 <xTaskGetSchedulerState>
 800cb56:	4605      	mov	r5, r0
 800cb58:	b320      	cbz	r0, 800cba4 <xQueueGenericSend+0xa6>
 800cb5a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800cb5c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800cb60:	f7ff fd10 	bl	800c584 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb64:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cb66:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d227      	bcs.n	800cbbc <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb6c:	4632      	mov	r2, r6
 800cb6e:	4639      	mov	r1, r7
 800cb70:	4620      	mov	r0, r4
 800cb72:	f7ff fe52 	bl	800c81a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cb78:	b11b      	cbz	r3, 800cb82 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb7a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cb7e:	f000 ff63 	bl	800da48 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800cb82:	b148      	cbz	r0, 800cb98 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800cb84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cb88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800cb98:	f7ff fd14 	bl	800c5c4 <vPortExitCritical>
				return pdPASS;
 800cb9c:	2001      	movs	r0, #1
}
 800cb9e:	b004      	add	sp, #16
 800cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cba4:	9b01      	ldr	r3, [sp, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0d8      	beq.n	800cb5c <xQueueGenericSend+0x5e>
 800cbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	e7fe      	b.n	800cbba <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbbc:	2e02      	cmp	r6, #2
 800cbbe:	d0d5      	beq.n	800cb6c <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbc0:	9b01      	ldr	r3, [sp, #4]
 800cbc2:	b91b      	cbnz	r3, 800cbcc <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800cbc4:	f7ff fcfe 	bl	800c5c4 <vPortExitCritical>
					return errQUEUE_FULL;
 800cbc8:	2000      	movs	r0, #0
 800cbca:	e7e8      	b.n	800cb9e <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800cbcc:	b915      	cbnz	r5, 800cbd4 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cbce:	a802      	add	r0, sp, #8
 800cbd0:	f000 ff7c 	bl	800dacc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800cbd4:	f7ff fcf6 	bl	800c5c4 <vPortExitCritical>
		vTaskSuspendAll();
 800cbd8:	f000 fd38 	bl	800d64c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbdc:	f7ff fcd2 	bl	800c584 <vPortEnterCritical>
 800cbe0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cbe4:	2bff      	cmp	r3, #255	@ 0xff
 800cbe6:	d101      	bne.n	800cbec <xQueueGenericSend+0xee>
 800cbe8:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800cbec:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cbf0:	2bff      	cmp	r3, #255	@ 0xff
 800cbf2:	d101      	bne.n	800cbf8 <xQueueGenericSend+0xfa>
 800cbf4:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800cbf8:	f7ff fce4 	bl	800c5c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbfc:	a901      	add	r1, sp, #4
 800cbfe:	a802      	add	r0, sp, #8
 800cc00:	f000 ff70 	bl	800dae4 <xTaskCheckForTimeOut>
 800cc04:	bb38      	cbnz	r0, 800cc56 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc06:	f7ff fcbd 	bl	800c584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc0a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cc0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d10e      	bne.n	800cc30 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800cc12:	f7ff fcd7 	bl	800c5c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cc16:	9901      	ldr	r1, [sp, #4]
 800cc18:	f104 0010 	add.w	r0, r4, #16
 800cc1c:	f000 fedc 	bl	800d9d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc20:	4620      	mov	r0, r4
 800cc22:	f7ff fe42 	bl	800c8aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc26:	f000 fdb5 	bl	800d794 <xTaskResumeAll>
 800cc2a:	b148      	cbz	r0, 800cc40 <xQueueGenericSend+0x142>
 800cc2c:	2501      	movs	r5, #1
 800cc2e:	e797      	b.n	800cb60 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800cc30:	f7ff fcc8 	bl	800c5c4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800cc34:	4620      	mov	r0, r4
 800cc36:	f7ff fe38 	bl	800c8aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc3a:	f000 fdab 	bl	800d794 <xTaskResumeAll>
 800cc3e:	e7f5      	b.n	800cc2c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800cc40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cc44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	e7ea      	b.n	800cc2c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800cc56:	4620      	mov	r0, r4
 800cc58:	f7ff fe27 	bl	800c8aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc5c:	f000 fd9a 	bl	800d794 <xTaskResumeAll>
			return errQUEUE_FULL;
 800cc60:	e7b2      	b.n	800cbc8 <xQueueGenericSend+0xca>

0800cc62 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cc62:	2200      	movs	r2, #0
	{
 800cc64:	460b      	mov	r3, r1
 800cc66:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cc68:	4611      	mov	r1, r2
 800cc6a:	9000      	str	r0, [sp, #0]
 800cc6c:	2001      	movs	r0, #1
 800cc6e:	f7ff fe91 	bl	800c994 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800cc72:	4604      	mov	r4, r0
 800cc74:	b138      	cbz	r0, 800cc86 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc76:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cc78:	461a      	mov	r2, r3
 800cc7a:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc7c:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cc7e:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cc80:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cc82:	f7ff ff3c 	bl	800cafe <xQueueGenericSend>
	}
 800cc86:	4620      	mov	r0, r4
 800cc88:	b002      	add	sp, #8
 800cc8a:	bd10      	pop	{r4, pc}

0800cc8c <xQueueGiveMutexRecursive>:
	{
 800cc8c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800cc8e:	4604      	mov	r4, r0
 800cc90:	b940      	cbnz	r0, 800cca4 <xQueueGiveMutexRecursive+0x18>
 800cc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	e7fe      	b.n	800cca2 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cca4:	6885      	ldr	r5, [r0, #8]
 800cca6:	f000 ff5f 	bl	800db68 <xTaskGetCurrentTaskHandle>
 800ccaa:	4285      	cmp	r5, r0
 800ccac:	d10b      	bne.n	800ccc6 <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ccb4:	b10b      	cbz	r3, 800ccba <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800ccb6:	2001      	movs	r0, #1
	}
 800ccb8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ccba:	461a      	mov	r2, r3
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f7ff ff1d 	bl	800cafe <xQueueGenericSend>
 800ccc4:	e7f7      	b.n	800ccb6 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800ccc6:	2000      	movs	r0, #0
		return xReturn;
 800ccc8:	e7f6      	b.n	800ccb8 <xQueueGiveMutexRecursive+0x2c>

0800ccca <xQueueCreateMutex>:
	{
 800ccca:	b570      	push	{r4, r5, r6, lr}
 800cccc:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ccce:	2050      	movs	r0, #80	@ 0x50
 800ccd0:	f7ff fada 	bl	800c288 <pvPortMalloc>
 800ccd4:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800ccd6:	b198      	cbz	r0, 800cd00 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ccd8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800ccda:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ccdc:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ccde:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800cce2:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cce6:	f7ff fe16 	bl	800c916 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ccea:	462b      	mov	r3, r5
 800ccec:	462a      	mov	r2, r5
 800ccee:	4629      	mov	r1, r5
 800ccf0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800ccf2:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ccf6:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ccf8:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ccfa:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ccfc:	f7ff feff 	bl	800cafe <xQueueGenericSend>
	}
 800cd00:	4620      	mov	r0, r4
 800cd02:	bd70      	pop	{r4, r5, r6, pc}

0800cd04 <xQueueGenericSendFromISR>:
{
 800cd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd08:	4689      	mov	r9, r1
 800cd0a:	4617      	mov	r7, r2
 800cd0c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800cd0e:	4604      	mov	r4, r0
 800cd10:	b940      	cbnz	r0, 800cd24 <xQueueGenericSendFromISR+0x20>
 800cd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	e7fe      	b.n	800cd22 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd24:	b951      	cbnz	r1, 800cd3c <xQueueGenericSendFromISR+0x38>
 800cd26:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cd28:	b143      	cbz	r3, 800cd3c <xQueueGenericSendFromISR+0x38>
 800cd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	e7fe      	b.n	800cd3a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd3c:	2e02      	cmp	r6, #2
 800cd3e:	d10b      	bne.n	800cd58 <xQueueGenericSendFromISR+0x54>
 800cd40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d008      	beq.n	800cd58 <xQueueGenericSendFromISR+0x54>
 800cd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	e7fe      	b.n	800cd56 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd58:	f7ff fd26 	bl	800c7a8 <vPortValidateInterruptPriority>
	__asm volatile
 800cd5c:	f3ef 8811 	mrs	r8, BASEPRI
 800cd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd70:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cd72:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d301      	bcc.n	800cd7c <xQueueGenericSendFromISR+0x78>
 800cd78:	2e02      	cmp	r6, #2
 800cd7a:	d11e      	bne.n	800cdba <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd7c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd80:	4632      	mov	r2, r6
 800cd82:	4649      	mov	r1, r9
 800cd84:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd86:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd88:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd8a:	f7ff fd46 	bl	800c81a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800cd8e:	1c6b      	adds	r3, r5, #1
 800cd90:	d10e      	bne.n	800cdb0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cd94:	b13b      	cbz	r3, 800cda6 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd96:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cd9a:	f000 fe55 	bl	800da48 <xTaskRemoveFromEventList>
 800cd9e:	b110      	cbz	r0, 800cda6 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800cda0:	b10f      	cbz	r7, 800cda6 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cda2:	2301      	movs	r3, #1
 800cda4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800cda6:	2001      	movs	r0, #1
	__asm volatile
 800cda8:	f388 8811 	msr	BASEPRI, r8
}
 800cdac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cdb0:	3501      	adds	r5, #1
 800cdb2:	b26d      	sxtb	r5, r5
 800cdb4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800cdb8:	e7f5      	b.n	800cda6 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800cdba:	2000      	movs	r0, #0
 800cdbc:	e7f4      	b.n	800cda8 <xQueueGenericSendFromISR+0xa4>

0800cdbe <xQueueGiveFromISR>:
{
 800cdbe:	b570      	push	{r4, r5, r6, lr}
 800cdc0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	b940      	cbnz	r0, 800cdd8 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800cdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	e7fe      	b.n	800cdd6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800cdd8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cdda:	b143      	cbz	r3, 800cdee <xQueueGiveFromISR+0x30>
 800cddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	e7fe      	b.n	800cdec <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cdee:	6803      	ldr	r3, [r0, #0]
 800cdf0:	b953      	cbnz	r3, 800ce08 <xQueueGiveFromISR+0x4a>
 800cdf2:	6883      	ldr	r3, [r0, #8]
 800cdf4:	b143      	cbz	r3, 800ce08 <xQueueGiveFromISR+0x4a>
 800cdf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdfa:	f383 8811 	msr	BASEPRI, r3
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	f3bf 8f4f 	dsb	sy
 800ce06:	e7fe      	b.n	800ce06 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce08:	f7ff fcce 	bl	800c7a8 <vPortValidateInterruptPriority>
	__asm volatile
 800ce0c:	f3ef 8611 	mrs	r6, BASEPRI
 800ce10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ce22:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d919      	bls.n	800ce5c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce2c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800ce2e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce30:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce32:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800ce34:	d10d      	bne.n	800ce52 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ce38:	b13b      	cbz	r3, 800ce4a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce3a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ce3e:	f000 fe03 	bl	800da48 <xTaskRemoveFromEventList>
 800ce42:	b110      	cbz	r0, 800ce4a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800ce44:	b10d      	cbz	r5, 800ce4a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce46:	2301      	movs	r3, #1
 800ce48:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800ce4a:	2001      	movs	r0, #1
	__asm volatile
 800ce4c:	f386 8811 	msr	BASEPRI, r6
}
 800ce50:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce52:	3301      	adds	r3, #1
 800ce54:	b25b      	sxtb	r3, r3
 800ce56:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ce5a:	e7f6      	b.n	800ce4a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	e7f5      	b.n	800ce4c <xQueueGiveFromISR+0x8e>

0800ce60 <xQueueReceive>:
{
 800ce60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ce64:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800ce66:	4604      	mov	r4, r0
{
 800ce68:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ce6a:	b940      	cbnz	r0, 800ce7e <xQueueReceive+0x1e>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	e7fe      	b.n	800ce7c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce7e:	b951      	cbnz	r1, 800ce96 <xQueueReceive+0x36>
 800ce80:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ce82:	b143      	cbz	r3, 800ce96 <xQueueReceive+0x36>
 800ce84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	e7fe      	b.n	800ce94 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce96:	f000 fe6d 	bl	800db74 <xTaskGetSchedulerState>
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	b318      	cbz	r0, 800cee6 <xQueueReceive+0x86>
 800ce9e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800cea0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800cea4:	f7ff fb6e 	bl	800c584 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cea8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ceaa:	b347      	cbz	r7, 800cefe <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ceac:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ceae:	4631      	mov	r1, r6
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f7ff fce5 	bl	800c880 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ceb6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ceb8:	6923      	ldr	r3, [r4, #16]
 800ceba:	b173      	cbz	r3, 800ceda <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cebc:	f104 0010 	add.w	r0, r4, #16
 800cec0:	f000 fdc2 	bl	800da48 <xTaskRemoveFromEventList>
 800cec4:	b148      	cbz	r0, 800ceda <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800cec6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ceca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cece:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ceda:	f7ff fb73 	bl	800c5c4 <vPortExitCritical>
				return pdPASS;
 800cede:	2001      	movs	r0, #1
}
 800cee0:	b004      	add	sp, #16
 800cee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cee6:	9b01      	ldr	r3, [sp, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d0d9      	beq.n	800cea0 <xQueueReceive+0x40>
 800ceec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	e7fe      	b.n	800cefc <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cefe:	9b01      	ldr	r3, [sp, #4]
 800cf00:	b91b      	cbnz	r3, 800cf0a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800cf02:	f7ff fb5f 	bl	800c5c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cf06:	2000      	movs	r0, #0
 800cf08:	e7ea      	b.n	800cee0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800cf0a:	b915      	cbnz	r5, 800cf12 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf0c:	a802      	add	r0, sp, #8
 800cf0e:	f000 fddd 	bl	800dacc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800cf12:	f7ff fb57 	bl	800c5c4 <vPortExitCritical>
		vTaskSuspendAll();
 800cf16:	f000 fb99 	bl	800d64c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf1a:	f7ff fb33 	bl	800c584 <vPortEnterCritical>
 800cf1e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cf22:	2bff      	cmp	r3, #255	@ 0xff
 800cf24:	d101      	bne.n	800cf2a <xQueueReceive+0xca>
 800cf26:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800cf2a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cf2e:	2bff      	cmp	r3, #255	@ 0xff
 800cf30:	d101      	bne.n	800cf36 <xQueueReceive+0xd6>
 800cf32:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800cf36:	f7ff fb45 	bl	800c5c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf3a:	a901      	add	r1, sp, #4
 800cf3c:	a802      	add	r0, sp, #8
 800cf3e:	f000 fdd1 	bl	800dae4 <xTaskCheckForTimeOut>
 800cf42:	bb00      	cbnz	r0, 800cf86 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf44:	4620      	mov	r0, r4
 800cf46:	f7ff fc5d 	bl	800c804 <prvIsQueueEmpty>
 800cf4a:	b1b0      	cbz	r0, 800cf7a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf4c:	9901      	ldr	r1, [sp, #4]
 800cf4e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cf52:	f000 fd41 	bl	800d9d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf56:	4620      	mov	r0, r4
 800cf58:	f7ff fca7 	bl	800c8aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf5c:	f000 fc1a 	bl	800d794 <xTaskResumeAll>
 800cf60:	b948      	cbnz	r0, 800cf76 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800cf62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	2501      	movs	r5, #1
 800cf78:	e794      	b.n	800cea4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f7ff fc95 	bl	800c8aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf80:	f000 fc08 	bl	800d794 <xTaskResumeAll>
 800cf84:	e7f7      	b.n	800cf76 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800cf86:	4620      	mov	r0, r4
 800cf88:	f7ff fc8f 	bl	800c8aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf8c:	f000 fc02 	bl	800d794 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7ff fc37 	bl	800c804 <prvIsQueueEmpty>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d0ed      	beq.n	800cf76 <xQueueReceive+0x116>
 800cf9a:	e7b4      	b.n	800cf06 <xQueueReceive+0xa6>

0800cf9c <xQueueSemaphoreTake>:
{
 800cf9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf9e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800cfa0:	4604      	mov	r4, r0
{
 800cfa2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cfa4:	b940      	cbnz	r0, 800cfb8 <xQueueSemaphoreTake+0x1c>
 800cfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	e7fe      	b.n	800cfb6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800cfb8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800cfba:	b145      	cbz	r5, 800cfce <xQueueSemaphoreTake+0x32>
 800cfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	e7fe      	b.n	800cfcc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfce:	f000 fdd1 	bl	800db74 <xTaskGetSchedulerState>
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	b320      	cbz	r0, 800d020 <xQueueSemaphoreTake+0x84>
 800cfd6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800cfd8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800cfda:	f7ff fad3 	bl	800c584 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cfde:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cfe0:	b353      	cbz	r3, 800d038 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	b913      	cbnz	r3, 800cff0 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cfea:	f000 fea1 	bl	800dd30 <pvTaskIncrementMutexHeldCount>
 800cfee:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cff0:	6923      	ldr	r3, [r4, #16]
 800cff2:	b173      	cbz	r3, 800d012 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cff4:	f104 0010 	add.w	r0, r4, #16
 800cff8:	f000 fd26 	bl	800da48 <xTaskRemoveFromEventList>
 800cffc:	b148      	cbz	r0, 800d012 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800cffe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d006:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d012:	f7ff fad7 	bl	800c5c4 <vPortExitCritical>
				return pdPASS;
 800d016:	2001      	movs	r0, #1
}
 800d018:	b005      	add	sp, #20
 800d01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d01c:	4635      	mov	r5, r6
 800d01e:	e7db      	b.n	800cfd8 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d020:	9b01      	ldr	r3, [sp, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d0fa      	beq.n	800d01c <xQueueSemaphoreTake+0x80>
 800d026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	e7fe      	b.n	800d036 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d038:	9b01      	ldr	r3, [sp, #4]
 800d03a:	b953      	cbnz	r3, 800d052 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d03c:	2d00      	cmp	r5, #0
 800d03e:	d066      	beq.n	800d10e <xQueueSemaphoreTake+0x172>
 800d040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	e7fe      	b.n	800d050 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800d052:	b916      	cbnz	r6, 800d05a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d054:	a802      	add	r0, sp, #8
 800d056:	f000 fd39 	bl	800dacc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d05a:	f7ff fab3 	bl	800c5c4 <vPortExitCritical>
		vTaskSuspendAll();
 800d05e:	f000 faf5 	bl	800d64c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d062:	f7ff fa8f 	bl	800c584 <vPortEnterCritical>
 800d066:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d06a:	2bff      	cmp	r3, #255	@ 0xff
 800d06c:	d101      	bne.n	800d072 <xQueueSemaphoreTake+0xd6>
 800d06e:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800d072:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d076:	2bff      	cmp	r3, #255	@ 0xff
 800d078:	d101      	bne.n	800d07e <xQueueSemaphoreTake+0xe2>
 800d07a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d07e:	f7ff faa1 	bl	800c5c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d082:	a901      	add	r1, sp, #4
 800d084:	a802      	add	r0, sp, #8
 800d086:	f000 fd2d 	bl	800dae4 <xTaskCheckForTimeOut>
 800d08a:	bb50      	cbnz	r0, 800d0e2 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d08c:	4620      	mov	r0, r4
 800d08e:	f7ff fbb9 	bl	800c804 <prvIsQueueEmpty>
 800d092:	b300      	cbz	r0, 800d0d6 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	b93b      	cbnz	r3, 800d0a8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800d098:	f7ff fa74 	bl	800c584 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d09c:	68a0      	ldr	r0, [r4, #8]
 800d09e:	f000 fd79 	bl	800db94 <xTaskPriorityInherit>
 800d0a2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800d0a4:	f7ff fa8e 	bl	800c5c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0a8:	9901      	ldr	r1, [sp, #4]
 800d0aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d0ae:	f000 fc93 	bl	800d9d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f7ff fbf9 	bl	800c8aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0b8:	f000 fb6c 	bl	800d794 <xTaskResumeAll>
 800d0bc:	b948      	cbnz	r0, 800d0d2 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800d0be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	f3bf 8f6f 	isb	sy
 800d0d2:	2601      	movs	r6, #1
 800d0d4:	e781      	b.n	800cfda <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f7ff fbe7 	bl	800c8aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0dc:	f000 fb5a 	bl	800d794 <xTaskResumeAll>
 800d0e0:	e7f7      	b.n	800d0d2 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f7ff fbe1 	bl	800c8aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0e8:	f000 fb54 	bl	800d794 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f7ff fb89 	bl	800c804 <prvIsQueueEmpty>
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d0ed      	beq.n	800d0d2 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800d0f6:	b165      	cbz	r5, 800d112 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800d0f8:	f7ff fa44 	bl	800c584 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d0fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d0fe:	b119      	cbz	r1, 800d108 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d100:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d102:	6819      	ldr	r1, [r3, #0]
 800d104:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d108:	68a0      	ldr	r0, [r4, #8]
 800d10a:	f000 fdc3 	bl	800dc94 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800d10e:	f7ff fa59 	bl	800c5c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d112:	2000      	movs	r0, #0
 800d114:	e780      	b.n	800d018 <xQueueSemaphoreTake+0x7c>

0800d116 <xQueueTakeMutexRecursive>:
	{
 800d116:	b570      	push	{r4, r5, r6, lr}
 800d118:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800d11a:	4604      	mov	r4, r0
 800d11c:	b940      	cbnz	r0, 800d130 <xQueueTakeMutexRecursive+0x1a>
 800d11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	e7fe      	b.n	800d12e <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d130:	6886      	ldr	r6, [r0, #8]
 800d132:	f000 fd19 	bl	800db68 <xTaskGetCurrentTaskHandle>
 800d136:	4286      	cmp	r6, r0
 800d138:	d104      	bne.n	800d144 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d13a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800d13c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d13e:	3301      	adds	r3, #1
 800d140:	60e3      	str	r3, [r4, #12]
	}
 800d142:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d144:	4629      	mov	r1, r5
 800d146:	4620      	mov	r0, r4
 800d148:	f7ff ff28 	bl	800cf9c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d0f8      	beq.n	800d142 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d150:	68e3      	ldr	r3, [r4, #12]
 800d152:	3301      	adds	r3, #1
 800d154:	60e3      	str	r3, [r4, #12]
 800d156:	e7f4      	b.n	800d142 <xQueueTakeMutexRecursive+0x2c>

0800d158 <xQueueReceiveFromISR>:
{
 800d158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d15c:	4689      	mov	r9, r1
 800d15e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800d160:	4604      	mov	r4, r0
 800d162:	b940      	cbnz	r0, 800d176 <xQueueReceiveFromISR+0x1e>
 800d164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	e7fe      	b.n	800d174 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d176:	b951      	cbnz	r1, 800d18e <xQueueReceiveFromISR+0x36>
 800d178:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d17a:	b143      	cbz	r3, 800d18e <xQueueReceiveFromISR+0x36>
 800d17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	e7fe      	b.n	800d18c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d18e:	f7ff fb0b 	bl	800c7a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d192:	f3ef 8711 	mrs	r7, BASEPRI
 800d196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1a6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1a8:	b30d      	cbz	r5, 800d1ee <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d1aa:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1b2:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800d1b4:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1b6:	f7ff fb63 	bl	800c880 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1ba:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800d1bc:	1c73      	adds	r3, r6, #1
 800d1be:	d111      	bne.n	800d1e4 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1c0:	6923      	ldr	r3, [r4, #16]
 800d1c2:	b153      	cbz	r3, 800d1da <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1c4:	f104 0010 	add.w	r0, r4, #16
 800d1c8:	f000 fc3e 	bl	800da48 <xTaskRemoveFromEventList>
 800d1cc:	b128      	cbz	r0, 800d1da <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800d1ce:	f1b8 0f00 	cmp.w	r8, #0
 800d1d2:	d002      	beq.n	800d1da <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800d1da:	2001      	movs	r0, #1
	__asm volatile
 800d1dc:	f387 8811 	msr	BASEPRI, r7
}
 800d1e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d1e4:	3601      	adds	r6, #1
 800d1e6:	b276      	sxtb	r6, r6
 800d1e8:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800d1ec:	e7f5      	b.n	800d1da <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	e7f4      	b.n	800d1dc <xQueueReceiveFromISR+0x84>
	...

0800d1f4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d1f4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d1f6:	4a07      	ldr	r2, [pc, #28]	@ (800d214 <vQueueAddToRegistry+0x20>)
	{
 800d1f8:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d1fa:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800d1fe:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800d202:	b91d      	cbnz	r5, 800d20c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d204:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d208:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d20a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d20c:	3301      	adds	r3, #1
 800d20e:	2b08      	cmp	r3, #8
 800d210:	d1f3      	bne.n	800d1fa <vQueueAddToRegistry+0x6>
 800d212:	e7fa      	b.n	800d20a <vQueueAddToRegistry+0x16>
 800d214:	24024c88 	.word	0x24024c88

0800d218 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d218:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d21a:	4a09      	ldr	r2, [pc, #36]	@ (800d240 <vQueueUnregisterQueue+0x28>)
	{
 800d21c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d21e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d222:	00dc      	lsls	r4, r3, #3
 800d224:	4281      	cmp	r1, r0
 800d226:	d106      	bne.n	800d236 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d228:	4a06      	ldr	r2, [pc, #24]	@ (800d244 <vQueueUnregisterQueue+0x2c>)
 800d22a:	2100      	movs	r1, #0
 800d22c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d230:	4422      	add	r2, r4
 800d232:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d234:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d236:	3301      	adds	r3, #1
 800d238:	2b08      	cmp	r3, #8
 800d23a:	d1f0      	bne.n	800d21e <vQueueUnregisterQueue+0x6>
 800d23c:	e7fa      	b.n	800d234 <vQueueUnregisterQueue+0x1c>
 800d23e:	bf00      	nop
 800d240:	24024c8c 	.word	0x24024c8c
 800d244:	24024c88 	.word	0x24024c88

0800d248 <vQueueDelete>:
{
 800d248:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800d24a:	b940      	cbnz	r0, 800d25e <vQueueDelete+0x16>
	__asm volatile
 800d24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d250:	f383 8811 	msr	BASEPRI, r3
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	e7fe      	b.n	800d25c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800d25e:	f7ff ffdb 	bl	800d218 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d262:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800d266:	b91b      	cbnz	r3, 800d270 <vQueueDelete+0x28>
}
 800d268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800d26c:	f7ff b8a4 	b.w	800c3b8 <vPortFree>
}
 800d270:	bd10      	pop	{r4, pc}

0800d272 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d272:	b570      	push	{r4, r5, r6, lr}
 800d274:	4604      	mov	r4, r0
 800d276:	460d      	mov	r5, r1
 800d278:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d27a:	f7ff f983 	bl	800c584 <vPortEnterCritical>
 800d27e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d282:	2bff      	cmp	r3, #255	@ 0xff
 800d284:	d102      	bne.n	800d28c <vQueueWaitForMessageRestricted+0x1a>
 800d286:	2300      	movs	r3, #0
 800d288:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d28c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d290:	2bff      	cmp	r3, #255	@ 0xff
 800d292:	d102      	bne.n	800d29a <vQueueWaitForMessageRestricted+0x28>
 800d294:	2300      	movs	r3, #0
 800d296:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d29a:	f7ff f993 	bl	800c5c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d29e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d2a0:	b92b      	cbnz	r3, 800d2ae <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d2a2:	4632      	mov	r2, r6
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d2aa:	f000 fbaf 	bl	800da0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d2ae:	4620      	mov	r0, r4
	}
 800d2b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800d2b4:	f7ff baf9 	b.w	800c8aa <prvUnlockQueue>

0800d2b8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2bc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d2be:	f7ff f961 	bl	800c584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d2c2:	4b2f      	ldr	r3, [pc, #188]	@ (800d380 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800d2c4:	4e2f      	ldr	r6, [pc, #188]	@ (800d384 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	4f2f      	ldr	r7, [pc, #188]	@ (800d388 <prvAddNewTaskToReadyList+0xd0>)
 800d2ca:	3201      	adds	r2, #1
 800d2cc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800d2ce:	6835      	ldr	r5, [r6, #0]
 800d2d0:	2d00      	cmp	r5, #0
 800d2d2:	d14a      	bne.n	800d36a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d2d4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d11f      	bne.n	800d31c <prvAddNewTaskToReadyList+0x64>
 800d2dc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2de:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	f7ff f8a7 	bl	800c434 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2e6:	f108 0814 	add.w	r8, r8, #20
 800d2ea:	2d38      	cmp	r5, #56	@ 0x38
 800d2ec:	d1f7      	bne.n	800d2de <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d2ee:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800d3b0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800d2f2:	4d26      	ldr	r5, [pc, #152]	@ (800d38c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800d2f4:	4640      	mov	r0, r8
 800d2f6:	f7ff f89d 	bl	800c434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	f7ff f89a 	bl	800c434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d300:	4823      	ldr	r0, [pc, #140]	@ (800d390 <prvAddNewTaskToReadyList+0xd8>)
 800d302:	f7ff f897 	bl	800c434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d306:	4823      	ldr	r0, [pc, #140]	@ (800d394 <prvAddNewTaskToReadyList+0xdc>)
 800d308:	f7ff f894 	bl	800c434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d30c:	4822      	ldr	r0, [pc, #136]	@ (800d398 <prvAddNewTaskToReadyList+0xe0>)
 800d30e:	f7ff f891 	bl	800c434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d312:	4b22      	ldr	r3, [pc, #136]	@ (800d39c <prvAddNewTaskToReadyList+0xe4>)
 800d314:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d318:	4b21      	ldr	r3, [pc, #132]	@ (800d3a0 <prvAddNewTaskToReadyList+0xe8>)
 800d31a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800d31c:	4a21      	ldr	r2, [pc, #132]	@ (800d3a4 <prvAddNewTaskToReadyList+0xec>)
 800d31e:	6813      	ldr	r3, [r2, #0]
 800d320:	3301      	adds	r3, #1
 800d322:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d324:	4a20      	ldr	r2, [pc, #128]	@ (800d3a8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d326:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800d328:	6811      	ldr	r1, [r2, #0]
 800d32a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d32c:	428b      	cmp	r3, r1
 800d32e:	d900      	bls.n	800d332 <prvAddNewTaskToReadyList+0x7a>
 800d330:	6013      	str	r3, [r2, #0]
 800d332:	2014      	movs	r0, #20
 800d334:	1d21      	adds	r1, r4, #4
 800d336:	fb00 7003 	mla	r0, r0, r3, r7
 800d33a:	f7ff f889 	bl	800c450 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d33e:	f7ff f941 	bl	800c5c4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d342:	4b1a      	ldr	r3, [pc, #104]	@ (800d3ac <prvAddNewTaskToReadyList+0xf4>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	b173      	cbz	r3, 800d366 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d348:	6833      	ldr	r3, [r6, #0]
 800d34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d34c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d34e:	429a      	cmp	r2, r3
 800d350:	d209      	bcs.n	800d366 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800d352:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d35a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d35e:	f3bf 8f4f 	dsb	sy
 800d362:	f3bf 8f6f 	isb	sy
}
 800d366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800d36a:	4b10      	ldr	r3, [pc, #64]	@ (800d3ac <prvAddNewTaskToReadyList+0xf4>)
 800d36c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d36e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800d370:	2a00      	cmp	r2, #0
 800d372:	d1d3      	bne.n	800d31c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d374:	6832      	ldr	r2, [r6, #0]
 800d376:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d378:	429a      	cmp	r2, r3
 800d37a:	d8cf      	bhi.n	800d31c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800d37c:	6034      	str	r4, [r6, #0]
 800d37e:	e7cd      	b.n	800d31c <prvAddNewTaskToReadyList+0x64>
 800d380:	24024cec 	.word	0x24024cec
 800d384:	240251c0 	.word	0x240251c0
 800d388:	24024d60 	.word	0x24024d60
 800d38c:	24024d38 	.word	0x24024d38
 800d390:	24024d1c 	.word	0x24024d1c
 800d394:	24024d08 	.word	0x24024d08
 800d398:	24024cf0 	.word	0x24024cf0
 800d39c:	24024d34 	.word	0x24024d34
 800d3a0:	24024d30 	.word	0x24024d30
 800d3a4:	24024cd0 	.word	0x24024cd0
 800d3a8:	24024ce4 	.word	0x24024ce4
 800d3ac:	24024ce0 	.word	0x24024ce0
 800d3b0:	24024d4c 	.word	0x24024d4c

0800d3b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3b6:	4b15      	ldr	r3, [pc, #84]	@ (800d40c <prvAddCurrentTaskToDelayedList+0x58>)
{
 800d3b8:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3ba:	4d15      	ldr	r5, [pc, #84]	@ (800d410 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800d3bc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800d3be:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3c0:	6828      	ldr	r0, [r5, #0]
 800d3c2:	3004      	adds	r0, #4
 800d3c4:	f7ff f866 	bl	800c494 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3c8:	1c73      	adds	r3, r6, #1
 800d3ca:	d107      	bne.n	800d3dc <prvAddCurrentTaskToDelayedList+0x28>
 800d3cc:	b137      	cbz	r7, 800d3dc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3ce:	6829      	ldr	r1, [r5, #0]
 800d3d0:	4810      	ldr	r0, [pc, #64]	@ (800d414 <prvAddCurrentTaskToDelayedList+0x60>)
 800d3d2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3d8:	f7ff b83a 	b.w	800c450 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3dc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3de:	682b      	ldr	r3, [r5, #0]
 800d3e0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3e2:	d307      	bcc.n	800d3f4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d418 <prvAddCurrentTaskToDelayedList+0x64>)
 800d3e6:	6818      	ldr	r0, [r3, #0]
 800d3e8:	6829      	ldr	r1, [r5, #0]
}
 800d3ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3ee:	3104      	adds	r1, #4
 800d3f0:	f7ff b839 	b.w	800c466 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3f4:	4b09      	ldr	r3, [pc, #36]	@ (800d41c <prvAddCurrentTaskToDelayedList+0x68>)
 800d3f6:	6818      	ldr	r0, [r3, #0]
 800d3f8:	6829      	ldr	r1, [r5, #0]
 800d3fa:	3104      	adds	r1, #4
 800d3fc:	f7ff f833 	bl	800c466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d400:	4b07      	ldr	r3, [pc, #28]	@ (800d420 <prvAddCurrentTaskToDelayedList+0x6c>)
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	42a2      	cmp	r2, r4
 800d406:	d900      	bls.n	800d40a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800d408:	601c      	str	r4, [r3, #0]
}
 800d40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d40c:	24024ce8 	.word	0x24024ce8
 800d410:	240251c0 	.word	0x240251c0
 800d414:	24024cf0 	.word	0x24024cf0
 800d418:	24024d30 	.word	0x24024d30
 800d41c:	24024d34 	.word	0x24024d34
 800d420:	24024ccc 	.word	0x24024ccc

0800d424 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d424:	4a06      	ldr	r2, [pc, #24]	@ (800d440 <prvResetNextTaskUnblockTime+0x1c>)
 800d426:	6813      	ldr	r3, [r2, #0]
 800d428:	6819      	ldr	r1, [r3, #0]
 800d42a:	4b06      	ldr	r3, [pc, #24]	@ (800d444 <prvResetNextTaskUnblockTime+0x20>)
 800d42c:	b919      	cbnz	r1, 800d436 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d42e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d432:	601a      	str	r2, [r3, #0]
}
 800d434:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d436:	6812      	ldr	r2, [r2, #0]
 800d438:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d43a:	68d2      	ldr	r2, [r2, #12]
 800d43c:	6852      	ldr	r2, [r2, #4]
 800d43e:	e7f8      	b.n	800d432 <prvResetNextTaskUnblockTime+0xe>
 800d440:	24024d34 	.word	0x24024d34
 800d444:	24024ccc 	.word	0x24024ccc

0800d448 <prvDeleteTCB>:
	{
 800d448:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d44a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800d44e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d450:	b93b      	cbnz	r3, 800d462 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800d452:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800d454:	f7fe ffb0 	bl	800c3b8 <vPortFree>
				vPortFree( pxTCB );
 800d458:	4620      	mov	r0, r4
	}
 800d45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800d45e:	f7fe bfab 	b.w	800c3b8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d462:	2b01      	cmp	r3, #1
 800d464:	d0f9      	beq.n	800d45a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d466:	2b02      	cmp	r3, #2
 800d468:	d008      	beq.n	800d47c <prvDeleteTCB+0x34>
 800d46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	e7fe      	b.n	800d47a <prvDeleteTCB+0x32>
	}
 800d47c:	bd10      	pop	{r4, pc}
	...

0800d480 <prvIdleTask>:
{
 800d480:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d482:	4c14      	ldr	r4, [pc, #80]	@ (800d4d4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d484:	4f14      	ldr	r7, [pc, #80]	@ (800d4d8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800d486:	4d15      	ldr	r5, [pc, #84]	@ (800d4dc <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	b983      	cbnz	r3, 800d4ae <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d48c:	4b14      	ldr	r3, [pc, #80]	@ (800d4e0 <prvIdleTask+0x60>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d909      	bls.n	800d4a8 <prvIdleTask+0x28>
				taskYIELD();
 800d494:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d49c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800d4a8:	f7f3 f926 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d4ac:	e7eb      	b.n	800d486 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800d4ae:	f7ff f869 	bl	800c584 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4b6:	1d30      	adds	r0, r6, #4
 800d4b8:	f7fe ffec 	bl	800c494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4bc:	682b      	ldr	r3, [r5, #0]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800d4c8:	f7ff f87c 	bl	800c5c4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f7ff ffbb 	bl	800d448 <prvDeleteTCB>
 800d4d2:	e7d9      	b.n	800d488 <prvIdleTask+0x8>
 800d4d4:	24024d04 	.word	0x24024d04
 800d4d8:	24024d08 	.word	0x24024d08
 800d4dc:	24024cec 	.word	0x24024cec
 800d4e0:	24024d60 	.word	0x24024d60

0800d4e4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d4e8:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d4ea:	4607      	mov	r7, r0
 800d4ec:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d4ee:	21a5      	movs	r1, #165	@ 0xa5
 800d4f0:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d4f2:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d4f4:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d4f6:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d4fa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d4fc:	f016 f984 	bl	8023808 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d500:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d502:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d504:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800d508:	b3b5      	cbz	r5, 800d578 <prvInitialiseNewTask.constprop.0+0x94>
 800d50a:	1e6b      	subs	r3, r5, #1
 800d50c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800d510:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d512:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d516:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800d51a:	b109      	cbz	r1, 800d520 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d51c:	42ab      	cmp	r3, r5
 800d51e:	d1f8      	bne.n	800d512 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d520:	2300      	movs	r3, #0
 800d522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d526:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800d528:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d52c:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d52e:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800d530:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d534:	bf28      	it	cs
 800d536:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800d538:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d53a:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d53c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d540:	f7fe ff83 	bl	800c44a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d544:	f104 0018 	add.w	r0, r4, #24
 800d548:	f7fe ff7f 	bl	800c44a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800d54c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d550:	4642      	mov	r2, r8
 800d552:	4639      	mov	r1, r7
 800d554:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d556:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d558:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d55a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800d55c:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d560:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d564:	f7fe ffe4 	bl	800c530 <pxPortInitialiseStack>
 800d568:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d56a:	f1b9 0f00 	cmp.w	r9, #0
 800d56e:	d001      	beq.n	800d574 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d570:	f8c9 4000 	str.w	r4, [r9]
}
 800d574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d578:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800d57c:	e7d3      	b.n	800d526 <prvInitialiseNewTask.constprop.0+0x42>

0800d57e <xTaskCreateStatic>:
	{
 800d57e:	b570      	push	{r4, r5, r6, lr}
 800d580:	b086      	sub	sp, #24
 800d582:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d586:	b945      	cbnz	r5, 800d59a <xTaskCreateStatic+0x1c>
 800d588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d58c:	f383 8811 	msr	BASEPRI, r3
 800d590:	f3bf 8f6f 	isb	sy
 800d594:	f3bf 8f4f 	dsb	sy
 800d598:	e7fe      	b.n	800d598 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800d59a:	b944      	cbnz	r4, 800d5ae <xTaskCreateStatic+0x30>
 800d59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a0:	f383 8811 	msr	BASEPRI, r3
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	e7fe      	b.n	800d5ac <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5ae:	2660      	movs	r6, #96	@ 0x60
 800d5b0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d5b2:	9e05      	ldr	r6, [sp, #20]
 800d5b4:	2e60      	cmp	r6, #96	@ 0x60
 800d5b6:	d008      	beq.n	800d5ca <xTaskCreateStatic+0x4c>
 800d5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	e7fe      	b.n	800d5c8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5ca:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5cc:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5ce:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5d0:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5d4:	ad04      	add	r5, sp, #16
 800d5d6:	9402      	str	r4, [sp, #8]
 800d5d8:	9501      	str	r5, [sp, #4]
 800d5da:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d5dc:	9500      	str	r5, [sp, #0]
 800d5de:	f7ff ff81 	bl	800d4e4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f7ff fe68 	bl	800d2b8 <prvAddNewTaskToReadyList>
	}
 800d5e8:	9804      	ldr	r0, [sp, #16]
 800d5ea:	b006      	add	sp, #24
 800d5ec:	bd70      	pop	{r4, r5, r6, pc}

0800d5ee <xTaskCreate>:
	{
 800d5ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5f2:	4607      	mov	r7, r0
 800d5f4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5f6:	0090      	lsls	r0, r2, #2
	{
 800d5f8:	4688      	mov	r8, r1
 800d5fa:	4616      	mov	r6, r2
 800d5fc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5fe:	f7fe fe43 	bl	800c288 <pvPortMalloc>
			if( pxStack != NULL )
 800d602:	4605      	mov	r5, r0
 800d604:	b920      	cbnz	r0, 800d610 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d606:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d60a:	b005      	add	sp, #20
 800d60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d610:	2060      	movs	r0, #96	@ 0x60
 800d612:	f7fe fe39 	bl	800c288 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d616:	4604      	mov	r4, r0
 800d618:	b198      	cbz	r0, 800d642 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d61a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800d61c:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d61e:	4632      	mov	r2, r6
 800d620:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d622:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d628:	9002      	str	r0, [sp, #8]
 800d62a:	4638      	mov	r0, r7
 800d62c:	9301      	str	r3, [sp, #4]
 800d62e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	464b      	mov	r3, r9
 800d634:	f7ff ff56 	bl	800d4e4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d638:	4620      	mov	r0, r4
 800d63a:	f7ff fe3d 	bl	800d2b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d63e:	2001      	movs	r0, #1
 800d640:	e7e3      	b.n	800d60a <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800d642:	4628      	mov	r0, r5
 800d644:	f7fe feb8 	bl	800c3b8 <vPortFree>
		if( pxNewTCB != NULL )
 800d648:	e7dd      	b.n	800d606 <xTaskCreate+0x18>
	...

0800d64c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d64c:	4a02      	ldr	r2, [pc, #8]	@ (800d658 <vTaskSuspendAll+0xc>)
 800d64e:	6813      	ldr	r3, [r2, #0]
 800d650:	3301      	adds	r3, #1
 800d652:	6013      	str	r3, [r2, #0]
}
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	24024cc8 	.word	0x24024cc8

0800d65c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d65c:	4b01      	ldr	r3, [pc, #4]	@ (800d664 <xTaskGetTickCount+0x8>)
 800d65e:	6818      	ldr	r0, [r3, #0]
}
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	24024ce8 	.word	0x24024ce8

0800d668 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d668:	4b3f      	ldr	r3, [pc, #252]	@ (800d768 <xTaskIncrementTick+0x100>)
 800d66a:	681b      	ldr	r3, [r3, #0]
{
 800d66c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d670:	2b00      	cmp	r3, #0
 800d672:	d172      	bne.n	800d75a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d674:	4b3d      	ldr	r3, [pc, #244]	@ (800d76c <xTaskIncrementTick+0x104>)
 800d676:	681c      	ldr	r4, [r3, #0]
 800d678:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800d67a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d67c:	b9bc      	cbnz	r4, 800d6ae <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d67e:	4b3c      	ldr	r3, [pc, #240]	@ (800d770 <xTaskIncrementTick+0x108>)
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	6812      	ldr	r2, [r2, #0]
 800d684:	b142      	cbz	r2, 800d698 <xTaskIncrementTick+0x30>
 800d686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	e7fe      	b.n	800d696 <xTaskIncrementTick+0x2e>
 800d698:	4a36      	ldr	r2, [pc, #216]	@ (800d774 <xTaskIncrementTick+0x10c>)
 800d69a:	6819      	ldr	r1, [r3, #0]
 800d69c:	6810      	ldr	r0, [r2, #0]
 800d69e:	6018      	str	r0, [r3, #0]
 800d6a0:	6011      	str	r1, [r2, #0]
 800d6a2:	4a35      	ldr	r2, [pc, #212]	@ (800d778 <xTaskIncrementTick+0x110>)
 800d6a4:	6813      	ldr	r3, [r2, #0]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	6013      	str	r3, [r2, #0]
 800d6aa:	f7ff febb 	bl	800d424 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6ae:	4d33      	ldr	r5, [pc, #204]	@ (800d77c <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800d6b0:	f04f 0b00 	mov.w	fp, #0
 800d6b4:	4e32      	ldr	r6, [pc, #200]	@ (800d780 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6b6:	682b      	ldr	r3, [r5, #0]
 800d6b8:	4f32      	ldr	r7, [pc, #200]	@ (800d784 <xTaskIncrementTick+0x11c>)
 800d6ba:	429c      	cmp	r4, r3
 800d6bc:	d212      	bcs.n	800d6e4 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	2114      	movs	r1, #20
 800d6c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d6c4:	434a      	muls	r2, r1
 800d6c6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800d6c8:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800d6ca:	4a2f      	ldr	r2, [pc, #188]	@ (800d788 <xTaskIncrementTick+0x120>)
 800d6cc:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800d6ce:	bf28      	it	cs
 800d6d0:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800d6d4:	2a00      	cmp	r2, #0
 800d6d6:	bf18      	it	ne
 800d6d8:	f04f 0b01 	movne.w	fp, #1
}
 800d6dc:	4658      	mov	r0, fp
 800d6de:	b003      	add	sp, #12
 800d6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6e4:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800d770 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800d6e8:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800d790 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6ec:	f8d9 2000 	ldr.w	r2, [r9]
 800d6f0:	6812      	ldr	r2, [r2, #0]
 800d6f2:	b91a      	cbnz	r2, 800d6fc <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f8:	602a      	str	r2, [r5, #0]
					break;
 800d6fa:	e7e0      	b.n	800d6be <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6fc:	f8d9 2000 	ldr.w	r2, [r9]
 800d700:	68d2      	ldr	r2, [r2, #12]
 800d702:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d706:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800d70a:	428c      	cmp	r4, r1
 800d70c:	d201      	bcs.n	800d712 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800d70e:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d710:	e7d5      	b.n	800d6be <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d712:	f108 0304 	add.w	r3, r8, #4
 800d716:	4618      	mov	r0, r3
 800d718:	9301      	str	r3, [sp, #4]
 800d71a:	f7fe febb 	bl	800c494 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d71e:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800d722:	b119      	cbz	r1, 800d72c <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d724:	f108 0018 	add.w	r0, r8, #24
 800d728:	f7fe feb4 	bl	800c494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d72c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800d730:	f8da 1000 	ldr.w	r1, [sl]
 800d734:	4288      	cmp	r0, r1
 800d736:	d901      	bls.n	800d73c <xTaskIncrementTick+0xd4>
 800d738:	f8ca 0000 	str.w	r0, [sl]
 800d73c:	2314      	movs	r3, #20
 800d73e:	9901      	ldr	r1, [sp, #4]
 800d740:	fb03 6000 	mla	r0, r3, r0, r6
 800d744:	f7fe fe84 	bl	800c450 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d748:	6838      	ldr	r0, [r7, #0]
 800d74a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800d74e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800d750:	4291      	cmp	r1, r2
 800d752:	bf28      	it	cs
 800d754:	f04f 0b01 	movcs.w	fp, #1
 800d758:	e7c8      	b.n	800d6ec <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800d75a:	4a0c      	ldr	r2, [pc, #48]	@ (800d78c <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800d75c:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800d760:	6813      	ldr	r3, [r2, #0]
 800d762:	3301      	adds	r3, #1
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	e7b9      	b.n	800d6dc <xTaskIncrementTick+0x74>
 800d768:	24024cc8 	.word	0x24024cc8
 800d76c:	24024ce8 	.word	0x24024ce8
 800d770:	24024d34 	.word	0x24024d34
 800d774:	24024d30 	.word	0x24024d30
 800d778:	24024cd4 	.word	0x24024cd4
 800d77c:	24024ccc 	.word	0x24024ccc
 800d780:	24024d60 	.word	0x24024d60
 800d784:	240251c0 	.word	0x240251c0
 800d788:	24024cd8 	.word	0x24024cd8
 800d78c:	24024cdc 	.word	0x24024cdc
 800d790:	24024ce4 	.word	0x24024ce4

0800d794 <xTaskResumeAll>:
{
 800d794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800d798:	4c30      	ldr	r4, [pc, #192]	@ (800d85c <xTaskResumeAll+0xc8>)
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	b943      	cbnz	r3, 800d7b0 <xTaskResumeAll+0x1c>
 800d79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	e7fe      	b.n	800d7ae <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800d7b0:	f7fe fee8 	bl	800c584 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ba:	6824      	ldr	r4, [r4, #0]
 800d7bc:	b12c      	cbz	r4, 800d7ca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800d7be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d7c0:	f7fe ff00 	bl	800c5c4 <vPortExitCritical>
}
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d7ca:	4b25      	ldr	r3, [pc, #148]	@ (800d860 <xTaskResumeAll+0xcc>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d0f5      	beq.n	800d7be <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7d2:	4d24      	ldr	r5, [pc, #144]	@ (800d864 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800d7d4:	4e24      	ldr	r6, [pc, #144]	@ (800d868 <xTaskResumeAll+0xd4>)
 800d7d6:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800d878 <xTaskResumeAll+0xe4>
 800d7da:	e01d      	b.n	800d818 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7dc:	68eb      	ldr	r3, [r5, #12]
 800d7de:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7e0:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7e2:	f104 0018 	add.w	r0, r4, #24
 800d7e6:	f7fe fe55 	bl	800c494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7ea:	4638      	mov	r0, r7
 800d7ec:	f7fe fe52 	bl	800c494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d7f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d7f2:	6832      	ldr	r2, [r6, #0]
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d900      	bls.n	800d7fa <xTaskResumeAll+0x66>
 800d7f8:	6033      	str	r3, [r6, #0]
 800d7fa:	2014      	movs	r0, #20
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	fb00 8003 	mla	r0, r0, r3, r8
 800d802:	f7fe fe25 	bl	800c450 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d806:	4b19      	ldr	r3, [pc, #100]	@ (800d86c <xTaskResumeAll+0xd8>)
 800d808:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80e:	429a      	cmp	r2, r3
 800d810:	d302      	bcc.n	800d818 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800d812:	4b17      	ldr	r3, [pc, #92]	@ (800d870 <xTaskResumeAll+0xdc>)
 800d814:	2201      	movs	r2, #1
 800d816:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d818:	682b      	ldr	r3, [r5, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1de      	bne.n	800d7dc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800d81e:	b10c      	cbz	r4, 800d824 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800d820:	f7ff fe00 	bl	800d424 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d824:	4d13      	ldr	r5, [pc, #76]	@ (800d874 <xTaskResumeAll+0xe0>)
 800d826:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d828:	b144      	cbz	r4, 800d83c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800d82a:	4e11      	ldr	r6, [pc, #68]	@ (800d870 <xTaskResumeAll+0xdc>)
 800d82c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d82e:	f7ff ff1b 	bl	800d668 <xTaskIncrementTick>
 800d832:	b100      	cbz	r0, 800d836 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800d834:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d836:	3c01      	subs	r4, #1
 800d838:	d1f9      	bne.n	800d82e <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800d83a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800d83c:	4b0c      	ldr	r3, [pc, #48]	@ (800d870 <xTaskResumeAll+0xdc>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d0bc      	beq.n	800d7be <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800d844:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d84c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d858:	2401      	movs	r4, #1
 800d85a:	e7b1      	b.n	800d7c0 <xTaskResumeAll+0x2c>
 800d85c:	24024cc8 	.word	0x24024cc8
 800d860:	24024cec 	.word	0x24024cec
 800d864:	24024d1c 	.word	0x24024d1c
 800d868:	24024ce4 	.word	0x24024ce4
 800d86c:	240251c0 	.word	0x240251c0
 800d870:	24024cd8 	.word	0x24024cd8
 800d874:	24024cdc 	.word	0x24024cdc
 800d878:	24024d60 	.word	0x24024d60

0800d87c <vTaskSetApplicationTaskTag>:
	{
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	460d      	mov	r5, r1
		if( xTask == NULL )
 800d880:	4604      	mov	r4, r0
 800d882:	b908      	cbnz	r0, 800d888 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800d884:	4b04      	ldr	r3, [pc, #16]	@ (800d898 <vTaskSetApplicationTaskTag+0x1c>)
 800d886:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800d888:	f7fe fe7c 	bl	800c584 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800d88c:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800d88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800d892:	f7fe be97 	b.w	800c5c4 <vPortExitCritical>
 800d896:	bf00      	nop
 800d898:	240251c0 	.word	0x240251c0

0800d89c <xTaskCallApplicationTaskHook>:
	{
 800d89c:	4603      	mov	r3, r0
 800d89e:	4608      	mov	r0, r1
		if( xTask == NULL )
 800d8a0:	b90b      	cbnz	r3, 800d8a6 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800d8a2:	4b03      	ldr	r3, [pc, #12]	@ (800d8b0 <xTaskCallApplicationTaskHook+0x14>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800d8a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8a8:	b103      	cbz	r3, 800d8ac <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800d8aa:	4718      	bx	r3
	}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	4770      	bx	lr
 800d8b0:	240251c0 	.word	0x240251c0

0800d8b4 <vTaskStartScheduler>:
{
 800d8b4:	b510      	push	{r4, lr}
 800d8b6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d8b8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d8ba:	aa07      	add	r2, sp, #28
 800d8bc:	a906      	add	r1, sp, #24
 800d8be:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d8c0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d8c4:	f7fe fca2 	bl	800c20c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d8c8:	9b05      	ldr	r3, [sp, #20]
 800d8ca:	9a07      	ldr	r2, [sp, #28]
 800d8cc:	9302      	str	r3, [sp, #8]
 800d8ce:	9b06      	ldr	r3, [sp, #24]
 800d8d0:	4919      	ldr	r1, [pc, #100]	@ (800d938 <vTaskStartScheduler+0x84>)
 800d8d2:	481a      	ldr	r0, [pc, #104]	@ (800d93c <vTaskStartScheduler+0x88>)
 800d8d4:	e9cd 4300 	strd	r4, r3, [sp]
 800d8d8:	4623      	mov	r3, r4
 800d8da:	f7ff fe50 	bl	800d57e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800d8de:	b340      	cbz	r0, 800d932 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800d8e0:	f000 fa84 	bl	800ddec <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d8e4:	2801      	cmp	r0, #1
 800d8e6:	d119      	bne.n	800d91c <vTaskStartScheduler+0x68>
 800d8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800d8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fc:	4b10      	ldr	r3, [pc, #64]	@ (800d940 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800d8fe:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800d900:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d902:	4b10      	ldr	r3, [pc, #64]	@ (800d944 <vTaskStartScheduler+0x90>)
 800d904:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d906:	4b10      	ldr	r3, [pc, #64]	@ (800d948 <vTaskStartScheduler+0x94>)
 800d908:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800d90a:	4b10      	ldr	r3, [pc, #64]	@ (800d94c <vTaskStartScheduler+0x98>)
 800d90c:	6818      	ldr	r0, [r3, #0]
 800d90e:	f7ff ffc5 	bl	800d89c <xTaskCallApplicationTaskHook>
}
 800d912:	b008      	add	sp, #32
 800d914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800d918:	f7fe bec4 	b.w	800c6a4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d91c:	3001      	adds	r0, #1
 800d91e:	d108      	bne.n	800d932 <vTaskStartScheduler+0x7e>
 800d920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	e7fe      	b.n	800d930 <vTaskStartScheduler+0x7c>
}
 800d932:	b008      	add	sp, #32
 800d934:	bd10      	pop	{r4, pc}
 800d936:	bf00      	nop
 800d938:	080264f8 	.word	0x080264f8
 800d93c:	0800d481 	.word	0x0800d481
 800d940:	24024ccc 	.word	0x24024ccc
 800d944:	24024ce0 	.word	0x24024ce0
 800d948:	24024ce8 	.word	0x24024ce8
 800d94c:	240251c0 	.word	0x240251c0

0800d950 <vTaskSwitchContext>:
{
 800d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d952:	4b1c      	ldr	r3, [pc, #112]	@ (800d9c4 <vTaskSwitchContext+0x74>)
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	4b1c      	ldr	r3, [pc, #112]	@ (800d9c8 <vTaskSwitchContext+0x78>)
 800d958:	b112      	cbz	r2, 800d960 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800d95a:	2201      	movs	r2, #1
 800d95c:	601a      	str	r2, [r3, #0]
}
 800d95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800d960:	4c1a      	ldr	r4, [pc, #104]	@ (800d9cc <vTaskSwitchContext+0x7c>)
 800d962:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d964:	4e1a      	ldr	r6, [pc, #104]	@ (800d9d0 <vTaskSwitchContext+0x80>)
 800d966:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800d968:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800d96a:	6820      	ldr	r0, [r4, #0]
 800d96c:	f7ff ff96 	bl	800d89c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d970:	6832      	ldr	r2, [r6, #0]
 800d972:	4918      	ldr	r1, [pc, #96]	@ (800d9d4 <vTaskSwitchContext+0x84>)
 800d974:	fb07 f302 	mul.w	r3, r7, r2
 800d978:	58cd      	ldr	r5, [r1, r3]
 800d97a:	18c8      	adds	r0, r1, r3
 800d97c:	b1ad      	cbz	r5, 800d9aa <vTaskSwitchContext+0x5a>
 800d97e:	6845      	ldr	r5, [r0, #4]
 800d980:	3308      	adds	r3, #8
 800d982:	686d      	ldr	r5, [r5, #4]
 800d984:	440b      	add	r3, r1
 800d986:	429d      	cmp	r5, r3
 800d988:	6045      	str	r5, [r0, #4]
 800d98a:	bf04      	itt	eq
 800d98c:	686b      	ldreq	r3, [r5, #4]
 800d98e:	6043      	streq	r3, [r0, #4]
 800d990:	2314      	movs	r3, #20
 800d992:	fb03 1102 	mla	r1, r3, r2, r1
 800d996:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800d998:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800d9a0:	6820      	ldr	r0, [r4, #0]
}
 800d9a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800d9a6:	f7ff bf79 	b.w	800d89c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9aa:	b942      	cbnz	r2, 800d9be <vTaskSwitchContext+0x6e>
 800d9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	e7fe      	b.n	800d9bc <vTaskSwitchContext+0x6c>
 800d9be:	3a01      	subs	r2, #1
 800d9c0:	e7d8      	b.n	800d974 <vTaskSwitchContext+0x24>
 800d9c2:	bf00      	nop
 800d9c4:	24024cc8 	.word	0x24024cc8
 800d9c8:	24024cd8 	.word	0x24024cd8
 800d9cc:	240251c0 	.word	0x240251c0
 800d9d0:	24024ce4 	.word	0x24024ce4
 800d9d4:	24024d60 	.word	0x24024d60

0800d9d8 <vTaskPlaceOnEventList>:
{
 800d9d8:	b510      	push	{r4, lr}
 800d9da:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800d9dc:	b940      	cbnz	r0, 800d9f0 <vTaskPlaceOnEventList+0x18>
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	e7fe      	b.n	800d9ee <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9f0:	4b05      	ldr	r3, [pc, #20]	@ (800da08 <vTaskPlaceOnEventList+0x30>)
 800d9f2:	6819      	ldr	r1, [r3, #0]
 800d9f4:	3118      	adds	r1, #24
 800d9f6:	f7fe fd36 	bl	800c466 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	2101      	movs	r1, #1
}
 800d9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da02:	f7ff bcd7 	b.w	800d3b4 <prvAddCurrentTaskToDelayedList>
 800da06:	bf00      	nop
 800da08:	240251c0 	.word	0x240251c0

0800da0c <vTaskPlaceOnEventListRestricted>:
	{
 800da0c:	b538      	push	{r3, r4, r5, lr}
 800da0e:	460d      	mov	r5, r1
 800da10:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800da12:	b940      	cbnz	r0, 800da26 <vTaskPlaceOnEventListRestricted+0x1a>
 800da14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	e7fe      	b.n	800da24 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da26:	4b07      	ldr	r3, [pc, #28]	@ (800da44 <vTaskPlaceOnEventListRestricted+0x38>)
 800da28:	6819      	ldr	r1, [r3, #0]
 800da2a:	3118      	adds	r1, #24
 800da2c:	f7fe fd10 	bl	800c450 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800da30:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da32:	4621      	mov	r1, r4
 800da34:	bf0c      	ite	eq
 800da36:	4628      	moveq	r0, r5
 800da38:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800da3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da40:	f7ff bcb8 	b.w	800d3b4 <prvAddCurrentTaskToDelayedList>
 800da44:	240251c0 	.word	0x240251c0

0800da48 <xTaskRemoveFromEventList>:
{
 800da48:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da4a:	68c3      	ldr	r3, [r0, #12]
 800da4c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800da4e:	b944      	cbnz	r4, 800da62 <xTaskRemoveFromEventList+0x1a>
 800da50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	e7fe      	b.n	800da60 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da62:	f104 0518 	add.w	r5, r4, #24
 800da66:	4628      	mov	r0, r5
 800da68:	f7fe fd14 	bl	800c494 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da6c:	4b11      	ldr	r3, [pc, #68]	@ (800dab4 <xTaskRemoveFromEventList+0x6c>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	b9d3      	cbnz	r3, 800daa8 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da72:	1d25      	adds	r5, r4, #4
 800da74:	4628      	mov	r0, r5
 800da76:	f7fe fd0d 	bl	800c494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da7a:	4a0f      	ldr	r2, [pc, #60]	@ (800dab8 <xTaskRemoveFromEventList+0x70>)
 800da7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800da7e:	6811      	ldr	r1, [r2, #0]
 800da80:	428b      	cmp	r3, r1
 800da82:	d900      	bls.n	800da86 <xTaskRemoveFromEventList+0x3e>
 800da84:	6013      	str	r3, [r2, #0]
 800da86:	2014      	movs	r0, #20
 800da88:	4a0c      	ldr	r2, [pc, #48]	@ (800dabc <xTaskRemoveFromEventList+0x74>)
 800da8a:	4629      	mov	r1, r5
 800da8c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da90:	f7fe fcde 	bl	800c450 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da94:	4b0a      	ldr	r3, [pc, #40]	@ (800dac0 <xTaskRemoveFromEventList+0x78>)
 800da96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d906      	bls.n	800daae <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800daa0:	2001      	movs	r0, #1
 800daa2:	4b08      	ldr	r3, [pc, #32]	@ (800dac4 <xTaskRemoveFromEventList+0x7c>)
 800daa4:	6018      	str	r0, [r3, #0]
}
 800daa6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800daa8:	4629      	mov	r1, r5
 800daaa:	4807      	ldr	r0, [pc, #28]	@ (800dac8 <xTaskRemoveFromEventList+0x80>)
 800daac:	e7f0      	b.n	800da90 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800daae:	2000      	movs	r0, #0
	return xReturn;
 800dab0:	e7f9      	b.n	800daa6 <xTaskRemoveFromEventList+0x5e>
 800dab2:	bf00      	nop
 800dab4:	24024cc8 	.word	0x24024cc8
 800dab8:	24024ce4 	.word	0x24024ce4
 800dabc:	24024d60 	.word	0x24024d60
 800dac0:	240251c0 	.word	0x240251c0
 800dac4:	24024cd8 	.word	0x24024cd8
 800dac8:	24024d1c 	.word	0x24024d1c

0800dacc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dacc:	4b03      	ldr	r3, [pc, #12]	@ (800dadc <vTaskInternalSetTimeOutState+0x10>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dad2:	4b03      	ldr	r3, [pc, #12]	@ (800dae0 <vTaskInternalSetTimeOutState+0x14>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	6043      	str	r3, [r0, #4]
}
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	24024cd4 	.word	0x24024cd4
 800dae0:	24024ce8 	.word	0x24024ce8

0800dae4 <xTaskCheckForTimeOut>:
{
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800dae8:	4605      	mov	r5, r0
 800daea:	b940      	cbnz	r0, 800dafe <xTaskCheckForTimeOut+0x1a>
 800daec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf0:	f383 8811 	msr	BASEPRI, r3
 800daf4:	f3bf 8f6f 	isb	sy
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	e7fe      	b.n	800dafc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800dafe:	b941      	cbnz	r1, 800db12 <xTaskCheckForTimeOut+0x2e>
 800db00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	e7fe      	b.n	800db10 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800db12:	f7fe fd37 	bl	800c584 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800db16:	4b0f      	ldr	r3, [pc, #60]	@ (800db54 <xTaskCheckForTimeOut+0x70>)
 800db18:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800db1a:	6823      	ldr	r3, [r4, #0]
 800db1c:	1c5a      	adds	r2, r3, #1
 800db1e:	d010      	beq.n	800db42 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db20:	480d      	ldr	r0, [pc, #52]	@ (800db58 <xTaskCheckForTimeOut+0x74>)
 800db22:	682e      	ldr	r6, [r5, #0]
 800db24:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db26:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db28:	4286      	cmp	r6, r0
 800db2a:	d001      	beq.n	800db30 <xTaskCheckForTimeOut+0x4c>
 800db2c:	428a      	cmp	r2, r1
 800db2e:	d90f      	bls.n	800db50 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db30:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db32:	4283      	cmp	r3, r0
 800db34:	d90a      	bls.n	800db4c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800db36:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800db38:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800db3a:	4413      	add	r3, r2
 800db3c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800db3e:	f7ff ffc5 	bl	800dacc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800db42:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800db44:	f7fe fd3e 	bl	800c5c4 <vPortExitCritical>
}
 800db48:	4620      	mov	r0, r4
 800db4a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800db50:	2401      	movs	r4, #1
 800db52:	e7f7      	b.n	800db44 <xTaskCheckForTimeOut+0x60>
 800db54:	24024ce8 	.word	0x24024ce8
 800db58:	24024cd4 	.word	0x24024cd4

0800db5c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800db5c:	4b01      	ldr	r3, [pc, #4]	@ (800db64 <vTaskMissedYield+0x8>)
 800db5e:	2201      	movs	r2, #1
 800db60:	601a      	str	r2, [r3, #0]
}
 800db62:	4770      	bx	lr
 800db64:	24024cd8 	.word	0x24024cd8

0800db68 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800db68:	4b01      	ldr	r3, [pc, #4]	@ (800db70 <xTaskGetCurrentTaskHandle+0x8>)
 800db6a:	6818      	ldr	r0, [r3, #0]
	}
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	240251c0 	.word	0x240251c0

0800db74 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800db74:	4b05      	ldr	r3, [pc, #20]	@ (800db8c <xTaskGetSchedulerState+0x18>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	b133      	cbz	r3, 800db88 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db7a:	4b05      	ldr	r3, [pc, #20]	@ (800db90 <xTaskGetSchedulerState+0x1c>)
 800db7c:	6818      	ldr	r0, [r3, #0]
 800db7e:	fab0 f080 	clz	r0, r0
 800db82:	0940      	lsrs	r0, r0, #5
 800db84:	0040      	lsls	r0, r0, #1
 800db86:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db88:	2001      	movs	r0, #1
	}
 800db8a:	4770      	bx	lr
 800db8c:	24024ce0 	.word	0x24024ce0
 800db90:	24024cc8 	.word	0x24024cc8

0800db94 <xTaskPriorityInherit>:
	{
 800db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800db96:	4604      	mov	r4, r0
 800db98:	b338      	cbz	r0, 800dbea <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db9a:	4d1a      	ldr	r5, [pc, #104]	@ (800dc04 <xTaskPriorityInherit+0x70>)
 800db9c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800db9e:	682a      	ldr	r2, [r5, #0]
 800dba0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d226      	bcs.n	800dbf4 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dba6:	6982      	ldr	r2, [r0, #24]
 800dba8:	2a00      	cmp	r2, #0
 800dbaa:	db04      	blt.n	800dbb6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbac:	682a      	ldr	r2, [r5, #0]
 800dbae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dbb0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800dbb4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dbb6:	2214      	movs	r2, #20
 800dbb8:	4e13      	ldr	r6, [pc, #76]	@ (800dc08 <xTaskPriorityInherit+0x74>)
 800dbba:	fb02 6303 	mla	r3, r2, r3, r6
 800dbbe:	6962      	ldr	r2, [r4, #20]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d113      	bne.n	800dbec <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbc4:	1d27      	adds	r7, r4, #4
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	f7fe fc64 	bl	800c494 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbcc:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dbce:	4a0f      	ldr	r2, [pc, #60]	@ (800dc0c <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dbd2:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dbd6:	428b      	cmp	r3, r1
 800dbd8:	d900      	bls.n	800dbdc <xTaskPriorityInherit+0x48>
 800dbda:	6013      	str	r3, [r2, #0]
 800dbdc:	2014      	movs	r0, #20
 800dbde:	4639      	mov	r1, r7
 800dbe0:	fb00 6003 	mla	r0, r0, r3, r6
 800dbe4:	f7fe fc34 	bl	800c450 <vListInsertEnd>
				xReturn = pdTRUE;
 800dbe8:	2001      	movs	r0, #1
	}
 800dbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dbf2:	e7f9      	b.n	800dbe8 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800dbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbfa:	4298      	cmp	r0, r3
 800dbfc:	bf2c      	ite	cs
 800dbfe:	2000      	movcs	r0, #0
 800dc00:	2001      	movcc	r0, #1
 800dc02:	e7f2      	b.n	800dbea <xTaskPriorityInherit+0x56>
 800dc04:	240251c0 	.word	0x240251c0
 800dc08:	24024d60 	.word	0x24024d60
 800dc0c:	24024ce4 	.word	0x24024ce4

0800dc10 <xTaskPriorityDisinherit>:
	{
 800dc10:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800dc12:	b908      	cbnz	r0, 800dc18 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800dc14:	2000      	movs	r0, #0
	}
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800dc18:	4b1b      	ldr	r3, [pc, #108]	@ (800dc88 <xTaskPriorityDisinherit+0x78>)
 800dc1a:	681c      	ldr	r4, [r3, #0]
 800dc1c:	4284      	cmp	r4, r0
 800dc1e:	d008      	beq.n	800dc32 <xTaskPriorityDisinherit+0x22>
 800dc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	e7fe      	b.n	800dc30 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc32:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800dc34:	b943      	cbnz	r3, 800dc48 <xTaskPriorityDisinherit+0x38>
 800dc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3a:	f383 8811 	msr	BASEPRI, r3
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	e7fe      	b.n	800dc46 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc48:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800dc4a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc4c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800dc4e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc50:	4291      	cmp	r1, r2
 800dc52:	d0df      	beq.n	800dc14 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1dd      	bne.n	800dc14 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc58:	1d25      	adds	r5, r4, #4
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f7fe fc1a 	bl	800c494 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc60:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc66:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc68:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc6a:	4a08      	ldr	r2, [pc, #32]	@ (800dc8c <xTaskPriorityDisinherit+0x7c>)
 800dc6c:	6811      	ldr	r1, [r2, #0]
 800dc6e:	428b      	cmp	r3, r1
 800dc70:	d900      	bls.n	800dc74 <xTaskPriorityDisinherit+0x64>
 800dc72:	6013      	str	r3, [r2, #0]
 800dc74:	4a06      	ldr	r2, [pc, #24]	@ (800dc90 <xTaskPriorityDisinherit+0x80>)
 800dc76:	2014      	movs	r0, #20
 800dc78:	4629      	mov	r1, r5
 800dc7a:	fb00 2003 	mla	r0, r0, r3, r2
 800dc7e:	f7fe fbe7 	bl	800c450 <vListInsertEnd>
					xReturn = pdTRUE;
 800dc82:	2001      	movs	r0, #1
		return xReturn;
 800dc84:	e7c7      	b.n	800dc16 <xTaskPriorityDisinherit+0x6>
 800dc86:	bf00      	nop
 800dc88:	240251c0 	.word	0x240251c0
 800dc8c:	24024ce4 	.word	0x24024ce4
 800dc90:	24024d60 	.word	0x24024d60

0800dc94 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800dc94:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800dc96:	4604      	mov	r4, r0
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d042      	beq.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc9c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800dc9e:	b942      	cbnz	r2, 800dcb2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800dca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	e7fe      	b.n	800dcb0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dcb2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800dcb4:	4299      	cmp	r1, r3
 800dcb6:	bf38      	it	cc
 800dcb8:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dcba:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800dcbc:	428b      	cmp	r3, r1
 800dcbe:	d030      	beq.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dcc0:	2a01      	cmp	r2, #1
 800dcc2:	d12e      	bne.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800dcc4:	4a17      	ldr	r2, [pc, #92]	@ (800dd24 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800dcc6:	6812      	ldr	r2, [r2, #0]
 800dcc8:	4282      	cmp	r2, r0
 800dcca:	d108      	bne.n	800dcde <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800dccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	e7fe      	b.n	800dcdc <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcde:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dce0:	4d11      	ldr	r5, [pc, #68]	@ (800dd28 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dce2:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dce4:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800dce8:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcea:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcee:	bfa8      	it	ge
 800dcf0:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcf4:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcf6:	bfa8      	it	ge
 800dcf8:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d111      	bne.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcfe:	1d06      	adds	r6, r0, #4
 800dd00:	4630      	mov	r0, r6
 800dd02:	f7fe fbc7 	bl	800c494 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800dd06:	4a09      	ldr	r2, [pc, #36]	@ (800dd2c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800dd08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dd0a:	6811      	ldr	r1, [r2, #0]
 800dd0c:	428b      	cmp	r3, r1
 800dd0e:	d900      	bls.n	800dd12 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	2014      	movs	r0, #20
 800dd14:	4631      	mov	r1, r6
 800dd16:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800dd1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800dd1e:	f7fe bb97 	b.w	800c450 <vListInsertEnd>
	}
 800dd22:	bd70      	pop	{r4, r5, r6, pc}
 800dd24:	240251c0 	.word	0x240251c0
 800dd28:	24024d60 	.word	0x24024d60
 800dd2c:	24024ce4 	.word	0x24024ce4

0800dd30 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800dd30:	4b04      	ldr	r3, [pc, #16]	@ (800dd44 <pvTaskIncrementMutexHeldCount+0x14>)
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	b11a      	cbz	r2, 800dd3e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd36:	6819      	ldr	r1, [r3, #0]
 800dd38:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800dd3a:	3201      	adds	r2, #1
 800dd3c:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800dd3e:	6818      	ldr	r0, [r3, #0]
	}
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	240251c0 	.word	0x240251c0

0800dd48 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800dd48:	4291      	cmp	r1, r2
{
 800dd4a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd4c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd4e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800dd50:	d80a      	bhi.n	800dd68 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd52:	1ad2      	subs	r2, r2, r3
 800dd54:	6983      	ldr	r3, [r0, #24]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d20d      	bcs.n	800dd76 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd5a:	1d01      	adds	r1, r0, #4
 800dd5c:	4b07      	ldr	r3, [pc, #28]	@ (800dd7c <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	f7fe fb81 	bl	800c466 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800dd64:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800dd66:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d201      	bcs.n	800dd70 <prvInsertTimerInActiveList+0x28>
 800dd6c:	4299      	cmp	r1, r3
 800dd6e:	d202      	bcs.n	800dd76 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd70:	1d01      	adds	r1, r0, #4
 800dd72:	4b03      	ldr	r3, [pc, #12]	@ (800dd80 <prvInsertTimerInActiveList+0x38>)
 800dd74:	e7f3      	b.n	800dd5e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800dd76:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800dd78:	e7f5      	b.n	800dd66 <prvInsertTimerInActiveList+0x1e>
 800dd7a:	bf00      	nop
 800dd7c:	240252c0 	.word	0x240252c0
 800dd80:	240252c4 	.word	0x240252c4

0800dd84 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800dd86:	4c11      	ldr	r4, [pc, #68]	@ (800ddcc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800dd88:	f7fe fbfc 	bl	800c584 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800dd8c:	6825      	ldr	r5, [r4, #0]
 800dd8e:	b9bd      	cbnz	r5, 800ddc0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd90:	4f0f      	ldr	r7, [pc, #60]	@ (800ddd0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800dd92:	4e10      	ldr	r6, [pc, #64]	@ (800ddd4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800dd94:	4638      	mov	r0, r7
 800dd96:	f7fe fb4d 	bl	800c434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	f7fe fb4a 	bl	800c434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dda0:	4b0d      	ldr	r3, [pc, #52]	@ (800ddd8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dda2:	4a0e      	ldr	r2, [pc, #56]	@ (800dddc <prvCheckForValidListAndQueue+0x58>)
 800dda4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800dda6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dda8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ddaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dde0 <prvCheckForValidListAndQueue+0x5c>)
 800ddac:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ddae:	4b0d      	ldr	r3, [pc, #52]	@ (800dde4 <prvCheckForValidListAndQueue+0x60>)
 800ddb0:	9500      	str	r5, [sp, #0]
 800ddb2:	f7fe fdef 	bl	800c994 <xQueueGenericCreateStatic>
 800ddb6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ddb8:	b110      	cbz	r0, 800ddc0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ddba:	490b      	ldr	r1, [pc, #44]	@ (800dde8 <prvCheckForValidListAndQueue+0x64>)
 800ddbc:	f7ff fa1a 	bl	800d1f4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ddc0:	b003      	add	sp, #12
 800ddc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ddc6:	f7fe bbfd 	b.w	800c5c4 <vPortExitCritical>
 800ddca:	bf00      	nop
 800ddcc:	240252bc 	.word	0x240252bc
 800ddd0:	240252dc 	.word	0x240252dc
 800ddd4:	240252c8 	.word	0x240252c8
 800ddd8:	240252c4 	.word	0x240252c4
 800dddc:	24025214 	.word	0x24025214
 800dde0:	240252c0 	.word	0x240252c0
 800dde4:	240251c4 	.word	0x240251c4
 800dde8:	080264fd 	.word	0x080264fd

0800ddec <xTimerCreateTimerTask>:
{
 800ddec:	b510      	push	{r4, lr}
 800ddee:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ddf0:	f7ff ffc8 	bl	800dd84 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ddf4:	4b12      	ldr	r3, [pc, #72]	@ (800de40 <xTimerCreateTimerTask+0x54>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	b1b3      	cbz	r3, 800de28 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ddfa:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ddfc:	aa07      	add	r2, sp, #28
 800ddfe:	a906      	add	r1, sp, #24
 800de00:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de02:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de06:	f7fe fa0d 	bl	800c224 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de0a:	9b05      	ldr	r3, [sp, #20]
 800de0c:	9a07      	ldr	r2, [sp, #28]
 800de0e:	9302      	str	r3, [sp, #8]
 800de10:	9b06      	ldr	r3, [sp, #24]
 800de12:	490c      	ldr	r1, [pc, #48]	@ (800de44 <xTimerCreateTimerTask+0x58>)
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	2302      	movs	r3, #2
 800de18:	480b      	ldr	r0, [pc, #44]	@ (800de48 <xTimerCreateTimerTask+0x5c>)
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	4623      	mov	r3, r4
 800de1e:	f7ff fbae 	bl	800d57e <xTaskCreateStatic>
 800de22:	4b0a      	ldr	r3, [pc, #40]	@ (800de4c <xTimerCreateTimerTask+0x60>)
 800de24:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800de26:	b940      	cbnz	r0, 800de3a <xTimerCreateTimerTask+0x4e>
 800de28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800de38:	e7fe      	b.n	800de38 <xTimerCreateTimerTask+0x4c>
}
 800de3a:	2001      	movs	r0, #1
 800de3c:	b008      	add	sp, #32
 800de3e:	bd10      	pop	{r4, pc}
 800de40:	240252bc 	.word	0x240252bc
 800de44:	08026502 	.word	0x08026502
 800de48:	0800df49 	.word	0x0800df49
 800de4c:	240252b8 	.word	0x240252b8

0800de50 <xTimerGenericCommand>:
{
 800de50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800de52:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800de54:	4604      	mov	r4, r0
{
 800de56:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800de58:	b940      	cbnz	r0, 800de6c <xTimerGenericCommand+0x1c>
 800de5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de5e:	f383 8811 	msr	BASEPRI, r3
 800de62:	f3bf 8f6f 	isb	sy
 800de66:	f3bf 8f4f 	dsb	sy
 800de6a:	e7fe      	b.n	800de6a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800de6c:	4d0c      	ldr	r5, [pc, #48]	@ (800dea0 <xTimerGenericCommand+0x50>)
 800de6e:	6828      	ldr	r0, [r5, #0]
 800de70:	b178      	cbz	r0, 800de92 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de72:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800de74:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de76:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de7a:	dc0c      	bgt.n	800de96 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de7c:	f7ff fe7a 	bl	800db74 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de80:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de82:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de84:	4669      	mov	r1, sp
 800de86:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de88:	bf0c      	ite	eq
 800de8a:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de8c:	461a      	movne	r2, r3
 800de8e:	f7fe fe36 	bl	800cafe <xQueueGenericSend>
}
 800de92:	b004      	add	sp, #16
 800de94:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de96:	2300      	movs	r3, #0
 800de98:	4669      	mov	r1, sp
 800de9a:	f7fe ff33 	bl	800cd04 <xQueueGenericSendFromISR>
 800de9e:	e7f8      	b.n	800de92 <xTimerGenericCommand+0x42>
 800dea0:	240252bc 	.word	0x240252bc

0800dea4 <prvSampleTimeNow>:
{
 800dea4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800dea8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800df44 <prvSampleTimeNow+0xa0>
{
 800deac:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800deae:	f7ff fbd5 	bl	800d65c <xTaskGetTickCount>
 800deb2:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800deb4:	f8d8 3000 	ldr.w	r3, [r8]
 800deb8:	4283      	cmp	r3, r0
 800deba:	d909      	bls.n	800ded0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800debc:	4f1f      	ldr	r7, [pc, #124]	@ (800df3c <prvSampleTimeNow+0x98>)
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	b96a      	cbnz	r2, 800dee0 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800dec4:	4a1e      	ldr	r2, [pc, #120]	@ (800df40 <prvSampleTimeNow+0x9c>)
 800dec6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dec8:	6013      	str	r3, [r2, #0]
 800deca:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800decc:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800dece:	e000      	b.n	800ded2 <prvSampleTimeNow+0x2e>
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800ded4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800ded6:	f8c8 5000 	str.w	r5, [r8]
}
 800deda:	b002      	add	sp, #8
 800dedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dee0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dee2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dee4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dee8:	f104 0a04 	add.w	sl, r4, #4
 800deec:	4650      	mov	r0, sl
 800deee:	f7fe fad1 	bl	800c494 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800def2:	6a23      	ldr	r3, [r4, #32]
 800def4:	4620      	mov	r0, r4
 800def6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800def8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800defc:	075b      	lsls	r3, r3, #29
 800defe:	d5de      	bpl.n	800debe <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df00:	69a3      	ldr	r3, [r4, #24]
 800df02:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800df04:	4599      	cmp	r9, r3
 800df06:	d206      	bcs.n	800df16 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df08:	4651      	mov	r1, sl
 800df0a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df0c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df0e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df10:	f7fe faa9 	bl	800c466 <vListInsert>
 800df14:	e7d3      	b.n	800debe <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df16:	2300      	movs	r3, #0
 800df18:	464a      	mov	r2, r9
 800df1a:	4620      	mov	r0, r4
 800df1c:	4619      	mov	r1, r3
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	f7ff ff96 	bl	800de50 <xTimerGenericCommand>
				configASSERT( xResult );
 800df24:	2800      	cmp	r0, #0
 800df26:	d1ca      	bne.n	800debe <prvSampleTimeNow+0x1a>
 800df28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2c:	f383 8811 	msr	BASEPRI, r3
 800df30:	f3bf 8f6f 	isb	sy
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	e7fe      	b.n	800df38 <prvSampleTimeNow+0x94>
 800df3a:	bf00      	nop
 800df3c:	240252c4 	.word	0x240252c4
 800df40:	240252c0 	.word	0x240252c0
 800df44:	240252b4 	.word	0x240252b4

0800df48 <prvTimerTask>:
{
 800df48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df4c:	4d6e      	ldr	r5, [pc, #440]	@ (800e108 <prvTimerTask+0x1c0>)
{
 800df4e:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df50:	4e6e      	ldr	r6, [pc, #440]	@ (800e10c <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df52:	682b      	ldr	r3, [r5, #0]
 800df54:	f8d3 8000 	ldr.w	r8, [r3]
 800df58:	f1b8 0f00 	cmp.w	r8, #0
 800df5c:	d035      	beq.n	800dfca <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df5e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df60:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df62:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800df66:	f7ff fb71 	bl	800d64c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df6a:	a804      	add	r0, sp, #16
 800df6c:	f7ff ff9a 	bl	800dea4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800df70:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df72:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800df74:	2b00      	cmp	r3, #0
 800df76:	d169      	bne.n	800e04c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df78:	2c00      	cmp	r4, #0
 800df7a:	d14c      	bne.n	800e016 <prvTimerTask+0xce>
 800df7c:	4540      	cmp	r0, r8
 800df7e:	d350      	bcc.n	800e022 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800df80:	f7ff fc08 	bl	800d794 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df84:	682b      	ldr	r3, [r5, #0]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df8a:	1d38      	adds	r0, r7, #4
 800df8c:	f7fe fa82 	bl	800c494 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800df94:	0758      	lsls	r0, r3, #29
 800df96:	d51a      	bpl.n	800dfce <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df98:	69b9      	ldr	r1, [r7, #24]
 800df9a:	4643      	mov	r3, r8
 800df9c:	464a      	mov	r2, r9
 800df9e:	4638      	mov	r0, r7
 800dfa0:	4441      	add	r1, r8
 800dfa2:	f7ff fed1 	bl	800dd48 <prvInsertTimerInActiveList>
 800dfa6:	b1b0      	cbz	r0, 800dfd6 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfa8:	4623      	mov	r3, r4
 800dfaa:	4642      	mov	r2, r8
 800dfac:	4621      	mov	r1, r4
 800dfae:	4638      	mov	r0, r7
 800dfb0:	9400      	str	r4, [sp, #0]
 800dfb2:	f7ff ff4d 	bl	800de50 <xTimerGenericCommand>
			configASSERT( xResult );
 800dfb6:	b970      	cbnz	r0, 800dfd6 <prvTimerTask+0x8e>
 800dfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	e7fe      	b.n	800dfc8 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dfca:	2401      	movs	r4, #1
 800dfcc:	e7cb      	b.n	800df66 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfce:	f023 0301 	bic.w	r3, r3, #1
 800dfd2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	4638      	mov	r0, r7
 800dfda:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dfdc:	2200      	movs	r2, #0
 800dfde:	a904      	add	r1, sp, #16
 800dfe0:	6830      	ldr	r0, [r6, #0]
 800dfe2:	f7fe ff3d 	bl	800ce60 <xQueueReceive>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d0b3      	beq.n	800df52 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dfea:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dfec:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	db2f      	blt.n	800e052 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dff2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dff4:	6963      	ldr	r3, [r4, #20]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d132      	bne.n	800e060 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dffa:	a803      	add	r0, sp, #12
 800dffc:	f7ff ff52 	bl	800dea4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e000:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e002:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800e004:	2b09      	cmp	r3, #9
 800e006:	d8e9      	bhi.n	800dfdc <prvTimerTask+0x94>
 800e008:	e8df f003 	tbb	[pc, r3]
 800e00c:	572e2e2e 	.word	0x572e2e2e
 800e010:	2e2e765e 	.word	0x2e2e765e
 800e014:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e016:	4b3e      	ldr	r3, [pc, #248]	@ (800e110 <prvTimerTask+0x1c8>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681c      	ldr	r4, [r3, #0]
 800e01c:	fab4 f484 	clz	r4, r4
 800e020:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e022:	4622      	mov	r2, r4
 800e024:	eba8 0109 	sub.w	r1, r8, r9
 800e028:	6830      	ldr	r0, [r6, #0]
 800e02a:	f7ff f922 	bl	800d272 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e02e:	f7ff fbb1 	bl	800d794 <xTaskResumeAll>
 800e032:	2800      	cmp	r0, #0
 800e034:	d1d2      	bne.n	800dfdc <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800e036:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e03a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e03e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	f3bf 8f6f 	isb	sy
 800e04a:	e7c7      	b.n	800dfdc <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800e04c:	f7ff fba2 	bl	800d794 <xTaskResumeAll>
}
 800e050:	e7c4      	b.n	800dfdc <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e052:	9b05      	ldr	r3, [sp, #20]
 800e054:	9907      	ldr	r1, [sp, #28]
 800e056:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e058:	9b04      	ldr	r3, [sp, #16]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	dbbe      	blt.n	800dfdc <prvTimerTask+0x94>
 800e05e:	e7c8      	b.n	800dff2 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e060:	1d20      	adds	r0, r4, #4
 800e062:	f7fe fa17 	bl	800c494 <uxListRemove>
 800e066:	e7c8      	b.n	800dffa <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e068:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e06c:	4620      	mov	r0, r4
 800e06e:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e070:	f043 0301 	orr.w	r3, r3, #1
 800e074:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e078:	9b05      	ldr	r3, [sp, #20]
 800e07a:	4419      	add	r1, r3
 800e07c:	f7ff fe64 	bl	800dd48 <prvInsertTimerInActiveList>
 800e080:	2800      	cmp	r0, #0
 800e082:	d0ab      	beq.n	800dfdc <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e084:	6a23      	ldr	r3, [r4, #32]
 800e086:	4620      	mov	r0, r4
 800e088:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e08a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e08e:	0759      	lsls	r1, r3, #29
 800e090:	d5a4      	bpl.n	800dfdc <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e092:	69a2      	ldr	r2, [r4, #24]
 800e094:	2300      	movs	r3, #0
 800e096:	9905      	ldr	r1, [sp, #20]
 800e098:	4620      	mov	r0, r4
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	440a      	add	r2, r1
 800e09e:	4619      	mov	r1, r3
 800e0a0:	f7ff fed6 	bl	800de50 <xTimerGenericCommand>
							configASSERT( xResult );
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	d199      	bne.n	800dfdc <prvTimerTask+0x94>
 800e0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ac:	f383 8811 	msr	BASEPRI, r3
 800e0b0:	f3bf 8f6f 	isb	sy
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	e7fe      	b.n	800e0b8 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0ba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0be:	f023 0301 	bic.w	r3, r3, #1
 800e0c2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800e0c6:	e789      	b.n	800dfdc <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0c8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e0cc:	f043 0301 	orr.w	r3, r3, #1
 800e0d0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e0d4:	9905      	ldr	r1, [sp, #20]
 800e0d6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e0d8:	b941      	cbnz	r1, 800e0ec <prvTimerTask+0x1a4>
 800e0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0de:	f383 8811 	msr	BASEPRI, r3
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	f3bf 8f4f 	dsb	sy
 800e0ea:	e7fe      	b.n	800e0ea <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	4401      	add	r1, r0
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f7ff fe29 	bl	800dd48 <prvInsertTimerInActiveList>
					break;
 800e0f6:	e771      	b.n	800dfdc <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e0f8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e0fc:	079a      	lsls	r2, r3, #30
 800e0fe:	d4de      	bmi.n	800e0be <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800e100:	4620      	mov	r0, r4
 800e102:	f7fe f959 	bl	800c3b8 <vPortFree>
 800e106:	e769      	b.n	800dfdc <prvTimerTask+0x94>
 800e108:	240252c4 	.word	0x240252c4
 800e10c:	240252bc 	.word	0x240252bc
 800e110:	240252c0 	.word	0x240252c0

0800e114 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800e114:	8880      	ldrh	r0, [r0, #4]
 800e116:	4770      	bx	lr

0800e118 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800e118:	b570      	push	{r4, r5, r6, lr}
 800e11a:	6803      	ldr	r3, [r0, #0]
 800e11c:	460c      	mov	r4, r1
 800e11e:	2100      	movs	r1, #0
 800e120:	4605      	mov	r5, r0
 800e122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e124:	4798      	blx	r3
 800e126:	4606      	mov	r6, r0
 800e128:	682b      	ldr	r3, [r5, #0]
 800e12a:	4628      	mov	r0, r5
 800e12c:	1ba4      	subs	r4, r4, r6
 800e12e:	6a1b      	ldr	r3, [r3, #32]
 800e130:	b2a4      	uxth	r4, r4
 800e132:	4798      	blx	r3
 800e134:	fbb4 f0f0 	udiv	r0, r4, r0
 800e138:	bd70      	pop	{r4, r5, r6, pc}

0800e13a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800e13a:	2300      	movs	r3, #0
 800e13c:	8083      	strh	r3, [r0, #4]
 800e13e:	4770      	bx	lr

0800e140 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800e140:	b510      	push	{r4, lr}
 800e142:	6803      	ldr	r3, [r0, #0]
 800e144:	4604      	mov	r4, r0
 800e146:	8881      	ldrh	r1, [r0, #4]
 800e148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e14a:	4798      	blx	r3
 800e14c:	88a3      	ldrh	r3, [r4, #4]
 800e14e:	3301      	adds	r3, #1
 800e150:	80a3      	strh	r3, [r4, #4]
 800e152:	bd10      	pop	{r4, pc}

0800e154 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800e154:	6803      	ldr	r3, [r0, #0]
 800e156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e158:	4718      	bx	r3

0800e15a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800e15a:	4770      	bx	lr

0800e15c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800e15c:	4a02      	ldr	r2, [pc, #8]	@ (800e168 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800e15e:	6002      	str	r2, [r0, #0]
 800e160:	2200      	movs	r2, #0
 800e162:	8082      	strh	r2, [r0, #4]
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	08027370 	.word	0x08027370

0800e16c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800e16c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e16e:	2000      	movs	r0, #0
 800e170:	b12b      	cbz	r3, 800e17e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e172:	b920      	cbnz	r0, 800e17e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e174:	1a5a      	subs	r2, r3, r1
 800e176:	699b      	ldr	r3, [r3, #24]
 800e178:	4250      	negs	r0, r2
 800e17a:	4150      	adcs	r0, r2
 800e17c:	e7f8      	b.n	800e170 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800e17e:	4770      	bx	lr

0800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800e180:	2300      	movs	r3, #0
 800e182:	6148      	str	r0, [r1, #20]
 800e184:	618b      	str	r3, [r1, #24]
 800e186:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e188:	b913      	cbnz	r3, 800e190 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800e18a:	6281      	str	r1, [r0, #40]	@ 0x28
 800e18c:	4770      	bx	lr
 800e18e:	4613      	mov	r3, r2
 800e190:	699a      	ldr	r2, [r3, #24]
 800e192:	2a00      	cmp	r2, #0
 800e194:	d1fb      	bne.n	800e18e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800e196:	6199      	str	r1, [r3, #24]
 800e198:	4770      	bx	lr

0800e19a <_ZN8touchgfx9Container9removeAllEv>:
 800e19a:	2200      	movs	r2, #0
 800e19c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e19e:	b123      	cbz	r3, 800e1aa <_ZN8touchgfx9Container9removeAllEv+0x10>
 800e1a0:	6999      	ldr	r1, [r3, #24]
 800e1a2:	6281      	str	r1, [r0, #40]	@ 0x28
 800e1a4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800e1a8:	e7f8      	b.n	800e19c <_ZN8touchgfx9Container9removeAllEv+0x2>
 800e1aa:	4770      	bx	lr

0800e1ac <_ZN8touchgfx9Container6unlinkEv>:
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	6283      	str	r3, [r0, #40]	@ 0x28
 800e1b0:	4770      	bx	lr

0800e1b2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	8002      	strh	r2, [r0, #0]
 800e1b6:	8042      	strh	r2, [r0, #2]
 800e1b8:	8082      	strh	r2, [r0, #4]
 800e1ba:	80c2      	strh	r2, [r0, #6]
 800e1bc:	4770      	bx	lr

0800e1be <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800e1be:	b570      	push	{r4, r5, r6, lr}
 800e1c0:	460d      	mov	r5, r1
 800e1c2:	4616      	mov	r6, r2
 800e1c4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e1c6:	b13c      	cbz	r4, 800e1d8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1d2:	4798      	blx	r3
 800e1d4:	69a4      	ldr	r4, [r4, #24]
 800e1d6:	e7f6      	b.n	800e1c6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800e1d8:	bd70      	pop	{r4, r5, r6, pc}

0800e1da <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800e1da:	b538      	push	{r3, r4, r5, lr}
 800e1dc:	460d      	mov	r5, r1
 800e1de:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e1e0:	b134      	cbz	r4, 800e1f0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800e1e2:	682b      	ldr	r3, [r5, #0]
 800e1e4:	4621      	mov	r1, r4
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	4798      	blx	r3
 800e1ec:	69a4      	ldr	r4, [r4, #24]
 800e1ee:	e7f7      	b.n	800e1e0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800e1f0:	bd38      	pop	{r3, r4, r5, pc}

0800e1f2 <_ZN8touchgfx9ContainerD1Ev>:
 800e1f2:	4770      	bx	lr

0800e1f4 <_ZN8touchgfx9ContainerD0Ev>:
 800e1f4:	b510      	push	{r4, lr}
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	212c      	movs	r1, #44	@ 0x2c
 800e1fa:	f014 fcf3 	bl	8022be4 <_ZdlPvj>
 800e1fe:	4620      	mov	r0, r4
 800e200:	bd10      	pop	{r4, pc}

0800e202 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800e202:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e204:	b19b      	cbz	r3, 800e22e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e206:	428b      	cmp	r3, r1
 800e208:	d109      	bne.n	800e21e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800e20a:	699a      	ldr	r2, [r3, #24]
 800e20c:	2100      	movs	r1, #0
 800e20e:	6159      	str	r1, [r3, #20]
 800e210:	6282      	str	r2, [r0, #40]	@ 0x28
 800e212:	b902      	cbnz	r2, 800e216 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800e214:	4770      	bx	lr
 800e216:	6199      	str	r1, [r3, #24]
 800e218:	4770      	bx	lr
 800e21a:	4613      	mov	r3, r2
 800e21c:	b13a      	cbz	r2, 800e22e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e21e:	699a      	ldr	r2, [r3, #24]
 800e220:	428a      	cmp	r2, r1
 800e222:	d1fa      	bne.n	800e21a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800e224:	698a      	ldr	r2, [r1, #24]
 800e226:	619a      	str	r2, [r3, #24]
 800e228:	2300      	movs	r3, #0
 800e22a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800e22e:	4770      	bx	lr

0800e230 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800e230:	b410      	push	{r4}
 800e232:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e234:	4604      	mov	r4, r0
 800e236:	b92b      	cbnz	r3, 800e244 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800e238:	6803      	ldr	r3, [r0, #0]
 800e23a:	4611      	mov	r1, r2
 800e23c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e242:	4718      	bx	r3
 800e244:	b941      	cbnz	r1, 800e258 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800e246:	6193      	str	r3, [r2, #24]
 800e248:	6282      	str	r2, [r0, #40]	@ 0x28
 800e24a:	6154      	str	r4, [r2, #20]
 800e24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	4603      	mov	r3, r0
 800e254:	2800      	cmp	r0, #0
 800e256:	d0f9      	beq.n	800e24c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800e258:	4299      	cmp	r1, r3
 800e25a:	6998      	ldr	r0, [r3, #24]
 800e25c:	d1f9      	bne.n	800e252 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800e25e:	6190      	str	r0, [r2, #24]
 800e260:	618a      	str	r2, [r1, #24]
 800e262:	e7f2      	b.n	800e24a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800e264 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800e264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e268:	461f      	mov	r7, r3
 800e26a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e26e:	460d      	mov	r5, r1
 800e270:	4616      	mov	r6, r2
 800e272:	b103      	cbz	r3, 800e276 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800e274:	6038      	str	r0, [r7, #0]
 800e276:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e278:	b314      	cbz	r4, 800e2c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800e27a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e27e:	b1eb      	cbz	r3, 800e2bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e280:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e284:	428d      	cmp	r5, r1
 800e286:	db19      	blt.n	800e2bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e288:	b289      	uxth	r1, r1
 800e28a:	8923      	ldrh	r3, [r4, #8]
 800e28c:	440b      	add	r3, r1
 800e28e:	b21b      	sxth	r3, r3
 800e290:	429d      	cmp	r5, r3
 800e292:	da13      	bge.n	800e2bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e294:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e298:	4296      	cmp	r6, r2
 800e29a:	db0f      	blt.n	800e2bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e29c:	b292      	uxth	r2, r2
 800e29e:	8963      	ldrh	r3, [r4, #10]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	b21b      	sxth	r3, r3
 800e2a4:	429e      	cmp	r6, r3
 800e2a6:	da09      	bge.n	800e2bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e2a8:	6823      	ldr	r3, [r4, #0]
 800e2aa:	1ab2      	subs	r2, r6, r2
 800e2ac:	1a69      	subs	r1, r5, r1
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800e2b4:	b212      	sxth	r2, r2
 800e2b6:	463b      	mov	r3, r7
 800e2b8:	b209      	sxth	r1, r1
 800e2ba:	47c0      	blx	r8
 800e2bc:	69a4      	ldr	r4, [r4, #24]
 800e2be:	e7db      	b.n	800e278 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800e2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e2c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	4c6d      	ldr	r4, [pc, #436]	@ (800e480 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800e2ca:	b0a1      	sub	sp, #132	@ 0x84
 800e2cc:	4606      	mov	r6, r0
 800e2ce:	6824      	ldr	r4, [r4, #0]
 800e2d0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800e2d2:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800e2d6:	2400      	movs	r4, #0
 800e2d8:	9303      	str	r3, [sp, #12]
 800e2da:	802c      	strh	r4, [r5, #0]
 800e2dc:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800e2de:	802c      	strh	r4, [r5, #0]
 800e2e0:	601c      	str	r4, [r3, #0]
 800e2e2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800e2e6:	f7ff ffbd 	bl	800e264 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800e2ea:	f1b9 0f03 	cmp.w	r9, #3
 800e2ee:	f340 80c1 	ble.w	800e474 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	a80c      	add	r0, sp, #48	@ 0x30
 800e2f6:	f007 f9cd 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e2fa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800e2fe:	9306      	str	r3, [sp, #24]
 800e300:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800e304:	9307      	str	r3, [sp, #28]
 800e306:	9b03      	ldr	r3, [sp, #12]
 800e308:	f8d3 a000 	ldr.w	sl, [r3]
 800e30c:	f1ba 0f00 	cmp.w	sl, #0
 800e310:	f000 80b3 	beq.w	800e47a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800e314:	4651      	mov	r1, sl
 800e316:	a810      	add	r0, sp, #64	@ 0x40
 800e318:	f007 f9bc 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e31c:	2002      	movs	r0, #2
 800e31e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800e322:	9b01      	ldr	r3, [sp, #4]
 800e324:	9a06      	ldr	r2, [sp, #24]
 800e326:	fb91 f1f0 	sdiv	r1, r1, r0
 800e32a:	189d      	adds	r5, r3, r2
 800e32c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800e330:	9a07      	ldr	r2, [sp, #28]
 800e332:	4419      	add	r1, r3
 800e334:	9b02      	ldr	r3, [sp, #8]
 800e336:	4413      	add	r3, r2
 800e338:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800e33c:	1a6d      	subs	r5, r5, r1
 800e33e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800e342:	fb92 f2f0 	sdiv	r2, r2, r0
 800e346:	440a      	add	r2, r1
 800e348:	1a9b      	subs	r3, r3, r2
 800e34a:	435b      	muls	r3, r3
 800e34c:	fb05 3505 	mla	r5, r5, r5, r3
 800e350:	4f4c      	ldr	r7, [pc, #304]	@ (800e484 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800e352:	ac10      	add	r4, sp, #64	@ 0x40
 800e354:	f1b9 0f0c 	cmp.w	r9, #12
 800e358:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e35a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e35c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e35e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e360:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e364:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800e368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e36c:	f04f 0303 	mov.w	r3, #3
 800e370:	bfd8      	it	le
 800e372:	f109 32ff 	addle.w	r2, r9, #4294967295
 800e376:	f04f 0400 	mov.w	r4, #0
 800e37a:	f8cd 9000 	str.w	r9, [sp]
 800e37e:	bfcc      	ite	gt
 800e380:	4698      	movgt	r8, r3
 800e382:	fb92 f8f3 	sdivle	r8, r2, r3
 800e386:	1c63      	adds	r3, r4, #1
 800e388:	aa10      	add	r2, sp, #64	@ 0x40
 800e38a:	f004 0401 	and.w	r4, r4, #1
 800e38e:	f04f 0b00 	mov.w	fp, #0
 800e392:	9308      	str	r3, [sp, #32]
 800e394:	9b00      	ldr	r3, [sp, #0]
 800e396:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800e39a:	fb93 f3f8 	sdiv	r3, r3, r8
 800e39e:	3404      	adds	r4, #4
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	9304      	str	r3, [sp, #16]
 800e3a4:	9a04      	ldr	r2, [sp, #16]
 800e3a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e3aa:	fb13 f302 	smulbb	r3, r3, r2
 800e3ae:	9a01      	ldr	r2, [sp, #4]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	1899      	adds	r1, r3, r2
 800e3b4:	9305      	str	r3, [sp, #20]
 800e3b6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e3ba:	b209      	sxth	r1, r1
 800e3bc:	4299      	cmp	r1, r3
 800e3be:	db4d      	blt.n	800e45c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e3c0:	8932      	ldrh	r2, [r6, #8]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	b21b      	sxth	r3, r3
 800e3c6:	4299      	cmp	r1, r3
 800e3c8:	da48      	bge.n	800e45c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e3ca:	9b04      	ldr	r3, [sp, #16]
 800e3cc:	6827      	ldr	r7, [r4, #0]
 800e3ce:	fb17 f703 	smulbb	r7, r7, r3
 800e3d2:	9b02      	ldr	r3, [sp, #8]
 800e3d4:	b2bf      	uxth	r7, r7
 800e3d6:	18fa      	adds	r2, r7, r3
 800e3d8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e3dc:	b212      	sxth	r2, r2
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	db3c      	blt.n	800e45c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e3e2:	8970      	ldrh	r0, [r6, #10]
 800e3e4:	4403      	add	r3, r0
 800e3e6:	b21b      	sxth	r3, r3
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	da37      	bge.n	800e45c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3f2:	ab0b      	add	r3, sp, #44	@ 0x2c
 800e3f4:	f7ff ff36 	bl	800e264 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800e3f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e3fa:	b37a      	cbz	r2, 800e45c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e3fc:	4552      	cmp	r2, sl
 800e3fe:	d02d      	beq.n	800e45c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e400:	4611      	mov	r1, r2
 800e402:	a80e      	add	r0, sp, #56	@ 0x38
 800e404:	9209      	str	r2, [sp, #36]	@ 0x24
 800e406:	f007 f945 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e40a:	f04f 0e02 	mov.w	lr, #2
 800e40e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800e412:	9a06      	ldr	r2, [sp, #24]
 800e414:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800e418:	9b01      	ldr	r3, [sp, #4]
 800e41a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800e41e:	4413      	add	r3, r2
 800e420:	9a07      	ldr	r2, [sp, #28]
 800e422:	fb91 f1fe 	sdiv	r1, r1, lr
 800e426:	fb9c fcfe 	sdiv	ip, ip, lr
 800e42a:	4401      	add	r1, r0
 800e42c:	1a58      	subs	r0, r3, r1
 800e42e:	9b02      	ldr	r3, [sp, #8]
 800e430:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800e434:	4413      	add	r3, r2
 800e436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e438:	448c      	add	ip, r1
 800e43a:	eba3 030c 	sub.w	r3, r3, ip
 800e43e:	435b      	muls	r3, r3
 800e440:	fb00 3300 	mla	r3, r0, r0, r3
 800e444:	42ab      	cmp	r3, r5
 800e446:	d208      	bcs.n	800e45a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800e448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e44a:	461d      	mov	r5, r3
 800e44c:	9803      	ldr	r0, [sp, #12]
 800e44e:	6001      	str	r1, [r0, #0]
 800e450:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800e452:	9805      	ldr	r0, [sp, #20]
 800e454:	8008      	strh	r0, [r1, #0]
 800e456:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800e458:	800f      	strh	r7, [r1, #0]
 800e45a:	4692      	mov	sl, r2
 800e45c:	f10b 0b01 	add.w	fp, fp, #1
 800e460:	3408      	adds	r4, #8
 800e462:	f1bb 0f04 	cmp.w	fp, #4
 800e466:	d19d      	bne.n	800e3a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800e468:	9b00      	ldr	r3, [sp, #0]
 800e46a:	9c08      	ldr	r4, [sp, #32]
 800e46c:	444b      	add	r3, r9
 800e46e:	4544      	cmp	r4, r8
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	d188      	bne.n	800e386 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800e474:	b021      	add	sp, #132	@ 0x84
 800e476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e47a:	f04f 35ff 	mov.w	r5, #4294967295
 800e47e:	e767      	b.n	800e350 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800e480:	240252fc 	.word	0x240252fc
 800e484:	08024408 	.word	0x08024408

0800e488 <_ZN8touchgfx4RectaNERKS0_>:
 800e488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e48c:	f9b1 7000 	ldrsh.w	r7, [r1]
 800e490:	888c      	ldrh	r4, [r1, #4]
 800e492:	f9b0 9000 	ldrsh.w	r9, [r0]
 800e496:	443c      	add	r4, r7
 800e498:	b2a4      	uxth	r4, r4
 800e49a:	fa0f f884 	sxth.w	r8, r4
 800e49e:	45c1      	cmp	r9, r8
 800e4a0:	da2f      	bge.n	800e502 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e4a2:	8882      	ldrh	r2, [r0, #4]
 800e4a4:	444a      	add	r2, r9
 800e4a6:	b292      	uxth	r2, r2
 800e4a8:	fa0f fe82 	sxth.w	lr, r2
 800e4ac:	4577      	cmp	r7, lr
 800e4ae:	da28      	bge.n	800e502 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e4b0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800e4b4:	88cb      	ldrh	r3, [r1, #6]
 800e4b6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800e4ba:	442b      	add	r3, r5
 800e4bc:	b21b      	sxth	r3, r3
 800e4be:	429e      	cmp	r6, r3
 800e4c0:	da1f      	bge.n	800e502 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e4c2:	88c3      	ldrh	r3, [r0, #6]
 800e4c4:	4433      	add	r3, r6
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	fa0f fc83 	sxth.w	ip, r3
 800e4cc:	4565      	cmp	r5, ip
 800e4ce:	da18      	bge.n	800e502 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e4d0:	454f      	cmp	r7, r9
 800e4d2:	bfb8      	it	lt
 800e4d4:	464f      	movlt	r7, r9
 800e4d6:	42b5      	cmp	r5, r6
 800e4d8:	bfb8      	it	lt
 800e4da:	4635      	movlt	r5, r6
 800e4dc:	45f0      	cmp	r8, lr
 800e4de:	bfd8      	it	le
 800e4e0:	4622      	movle	r2, r4
 800e4e2:	1bd2      	subs	r2, r2, r7
 800e4e4:	8082      	strh	r2, [r0, #4]
 800e4e6:	884a      	ldrh	r2, [r1, #2]
 800e4e8:	88c9      	ldrh	r1, [r1, #6]
 800e4ea:	8007      	strh	r7, [r0, #0]
 800e4ec:	440a      	add	r2, r1
 800e4ee:	8045      	strh	r5, [r0, #2]
 800e4f0:	b292      	uxth	r2, r2
 800e4f2:	b211      	sxth	r1, r2
 800e4f4:	458c      	cmp	ip, r1
 800e4f6:	bfa8      	it	ge
 800e4f8:	4613      	movge	r3, r2
 800e4fa:	1b5b      	subs	r3, r3, r5
 800e4fc:	80c3      	strh	r3, [r0, #6]
 800e4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e502:	2300      	movs	r3, #0
 800e504:	8003      	strh	r3, [r0, #0]
 800e506:	8043      	strh	r3, [r0, #2]
 800e508:	8083      	strh	r3, [r0, #4]
 800e50a:	80c3      	strh	r3, [r0, #6]
 800e50c:	e7f7      	b.n	800e4fe <_ZN8touchgfx4RectaNERKS0_+0x76>

0800e50e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800e50e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	dd06      	ble.n	800e524 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800e516:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800e51a:	2800      	cmp	r0, #0
 800e51c:	bfcc      	ite	gt
 800e51e:	2000      	movgt	r0, #0
 800e520:	2001      	movle	r0, #1
 800e522:	4770      	bx	lr
 800e524:	2001      	movs	r0, #1
 800e526:	4770      	bx	lr

0800e528 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	2300      	movs	r3, #0
 800e52e:	4604      	mov	r4, r0
 800e530:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800e532:	8003      	strh	r3, [r0, #0]
 800e534:	8043      	strh	r3, [r0, #2]
 800e536:	8083      	strh	r3, [r0, #4]
 800e538:	80c3      	strh	r3, [r0, #6]
 800e53a:	2d00      	cmp	r5, #0
 800e53c:	d040      	beq.n	800e5c0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800e53e:	1d28      	adds	r0, r5, #4
 800e540:	f7ff ffe5 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e544:	b988      	cbnz	r0, 800e56a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e546:	4620      	mov	r0, r4
 800e548:	f7ff ffe1 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e54c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e550:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e554:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800e558:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800e55c:	b138      	cbz	r0, 800e56e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800e55e:	8022      	strh	r2, [r4, #0]
 800e560:	8063      	strh	r3, [r4, #2]
 800e562:	f8a4 e004 	strh.w	lr, [r4, #4]
 800e566:	f8a4 c006 	strh.w	ip, [r4, #6]
 800e56a:	69ad      	ldr	r5, [r5, #24]
 800e56c:	e7e5      	b.n	800e53a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800e56e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e572:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e576:	4290      	cmp	r0, r2
 800e578:	4607      	mov	r7, r0
 800e57a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800e57e:	460e      	mov	r6, r1
 800e580:	bfa8      	it	ge
 800e582:	4617      	movge	r7, r2
 800e584:	4299      	cmp	r1, r3
 800e586:	4472      	add	r2, lr
 800e588:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800e58c:	bfa8      	it	ge
 800e58e:	461e      	movge	r6, r3
 800e590:	4440      	add	r0, r8
 800e592:	4471      	add	r1, lr
 800e594:	4463      	add	r3, ip
 800e596:	b200      	sxth	r0, r0
 800e598:	8027      	strh	r7, [r4, #0]
 800e59a:	b212      	sxth	r2, r2
 800e59c:	8066      	strh	r6, [r4, #2]
 800e59e:	b209      	sxth	r1, r1
 800e5a0:	b21b      	sxth	r3, r3
 800e5a2:	4290      	cmp	r0, r2
 800e5a4:	bfac      	ite	ge
 800e5a6:	ebc7 0200 	rsbge	r2, r7, r0
 800e5aa:	ebc7 0202 	rsblt	r2, r7, r2
 800e5ae:	4299      	cmp	r1, r3
 800e5b0:	bfac      	ite	ge
 800e5b2:	ebc6 0301 	rsbge	r3, r6, r1
 800e5b6:	ebc6 0303 	rsblt	r3, r6, r3
 800e5ba:	80a2      	strh	r2, [r4, #4]
 800e5bc:	80e3      	strh	r3, [r4, #6]
 800e5be:	e7d4      	b.n	800e56a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800e5c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e5ca:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800e5ce:	b383      	cbz	r3, 800e632 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e5d0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e5d2:	b374      	cbz	r4, 800e632 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e5d4:	f9b1 5000 	ldrsh.w	r5, [r1]
 800e5d8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800e5dc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800e5e0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800e5e4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e5e8:	b303      	cbz	r3, 800e62c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e5ea:	4668      	mov	r0, sp
 800e5ec:	1d21      	adds	r1, r4, #4
 800e5ee:	f8ad 5000 	strh.w	r5, [sp]
 800e5f2:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e5f6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800e5fa:	f8ad 8006 	strh.w	r8, [sp, #6]
 800e5fe:	f7ff ff43 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 800e602:	4668      	mov	r0, sp
 800e604:	f7ff ff83 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e608:	b980      	cbnz	r0, 800e62c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e60a:	f8bd 3000 	ldrh.w	r3, [sp]
 800e60e:	4669      	mov	r1, sp
 800e610:	88a2      	ldrh	r2, [r4, #4]
 800e612:	4620      	mov	r0, r4
 800e614:	1a9b      	subs	r3, r3, r2
 800e616:	88e2      	ldrh	r2, [r4, #6]
 800e618:	f8ad 3000 	strh.w	r3, [sp]
 800e61c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e620:	1a9b      	subs	r3, r3, r2
 800e622:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	4798      	blx	r3
 800e62c:	69a4      	ldr	r4, [r4, #24]
 800e62e:	2c00      	cmp	r4, #0
 800e630:	d1d8      	bne.n	800e5e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800e632:	b002      	add	sp, #8
 800e634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e638 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800e638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e63a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800e63e:	460d      	mov	r5, r1
 800e640:	4616      	mov	r6, r2
 800e642:	b323      	cbz	r3, 800e68e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e644:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e646:	b314      	cbz	r4, 800e68e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e648:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e64c:	b1eb      	cbz	r3, 800e68a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e64e:	6828      	ldr	r0, [r5, #0]
 800e650:	466b      	mov	r3, sp
 800e652:	6869      	ldr	r1, [r5, #4]
 800e654:	c303      	stmia	r3!, {r0, r1}
 800e656:	4668      	mov	r0, sp
 800e658:	1d21      	adds	r1, r4, #4
 800e65a:	f7ff ff15 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 800e65e:	4668      	mov	r0, sp
 800e660:	f7ff ff55 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e664:	b988      	cbnz	r0, 800e68a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e666:	f8bd 3000 	ldrh.w	r3, [sp]
 800e66a:	4669      	mov	r1, sp
 800e66c:	88a2      	ldrh	r2, [r4, #4]
 800e66e:	4620      	mov	r0, r4
 800e670:	1a9b      	subs	r3, r3, r2
 800e672:	88e2      	ldrh	r2, [r4, #6]
 800e674:	f8ad 3000 	strh.w	r3, [sp]
 800e678:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e67c:	1a9b      	subs	r3, r3, r2
 800e67e:	4632      	mov	r2, r6
 800e680:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e684:	6823      	ldr	r3, [r4, #0]
 800e686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e688:	4798      	blx	r3
 800e68a:	69a4      	ldr	r4, [r4, #24]
 800e68c:	e7db      	b.n	800e646 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800e68e:	b002      	add	sp, #8
 800e690:	bd70      	pop	{r4, r5, r6, pc}

0800e692 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 800e692:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 800e696:	4770      	bx	lr

0800e698 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 800e698:	f9b0 00e6 	ldrsh.w	r0, [r0, #230]	@ 0xe6
 800e69c:	4770      	bx	lr

0800e69e <_ZNK8touchgfx6Slider11getMinValueEv>:
 800e69e:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 800e6a2:	4770      	bx	lr

0800e6a4 <_ZNK8touchgfx6Slider11getMaxValueEv>:
 800e6a4:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	@ 0x32
 800e6a8:	4770      	bx	lr

0800e6aa <_ZN8touchgfx6Slider8setValueEs>:
 800e6aa:	b570      	push	{r4, r5, r6, lr}
 800e6ac:	6803      	ldr	r3, [r0, #0]
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	@ 0xac
 800e6b4:	4798      	blx	r3
 800e6b6:	4601      	mov	r1, r0
 800e6b8:	462b      	mov	r3, r5
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6c0:	4718      	bx	r3

0800e6c2 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 800e6c2:	b570      	push	{r4, r5, r6, lr}
 800e6c4:	6803      	ldr	r3, [r0, #0]
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800e6cc:	f8d3 60ac 	ldr.w	r6, [r3, #172]	@ 0xac
 800e6d0:	b95a      	cbnz	r2, 800e6ea <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x28>
 800e6d2:	894d      	ldrh	r5, [r1, #10]
 800e6d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e6d8:	4620      	mov	r0, r4
 800e6da:	4798      	blx	r3
 800e6dc:	1a29      	subs	r1, r5, r0
 800e6de:	4633      	mov	r3, r6
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	b209      	sxth	r1, r1
 800e6e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6e8:	4718      	bx	r3
 800e6ea:	898d      	ldrh	r5, [r1, #12]
 800e6ec:	e7f2      	b.n	800e6d4 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x12>

0800e6ee <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 800e6ee:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800e6f2:	2302      	movs	r3, #2
 800e6f4:	b922      	cbnz	r2, 800e700 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x12>
 800e6f6:	f9b0 0094 	ldrsh.w	r0, [r0, #148]	@ 0x94
 800e6fa:	fb90 f0f3 	sdiv	r0, r0, r3
 800e6fe:	4770      	bx	lr
 800e700:	f9b0 0096 	ldrsh.w	r0, [r0, #150]	@ 0x96
 800e704:	e7f9      	b.n	800e6fa <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0800e706 <_ZN8touchgfx6Slider13setValueRangeEsss>:
 800e706:	8642      	strh	r2, [r0, #50]	@ 0x32
 800e708:	6802      	ldr	r2, [r0, #0]
 800e70a:	8601      	strh	r1, [r0, #48]	@ 0x30
 800e70c:	4619      	mov	r1, r3
 800e70e:	b410      	push	{r4}
 800e710:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e714:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 800e718:	4710      	bx	r2

0800e71a <_ZN8touchgfx6Slider13setValueRangeEss>:
 800e71a:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 800e71e:	428b      	cmp	r3, r1
 800e720:	b410      	push	{r4}
 800e722:	db09      	blt.n	800e738 <_ZN8touchgfx6Slider13setValueRangeEss+0x1e>
 800e724:	4293      	cmp	r3, r2
 800e726:	bfa8      	it	ge
 800e728:	4613      	movge	r3, r2
 800e72a:	6804      	ldr	r4, [r0, #0]
 800e72c:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
 800e730:	46a4      	mov	ip, r4
 800e732:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e736:	4760      	bx	ip
 800e738:	460b      	mov	r3, r1
 800e73a:	e7f6      	b.n	800e72a <_ZN8touchgfx6Slider13setValueRangeEss+0x10>

0800e73c <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 800e73c:	f9b0 20e6 	ldrsh.w	r2, [r0, #230]	@ 0xe6
 800e740:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 800e744:	1a10      	subs	r0, r2, r0
 800e746:	4770      	bx	lr

0800e748 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 800e748:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 800e74c:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 800e750:	1a10      	subs	r0, r2, r0
 800e752:	4770      	bx	lr

0800e754 <_ZN8touchgfx6SliderD1Ev>:
 800e754:	4770      	bx	lr

0800e756 <_ZN8touchgfx6SliderD0Ev>:
 800e756:	b510      	push	{r4, lr}
 800e758:	4604      	mov	r4, r0
 800e75a:	21f4      	movs	r1, #244	@ 0xf4
 800e75c:	f014 fa42 	bl	8022be4 <_ZdlPvj>
 800e760:	4620      	mov	r0, r4
 800e762:	bd10      	pop	{r4, pc}

0800e764 <_ZNK8touchgfx6Slider15valueToPositionEi>:
 800e764:	b570      	push	{r4, r5, r6, lr}
 800e766:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	@ 0x32
 800e76a:	4604      	mov	r4, r0
 800e76c:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 800e770:	428d      	cmp	r5, r1
 800e772:	bfa8      	it	ge
 800e774:	460d      	movge	r5, r1
 800e776:	429d      	cmp	r5, r3
 800e778:	bfac      	ite	ge
 800e77a:	ebc3 0505 	rsbge	r5, r3, r5
 800e77e:	ebc3 0503 	rsblt	r5, r3, r3
 800e782:	6803      	ldr	r3, [r0, #0]
 800e784:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e788:	4798      	blx	r3
 800e78a:	6823      	ldr	r3, [r4, #0]
 800e78c:	4606      	mov	r6, r0
 800e78e:	4620      	mov	r0, r4
 800e790:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e794:	4798      	blx	r3
 800e796:	4631      	mov	r1, r6
 800e798:	4602      	mov	r2, r0
 800e79a:	4628      	mov	r0, r5
 800e79c:	f007 fc53 	bl	8016046 <_ZN8touchgfx6muldivElll>
 800e7a0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	bf0b      	itete	eq
 800e7a8:	f8b4 30e6 	ldrheq.w	r3, [r4, #230]	@ 0xe6
 800e7ac:	f8b4 30e4 	ldrhne.w	r3, [r4, #228]	@ 0xe4
 800e7b0:	1a18      	subeq	r0, r3, r0
 800e7b2:	18c0      	addne	r0, r0, r3
 800e7b4:	b200      	sxth	r0, r0
 800e7b6:	bd70      	pop	{r4, r5, r6, pc}

0800e7b8 <_ZNK8touchgfx6Slider15positionToValueEs>:
 800e7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ba:	f9b0 30e6 	ldrsh.w	r3, [r0, #230]	@ 0xe6
 800e7be:	4605      	mov	r5, r0
 800e7c0:	f9b0 40e4 	ldrsh.w	r4, [r0, #228]	@ 0xe4
 800e7c4:	4299      	cmp	r1, r3
 800e7c6:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800e7ca:	f9b0 6030 	ldrsh.w	r6, [r0, #48]	@ 0x30
 800e7ce:	bfa8      	it	ge
 800e7d0:	4619      	movge	r1, r3
 800e7d2:	42a1      	cmp	r1, r4
 800e7d4:	bfb8      	it	lt
 800e7d6:	4621      	movlt	r1, r4
 800e7d8:	2a01      	cmp	r2, #1
 800e7da:	b289      	uxth	r1, r1
 800e7dc:	bf08      	it	eq
 800e7de:	1a5c      	subeq	r4, r3, r1
 800e7e0:	6803      	ldr	r3, [r0, #0]
 800e7e2:	bf18      	it	ne
 800e7e4:	1b0c      	subne	r4, r1, r4
 800e7e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e7ea:	4798      	blx	r3
 800e7ec:	682b      	ldr	r3, [r5, #0]
 800e7ee:	4607      	mov	r7, r0
 800e7f0:	b224      	sxth	r4, r4
 800e7f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	4798      	blx	r3
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	4620      	mov	r0, r4
 800e800:	f007 fc21 	bl	8016046 <_ZN8touchgfx6muldivElll>
 800e804:	4430      	add	r0, r6
 800e806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e808 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 800e808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e80c:	790b      	ldrb	r3, [r1, #4]
 800e80e:	4604      	mov	r4, r0
 800e810:	460d      	mov	r5, r1
 800e812:	b32b      	cbz	r3, 800e860 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
 800e814:	2b01      	cmp	r3, #1
 800e816:	d137      	bne.n	800e888 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 800e818:	6823      	ldr	r3, [r4, #0]
 800e81a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800e81e:	f8d3 70ac 	ldr.w	r7, [r3, #172]	@ 0xac
 800e822:	2a00      	cmp	r2, #0
 800e824:	d12e      	bne.n	800e884 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 800e826:	88ee      	ldrh	r6, [r5, #6]
 800e828:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e82c:	4620      	mov	r0, r4
 800e82e:	4798      	blx	r3
 800e830:	1a31      	subs	r1, r6, r0
 800e832:	4620      	mov	r0, r4
 800e834:	b209      	sxth	r1, r1
 800e836:	47b8      	blx	r7
 800e838:	792b      	ldrb	r3, [r5, #4]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d124      	bne.n	800e888 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 800e83e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 800e842:	b308      	cbz	r0, 800e888 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 800e844:	6803      	ldr	r3, [r0, #0]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	4798      	blx	r3
 800e84a:	b1e8      	cbz	r0, 800e888 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 800e84c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 800e850:	4621      	mov	r1, r4
 800e852:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 800e856:	6803      	ldr	r3, [r0, #0]
 800e858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	4718      	bx	r3
 800e860:	f8d0 00e8 	ldr.w	r0, [r0, #232]	@ 0xe8
 800e864:	2800      	cmp	r0, #0
 800e866:	d0d7      	beq.n	800e818 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 800e868:	6803      	ldr	r3, [r0, #0]
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	4798      	blx	r3
 800e86e:	2800      	cmp	r0, #0
 800e870:	d0d2      	beq.n	800e818 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 800e872:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
 800e876:	4621      	mov	r1, r4
 800e878:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 800e87c:	6803      	ldr	r3, [r0, #0]
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	4798      	blx	r3
 800e882:	e7c9      	b.n	800e818 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 800e884:	892e      	ldrh	r6, [r5, #8]
 800e886:	e7cf      	b.n	800e828 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x20>
 800e888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e88c <_ZN8touchgfx8DrawableC1Ev>:
 800e88c:	4a0a      	ldr	r2, [pc, #40]	@ (800e8b8 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800e88e:	6002      	str	r2, [r0, #0]
 800e890:	2200      	movs	r2, #0
 800e892:	8082      	strh	r2, [r0, #4]
 800e894:	80c2      	strh	r2, [r0, #6]
 800e896:	8102      	strh	r2, [r0, #8]
 800e898:	8142      	strh	r2, [r0, #10]
 800e89a:	8182      	strh	r2, [r0, #12]
 800e89c:	81c2      	strh	r2, [r0, #14]
 800e89e:	8202      	strh	r2, [r0, #16]
 800e8a0:	8242      	strh	r2, [r0, #18]
 800e8a2:	61c2      	str	r2, [r0, #28]
 800e8a4:	8402      	strh	r2, [r0, #32]
 800e8a6:	8442      	strh	r2, [r0, #34]	@ 0x22
 800e8a8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800e8ac:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 800e8b6:	4770      	bx	lr
 800e8b8:	08027874 	.word	0x08027874

0800e8bc <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	6803      	ldr	r3, [r0, #0]
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	4615      	mov	r5, r2
 800e8c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8c6:	4798      	blx	r3
 800e8c8:	6823      	ldr	r3, [r4, #0]
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8d4:	4718      	bx	r3

0800e8d6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 800e8d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8da:	f9b0 80e4 	ldrsh.w	r8, [r0, #228]	@ 0xe4
 800e8de:	4604      	mov	r4, r0
 800e8e0:	308c      	adds	r0, #140	@ 0x8c
 800e8e2:	4588      	cmp	r8, r1
 800e8e4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e8e8:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 800e8ec:	bfb8      	it	lt
 800e8ee:	4688      	movlt	r8, r1
 800e8f0:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	@ 0x5a
 800e8f4:	4588      	cmp	r8, r1
 800e8f6:	bfa8      	it	ge
 800e8f8:	4688      	movge	r8, r1
 800e8fa:	fa1f f788 	uxth.w	r7, r8
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d130      	bne.n	800e964 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8e>
 800e902:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	@ 0x92
 800e906:	4641      	mov	r1, r8
 800e908:	f7f4 fc9d 	bl	8003246 <_ZN8touchgfx8Drawable6moveToEss>
 800e90c:	4630      	mov	r0, r6
 800e90e:	f006 fe26 	bl	801555e <_ZNK8touchgfx8Drawable10invalidateEv>
 800e912:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	4620      	mov	r0, r4
 800e91a:	1abf      	subs	r7, r7, r2
 800e91c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e920:	b2bf      	uxth	r7, r7
 800e922:	4798      	blx	r3
 800e924:	4407      	add	r7, r0
 800e926:	f8a4 70c0 	strh.w	r7, [r4, #192]	@ 0xc0
 800e92a:	4630      	mov	r0, r6
 800e92c:	f006 fe17 	bl	801555e <_ZNK8touchgfx8Drawable10invalidateEv>
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	4641      	mov	r1, r8
 800e934:	4620      	mov	r0, r4
 800e936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e93a:	4798      	blx	r3
 800e93c:	85e0      	strh	r0, [r4, #46]	@ 0x2e
 800e93e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 800e942:	2800      	cmp	r0, #0
 800e944:	d03c      	beq.n	800e9c0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 800e946:	6803      	ldr	r3, [r0, #0]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	4798      	blx	r3
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d037      	beq.n	800e9c0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 800e950:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 800e954:	4621      	mov	r1, r4
 800e956:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 800e95a:	6803      	ldr	r3, [r0, #0]
 800e95c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e960:	689b      	ldr	r3, [r3, #8]
 800e962:	4718      	bx	r3
 800e964:	4642      	mov	r2, r8
 800e966:	f9b4 1090 	ldrsh.w	r1, [r4, #144]	@ 0x90
 800e96a:	f7f4 fc6c 	bl	8003246 <_ZN8touchgfx8Drawable6moveToEss>
 800e96e:	4630      	mov	r0, r6
 800e970:	f006 fdf5 	bl	801555e <_ZNK8touchgfx8Drawable10invalidateEv>
 800e974:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
 800e976:	8fe5      	ldrh	r5, [r4, #62]	@ 0x3e
 800e978:	6823      	ldr	r3, [r4, #0]
 800e97a:	4405      	add	r5, r0
 800e97c:	4620      	mov	r0, r4
 800e97e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e982:	b2ad      	uxth	r5, r5
 800e984:	4798      	blx	r3
 800e986:	6823      	ldr	r3, [r4, #0]
 800e988:	1bed      	subs	r5, r5, r7
 800e98a:	f9b4 a0bc 	ldrsh.w	sl, [r4, #188]	@ 0xbc
 800e98e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e992:	1a2d      	subs	r5, r5, r0
 800e994:	4620      	mov	r0, r4
 800e996:	4798      	blx	r3
 800e998:	4438      	add	r0, r7
 800e99a:	b2ad      	uxth	r5, r5
 800e99c:	f9b4 90c0 	ldrsh.w	r9, [r4, #192]	@ 0xc0
 800e9a0:	b202      	sxth	r2, r0
 800e9a2:	4651      	mov	r1, sl
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	f7f5 fd89 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	b22a      	sxth	r2, r5
 800e9ae:	4649      	mov	r1, r9
 800e9b0:	f7ff ff84 	bl	800e8bc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e9b4:	f8b4 006a 	ldrh.w	r0, [r4, #106]	@ 0x6a
 800e9b8:	1a2d      	subs	r5, r5, r0
 800e9ba:	f8a4 5066 	strh.w	r5, [r4, #102]	@ 0x66
 800e9be:	e7b4      	b.n	800e92a <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 800e9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e9c4 <_ZN8touchgfx8Drawable11setPositionERKS0_>:
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 800e9cc:	f9b1 600a 	ldrsh.w	r6, [r1, #10]
 800e9d0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800e9d4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800e9d8:	f7f5 fd70 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 800e9dc:	4632      	mov	r2, r6
 800e9de:	4629      	mov	r1, r5
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f7ff ff6b 	bl	800e8bc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}

0800e9e8 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>:
 800e9e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	f04f 0a00 	mov.w	sl, #0
 800e9f0:	f100 0b34 	add.w	fp, r0, #52	@ 0x34
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	461d      	mov	r5, r3
 800e9f8:	f880 a02c 	strb.w	sl, [r0, #44]	@ 0x2c
 800e9fc:	4658      	mov	r0, fp
 800e9fe:	4690      	mov	r8, r2
 800ea00:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 800ea04:	4689      	mov	r9, r1
 800ea06:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 800ea0a:	f7f5 fd57 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 800ea0e:	4659      	mov	r1, fp
 800ea10:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800ea14:	f7ff ffd6 	bl	800e9c4 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 800ea18:	4652      	mov	r2, sl
 800ea1a:	4651      	mov	r1, sl
 800ea1c:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800ea20:	f7f5 fd4c 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 800ea24:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800ea26:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 800ea28:	4620      	mov	r0, r4
 800ea2a:	4490      	add	r8, r2
 800ea2c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	@ 0x96
 800ea30:	f8a4 5092 	strh.w	r5, [r4, #146]	@ 0x92
 800ea34:	4489      	add	r9, r1
 800ea36:	4415      	add	r5, r2
 800ea38:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 800ea3c:	fa0f f288 	sxth.w	r2, r8
 800ea40:	f8a4 70e4 	strh.w	r7, [r4, #228]	@ 0xe4
 800ea44:	1873      	adds	r3, r6, r1
 800ea46:	b22d      	sxth	r5, r5
 800ea48:	fa0f f989 	sxth.w	r9, r9
 800ea4c:	f8a4 60e6 	strh.w	r6, [r4, #230]	@ 0xe6
 800ea50:	b219      	sxth	r1, r3
 800ea52:	42aa      	cmp	r2, r5
 800ea54:	bfb8      	it	lt
 800ea56:	462a      	movlt	r2, r5
 800ea58:	4549      	cmp	r1, r9
 800ea5a:	bfb8      	it	lt
 800ea5c:	4649      	movlt	r1, r9
 800ea5e:	f7ff ff2d 	bl	800e8bc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ea6e:	b001      	add	sp, #4
 800ea70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea74:	4718      	bx	r3

0800ea76 <_ZN8touchgfx6Slider19setupVerticalSliderEsssss>:
 800ea76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea7a:	461d      	mov	r5, r3
 800ea7c:	f100 0a34 	add.w	sl, r0, #52	@ 0x34
 800ea80:	2301      	movs	r3, #1
 800ea82:	4604      	mov	r4, r0
 800ea84:	4617      	mov	r7, r2
 800ea86:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 800ea8a:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 800ea8e:	4650      	mov	r0, sl
 800ea90:	460e      	mov	r6, r1
 800ea92:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 800ea96:	f7f5 fd11 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 800ea9a:	4651      	mov	r1, sl
 800ea9c:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800eaa0:	f7ff ff90 	bl	800e9c4 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 800eaa4:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 800eaa6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f8b4 3096 	ldrh.w	r3, [r4, #150]	@ 0x96
 800eaae:	440e      	add	r6, r1
 800eab0:	443a      	add	r2, r7
 800eab2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 800eab6:	4443      	add	r3, r8
 800eab8:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 800eabc:	b212      	sxth	r2, r2
 800eabe:	440d      	add	r5, r1
 800eac0:	b21b      	sxth	r3, r3
 800eac2:	f8a4 90e4 	strh.w	r9, [r4, #228]	@ 0xe4
 800eac6:	b231      	sxth	r1, r6
 800eac8:	f8a4 80e6 	strh.w	r8, [r4, #230]	@ 0xe6
 800eacc:	429a      	cmp	r2, r3
 800eace:	b22d      	sxth	r5, r5
 800ead0:	bfb8      	it	lt
 800ead2:	461a      	movlt	r2, r3
 800ead4:	42a9      	cmp	r1, r5
 800ead6:	bfb8      	it	lt
 800ead8:	4629      	movlt	r1, r5
 800eada:	f7ff feef 	bl	800e8bc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800eade:	6823      	ldr	r3, [r4, #0]
 800eae0:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 800eae4:	4620      	mov	r0, r4
 800eae6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800eaea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaee:	4718      	bx	r3

0800eaf0 <_ZN8touchgfx6SliderC1Ev>:
 800eaf0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	f7ff fec9 	bl	800e88c <_ZN8touchgfx8DrawableC1Ev>
 800eafa:	4b28      	ldr	r3, [pc, #160]	@ (800eb9c <_ZN8touchgfx6SliderC1Ev+0xac>)
 800eafc:	2500      	movs	r5, #0
 800eafe:	ae02      	add	r6, sp, #8
 800eb00:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	f104 0934 	add.w	r9, r4, #52	@ 0x34
 800eb0a:	2364      	movs	r3, #100	@ 0x64
 800eb0c:	f104 0a60 	add.w	sl, r4, #96	@ 0x60
 800eb10:	f826 7d04 	strh.w	r7, [r6, #-4]!
 800eb14:	4648      	mov	r0, r9
 800eb16:	8663      	strh	r3, [r4, #50]	@ 0x32
 800eb18:	4631      	mov	r1, r6
 800eb1a:	62a5      	str	r5, [r4, #40]	@ 0x28
 800eb1c:	f104 088c 	add.w	r8, r4, #140	@ 0x8c
 800eb20:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
 800eb24:	85e5      	strh	r5, [r4, #46]	@ 0x2e
 800eb26:	8625      	strh	r5, [r4, #48]	@ 0x30
 800eb28:	f7f5 fd40 	bl	80045ac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800eb2c:	4631      	mov	r1, r6
 800eb2e:	4650      	mov	r0, sl
 800eb30:	f8ad 7004 	strh.w	r7, [sp, #4]
 800eb34:	f7f5 fd3a 	bl	80045ac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800eb38:	4631      	mov	r1, r6
 800eb3a:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 800eb3e:	4640      	mov	r0, r8
 800eb40:	f8ad 7004 	strh.w	r7, [sp, #4]
 800eb44:	f7f5 fd32 	bl	80045ac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800eb48:	4630      	mov	r0, r6
 800eb4a:	f7ff fe9f 	bl	800e88c <_ZN8touchgfx8DrawableC1Ev>
 800eb4e:	4b14      	ldr	r3, [pc, #80]	@ (800eba0 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 800eb50:	4651      	mov	r1, sl
 800eb52:	4630      	mov	r0, r6
 800eb54:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 800eb58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800eb5c:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 800eb60:	e9c4 3539 	strd	r3, r5, [r4, #228]	@ 0xe4
 800eb64:	2301      	movs	r3, #1
 800eb66:	e9c4 553b 	strd	r5, r5, [r4, #236]	@ 0xec
 800eb6a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800eb6e:	f7ff fb07 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800eb72:	4649      	mov	r1, r9
 800eb74:	4620      	mov	r0, r4
 800eb76:	f7ff fb03 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800eb7a:	4631      	mov	r1, r6
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	f7ff faff 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800eb82:	4641      	mov	r1, r8
 800eb84:	4620      	mov	r0, r4
 800eb86:	f7ff fafb 	bl	800e180 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f9b4 10e4 	ldrsh.w	r1, [r4, #228]	@ 0xe4
 800eb90:	f7ff fea1 	bl	800e8d6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>
 800eb94:	4620      	mov	r0, r4
 800eb96:	b002      	add	sp, #8
 800eb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9c:	08027434 	.word	0x08027434
 800eba0:	080273a4 	.word	0x080273a4

0800eba4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 800eba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eba8:	4604      	mov	r4, r0
 800ebaa:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 800ebae:	4689      	mov	r9, r1
 800ebb0:	461f      	mov	r7, r3
 800ebb2:	f104 058c 	add.w	r5, r4, #140	@ 0x8c
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	4690      	mov	r8, r2
 800ebba:	f006 fcd0 	bl	801555e <_ZNK8touchgfx8Drawable10invalidateEv>
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f006 fccd 	bl	801555e <_ZNK8touchgfx8Drawable10invalidateEv>
 800ebc4:	4649      	mov	r1, r9
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f002 fefe 	bl	80119c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800ebcc:	4641      	mov	r1, r8
 800ebce:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800ebd2:	f002 fef9 	bl	80119c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800ebd6:	4639      	mov	r1, r7
 800ebd8:	4628      	mov	r0, r5
 800ebda:	f002 fef5 	bl	80119c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800ebde:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	@ 0x6a
 800ebe2:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	@ 0x68
 800ebe6:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800ebea:	f7ff fe67 	bl	800e8bc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800ebee:	6823      	ldr	r3, [r4, #0]
 800ebf0:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ebfa:	4798      	blx	r3
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f006 fcae 	bl	801555e <_ZNK8touchgfx8Drawable10invalidateEv>
 800ec02:	4628      	mov	r0, r5
 800ec04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec08:	f006 bca9 	b.w	801555e <_ZNK8touchgfx8Drawable10invalidateEv>

0800ec0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800ec0c:	6803      	ldr	r3, [r0, #0]
 800ec0e:	b513      	push	{r0, r1, r4, lr}
 800ec10:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800ec14:	2300      	movs	r3, #0
 800ec16:	e9cd 3300 	strd	r3, r3, [sp]
 800ec1a:	466b      	mov	r3, sp
 800ec1c:	47a0      	blx	r4
 800ec1e:	b002      	add	sp, #8
 800ec20:	bd10      	pop	{r4, pc}

0800ec22 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800ec22:	2301      	movs	r3, #1
 800ec24:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800ec28:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800ec2c:	4770      	bx	lr

0800ec2e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800ec2e:	2301      	movs	r3, #1
 800ec30:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800ec34:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800ec38:	4770      	bx	lr

0800ec3a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800ec3a:	6843      	ldr	r3, [r0, #4]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	725a      	strb	r2, [r3, #9]
 800ec40:	6840      	ldr	r0, [r0, #4]
 800ec42:	6803      	ldr	r3, [r0, #0]
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	4718      	bx	r3

0800ec48 <_ZN8touchgfx3HAL8flushDMAEv>:
 800ec48:	6840      	ldr	r0, [r0, #4]
 800ec4a:	6803      	ldr	r3, [r0, #0]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	4718      	bx	r3

0800ec50 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800ec50:	b530      	push	{r4, r5, lr}
 800ec52:	b08b      	sub	sp, #44	@ 0x2c
 800ec54:	6804      	ldr	r4, [r0, #0]
 800ec56:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800ec5a:	9509      	str	r5, [sp, #36]	@ 0x24
 800ec5c:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800ec60:	9508      	str	r5, [sp, #32]
 800ec62:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800ec66:	9507      	str	r5, [sp, #28]
 800ec68:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800ec6c:	9506      	str	r5, [sp, #24]
 800ec6e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800ec72:	9505      	str	r5, [sp, #20]
 800ec74:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800ec78:	9504      	str	r5, [sp, #16]
 800ec7a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800ec7e:	9503      	str	r5, [sp, #12]
 800ec80:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800ec84:	9502      	str	r5, [sp, #8]
 800ec86:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800ec8a:	e9cd 3500 	strd	r3, r5, [sp]
 800ec8e:	4613      	mov	r3, r2
 800ec90:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800ec92:	2200      	movs	r2, #0
 800ec94:	47a0      	blx	r4
 800ec96:	b00b      	add	sp, #44	@ 0x2c
 800ec98:	bd30      	pop	{r4, r5, pc}
	...

0800ec9c <_ZN8touchgfx3HAL10beginFrameEv>:
 800ec9c:	4b04      	ldr	r3, [pc, #16]	@ (800ecb0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	b123      	cbz	r3, 800ecac <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800eca2:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800eca6:	f080 0001 	eor.w	r0, r0, #1
 800ecaa:	4770      	bx	lr
 800ecac:	2001      	movs	r0, #1
 800ecae:	4770      	bx	lr
 800ecb0:	240252fa 	.word	0x240252fa

0800ecb4 <_ZN8touchgfx3HAL8endFrameEv>:
 800ecb4:	b510      	push	{r4, lr}
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	6840      	ldr	r0, [r0, #4]
 800ecba:	6803      	ldr	r3, [r0, #0]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	4798      	blx	r3
 800ecc0:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800ecc4:	b113      	cbz	r3, 800eccc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800eccc:	bd10      	pop	{r4, pc}

0800ecce <_ZN8touchgfx3HAL10initializeEv>:
 800ecce:	b510      	push	{r4, lr}
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	f7f3 fe5f 	bl	8002994 <_ZN8touchgfx10OSWrappers10initializeEv>
 800ecd6:	f7f2 fea5 	bl	8001a24 <_ZN8touchgfx4GPIO4initEv>
 800ecda:	6860      	ldr	r0, [r4, #4]
 800ecdc:	6803      	ldr	r3, [r0, #0]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	4798      	blx	r3
 800ece2:	68e0      	ldr	r0, [r4, #12]
 800ece4:	6803      	ldr	r3, [r0, #0]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	4798      	blx	r3
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	4620      	mov	r0, r4
 800ecee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ecf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecf4:	4718      	bx	r3
	...

0800ecf8 <_ZN8touchgfx3HAL4tickEv>:
 800ecf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ecfa:	6803      	ldr	r3, [r0, #0]
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	4d62      	ldr	r5, [pc, #392]	@ (800ee88 <_ZN8touchgfx3HAL4tickEv+0x190>)
 800ed00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ed04:	4798      	blx	r3
 800ed06:	2800      	cmp	r0, #0
 800ed08:	f000 809e 	beq.w	800ee48 <_ZN8touchgfx3HAL4tickEv+0x150>
 800ed0c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d002      	beq.n	800ed1a <_ZN8touchgfx3HAL4tickEv+0x22>
 800ed14:	2001      	movs	r0, #1
 800ed16:	f7f2 fdeb 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ed1a:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800ed1e:	2600      	movs	r6, #0
 800ed20:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800ed24:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800ed28:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800ed2c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800ed30:	b133      	cbz	r3, 800ed40 <_ZN8touchgfx3HAL4tickEv+0x48>
 800ed32:	6823      	ldr	r3, [r4, #0]
 800ed34:	4620      	mov	r0, r4
 800ed36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ed3a:	4798      	blx	r3
 800ed3c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800ed40:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800ed44:	2601      	movs	r6, #1
 800ed46:	6862      	ldr	r2, [r4, #4]
 800ed48:	f083 0301 	eor.w	r3, r3, #1
 800ed4c:	702e      	strb	r6, [r5, #0]
 800ed4e:	7253      	strb	r3, [r2, #9]
 800ed50:	f005 fa24 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 800ed54:	6803      	ldr	r3, [r0, #0]
 800ed56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed58:	4798      	blx	r3
 800ed5a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800ed5e:	b90b      	cbnz	r3, 800ed64 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800ed60:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800ed64:	f005 fa1a 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 800ed68:	6803      	ldr	r3, [r0, #0]
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	4798      	blx	r3
 800ed6e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800ed70:	6803      	ldr	r3, [r0, #0]
 800ed72:	691b      	ldr	r3, [r3, #16]
 800ed74:	4798      	blx	r3
 800ed76:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800ed7a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800ed86:	b10a      	cbz	r2, 800ed8c <_ZN8touchgfx3HAL4tickEv+0x94>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1eb      	bne.n	800ed64 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800ed8c:	4a3f      	ldr	r2, [pc, #252]	@ (800ee8c <_ZN8touchgfx3HAL4tickEv+0x194>)
 800ed8e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800ed92:	7813      	ldrb	r3, [r2, #0]
 800ed94:	3301      	adds	r3, #1
 800ed96:	b25b      	sxtb	r3, r3
 800ed98:	4299      	cmp	r1, r3
 800ed9a:	7013      	strb	r3, [r2, #0]
 800ed9c:	dc10      	bgt.n	800edc0 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	68e0      	ldr	r0, [r4, #12]
 800eda2:	a902      	add	r1, sp, #8
 800eda4:	7013      	strb	r3, [r2, #0]
 800eda6:	aa03      	add	r2, sp, #12
 800eda8:	6803      	ldr	r3, [r0, #0]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	4798      	blx	r3
 800edae:	6823      	ldr	r3, [r4, #0]
 800edb0:	2800      	cmp	r0, #0
 800edb2:	d059      	beq.n	800ee68 <_ZN8touchgfx3HAL4tickEv+0x170>
 800edb4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800edb8:	4620      	mov	r0, r4
 800edba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800edbe:	4798      	blx	r3
 800edc0:	2300      	movs	r3, #0
 800edc2:	6960      	ldr	r0, [r4, #20]
 800edc4:	f88d 3007 	strb.w	r3, [sp, #7]
 800edc8:	b158      	cbz	r0, 800ede2 <_ZN8touchgfx3HAL4tickEv+0xea>
 800edca:	6803      	ldr	r3, [r0, #0]
 800edcc:	f10d 0107 	add.w	r1, sp, #7
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	4798      	blx	r3
 800edd4:	b128      	cbz	r0, 800ede2 <_ZN8touchgfx3HAL4tickEv+0xea>
 800edd6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800edd8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eddc:	6803      	ldr	r3, [r0, #0]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	4798      	blx	r3
 800ede2:	f104 001c 	add.w	r0, r4, #28
 800ede6:	f013 f8e1 	bl	8021fac <_ZN8touchgfx8Gestures4tickEv>
 800edea:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800edee:	b30b      	cbz	r3, 800ee34 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800edf0:	6920      	ldr	r0, [r4, #16]
 800edf2:	6803      	ldr	r3, [r0, #0]
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	4798      	blx	r3
 800edf8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800edfa:	4606      	mov	r6, r0
 800edfc:	b903      	cbnz	r3, 800ee00 <_ZN8touchgfx3HAL4tickEv+0x108>
 800edfe:	6760      	str	r0, [r4, #116]	@ 0x74
 800ee00:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800ee02:	4a23      	ldr	r2, [pc, #140]	@ (800ee90 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800ee04:	1af3      	subs	r3, r6, r3
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d914      	bls.n	800ee34 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800ee0a:	6920      	ldr	r0, [r4, #16]
 800ee0c:	6803      	ldr	r3, [r0, #0]
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	4798      	blx	r3
 800ee12:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800ee14:	2264      	movs	r2, #100	@ 0x64
 800ee16:	1af3      	subs	r3, r6, r3
 800ee18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee1c:	fbb0 f0f3 	udiv	r0, r0, r3
 800ee20:	2800      	cmp	r0, #0
 800ee22:	dc26      	bgt.n	800ee72 <_ZN8touchgfx3HAL4tickEv+0x17a>
 800ee24:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800ee28:	6920      	ldr	r0, [r4, #16]
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	6803      	ldr	r3, [r0, #0]
 800ee2e:	69db      	ldr	r3, [r3, #28]
 800ee30:	4798      	blx	r3
 800ee32:	6766      	str	r6, [r4, #116]	@ 0x74
 800ee34:	6823      	ldr	r3, [r4, #0]
 800ee36:	4620      	mov	r0, r4
 800ee38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee3c:	4798      	blx	r3
 800ee3e:	f005 f9ad 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 800ee42:	6803      	ldr	r3, [r0, #0]
 800ee44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee46:	4798      	blx	r3
 800ee48:	6823      	ldr	r3, [r4, #0]
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ee50:	4798      	blx	r3
 800ee52:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d002      	beq.n	800ee60 <_ZN8touchgfx3HAL4tickEv+0x168>
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	f7f2 fd78 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800ee60:	2300      	movs	r3, #0
 800ee62:	702b      	strb	r3, [r5, #0]
 800ee64:	b004      	add	sp, #16
 800ee66:	bd70      	pop	{r4, r5, r6, pc}
 800ee68:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	4798      	blx	r3
 800ee70:	e7a6      	b.n	800edc0 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800ee72:	2863      	cmp	r0, #99	@ 0x63
 800ee74:	bfcb      	itete	gt
 800ee76:	2300      	movgt	r3, #0
 800ee78:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800ee7c:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800ee80:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800ee84:	e7d0      	b.n	800ee28 <_ZN8touchgfx3HAL4tickEv+0x130>
 800ee86:	bf00      	nop
 800ee88:	24025300 	.word	0x24025300
 800ee8c:	24025301 	.word	0x24025301
 800ee90:	05f5e100 	.word	0x05f5e100

0800ee94 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800ee94:	b510      	push	{r4, lr}
 800ee96:	4604      	mov	r4, r0
 800ee98:	f7f3 fdac 	bl	80029f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	6863      	ldr	r3, [r4, #4]
 800eea0:	729a      	strb	r2, [r3, #10]
 800eea2:	bd10      	pop	{r4, pc}

0800eea4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800eea4:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800eea6:	301c      	adds	r0, #28
 800eea8:	f013 b87e 	b.w	8021fa8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800eeac <_ZN8touchgfx3HAL5touchEll>:
 800eeac:	b530      	push	{r4, r5, lr}
 800eeae:	b087      	sub	sp, #28
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	a804      	add	r0, sp, #16
 800eeb4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800eeb8:	f004 ff58 	bl	8013d6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800eebc:	9b04      	ldr	r3, [sp, #16]
 800eebe:	a906      	add	r1, sp, #24
 800eec0:	a803      	add	r0, sp, #12
 800eec2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800eec6:	9b05      	ldr	r3, [sp, #20]
 800eec8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800eecc:	f004 ffa0 	bl	8013e10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800eed0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800eed4:	f104 001c 	add.w	r0, r4, #28
 800eed8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800eedc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800eee0:	b189      	cbz	r1, 800ef06 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800eee2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	4613      	mov	r3, r2
 800eeea:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800eeee:	462a      	mov	r2, r5
 800eef0:	f013 f86a 	bl	8021fc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800eef4:	b128      	cbz	r0, 800ef02 <_ZN8touchgfx3HAL5touchEll+0x56>
 800eef6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800eefa:	6623      	str	r3, [r4, #96]	@ 0x60
 800eefc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800ef00:	6663      	str	r3, [r4, #100]	@ 0x64
 800ef02:	b007      	add	sp, #28
 800ef04:	bd30      	pop	{r4, r5, pc}
 800ef06:	f013 f89f 	bl	8022048 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800ef10:	e7f1      	b.n	800eef6 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800ef12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800ef12:	b510      	push	{r4, lr}
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d046      	beq.n	800efa6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ef18:	ea81 0002 	eor.w	r0, r1, r2
 800ef1c:	07c4      	lsls	r4, r0, #31
 800ef1e:	d508      	bpl.n	800ef32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800ef20:	440b      	add	r3, r1
 800ef22:	3a01      	subs	r2, #1
 800ef24:	428b      	cmp	r3, r1
 800ef26:	d93e      	bls.n	800efa6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ef28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ef2c:	f801 0b01 	strb.w	r0, [r1], #1
 800ef30:	e7f8      	b.n	800ef24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800ef32:	07d0      	lsls	r0, r2, #31
 800ef34:	bf42      	ittt	mi
 800ef36:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800ef3a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800ef3e:	f801 0b01 	strbmi.w	r0, [r1], #1
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d911      	bls.n	800ef6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ef46:	ea81 0402 	eor.w	r4, r1, r2
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	07a4      	lsls	r4, r4, #30
 800ef4e:	d022      	beq.n	800ef96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800ef50:	f023 0401 	bic.w	r4, r3, #1
 800ef54:	440c      	add	r4, r1
 800ef56:	428c      	cmp	r4, r1
 800ef58:	4602      	mov	r2, r0
 800ef5a:	d904      	bls.n	800ef66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800ef5c:	8812      	ldrh	r2, [r2, #0]
 800ef5e:	3002      	adds	r0, #2
 800ef60:	f821 2b02 	strh.w	r2, [r1], #2
 800ef64:	e7f7      	b.n	800ef56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	f023 0003 	bic.w	r0, r3, #3
 800ef6e:	4408      	add	r0, r1
 800ef70:	4288      	cmp	r0, r1
 800ef72:	4614      	mov	r4, r2
 800ef74:	d904      	bls.n	800ef80 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800ef76:	6824      	ldr	r4, [r4, #0]
 800ef78:	3204      	adds	r2, #4
 800ef7a:	f841 4b04 	str.w	r4, [r1], #4
 800ef7e:	e7f7      	b.n	800ef70 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800ef80:	f003 0303 	and.w	r3, r3, #3
 800ef84:	3a01      	subs	r2, #1
 800ef86:	440b      	add	r3, r1
 800ef88:	428b      	cmp	r3, r1
 800ef8a:	d90c      	bls.n	800efa6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ef8c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ef90:	f801 0b01 	strb.w	r0, [r1], #1
 800ef94:	e7f8      	b.n	800ef88 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800ef96:	0790      	lsls	r0, r2, #30
 800ef98:	d0e7      	beq.n	800ef6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ef9a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ef9e:	3b02      	subs	r3, #2
 800efa0:	f821 0b02 	strh.w	r0, [r1], #2
 800efa4:	e7e1      	b.n	800ef6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800efa6:	2001      	movs	r0, #1
 800efa8:	bd10      	pop	{r4, pc}

0800efaa <_ZN8touchgfx3HAL7noTouchEv>:
 800efaa:	b510      	push	{r4, lr}
 800efac:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800efb0:	4604      	mov	r4, r0
 800efb2:	b153      	cbz	r3, 800efca <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800efb4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800efb8:	2101      	movs	r1, #1
 800efba:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800efbe:	301c      	adds	r0, #28
 800efc0:	f013 f842 	bl	8022048 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800efc4:	2300      	movs	r3, #0
 800efc6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800efca:	bd10      	pop	{r4, pc}

0800efcc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800efcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efd0:	b085      	sub	sp, #20
 800efd2:	4604      	mov	r4, r0
 800efd4:	2000      	movs	r0, #0
 800efd6:	4699      	mov	r9, r3
 800efd8:	ad04      	add	r5, sp, #16
 800efda:	460f      	mov	r7, r1
 800efdc:	4690      	mov	r8, r2
 800efde:	f845 0d04 	str.w	r0, [r5, #-4]!
 800efe2:	69a0      	ldr	r0, [r4, #24]
 800efe4:	6806      	ldr	r6, [r0, #0]
 800efe6:	9501      	str	r5, [sp, #4]
 800efe8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800efec:	9500      	str	r5, [sp, #0]
 800efee:	6835      	ldr	r5, [r6, #0]
 800eff0:	47a8      	blx	r5
 800eff2:	4d10      	ldr	r5, [pc, #64]	@ (800f034 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800eff4:	4606      	mov	r6, r0
 800eff6:	f8a5 9000 	strh.w	r9, [r5]
 800effa:	f7f5 f823 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800effe:	6803      	ldr	r3, [r0, #0]
 800f000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f002:	4798      	blx	r3
 800f004:	b128      	cbz	r0, 800f012 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800f006:	2801      	cmp	r0, #1
 800f008:	d00b      	beq.n	800f022 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800f00a:	4630      	mov	r0, r6
 800f00c:	b005      	add	sp, #20
 800f00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f012:	882b      	ldrh	r3, [r5, #0]
 800f014:	fb08 7203 	mla	r2, r8, r3, r7
 800f018:	9b03      	ldr	r3, [sp, #12]
 800f01a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800f01e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f020:	e7f3      	b.n	800f00a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f022:	882a      	ldrh	r2, [r5, #0]
 800f024:	9b03      	ldr	r3, [sp, #12]
 800f026:	fb08 7202 	mla	r2, r8, r2, r7
 800f02a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f02e:	1a9a      	subs	r2, r3, r2
 800f030:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800f032:	e7ea      	b.n	800f00a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f034:	240252f6 	.word	0x240252f6

0800f038 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800f038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03a:	4b15      	ldr	r3, [pc, #84]	@ (800f090 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 800f03c:	460f      	mov	r7, r1
 800f03e:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800f042:	4606      	mov	r6, r0
 800f044:	881b      	ldrh	r3, [r3, #0]
 800f046:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800f048:	fb93 f4f4 	sdiv	r4, r3, r4
 800f04c:	f7f4 fffa 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800f050:	6803      	ldr	r3, [r0, #0]
 800f052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f054:	4798      	blx	r3
 800f056:	2801      	cmp	r0, #1
 800f058:	d00b      	beq.n	800f072 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800f05a:	d303      	bcc.n	800f064 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 800f05c:	2802      	cmp	r0, #2
 800f05e:	d010      	beq.n	800f082 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800f060:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800f062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f064:	4b0b      	ldr	r3, [pc, #44]	@ (800f094 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f066:	437c      	muls	r4, r7
 800f068:	8819      	ldrh	r1, [r3, #0]
 800f06a:	434c      	muls	r4, r1
 800f06c:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800f070:	e7f6      	b.n	800f060 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f072:	4b08      	ldr	r3, [pc, #32]	@ (800f094 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f074:	437c      	muls	r4, r7
 800f076:	8819      	ldrh	r1, [r3, #0]
 800f078:	434c      	muls	r4, r1
 800f07a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f07e:	1b2d      	subs	r5, r5, r4
 800f080:	e7ee      	b.n	800f060 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f082:	4b04      	ldr	r3, [pc, #16]	@ (800f094 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f084:	437c      	muls	r4, r7
 800f086:	8819      	ldrh	r1, [r3, #0]
 800f088:	434c      	muls	r4, r1
 800f08a:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800f08e:	e7e7      	b.n	800f060 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f090:	240252f8 	.word	0x240252f8
 800f094:	240252f6 	.word	0x240252f6

0800f098 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800f098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f09a:	b08b      	sub	sp, #44	@ 0x2c
 800f09c:	4617      	mov	r7, r2
 800f09e:	4604      	mov	r4, r0
 800f0a0:	460e      	mov	r6, r1
 800f0a2:	461d      	mov	r5, r3
 800f0a4:	f7f4 ffce 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800f0a8:	6803      	ldr	r3, [r0, #0]
 800f0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ac:	4798      	blx	r3
 800f0ae:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800f0b2:	9007      	str	r0, [sp, #28]
 800f0b4:	4631      	mov	r1, r6
 800f0b6:	6822      	ldr	r2, [r4, #0]
 800f0b8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f0bc:	4b0c      	ldr	r3, [pc, #48]	@ (800f0f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800f0be:	4620      	mov	r0, r4
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	9306      	str	r3, [sp, #24]
 800f0c4:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f0c8:	9305      	str	r3, [sp, #20]
 800f0ca:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800f0ce:	9304      	str	r3, [sp, #16]
 800f0d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f0d4:	9303      	str	r3, [sp, #12]
 800f0d6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f0da:	9302      	str	r3, [sp, #8]
 800f0dc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f0e0:	e9cd 5300 	strd	r5, r3, [sp]
 800f0e4:	463b      	mov	r3, r7
 800f0e6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	47a8      	blx	r5
 800f0ec:	b00b      	add	sp, #44	@ 0x2c
 800f0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0f0:	240252f6 	.word	0x240252f6

0800f0f4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800f0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0f8:	4698      	mov	r8, r3
 800f0fa:	6803      	ldr	r3, [r0, #0]
 800f0fc:	b08b      	sub	sp, #44	@ 0x2c
 800f0fe:	4617      	mov	r7, r2
 800f100:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800f102:	460e      	mov	r6, r1
 800f104:	4b13      	ldr	r3, [pc, #76]	@ (800f154 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800f106:	4604      	mov	r4, r0
 800f108:	f8b3 9000 	ldrh.w	r9, [r3]
 800f10c:	f7f4 ff9a 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800f110:	6803      	ldr	r3, [r0, #0]
 800f112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f114:	4798      	blx	r3
 800f116:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800f11a:	2200      	movs	r2, #0
 800f11c:	4631      	mov	r1, r6
 800f11e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f122:	2302      	movs	r3, #2
 800f124:	4620      	mov	r0, r4
 800f126:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800f12a:	2301      	movs	r3, #1
 800f12c:	9305      	str	r3, [sp, #20]
 800f12e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800f132:	9304      	str	r3, [sp, #16]
 800f134:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800f138:	9303      	str	r3, [sp, #12]
 800f13a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f13e:	9302      	str	r3, [sp, #8]
 800f140:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f144:	e9cd 8300 	strd	r8, r3, [sp]
 800f148:	463b      	mov	r3, r7
 800f14a:	47a8      	blx	r5
 800f14c:	b00b      	add	sp, #44	@ 0x2c
 800f14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f152:	bf00      	nop
 800f154:	240252f6 	.word	0x240252f6

0800f158 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800f158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f15c:	4698      	mov	r8, r3
 800f15e:	6803      	ldr	r3, [r0, #0]
 800f160:	b087      	sub	sp, #28
 800f162:	460e      	mov	r6, r1
 800f164:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800f166:	4617      	mov	r7, r2
 800f168:	4b0f      	ldr	r3, [pc, #60]	@ (800f1a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800f16a:	4604      	mov	r4, r0
 800f16c:	f8b3 9000 	ldrh.w	r9, [r3]
 800f170:	f7f4 ff68 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800f174:	6803      	ldr	r3, [r0, #0]
 800f176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f178:	4798      	blx	r3
 800f17a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800f17e:	463a      	mov	r2, r7
 800f180:	4631      	mov	r1, r6
 800f182:	f8cd 900c 	str.w	r9, [sp, #12]
 800f186:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800f18a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800f18e:	4620      	mov	r0, r4
 800f190:	9302      	str	r3, [sp, #8]
 800f192:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800f196:	9301      	str	r3, [sp, #4]
 800f198:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	4643      	mov	r3, r8
 800f1a0:	47a8      	blx	r5
 800f1a2:	b007      	add	sp, #28
 800f1a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1a8:	240252f6 	.word	0x240252f6

0800f1ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800f1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	b08f      	sub	sp, #60	@ 0x3c
 800f1b4:	4610      	mov	r0, r2
 800f1b6:	460d      	mov	r5, r1
 800f1b8:	4691      	mov	r9, r2
 800f1ba:	461e      	mov	r6, r3
 800f1bc:	f008 fde0 	bl	8017d80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	f000 809d 	beq.w	800f300 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800f364 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800f1ce:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800f1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1d4:	4798      	blx	r3
 800f1d6:	6823      	ldr	r3, [r4, #0]
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800f368 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800f1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1e0:	4798      	blx	r3
 800f1e2:	f8bb 3000 	ldrh.w	r3, [fp]
 800f1e6:	4f5c      	ldr	r7, [pc, #368]	@ (800f358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f1e8:	9301      	str	r3, [sp, #4]
 800f1ea:	f8ba 3000 	ldrh.w	r3, [sl]
 800f1ee:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800f1f2:	4640      	mov	r0, r8
 800f1f4:	9302      	str	r3, [sp, #8]
 800f1f6:	883b      	ldrh	r3, [r7, #0]
 800f1f8:	9303      	str	r3, [sp, #12]
 800f1fa:	4b58      	ldr	r3, [pc, #352]	@ (800f35c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f1fc:	881a      	ldrh	r2, [r3, #0]
 800f1fe:	9305      	str	r3, [sp, #20]
 800f200:	9204      	str	r2, [sp, #16]
 800f202:	f008 ff0d 	bl	8018020 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f206:	8038      	strh	r0, [r7, #0]
 800f208:	4640      	mov	r0, r8
 800f20a:	f008 ff3d 	bl	8018088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f20e:	9b05      	ldr	r3, [sp, #20]
 800f210:	b280      	uxth	r0, r0
 800f212:	8018      	strh	r0, [r3, #0]
 800f214:	4b52      	ldr	r3, [pc, #328]	@ (800f360 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d174      	bne.n	800f306 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800f21c:	883b      	ldrh	r3, [r7, #0]
 800f21e:	f8aa 0000 	strh.w	r0, [sl]
 800f222:	f8ab 3000 	strh.w	r3, [fp]
 800f226:	4648      	mov	r0, r9
 800f228:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800f22c:	f008 fda8 	bl	8017d80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f230:	2200      	movs	r2, #0
 800f232:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800f236:	4611      	mov	r1, r2
 800f238:	4628      	mov	r0, r5
 800f23a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800f23e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800f242:	f7f5 f93b 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 800f246:	2301      	movs	r3, #1
 800f248:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800f24c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f250:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	dd5c      	ble.n	800f312 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f258:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	dd58      	ble.n	800f312 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f260:	462a      	mov	r2, r5
 800f262:	ab0a      	add	r3, sp, #40	@ 0x28
 800f264:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f268:	6851      	ldr	r1, [r2, #4]
 800f26a:	c303      	stmia	r3!, {r0, r1}
 800f26c:	4631      	mov	r1, r6
 800f26e:	a80a      	add	r0, sp, #40	@ 0x28
 800f270:	f7ff f90a 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 800f274:	4b38      	ldr	r3, [pc, #224]	@ (800f358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f276:	2100      	movs	r1, #0
 800f278:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f27c:	4b37      	ldr	r3, [pc, #220]	@ (800f35c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f27e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800f282:	aa0a      	add	r2, sp, #40	@ 0x28
 800f284:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f288:	910c      	str	r1, [sp, #48]	@ 0x30
 800f28a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800f28e:	ab08      	add	r3, sp, #32
 800f290:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f294:	e883 0003 	stmia.w	r3, {r0, r1}
 800f298:	4618      	mov	r0, r3
 800f29a:	a90c      	add	r1, sp, #48	@ 0x30
 800f29c:	f7ff f8f4 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 800f2a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d13c      	bne.n	800f320 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800f2ac:	2600      	movs	r6, #0
 800f2ae:	696b      	ldr	r3, [r5, #20]
 800f2b0:	a908      	add	r1, sp, #32
 800f2b2:	682a      	ldr	r2, [r5, #0]
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	9305      	str	r3, [sp, #20]
 800f2b8:	616e      	str	r6, [r5, #20]
 800f2ba:	6892      	ldr	r2, [r2, #8]
 800f2bc:	4790      	blx	r2
 800f2be:	9b05      	ldr	r3, [sp, #20]
 800f2c0:	4652      	mov	r2, sl
 800f2c2:	4649      	mov	r1, r9
 800f2c4:	616b      	str	r3, [r5, #20]
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800f2cc:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800f2d0:	f7f5 f8f4 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 800f2d4:	9a01      	ldr	r2, [sp, #4]
 800f2d6:	4b23      	ldr	r3, [pc, #140]	@ (800f364 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800f2d8:	4620      	mov	r0, r4
 800f2da:	801a      	strh	r2, [r3, #0]
 800f2dc:	9a02      	ldr	r2, [sp, #8]
 800f2de:	4b22      	ldr	r3, [pc, #136]	@ (800f368 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800f2e0:	801a      	strh	r2, [r3, #0]
 800f2e2:	9a03      	ldr	r2, [sp, #12]
 800f2e4:	4b1c      	ldr	r3, [pc, #112]	@ (800f358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f2e6:	801a      	strh	r2, [r3, #0]
 800f2e8:	4b1c      	ldr	r3, [pc, #112]	@ (800f35c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f2ea:	9a04      	ldr	r2, [sp, #16]
 800f2ec:	801a      	strh	r2, [r3, #0]
 800f2ee:	6823      	ldr	r3, [r4, #0]
 800f2f0:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800f2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2f6:	4798      	blx	r3
 800f2f8:	6823      	ldr	r3, [r4, #0]
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2fe:	4798      	blx	r3
 800f300:	b00f      	add	sp, #60	@ 0x3c
 800f302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f306:	883b      	ldrh	r3, [r7, #0]
 800f308:	f8ab 0000 	strh.w	r0, [fp]
 800f30c:	f8aa 3000 	strh.w	r3, [sl]
 800f310:	e789      	b.n	800f226 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800f312:	462a      	mov	r2, r5
 800f314:	ab0a      	add	r3, sp, #40	@ 0x28
 800f316:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f31a:	6851      	ldr	r1, [r2, #4]
 800f31c:	c303      	stmia	r3!, {r0, r1}
 800f31e:	e7a9      	b.n	800f274 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800f320:	a807      	add	r0, sp, #28
 800f322:	f008 ffbb 	bl	801829c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f326:	4606      	mov	r6, r0
 800f328:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800f32a:	6803      	ldr	r3, [r0, #0]
 800f32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f32e:	4798      	blx	r3
 800f330:	4286      	cmp	r6, r0
 800f332:	d1b8      	bne.n	800f2a6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800f334:	f7f4 fe86 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800f338:	6803      	ldr	r3, [r0, #0]
 800f33a:	4606      	mov	r6, r0
 800f33c:	a807      	add	r0, sp, #28
 800f33e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f340:	9305      	str	r3, [sp, #20]
 800f342:	f008 ffab 	bl	801829c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f346:	9b05      	ldr	r3, [sp, #20]
 800f348:	4601      	mov	r1, r0
 800f34a:	4630      	mov	r0, r6
 800f34c:	4798      	blx	r3
 800f34e:	f080 0001 	eor.w	r0, r0, #1
 800f352:	b2c0      	uxtb	r0, r0
 800f354:	e7a8      	b.n	800f2a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800f356:	bf00      	nop
 800f358:	240252f0 	.word	0x240252f0
 800f35c:	240252f2 	.word	0x240252f2
 800f360:	240252f4 	.word	0x240252f4
 800f364:	240252f6 	.word	0x240252f6
 800f368:	240252f8 	.word	0x240252f8

0800f36c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800f36c:	4b07      	ldr	r3, [pc, #28]	@ (800f38c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800f36e:	b510      	push	{r4, lr}
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	4604      	mov	r4, r0
 800f374:	b13b      	cbz	r3, 800f386 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f376:	6803      	ldr	r3, [r0, #0]
 800f378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f37a:	4798      	blx	r3
 800f37c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f37e:	4283      	cmp	r3, r0
 800f380:	d101      	bne.n	800f386 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f382:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800f384:	bd10      	pop	{r4, pc}
 800f386:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800f388:	e7fc      	b.n	800f384 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800f38a:	bf00      	nop
 800f38c:	240252fa 	.word	0x240252fa

0800f390 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800f390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f394:	461d      	mov	r5, r3
 800f396:	b08a      	sub	sp, #40	@ 0x28
 800f398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f39c:	4690      	mov	r8, r2
 800f39e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800f3a2:	2400      	movs	r4, #0
 800f3a4:	4607      	mov	r7, r0
 800f3a6:	fb06 8505 	mla	r5, r6, r5, r8
 800f3aa:	9404      	str	r4, [sp, #16]
 800f3ac:	f88d 4020 	strb.w	r4, [sp, #32]
 800f3b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f3b4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f3b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f3bc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f3c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f3c4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f3c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f3cc:	f7ff ffce 	bl	800f36c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f3d0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f3da:	a901      	add	r1, sp, #4
 800f3dc:	9505      	str	r5, [sp, #20]
 800f3de:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f3e2:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800f3e6:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800f3ea:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800f3ee:	6803      	ldr	r3, [r0, #0]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	4798      	blx	r3
 800f3f4:	b00a      	add	sp, #40	@ 0x28
 800f3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3fa <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800f3fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3fe:	b08b      	sub	sp, #44	@ 0x2c
 800f400:	2400      	movs	r4, #0
 800f402:	4691      	mov	r9, r2
 800f404:	461d      	mov	r5, r3
 800f406:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800f40a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f40e:	4688      	mov	r8, r1
 800f410:	4607      	mov	r7, r0
 800f412:	9404      	str	r4, [sp, #16]
 800f414:	fb06 9505 	mla	r5, r6, r5, r9
 800f418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f41c:	f7ff ffa6 	bl	800f36c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f420:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f424:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f42e:	a901      	add	r1, sp, #4
 800f430:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f434:	9505      	str	r5, [sp, #20]
 800f436:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f43a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800f43e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f442:	f8cd 8010 	str.w	r8, [sp, #16]
 800f446:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f44a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f44e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800f452:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800f456:	6803      	ldr	r3, [r0, #0]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	4798      	blx	r3
 800f45c:	b00b      	add	sp, #44	@ 0x2c
 800f45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800f464 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800f464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f468:	b08a      	sub	sp, #40	@ 0x28
 800f46a:	4698      	mov	r8, r3
 800f46c:	2300      	movs	r3, #0
 800f46e:	4606      	mov	r6, r0
 800f470:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800f474:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800f478:	2d0b      	cmp	r5, #11
 800f47a:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800f47e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800f482:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800f486:	9304      	str	r3, [sp, #16]
 800f488:	d137      	bne.n	800f4fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800f48a:	2380      	movs	r3, #128	@ 0x80
 800f48c:	f88d 0020 	strb.w	r0, [sp, #32]
 800f490:	4630      	mov	r0, r6
 800f492:	9203      	str	r2, [sp, #12]
 800f494:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f498:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f49c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f4a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f4a4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f4a8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f4ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f4b0:	f7ff ff5c 	bl	800f36c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f4b4:	2c0b      	cmp	r4, #11
 800f4b6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f4ba:	f8ad 701e 	strh.w	r7, [sp, #30]
 800f4be:	bf94      	ite	ls
 800f4c0:	4b19      	ldrls	r3, [pc, #100]	@ (800f528 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800f4c2:	2100      	movhi	r1, #0
 800f4c4:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800f4c8:	bf98      	it	ls
 800f4ca:	5d19      	ldrbls	r1, [r3, r4]
 800f4cc:	fb02 8307 	mla	r3, r2, r7, r8
 800f4d0:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f4d4:	10c9      	asrs	r1, r1, #3
 800f4d6:	fb01 0003 	mla	r0, r1, r3, r0
 800f4da:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800f4de:	a901      	add	r1, sp, #4
 800f4e0:	9005      	str	r0, [sp, #20]
 800f4e2:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	6870      	ldr	r0, [r6, #4]
 800f4ea:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f4ee:	6803      	ldr	r3, [r0, #0]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	4798      	blx	r3
 800f4f4:	b00a      	add	sp, #40	@ 0x28
 800f4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4fa:	2d02      	cmp	r5, #2
 800f4fc:	d109      	bne.n	800f512 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800f4fe:	28ff      	cmp	r0, #255	@ 0xff
 800f500:	d105      	bne.n	800f50e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800f502:	f1bc 0f00 	cmp.w	ip, #0
 800f506:	bf14      	ite	ne
 800f508:	2340      	movne	r3, #64	@ 0x40
 800f50a:	2320      	moveq	r3, #32
 800f50c:	e7be      	b.n	800f48c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f50e:	2340      	movs	r3, #64	@ 0x40
 800f510:	e7bc      	b.n	800f48c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f512:	28ff      	cmp	r0, #255	@ 0xff
 800f514:	d105      	bne.n	800f522 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800f516:	f1bc 0f00 	cmp.w	ip, #0
 800f51a:	bf14      	ite	ne
 800f51c:	2304      	movne	r3, #4
 800f51e:	2301      	moveq	r3, #1
 800f520:	e7b4      	b.n	800f48c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f522:	2304      	movs	r3, #4
 800f524:	e7b2      	b.n	800f48c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f526:	bf00      	nop
 800f528:	080274f8 	.word	0x080274f8

0800f52c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f530:	b08b      	sub	sp, #44	@ 0x2c
 800f532:	461d      	mov	r5, r3
 800f534:	2400      	movs	r4, #0
 800f536:	4688      	mov	r8, r1
 800f538:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800f53c:	4693      	mov	fp, r2
 800f53e:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800f542:	4607      	mov	r7, r0
 800f544:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800f548:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800f54c:	9404      	str	r4, [sp, #16]
 800f54e:	bf14      	ite	ne
 800f550:	2308      	movne	r3, #8
 800f552:	2302      	moveq	r3, #2
 800f554:	fb05 b50a 	mla	r5, r5, sl, fp
 800f558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f55c:	f7ff ff06 	bl	800f36c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f560:	2e0b      	cmp	r6, #11
 800f562:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800f566:	a901      	add	r1, sp, #4
 800f568:	bf98      	it	ls
 800f56a:	4b13      	ldrls	r3, [pc, #76]	@ (800f5b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800f56c:	f8ad a01e 	strh.w	sl, [sp, #30]
 800f570:	bf98      	it	ls
 800f572:	5d9c      	ldrbls	r4, [r3, r6]
 800f574:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800f578:	10e4      	asrs	r4, r4, #3
 800f57a:	f8cd 8010 	str.w	r8, [sp, #16]
 800f57e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f582:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800f586:	fb04 0405 	mla	r4, r4, r5, r0
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f590:	2300      	movs	r3, #0
 800f592:	9405      	str	r4, [sp, #20]
 800f594:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f598:	f88d 9020 	strb.w	r9, [sp, #32]
 800f59c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800f5a0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f5a4:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800f5a8:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800f5ac:	6803      	ldr	r3, [r0, #0]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	4798      	blx	r3
 800f5b2:	b00b      	add	sp, #44	@ 0x2c
 800f5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b8:	080274f8 	.word	0x080274f8

0800f5bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800f5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c0:	461e      	mov	r6, r3
 800f5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f5ec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800f5c4:	460f      	mov	r7, r1
 800f5c6:	4690      	mov	r8, r2
 800f5c8:	881d      	ldrh	r5, [r3, #0]
 800f5ca:	f7f4 fd3b 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800f5ce:	6803      	ldr	r3, [r0, #0]
 800f5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5d2:	4798      	blx	r3
 800f5d4:	280b      	cmp	r0, #11
 800f5d6:	bf96      	itet	ls
 800f5d8:	4b05      	ldrls	r3, [pc, #20]	@ (800f5f0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800f5da:	2400      	movhi	r4, #0
 800f5dc:	5c1c      	ldrbls	r4, [r3, r0]
 800f5de:	fb08 7005 	mla	r0, r8, r5, r7
 800f5e2:	10e4      	asrs	r4, r4, #3
 800f5e4:	fb04 6000 	mla	r0, r4, r0, r6
 800f5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ec:	240252f6 	.word	0x240252f6
 800f5f0:	080274f8 	.word	0x080274f8

0800f5f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800f5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5f6:	b08b      	sub	sp, #44	@ 0x2c
 800f5f8:	461f      	mov	r7, r3
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	4616      	mov	r6, r2
 800f5fe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800f602:	2500      	movs	r5, #0
 800f604:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f608:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f60c:	9504      	str	r5, [sp, #16]
 800f60e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f612:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f616:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f61a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f61e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f622:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f626:	f88d 3020 	strb.w	r3, [sp, #32]
 800f62a:	f7ff fe9f 	bl	800f36c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f62e:	463a      	mov	r2, r7
 800f630:	4631      	mov	r1, r6
 800f632:	4603      	mov	r3, r0
 800f634:	4620      	mov	r0, r4
 800f636:	f7ff ffc1 	bl	800f5bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f63a:	4b0e      	ldr	r3, [pc, #56]	@ (800f674 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800f63c:	9005      	str	r0, [sp, #20]
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f644:	f7f4 fcfe 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800f648:	6803      	ldr	r3, [r0, #0]
 800f64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f64c:	4798      	blx	r3
 800f64e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f650:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800f654:	a901      	add	r1, sp, #4
 800f656:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800f65a:	9304      	str	r3, [sp, #16]
 800f65c:	6860      	ldr	r0, [r4, #4]
 800f65e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800f662:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800f666:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800f66a:	6803      	ldr	r3, [r0, #0]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	4798      	blx	r3
 800f670:	b00b      	add	sp, #44	@ 0x2c
 800f672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f674:	240252f6 	.word	0x240252f6

0800f678 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800f678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f67a:	b08d      	sub	sp, #52	@ 0x34
 800f67c:	2501      	movs	r5, #1
 800f67e:	4604      	mov	r4, r0
 800f680:	466b      	mov	r3, sp
 800f682:	9503      	str	r5, [sp, #12]
 800f684:	e883 0006 	stmia.w	r3, {r1, r2}
 800f688:	2300      	movs	r3, #0
 800f68a:	f8bd 6000 	ldrh.w	r6, [sp]
 800f68e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800f692:	9306      	str	r3, [sp, #24]
 800f694:	6803      	ldr	r3, [r0, #0]
 800f696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f698:	4798      	blx	r3
 800f69a:	463a      	mov	r2, r7
 800f69c:	4631      	mov	r1, r6
 800f69e:	4603      	mov	r3, r0
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f7ff ff8b 	bl	800f5bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f6a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f6a8:	9004      	str	r0, [sp, #16]
 800f6aa:	9307      	str	r3, [sp, #28]
 800f6ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f6b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f6b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f6b8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800f6bc:	4b0e      	ldr	r3, [pc, #56]	@ (800f6f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800f6be:	881b      	ldrh	r3, [r3, #0]
 800f6c0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800f6c4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800f6c8:	f7f4 fcbc 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800f6cc:	6803      	ldr	r3, [r0, #0]
 800f6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6d0:	4798      	blx	r3
 800f6d2:	23ff      	movs	r3, #255	@ 0xff
 800f6d4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800f6d8:	a903      	add	r1, sp, #12
 800f6da:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800f6de:	6860      	ldr	r0, [r4, #4]
 800f6e0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800f6e4:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800f6e8:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800f6ec:	6803      	ldr	r3, [r0, #0]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	4798      	blx	r3
 800f6f2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800f6f4:	b00d      	add	sp, #52	@ 0x34
 800f6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f8:	240252f6 	.word	0x240252f6

0800f6fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800f6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f700:	b08c      	sub	sp, #48	@ 0x30
 800f702:	461e      	mov	r6, r3
 800f704:	2300      	movs	r3, #0
 800f706:	4604      	mov	r4, r0
 800f708:	466d      	mov	r5, sp
 800f70a:	9306      	str	r3, [sp, #24]
 800f70c:	6803      	ldr	r3, [r0, #0]
 800f70e:	e885 0006 	stmia.w	r5, {r1, r2}
 800f712:	2501      	movs	r5, #1
 800f714:	f8bd 7000 	ldrh.w	r7, [sp]
 800f718:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800f71c:	9503      	str	r5, [sp, #12]
 800f71e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f720:	4798      	blx	r3
 800f722:	4642      	mov	r2, r8
 800f724:	4639      	mov	r1, r7
 800f726:	4603      	mov	r3, r0
 800f728:	4620      	mov	r0, r4
 800f72a:	f7ff ff47 	bl	800f5bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f72e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f732:	9004      	str	r0, [sp, #16]
 800f734:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f738:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f73c:	9607      	str	r6, [sp, #28]
 800f73e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800f742:	4b10      	ldr	r3, [pc, #64]	@ (800f784 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800f744:	881b      	ldrh	r3, [r3, #0]
 800f746:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800f74a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f74c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800f750:	f7f4 fc78 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 800f754:	6803      	ldr	r3, [r0, #0]
 800f756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f758:	4798      	blx	r3
 800f75a:	23ff      	movs	r3, #255	@ 0xff
 800f75c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800f760:	a903      	add	r1, sp, #12
 800f762:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800f766:	6860      	ldr	r0, [r4, #4]
 800f768:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800f76c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800f770:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800f774:	6803      	ldr	r3, [r0, #0]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	4798      	blx	r3
 800f77a:	4630      	mov	r0, r6
 800f77c:	b00c      	add	sp, #48	@ 0x30
 800f77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f782:	bf00      	nop
 800f784:	240252f6 	.word	0x240252f6

0800f788 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800f788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f78a:	b085      	sub	sp, #20
 800f78c:	4605      	mov	r5, r0
 800f78e:	ac02      	add	r4, sp, #8
 800f790:	e884 0006 	stmia.w	r4, {r1, r2}
 800f794:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800f798:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800f79c:	f7ff fde6 	bl	800f36c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f7a0:	4631      	mov	r1, r6
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	463a      	mov	r2, r7
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f7ff ff08 	bl	800f5bc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f7ac:	4a05      	ldr	r2, [pc, #20]	@ (800f7c4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800f7ae:	682b      	ldr	r3, [r5, #0]
 800f7b0:	8812      	ldrh	r2, [r2, #0]
 800f7b2:	9200      	str	r2, [sp, #0]
 800f7b4:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	e894 0006 	ldmia.w	r4, {r1, r2}
 800f7be:	47b0      	blx	r6
 800f7c0:	b005      	add	sp, #20
 800f7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7c4:	240252f6 	.word	0x240252f6

0800f7c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	b19b      	cbz	r3, 800f7fa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800f7d2:	2002      	movs	r0, #2
 800f7d4:	f7f2 f8ec 	bl	80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800f7e0:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800f7e4:	6823      	ldr	r3, [r4, #0]
 800f7e6:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 800f7ea:	f7ff fdbf 	bl	800f36c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f7ee:	4601      	mov	r1, r0
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	462b      	mov	r3, r5
 800f7f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7f8:	4718      	bx	r3
 800f7fa:	bd70      	pop	{r4, r5, r6, pc}

0800f7fc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800f7fc:	b570      	push	{r4, r5, r6, lr}
 800f7fe:	4605      	mov	r5, r0
 800f800:	460c      	mov	r4, r1
 800f802:	2003      	movs	r0, #3
 800f804:	b149      	cbz	r1, 800f81a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800f806:	f7f2 f873 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f80a:	6928      	ldr	r0, [r5, #16]
 800f80c:	b168      	cbz	r0, 800f82a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800f80e:	6803      	ldr	r3, [r0, #0]
 800f810:	2101      	movs	r1, #1
 800f812:	695b      	ldr	r3, [r3, #20]
 800f814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f818:	4718      	bx	r3
 800f81a:	f7f2 f899 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f81e:	6928      	ldr	r0, [r5, #16]
 800f820:	b118      	cbz	r0, 800f82a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800f822:	6803      	ldr	r3, [r0, #0]
 800f824:	4621      	mov	r1, r4
 800f826:	695b      	ldr	r3, [r3, #20]
 800f828:	e7f4      	b.n	800f814 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800f82a:	bd70      	pop	{r4, r5, r6, pc}

0800f82c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800f832:	4604      	mov	r4, r0
 800f834:	460d      	mov	r5, r1
 800f836:	428b      	cmp	r3, r1
 800f838:	d006      	beq.n	800f848 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800f83a:	6803      	ldr	r3, [r0, #0]
 800f83c:	b929      	cbnz	r1, 800f84a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800f83e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f842:	4798      	blx	r3
 800f844:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800f848:	bd38      	pop	{r3, r4, r5, pc}
 800f84a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f84e:	e7f8      	b.n	800f842 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800f850 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800f850:	4b0c      	ldr	r3, [pc, #48]	@ (800f884 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 800f852:	b510      	push	{r4, lr}
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	4604      	mov	r4, r0
 800f858:	b953      	cbnz	r3, 800f870 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800f85a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800f85e:	b93b      	cbnz	r3, 800f870 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800f860:	6840      	ldr	r0, [r0, #4]
 800f862:	f000 f919 	bl	800fa98 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800f866:	b118      	cbz	r0, 800f870 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800f868:	6862      	ldr	r2, [r4, #4]
 800f86a:	7a53      	ldrb	r3, [r2, #9]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d0fc      	beq.n	800f86a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 800f870:	f7f3 f8b8 	bl	80029e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800f874:	4620      	mov	r0, r4
 800f876:	2100      	movs	r1, #0
 800f878:	f7ff ffd8 	bl	800f82c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800f87c:	4620      	mov	r0, r4
 800f87e:	f7ff fd75 	bl	800f36c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f882:	bd10      	pop	{r4, pc}
 800f884:	240252fa 	.word	0x240252fa

0800f888 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800f888:	b570      	push	{r4, r5, r6, lr}
 800f88a:	4604      	mov	r4, r0
 800f88c:	6803      	ldr	r3, [r0, #0]
 800f88e:	b919      	cbnz	r1, 800f898 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800f890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f896:	4718      	bx	r3
 800f898:	2200      	movs	r2, #0
 800f89a:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800f89e:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800f8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8a4:	4798      	blx	r3
 800f8a6:	6863      	ldr	r3, [r4, #4]
 800f8a8:	2101      	movs	r1, #1
 800f8aa:	4605      	mov	r5, r0
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	7299      	strb	r1, [r3, #10]
 800f8b0:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800f8b4:	f7ff ffba 	bl	800f82c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	bd70      	pop	{r4, r5, r6, pc}

0800f8bc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800f8bc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800f8c0:	1a13      	subs	r3, r2, r0
 800f8c2:	4258      	negs	r0, r3
 800f8c4:	4158      	adcs	r0, r3
 800f8c6:	4770      	bx	lr

0800f8c8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800f8c8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800f8cc:	1a9b      	subs	r3, r3, r2
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	bfdc      	itt	le
 800f8d2:	6882      	ldrle	r2, [r0, #8]
 800f8d4:	189b      	addle	r3, r3, r2
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	bfcc      	ite	gt
 800f8da:	2000      	movgt	r0, #0
 800f8dc:	2001      	movle	r0, #1
 800f8de:	4770      	bx	lr

0800f8e0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800f8e0:	6902      	ldr	r2, [r0, #16]
 800f8e2:	6843      	ldr	r3, [r0, #4]
 800f8e4:	2024      	movs	r0, #36	@ 0x24
 800f8e6:	fb00 3002 	mla	r0, r0, r2, r3
 800f8ea:	4770      	bx	lr

0800f8ec <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800f8ec:	6803      	ldr	r3, [r0, #0]
 800f8ee:	691b      	ldr	r3, [r3, #16]
 800f8f0:	4718      	bx	r3

0800f8f2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	b570      	push	{r4, r5, r6, lr}
 800f8f6:	7203      	strb	r3, [r0, #8]
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	6840      	ldr	r0, [r0, #4]
 800f8fc:	6803      	ldr	r3, [r0, #0]
 800f8fe:	699b      	ldr	r3, [r3, #24]
 800f900:	4798      	blx	r3
 800f902:	6803      	ldr	r3, [r0, #0]
 800f904:	4605      	mov	r5, r0
 800f906:	2b40      	cmp	r3, #64	@ 0x40
 800f908:	d00c      	beq.n	800f924 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f90a:	d810      	bhi.n	800f92e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800f90c:	2b04      	cmp	r3, #4
 800f90e:	d01d      	beq.n	800f94c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800f910:	d804      	bhi.n	800f91c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800f912:	2b01      	cmp	r3, #1
 800f914:	d006      	beq.n	800f924 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f916:	2b02      	cmp	r3, #2
 800f918:	d02c      	beq.n	800f974 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800f91a:	bd70      	pop	{r4, r5, r6, pc}
 800f91c:	2b08      	cmp	r3, #8
 800f91e:	d01d      	beq.n	800f95c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800f920:	2b20      	cmp	r3, #32
 800f922:	d1fa      	bne.n	800f91a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800f924:	6823      	ldr	r3, [r4, #0]
 800f926:	4620      	mov	r0, r4
 800f928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f92a:	4798      	blx	r3
 800f92c:	e013      	b.n	800f956 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800f92e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f932:	d0f7      	beq.n	800f924 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f934:	d804      	bhi.n	800f940 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800f936:	2b80      	cmp	r3, #128	@ 0x80
 800f938:	d0f4      	beq.n	800f924 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f93a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f93e:	e7f0      	b.n	800f922 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800f940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f944:	d0ee      	beq.n	800f924 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f94a:	e7e5      	b.n	800f918 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800f94c:	6823      	ldr	r3, [r4, #0]
 800f94e:	7f01      	ldrb	r1, [r0, #28]
 800f950:	4620      	mov	r0, r4
 800f952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f954:	4798      	blx	r3
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95a:	e006      	b.n	800f96a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f95c:	6823      	ldr	r3, [r4, #0]
 800f95e:	7f01      	ldrb	r1, [r0, #28]
 800f960:	4620      	mov	r0, r4
 800f962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f964:	4798      	blx	r3
 800f966:	6823      	ldr	r3, [r4, #0]
 800f968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f96a:	4629      	mov	r1, r5
 800f96c:	4620      	mov	r0, r4
 800f96e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f972:	4718      	bx	r3
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	4620      	mov	r0, r4
 800f978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f97a:	4798      	blx	r3
 800f97c:	e7f3      	b.n	800f966 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800f97e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800f97e:	4770      	bx	lr

0800f980 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800f980:	4770      	bx	lr

0800f982 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800f982:	4770      	bx	lr

0800f984 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800f984:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800f988:	b510      	push	{r4, lr}
 800f98a:	1ad2      	subs	r2, r2, r3
 800f98c:	2a00      	cmp	r2, #0
 800f98e:	bfdc      	itt	le
 800f990:	6884      	ldrle	r4, [r0, #8]
 800f992:	1912      	addle	r2, r2, r4
 800f994:	2a01      	cmp	r2, #1
 800f996:	dd16      	ble.n	800f9c6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800f998:	6842      	ldr	r2, [r0, #4]
 800f99a:	2424      	movs	r4, #36	@ 0x24
 800f99c:	fb04 2303 	mla	r3, r4, r3, r2
 800f9a0:	f101 0220 	add.w	r2, r1, #32
 800f9a4:	f851 4b04 	ldr.w	r4, [r1], #4
 800f9a8:	4291      	cmp	r1, r2
 800f9aa:	f843 4b04 	str.w	r4, [r3], #4
 800f9ae:	d1f9      	bne.n	800f9a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800f9b0:	780a      	ldrb	r2, [r1, #0]
 800f9b2:	701a      	strb	r2, [r3, #0]
 800f9b4:	68c3      	ldr	r3, [r0, #12]
 800f9b6:	6882      	ldr	r2, [r0, #8]
 800f9b8:	f3bf 8f5b 	dmb	ish
 800f9bc:	3301      	adds	r3, #1
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	bfd8      	it	le
 800f9c2:	1a9b      	suble	r3, r3, r2
 800f9c4:	60c3      	str	r3, [r0, #12]
 800f9c6:	bd10      	pop	{r4, pc}

0800f9c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800f9c8:	6903      	ldr	r3, [r0, #16]
 800f9ca:	6882      	ldr	r2, [r0, #8]
 800f9cc:	f3bf 8f5b 	dmb	ish
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	bfd8      	it	le
 800f9d6:	1a9b      	suble	r3, r3, r2
 800f9d8:	6103      	str	r3, [r0, #16]
 800f9da:	4770      	bx	lr

0800f9dc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800f9dc:	b570      	push	{r4, r5, r6, lr}
 800f9de:	4604      	mov	r4, r0
 800f9e0:	460e      	mov	r6, r1
 800f9e2:	6860      	ldr	r0, [r4, #4]
 800f9e4:	6803      	ldr	r3, [r0, #0]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	4798      	blx	r3
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	d1f9      	bne.n	800f9e2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800f9ee:	4d0d      	ldr	r5, [pc, #52]	@ (800fa24 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800f9f0:	6828      	ldr	r0, [r5, #0]
 800f9f2:	6803      	ldr	r3, [r0, #0]
 800f9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9f8:	4798      	blx	r3
 800f9fa:	f7f3 f801 	bl	8002a00 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800f9fe:	6828      	ldr	r0, [r5, #0]
 800fa00:	2101      	movs	r1, #1
 800fa02:	f7ff ff13 	bl	800f82c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fa06:	6860      	ldr	r0, [r4, #4]
 800fa08:	4631      	mov	r1, r6
 800fa0a:	6803      	ldr	r3, [r0, #0]
 800fa0c:	689b      	ldr	r3, [r3, #8]
 800fa0e:	4798      	blx	r3
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	4620      	mov	r0, r4
 800fa14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa16:	4798      	blx	r3
 800fa18:	6828      	ldr	r0, [r5, #0]
 800fa1a:	6803      	ldr	r3, [r0, #0]
 800fa1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa22:	4718      	bx	r3
 800fa24:	240252fc 	.word	0x240252fc

0800fa28 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800fa28:	b508      	push	{r3, lr}
 800fa2a:	f7f2 ffdb 	bl	80029e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fa2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fa32:	f7f2 bfdf 	b.w	80029f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800fa36 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fa36:	b510      	push	{r4, lr}
 800fa38:	4604      	mov	r4, r0
 800fa3a:	2114      	movs	r1, #20
 800fa3c:	f013 f8d2 	bl	8022be4 <_ZdlPvj>
 800fa40:	4620      	mov	r0, r4
 800fa42:	bd10      	pop	{r4, pc}

0800fa44 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800fa44:	b570      	push	{r4, r5, r6, lr}
 800fa46:	4604      	mov	r4, r0
 800fa48:	6840      	ldr	r0, [r0, #4]
 800fa4a:	6803      	ldr	r3, [r0, #0]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	4798      	blx	r3
 800fa50:	4605      	mov	r5, r0
 800fa52:	b930      	cbnz	r0, 800fa62 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800fa54:	7a23      	ldrb	r3, [r4, #8]
 800fa56:	b123      	cbz	r3, 800fa62 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800fa58:	6860      	ldr	r0, [r4, #4]
 800fa5a:	6803      	ldr	r3, [r0, #0]
 800fa5c:	695b      	ldr	r3, [r3, #20]
 800fa5e:	4798      	blx	r3
 800fa60:	7225      	strb	r5, [r4, #8]
 800fa62:	6860      	ldr	r0, [r4, #4]
 800fa64:	6803      	ldr	r3, [r0, #0]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4798      	blx	r3
 800fa6a:	b928      	cbnz	r0, 800fa78 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	4620      	mov	r0, r4
 800fa70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa76:	4718      	bx	r3
 800fa78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa7c:	f7f2 bfc8 	b.w	8002a10 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800fa80 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800fa80:	b510      	push	{r4, lr}
 800fa82:	6082      	str	r2, [r0, #8]
 800fa84:	2200      	movs	r2, #0
 800fa86:	4c03      	ldr	r4, [pc, #12]	@ (800fa94 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800fa88:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800fa8c:	e9c0 4100 	strd	r4, r1, [r0]
 800fa90:	bd10      	pop	{r4, pc}
 800fa92:	bf00      	nop
 800fa94:	0802750c 	.word	0x0802750c

0800fa98 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800fa98:	6840      	ldr	r0, [r0, #4]
 800fa9a:	6803      	ldr	r3, [r0, #0]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4718      	bx	r3

0800faa0 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800faa0:	2300      	movs	r3, #0
 800faa2:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800faa4:	8503      	strh	r3, [r0, #40]	@ 0x28
 800faa6:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800faa8:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800faaa:	6980      	ldr	r0, [r0, #24]
 800faac:	b110      	cbz	r0, 800fab4 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800faae:	6803      	ldr	r3, [r0, #0]
 800fab0:	691b      	ldr	r3, [r3, #16]
 800fab2:	4718      	bx	r3
 800fab4:	4770      	bx	lr

0800fab6 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800fab6:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800faba:	4770      	bx	lr

0800fabc <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800fabc:	b538      	push	{r3, r4, r5, lr}
 800fabe:	0e0b      	lsrs	r3, r1, #24
 800fac0:	4604      	mov	r4, r0
 800fac2:	460d      	mov	r5, r1
 800fac4:	7783      	strb	r3, [r0, #30]
 800fac6:	6803      	ldr	r3, [r0, #0]
 800fac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faca:	4798      	blx	r3
 800facc:	6803      	ldr	r3, [r0, #0]
 800face:	4629      	mov	r1, r5
 800fad0:	689b      	ldr	r3, [r3, #8]
 800fad2:	4798      	blx	r3
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	4620      	mov	r0, r4
 800fad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fada:	4798      	blx	r3
 800fadc:	61a0      	str	r0, [r4, #24]
 800fade:	bd38      	pop	{r3, r4, r5, pc}

0800fae0 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800fae0:	7741      	strb	r1, [r0, #29]
 800fae2:	4770      	bx	lr

0800fae4 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800fae4:	b530      	push	{r4, r5, lr}
 800fae6:	460d      	mov	r5, r1
 800fae8:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800faec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faf4:	682b      	ldr	r3, [r5, #0]
 800faf6:	6023      	str	r3, [r4, #0]
 800faf8:	bd30      	pop	{r4, r5, pc}

0800fafa <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800fafa:	b538      	push	{r3, r4, r5, lr}
 800fafc:	4604      	mov	r4, r0
 800fafe:	1d03      	adds	r3, r0, #4
 800fb00:	6808      	ldr	r0, [r1, #0]
 800fb02:	2500      	movs	r5, #0
 800fb04:	6849      	ldr	r1, [r1, #4]
 800fb06:	c303      	stmia	r3!, {r0, r1}
 800fb08:	6813      	ldr	r3, [r2, #0]
 800fb0a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800fb0e:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800fb12:	6853      	ldr	r3, [r2, #4]
 800fb14:	61a5      	str	r5, [r4, #24]
 800fb16:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800fb1a:	f006 f8ad 	bl	8015c78 <_ZN8touchgfx9Matrix3x35resetEv>
 800fb1e:	23ff      	movs	r3, #255	@ 0xff
 800fb20:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800fb24:	7763      	strb	r3, [r4, #29]
 800fb26:	77a3      	strb	r3, [r4, #30]
 800fb28:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800fb2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fb2e:	2301      	movs	r3, #1
 800fb30:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800fb34:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fb38 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800fb38:	ee70 7a41 	vsub.f32	s15, s0, s2
 800fb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb40:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb44:	4605      	mov	r5, r0
 800fb46:	ed2d 8b0a 	vpush	{d8-d12}
 800fb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4e:	b087      	sub	sp, #28
 800fb50:	eef0 9a40 	vmov.f32	s19, s0
 800fb54:	6802      	ldr	r2, [r0, #0]
 800fb56:	eeb0 aa60 	vmov.f32	s20, s1
 800fb5a:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800fb5e:	eeb0 9a41 	vmov.f32	s18, s2
 800fb62:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800fb64:	eef0 8a61 	vmov.f32	s17, s3
 800fb68:	eeb0 ca42 	vmov.f32	s24, s4
 800fb6c:	eef0 ca62 	vmov.f32	s25, s5
 800fb70:	d112      	bne.n	800fb98 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800fb72:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800fb76:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb7e:	d10b      	bne.n	800fb98 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800fb80:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800fb84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800fb86:	3901      	subs	r1, #1
 800fb88:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800fb8c:	b007      	add	sp, #28
 800fb8e:	ecbd 8b0a 	vpop	{d8-d12}
 800fb92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb96:	4710      	bx	r2
 800fb98:	23ff      	movs	r3, #255	@ 0xff
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800fba0:	f8df 92c4 	ldr.w	r9, [pc, #708]	@ 800fe68 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x330>
 800fba4:	77ab      	strb	r3, [r5, #30]
 800fba6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800fba8:	4798      	blx	r3
 800fbaa:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800fbae:	eeb0 0a69 	vmov.f32	s0, s19
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	80c3      	strh	r3, [r0, #6]
 800fbb6:	eef0 0a4a 	vmov.f32	s1, s20
 800fbba:	4640      	mov	r0, r8
 800fbbc:	f006 f90b 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fbc0:	eeb0 ba40 	vmov.f32	s22, s0
 800fbc4:	ed8d 0a00 	vstr	s0, [sp]
 800fbc8:	eeb0 0a49 	vmov.f32	s0, s18
 800fbcc:	eef0 ba60 	vmov.f32	s23, s1
 800fbd0:	edcd 0a01 	vstr	s1, [sp, #4]
 800fbd4:	4640      	mov	r0, r8
 800fbd6:	eef0 0a68 	vmov.f32	s1, s17
 800fbda:	f006 f8fc 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fbde:	eeb4 ba40 	vcmp.f32	s22, s0
 800fbe2:	eeb0 8a40 	vmov.f32	s16, s0
 800fbe6:	ed8d 0a02 	vstr	s0, [sp, #8]
 800fbea:	eef0 aa60 	vmov.f32	s21, s1
 800fbee:	edcd 0a03 	vstr	s1, [sp, #12]
 800fbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf6:	eef4 ba60 	vcmp.f32	s23, s1
 800fbfa:	bf0c      	ite	eq
 800fbfc:	2301      	moveq	r3, #1
 800fbfe:	2300      	movne	r3, #0
 800fc00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc04:	eeb4 ba40 	vcmp.f32	s22, s0
 800fc08:	7463      	strb	r3, [r4, #17]
 800fc0a:	bf0c      	ite	eq
 800fc0c:	2301      	moveq	r3, #1
 800fc0e:	2300      	movne	r3, #0
 800fc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc14:	74a3      	strb	r3, [r4, #18]
 800fc16:	d031      	beq.n	800fc7c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800fc18:	eef4 ba60 	vcmp.f32	s23, s1
 800fc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc20:	d02c      	beq.n	800fc7c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800fc22:	ee39 9a69 	vsub.f32	s18, s18, s19
 800fc26:	4640      	mov	r0, r8
 800fc28:	ee78 8aca 	vsub.f32	s17, s17, s20
 800fc2c:	eef0 0a4a 	vmov.f32	s1, s20
 800fc30:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 800fc34:	eec8 7aac 	vdiv.f32	s15, s17, s25
 800fc38:	eeb0 0a69 	vmov.f32	s0, s19
 800fc3c:	eeec 0a87 	vfma.f32	s1, s25, s14
 800fc40:	eea7 0acc 	vfms.f32	s0, s15, s24
 800fc44:	f006 f8c7 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fc48:	f899 3000 	ldrb.w	r3, [r9]
 800fc4c:	edcd 0a05 	vstr	s1, [sp, #20]
 800fc50:	ee70 0aeb 	vsub.f32	s1, s1, s23
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	bf08      	it	eq
 800fc58:	eef1 7a60 	vnegeq.f32	s15, s1
 800fc5c:	ed8d 0a04 	vstr	s0, [sp, #16]
 800fc60:	ee30 0a4b 	vsub.f32	s0, s0, s22
 800fc64:	bf04      	itt	eq
 800fc66:	eef0 0a40 	vmoveq.f32	s1, s0
 800fc6a:	eeb0 0a67 	vmoveq.f32	s0, s15
 800fc6e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc76:	d135      	bne.n	800fce4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ac>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	74a3      	strb	r3, [r4, #18]
 800fc7c:	f899 2000 	ldrb.w	r2, [r9]
 800fc80:	7c63      	ldrb	r3, [r4, #17]
 800fc82:	2a01      	cmp	r2, #1
 800fc84:	f040 80a3 	bne.w	800fdce <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d073      	beq.n	800fd74 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x23c>
 800fc8c:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 800fc90:	eddf 6a73 	vldr	s13, [pc, #460]	@ 800fe60 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800fc94:	eef4 baea 	vcmpe.f32	s23, s21
 800fc98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca0:	edc4 7a08 	vstr	s15, [r4, #32]
 800fca4:	eefd 7aea 	vcvt.s32.f32	s15, s21
 800fca8:	ee17 3a90 	vmov	r3, s15
 800fcac:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 800fcb0:	b21a      	sxth	r2, r3
 800fcb2:	ee17 3a90 	vmov	r3, s15
 800fcb6:	bf48      	it	mi
 800fcb8:	8162      	strhmi	r2, [r4, #10]
 800fcba:	b21b      	sxth	r3, r3
 800fcbc:	bf56      	itet	pl
 800fcbe:	8122      	strhpl	r2, [r4, #8]
 800fcc0:	8123      	strhmi	r3, [r4, #8]
 800fcc2:	8163      	strhpl	r3, [r4, #10]
 800fcc4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800fcc8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800fccc:	1a9b      	subs	r3, r3, r2
 800fcce:	ee07 3a90 	vmov	s15, r3
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcd8:	7463      	strb	r3, [r4, #17]
 800fcda:	2301      	movs	r3, #1
 800fcdc:	edc4 7a07 	vstr	s15, [r4, #28]
 800fce0:	74a3      	strb	r3, [r4, #18]
 800fce2:	e03f      	b.n	800fd64 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800fce4:	ee80 7a80 	vdiv.f32	s14, s1, s0
 800fce8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fcec:	ed84 7a05 	vstr	s14, [r4, #20]
 800fcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf4:	d102      	bne.n	800fcfc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c4>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	7463      	strb	r3, [r4, #17]
 800fcfa:	e7bf      	b.n	800fc7c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	ee38 8a4b 	vsub.f32	s16, s16, s22
 800fd02:	ee7a aaeb 	vsub.f32	s21, s21, s23
 800fd06:	bf0b      	itete	eq
 800fd08:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 800fd0c:	eef0 7a6b 	vmovne.f32	s15, s23
 800fd10:	ee07 2a90 	vmoveq	s15, r2
 800fd14:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 800fd18:	bf02      	ittt	eq
 800fd1a:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 800fd1e:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 800fd22:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	edc4 7a06 	vstr	s15, [r4, #24]
 800fd2c:	bf02      	ittt	eq
 800fd2e:	eef1 7a48 	vnegeq.f32	s15, s16
 800fd32:	eeb0 8a6a 	vmoveq.f32	s16, s21
 800fd36:	eef0 aa67 	vmoveq.f32	s21, s15
 800fd3a:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800fd3e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800fe64 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 800fd42:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fd46:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800fd4a:	ed84 8a07 	vstr	s16, [r4, #28]
 800fd4e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd56:	edc4 7a08 	vstr	s15, [r4, #32]
 800fd5a:	d503      	bpl.n	800fd64 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800fd5c:	eeb1 8a48 	vneg.f32	s16, s16
 800fd60:	ed84 8a07 	vstr	s16, [r4, #28]
 800fd64:	60e7      	str	r7, [r4, #12]
 800fd66:	7426      	strb	r6, [r4, #16]
 800fd68:	61ac      	str	r4, [r5, #24]
 800fd6a:	b007      	add	sp, #28
 800fd6c:	ecbd 8b0a 	vpop	{d8-d12}
 800fd70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd74:	7ca3      	ldrb	r3, [r4, #18]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d0f4      	beq.n	800fd64 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800fd7a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800fd7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800fe60 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800fd82:	ee00 3a10 	vmov	s0, r3
 800fd86:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800fd8a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fd8e:	ee30 0a4b 	vsub.f32	s0, s0, s22
 800fd92:	ee38 7a40 	vsub.f32	s14, s16, s0
 800fd96:	eeb4 8ac0 	vcmpe.f32	s16, s0
 800fd9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda2:	edc4 7a08 	vstr	s15, [r4, #32]
 800fda6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fdaa:	ee17 3a90 	vmov	r3, s15
 800fdae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fdb2:	b21a      	sxth	r2, r3
 800fdb4:	ee17 3a90 	vmov	r3, s15
 800fdb8:	bfc8      	it	gt
 800fdba:	8162      	strhgt	r2, [r4, #10]
 800fdbc:	b21b      	sxth	r3, r3
 800fdbe:	bfd6      	itet	le
 800fdc0:	8122      	strhle	r2, [r4, #8]
 800fdc2:	8123      	strhgt	r3, [r4, #8]
 800fdc4:	8163      	strhle	r3, [r4, #10]
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	7463      	strb	r3, [r4, #17]
 800fdca:	2300      	movs	r3, #0
 800fdcc:	e788      	b.n	800fce0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 800fdce:	b1e3      	cbz	r3, 800fe0a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d2>
 800fdd0:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 800fdd4:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800fe60 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800fdd8:	eef4 baea 	vcmpe.f32	s23, s21
 800fddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde4:	edc4 7a08 	vstr	s15, [r4, #32]
 800fde8:	eefd 7aea 	vcvt.s32.f32	s15, s21
 800fdec:	ee17 3a90 	vmov	r3, s15
 800fdf0:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 800fdf4:	b21a      	sxth	r2, r3
 800fdf6:	ee17 3a90 	vmov	r3, s15
 800fdfa:	bf48      	it	mi
 800fdfc:	8162      	strhmi	r2, [r4, #10]
 800fdfe:	b21b      	sxth	r3, r3
 800fe00:	bf56      	itet	pl
 800fe02:	8122      	strhpl	r2, [r4, #8]
 800fe04:	8123      	strhmi	r3, [r4, #8]
 800fe06:	8163      	strhpl	r3, [r4, #10]
 800fe08:	e7ac      	b.n	800fd64 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800fe0a:	7ca3      	ldrb	r3, [r4, #18]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d0a9      	beq.n	800fd64 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800fe10:	ee38 7a4b 	vsub.f32	s14, s16, s22
 800fe14:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800fe60 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800fe18:	eeb4 bac8 	vcmpe.f32	s22, s16
 800fe1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe24:	edc4 7a08 	vstr	s15, [r4, #32]
 800fe28:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fe2c:	ee17 3a90 	vmov	r3, s15
 800fe30:	eefd 7acb 	vcvt.s32.f32	s15, s22
 800fe34:	b21a      	sxth	r2, r3
 800fe36:	ee17 3a90 	vmov	r3, s15
 800fe3a:	bf48      	it	mi
 800fe3c:	8162      	strhmi	r2, [r4, #10]
 800fe3e:	b21b      	sxth	r3, r3
 800fe40:	bf56      	itet	pl
 800fe42:	8122      	strhpl	r2, [r4, #8]
 800fe44:	8123      	strhmi	r3, [r4, #8]
 800fe46:	8163      	strhpl	r3, [r4, #10]
 800fe48:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800fe4c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800fe50:	1a9b      	subs	r3, r3, r2
 800fe52:	ee07 3a90 	vmov	s15, r3
 800fe56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe5a:	edc4 7a07 	vstr	s15, [r4, #28]
 800fe5e:	e781      	b.n	800fd64 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800fe60:	447ffffe 	.word	0x447ffffe
 800fe64:	44800000 	.word	0x44800000
 800fe68:	240252f4 	.word	0x240252f4

0800fe6c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800fe6c:	b510      	push	{r4, lr}
 800fe6e:	ed2d 8b02 	vpush	{d8}
 800fe72:	eef0 8a62 	vmov.f32	s17, s5
 800fe76:	2100      	movs	r1, #0
 800fe78:	4604      	mov	r4, r0
 800fe7a:	eeb0 8a42 	vmov.f32	s16, s4
 800fe7e:	f012 fc23 	bl	80226c8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800fe82:	eef0 7a68 	vmov.f32	s15, s17
 800fe86:	6823      	ldr	r3, [r4, #0]
 800fe88:	4620      	mov	r0, r4
 800fe8a:	689b      	ldr	r3, [r3, #8]
 800fe8c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fe90:	ee17 2a90 	vmov	r2, s15
 800fe94:	eef0 7a48 	vmov.f32	s15, s16
 800fe98:	ecbd 8b02 	vpop	{d8}
 800fe9c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fea4:	ee17 1a90 	vmov	r1, s15
 800fea8:	4718      	bx	r3

0800feaa <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800feaa:	b510      	push	{r4, lr}
 800feac:	ed2d 8b02 	vpush	{d8}
 800feb0:	eef0 8a63 	vmov.f32	s17, s7
 800feb4:	2100      	movs	r1, #0
 800feb6:	4604      	mov	r4, r0
 800feb8:	eeb0 8a43 	vmov.f32	s16, s6
 800febc:	f012 fcc6 	bl	802284c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800fec0:	eef0 7a68 	vmov.f32	s15, s17
 800fec4:	6823      	ldr	r3, [r4, #0]
 800fec6:	4620      	mov	r0, r4
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fece:	ee17 2a90 	vmov	r2, s15
 800fed2:	eef0 7a48 	vmov.f32	s15, s16
 800fed6:	ecbd 8b02 	vpop	{d8}
 800feda:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fee2:	ee17 1a90 	vmov	r1, s15
 800fee6:	4718      	bx	r3

0800fee8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800fee8:	b513      	push	{r0, r1, r4, lr}
 800feea:	4604      	mov	r4, r0
 800feec:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800feee:	f005 ff72 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fef2:	eef0 7a60 	vmov.f32	s15, s1
 800fef6:	4620      	mov	r0, r4
 800fef8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fefc:	ee17 2a90 	vmov	r2, s15
 800ff00:	eef0 7a40 	vmov.f32	s15, s0
 800ff04:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ff08:	ee17 1a90 	vmov	r1, s15
 800ff0c:	b002      	add	sp, #8
 800ff0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff12:	f012 bb33 	b.w	802257c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800ff16:	b513      	push	{r0, r1, r4, lr}
 800ff18:	4604      	mov	r4, r0
 800ff1a:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800ff1c:	f005 ff5b 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ff20:	eef0 7a60 	vmov.f32	s15, s1
 800ff24:	4620      	mov	r0, r4
 800ff26:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ff2a:	ee17 2a90 	vmov	r2, s15
 800ff2e:	eef0 7a40 	vmov.f32	s15, s0
 800ff32:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ff36:	ee17 1a90 	vmov	r1, s15
 800ff3a:	b002      	add	sp, #8
 800ff3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff40:	f012 bb69 	b.w	8022616 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800ff44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800ff44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff46:	2400      	movs	r4, #0
 800ff48:	9f07      	ldr	r7, [sp, #28]
 800ff4a:	f04f 0e01 	mov.w	lr, #1
 800ff4e:	4626      	mov	r6, r4
 800ff50:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800ff54:	4463      	add	r3, ip
 800ff56:	4563      	cmp	r3, ip
 800ff58:	d02d      	beq.n	800ffb6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800ff5a:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800ff5e:	2d06      	cmp	r5, #6
 800ff60:	d8f9      	bhi.n	800ff56 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ff62:	fa0e f505 	lsl.w	r5, lr, r5
 800ff66:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800ff6a:	d10d      	bne.n	800ff88 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800ff6c:	f015 0f10 	tst.w	r5, #16
 800ff70:	d117      	bne.n	800ffa2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800ff72:	072d      	lsls	r5, r5, #28
 800ff74:	d5ef      	bpl.n	800ff56 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ff76:	3801      	subs	r0, #1
 800ff78:	b91e      	cbnz	r6, 800ff82 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800ff7a:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800ff7e:	682d      	ldr	r5, [r5, #0]
 800ff80:	600d      	str	r5, [r1, #0]
 800ff82:	b96c      	cbnz	r4, 800ffa0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ff84:	2601      	movs	r6, #1
 800ff86:	e7e6      	b.n	800ff56 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ff88:	b926      	cbnz	r6, 800ff94 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800ff8a:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800ff8e:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800ff92:	600b      	str	r3, [r1, #0]
 800ff94:	b924      	cbnz	r4, 800ffa0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ff96:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800ff9a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ff9e:	6013      	str	r3, [r2, #0]
 800ffa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa2:	3801      	subs	r0, #1
 800ffa4:	b91c      	cbnz	r4, 800ffae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800ffa6:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800ffaa:	6824      	ldr	r4, [r4, #0]
 800ffac:	6014      	str	r4, [r2, #0]
 800ffae:	2e00      	cmp	r6, #0
 800ffb0:	d1f6      	bne.n	800ffa0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ffb2:	2401      	movs	r4, #1
 800ffb4:	e7cf      	b.n	800ff56 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ffb6:	b90e      	cbnz	r6, 800ffbc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800ffb8:	2300      	movs	r3, #0
 800ffba:	600b      	str	r3, [r1, #0]
 800ffbc:	2c00      	cmp	r4, #0
 800ffbe:	d1ef      	bne.n	800ffa0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	e7ec      	b.n	800ff9e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800ffc4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	ed2d 8b0a 	vpush	{d8-d12}
 800ffca:	eef0 ba40 	vmov.f32	s23, s0
 800ffce:	4604      	mov	r4, r0
 800ffd0:	eeb0 ca60 	vmov.f32	s24, s1
 800ffd4:	460d      	mov	r5, r1
 800ffd6:	eef0 aa41 	vmov.f32	s21, s2
 800ffda:	eeb0 ba61 	vmov.f32	s22, s3
 800ffde:	eeb0 9a42 	vmov.f32	s18, s4
 800ffe2:	eef0 9a62 	vmov.f32	s19, s5
 800ffe6:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800ffea:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800ffee:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800fff2:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800fff6:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800fffa:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800fffe:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8010002:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010006:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801000a:	f012 fe15 	bl	8022c38 <sqrtf>
 801000e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010016:	d12e      	bne.n	8010076 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8010018:	ee79 7a6a 	vsub.f32	s15, s18, s21
 801001c:	ee39 7acb 	vsub.f32	s14, s19, s22
 8010020:	eeb0 8a6a 	vmov.f32	s16, s21
 8010024:	eef0 8a4b 	vmov.f32	s17, s22
 8010028:	eea7 8a8a 	vfma.f32	s16, s15, s20
 801002c:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8010030:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8010034:	eee7 8aca 	vfms.f32	s17, s15, s20
 8010038:	2d02      	cmp	r5, #2
 801003a:	dc2f      	bgt.n	801009c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 801003c:	3501      	adds	r5, #1
 801003e:	eef0 1a4b 	vmov.f32	s3, s22
 8010042:	eeb0 1a6a 	vmov.f32	s2, s21
 8010046:	4620      	mov	r0, r4
 8010048:	4629      	mov	r1, r5
 801004a:	eef0 2a68 	vmov.f32	s5, s17
 801004e:	eeb0 2a48 	vmov.f32	s4, s16
 8010052:	eef0 0a4c 	vmov.f32	s1, s24
 8010056:	eeb0 0a6b 	vmov.f32	s0, s23
 801005a:	f7ff ffb3 	bl	800ffc4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801005e:	eef0 0a68 	vmov.f32	s1, s17
 8010062:	eeb0 0a48 	vmov.f32	s0, s16
 8010066:	4620      	mov	r0, r4
 8010068:	f7ff ff55 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801006c:	eeb0 ba68 	vmov.f32	s22, s17
 8010070:	eef0 aa48 	vmov.f32	s21, s16
 8010074:	e7b9      	b.n	800ffea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8010076:	ee38 8a6b 	vsub.f32	s16, s16, s23
 801007a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801007e:	ee78 8acc 	vsub.f32	s17, s17, s24
 8010082:	ee28 7a27 	vmul.f32	s14, s16, s15
 8010086:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801008a:	ee87 8a00 	vdiv.f32	s16, s14, s0
 801008e:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8010092:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8010096:	ee7c 8a28 	vadd.f32	s17, s24, s17
 801009a:	e7cd      	b.n	8010038 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 801009c:	eef0 0a68 	vmov.f32	s1, s17
 80100a0:	4620      	mov	r0, r4
 80100a2:	eeb0 0a48 	vmov.f32	s0, s16
 80100a6:	f7ff ff36 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80100aa:	ecbd 8b0a 	vpop	{d8-d12}
 80100ae:	bd38      	pop	{r3, r4, r5, pc}

080100b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 80100b0:	b510      	push	{r4, lr}
 80100b2:	ed2d 8b0a 	vpush	{d8-d12}
 80100b6:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80100ba:	4604      	mov	r4, r0
 80100bc:	eeb0 ca40 	vmov.f32	s24, s0
 80100c0:	2b02      	cmp	r3, #2
 80100c2:	eeb0 9a60 	vmov.f32	s18, s1
 80100c6:	eef0 9a41 	vmov.f32	s19, s2
 80100ca:	eef0 8a61 	vmov.f32	s17, s3
 80100ce:	eeb0 ba42 	vmov.f32	s22, s4
 80100d2:	eef0 ba62 	vmov.f32	s23, s5
 80100d6:	eeb0 aa43 	vmov.f32	s20, s6
 80100da:	eef0 aa63 	vmov.f32	s21, s7
 80100de:	eeb0 8a44 	vmov.f32	s16, s8
 80100e2:	eef0 ca64 	vmov.f32	s25, s9
 80100e6:	d12c      	bne.n	8010142 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 80100e8:	eef0 0a62 	vmov.f32	s1, s5
 80100ec:	eeb0 0a42 	vmov.f32	s0, s4
 80100f0:	f7ff ff11 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80100f4:	ee79 9acb 	vsub.f32	s19, s19, s22
 80100f8:	ee7a caec 	vsub.f32	s25, s21, s25
 80100fc:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8010100:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010104:	ee69 9aac 	vmul.f32	s19, s19, s25
 8010108:	ee28 8a88 	vmul.f32	s16, s17, s16
 801010c:	eef4 9ac8 	vcmpe.f32	s19, s16
 8010110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010114:	db0f      	blt.n	8010136 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8010116:	2101      	movs	r1, #1
 8010118:	eef0 2a6a 	vmov.f32	s5, s21
 801011c:	eeb0 2a4a 	vmov.f32	s4, s20
 8010120:	4620      	mov	r0, r4
 8010122:	eef0 1a6b 	vmov.f32	s3, s23
 8010126:	eeb0 1a4b 	vmov.f32	s2, s22
 801012a:	eef0 0a49 	vmov.f32	s1, s18
 801012e:	eeb0 0a4c 	vmov.f32	s0, s24
 8010132:	f7ff ff47 	bl	800ffc4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8010136:	eef0 0a6a 	vmov.f32	s1, s21
 801013a:	4620      	mov	r0, r4
 801013c:	eeb0 0a4a 	vmov.f32	s0, s20
 8010140:	e035      	b.n	80101ae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8010142:	2b01      	cmp	r3, #1
 8010144:	d138      	bne.n	80101b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010146:	ee31 4ae2 	vsub.f32	s8, s3, s5
 801014a:	ee33 6a48 	vsub.f32	s12, s6, s16
 801014e:	ee71 7a42 	vsub.f32	s15, s2, s4
 8010152:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8010156:	ee26 7a44 	vnmul.f32	s14, s12, s8
 801015a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801015e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010166:	d027      	beq.n	80101b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010168:	ee28 8a63 	vnmul.f32	s16, s16, s7
 801016c:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8010170:	eea4 8a83 	vfma.f32	s16, s9, s6
 8010174:	eee1 8a22 	vfma.f32	s17, s2, s5
 8010178:	ee68 7a67 	vnmul.f32	s15, s16, s15
 801017c:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8010180:	eee6 7a28 	vfma.f32	s15, s12, s17
 8010184:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8010188:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801018c:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8010190:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8010194:	ee3c ca40 	vsub.f32	s24, s24, s0
 8010198:	ee39 9a60 	vsub.f32	s18, s18, s1
 801019c:	ee29 9a09 	vmul.f32	s18, s18, s18
 80101a0:	eeac 9a0c 	vfma.f32	s18, s24, s24
 80101a4:	eef4 7ac9 	vcmpe.f32	s15, s18
 80101a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ac:	db04      	blt.n	80101b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80101ae:	f7ff feb2 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80101b2:	ecbd 8b0a 	vpop	{d8-d12}
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	eef0 0a6b 	vmov.f32	s1, s23
 80101bc:	4620      	mov	r0, r4
 80101be:	eeb0 0a4b 	vmov.f32	s0, s22
 80101c2:	f7ff fea8 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80101c6:	e7b6      	b.n	8010136 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

080101c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 80101c8:	b510      	push	{r4, lr}
 80101ca:	ed2d 8b0c 	vpush	{d8-d13}
 80101ce:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 80101d2:	4604      	mov	r4, r0
 80101d4:	eeb0 9a40 	vmov.f32	s18, s0
 80101d8:	eef0 9a60 	vmov.f32	s19, s1
 80101dc:	eef0 aa41 	vmov.f32	s21, s2
 80101e0:	eeb0 ba61 	vmov.f32	s22, s3
 80101e4:	b933      	cbnz	r3, 80101f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 80101e6:	f7ff fe96 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80101ea:	eef0 0a4b 	vmov.f32	s1, s22
 80101ee:	eeb0 0a6a 	vmov.f32	s0, s21
 80101f2:	e015      	b.n	8010220 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 80101f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80101f8:	2b02      	cmp	r3, #2
 80101fa:	ee71 8a40 	vsub.f32	s17, s2, s0
 80101fe:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8010202:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010206:	ee28 8a27 	vmul.f32	s16, s16, s15
 801020a:	d10f      	bne.n	801022c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 801020c:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010210:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010214:	f7ff fe7f 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010218:	ee7b 0a68 	vsub.f32	s1, s22, s17
 801021c:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8010220:	4620      	mov	r0, r4
 8010222:	f7ff fe78 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010226:	ecbd 8b0c 	vpop	{d8-d13}
 801022a:	bd10      	pop	{r4, pc}
 801022c:	f7ff fe73 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010230:	eef0 0a69 	vmov.f32	s1, s19
 8010234:	eeb0 0a49 	vmov.f32	s0, s18
 8010238:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8010368 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 801023c:	eeb1 aa68 	vneg.f32	s20, s17
 8010240:	eddf ba4a 	vldr	s23, [pc, #296]	@ 801036c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8010244:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010248:	4620      	mov	r0, r4
 801024a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801024e:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8010370 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8010252:	eddf ca48 	vldr	s25, [pc, #288]	@ 8010374 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8010256:	ed9f da48 	vldr	s26, [pc, #288]	@ 8010378 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 801025a:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801025e:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8010262:	f7ff fe58 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010266:	eef0 0a69 	vmov.f32	s1, s19
 801026a:	eeb0 0a49 	vmov.f32	s0, s18
 801026e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801037c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8010272:	4620      	mov	r0, r4
 8010274:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010278:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801027c:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8010280:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8010284:	f7ff fe47 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010288:	eef0 0a69 	vmov.f32	s1, s19
 801028c:	eeb0 0a49 	vmov.f32	s0, s18
 8010290:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010380 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8010294:	4620      	mov	r0, r4
 8010296:	eee8 0a27 	vfma.f32	s1, s16, s15
 801029a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801029e:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80102a2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80102a6:	f7ff fe36 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80102aa:	eef0 0a69 	vmov.f32	s1, s19
 80102ae:	eeb0 0a49 	vmov.f32	s0, s18
 80102b2:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8010384 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 80102b6:	4620      	mov	r0, r4
 80102b8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80102bc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80102c0:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80102c4:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80102c8:	f7ff fe25 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80102cc:	ee79 0a88 	vadd.f32	s1, s19, s16
 80102d0:	ee39 0a28 	vadd.f32	s0, s18, s17
 80102d4:	4620      	mov	r0, r4
 80102d6:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80102da:	ee30 0a08 	vadd.f32	s0, s0, s16
 80102de:	f7ff fe1a 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80102e2:	eef0 0a69 	vmov.f32	s1, s19
 80102e6:	eeb0 0a49 	vmov.f32	s0, s18
 80102ea:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8010388 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 80102ee:	4620      	mov	r0, r4
 80102f0:	eee8 0a27 	vfma.f32	s1, s16, s15
 80102f4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80102f8:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80102fc:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8010300:	f7ff fe09 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010304:	eef0 0a69 	vmov.f32	s1, s19
 8010308:	eeb0 0a49 	vmov.f32	s0, s18
 801030c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 801038c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8010310:	4620      	mov	r0, r4
 8010312:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010316:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801031a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801031e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8010322:	f7ff fdf8 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010326:	eef0 0a69 	vmov.f32	s1, s19
 801032a:	eeb0 0a49 	vmov.f32	s0, s18
 801032e:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8010390 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8010332:	4620      	mov	r0, r4
 8010334:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010338:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801033c:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8010340:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8010344:	f7ff fde7 	bl	800ff16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010348:	eef0 0a69 	vmov.f32	s1, s19
 801034c:	eeb0 0a49 	vmov.f32	s0, s18
 8010350:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010394 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8010354:	4620      	mov	r0, r4
 8010356:	eee8 0a27 	vfma.f32	s1, s16, s15
 801035a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801035e:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8010362:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8010366:	e73e      	b.n	80101e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8010368:	3d23d70a 	.word	0x3d23d70a
 801036c:	3e8f5c29 	.word	0x3e8f5c29
 8010370:	3f19999a 	.word	0x3f19999a
 8010374:	3f4ccccd 	.word	0x3f4ccccd
 8010378:	3f75c28f 	.word	0x3f75c28f
 801037c:	3e4ccccd 	.word	0x3e4ccccd
 8010380:	3ecccccd 	.word	0x3ecccccd
 8010384:	3f3851ec 	.word	0x3f3851ec
 8010388:	3fa3d70a 	.word	0x3fa3d70a
 801038c:	3fcccccd 	.word	0x3fcccccd
 8010390:	3fe66666 	.word	0x3fe66666
 8010394:	3ffae148 	.word	0x3ffae148

08010398 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	ed2d 8b06 	vpush	{d8-d10}
 801039e:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80103a2:	eef0 aa40 	vmov.f32	s21, s0
 80103a6:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 80103aa:	4604      	mov	r4, r0
 80103ac:	ee30 8ac8 	vsub.f32	s16, s1, s16
 80103b0:	ee30 9a49 	vsub.f32	s18, s0, s18
 80103b4:	eeb0 aa60 	vmov.f32	s20, s1
 80103b8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80103bc:	eea9 0a09 	vfma.f32	s0, s18, s18
 80103c0:	f012 fc3a 	bl	8022c38 <sqrtf>
 80103c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80103c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103cc:	dd36      	ble.n	801043c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 80103ce:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80103d2:	2600      	movs	r6, #0
 80103d4:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 80103d8:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80103dc:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 80103e0:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 80103e4:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80103e8:	eec8 8a26 	vdiv.f32	s17, s16, s13
 80103ec:	ee89 8a26 	vdiv.f32	s16, s18, s13
 80103f0:	ee70 9a28 	vadd.f32	s19, s0, s17
 80103f4:	ee78 8aaa 	vadd.f32	s17, s17, s21
 80103f8:	ee30 9ac8 	vsub.f32	s18, s1, s16
 80103fc:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010400:	b1fd      	cbz	r5, 8010442 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8010402:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8010406:	eef0 0a49 	vmov.f32	s1, s18
 801040a:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 801040e:	eeb0 0a69 	vmov.f32	s0, s19
 8010412:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8010416:	4620      	mov	r0, r4
 8010418:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 801041c:	f7ff fd64 	bl	800fee8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8010420:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8010424:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8010428:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 801042c:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8010430:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8010434:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8010438:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 801043c:	ecbd 8b06 	vpop	{d8-d10}
 8010440:	bd70      	pop	{r4, r5, r6, pc}
 8010442:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8010446:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 801044a:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801044e:	b16b      	cbz	r3, 801046c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8010450:	eef0 1a49 	vmov.f32	s3, s18
 8010454:	4620      	mov	r0, r4
 8010456:	eeb0 1a69 	vmov.f32	s2, s19
 801045a:	eef0 0a62 	vmov.f32	s1, s5
 801045e:	eeb0 0a42 	vmov.f32	s0, s4
 8010462:	f7ff feb1 	bl	80101c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010466:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 801046a:	e7db      	b.n	8010424 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 801046c:	eef0 4a48 	vmov.f32	s9, s16
 8010470:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8010474:	eeb0 4a68 	vmov.f32	s8, s17
 8010478:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801047c:	eef0 3a49 	vmov.f32	s7, s18
 8010480:	4620      	mov	r0, r4
 8010482:	eeb0 3a69 	vmov.f32	s6, s19
 8010486:	f7ff fe13 	bl	80100b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801048a:	e7cb      	b.n	8010424 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0801048c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 801048c:	ee07 2a90 	vmov	s15, r2
 8010490:	ee07 1a10 	vmov	s14, r1
 8010494:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8010498:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80104ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 801049c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80104a0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80104a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80104a8:	f7ff bf76 	b.w	8010398 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80104ac:	3d000000 	.word	0x3d000000

080104b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 80104b0:	b538      	push	{r3, r4, r5, lr}
 80104b2:	ed2d 8b02 	vpush	{d8}
 80104b6:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 80104ba:	4604      	mov	r4, r0
 80104bc:	b31d      	cbz	r5, 8010506 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 80104be:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 80104c2:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80104c6:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 80104ca:	ee78 8a67 	vsub.f32	s17, s16, s15
 80104ce:	ee38 8a27 	vadd.f32	s16, s16, s15
 80104d2:	eef0 0a68 	vmov.f32	s1, s17
 80104d6:	f7ff fd07 	bl	800fee8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80104da:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80104de:	eef0 1a48 	vmov.f32	s3, s16
 80104e2:	4620      	mov	r0, r4
 80104e4:	eeb0 0a41 	vmov.f32	s0, s2
 80104e8:	eef0 0a68 	vmov.f32	s1, s17
 80104ec:	f7ff fe6c 	bl	80101c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80104f0:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80104f4:	eef0 1a68 	vmov.f32	s3, s17
 80104f8:	4620      	mov	r0, r4
 80104fa:	eef0 0a48 	vmov.f32	s1, s16
 80104fe:	eeb0 0a41 	vmov.f32	s0, s2
 8010502:	f7ff fe61 	bl	80101c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010506:	4628      	mov	r0, r5
 8010508:	ecbd 8b02 	vpop	{d8}
 801050c:	bd38      	pop	{r3, r4, r5, pc}

0801050e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 801050e:	b510      	push	{r4, lr}
 8010510:	ed2d 8b02 	vpush	{d8}
 8010514:	4604      	mov	r4, r0
 8010516:	eeb0 8a40 	vmov.f32	s16, s0
 801051a:	eef0 8a60 	vmov.f32	s17, s1
 801051e:	f7ff ffc7 	bl	80104b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010522:	b9d0      	cbnz	r0, 801055a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8010524:	4620      	mov	r0, r4
 8010526:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 801052a:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 801052e:	eef0 0a68 	vmov.f32	s1, s17
 8010532:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8010536:	eeb0 0a48 	vmov.f32	s0, s16
 801053a:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 801053e:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8010542:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8010546:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 801054a:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801054e:	f7ff fdaf 	bl	80100b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8010552:	2001      	movs	r0, #1
 8010554:	ecbd 8b02 	vpop	{d8}
 8010558:	bd10      	pop	{r4, pc}
 801055a:	2000      	movs	r0, #0
 801055c:	e7fa      	b.n	8010554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0801055e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 801055e:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8010562:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8010566:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 801056a:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 801056e:	f7ff be2b 	b.w	80101c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08010574 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8010574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010578:	b089      	sub	sp, #36	@ 0x24
 801057a:	461c      	mov	r4, r3
 801057c:	4682      	mov	sl, r0
 801057e:	4615      	mov	r5, r2
 8010580:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010584:	f10d 0820 	add.w	r8, sp, #32
 8010588:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801058a:	9304      	str	r3, [sp, #16]
 801058c:	2300      	movs	r3, #0
 801058e:	9105      	str	r1, [sp, #20]
 8010590:	9306      	str	r3, [sp, #24]
 8010592:	f848 3d04 	str.w	r3, [r8, #-4]!
 8010596:	9b04      	ldr	r3, [sp, #16]
 8010598:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 801059c:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 80105a0:	9b05      	ldr	r3, [sp, #20]
 80105a2:	429d      	cmp	r5, r3
 80105a4:	d96d      	bls.n	8010682 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 80105a6:	3d01      	subs	r5, #1
 80105a8:	f819 3005 	ldrb.w	r3, [r9, r5]
 80105ac:	2b06      	cmp	r3, #6
 80105ae:	d8f7      	bhi.n	80105a0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80105b0:	a201      	add	r2, pc, #4	@ (adr r2, 80105b8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 80105b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b6:	bf00      	nop
 80105b8:	080105d7 	.word	0x080105d7
 80105bc:	080105a1 	.word	0x080105a1
 80105c0:	080105d5 	.word	0x080105d5
 80105c4:	080105f9 	.word	0x080105f9
 80105c8:	080105f9 	.word	0x080105f9
 80105cc:	080105fd 	.word	0x080105fd
 80105d0:	0801063d 	.word	0x0801063d
 80105d4:	3c02      	subs	r4, #2
 80105d6:	4650      	mov	r0, sl
 80105d8:	9400      	str	r4, [sp, #0]
 80105da:	462b      	mov	r3, r5
 80105dc:	4642      	mov	r2, r8
 80105de:	a906      	add	r1, sp, #24
 80105e0:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80105e4:	f7ff fcae 	bl	800ff44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80105e8:	eddd 0a07 	vldr	s1, [sp, #28]
 80105ec:	ed9d 0a06 	vldr	s0, [sp, #24]
 80105f0:	4630      	mov	r0, r6
 80105f2:	f7ff fed1 	bl	8010398 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80105f6:	e7d3      	b.n	80105a0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80105f8:	3c01      	subs	r4, #1
 80105fa:	e7ec      	b.n	80105d6 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 80105fc:	f1a4 0b04 	sub.w	fp, r4, #4
 8010600:	3c02      	subs	r4, #2
 8010602:	4650      	mov	r0, sl
 8010604:	462b      	mov	r3, r5
 8010606:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801060a:	f8cd b000 	str.w	fp, [sp]
 801060e:	4642      	mov	r2, r8
 8010610:	a906      	add	r1, sp, #24
 8010612:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8010616:	f7ff fc95 	bl	800ff44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801061a:	eddd 2a07 	vldr	s5, [sp, #28]
 801061e:	ed9d 2a06 	vldr	s4, [sp, #24]
 8010622:	4630      	mov	r0, r6
 8010624:	ed54 1a01 	vldr	s3, [r4, #-4]
 8010628:	ed14 1a02 	vldr	s2, [r4, #-8]
 801062c:	edd4 0a01 	vldr	s1, [r4, #4]
 8010630:	ed94 0a00 	vldr	s0, [r4]
 8010634:	f7ff fc1a 	bl	800fe6c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010638:	465c      	mov	r4, fp
 801063a:	e7b1      	b.n	80105a0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801063c:	f1a4 0b06 	sub.w	fp, r4, #6
 8010640:	3c02      	subs	r4, #2
 8010642:	4650      	mov	r0, sl
 8010644:	462b      	mov	r3, r5
 8010646:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801064a:	f8cd b000 	str.w	fp, [sp]
 801064e:	4642      	mov	r2, r8
 8010650:	a906      	add	r1, sp, #24
 8010652:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8010656:	f7ff fc75 	bl	800ff44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801065a:	eddd 3a07 	vldr	s7, [sp, #28]
 801065e:	ed9d 3a06 	vldr	s6, [sp, #24]
 8010662:	4630      	mov	r0, r6
 8010664:	ed54 2a03 	vldr	s5, [r4, #-12]
 8010668:	ed14 2a04 	vldr	s4, [r4, #-16]
 801066c:	ed54 1a01 	vldr	s3, [r4, #-4]
 8010670:	ed14 1a02 	vldr	s2, [r4, #-8]
 8010674:	edd4 0a01 	vldr	s1, [r4, #4]
 8010678:	ed94 0a00 	vldr	s0, [r4]
 801067c:	f7ff fc15 	bl	800feaa <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010680:	e7da      	b.n	8010638 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8010682:	9b04      	ldr	r3, [sp, #16]
 8010684:	b113      	cbz	r3, 801068c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8010686:	4630      	mov	r0, r6
 8010688:	f7ff ff69 	bl	801055e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 801068c:	b009      	add	sp, #36	@ 0x24
 801068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010692:	bf00      	nop

08010694 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8010694:	eef0 7a60 	vmov.f32	s15, s1
 8010698:	6803      	ldr	r3, [r0, #0]
 801069a:	689b      	ldr	r3, [r3, #8]
 801069c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80106a0:	ee17 2a90 	vmov	r2, s15
 80106a4:	eef0 7a40 	vmov.f32	s15, s0
 80106a8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80106ac:	ee17 1a90 	vmov	r1, s15
 80106b0:	4718      	bx	r3
	...

080106b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 80106b4:	4b04      	ldr	r3, [pc, #16]	@ (80106c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 80106b6:	b510      	push	{r4, lr}
 80106b8:	4604      	mov	r4, r0
 80106ba:	f840 3b14 	str.w	r3, [r0], #20
 80106be:	f001 fa01 	bl	8011ac4 <_ZN8touchgfx7OutlineD1Ev>
 80106c2:	4620      	mov	r0, r4
 80106c4:	bd10      	pop	{r4, pc}
 80106c6:	bf00      	nop
 80106c8:	08027c10 	.word	0x08027c10

080106cc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 80106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d0:	ed2d 8b04 	vpush	{d8-d9}
 80106d4:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 80106d8:	b0b5      	sub	sp, #212	@ 0xd4
 80106da:	4605      	mov	r5, r0
 80106dc:	468b      	mov	fp, r1
 80106de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80106e2:	9206      	str	r2, [sp, #24]
 80106e4:	461e      	mov	r6, r3
 80106e6:	2400      	movs	r4, #0
 80106e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ec:	f240 814f 	bls.w	801098e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 80106f0:	23ff      	movs	r3, #255	@ 0xff
 80106f2:	1d02      	adds	r2, r0, #4
 80106f4:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8010994 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 80106f8:	f04f 0800 	mov.w	r8, #0
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	af08      	add	r7, sp, #32
 8010700:	6981      	ldr	r1, [r0, #24]
 8010702:	a808      	add	r0, sp, #32
 8010704:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010706:	eef0 9a49 	vmov.f32	s19, s18
 801070a:	f011 fdeb 	bl	80222e4 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801070e:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8010712:	4ba1      	ldr	r3, [pc, #644]	@ (8010998 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8010714:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801071c:	2201      	movs	r2, #1
 801071e:	9308      	str	r3, [sp, #32]
 8010720:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8010724:	edd5 6a08 	vldr	s13, [r5, #32]
 8010728:	eeb0 8a49 	vmov.f32	s16, s18
 801072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010730:	9325      	str	r3, [sp, #148]	@ 0x94
 8010732:	f04f 0300 	mov.w	r3, #0
 8010736:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 801073a:	7f6a      	ldrb	r2, [r5, #29]
 801073c:	eef0 8a49 	vmov.f32	s17, s18
 8010740:	bf48      	it	mi
 8010742:	eef1 7a67 	vnegmi.f32	s15, s15
 8010746:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 801074a:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 801074e:	46c1      	mov	r9, r8
 8010750:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010754:	f04f 0a01 	mov.w	sl, #1
 8010758:	ee67 7a87 	vmul.f32	s15, s15, s14
 801075c:	7fab      	ldrb	r3, [r5, #30]
 801075e:	942a      	str	r4, [sp, #168]	@ 0xa8
 8010760:	435a      	muls	r2, r3
 8010762:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8010766:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801076a:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 801076e:	1c53      	adds	r3, r2, #1
 8010770:	942b      	str	r4, [sp, #172]	@ 0xac
 8010772:	942c      	str	r4, [sp, #176]	@ 0xb0
 8010774:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010778:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801077c:	942d      	str	r4, [sp, #180]	@ 0xb4
 801077e:	942e      	str	r4, [sp, #184]	@ 0xb8
 8010780:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010788:	942f      	str	r4, [sp, #188]	@ 0xbc
 801078a:	9430      	str	r4, [sp, #192]	@ 0xc0
 801078c:	9431      	str	r4, [sp, #196]	@ 0xc4
 801078e:	9432      	str	r4, [sp, #200]	@ 0xc8
 8010790:	9433      	str	r4, [sp, #204]	@ 0xcc
 8010792:	4644      	mov	r4, r8
 8010794:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8010798:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 801079c:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 80107a0:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 80107a4:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 80107a8:	9b06      	ldr	r3, [sp, #24]
 80107aa:	454b      	cmp	r3, r9
 80107ac:	f000 80cc 	beq.w	8010948 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 80107b0:	f109 0301 	add.w	r3, r9, #1
 80107b4:	9305      	str	r3, [sp, #20]
 80107b6:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80107ba:	2b06      	cmp	r3, #6
 80107bc:	d839      	bhi.n	8010832 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80107be:	e8df f003 	tbb	[pc, r3]
 80107c2:	3b04      	.short	0x3b04
 80107c4:	817c6f60 	.word	0x817c6f60
 80107c8:	a0          	.byte	0xa0
 80107c9:	00          	.byte	0x00
 80107ca:	45c1      	cmp	r9, r8
 80107cc:	d92b      	bls.n	8010826 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80107ce:	eef0 0a49 	vmov.f32	s1, s18
 80107d2:	4638      	mov	r0, r7
 80107d4:	eeb0 0a69 	vmov.f32	s0, s19
 80107d8:	f7ff fdde 	bl	8010398 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80107dc:	4638      	mov	r0, r7
 80107de:	f7ff fe67 	bl	80104b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80107e2:	4681      	mov	r9, r0
 80107e4:	b9f8      	cbnz	r0, 8010826 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80107e6:	eef0 0a49 	vmov.f32	s1, s18
 80107ea:	4638      	mov	r0, r7
 80107ec:	eeb0 0a69 	vmov.f32	s0, s19
 80107f0:	f7ff fe8d 	bl	801050e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80107f4:	4628      	mov	r0, r5
 80107f6:	4623      	mov	r3, r4
 80107f8:	9a05      	ldr	r2, [sp, #20]
 80107fa:	4641      	mov	r1, r8
 80107fc:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8010800:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8010804:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8010808:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 801080c:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8010810:	e9cd b600 	strd	fp, r6, [sp]
 8010814:	f7ff feae 	bl	8010574 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010818:	eef0 0a49 	vmov.f32	s1, s18
 801081c:	eeb0 0a69 	vmov.f32	s0, s19
 8010820:	4638      	mov	r0, r7
 8010822:	f7ff fe74 	bl	801050e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8010826:	eeb0 8a49 	vmov.f32	s16, s18
 801082a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801082e:	eef0 8a69 	vmov.f32	s17, s19
 8010832:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010836:	e7b7      	b.n	80107a8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8010838:	45c1      	cmp	r9, r8
 801083a:	d90d      	bls.n	8010858 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 801083c:	4638      	mov	r0, r7
 801083e:	f7ff fe37 	bl	80104b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010842:	b948      	cbnz	r0, 8010858 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8010844:	4623      	mov	r3, r4
 8010846:	464a      	mov	r2, r9
 8010848:	4641      	mov	r1, r8
 801084a:	4628      	mov	r0, r5
 801084c:	e9cd a702 	strd	sl, r7, [sp, #8]
 8010850:	e9cd b600 	strd	fp, r6, [sp]
 8010854:	f7ff fe8e 	bl	8010574 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010858:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801085c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8010860:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8010864:	3402      	adds	r4, #2
 8010866:	edd3 8a00 	vldr	s17, [r3]
 801086a:	46c8      	mov	r8, r9
 801086c:	ed93 8a01 	vldr	s16, [r3, #4]
 8010870:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8010874:	eef0 9a68 	vmov.f32	s19, s17
 8010878:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 801087c:	eeb0 9a48 	vmov.f32	s18, s16
 8010880:	e7d7      	b.n	8010832 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010882:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010886:	4638      	mov	r0, r7
 8010888:	3402      	adds	r4, #2
 801088a:	edd3 8a00 	vldr	s17, [r3]
 801088e:	ed93 8a01 	vldr	s16, [r3, #4]
 8010892:	eeb0 0a68 	vmov.f32	s0, s17
 8010896:	eef0 0a48 	vmov.f32	s1, s16
 801089a:	f7ff fd7d 	bl	8010398 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801089e:	e7c8      	b.n	8010832 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80108a0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80108a4:	edd3 8a00 	vldr	s17, [r3]
 80108a8:	eef0 0a48 	vmov.f32	s1, s16
 80108ac:	4638      	mov	r0, r7
 80108ae:	eeb0 0a68 	vmov.f32	s0, s17
 80108b2:	3401      	adds	r4, #1
 80108b4:	f7ff fd70 	bl	8010398 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80108b8:	e7bb      	b.n	8010832 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80108ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80108be:	ed93 8a00 	vldr	s16, [r3]
 80108c2:	e7f1      	b.n	80108a8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 80108c4:	00a3      	lsls	r3, r4, #2
 80108c6:	eef0 0a48 	vmov.f32	s1, s16
 80108ca:	eeb0 0a68 	vmov.f32	s0, s17
 80108ce:	4638      	mov	r0, r7
 80108d0:	f103 0208 	add.w	r2, r3, #8
 80108d4:	f103 090c 	add.w	r9, r3, #12
 80108d8:	4433      	add	r3, r6
 80108da:	3404      	adds	r4, #4
 80108dc:	4432      	add	r2, r6
 80108de:	44b1      	add	r9, r6
 80108e0:	edd3 1a01 	vldr	s3, [r3, #4]
 80108e4:	ed92 2a00 	vldr	s4, [r2]
 80108e8:	edd9 2a00 	vldr	s5, [r9]
 80108ec:	ed93 1a00 	vldr	s2, [r3]
 80108f0:	9207      	str	r2, [sp, #28]
 80108f2:	f7ff fabb 	bl	800fe6c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80108f6:	9a07      	ldr	r2, [sp, #28]
 80108f8:	ed99 8a00 	vldr	s16, [r9]
 80108fc:	edd2 8a00 	vldr	s17, [r2]
 8010900:	e797      	b.n	8010832 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010902:	00a3      	lsls	r3, r4, #2
 8010904:	eef0 0a48 	vmov.f32	s1, s16
 8010908:	eeb0 0a68 	vmov.f32	s0, s17
 801090c:	4638      	mov	r0, r7
 801090e:	f103 0210 	add.w	r2, r3, #16
 8010912:	f103 0914 	add.w	r9, r3, #20
 8010916:	4433      	add	r3, r6
 8010918:	3406      	adds	r4, #6
 801091a:	4432      	add	r2, r6
 801091c:	44b1      	add	r9, r6
 801091e:	edd3 2a03 	vldr	s5, [r3, #12]
 8010922:	ed92 3a00 	vldr	s6, [r2]
 8010926:	edd9 3a00 	vldr	s7, [r9]
 801092a:	ed93 2a02 	vldr	s4, [r3, #8]
 801092e:	edd3 1a01 	vldr	s3, [r3, #4]
 8010932:	ed93 1a00 	vldr	s2, [r3]
 8010936:	9207      	str	r2, [sp, #28]
 8010938:	f7ff fab7 	bl	800feaa <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801093c:	9a07      	ldr	r2, [sp, #28]
 801093e:	ed99 8a00 	vldr	s16, [r9]
 8010942:	edd2 8a00 	vldr	s17, [r2]
 8010946:	e774      	b.n	8010832 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010948:	9b06      	ldr	r3, [sp, #24]
 801094a:	af08      	add	r7, sp, #32
 801094c:	4543      	cmp	r3, r8
 801094e:	d90f      	bls.n	8010970 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8010950:	4638      	mov	r0, r7
 8010952:	f7ff fdad 	bl	80104b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010956:	b958      	cbnz	r0, 8010970 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8010958:	2301      	movs	r3, #1
 801095a:	9703      	str	r7, [sp, #12]
 801095c:	f8cd b000 	str.w	fp, [sp]
 8010960:	4641      	mov	r1, r8
 8010962:	9a06      	ldr	r2, [sp, #24]
 8010964:	4628      	mov	r0, r5
 8010966:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801096a:	4623      	mov	r3, r4
 801096c:	f7ff fe02 	bl	8010574 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010970:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8010974:	4638      	mov	r0, r7
 8010976:	f011 fd49 	bl	802240c <_ZN8touchgfx6Canvas6renderEh>
 801097a:	4604      	mov	r4, r0
 801097c:	4638      	mov	r0, r7
 801097e:	f7ff fe99 	bl	80106b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8010982:	4620      	mov	r0, r4
 8010984:	b035      	add	sp, #212	@ 0xd4
 8010986:	ecbd 8b04 	vpop	{d8-d9}
 801098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098e:	2401      	movs	r4, #1
 8010990:	e7f7      	b.n	8010982 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8010992:	bf00      	nop
 8010994:	00000000 	.word	0x00000000
 8010998:	08027530 	.word	0x08027530

0801099c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 801099c:	b510      	push	{r4, lr}
 801099e:	4604      	mov	r4, r0
 80109a0:	f7ff fe88 	bl	80106b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80109a4:	21b0      	movs	r1, #176	@ 0xb0
 80109a6:	4620      	mov	r0, r4
 80109a8:	f012 f91c 	bl	8022be4 <_ZdlPvj>
 80109ac:	4620      	mov	r0, r4
 80109ae:	bd10      	pop	{r4, pc}

080109b0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 80109b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b4:	4698      	mov	r8, r3
 80109b6:	23ff      	movs	r3, #255	@ 0xff
 80109b8:	4607      	mov	r7, r0
 80109ba:	4689      	mov	r9, r1
 80109bc:	4692      	mov	sl, r2
 80109be:	1d02      	adds	r2, r0, #4
 80109c0:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80109c4:	2400      	movs	r4, #0
 80109c6:	44ca      	add	sl, r9
 80109c8:	ed2d 8b06 	vpush	{d8-d10}
 80109cc:	b0aa      	sub	sp, #168	@ 0xa8
 80109ce:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8010bd4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	eef0 8a48 	vmov.f32	s17, s16
 80109d8:	6981      	ldr	r1, [r0, #24]
 80109da:	a80d      	add	r0, sp, #52	@ 0x34
 80109dc:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80109de:	f011 fc81 	bl	80222e4 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80109e2:	7f3b      	ldrb	r3, [r7, #28]
 80109e4:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8010bd4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80109e8:	4628      	mov	r0, r5
 80109ea:	1e5a      	subs	r2, r3, #1
 80109ec:	eeb0 0a60 	vmov.f32	s0, s1
 80109f0:	4253      	negs	r3, r2
 80109f2:	4153      	adcs	r3, r2
 80109f4:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 80109f8:	f005 f9ed 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80109fc:	eeb0 9a40 	vmov.f32	s18, s0
 8010a00:	eef0 9a60 	vmov.f32	s19, s1
 8010a04:	45ca      	cmp	sl, r9
 8010a06:	f000 80cd 	beq.w	8010ba4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8010a0a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010a0e:	2b06      	cmp	r3, #6
 8010a10:	d8f8      	bhi.n	8010a04 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010a12:	e8df f003 	tbb	[pc, r3]
 8010a16:	0804      	.short	0x0804
 8010a18:	58533f2a 	.word	0x58533f2a
 8010a1c:	8a          	.byte	0x8a
 8010a1d:	00          	.byte	0x00
 8010a1e:	a80d      	add	r0, sp, #52	@ 0x34
 8010a20:	f011 fcd2 	bl	80223c8 <_ZN8touchgfx6Canvas5closeEv>
 8010a24:	e7ee      	b.n	8010a04 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010a26:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010a2a:	4628      	mov	r0, r5
 8010a2c:	ed93 8a01 	vldr	s16, [r3, #4]
 8010a30:	edd3 8a00 	vldr	s17, [r3]
 8010a34:	eef0 0a48 	vmov.f32	s1, s16
 8010a38:	eeb0 0a68 	vmov.f32	s0, s17
 8010a3c:	f005 f9cb 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010a40:	a80d      	add	r0, sp, #52	@ 0x34
 8010a42:	eef0 7a60 	vmov.f32	s15, s1
 8010a46:	eeb0 9a40 	vmov.f32	s18, s0
 8010a4a:	eef0 9a60 	vmov.f32	s19, s1
 8010a4e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010a52:	ee17 2a90 	vmov	r2, s15
 8010a56:	eef0 7a40 	vmov.f32	s15, s0
 8010a5a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010a5e:	ee17 1a90 	vmov	r1, s15
 8010a62:	f011 fd8b 	bl	802257c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8010a66:	3402      	adds	r4, #2
 8010a68:	e7cc      	b.n	8010a04 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010a6a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010a6e:	4628      	mov	r0, r5
 8010a70:	edd3 8a00 	vldr	s17, [r3]
 8010a74:	ed93 8a01 	vldr	s16, [r3, #4]
 8010a78:	eeb0 0a68 	vmov.f32	s0, s17
 8010a7c:	eef0 0a48 	vmov.f32	s1, s16
 8010a80:	f005 f9a9 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010a84:	a80d      	add	r0, sp, #52	@ 0x34
 8010a86:	eeb0 9a40 	vmov.f32	s18, s0
 8010a8a:	eef0 9a60 	vmov.f32	s19, s1
 8010a8e:	f7ff fe01 	bl	8010694 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8010a92:	e7e8      	b.n	8010a66 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8010a94:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010a98:	edd3 8a00 	vldr	s17, [r3]
 8010a9c:	eef0 0a48 	vmov.f32	s1, s16
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	eeb0 0a68 	vmov.f32	s0, s17
 8010aa6:	3401      	adds	r4, #1
 8010aa8:	f005 f995 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010aac:	a80d      	add	r0, sp, #52	@ 0x34
 8010aae:	eef0 9a60 	vmov.f32	s19, s1
 8010ab2:	eeb0 9a40 	vmov.f32	s18, s0
 8010ab6:	f7ff fded 	bl	8010694 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8010aba:	e7a3      	b.n	8010a04 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010abc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010ac0:	ed93 8a00 	vldr	s16, [r3]
 8010ac4:	e7ea      	b.n	8010a9c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8010ac6:	1ca3      	adds	r3, r4, #2
 8010ac8:	4628      	mov	r0, r5
 8010aca:	3404      	adds	r4, #4
 8010acc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8010ad0:	ed53 0a01 	vldr	s1, [r3, #-4]
 8010ad4:	ed13 0a02 	vldr	s0, [r3, #-8]
 8010ad8:	edd3 8a00 	vldr	s17, [r3]
 8010adc:	ed93 8a01 	vldr	s16, [r3, #4]
 8010ae0:	f005 f979 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010ae4:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8010ae8:	eeb0 0a68 	vmov.f32	s0, s17
 8010aec:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8010af0:	eef0 0a48 	vmov.f32	s1, s16
 8010af4:	4628      	mov	r0, r5
 8010af6:	f005 f96e 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010afa:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8010afe:	eef0 2a60 	vmov.f32	s5, s1
 8010b02:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8010b06:	eeb0 2a40 	vmov.f32	s4, s0
 8010b0a:	a80d      	add	r0, sp, #52	@ 0x34
 8010b0c:	eeb0 aa40 	vmov.f32	s20, s0
 8010b10:	eef0 aa60 	vmov.f32	s21, s1
 8010b14:	eeb0 0a49 	vmov.f32	s0, s18
 8010b18:	eef0 0a69 	vmov.f32	s1, s19
 8010b1c:	f7ff f9a6 	bl	800fe6c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010b20:	eef0 9a6a 	vmov.f32	s19, s21
 8010b24:	eeb0 9a4a 	vmov.f32	s18, s20
 8010b28:	e76c      	b.n	8010a04 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010b2a:	1d26      	adds	r6, r4, #4
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	3406      	adds	r4, #6
 8010b30:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010b34:	ed56 0a03 	vldr	s1, [r6, #-12]
 8010b38:	ed16 0a04 	vldr	s0, [r6, #-16]
 8010b3c:	edd6 8a00 	vldr	s17, [r6]
 8010b40:	ed96 8a01 	vldr	s16, [r6, #4]
 8010b44:	f005 f947 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010b48:	ed8d 0a07 	vstr	s0, [sp, #28]
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	ed16 0a02 	vldr	s0, [r6, #-8]
 8010b52:	edcd 0a08 	vstr	s1, [sp, #32]
 8010b56:	ed56 0a01 	vldr	s1, [r6, #-4]
 8010b5a:	f005 f93c 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010b5e:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8010b62:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8010b66:	eeb0 0a68 	vmov.f32	s0, s17
 8010b6a:	eef0 0a48 	vmov.f32	s1, s16
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f005 f931 	bl	8015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010b74:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8010b78:	eeb0 3a40 	vmov.f32	s6, s0
 8010b7c:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8010b80:	eef0 3a60 	vmov.f32	s7, s1
 8010b84:	eddd 1a08 	vldr	s3, [sp, #32]
 8010b88:	eeb0 aa40 	vmov.f32	s20, s0
 8010b8c:	ed9d 1a07 	vldr	s2, [sp, #28]
 8010b90:	eef0 aa60 	vmov.f32	s21, s1
 8010b94:	a80d      	add	r0, sp, #52	@ 0x34
 8010b96:	eef0 0a69 	vmov.f32	s1, s19
 8010b9a:	eeb0 0a49 	vmov.f32	s0, s18
 8010b9e:	f7ff f984 	bl	800feaa <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010ba2:	e7bd      	b.n	8010b20 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8010ba4:	7f7b      	ldrb	r3, [r7, #29]
 8010ba6:	a80d      	add	r0, sp, #52	@ 0x34
 8010ba8:	7fb9      	ldrb	r1, [r7, #30]
 8010baa:	4359      	muls	r1, r3
 8010bac:	1c4b      	adds	r3, r1, #1
 8010bae:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8010bb2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010bb6:	f011 fc29 	bl	802240c <_ZN8touchgfx6Canvas6renderEh>
 8010bba:	4b07      	ldr	r3, [pc, #28]	@ (8010bd8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	a812      	add	r0, sp, #72	@ 0x48
 8010bc0:	930d      	str	r3, [sp, #52]	@ 0x34
 8010bc2:	f000 ff7f 	bl	8011ac4 <_ZN8touchgfx7OutlineD1Ev>
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	b02a      	add	sp, #168	@ 0xa8
 8010bca:	ecbd 8b06 	vpop	{d8-d10}
 8010bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bd2:	bf00      	nop
 8010bd4:	00000000 	.word	0x00000000
 8010bd8:	08027c10 	.word	0x08027c10

08010bdc <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8010bdc:	b410      	push	{r4}
 8010bde:	7f04      	ldrb	r4, [r0, #28]
 8010be0:	b11c      	cbz	r4, 8010bea <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8010be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010be6:	f7ff bee3 	b.w	80109b0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8010bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bee:	f7ff bd6d 	b.w	80106cc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

08010bf4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8010bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf8:	4691      	mov	r9, r2
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	b085      	sub	sp, #20
 8010bfe:	4605      	mov	r5, r0
 8010c00:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8010c04:	4688      	mov	r8, r1
 8010c06:	469a      	mov	sl, r3
 8010c08:	ab02      	add	r3, sp, #8
 8010c0a:	6851      	ldr	r1, [r2, #4]
 8010c0c:	af02      	add	r7, sp, #8
 8010c0e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010c12:	c303      	stmia	r3!, {r0, r1}
 8010c14:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	dd08      	ble.n	8010c2e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010c1c:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8010c20:	2c00      	cmp	r4, #0
 8010c22:	dd04      	ble.n	8010c2e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010c24:	4a2e      	ldr	r2, [pc, #184]	@ (8010ce0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 8010c26:	7812      	ldrb	r2, [r2, #0]
 8010c28:	b122      	cbz	r2, 8010c34 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 8010c2a:	2a01      	cmp	r2, #1
 8010c2c:	d02d      	beq.n	8010c8a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 8010c2e:	b005      	add	sp, #20
 8010c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010c38:	441c      	add	r4, r3
 8010c3a:	b2a4      	uxth	r4, r4
 8010c3c:	b226      	sxth	r6, r4
 8010c3e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8010c42:	42b3      	cmp	r3, r6
 8010c44:	daf3      	bge.n	8010c2e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010c46:	4653      	mov	r3, sl
 8010c48:	464a      	mov	r2, r9
 8010c4a:	4641      	mov	r1, r8
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	e9cd b700 	strd	fp, r7, [sp]
 8010c52:	f7ff ffc3 	bl	8010bdc <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8010c56:	b940      	cbnz	r0, 8010c6a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8010c58:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d004      	beq.n	8010c6a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8010c60:	3301      	adds	r3, #1
 8010c62:	105b      	asrs	r3, r3, #1
 8010c64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010c68:	e7ed      	b.n	8010c46 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 8010c6a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8010c6e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010c72:	4413      	add	r3, r2
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	441a      	add	r2, r3
 8010c78:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010c7c:	b212      	sxth	r2, r2
 8010c7e:	4296      	cmp	r6, r2
 8010c80:	dadd      	bge.n	8010c3e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8010c82:	1ae3      	subs	r3, r4, r3
 8010c84:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010c88:	e7d9      	b.n	8010c3e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8010c8a:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8010c8e:	441c      	add	r4, r3
 8010c90:	b2a4      	uxth	r4, r4
 8010c92:	b226      	sxth	r6, r4
 8010c94:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8010c98:	42b3      	cmp	r3, r6
 8010c9a:	dac8      	bge.n	8010c2e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010c9c:	4653      	mov	r3, sl
 8010c9e:	464a      	mov	r2, r9
 8010ca0:	4641      	mov	r1, r8
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	e9cd b700 	strd	fp, r7, [sp]
 8010ca8:	f7ff ff98 	bl	8010bdc <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8010cac:	b940      	cbnz	r0, 8010cc0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8010cae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d004      	beq.n	8010cc0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	105b      	asrs	r3, r3, #1
 8010cba:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010cbe:	e7ed      	b.n	8010c9c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 8010cc0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010cc4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010cc8:	4413      	add	r3, r2
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	441a      	add	r2, r3
 8010cce:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010cd2:	b212      	sxth	r2, r2
 8010cd4:	4296      	cmp	r6, r2
 8010cd6:	dadd      	bge.n	8010c94 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8010cd8:	1ae3      	subs	r3, r4, r3
 8010cda:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010cde:	e7d9      	b.n	8010c94 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8010ce0:	240252f4 	.word	0x240252f4

08010ce4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8010ce4:	0c0b      	lsrs	r3, r1, #16
 8010ce6:	60c1      	str	r1, [r0, #12]
 8010ce8:	7481      	strb	r1, [r0, #18]
 8010cea:	7403      	strb	r3, [r0, #16]
 8010cec:	0a0b      	lsrs	r3, r1, #8
 8010cee:	7443      	strb	r3, [r0, #17]
 8010cf0:	4770      	bx	lr

08010cf2 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8010cf2:	f1a0 0008 	sub.w	r0, r0, #8
 8010cf6:	e7f5      	b.n	8010ce4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

08010cf8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8010cf8:	b508      	push	{r3, lr}
 8010cfa:	4b05      	ldr	r3, [pc, #20]	@ (8010d10 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8010cfc:	6818      	ldr	r0, [r3, #0]
 8010cfe:	6803      	ldr	r3, [r0, #0]
 8010d00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010d04:	4798      	blx	r3
 8010d06:	1e43      	subs	r3, r0, #1
 8010d08:	4258      	negs	r0, r3
 8010d0a:	4158      	adcs	r0, r3
 8010d0c:	bd08      	pop	{r3, pc}
 8010d0e:	bf00      	nop
 8010d10:	240252fc 	.word	0x240252fc

08010d14 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8010d14:	4770      	bx	lr

08010d16 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8010d16:	3808      	subs	r0, #8
 8010d18:	4770      	bx	lr

08010d1a <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8010d1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010d1e:	b410      	push	{r4}
 8010d20:	188c      	adds	r4, r1, r2
 8010d22:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010d26:	68c2      	ldr	r2, [r0, #12]
 8010d28:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d32:	f7f2 b8cb 	b.w	8002ecc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08010d36 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8010d36:	f7f2 b8a5 	b.w	8002e84 <_ZN8touchgfx5paint8tearDownEv>

08010d3a <_ZN8touchgfx13PainterRGB888D0Ev>:
 8010d3a:	b510      	push	{r4, lr}
 8010d3c:	4604      	mov	r4, r0
 8010d3e:	2114      	movs	r1, #20
 8010d40:	f011 ff50 	bl	8022be4 <_ZdlPvj>
 8010d44:	4620      	mov	r0, r4
 8010d46:	bd10      	pop	{r4, pc}

08010d48 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8010d48:	f1a0 0008 	sub.w	r0, r0, #8
 8010d4c:	e7f5      	b.n	8010d3a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08010d50 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8010d50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d58:	4411      	add	r1, r2
 8010d5a:	7c42      	ldrb	r2, [r0, #17]
 8010d5c:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8010d60:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8010d64:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8010d68:	2a00      	cmp	r2, #0
 8010d6a:	f000 8084 	beq.w	8010e76 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8010d6e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8010d72:	ed90 7a08 	vldr	s14, [r0, #32]
 8010d76:	42a2      	cmp	r2, r4
 8010d78:	68c3      	ldr	r3, [r0, #12]
 8010d7a:	db20      	blt.n	8010dbe <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8010d7c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010d80:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8010d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d88:	bfc8      	it	gt
 8010d8a:	2200      	movgt	r2, #0
 8010d8c:	589a      	ldr	r2, [r3, r2]
 8010d8e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8010d92:	7c03      	ldrb	r3, [r0, #16]
 8010d94:	fa5f fc82 	uxtb.w	ip, r2
 8010d98:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8010d9c:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8010da0:	440e      	add	r6, r1
 8010da2:	b36b      	cbz	r3, 8010e00 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8010da4:	2dff      	cmp	r5, #255	@ 0xff
 8010da6:	d12b      	bne.n	8010e00 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8010da8:	42b1      	cmp	r1, r6
 8010daa:	f080 8204 	bcs.w	80111b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010dae:	f881 c000 	strb.w	ip, [r1]
 8010db2:	3103      	adds	r1, #3
 8010db4:	f801 7c02 	strb.w	r7, [r1, #-2]
 8010db8:	f801 4c01 	strb.w	r4, [r1, #-1]
 8010dbc:	e7f4      	b.n	8010da8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8010dbe:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
 8010dc2:	42a7      	cmp	r7, r4
 8010dc4:	dc08      	bgt.n	8010dd8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8010dc6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010dca:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8010dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd2:	bfd8      	it	le
 8010dd4:	2200      	movle	r2, #0
 8010dd6:	e7d9      	b.n	8010d8c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8010dd8:	1aa2      	subs	r2, r4, r2
 8010dda:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010dde:	ee07 2a90 	vmov	s15, r2
 8010de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010df2:	ee17 2a90 	vmov	r2, s15
 8010df6:	bfd8      	it	le
 8010df8:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8010dfc:	0092      	lsls	r2, r2, #2
 8010dfe:	e7c5      	b.n	8010d8c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8010e00:	0e12      	lsrs	r2, r2, #24
 8010e02:	4355      	muls	r5, r2
 8010e04:	1c6a      	adds	r2, r5, #1
 8010e06:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8010e0a:	122d      	asrs	r5, r5, #8
 8010e0c:	43e8      	mvns	r0, r5
 8010e0e:	b2ad      	uxth	r5, r5
 8010e10:	fb1c fc05 	smulbb	ip, ip, r5
 8010e14:	b2c0      	uxtb	r0, r0
 8010e16:	fb17 f705 	smulbb	r7, r7, r5
 8010e1a:	fb14 f505 	smulbb	r5, r4, r5
 8010e1e:	fa1f fc8c 	uxth.w	ip, ip
 8010e22:	b2bf      	uxth	r7, r7
 8010e24:	b2ad      	uxth	r5, r5
 8010e26:	428e      	cmp	r6, r1
 8010e28:	f101 0303 	add.w	r3, r1, #3
 8010e2c:	f240 81c3 	bls.w	80111b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010e30:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8010e34:	fb02 c200 	mla	r2, r2, r0, ip
 8010e38:	b292      	uxth	r2, r2
 8010e3a:	1c51      	adds	r1, r2, #1
 8010e3c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010e40:	1212      	asrs	r2, r2, #8
 8010e42:	f803 2c03 	strb.w	r2, [r3, #-3]
 8010e46:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8010e4a:	fb02 7200 	mla	r2, r2, r0, r7
 8010e4e:	b292      	uxth	r2, r2
 8010e50:	1c51      	adds	r1, r2, #1
 8010e52:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010e56:	1212      	asrs	r2, r2, #8
 8010e58:	f803 2c02 	strb.w	r2, [r3, #-2]
 8010e5c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8010e60:	fb02 5200 	mla	r2, r2, r0, r5
 8010e64:	b292      	uxth	r2, r2
 8010e66:	1c51      	adds	r1, r2, #1
 8010e68:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	1212      	asrs	r2, r2, #8
 8010e70:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010e74:	e7d7      	b.n	8010e26 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8010e76:	7c82      	ldrb	r2, [r0, #18]
 8010e78:	2a00      	cmp	r2, #0
 8010e7a:	d047      	beq.n	8010f0c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8010e7c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8010e80:	ee07 2a10 	vmov	s14, r2
 8010e84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010e88:	ee07 3a90 	vmov	s15, r3
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010e92:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e9a:	f200 808e 	bhi.w	8010fba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8010e9e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010ea2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8010ea6:	68c7      	ldr	r7, [r0, #12]
 8010ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010eac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010eb0:	ee06 6a90 	vmov	s13, r6
 8010eb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010eb8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec0:	bf4a      	itet	mi
 8010ec2:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8010ec6:	4634      	movpl	r4, r6
 8010ec8:	ee17 4a90 	vmovmi	r4, s15
 8010ecc:	edd0 7a08 	vldr	s15, [r0, #32]
 8010ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ed4:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8010ed8:	448e      	add	lr, r1
 8010eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ede:	bfc8      	it	gt
 8010ee0:	2200      	movgt	r2, #0
 8010ee2:	58bf      	ldr	r7, [r7, r2]
 8010ee4:	7c02      	ldrb	r2, [r0, #16]
 8010ee6:	fa5f f987 	uxtb.w	r9, r7
 8010eea:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8010eee:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8010ef2:	b31a      	cbz	r2, 8010f3c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8010ef4:	2dff      	cmp	r5, #255	@ 0xff
 8010ef6:	d121      	bne.n	8010f3c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8010ef8:	4571      	cmp	r1, lr
 8010efa:	d25d      	bcs.n	8010fb8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8010efc:	f881 9000 	strb.w	r9, [r1]
 8010f00:	3103      	adds	r1, #3
 8010f02:	f801 8c02 	strb.w	r8, [r1, #-2]
 8010f06:	f801 cc01 	strb.w	ip, [r1, #-1]
 8010f0a:	e7f5      	b.n	8010ef8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8010f0c:	ee07 4a90 	vmov	s15, r4
 8010f10:	ed90 7a06 	vldr	s14, [r0, #24]
 8010f14:	edd0 6a05 	vldr	s13, [r0, #20]
 8010f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010f24:	edd0 7a08 	vldr	s15, [r0, #32]
 8010f28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f30:	bf44      	itt	mi
 8010f32:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8010f36:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8010f3a:	e7a5      	b.n	8010e88 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8010f3c:	0e3f      	lsrs	r7, r7, #24
 8010f3e:	436f      	muls	r7, r5
 8010f40:	1c7a      	adds	r2, r7, #1
 8010f42:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8010f46:	1212      	asrs	r2, r2, #8
 8010f48:	ea6f 0a02 	mvn.w	sl, r2
 8010f4c:	b292      	uxth	r2, r2
 8010f4e:	fb19 f902 	smulbb	r9, r9, r2
 8010f52:	fa5f fa8a 	uxtb.w	sl, sl
 8010f56:	fb18 f802 	smulbb	r8, r8, r2
 8010f5a:	fb1c fc02 	smulbb	ip, ip, r2
 8010f5e:	fa1f f989 	uxth.w	r9, r9
 8010f62:	fa1f f888 	uxth.w	r8, r8
 8010f66:	fa1f fc8c 	uxth.w	ip, ip
 8010f6a:	458e      	cmp	lr, r1
 8010f6c:	f101 0203 	add.w	r2, r1, #3
 8010f70:	d922      	bls.n	8010fb8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8010f72:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8010f76:	fb01 910a 	mla	r1, r1, sl, r9
 8010f7a:	b289      	uxth	r1, r1
 8010f7c:	1c4f      	adds	r7, r1, #1
 8010f7e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010f82:	1209      	asrs	r1, r1, #8
 8010f84:	f802 1c03 	strb.w	r1, [r2, #-3]
 8010f88:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8010f8c:	fb01 810a 	mla	r1, r1, sl, r8
 8010f90:	b289      	uxth	r1, r1
 8010f92:	1c4f      	adds	r7, r1, #1
 8010f94:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010f98:	1209      	asrs	r1, r1, #8
 8010f9a:	f802 1c02 	strb.w	r1, [r2, #-2]
 8010f9e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8010fa2:	fb01 c10a 	mla	r1, r1, sl, ip
 8010fa6:	b289      	uxth	r1, r1
 8010fa8:	1c4f      	adds	r7, r1, #1
 8010faa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010fae:	1209      	asrs	r1, r1, #8
 8010fb0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010fb4:	4611      	mov	r1, r2
 8010fb6:	e7d8      	b.n	8010f6a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8010fb8:	191a      	adds	r2, r3, r4
 8010fba:	4433      	add	r3, r6
 8010fbc:	b21b      	sxth	r3, r3
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	f340 80f9 	ble.w	80111b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010fc4:	edd0 7a07 	vldr	s15, [r0, #28]
 8010fc8:	ee06 2a90 	vmov	s13, r2
 8010fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010fd4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fdc:	f340 80b0 	ble.w	8011140 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8010fe0:	ee06 3a10 	vmov	s12, r3
 8010fe4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010fe8:	eddf 5a74 	vldr	s11, [pc, #464]	@ 80111bc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8010fec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010ff0:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010ff4:	ed90 6a08 	vldr	s12, [r0, #32]
 8010ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8011000:	bfd6      	itet	le
 8011002:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8011006:	469c      	movgt	ip, r3
 8011008:	ee17 ca90 	vmovle	ip, s15
 801100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011010:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80111c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8011014:	ebac 0202 	sub.w	r2, ip, r2
 8011018:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801101c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011020:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011024:	188c      	adds	r4, r1, r2
 8011026:	7c02      	ldrb	r2, [r0, #16]
 8011028:	b1d2      	cbz	r2, 8011060 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801102a:	2dff      	cmp	r5, #255	@ 0xff
 801102c:	d118      	bne.n	8011060 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801102e:	42a1      	cmp	r1, r4
 8011030:	d261      	bcs.n	80110f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8011032:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011036:	68c6      	ldr	r6, [r0, #12]
 8011038:	3103      	adds	r1, #3
 801103a:	ee17 7a10 	vmov	r7, s14
 801103e:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8011042:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8011046:	f801 6c03 	strb.w	r6, [r1, #-3]
 801104a:	7856      	ldrb	r6, [r2, #1]
 801104c:	f801 6c02 	strb.w	r6, [r1, #-2]
 8011050:	7892      	ldrb	r2, [r2, #2]
 8011052:	f801 2c01 	strb.w	r2, [r1, #-1]
 8011056:	ed90 7a08 	vldr	s14, [r0, #32]
 801105a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801105e:	e7e6      	b.n	801102e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8011060:	68c2      	ldr	r2, [r0, #12]
 8011062:	428c      	cmp	r4, r1
 8011064:	f101 0e03 	add.w	lr, r1, #3
 8011068:	d945      	bls.n	80110f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801106a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801106e:	ee17 9a10 	vmov	r9, s14
 8011072:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8011076:	f898 7003 	ldrb.w	r7, [r8, #3]
 801107a:	fb07 f605 	mul.w	r6, r7, r5
 801107e:	1c77      	adds	r7, r6, #1
 8011080:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8011084:	123f      	asrs	r7, r7, #8
 8011086:	b2b9      	uxth	r1, r7
 8011088:	43ff      	mvns	r7, r7
 801108a:	b2fe      	uxtb	r6, r7
 801108c:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8011090:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8011094:	fb19 f906 	smulbb	r9, r9, r6
 8011098:	fb07 9701 	mla	r7, r7, r1, r9
 801109c:	b2bf      	uxth	r7, r7
 801109e:	f107 0901 	add.w	r9, r7, #1
 80110a2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80110a6:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80110aa:	fb19 f906 	smulbb	r9, r9, r6
 80110ae:	123f      	asrs	r7, r7, #8
 80110b0:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80110b4:	f898 7001 	ldrb.w	r7, [r8, #1]
 80110b8:	fb07 9701 	mla	r7, r7, r1, r9
 80110bc:	b2bf      	uxth	r7, r7
 80110be:	f107 0901 	add.w	r9, r7, #1
 80110c2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80110c6:	123f      	asrs	r7, r7, #8
 80110c8:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80110cc:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80110d0:	f898 8002 	ldrb.w	r8, [r8, #2]
 80110d4:	fb17 f606 	smulbb	r6, r7, r6
 80110d8:	fb08 6601 	mla	r6, r8, r1, r6
 80110dc:	b2b6      	uxth	r6, r6
 80110de:	1c71      	adds	r1, r6, #1
 80110e0:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80110e4:	4671      	mov	r1, lr
 80110e6:	1236      	asrs	r6, r6, #8
 80110e8:	f80e 6c01 	strb.w	r6, [lr, #-1]
 80110ec:	ed90 7a08 	vldr	s14, [r0, #32]
 80110f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110f4:	e7b5      	b.n	8011062 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 80110f6:	4563      	cmp	r3, ip
 80110f8:	dd5d      	ble.n	80111b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80110fa:	edd0 7a08 	vldr	s15, [r0, #32]
 80110fe:	eba3 030c 	sub.w	r3, r3, ip
 8011102:	68c4      	ldr	r4, [r0, #12]
 8011104:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801110c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011110:	7c00      	ldrb	r0, [r0, #16]
 8011112:	440b      	add	r3, r1
 8011114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011118:	bfd8      	it	le
 801111a:	2200      	movle	r2, #0
 801111c:	58a2      	ldr	r2, [r4, r2]
 801111e:	b2d4      	uxtb	r4, r2
 8011120:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8011124:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8011128:	b160      	cbz	r0, 8011144 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801112a:	2dff      	cmp	r5, #255	@ 0xff
 801112c:	d10a      	bne.n	8011144 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801112e:	4299      	cmp	r1, r3
 8011130:	d241      	bcs.n	80111b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011132:	700c      	strb	r4, [r1, #0]
 8011134:	3103      	adds	r1, #3
 8011136:	f801 cc02 	strb.w	ip, [r1, #-2]
 801113a:	f801 7c01 	strb.w	r7, [r1, #-1]
 801113e:	e7f6      	b.n	801112e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8011140:	4694      	mov	ip, r2
 8011142:	e7da      	b.n	80110fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8011144:	0e12      	lsrs	r2, r2, #24
 8011146:	436a      	muls	r2, r5
 8011148:	1c55      	adds	r5, r2, #1
 801114a:	eb05 2522 	add.w	r5, r5, r2, asr #8
 801114e:	122d      	asrs	r5, r5, #8
 8011150:	43ee      	mvns	r6, r5
 8011152:	b2ad      	uxth	r5, r5
 8011154:	fb14 f405 	smulbb	r4, r4, r5
 8011158:	b2f6      	uxtb	r6, r6
 801115a:	fb1c f005 	smulbb	r0, ip, r5
 801115e:	fb17 f505 	smulbb	r5, r7, r5
 8011162:	b2a4      	uxth	r4, r4
 8011164:	b280      	uxth	r0, r0
 8011166:	b2ad      	uxth	r5, r5
 8011168:	428b      	cmp	r3, r1
 801116a:	f101 0203 	add.w	r2, r1, #3
 801116e:	d922      	bls.n	80111b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011170:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8011174:	fb01 4106 	mla	r1, r1, r6, r4
 8011178:	b289      	uxth	r1, r1
 801117a:	1c4f      	adds	r7, r1, #1
 801117c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011180:	1209      	asrs	r1, r1, #8
 8011182:	f802 1c03 	strb.w	r1, [r2, #-3]
 8011186:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801118a:	fb01 0106 	mla	r1, r1, r6, r0
 801118e:	b289      	uxth	r1, r1
 8011190:	1c4f      	adds	r7, r1, #1
 8011192:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011196:	1209      	asrs	r1, r1, #8
 8011198:	f802 1c02 	strb.w	r1, [r2, #-2]
 801119c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80111a0:	fb01 5106 	mla	r1, r1, r6, r5
 80111a4:	b289      	uxth	r1, r1
 80111a6:	1c4f      	adds	r7, r1, #1
 80111a8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80111ac:	1209      	asrs	r1, r1, #8
 80111ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 80111b2:	4611      	mov	r1, r2
 80111b4:	e7d8      	b.n	8011168 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 80111b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ba:	bf00      	nop
 80111bc:	447ffffe 	.word	0x447ffffe
 80111c0:	00000000 	.word	0x00000000

080111c4 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 80111c4:	4770      	bx	lr

080111c6 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 80111c6:	4770      	bx	lr

080111c8 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 80111c8:	b510      	push	{r4, lr}
 80111ca:	4604      	mov	r4, r0
 80111cc:	2124      	movs	r1, #36	@ 0x24
 80111ce:	f011 fd09 	bl	8022be4 <_ZdlPvj>
 80111d2:	4620      	mov	r0, r4
 80111d4:	bd10      	pop	{r4, pc}
	...

080111d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80111d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80111da:	6803      	ldr	r3, [r0, #0]
 80111dc:	460d      	mov	r5, r1
 80111de:	4604      	mov	r4, r0
 80111e0:	4601      	mov	r1, r0
 80111e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80111e4:	a802      	add	r0, sp, #8
 80111e6:	4798      	blx	r3
 80111e8:	6828      	ldr	r0, [r5, #0]
 80111ea:	6869      	ldr	r1, [r5, #4]
 80111ec:	466b      	mov	r3, sp
 80111ee:	c303      	stmia	r3!, {r0, r1}
 80111f0:	4668      	mov	r0, sp
 80111f2:	4619      	mov	r1, r3
 80111f4:	f7fd f948 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 80111f8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80111fa:	b188      	cbz	r0, 8011220 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80111fc:	6803      	ldr	r3, [r0, #0]
 80111fe:	1d21      	adds	r1, r4, #4
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	4798      	blx	r3
 8011204:	b160      	cbz	r0, 8011220 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011206:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	dd08      	ble.n	8011220 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801120e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8011212:	2d00      	cmp	r5, #0
 8011214:	dd04      	ble.n	8011220 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011216:	4a2b      	ldr	r2, [pc, #172]	@ (80112c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8011218:	7812      	ldrb	r2, [r2, #0]
 801121a:	b11a      	cbz	r2, 8011224 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 801121c:	2a01      	cmp	r2, #1
 801121e:	d029      	beq.n	8011274 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8011220:	b004      	add	sp, #16
 8011222:	bd70      	pop	{r4, r5, r6, pc}
 8011224:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011228:	441d      	add	r5, r3
 801122a:	b2ad      	uxth	r5, r5
 801122c:	b22e      	sxth	r6, r5
 801122e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8011232:	42b3      	cmp	r3, r6
 8011234:	daf4      	bge.n	8011220 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011236:	6823      	ldr	r3, [r4, #0]
 8011238:	4669      	mov	r1, sp
 801123a:	4620      	mov	r0, r4
 801123c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801123e:	4798      	blx	r3
 8011240:	b940      	cbnz	r0, 8011254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8011242:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011246:	2b01      	cmp	r3, #1
 8011248:	d004      	beq.n	8011254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801124a:	3301      	adds	r3, #1
 801124c:	105b      	asrs	r3, r3, #1
 801124e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011252:	e7f0      	b.n	8011236 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8011254:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011258:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801125c:	4413      	add	r3, r2
 801125e:	b29b      	uxth	r3, r3
 8011260:	441a      	add	r2, r3
 8011262:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011266:	b212      	sxth	r2, r2
 8011268:	4296      	cmp	r6, r2
 801126a:	dae0      	bge.n	801122e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801126c:	1aeb      	subs	r3, r5, r3
 801126e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011272:	e7dc      	b.n	801122e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011274:	f8bd 5000 	ldrh.w	r5, [sp]
 8011278:	441d      	add	r5, r3
 801127a:	b2ad      	uxth	r5, r5
 801127c:	b22e      	sxth	r6, r5
 801127e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011282:	42b3      	cmp	r3, r6
 8011284:	dacc      	bge.n	8011220 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011286:	6823      	ldr	r3, [r4, #0]
 8011288:	4669      	mov	r1, sp
 801128a:	4620      	mov	r0, r4
 801128c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801128e:	4798      	blx	r3
 8011290:	b940      	cbnz	r0, 80112a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011292:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011296:	2b01      	cmp	r3, #1
 8011298:	d004      	beq.n	80112a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801129a:	3301      	adds	r3, #1
 801129c:	105b      	asrs	r3, r3, #1
 801129e:	f8ad 3004 	strh.w	r3, [sp, #4]
 80112a2:	e7f0      	b.n	8011286 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80112a4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80112a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80112ac:	4413      	add	r3, r2
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	441a      	add	r2, r3
 80112b2:	f8ad 3000 	strh.w	r3, [sp]
 80112b6:	b212      	sxth	r2, r2
 80112b8:	4296      	cmp	r6, r2
 80112ba:	dae0      	bge.n	801127e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80112bc:	1aeb      	subs	r3, r5, r3
 80112be:	f8ad 3004 	strh.w	r3, [sp, #4]
 80112c2:	e7dc      	b.n	801127e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80112c4:	240252f4 	.word	0x240252f4

080112c8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80112c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112ca:	6803      	ldr	r3, [r0, #0]
 80112cc:	4604      	mov	r4, r0
 80112ce:	4601      	mov	r1, r0
 80112d0:	4668      	mov	r0, sp
 80112d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112d4:	4798      	blx	r3
 80112d6:	2100      	movs	r1, #0
 80112d8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80112dc:	4668      	mov	r0, sp
 80112de:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80112e2:	9102      	str	r1, [sp, #8]
 80112e4:	a902      	add	r1, sp, #8
 80112e6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80112ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80112ee:	f7fd f8cb 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 80112f2:	6823      	ldr	r3, [r4, #0]
 80112f4:	4669      	mov	r1, sp
 80112f6:	4620      	mov	r0, r4
 80112f8:	691b      	ldr	r3, [r3, #16]
 80112fa:	4798      	blx	r3
 80112fc:	b004      	add	sp, #16
 80112fe:	bd10      	pop	{r4, pc}

08011300 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8011300:	2101      	movs	r1, #1
 8011302:	2200      	movs	r2, #0
 8011304:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8011308:	490a      	ldr	r1, [pc, #40]	@ (8011334 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801130a:	8082      	strh	r2, [r0, #4]
 801130c:	6001      	str	r1, [r0, #0]
 801130e:	21ff      	movs	r1, #255	@ 0xff
 8011310:	80c2      	strh	r2, [r0, #6]
 8011312:	8102      	strh	r2, [r0, #8]
 8011314:	8142      	strh	r2, [r0, #10]
 8011316:	8182      	strh	r2, [r0, #12]
 8011318:	81c2      	strh	r2, [r0, #14]
 801131a:	8202      	strh	r2, [r0, #16]
 801131c:	8242      	strh	r2, [r0, #18]
 801131e:	61c2      	str	r2, [r0, #28]
 8011320:	8402      	strh	r2, [r0, #32]
 8011322:	8442      	strh	r2, [r0, #34]	@ 0x22
 8011324:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8011328:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 801132c:	6282      	str	r2, [r0, #40]	@ 0x28
 801132e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011332:	4770      	bx	lr
 8011334:	080275e8 	.word	0x080275e8

08011338 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8011338:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 801133c:	4770      	bx	lr

0801133e <_ZN8touchgfx12ToggleButtonD1Ev>:
 801133e:	4770      	bx	lr

08011340 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8011340:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8011344:	b133      	cbz	r3, 8011354 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8011346:	790b      	ldrb	r3, [r1, #4]
 8011348:	2b01      	cmp	r3, #1
 801134a:	bf01      	itttt	eq
 801134c:	8dc3      	ldrheq	r3, [r0, #46]	@ 0x2e
 801134e:	8e02      	ldrheq	r2, [r0, #48]	@ 0x30
 8011350:	8603      	strheq	r3, [r0, #48]	@ 0x30
 8011352:	85c2      	strheq	r2, [r0, #46]	@ 0x2e
 8011354:	f011 bc22 	b.w	8022b9c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08011358 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 8011358:	8813      	ldrh	r3, [r2, #0]
 801135a:	8683      	strh	r3, [r0, #52]	@ 0x34
 801135c:	f000 b988 	b.w	8011670 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

08011360 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8011360:	b510      	push	{r4, lr}
 8011362:	4604      	mov	r4, r0
 8011364:	2138      	movs	r1, #56	@ 0x38
 8011366:	f011 fc3d 	bl	8022be4 <_ZdlPvj>
 801136a:	4620      	mov	r0, r4
 801136c:	bd10      	pop	{r4, pc}

0801136e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801136e:	b510      	push	{r4, lr}
 8011370:	4604      	mov	r4, r0
 8011372:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8011374:	b150      	cbz	r0, 801138c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011376:	6803      	ldr	r3, [r0, #0]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	4798      	blx	r3
 801137c:	b130      	cbz	r0, 801138c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801137e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011380:	4621      	mov	r1, r4
 8011382:	6803      	ldr	r3, [r0, #0]
 8011384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011388:	689b      	ldr	r3, [r3, #8]
 801138a:	4718      	bx	r3
 801138c:	bd10      	pop	{r4, pc}

0801138e <_ZNK8touchgfx6Button17invalidateContentEv>:
 801138e:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8011392:	b12a      	cbz	r2, 80113a0 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011394:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011398:	b112      	cbz	r2, 80113a0 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801139a:	6803      	ldr	r3, [r0, #0]
 801139c:	695b      	ldr	r3, [r3, #20]
 801139e:	4718      	bx	r3
 80113a0:	4770      	bx	lr

080113a2 <_ZN8touchgfx12ToggleButton10forceStateEb>:
 80113a2:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 80113a4:	b129      	cbz	r1, 80113b2 <_ZN8touchgfx12ToggleButton10forceStateEb+0x10>
 80113a6:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d007      	beq.n	80113bc <_ZN8touchgfx12ToggleButton10forceStateEb+0x1a>
 80113ac:	8602      	strh	r2, [r0, #48]	@ 0x30
 80113ae:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80113b0:	4770      	bx	lr
 80113b2:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 80113b4:	429a      	cmp	r2, r3
 80113b6:	bf1c      	itt	ne
 80113b8:	85c2      	strhne	r2, [r0, #46]	@ 0x2e
 80113ba:	8603      	strhne	r3, [r0, #48]	@ 0x30
 80113bc:	4770      	bx	lr
	...

080113c0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80113c0:	4b07      	ldr	r3, [pc, #28]	@ (80113e0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80113c2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80113c4:	881b      	ldrh	r3, [r3, #0]
 80113c6:	4293      	cmp	r3, r2
 80113c8:	bf81      	itttt	hi
 80113ca:	4b06      	ldrhi	r3, [pc, #24]	@ (80113e4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80113cc:	681b      	ldrhi	r3, [r3, #0]
 80113ce:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80113d2:	7858      	ldrbhi	r0, [r3, #1]
 80113d4:	bf8c      	ite	hi
 80113d6:	f000 0003 	andhi.w	r0, r0, #3
 80113da:	2000      	movls	r0, #0
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop
 80113e0:	24025358 	.word	0x24025358
 80113e4:	24025354 	.word	0x24025354

080113e8 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80113e8:	4b11      	ldr	r3, [pc, #68]	@ (8011430 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80113ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ee:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80113f0:	4604      	mov	r4, r0
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	428b      	cmp	r3, r1
 80113f6:	d918      	bls.n	801142a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80113f8:	6803      	ldr	r3, [r0, #0]
 80113fa:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 80113fc:	4b0d      	ldr	r3, [pc, #52]	@ (8011434 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80113fe:	6818      	ldr	r0, [r3, #0]
 8011400:	f7f3 fdb8 	bl	8004f74 <_ZNK8touchgfx5Texts7getTextEt>
 8011404:	6823      	ldr	r3, [r4, #0]
 8011406:	4606      	mov	r6, r0
 8011408:	4620      	mov	r0, r4
 801140a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801140c:	4798      	blx	r3
 801140e:	6823      	ldr	r3, [r4, #0]
 8011410:	4607      	mov	r7, r0
 8011412:	4620      	mov	r0, r4
 8011414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011418:	4798      	blx	r3
 801141a:	463a      	mov	r2, r7
 801141c:	4603      	mov	r3, r0
 801141e:	4631      	mov	r1, r6
 8011420:	4620      	mov	r0, r4
 8011422:	46ac      	mov	ip, r5
 8011424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011428:	4760      	bx	ip
 801142a:	2000      	movs	r0, #0
 801142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011430:	24025358 	.word	0x24025358
 8011434:	24025360 	.word	0x24025360

08011438 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8011438:	4b18      	ldr	r3, [pc, #96]	@ (801149c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801143a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801143e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011440:	4604      	mov	r4, r0
 8011442:	881b      	ldrh	r3, [r3, #0]
 8011444:	428b      	cmp	r3, r1
 8011446:	d926      	bls.n	8011496 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8011448:	4b15      	ldr	r3, [pc, #84]	@ (80114a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8011450:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8011454:	4b13      	ldr	r3, [pc, #76]	@ (80114a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8011456:	7855      	ldrb	r5, [r2, #1]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801145e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011462:	6833      	ldr	r3, [r6, #0]
 8011464:	69df      	ldr	r7, [r3, #28]
 8011466:	4b10      	ldr	r3, [pc, #64]	@ (80114a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8011468:	6818      	ldr	r0, [r3, #0]
 801146a:	f7f3 fd83 	bl	8004f74 <_ZNK8touchgfx5Texts7getTextEt>
 801146e:	6823      	ldr	r3, [r4, #0]
 8011470:	4680      	mov	r8, r0
 8011472:	4620      	mov	r0, r4
 8011474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011476:	4798      	blx	r3
 8011478:	6823      	ldr	r3, [r4, #0]
 801147a:	4681      	mov	r9, r0
 801147c:	4620      	mov	r0, r4
 801147e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011482:	4798      	blx	r3
 8011484:	464b      	mov	r3, r9
 8011486:	9000      	str	r0, [sp, #0]
 8011488:	4642      	mov	r2, r8
 801148a:	4629      	mov	r1, r5
 801148c:	4630      	mov	r0, r6
 801148e:	47b8      	blx	r7
 8011490:	b003      	add	sp, #12
 8011492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011496:	2000      	movs	r0, #0
 8011498:	e7fa      	b.n	8011490 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801149a:	bf00      	nop
 801149c:	24025358 	.word	0x24025358
 80114a0:	24025354 	.word	0x24025354
 80114a4:	2402535c 	.word	0x2402535c
 80114a8:	24025360 	.word	0x24025360

080114ac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80114ac:	b40e      	push	{r1, r2, r3}
 80114ae:	4b30      	ldr	r3, [pc, #192]	@ (8011570 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80114b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114b4:	881a      	ldrh	r2, [r3, #0]
 80114b6:	b09d      	sub	sp, #116	@ 0x74
 80114b8:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80114ba:	4604      	mov	r4, r0
 80114bc:	429a      	cmp	r2, r3
 80114be:	d954      	bls.n	801156a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80114c0:	aa26      	add	r2, sp, #152	@ 0x98
 80114c2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8011574 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80114c6:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8011578 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80114ca:	9202      	str	r2, [sp, #8]
 80114cc:	f8d9 2000 	ldr.w	r2, [r9]
 80114d0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80114d4:	f8d8 3000 	ldr.w	r3, [r8]
 80114d8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80114dc:	682b      	ldr	r3, [r5, #0]
 80114de:	4628      	mov	r0, r5
 80114e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114e2:	4798      	blx	r3
 80114e4:	4606      	mov	r6, r0
 80114e6:	b207      	sxth	r7, r0
 80114e8:	a803      	add	r0, sp, #12
 80114ea:	f005 f93c 	bl	8016766 <_ZN8touchgfx12TextProviderC1Ev>
 80114ee:	682b      	ldr	r3, [r5, #0]
 80114f0:	4628      	mov	r0, r5
 80114f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114f4:	4798      	blx	r3
 80114f6:	682b      	ldr	r3, [r5, #0]
 80114f8:	4682      	mov	sl, r0
 80114fa:	4628      	mov	r0, r5
 80114fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114fe:	4798      	blx	r3
 8011500:	4653      	mov	r3, sl
 8011502:	9000      	str	r0, [sp, #0]
 8011504:	a803      	add	r0, sp, #12
 8011506:	9a02      	ldr	r2, [sp, #8]
 8011508:	9925      	ldr	r1, [sp, #148]	@ 0x94
 801150a:	f005 f97f 	bl	801680c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801150e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8011510:	f8d9 3000 	ldr.w	r3, [r9]
 8011514:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8011518:	8925      	ldrh	r5, [r4, #8]
 801151a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801151e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8011522:	eba5 050c 	sub.w	r5, r5, ip
 8011526:	784a      	ldrb	r2, [r1, #1]
 8011528:	f8d8 3000 	ldr.w	r3, [r8]
 801152c:	b22d      	sxth	r5, r5
 801152e:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8011532:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8011536:	9500      	str	r5, [sp, #0]
 8011538:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801153c:	a803      	add	r0, sp, #12
 801153e:	f002 f99b 	bl	8013878 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8011542:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8011546:	b203      	sxth	r3, r0
 8011548:	18b9      	adds	r1, r7, r2
 801154a:	2900      	cmp	r1, #0
 801154c:	dd0b      	ble.n	8011566 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801154e:	3b01      	subs	r3, #1
 8011550:	fb13 f302 	smulbb	r3, r3, r2
 8011554:	fb16 3300 	smlabb	r3, r6, r0, r3
 8011558:	b21f      	sxth	r7, r3
 801155a:	4638      	mov	r0, r7
 801155c:	b01d      	add	sp, #116	@ 0x74
 801155e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011562:	b003      	add	sp, #12
 8011564:	4770      	bx	lr
 8011566:	2b00      	cmp	r3, #0
 8011568:	dcf7      	bgt.n	801155a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801156a:	2700      	movs	r7, #0
 801156c:	e7f5      	b.n	801155a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801156e:	bf00      	nop
 8011570:	24025358 	.word	0x24025358
 8011574:	24025354 	.word	0x24025354
 8011578:	2402535c 	.word	0x2402535c

0801157c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	4b0e      	ldr	r3, [pc, #56]	@ (80115b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8011580:	4604      	mov	r4, r0
 8011582:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	429a      	cmp	r2, r3
 8011588:	d214      	bcs.n	80115b4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801158a:	6803      	ldr	r3, [r0, #0]
 801158c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801158e:	4798      	blx	r3
 8011590:	6823      	ldr	r3, [r4, #0]
 8011592:	4605      	mov	r5, r0
 8011594:	4620      	mov	r0, r4
 8011596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011598:	4798      	blx	r3
 801159a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801159e:	b22d      	sxth	r5, r5
 80115a0:	4601      	mov	r1, r0
 80115a2:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80115a6:	bf06      	itte	eq
 80115a8:	4602      	moveq	r2, r0
 80115aa:	4629      	moveq	r1, r5
 80115ac:	462a      	movne	r2, r5
 80115ae:	4620      	mov	r0, r4
 80115b0:	f7fd f984 	bl	800e8bc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80115b4:	bd38      	pop	{r3, r4, r5, pc}
 80115b6:	bf00      	nop
 80115b8:	24025358 	.word	0x24025358

080115bc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80115bc:	b530      	push	{r4, r5, lr}
 80115be:	888b      	ldrh	r3, [r1, #4]
 80115c0:	b085      	sub	sp, #20
 80115c2:	4604      	mov	r4, r0
 80115c4:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80115c6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80115ca:	b923      	cbnz	r3, 80115d6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80115cc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80115d0:	b90b      	cbnz	r3, 80115d6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80115d2:	f7ff ffd3 	bl	801157c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80115d6:	6823      	ldr	r3, [r4, #0]
 80115d8:	466d      	mov	r5, sp
 80115da:	4621      	mov	r1, r4
 80115dc:	343c      	adds	r4, #60	@ 0x3c
 80115de:	4628      	mov	r0, r5
 80115e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115e4:	4798      	blx	r3
 80115e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80115ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80115ee:	b005      	add	sp, #20
 80115f0:	bd30      	pop	{r4, r5, pc}

080115f2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80115f2:	2300      	movs	r3, #0
 80115f4:	8083      	strh	r3, [r0, #4]
 80115f6:	80c3      	strh	r3, [r0, #6]
 80115f8:	8003      	strh	r3, [r0, #0]
 80115fa:	8043      	strh	r3, [r0, #2]
 80115fc:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8011600:	2bff      	cmp	r3, #255	@ 0xff
 8011602:	bf01      	itttt	eq
 8011604:	890b      	ldrheq	r3, [r1, #8]
 8011606:	8083      	strheq	r3, [r0, #4]
 8011608:	894b      	ldrheq	r3, [r1, #10]
 801160a:	80c3      	strheq	r3, [r0, #6]
 801160c:	4770      	bx	lr
	...

08011610 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8011610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011612:	4604      	mov	r4, r0
 8011614:	466b      	mov	r3, sp
 8011616:	6808      	ldr	r0, [r1, #0]
 8011618:	6849      	ldr	r1, [r1, #4]
 801161a:	c303      	stmia	r3!, {r0, r1}
 801161c:	6823      	ldr	r3, [r4, #0]
 801161e:	4669      	mov	r1, sp
 8011620:	4620      	mov	r0, r4
 8011622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011624:	4798      	blx	r3
 8011626:	4b08      	ldr	r3, [pc, #32]	@ (8011648 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801162e:	b10a      	cbz	r2, 8011634 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011630:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011632:	b900      	cbnz	r0, 8011636 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011634:	6898      	ldr	r0, [r3, #8]
 8011636:	6803      	ldr	r3, [r0, #0]
 8011638:	4669      	mov	r1, sp
 801163a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801163c:	6a1d      	ldr	r5, [r3, #32]
 801163e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8011642:	47a8      	blx	r5
 8011644:	b003      	add	sp, #12
 8011646:	bd30      	pop	{r4, r5, pc}
 8011648:	240252fc 	.word	0x240252fc

0801164c <_ZN8touchgfx3BoxD1Ev>:
 801164c:	4770      	bx	lr

0801164e <_ZN8touchgfx3BoxD0Ev>:
 801164e:	b510      	push	{r4, lr}
 8011650:	4604      	mov	r4, r0
 8011652:	212c      	movs	r1, #44	@ 0x2c
 8011654:	f011 fac6 	bl	8022be4 <_ZdlPvj>
 8011658:	4620      	mov	r0, r4
 801165a:	bd10      	pop	{r4, pc}

0801165c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801165c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8011660:	b12a      	cbz	r2, 801166e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011662:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011666:	b112      	cbz	r2, 801166e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011668:	6803      	ldr	r3, [r0, #0]
 801166a:	695b      	ldr	r3, [r3, #20]
 801166c:	4718      	bx	r3
 801166e:	4770      	bx	lr

08011670 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8011670:	b570      	push	{r4, r5, r6, lr}
 8011672:	880b      	ldrh	r3, [r1, #0]
 8011674:	4605      	mov	r5, r0
 8011676:	4604      	mov	r4, r0
 8011678:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 801167a:	8813      	ldrh	r3, [r2, #0]
 801167c:	f825 3f30 	strh.w	r3, [r5, #48]!
 8011680:	4628      	mov	r0, r5
 8011682:	f006 fccd 	bl	8018020 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011686:	4606      	mov	r6, r0
 8011688:	4628      	mov	r0, r5
 801168a:	f006 fcfd 	bl	8018088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801168e:	6823      	ldr	r3, [r4, #0]
 8011690:	4605      	mov	r5, r0
 8011692:	4631      	mov	r1, r6
 8011694:	4620      	mov	r0, r4
 8011696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011698:	4798      	blx	r3
 801169a:	6823      	ldr	r3, [r4, #0]
 801169c:	4629      	mov	r1, r5
 801169e:	4620      	mov	r0, r4
 80116a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116a6:	4718      	bx	r3

080116a8 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80116a8:	b510      	push	{r4, lr}
 80116aa:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 80116ae:	4604      	mov	r4, r0
 80116b0:	2bff      	cmp	r3, #255	@ 0xff
 80116b2:	d006      	beq.n	80116c2 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80116b4:	2300      	movs	r3, #0
 80116b6:	8003      	strh	r3, [r0, #0]
 80116b8:	8043      	strh	r3, [r0, #2]
 80116ba:	8083      	strh	r3, [r0, #4]
 80116bc:	80c3      	strh	r3, [r0, #6]
 80116be:	4620      	mov	r0, r4
 80116c0:	bd10      	pop	{r4, pc}
 80116c2:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80116c6:	b11b      	cbz	r3, 80116d0 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80116c8:	3130      	adds	r1, #48	@ 0x30
 80116ca:	f006 fd11 	bl	80180f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80116ce:	e7f6      	b.n	80116be <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80116d0:	312e      	adds	r1, #46	@ 0x2e
 80116d2:	e7fa      	b.n	80116ca <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080116d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80116d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80116dc:	b08a      	sub	sp, #40	@ 0x28
 80116de:	4604      	mov	r4, r0
 80116e0:	4688      	mov	r8, r1
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d066      	beq.n	80117b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80116e6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80116e8:	a805      	add	r0, sp, #20
 80116ea:	f8ad 3014 	strh.w	r3, [sp, #20]
 80116ee:	f006 fc97 	bl	8018020 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80116f2:	4607      	mov	r7, r0
 80116f4:	a805      	add	r0, sp, #20
 80116f6:	f006 fcc7 	bl	8018088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80116fa:	f9b8 6000 	ldrsh.w	r6, [r8]
 80116fe:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8011702:	2300      	movs	r3, #0
 8011704:	4432      	add	r2, r6
 8011706:	9306      	str	r3, [sp, #24]
 8011708:	b292      	uxth	r2, r2
 801170a:	fa0f fc82 	sxth.w	ip, r2
 801170e:	459c      	cmp	ip, r3
 8011710:	dd52      	ble.n	80117b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011712:	42b7      	cmp	r7, r6
 8011714:	dd50      	ble.n	80117b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011716:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801171a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801171e:	442b      	add	r3, r5
 8011720:	b29b      	uxth	r3, r3
 8011722:	b219      	sxth	r1, r3
 8011724:	2900      	cmp	r1, #0
 8011726:	dd47      	ble.n	80117b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011728:	42a8      	cmp	r0, r5
 801172a:	dd45      	ble.n	80117b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801172c:	4567      	cmp	r7, ip
 801172e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8011732:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8011736:	bfb8      	it	lt
 8011738:	b2ba      	uxthlt	r2, r7
 801173a:	4288      	cmp	r0, r1
 801173c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011740:	bfb8      	it	lt
 8011742:	b283      	uxthlt	r3, r0
 8011744:	1b92      	subs	r2, r2, r6
 8011746:	f8ad 501a 	strh.w	r5, [sp, #26]
 801174a:	1b5b      	subs	r3, r3, r5
 801174c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011750:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011754:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011758:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801175c:	429a      	cmp	r2, r3
 801175e:	d026      	beq.n	80117ae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011760:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011764:	2b00      	cmp	r3, #0
 8011766:	dd22      	ble.n	80117ae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011768:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801176c:	2b00      	cmp	r3, #0
 801176e:	dd1e      	ble.n	80117ae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011770:	2300      	movs	r3, #0
 8011772:	a908      	add	r1, sp, #32
 8011774:	4620      	mov	r0, r4
 8011776:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801177e:	4798      	blx	r3
 8011780:	4b0f      	ldr	r3, [pc, #60]	@ (80117c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011788:	b10a      	cbz	r2, 801178e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801178a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801178c:	b900      	cbnz	r0, 8011790 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801178e:	6898      	ldr	r0, [r3, #8]
 8011790:	2501      	movs	r5, #1
 8011792:	6801      	ldr	r1, [r0, #0]
 8011794:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8011798:	9502      	str	r5, [sp, #8]
 801179a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801179e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80117a2:	9401      	str	r4, [sp, #4]
 80117a4:	ac06      	add	r4, sp, #24
 80117a6:	9400      	str	r4, [sp, #0]
 80117a8:	688c      	ldr	r4, [r1, #8]
 80117aa:	a905      	add	r1, sp, #20
 80117ac:	47a0      	blx	r4
 80117ae:	b00a      	add	sp, #40	@ 0x28
 80117b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80117b6:	e797      	b.n	80116e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80117b8:	2300      	movs	r3, #0
 80117ba:	9307      	str	r3, [sp, #28]
 80117bc:	e7ca      	b.n	8011754 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80117be:	bf00      	nop
 80117c0:	240252fc 	.word	0x240252fc

080117c4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80117c4:	4b30      	ldr	r3, [pc, #192]	@ (8011888 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80117c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117ca:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80117cc:	b08d      	sub	sp, #52	@ 0x34
 80117ce:	881b      	ldrh	r3, [r3, #0]
 80117d0:	4604      	mov	r4, r0
 80117d2:	460f      	mov	r7, r1
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d954      	bls.n	8011882 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80117d8:	4b2c      	ldr	r3, [pc, #176]	@ (801188c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80117da:	6819      	ldr	r1, [r3, #0]
 80117dc:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80117e0:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80117e4:	4a2a      	ldr	r2, [pc, #168]	@ (8011890 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80117e6:	6812      	ldr	r2, [r2, #0]
 80117e8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80117ec:	2900      	cmp	r1, #0
 80117ee:	d048      	beq.n	8011882 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80117f0:	785a      	ldrb	r2, [r3, #1]
 80117f2:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80117f6:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80117fa:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80117fe:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011802:	4b24      	ldr	r3, [pc, #144]	@ (8011894 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8011804:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 801180e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8011812:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8011816:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011818:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 801181c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8011820:	9107      	str	r1, [sp, #28]
 8011822:	f88d 8020 	strb.w	r8, [sp, #32]
 8011826:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 801182a:	9609      	str	r6, [sp, #36]	@ 0x24
 801182c:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8011830:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011834:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8011838:	b10b      	cbz	r3, 801183e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801183a:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 801183c:	b905      	cbnz	r5, 8011840 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801183e:	6895      	ldr	r5, [r2, #8]
 8011840:	ae05      	add	r6, sp, #20
 8011842:	4621      	mov	r1, r4
 8011844:	4630      	mov	r0, r6
 8011846:	f003 ff25 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801184a:	4b13      	ldr	r3, [pc, #76]	@ (8011898 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801184c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801184e:	6818      	ldr	r0, [r3, #0]
 8011850:	f7f3 fb90 	bl	8004f74 <_ZNK8touchgfx5Texts7getTextEt>
 8011854:	6823      	ldr	r3, [r4, #0]
 8011856:	4680      	mov	r8, r0
 8011858:	4620      	mov	r0, r4
 801185a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801185c:	4798      	blx	r3
 801185e:	6823      	ldr	r3, [r4, #0]
 8011860:	4681      	mov	r9, r0
 8011862:	4620      	mov	r0, r4
 8011864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011868:	4798      	blx	r3
 801186a:	ab07      	add	r3, sp, #28
 801186c:	f8cd 8004 	str.w	r8, [sp, #4]
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	463b      	mov	r3, r7
 8011874:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8011878:	4628      	mov	r0, r5
 801187a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801187e:	f7f3 fb2b 	bl	8004ed8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011882:	b00d      	add	sp, #52	@ 0x34
 8011884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011888:	24025358 	.word	0x24025358
 801188c:	24025354 	.word	0x24025354
 8011890:	2402535c 	.word	0x2402535c
 8011894:	240252fc 	.word	0x240252fc
 8011898:	24025360 	.word	0x24025360

0801189c <_ZN8touchgfx13BoxWithBorderD1Ev>:
 801189c:	4770      	bx	lr

0801189e <_ZN8touchgfx13BoxWithBorderD0Ev>:
 801189e:	b510      	push	{r4, lr}
 80118a0:	4604      	mov	r4, r0
 80118a2:	2134      	movs	r1, #52	@ 0x34
 80118a4:	f011 f99e 	bl	8022be4 <_ZdlPvj>
 80118a8:	4620      	mov	r0, r4
 80118aa:	bd10      	pop	{r4, pc}

080118ac <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 80118ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118b0:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80118b2:	4604      	mov	r4, r0
 80118b4:	460e      	mov	r6, r1
 80118b6:	b08e      	sub	sp, #56	@ 0x38
 80118b8:	b218      	sxth	r0, r3
 80118ba:	8921      	ldrh	r1, [r4, #8]
 80118bc:	005b      	lsls	r3, r3, #1
 80118be:	8962      	ldrh	r2, [r4, #10]
 80118c0:	f8ad 0000 	strh.w	r0, [sp]
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	f8ad 0002 	strh.w	r0, [sp, #2]
 80118ca:	1ac9      	subs	r1, r1, r3
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	b209      	sxth	r1, r1
 80118d0:	b21b      	sxth	r3, r3
 80118d2:	2900      	cmp	r1, #0
 80118d4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80118d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80118dc:	dd5e      	ble.n	801199c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80118de:	2b00      	cmp	r3, #0
 80118e0:	dd5c      	ble.n	801199c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80118e2:	6830      	ldr	r0, [r6, #0]
 80118e4:	ab02      	add	r3, sp, #8
 80118e6:	6871      	ldr	r1, [r6, #4]
 80118e8:	c303      	stmia	r3!, {r0, r1}
 80118ea:	4669      	mov	r1, sp
 80118ec:	a802      	add	r0, sp, #8
 80118ee:	f7fc fdcb 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 80118f2:	4620      	mov	r0, r4
 80118f4:	a902      	add	r1, sp, #8
 80118f6:	f7ff fe8b 	bl	8011610 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80118fa:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d05f      	beq.n	80119c0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8011900:	8963      	ldrh	r3, [r4, #10]
 8011902:	b202      	sxth	r2, r0
 8011904:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8011908:	2500      	movs	r5, #0
 801190a:	1a1f      	subs	r7, r3, r0
 801190c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8011910:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011914:	b21b      	sxth	r3, r3
 8011916:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801191a:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 801191e:	af04      	add	r7, sp, #16
 8011920:	1a09      	subs	r1, r1, r0
 8011922:	9506      	str	r5, [sp, #24]
 8011924:	f8ad 201e 	strh.w	r2, [sp, #30]
 8011928:	f8ad 5020 	strh.w	r5, [sp, #32]
 801192c:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 8011930:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8011934:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8011938:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801193c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8011940:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8011944:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8011948:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801194c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8011950:	ab06      	add	r3, sp, #24
 8011952:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011956:	e893 0003 	ldmia.w	r3, {r0, r1}
 801195a:	e887 0003 	stmia.w	r7, {r0, r1}
 801195e:	4631      	mov	r1, r6
 8011960:	4638      	mov	r0, r7
 8011962:	f7fc fd91 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 8011966:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801196a:	2b00      	cmp	r3, #0
 801196c:	dd12      	ble.n	8011994 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801196e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011972:	2b00      	cmp	r3, #0
 8011974:	dd0e      	ble.n	8011994 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8011976:	6823      	ldr	r3, [r4, #0]
 8011978:	4639      	mov	r1, r7
 801197a:	4620      	mov	r0, r4
 801197c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801197e:	4798      	blx	r3
 8011980:	f7f2 fb60 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 8011984:	6803      	ldr	r3, [r0, #0]
 8011986:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011988:	4639      	mov	r1, r7
 801198a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801198e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8011992:	47c0      	blx	r8
 8011994:	3501      	adds	r5, #1
 8011996:	2d04      	cmp	r5, #4
 8011998:	d1da      	bne.n	8011950 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801199a:	e011      	b.n	80119c0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801199c:	6830      	ldr	r0, [r6, #0]
 801199e:	ab06      	add	r3, sp, #24
 80119a0:	6871      	ldr	r1, [r6, #4]
 80119a2:	c303      	stmia	r3!, {r0, r1}
 80119a4:	6823      	ldr	r3, [r4, #0]
 80119a6:	a906      	add	r1, sp, #24
 80119a8:	4620      	mov	r0, r4
 80119aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119ac:	4798      	blx	r3
 80119ae:	f7f2 fb49 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 80119b2:	6803      	ldr	r3, [r0, #0]
 80119b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80119b6:	a906      	add	r1, sp, #24
 80119b8:	6a1d      	ldr	r5, [r3, #32]
 80119ba:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80119be:	47a8      	blx	r5
 80119c0:	b00e      	add	sp, #56	@ 0x38
 80119c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119c6 <_ZN8touchgfx5ImageD1Ev>:
 80119c6:	4770      	bx	lr

080119c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80119c8:	b570      	push	{r4, r5, r6, lr}
 80119ca:	880b      	ldrh	r3, [r1, #0]
 80119cc:	460d      	mov	r5, r1
 80119ce:	4604      	mov	r4, r0
 80119d0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80119d2:	4608      	mov	r0, r1
 80119d4:	f006 fb24 	bl	8018020 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80119d8:	4606      	mov	r6, r0
 80119da:	4628      	mov	r0, r5
 80119dc:	f006 fb54 	bl	8018088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80119e0:	6823      	ldr	r3, [r4, #0]
 80119e2:	4605      	mov	r5, r0
 80119e4:	4631      	mov	r1, r6
 80119e6:	4620      	mov	r0, r4
 80119e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119ea:	4798      	blx	r3
 80119ec:	6823      	ldr	r3, [r4, #0]
 80119ee:	4629      	mov	r1, r5
 80119f0:	4620      	mov	r0, r4
 80119f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119f8:	4718      	bx	r3

080119fa <_ZN8touchgfx5ImageD0Ev>:
 80119fa:	b510      	push	{r4, lr}
 80119fc:	4604      	mov	r4, r0
 80119fe:	212c      	movs	r1, #44	@ 0x2c
 8011a00:	f011 f8f0 	bl	8022be4 <_ZdlPvj>
 8011a04:	4620      	mov	r0, r4
 8011a06:	bd10      	pop	{r4, pc}

08011a08 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011a08:	b510      	push	{r4, lr}
 8011a0a:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8011a0e:	4604      	mov	r4, r0
 8011a10:	2bff      	cmp	r3, #255	@ 0xff
 8011a12:	d006      	beq.n	8011a22 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8011a14:	2300      	movs	r3, #0
 8011a16:	8003      	strh	r3, [r0, #0]
 8011a18:	8043      	strh	r3, [r0, #2]
 8011a1a:	8083      	strh	r3, [r0, #4]
 8011a1c:	80c3      	strh	r3, [r0, #6]
 8011a1e:	4620      	mov	r0, r4
 8011a20:	bd10      	pop	{r4, pc}
 8011a22:	3126      	adds	r1, #38	@ 0x26
 8011a24:	f006 fb64 	bl	80180f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011a28:	e7f9      	b.n	8011a1e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08011a2a <_ZNK8touchgfx5Image17invalidateContentEv>:
 8011a2a:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8011a2e:	b12a      	cbz	r2, 8011a3c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8011a30:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011a34:	b112      	cbz	r2, 8011a3c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8011a36:	6803      	ldr	r3, [r0, #0]
 8011a38:	695b      	ldr	r3, [r3, #20]
 8011a3a:	4718      	bx	r3
 8011a3c:	4770      	bx	lr
	...

08011a40 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a44:	4604      	mov	r4, r0
 8011a46:	b088      	sub	sp, #32
 8011a48:	2500      	movs	r5, #0
 8011a4a:	460f      	mov	r7, r1
 8011a4c:	f854 3b26 	ldr.w	r3, [r4], #38
 8011a50:	a904      	add	r1, sp, #16
 8011a52:	4606      	mov	r6, r0
 8011a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011a5a:	4798      	blx	r3
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f006 fadf 	bl	8018020 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011a62:	4680      	mov	r8, r0
 8011a64:	4620      	mov	r0, r4
 8011a66:	f006 fb0f 	bl	8018088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011a6a:	9506      	str	r5, [sp, #24]
 8011a6c:	ad06      	add	r5, sp, #24
 8011a6e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011a72:	4639      	mov	r1, r7
 8011a74:	f8ad 801c 	strh.w	r8, [sp, #28]
 8011a78:	4628      	mov	r0, r5
 8011a7a:	f7fc fd05 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 8011a7e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	dd19      	ble.n	8011aba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011a86:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	dd15      	ble.n	8011aba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8011ac0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011a96:	b10a      	cbz	r2, 8011a9c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8011a98:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011a9a:	b900      	cbnz	r0, 8011a9e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8011a9c:	6898      	ldr	r0, [r3, #8]
 8011a9e:	2701      	movs	r7, #1
 8011aa0:	6801      	ldr	r1, [r0, #0]
 8011aa2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011aa6:	9702      	str	r7, [sp, #8]
 8011aa8:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8011aac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011ab0:	e9cd 5600 	strd	r5, r6, [sp]
 8011ab4:	688d      	ldr	r5, [r1, #8]
 8011ab6:	4621      	mov	r1, r4
 8011ab8:	47a8      	blx	r5
 8011aba:	b008      	add	sp, #32
 8011abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac0:	240252fc 	.word	0x240252fc

08011ac4 <_ZN8touchgfx7OutlineD1Ev>:
 8011ac4:	4770      	bx	lr

08011ac6 <_ZN8touchgfx7OutlineD0Ev>:
 8011ac6:	b510      	push	{r4, lr}
 8011ac8:	4604      	mov	r4, r0
 8011aca:	2130      	movs	r1, #48	@ 0x30
 8011acc:	f011 f88a 	bl	8022be4 <_ZdlPvj>
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	bd10      	pop	{r4, pc}

08011ad4 <_ZN8touchgfx7Outline5resetEv>:
 8011ad4:	b510      	push	{r4, lr}
 8011ad6:	4604      	mov	r4, r0
 8011ad8:	f000 fe72 	bl	80127c0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8011adc:	60e0      	str	r0, [r4, #12]
 8011ade:	f000 fe75 	bl	80127cc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8011ae2:	68e3      	ldr	r3, [r4, #12]
 8011ae4:	08c0      	lsrs	r0, r0, #3
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8011aec:	6123      	str	r3, [r4, #16]
 8011aee:	3801      	subs	r0, #1
 8011af0:	60a2      	str	r2, [r4, #8]
 8011af2:	6060      	str	r0, [r4, #4]
 8011af4:	8019      	strh	r1, [r3, #0]
 8011af6:	8059      	strh	r1, [r3, #2]
 8011af8:	809a      	strh	r2, [r3, #4]
 8011afa:	80da      	strh	r2, [r3, #6]
 8011afc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011afe:	f023 0301 	bic.w	r3, r3, #1
 8011b02:	f043 0302 	orr.w	r3, r3, #2
 8011b06:	6263      	str	r3, [r4, #36]	@ 0x24
 8011b08:	bd10      	pop	{r4, pc}
	...

08011b0c <_ZN8touchgfx7OutlineC1Ev>:
 8011b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8011b38 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8011b0e:	b510      	push	{r4, lr}
 8011b10:	6003      	str	r3, [r0, #0]
 8011b12:	2300      	movs	r3, #0
 8011b14:	4604      	mov	r4, r0
 8011b16:	6243      	str	r3, [r0, #36]	@ 0x24
 8011b18:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011b1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011b20:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8011b24:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8011b28:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011b2c:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8011b30:	f7ff ffd0 	bl	8011ad4 <_ZN8touchgfx7Outline5resetEv>
 8011b34:	4620      	mov	r0, r4
 8011b36:	bd10      	pop	{r4, pc}
 8011b38:	08027810 	.word	0x08027810

08011b3c <_ZN8touchgfx7Outline10renderLineEiiii>:
 8011b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b40:	b093      	sub	sp, #76	@ 0x4c
 8011b42:	1156      	asrs	r6, r2, #5
 8011b44:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8011b46:	9305      	str	r3, [sp, #20]
 8011b48:	1153      	asrs	r3, r2, #5
 8011b4a:	f004 051f 	and.w	r5, r4, #31
 8011b4e:	9303      	str	r3, [sp, #12]
 8011b50:	1163      	asrs	r3, r4, #5
 8011b52:	9504      	str	r5, [sp, #16]
 8011b54:	1165      	asrs	r5, r4, #5
 8011b56:	9306      	str	r3, [sp, #24]
 8011b58:	f002 031f 	and.w	r3, r2, #31
 8011b5c:	42ae      	cmp	r6, r5
 8011b5e:	f040 80f4 	bne.w	8011d4a <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8011b62:	9c04      	ldr	r4, [sp, #16]
 8011b64:	9a05      	ldr	r2, [sp, #20]
 8011b66:	42a3      	cmp	r3, r4
 8011b68:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8011b6c:	6902      	ldr	r2, [r0, #16]
 8011b6e:	d125      	bne.n	8011bbc <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8011b70:	f9b2 3000 	ldrsh.w	r3, [r2]
 8011b74:	459e      	cmp	lr, r3
 8011b76:	d103      	bne.n	8011b80 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8011b78:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8011b7c:	429e      	cmp	r6, r3
 8011b7e:	d035      	beq.n	8011bec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011b80:	88d1      	ldrh	r1, [r2, #6]
 8011b82:	8893      	ldrh	r3, [r2, #4]
 8011b84:	430b      	orrs	r3, r1
 8011b86:	d010      	beq.n	8011baa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011b88:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	db0c      	blt.n	8011baa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011b90:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011b92:	428b      	cmp	r3, r1
 8011b94:	da09      	bge.n	8011baa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011b96:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011b9a:	428b      	cmp	r3, r1
 8011b9c:	f103 0301 	add.w	r3, r3, #1
 8011ba0:	bf38      	it	cc
 8011ba2:	3208      	addcc	r2, #8
 8011ba4:	6083      	str	r3, [r0, #8]
 8011ba6:	bf38      	it	cc
 8011ba8:	6102      	strcc	r2, [r0, #16]
 8011baa:	6903      	ldr	r3, [r0, #16]
 8011bac:	9a03      	ldr	r2, [sp, #12]
 8011bae:	f8a3 e000 	strh.w	lr, [r3]
 8011bb2:	805a      	strh	r2, [r3, #2]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	809a      	strh	r2, [r3, #4]
 8011bb8:	80da      	strh	r2, [r3, #6]
 8011bba:	e017      	b.n	8011bec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011bbc:	9c05      	ldr	r4, [sp, #20]
 8011bbe:	114e      	asrs	r6, r1, #5
 8011bc0:	f001 0c1f 	and.w	ip, r1, #31
 8011bc4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8011bc8:	f004 041f 	and.w	r4, r4, #31
 8011bcc:	4576      	cmp	r6, lr
 8011bce:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8011bd2:	9402      	str	r4, [sp, #8]
 8011bd4:	9c04      	ldr	r4, [sp, #16]
 8011bd6:	eba4 0403 	sub.w	r4, r4, r3
 8011bda:	d10a      	bne.n	8011bf2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8011bdc:	9b02      	ldr	r3, [sp, #8]
 8011bde:	44a0      	add	r8, r4
 8011be0:	449c      	add	ip, r3
 8011be2:	f8a2 8004 	strh.w	r8, [r2, #4]
 8011be6:	fb04 a40c 	mla	r4, r4, ip, sl
 8011bea:	80d4      	strh	r4, [r2, #6]
 8011bec:	b013      	add	sp, #76	@ 0x4c
 8011bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf2:	9d05      	ldr	r5, [sp, #20]
 8011bf4:	1a69      	subs	r1, r5, r1
 8011bf6:	bf51      	iteee	pl
 8011bf8:	f1cc 0520 	rsbpl	r5, ip, #32
 8011bfc:	fb04 f40c 	mulmi.w	r4, r4, ip
 8011c00:	4249      	negmi	r1, r1
 8011c02:	2500      	movmi	r5, #0
 8011c04:	bf5d      	ittte	pl
 8011c06:	436c      	mulpl	r4, r5
 8011c08:	2520      	movpl	r5, #32
 8011c0a:	f04f 0901 	movpl.w	r9, #1
 8011c0e:	f04f 39ff 	movmi.w	r9, #4294967295
 8011c12:	9501      	str	r5, [sp, #4]
 8011c14:	9f01      	ldr	r7, [sp, #4]
 8011c16:	444e      	add	r6, r9
 8011c18:	fb94 f5f1 	sdiv	r5, r4, r1
 8011c1c:	fb01 4415 	mls	r4, r1, r5, r4
 8011c20:	44bc      	add	ip, r7
 8011c22:	2c00      	cmp	r4, #0
 8011c24:	bfbc      	itt	lt
 8011c26:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8011c2a:	1864      	addlt	r4, r4, r1
 8011c2c:	44a8      	add	r8, r5
 8011c2e:	fb05 ac0c 	mla	ip, r5, ip, sl
 8011c32:	f8a2 8004 	strh.w	r8, [r2, #4]
 8011c36:	f8a2 c006 	strh.w	ip, [r2, #6]
 8011c3a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011c3e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8011c42:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8011c46:	ea58 0202 	orrs.w	r2, r8, r2
 8011c4a:	d011      	beq.n	8011c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011c4c:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011c50:	f1b8 0f00 	cmp.w	r8, #0
 8011c54:	db0c      	blt.n	8011c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011c56:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011c58:	4590      	cmp	r8, r2
 8011c5a:	da09      	bge.n	8011c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011c5c:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8011c60:	4590      	cmp	r8, r2
 8011c62:	bf3c      	itt	cc
 8011c64:	f10c 0208 	addcc.w	r2, ip, #8
 8011c68:	6102      	strcc	r2, [r0, #16]
 8011c6a:	f108 0201 	add.w	r2, r8, #1
 8011c6e:	6082      	str	r2, [r0, #8]
 8011c70:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011c74:	2700      	movs	r7, #0
 8011c76:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011c7a:	45b6      	cmp	lr, r6
 8011c7c:	f8ac 6000 	strh.w	r6, [ip]
 8011c80:	442b      	add	r3, r5
 8011c82:	f8ac 2002 	strh.w	r2, [ip, #2]
 8011c86:	f8ac 7004 	strh.w	r7, [ip, #4]
 8011c8a:	f8ac 7006 	strh.w	r7, [ip, #6]
 8011c8e:	d04b      	beq.n	8011d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8011c90:	9f04      	ldr	r7, [sp, #16]
 8011c92:	1a64      	subs	r4, r4, r1
 8011c94:	f04f 0a00 	mov.w	sl, #0
 8011c98:	1aff      	subs	r7, r7, r3
 8011c9a:	443d      	add	r5, r7
 8011c9c:	016d      	lsls	r5, r5, #5
 8011c9e:	fb95 f8f1 	sdiv	r8, r5, r1
 8011ca2:	fb01 5518 	mls	r5, r1, r8, r5
 8011ca6:	2d00      	cmp	r5, #0
 8011ca8:	bfbc      	itt	lt
 8011caa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011cae:	186d      	addlt	r5, r5, r1
 8011cb0:	f108 0701 	add.w	r7, r8, #1
 8011cb4:	9703      	str	r7, [sp, #12]
 8011cb6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011cba:	1964      	adds	r4, r4, r5
 8011cbc:	444e      	add	r6, r9
 8011cbe:	bf54      	ite	pl
 8011cc0:	9f03      	ldrpl	r7, [sp, #12]
 8011cc2:	4647      	movmi	r7, r8
 8011cc4:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8011cc8:	bf58      	it	pl
 8011cca:	1a64      	subpl	r4, r4, r1
 8011ccc:	443b      	add	r3, r7
 8011cce:	44bb      	add	fp, r7
 8011cd0:	f8ac b004 	strh.w	fp, [ip, #4]
 8011cd4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011cd8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011cdc:	f8ac b006 	strh.w	fp, [ip, #6]
 8011ce0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011ce4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011ce8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011cec:	ea5b 0707 	orrs.w	r7, fp, r7
 8011cf0:	d011      	beq.n	8011d16 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011cf2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8011cf6:	f1bb 0f00 	cmp.w	fp, #0
 8011cfa:	db0c      	blt.n	8011d16 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011cfc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011cfe:	45bb      	cmp	fp, r7
 8011d00:	da09      	bge.n	8011d16 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011d02:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8011d06:	45bb      	cmp	fp, r7
 8011d08:	bf3c      	itt	cc
 8011d0a:	f10c 0708 	addcc.w	r7, ip, #8
 8011d0e:	6107      	strcc	r7, [r0, #16]
 8011d10:	f10b 0701 	add.w	r7, fp, #1
 8011d14:	6087      	str	r7, [r0, #8]
 8011d16:	6907      	ldr	r7, [r0, #16]
 8011d18:	45b6      	cmp	lr, r6
 8011d1a:	803e      	strh	r6, [r7, #0]
 8011d1c:	807a      	strh	r2, [r7, #2]
 8011d1e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8011d22:	f8a7 a006 	strh.w	sl, [r7, #6]
 8011d26:	d1c6      	bne.n	8011cb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8011d28:	9a04      	ldr	r2, [sp, #16]
 8011d2a:	1ad3      	subs	r3, r2, r3
 8011d2c:	6902      	ldr	r2, [r0, #16]
 8011d2e:	8891      	ldrh	r1, [r2, #4]
 8011d30:	88d6      	ldrh	r6, [r2, #6]
 8011d32:	4419      	add	r1, r3
 8011d34:	8091      	strh	r1, [r2, #4]
 8011d36:	9902      	ldr	r1, [sp, #8]
 8011d38:	f101 0c20 	add.w	ip, r1, #32
 8011d3c:	9901      	ldr	r1, [sp, #4]
 8011d3e:	ebac 0c01 	sub.w	ip, ip, r1
 8011d42:	fb03 630c 	mla	r3, r3, ip, r6
 8011d46:	80d3      	strh	r3, [r2, #6]
 8011d48:	e750      	b.n	8011bec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011d4a:	9d05      	ldr	r5, [sp, #20]
 8011d4c:	1aa2      	subs	r2, r4, r2
 8011d4e:	eba5 0501 	sub.w	r5, r5, r1
 8011d52:	9202      	str	r2, [sp, #8]
 8011d54:	9508      	str	r5, [sp, #32]
 8011d56:	f140 8128 	bpl.w	8011faa <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8011d5a:	9a03      	ldr	r2, [sp, #12]
 8011d5c:	2a00      	cmp	r2, #0
 8011d5e:	f6ff af45 	blt.w	8011bec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011d62:	9a02      	ldr	r2, [sp, #8]
 8011d64:	f04f 34ff 	mov.w	r4, #4294967295
 8011d68:	4252      	negs	r2, r2
 8011d6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011d6c:	2400      	movs	r4, #0
 8011d6e:	9202      	str	r2, [sp, #8]
 8011d70:	9a06      	ldr	r2, [sp, #24]
 8011d72:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8011d76:	9206      	str	r2, [sp, #24]
 8011d78:	462a      	mov	r2, r5
 8011d7a:	435a      	muls	r2, r3
 8011d7c:	9401      	str	r4, [sp, #4]
 8011d7e:	9c02      	ldr	r4, [sp, #8]
 8011d80:	9d02      	ldr	r5, [sp, #8]
 8011d82:	fb92 f4f4 	sdiv	r4, r2, r4
 8011d86:	fb05 2214 	mls	r2, r5, r4, r2
 8011d8a:	2a00      	cmp	r2, #0
 8011d8c:	9207      	str	r2, [sp, #28]
 8011d8e:	bfbc      	itt	lt
 8011d90:	1952      	addlt	r2, r2, r5
 8011d92:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8011d96:	6905      	ldr	r5, [r0, #16]
 8011d98:	bfb8      	it	lt
 8011d9a:	9207      	strlt	r2, [sp, #28]
 8011d9c:	eb04 0901 	add.w	r9, r4, r1
 8011da0:	9a01      	ldr	r2, [sp, #4]
 8011da2:	ea4f 1669 	mov.w	r6, r9, asr #5
 8011da6:	429a      	cmp	r2, r3
 8011da8:	f040 8111 	bne.w	8011fce <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8011dac:	f9b5 3000 	ldrsh.w	r3, [r5]
 8011db0:	429e      	cmp	r6, r3
 8011db2:	d104      	bne.n	8011dbe <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8011db4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011db8:	9a03      	ldr	r2, [sp, #12]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d01b      	beq.n	8011df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011dbe:	88ea      	ldrh	r2, [r5, #6]
 8011dc0:	88ab      	ldrh	r3, [r5, #4]
 8011dc2:	4313      	orrs	r3, r2
 8011dc4:	d010      	beq.n	8011de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011dc6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011dca:	2a00      	cmp	r2, #0
 8011dcc:	db0c      	blt.n	8011de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011dce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	da09      	bge.n	8011de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011dd4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	f102 0201 	add.w	r2, r2, #1
 8011dde:	bf38      	it	cc
 8011de0:	3508      	addcc	r5, #8
 8011de2:	6082      	str	r2, [r0, #8]
 8011de4:	bf38      	it	cc
 8011de6:	6105      	strcc	r5, [r0, #16]
 8011de8:	6903      	ldr	r3, [r0, #16]
 8011dea:	9a03      	ldr	r2, [sp, #12]
 8011dec:	801e      	strh	r6, [r3, #0]
 8011dee:	805a      	strh	r2, [r3, #2]
 8011df0:	2200      	movs	r2, #0
 8011df2:	809a      	strh	r2, [r3, #4]
 8011df4:	80da      	strh	r2, [r3, #6]
 8011df6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011df8:	9a03      	ldr	r2, [sp, #12]
 8011dfa:	6901      	ldr	r1, [r0, #16]
 8011dfc:	441a      	add	r2, r3
 8011dfe:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011e02:	42b3      	cmp	r3, r6
 8011e04:	d103      	bne.n	8011e0e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8011e06:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d01a      	beq.n	8011e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8011e0e:	88cc      	ldrh	r4, [r1, #6]
 8011e10:	888b      	ldrh	r3, [r1, #4]
 8011e12:	4323      	orrs	r3, r4
 8011e14:	d010      	beq.n	8011e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011e16:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011e1a:	2c00      	cmp	r4, #0
 8011e1c:	db0c      	blt.n	8011e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011e1e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011e20:	429c      	cmp	r4, r3
 8011e22:	da09      	bge.n	8011e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011e24:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011e28:	429c      	cmp	r4, r3
 8011e2a:	f104 0401 	add.w	r4, r4, #1
 8011e2e:	bf38      	it	cc
 8011e30:	3108      	addcc	r1, #8
 8011e32:	6084      	str	r4, [r0, #8]
 8011e34:	bf38      	it	cc
 8011e36:	6101      	strcc	r1, [r0, #16]
 8011e38:	6903      	ldr	r3, [r0, #16]
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	801e      	strh	r6, [r3, #0]
 8011e3e:	805a      	strh	r2, [r3, #2]
 8011e40:	8099      	strh	r1, [r3, #4]
 8011e42:	80d9      	strh	r1, [r3, #6]
 8011e44:	9b06      	ldr	r3, [sp, #24]
 8011e46:	4293      	cmp	r3, r2
 8011e48:	f000 8082 	beq.w	8011f50 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8011e4c:	9b08      	ldr	r3, [sp, #32]
 8011e4e:	9902      	ldr	r1, [sp, #8]
 8011e50:	015b      	lsls	r3, r3, #5
 8011e52:	9c02      	ldr	r4, [sp, #8]
 8011e54:	fb93 f1f1 	sdiv	r1, r3, r1
 8011e58:	fb04 3311 	mls	r3, r4, r1, r3
 8011e5c:	9103      	str	r1, [sp, #12]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	9308      	str	r3, [sp, #32]
 8011e62:	da04      	bge.n	8011e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8011e64:	1e4b      	subs	r3, r1, #1
 8011e66:	9303      	str	r3, [sp, #12]
 8011e68:	9b08      	ldr	r3, [sp, #32]
 8011e6a:	4423      	add	r3, r4
 8011e6c:	9308      	str	r3, [sp, #32]
 8011e6e:	9b07      	ldr	r3, [sp, #28]
 8011e70:	464f      	mov	r7, r9
 8011e72:	9902      	ldr	r1, [sp, #8]
 8011e74:	2600      	movs	r6, #0
 8011e76:	1a5b      	subs	r3, r3, r1
 8011e78:	9307      	str	r3, [sp, #28]
 8011e7a:	9b01      	ldr	r3, [sp, #4]
 8011e7c:	f1c3 0320 	rsb	r3, r3, #32
 8011e80:	930e      	str	r3, [sp, #56]	@ 0x38
 8011e82:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011e84:	9b01      	ldr	r3, [sp, #4]
 8011e86:	1a5b      	subs	r3, r3, r1
 8011e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e8a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8011e8e:	185b      	adds	r3, r3, r1
 8011e90:	bf58      	it	pl
 8011e92:	9902      	ldrpl	r1, [sp, #8]
 8011e94:	9307      	str	r3, [sp, #28]
 8011e96:	bf57      	itett	pl
 8011e98:	1a5b      	subpl	r3, r3, r1
 8011e9a:	9903      	ldrmi	r1, [sp, #12]
 8011e9c:	9307      	strpl	r3, [sp, #28]
 8011e9e:	9b03      	ldrpl	r3, [sp, #12]
 8011ea0:	bf58      	it	pl
 8011ea2:	1c59      	addpl	r1, r3, #1
 8011ea4:	2a00      	cmp	r2, #0
 8011ea6:	4489      	add	r9, r1
 8011ea8:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8011eac:	db2e      	blt.n	8011f0c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011eae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011eb0:	4293      	cmp	r3, r2
 8011eb2:	dd2b      	ble.n	8011f0c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011eb4:	9c01      	ldr	r4, [sp, #4]
 8011eb6:	6905      	ldr	r5, [r0, #16]
 8011eb8:	46a0      	mov	r8, r4
 8011eba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8011ebc:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8011ec0:	45a0      	cmp	r8, r4
 8011ec2:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8011ec6:	f040 814c 	bne.w	8012162 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8011eca:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011ece:	4551      	cmp	r1, sl
 8011ed0:	d103      	bne.n	8011eda <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8011ed2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011ed6:	4291      	cmp	r1, r2
 8011ed8:	d018      	beq.n	8011f0c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011eda:	ea5c 010e 	orrs.w	r1, ip, lr
 8011ede:	d00f      	beq.n	8011f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011ee0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011ee4:	2900      	cmp	r1, #0
 8011ee6:	db0b      	blt.n	8011f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011ee8:	428b      	cmp	r3, r1
 8011eea:	dd09      	ble.n	8011f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011eec:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8011ef0:	4299      	cmp	r1, r3
 8011ef2:	f101 0101 	add.w	r1, r1, #1
 8011ef6:	bf38      	it	cc
 8011ef8:	3508      	addcc	r5, #8
 8011efa:	6081      	str	r1, [r0, #8]
 8011efc:	bf38      	it	cc
 8011efe:	6105      	strcc	r5, [r0, #16]
 8011f00:	6903      	ldr	r3, [r0, #16]
 8011f02:	f8a3 a000 	strh.w	sl, [r3]
 8011f06:	805a      	strh	r2, [r3, #2]
 8011f08:	809e      	strh	r6, [r3, #4]
 8011f0a:	80de      	strh	r6, [r3, #6]
 8011f0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f0e:	6901      	ldr	r1, [r0, #16]
 8011f10:	441a      	add	r2, r3
 8011f12:	88cc      	ldrh	r4, [r1, #6]
 8011f14:	888b      	ldrh	r3, [r1, #4]
 8011f16:	4323      	orrs	r3, r4
 8011f18:	d010      	beq.n	8011f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011f1a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011f1e:	2c00      	cmp	r4, #0
 8011f20:	db0c      	blt.n	8011f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011f22:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011f24:	429c      	cmp	r4, r3
 8011f26:	da09      	bge.n	8011f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011f28:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011f2c:	429c      	cmp	r4, r3
 8011f2e:	f104 0401 	add.w	r4, r4, #1
 8011f32:	bf38      	it	cc
 8011f34:	3108      	addcc	r1, #8
 8011f36:	6084      	str	r4, [r0, #8]
 8011f38:	bf38      	it	cc
 8011f3a:	6101      	strcc	r1, [r0, #16]
 8011f3c:	6903      	ldr	r3, [r0, #16]
 8011f3e:	464f      	mov	r7, r9
 8011f40:	f8a3 a000 	strh.w	sl, [r3]
 8011f44:	805a      	strh	r2, [r3, #2]
 8011f46:	809e      	strh	r6, [r3, #4]
 8011f48:	80de      	strh	r6, [r3, #6]
 8011f4a:	9b06      	ldr	r3, [sp, #24]
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	d19c      	bne.n	8011e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8011f50:	9b01      	ldr	r3, [sp, #4]
 8011f52:	6907      	ldr	r7, [r0, #16]
 8011f54:	f1c3 0620 	rsb	r6, r3, #32
 8011f58:	9b05      	ldr	r3, [sp, #20]
 8011f5a:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8011f5e:	9b04      	ldr	r3, [sp, #16]
 8011f60:	429e      	cmp	r6, r3
 8011f62:	f040 81c7 	bne.w	80122f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8011f66:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011f6a:	459e      	cmp	lr, r3
 8011f6c:	d104      	bne.n	8011f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8011f6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	f43f ae3a 	beq.w	8011bec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011f78:	88f9      	ldrh	r1, [r7, #6]
 8011f7a:	88bb      	ldrh	r3, [r7, #4]
 8011f7c:	430b      	orrs	r3, r1
 8011f7e:	d010      	beq.n	8011fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011f80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	db0c      	blt.n	8011fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011f88:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011f8a:	428b      	cmp	r3, r1
 8011f8c:	da09      	bge.n	8011fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011f8e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011f92:	428b      	cmp	r3, r1
 8011f94:	f103 0301 	add.w	r3, r3, #1
 8011f98:	bf38      	it	cc
 8011f9a:	3708      	addcc	r7, #8
 8011f9c:	6083      	str	r3, [r0, #8]
 8011f9e:	bf38      	it	cc
 8011fa0:	6107      	strcc	r7, [r0, #16]
 8011fa2:	6903      	ldr	r3, [r0, #16]
 8011fa4:	f8a3 e000 	strh.w	lr, [r3]
 8011fa8:	e603      	b.n	8011bb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8011faa:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011fac:	9c03      	ldr	r4, [sp, #12]
 8011fae:	42a2      	cmp	r2, r4
 8011fb0:	f6ff ae1c 	blt.w	8011bec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011fb4:	9c06      	ldr	r4, [sp, #24]
 8011fb6:	42a2      	cmp	r2, r4
 8011fb8:	9c08      	ldr	r4, [sp, #32]
 8011fba:	bfbc      	itt	lt
 8011fbc:	3201      	addlt	r2, #1
 8011fbe:	9206      	strlt	r2, [sp, #24]
 8011fc0:	f1c3 0220 	rsb	r2, r3, #32
 8011fc4:	4362      	muls	r2, r4
 8011fc6:	2401      	movs	r4, #1
 8011fc8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011fca:	2420      	movs	r4, #32
 8011fcc:	e6d6      	b.n	8011d7c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8011fce:	ea4f 1861 	mov.w	r8, r1, asr #5
 8011fd2:	f009 021f 	and.w	r2, r9, #31
 8011fd6:	f001 011f 	and.w	r1, r1, #31
 8011fda:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8011fde:	920c      	str	r2, [sp, #48]	@ 0x30
 8011fe0:	45b0      	cmp	r8, r6
 8011fe2:	9a01      	ldr	r2, [sp, #4]
 8011fe4:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8011fe8:	eba2 0203 	sub.w	r2, r2, r3
 8011fec:	d108      	bne.n	8012000 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8011fee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ff0:	4496      	add	lr, r2
 8011ff2:	4419      	add	r1, r3
 8011ff4:	f8a5 e004 	strh.w	lr, [r5, #4]
 8011ff8:	fb02 a101 	mla	r1, r2, r1, sl
 8011ffc:	80e9      	strh	r1, [r5, #6]
 8011ffe:	e6fa      	b.n	8011df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012000:	2c00      	cmp	r4, #0
 8012002:	f2c0 80a7 	blt.w	8012154 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8012006:	2701      	movs	r7, #1
 8012008:	f1c1 0c20 	rsb	ip, r1, #32
 801200c:	970a      	str	r7, [sp, #40]	@ 0x28
 801200e:	2720      	movs	r7, #32
 8012010:	fb02 f20c 	mul.w	r2, r2, ip
 8012014:	9709      	str	r7, [sp, #36]	@ 0x24
 8012016:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012018:	fb92 fcf4 	sdiv	ip, r2, r4
 801201c:	fb04 221c 	mls	r2, r4, ip, r2
 8012020:	4439      	add	r1, r7
 8012022:	2a00      	cmp	r2, #0
 8012024:	bfbc      	itt	lt
 8012026:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801202a:	1912      	addlt	r2, r2, r4
 801202c:	fb0c a101 	mla	r1, ip, r1, sl
 8012030:	44e6      	add	lr, ip
 8012032:	80e9      	strh	r1, [r5, #6]
 8012034:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012036:	f8a5 e004 	strh.w	lr, [r5, #4]
 801203a:	eb08 0501 	add.w	r5, r8, r1
 801203e:	6901      	ldr	r1, [r0, #16]
 8012040:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8012044:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8012048:	ea58 070e 	orrs.w	r7, r8, lr
 801204c:	d010      	beq.n	8012070 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801204e:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8012052:	f1be 0f00 	cmp.w	lr, #0
 8012056:	db0b      	blt.n	8012070 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012058:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801205a:	45be      	cmp	lr, r7
 801205c:	da08      	bge.n	8012070 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801205e:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8012062:	45be      	cmp	lr, r7
 8012064:	bf3c      	itt	cc
 8012066:	3108      	addcc	r1, #8
 8012068:	6101      	strcc	r1, [r0, #16]
 801206a:	f10e 0101 	add.w	r1, lr, #1
 801206e:	6081      	str	r1, [r0, #8]
 8012070:	6901      	ldr	r1, [r0, #16]
 8012072:	f04f 0e00 	mov.w	lr, #0
 8012076:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801207a:	42ae      	cmp	r6, r5
 801207c:	800d      	strh	r5, [r1, #0]
 801207e:	4463      	add	r3, ip
 8012080:	f8a1 8002 	strh.w	r8, [r1, #2]
 8012084:	f8a1 e004 	strh.w	lr, [r1, #4]
 8012088:	f8a1 e006 	strh.w	lr, [r1, #6]
 801208c:	d053      	beq.n	8012136 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801208e:	9901      	ldr	r1, [sp, #4]
 8012090:	1b12      	subs	r2, r2, r4
 8012092:	1ac9      	subs	r1, r1, r3
 8012094:	4461      	add	r1, ip
 8012096:	0149      	lsls	r1, r1, #5
 8012098:	fb91 fef4 	sdiv	lr, r1, r4
 801209c:	fb04 111e 	mls	r1, r4, lr, r1
 80120a0:	2900      	cmp	r1, #0
 80120a2:	bfbc      	itt	lt
 80120a4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80120a8:	1909      	addlt	r1, r1, r4
 80120aa:	f10e 0701 	add.w	r7, lr, #1
 80120ae:	970d      	str	r7, [sp, #52]	@ 0x34
 80120b0:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80120b4:	1852      	adds	r2, r2, r1
 80120b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80120b8:	bf54      	ite	pl
 80120ba:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80120be:	46f4      	movmi	ip, lr
 80120c0:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80120c4:	bf58      	it	pl
 80120c6:	1b12      	subpl	r2, r2, r4
 80120c8:	4463      	add	r3, ip
 80120ca:	443d      	add	r5, r7
 80120cc:	44e3      	add	fp, ip
 80120ce:	f8aa b004 	strh.w	fp, [sl, #4]
 80120d2:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80120d6:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80120da:	f8aa b006 	strh.w	fp, [sl, #6]
 80120de:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80120e2:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80120e6:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80120ea:	ea5b 070a 	orrs.w	r7, fp, sl
 80120ee:	d014      	beq.n	801211a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80120f0:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80120f4:	f1ba 0f00 	cmp.w	sl, #0
 80120f8:	db0f      	blt.n	801211a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80120fa:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80120fc:	45ba      	cmp	sl, r7
 80120fe:	da0c      	bge.n	801211a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8012100:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8012104:	45ba      	cmp	sl, r7
 8012106:	f10a 0a01 	add.w	sl, sl, #1
 801210a:	bf38      	it	cc
 801210c:	f10c 0c08 	addcc.w	ip, ip, #8
 8012110:	f8c0 a008 	str.w	sl, [r0, #8]
 8012114:	bf38      	it	cc
 8012116:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801211a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801211e:	f04f 0700 	mov.w	r7, #0
 8012122:	42ae      	cmp	r6, r5
 8012124:	f8ac 5000 	strh.w	r5, [ip]
 8012128:	f8ac 8002 	strh.w	r8, [ip, #2]
 801212c:	f8ac 7004 	strh.w	r7, [ip, #4]
 8012130:	f8ac 7006 	strh.w	r7, [ip, #6]
 8012134:	d1bc      	bne.n	80120b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8012136:	6904      	ldr	r4, [r0, #16]
 8012138:	9a01      	ldr	r2, [sp, #4]
 801213a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801213c:	1ad3      	subs	r3, r2, r3
 801213e:	88a2      	ldrh	r2, [r4, #4]
 8012140:	3120      	adds	r1, #32
 8012142:	441a      	add	r2, r3
 8012144:	80a2      	strh	r2, [r4, #4]
 8012146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012148:	1a89      	subs	r1, r1, r2
 801214a:	88e2      	ldrh	r2, [r4, #6]
 801214c:	fb03 2301 	mla	r3, r3, r1, r2
 8012150:	80e3      	strh	r3, [r4, #6]
 8012152:	e650      	b.n	8011df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012154:	f04f 37ff 	mov.w	r7, #4294967295
 8012158:	434a      	muls	r2, r1
 801215a:	4264      	negs	r4, r4
 801215c:	970a      	str	r7, [sp, #40]	@ 0x28
 801215e:	2700      	movs	r7, #0
 8012160:	e758      	b.n	8012014 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8012162:	ea4f 1867 	mov.w	r8, r7, asr #5
 8012166:	f009 031f 	and.w	r3, r9, #31
 801216a:	f007 071f 	and.w	r7, r7, #31
 801216e:	fa1f fc8c 	uxth.w	ip, ip
 8012172:	45d0      	cmp	r8, sl
 8012174:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012176:	fa1f fe8e 	uxth.w	lr, lr
 801217a:	d10a      	bne.n	8012192 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801217c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801217e:	449c      	add	ip, r3
 8012180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012182:	441f      	add	r7, r3
 8012184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012186:	f8a5 c004 	strh.w	ip, [r5, #4]
 801218a:	fb03 e707 	mla	r7, r3, r7, lr
 801218e:	80ef      	strh	r7, [r5, #6]
 8012190:	e6bc      	b.n	8011f0c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012192:	2900      	cmp	r1, #0
 8012194:	f2c0 80a6 	blt.w	80122e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8012198:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801219a:	f1c7 0320 	rsb	r3, r7, #32
 801219e:	4363      	muls	r3, r4
 80121a0:	2401      	movs	r4, #1
 80121a2:	940d      	str	r4, [sp, #52]	@ 0x34
 80121a4:	2420      	movs	r4, #32
 80121a6:	940c      	str	r4, [sp, #48]	@ 0x30
 80121a8:	fb93 f4f1 	sdiv	r4, r3, r1
 80121ac:	fb01 3b14 	mls	fp, r1, r4, r3
 80121b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121b2:	f1bb 0f00 	cmp.w	fp, #0
 80121b6:	441f      	add	r7, r3
 80121b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80121ba:	bfbc      	itt	lt
 80121bc:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80121c0:	448b      	addlt	fp, r1
 80121c2:	fb04 e707 	mla	r7, r4, r7, lr
 80121c6:	44a4      	add	ip, r4
 80121c8:	80ef      	strh	r7, [r5, #6]
 80121ca:	f8a5 c004 	strh.w	ip, [r5, #4]
 80121ce:	eb08 0503 	add.w	r5, r8, r3
 80121d2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80121d6:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80121da:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80121de:	ea5e 0307 	orrs.w	r3, lr, r7
 80121e2:	d011      	beq.n	8012208 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80121e4:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80121e8:	f1be 0f00 	cmp.w	lr, #0
 80121ec:	db0c      	blt.n	8012208 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80121ee:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80121f0:	45be      	cmp	lr, r7
 80121f2:	da09      	bge.n	8012208 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80121f4:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80121f8:	45be      	cmp	lr, r7
 80121fa:	bf3c      	itt	cc
 80121fc:	f10c 0708 	addcc.w	r7, ip, #8
 8012200:	6107      	strcc	r7, [r0, #16]
 8012202:	f10e 0701 	add.w	r7, lr, #1
 8012206:	6087      	str	r7, [r0, #8]
 8012208:	6907      	ldr	r7, [r0, #16]
 801220a:	b213      	sxth	r3, r2
 801220c:	4555      	cmp	r5, sl
 801220e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012210:	807b      	strh	r3, [r7, #2]
 8012212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012214:	803d      	strh	r5, [r7, #0]
 8012216:	80be      	strh	r6, [r7, #4]
 8012218:	eb04 0c03 	add.w	ip, r4, r3
 801221c:	80fe      	strh	r6, [r7, #6]
 801221e:	d050      	beq.n	80122c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8012220:	9b01      	ldr	r3, [sp, #4]
 8012222:	eba3 070c 	sub.w	r7, r3, ip
 8012226:	ebab 0301 	sub.w	r3, fp, r1
 801222a:	443c      	add	r4, r7
 801222c:	9309      	str	r3, [sp, #36]	@ 0x24
 801222e:	0164      	lsls	r4, r4, #5
 8012230:	fb94 f8f1 	sdiv	r8, r4, r1
 8012234:	fb01 4418 	mls	r4, r1, r8, r4
 8012238:	2c00      	cmp	r4, #0
 801223a:	bfbc      	itt	lt
 801223c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8012240:	1864      	addlt	r4, r4, r1
 8012242:	f108 0701 	add.w	r7, r8, #1
 8012246:	9711      	str	r7, [sp, #68]	@ 0x44
 8012248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801224a:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801224e:	191b      	adds	r3, r3, r4
 8012250:	f8be b004 	ldrh.w	fp, [lr, #4]
 8012254:	bf54      	ite	pl
 8012256:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8012258:	4647      	movmi	r7, r8
 801225a:	9309      	str	r3, [sp, #36]	@ 0x24
 801225c:	bf58      	it	pl
 801225e:	1a5b      	subpl	r3, r3, r1
 8012260:	44bb      	add	fp, r7
 8012262:	44bc      	add	ip, r7
 8012264:	bf58      	it	pl
 8012266:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8012268:	f8ae b004 	strh.w	fp, [lr, #4]
 801226c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8012270:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012274:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8012276:	f8ae b006 	strh.w	fp, [lr, #6]
 801227a:	443d      	add	r5, r7
 801227c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8012280:	f8be b006 	ldrh.w	fp, [lr, #6]
 8012284:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8012288:	ea5b 0307 	orrs.w	r3, fp, r7
 801228c:	d011      	beq.n	80122b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801228e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8012292:	f1bb 0f00 	cmp.w	fp, #0
 8012296:	db0c      	blt.n	80122b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012298:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801229a:	45bb      	cmp	fp, r7
 801229c:	da09      	bge.n	80122b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801229e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80122a2:	45bb      	cmp	fp, r7
 80122a4:	bf3c      	itt	cc
 80122a6:	f10e 0708 	addcc.w	r7, lr, #8
 80122aa:	6107      	strcc	r7, [r0, #16]
 80122ac:	f10b 0701 	add.w	r7, fp, #1
 80122b0:	6087      	str	r7, [r0, #8]
 80122b2:	6907      	ldr	r7, [r0, #16]
 80122b4:	4555      	cmp	r5, sl
 80122b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80122b8:	803d      	strh	r5, [r7, #0]
 80122ba:	807b      	strh	r3, [r7, #2]
 80122bc:	80be      	strh	r6, [r7, #4]
 80122be:	80fe      	strh	r6, [r7, #6]
 80122c0:	d1c2      	bne.n	8012248 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80122c2:	9b01      	ldr	r3, [sp, #4]
 80122c4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80122c6:	eba3 0c0c 	sub.w	ip, r3, ip
 80122ca:	6903      	ldr	r3, [r0, #16]
 80122cc:	3720      	adds	r7, #32
 80122ce:	8899      	ldrh	r1, [r3, #4]
 80122d0:	4461      	add	r1, ip
 80122d2:	8099      	strh	r1, [r3, #4]
 80122d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80122d6:	1a7f      	subs	r7, r7, r1
 80122d8:	88d9      	ldrh	r1, [r3, #6]
 80122da:	fb0c 1c07 	mla	ip, ip, r7, r1
 80122de:	f8a3 c006 	strh.w	ip, [r3, #6]
 80122e2:	e613      	b.n	8011f0c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80122e4:	f04f 34ff 	mov.w	r4, #4294967295
 80122e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122ea:	4249      	negs	r1, r1
 80122ec:	940d      	str	r4, [sp, #52]	@ 0x34
 80122ee:	2400      	movs	r4, #0
 80122f0:	437b      	muls	r3, r7
 80122f2:	e758      	b.n	80121a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80122f4:	9905      	ldr	r1, [sp, #20]
 80122f6:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80122fa:	f009 0c1f 	and.w	ip, r9, #31
 80122fe:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8012302:	f001 011f 	and.w	r1, r1, #31
 8012306:	45f3      	cmp	fp, lr
 8012308:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801230c:	9102      	str	r1, [sp, #8]
 801230e:	9904      	ldr	r1, [sp, #16]
 8012310:	eba1 0406 	sub.w	r4, r1, r6
 8012314:	d108      	bne.n	8012328 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8012316:	9b02      	ldr	r3, [sp, #8]
 8012318:	44a0      	add	r8, r4
 801231a:	449c      	add	ip, r3
 801231c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8012320:	fb04 a40c 	mla	r4, r4, ip, sl
 8012324:	80fc      	strh	r4, [r7, #6]
 8012326:	e461      	b.n	8011bec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012328:	9905      	ldr	r1, [sp, #20]
 801232a:	ebb1 0109 	subs.w	r1, r1, r9
 801232e:	bf51      	iteee	pl
 8012330:	f1cc 0520 	rsbpl	r5, ip, #32
 8012334:	fb04 f40c 	mulmi.w	r4, r4, ip
 8012338:	4249      	negmi	r1, r1
 801233a:	2500      	movmi	r5, #0
 801233c:	bf5d      	ittte	pl
 801233e:	436c      	mulpl	r4, r5
 8012340:	2520      	movpl	r5, #32
 8012342:	f04f 0901 	movpl.w	r9, #1
 8012346:	f04f 39ff 	movmi.w	r9, #4294967295
 801234a:	9501      	str	r5, [sp, #4]
 801234c:	9b01      	ldr	r3, [sp, #4]
 801234e:	fb94 f5f1 	sdiv	r5, r4, r1
 8012352:	fb01 4415 	mls	r4, r1, r5, r4
 8012356:	449c      	add	ip, r3
 8012358:	eb0b 0309 	add.w	r3, fp, r9
 801235c:	2c00      	cmp	r4, #0
 801235e:	bfbc      	itt	lt
 8012360:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8012364:	1864      	addlt	r4, r4, r1
 8012366:	44a8      	add	r8, r5
 8012368:	fb05 ac0c 	mla	ip, r5, ip, sl
 801236c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8012370:	f8a7 c006 	strh.w	ip, [r7, #6]
 8012374:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012378:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801237c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012380:	ea58 0707 	orrs.w	r7, r8, r7
 8012384:	d011      	beq.n	80123aa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8012386:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801238a:	f1b8 0f00 	cmp.w	r8, #0
 801238e:	db0c      	blt.n	80123aa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8012390:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012392:	45b8      	cmp	r8, r7
 8012394:	da09      	bge.n	80123aa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8012396:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801239a:	45b8      	cmp	r8, r7
 801239c:	bf3c      	itt	cc
 801239e:	f10c 0708 	addcc.w	r7, ip, #8
 80123a2:	6107      	strcc	r7, [r0, #16]
 80123a4:	f108 0701 	add.w	r7, r8, #1
 80123a8:	6087      	str	r7, [r0, #8]
 80123aa:	6907      	ldr	r7, [r0, #16]
 80123ac:	f04f 0c00 	mov.w	ip, #0
 80123b0:	b212      	sxth	r2, r2
 80123b2:	459e      	cmp	lr, r3
 80123b4:	803b      	strh	r3, [r7, #0]
 80123b6:	442e      	add	r6, r5
 80123b8:	807a      	strh	r2, [r7, #2]
 80123ba:	f8a7 c004 	strh.w	ip, [r7, #4]
 80123be:	f8a7 c006 	strh.w	ip, [r7, #6]
 80123c2:	d04b      	beq.n	801245c <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80123c4:	9f04      	ldr	r7, [sp, #16]
 80123c6:	1a64      	subs	r4, r4, r1
 80123c8:	f04f 0a00 	mov.w	sl, #0
 80123cc:	1bbf      	subs	r7, r7, r6
 80123ce:	443d      	add	r5, r7
 80123d0:	016d      	lsls	r5, r5, #5
 80123d2:	fb95 f8f1 	sdiv	r8, r5, r1
 80123d6:	fb01 5518 	mls	r5, r1, r8, r5
 80123da:	4565      	cmp	r5, ip
 80123dc:	bfbc      	itt	lt
 80123de:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80123e2:	186d      	addlt	r5, r5, r1
 80123e4:	f108 0701 	add.w	r7, r8, #1
 80123e8:	9703      	str	r7, [sp, #12]
 80123ea:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80123ee:	1964      	adds	r4, r4, r5
 80123f0:	444b      	add	r3, r9
 80123f2:	bf54      	ite	pl
 80123f4:	9f03      	ldrpl	r7, [sp, #12]
 80123f6:	4647      	movmi	r7, r8
 80123f8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80123fc:	bf58      	it	pl
 80123fe:	1a64      	subpl	r4, r4, r1
 8012400:	443e      	add	r6, r7
 8012402:	44bb      	add	fp, r7
 8012404:	f8ac b004 	strh.w	fp, [ip, #4]
 8012408:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801240c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012410:	f8ac b006 	strh.w	fp, [ip, #6]
 8012414:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012418:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801241c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012420:	ea5b 0707 	orrs.w	r7, fp, r7
 8012424:	d011      	beq.n	801244a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012426:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801242a:	f1bb 0f00 	cmp.w	fp, #0
 801242e:	db0c      	blt.n	801244a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012430:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012432:	45bb      	cmp	fp, r7
 8012434:	da09      	bge.n	801244a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012436:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801243a:	45bb      	cmp	fp, r7
 801243c:	bf3c      	itt	cc
 801243e:	f10c 0708 	addcc.w	r7, ip, #8
 8012442:	6107      	strcc	r7, [r0, #16]
 8012444:	f10b 0701 	add.w	r7, fp, #1
 8012448:	6087      	str	r7, [r0, #8]
 801244a:	6907      	ldr	r7, [r0, #16]
 801244c:	459e      	cmp	lr, r3
 801244e:	803b      	strh	r3, [r7, #0]
 8012450:	807a      	strh	r2, [r7, #2]
 8012452:	f8a7 a004 	strh.w	sl, [r7, #4]
 8012456:	f8a7 a006 	strh.w	sl, [r7, #6]
 801245a:	d1c6      	bne.n	80123ea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 801245c:	9b04      	ldr	r3, [sp, #16]
 801245e:	1b9e      	subs	r6, r3, r6
 8012460:	6903      	ldr	r3, [r0, #16]
 8012462:	889a      	ldrh	r2, [r3, #4]
 8012464:	4432      	add	r2, r6
 8012466:	809a      	strh	r2, [r3, #4]
 8012468:	9a02      	ldr	r2, [sp, #8]
 801246a:	f102 0c20 	add.w	ip, r2, #32
 801246e:	9a01      	ldr	r2, [sp, #4]
 8012470:	ebac 0c02 	sub.w	ip, ip, r2
 8012474:	88da      	ldrh	r2, [r3, #6]
 8012476:	fb06 260c 	mla	r6, r6, ip, r2
 801247a:	80de      	strh	r6, [r3, #6]
 801247c:	f7ff bbb6 	b.w	8011bec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08012480 <_ZN8touchgfx7Outline6lineToEii>:
 8012480:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012482:	079b      	lsls	r3, r3, #30
 8012484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012486:	460e      	mov	r6, r1
 8012488:	4615      	mov	r5, r2
 801248a:	d511      	bpl.n	80124b0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801248c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8012490:	ea86 0701 	eor.w	r7, r6, r1
 8012494:	ea85 0302 	eor.w	r3, r5, r2
 8012498:	433b      	orrs	r3, r7
 801249a:	d009      	beq.n	80124b0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801249c:	4633      	mov	r3, r6
 801249e:	9500      	str	r5, [sp, #0]
 80124a0:	f7ff fb4c 	bl	8011b3c <_ZN8touchgfx7Outline10renderLineEiiii>
 80124a4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80124a6:	f043 0301 	orr.w	r3, r3, #1
 80124aa:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80124ae:	6243      	str	r3, [r0, #36]	@ 0x24
 80124b0:	b003      	add	sp, #12
 80124b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080124b4 <_ZN8touchgfx7Outline6moveToEii>:
 80124b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80124b8:	4615      	mov	r5, r2
 80124ba:	4604      	mov	r4, r0
 80124bc:	460e      	mov	r6, r1
 80124be:	079a      	lsls	r2, r3, #30
 80124c0:	d401      	bmi.n	80124c6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80124c2:	f7ff fb07 	bl	8011ad4 <_ZN8touchgfx7Outline5resetEv>
 80124c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80124c8:	07db      	lsls	r3, r3, #31
 80124ca:	d504      	bpl.n	80124d6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80124cc:	4620      	mov	r0, r4
 80124ce:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80124d2:	f7ff ffd5 	bl	8012480 <_ZN8touchgfx7Outline6lineToEii>
 80124d6:	6923      	ldr	r3, [r4, #16]
 80124d8:	1170      	asrs	r0, r6, #5
 80124da:	1169      	asrs	r1, r5, #5
 80124dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124e0:	4290      	cmp	r0, r2
 80124e2:	d103      	bne.n	80124ec <_ZN8touchgfx7Outline6moveToEii+0x38>
 80124e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80124e8:	4291      	cmp	r1, r2
 80124ea:	d01a      	beq.n	8012522 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80124ec:	88df      	ldrh	r7, [r3, #6]
 80124ee:	889a      	ldrh	r2, [r3, #4]
 80124f0:	433a      	orrs	r2, r7
 80124f2:	d010      	beq.n	8012516 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80124f4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80124f8:	2a00      	cmp	r2, #0
 80124fa:	db0c      	blt.n	8012516 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80124fc:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80124fe:	42ba      	cmp	r2, r7
 8012500:	da09      	bge.n	8012516 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8012502:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8012506:	42ba      	cmp	r2, r7
 8012508:	f102 0201 	add.w	r2, r2, #1
 801250c:	bf38      	it	cc
 801250e:	3308      	addcc	r3, #8
 8012510:	60a2      	str	r2, [r4, #8]
 8012512:	bf38      	it	cc
 8012514:	6123      	strcc	r3, [r4, #16]
 8012516:	6923      	ldr	r3, [r4, #16]
 8012518:	2200      	movs	r2, #0
 801251a:	8018      	strh	r0, [r3, #0]
 801251c:	8059      	strh	r1, [r3, #2]
 801251e:	809a      	strh	r2, [r3, #4]
 8012520:	80da      	strh	r2, [r3, #6]
 8012522:	6166      	str	r6, [r4, #20]
 8012524:	6225      	str	r5, [r4, #32]
 8012526:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801252a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801252c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012530:	b0d0      	sub	sp, #320	@ 0x140
 8012532:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012536:	466c      	mov	r4, sp
 8012538:	4627      	mov	r7, r4
 801253a:	1a0d      	subs	r5, r1, r0
 801253c:	f100 0308 	add.w	r3, r0, #8
 8012540:	2d48      	cmp	r5, #72	@ 0x48
 8012542:	f340 80d5 	ble.w	80126f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012546:	112d      	asrs	r5, r5, #4
 8012548:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801254c:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012550:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8012554:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8012558:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801255c:	6816      	ldr	r6, [r2, #0]
 801255e:	6006      	str	r6, [r0, #0]
 8012560:	6856      	ldr	r6, [r2, #4]
 8012562:	6046      	str	r6, [r0, #4]
 8012564:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012568:	f8a2 8002 	strh.w	r8, [r2, #2]
 801256c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012570:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012574:	f1a1 0208 	sub.w	r2, r1, #8
 8012578:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801257c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8012580:	4565      	cmp	r5, ip
 8012582:	db06      	blt.n	8012592 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8012584:	d119      	bne.n	80125ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8012586:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801258a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801258e:	42ae      	cmp	r6, r5
 8012590:	dd13      	ble.n	80125ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8012592:	460e      	mov	r6, r1
 8012594:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8012598:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801259c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80125a0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80125a4:	601d      	str	r5, [r3, #0]
 80125a6:	6875      	ldr	r5, [r6, #4]
 80125a8:	605d      	str	r5, [r3, #4]
 80125aa:	f821 9c08 	strh.w	r9, [r1, #-8]
 80125ae:	f821 cc06 	strh.w	ip, [r1, #-6]
 80125b2:	f821 8c04 	strh.w	r8, [r1, #-4]
 80125b6:	f821 ec02 	strh.w	lr, [r1, #-2]
 80125ba:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80125be:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80125c2:	42ae      	cmp	r6, r5
 80125c4:	db06      	blt.n	80125d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80125c6:	d116      	bne.n	80125f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80125c8:	f9b0 c000 	ldrsh.w	ip, [r0]
 80125cc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80125d0:	45ac      	cmp	ip, r5
 80125d2:	da10      	bge.n	80125f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80125d4:	681d      	ldr	r5, [r3, #0]
 80125d6:	f9b0 8000 	ldrsh.w	r8, [r0]
 80125da:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80125de:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80125e2:	6005      	str	r5, [r0, #0]
 80125e4:	685d      	ldr	r5, [r3, #4]
 80125e6:	f8a0 8008 	strh.w	r8, [r0, #8]
 80125ea:	6045      	str	r5, [r0, #4]
 80125ec:	8146      	strh	r6, [r0, #10]
 80125ee:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80125f2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80125f6:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80125fa:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80125fe:	4565      	cmp	r5, ip
 8012600:	db06      	blt.n	8012610 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8012602:	d119      	bne.n	8012638 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012604:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8012608:	f9b0 5000 	ldrsh.w	r5, [r0]
 801260c:	42ae      	cmp	r6, r5
 801260e:	da13      	bge.n	8012638 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012610:	460e      	mov	r6, r1
 8012612:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012616:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801261a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801261e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8012622:	6005      	str	r5, [r0, #0]
 8012624:	6875      	ldr	r5, [r6, #4]
 8012626:	6045      	str	r5, [r0, #4]
 8012628:	f821 9c08 	strh.w	r9, [r1, #-8]
 801262c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8012630:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012634:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012638:	3308      	adds	r3, #8
 801263a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801263e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8012642:	45e6      	cmp	lr, ip
 8012644:	dbf8      	blt.n	8012638 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012646:	d105      	bne.n	8012654 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012648:	f9b3 6000 	ldrsh.w	r6, [r3]
 801264c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012650:	42ae      	cmp	r6, r5
 8012652:	dbf1      	blt.n	8012638 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012654:	4615      	mov	r5, r2
 8012656:	3a08      	subs	r2, #8
 8012658:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801265c:	45b4      	cmp	ip, r6
 801265e:	dbf9      	blt.n	8012654 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012660:	d105      	bne.n	801266e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8012662:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012666:	f9b2 6000 	ldrsh.w	r6, [r2]
 801266a:	45b0      	cmp	r8, r6
 801266c:	dbf2      	blt.n	8012654 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801266e:	4293      	cmp	r3, r2
 8012670:	f1a5 0608 	sub.w	r6, r5, #8
 8012674:	d816      	bhi.n	80126a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8012676:	f8d6 c000 	ldr.w	ip, [r6]
 801267a:	f9b3 a000 	ldrsh.w	sl, [r3]
 801267e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8012682:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8012686:	f8c3 c000 	str.w	ip, [r3]
 801268a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801268e:	f8c3 c004 	str.w	ip, [r3, #4]
 8012692:	f825 ac08 	strh.w	sl, [r5, #-8]
 8012696:	f825 ec06 	strh.w	lr, [r5, #-6]
 801269a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801269e:	f825 8c02 	strh.w	r8, [r5, #-2]
 80126a2:	e7c9      	b.n	8012638 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80126a4:	f8d6 e000 	ldr.w	lr, [r6]
 80126a8:	f9b0 a000 	ldrsh.w	sl, [r0]
 80126ac:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80126b0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80126b4:	f8c0 e000 	str.w	lr, [r0]
 80126b8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80126bc:	1a16      	subs	r6, r2, r0
 80126be:	f8c0 e004 	str.w	lr, [r0, #4]
 80126c2:	f825 ac08 	strh.w	sl, [r5, #-8]
 80126c6:	f825 cc06 	strh.w	ip, [r5, #-6]
 80126ca:	f825 9c04 	strh.w	r9, [r5, #-4]
 80126ce:	f825 8c02 	strh.w	r8, [r5, #-2]
 80126d2:	1acd      	subs	r5, r1, r3
 80126d4:	10ed      	asrs	r5, r5, #3
 80126d6:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80126da:	bfb5      	itete	lt
 80126dc:	e9c4 0200 	strdlt	r0, r2, [r4]
 80126e0:	e9c4 3100 	strdge	r3, r1, [r4]
 80126e4:	460a      	movlt	r2, r1
 80126e6:	4603      	movge	r3, r0
 80126e8:	3408      	adds	r4, #8
 80126ea:	4618      	mov	r0, r3
 80126ec:	4611      	mov	r1, r2
 80126ee:	e724      	b.n	801253a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80126f0:	4299      	cmp	r1, r3
 80126f2:	d927      	bls.n	8012744 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80126f4:	f1a3 0210 	sub.w	r2, r3, #16
 80126f8:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80126fc:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8012700:	45ac      	cmp	ip, r5
 8012702:	db06      	blt.n	8012712 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8012704:	d11c      	bne.n	8012740 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8012706:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801270a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801270e:	42ae      	cmp	r6, r5
 8012710:	da16      	bge.n	8012740 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8012712:	4615      	mov	r5, r2
 8012714:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8012718:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801271c:	3a08      	subs	r2, #8
 801271e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8012722:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8012726:	6196      	str	r6, [r2, #24]
 8012728:	42a8      	cmp	r0, r5
 801272a:	686e      	ldr	r6, [r5, #4]
 801272c:	f8a2 9010 	strh.w	r9, [r2, #16]
 8012730:	61d6      	str	r6, [r2, #28]
 8012732:	f8a2 c012 	strh.w	ip, [r2, #18]
 8012736:	f8a2 8014 	strh.w	r8, [r2, #20]
 801273a:	f8a2 e016 	strh.w	lr, [r2, #22]
 801273e:	d1db      	bne.n	80126f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8012740:	3308      	adds	r3, #8
 8012742:	e7d5      	b.n	80126f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012744:	42bc      	cmp	r4, r7
 8012746:	d903      	bls.n	8012750 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8012748:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801274c:	3c08      	subs	r4, #8
 801274e:	e6f4      	b.n	801253a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8012750:	b050      	add	sp, #320	@ 0x140
 8012752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012756 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8012756:	b510      	push	{r4, lr}
 8012758:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801275a:	4604      	mov	r4, r0
 801275c:	07da      	lsls	r2, r3, #31
 801275e:	d507      	bpl.n	8012770 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8012760:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8012764:	f7ff fe8c 	bl	8012480 <_ZN8touchgfx7Outline6lineToEii>
 8012768:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801276a:	f023 0301 	bic.w	r3, r3, #1
 801276e:	6243      	str	r3, [r0, #36]	@ 0x24
 8012770:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012772:	079b      	lsls	r3, r3, #30
 8012774:	d521      	bpl.n	80127ba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8012776:	6923      	ldr	r3, [r4, #16]
 8012778:	88d9      	ldrh	r1, [r3, #6]
 801277a:	889a      	ldrh	r2, [r3, #4]
 801277c:	430a      	orrs	r2, r1
 801277e:	d010      	beq.n	80127a2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012780:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012784:	2a00      	cmp	r2, #0
 8012786:	db0c      	blt.n	80127a2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012788:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801278a:	428a      	cmp	r2, r1
 801278c:	da09      	bge.n	80127a2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801278e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8012792:	4291      	cmp	r1, r2
 8012794:	f102 0201 	add.w	r2, r2, #1
 8012798:	bf88      	it	hi
 801279a:	3308      	addhi	r3, #8
 801279c:	60a2      	str	r2, [r4, #8]
 801279e:	bf88      	it	hi
 80127a0:	6123      	strhi	r3, [r4, #16]
 80127a2:	68a1      	ldr	r1, [r4, #8]
 80127a4:	b129      	cbz	r1, 80127b2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80127a6:	6863      	ldr	r3, [r4, #4]
 80127a8:	4299      	cmp	r1, r3
 80127aa:	d802      	bhi.n	80127b2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80127ac:	68e0      	ldr	r0, [r4, #12]
 80127ae:	f7ff febd 	bl	801252c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80127b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80127b4:	f023 0302 	bic.w	r3, r3, #2
 80127b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80127ba:	68e0      	ldr	r0, [r4, #12]
 80127bc:	bd10      	pop	{r4, pc}
	...

080127c0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80127c0:	4b01      	ldr	r3, [pc, #4]	@ (80127c8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80127c2:	6818      	ldr	r0, [r3, #0]
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	24025304 	.word	0x24025304

080127cc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80127cc:	4b01      	ldr	r3, [pc, #4]	@ (80127d4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80127ce:	6818      	ldr	r0, [r3, #0]
 80127d0:	4770      	bx	lr
 80127d2:	bf00      	nop
 80127d4:	24025308 	.word	0x24025308

080127d8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80127d8:	b510      	push	{r4, lr}
 80127da:	6803      	ldr	r3, [r0, #0]
 80127dc:	460c      	mov	r4, r1
 80127de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127e0:	4798      	blx	r3
 80127e2:	1b03      	subs	r3, r0, r4
 80127e4:	4258      	negs	r0, r3
 80127e6:	4158      	adcs	r0, r3
 80127e8:	bd10      	pop	{r4, pc}
	...

080127ec <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80127ec:	4b01      	ldr	r3, [pc, #4]	@ (80127f4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80127ee:	6019      	str	r1, [r3, #0]
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	2402530c 	.word	0x2402530c

080127f8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80127f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127fc:	4696      	mov	lr, r2
 80127fe:	b097      	sub	sp, #92	@ 0x5c
 8012800:	4605      	mov	r5, r0
 8012802:	4614      	mov	r4, r2
 8012804:	460e      	mov	r6, r1
 8012806:	461f      	mov	r7, r3
 8012808:	f10d 0c1c 	add.w	ip, sp, #28
 801280c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8012810:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8012814:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8012818:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801281c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012820:	f8de 3000 	ldr.w	r3, [lr]
 8012824:	f104 0e14 	add.w	lr, r4, #20
 8012828:	f8cc 3000 	str.w	r3, [ip]
 801282c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012830:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012834:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012838:	f8de 3000 	ldr.w	r3, [lr]
 801283c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012840:	f8cc 3000 	str.w	r3, [ip]
 8012844:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012848:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801284c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012850:	f8de 3000 	ldr.w	r3, [lr]
 8012854:	4631      	mov	r1, r6
 8012856:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012858:	4628      	mov	r0, r5
 801285a:	f8cc 3000 	str.w	r3, [ip]
 801285e:	682b      	ldr	r3, [r5, #0]
 8012860:	9201      	str	r2, [sp, #4]
 8012862:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012864:	f8cd 8008 	str.w	r8, [sp, #8]
 8012868:	9200      	str	r2, [sp, #0]
 801286a:	aa07      	add	r2, sp, #28
 801286c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012870:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8012874:	463b      	mov	r3, r7
 8012876:	47d8      	blx	fp
 8012878:	46a6      	mov	lr, r4
 801287a:	f10d 0c1c 	add.w	ip, sp, #28
 801287e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012886:	f8de 3000 	ldr.w	r3, [lr]
 801288a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801288e:	343c      	adds	r4, #60	@ 0x3c
 8012890:	f8cc 3000 	str.w	r3, [ip]
 8012894:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012898:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801289c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128a0:	f8de 3000 	ldr.w	r3, [lr]
 80128a4:	f8cc 3000 	str.w	r3, [ip]
 80128a8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80128ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128b2:	6823      	ldr	r3, [r4, #0]
 80128b4:	4631      	mov	r1, r6
 80128b6:	4628      	mov	r0, r5
 80128b8:	f8cc 3000 	str.w	r3, [ip]
 80128bc:	682b      	ldr	r3, [r5, #0]
 80128be:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80128c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80128c4:	f8cd 8008 	str.w	r8, [sp, #8]
 80128c8:	9201      	str	r2, [sp, #4]
 80128ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80128cc:	9200      	str	r2, [sp, #0]
 80128ce:	aa07      	add	r2, sp, #28
 80128d0:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80128d2:	463b      	mov	r3, r7
 80128d4:	47a0      	blx	r4
 80128d6:	b017      	add	sp, #92	@ 0x5c
 80128d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80128dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e0:	b08d      	sub	sp, #52	@ 0x34
 80128e2:	4688      	mov	r8, r1
 80128e4:	f8d3 c000 	ldr.w	ip, [r3]
 80128e8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80128ea:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80128ee:	680f      	ldr	r7, [r1, #0]
 80128f0:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80128f4:	eba7 070c 	sub.w	r7, r7, ip
 80128f8:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80128fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8012900:	42bc      	cmp	r4, r7
 8012902:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012904:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8012908:	bfa8      	it	ge
 801290a:	463c      	movge	r4, r7
 801290c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012910:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012914:	ee07 4a90 	vmov	s15, r4
 8012918:	eb09 0e0c 	add.w	lr, r9, ip
 801291c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8012920:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012924:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8012928:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801292c:	4571      	cmp	r1, lr
 801292e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8012932:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012936:	ee25 5a27 	vmul.f32	s10, s10, s15
 801293a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801293e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8012942:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012946:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801294a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801294e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012952:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012956:	f340 808c 	ble.w	8012a72 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801295a:	eba1 060e 	sub.w	r6, r1, lr
 801295e:	fb96 f5f4 	sdiv	r5, r6, r4
 8012962:	ee07 5a10 	vmov	s14, r5
 8012966:	2d00      	cmp	r5, #0
 8012968:	fb04 6615 	mls	r6, r4, r5, r6
 801296c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012970:	eea7 0a04 	vfma.f32	s0, s14, s8
 8012974:	eee7 0a24 	vfma.f32	s1, s14, s9
 8012978:	eea7 1a05 	vfma.f32	s2, s14, s10
 801297c:	dd12      	ble.n	80129a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801297e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8012982:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8012986:	ee31 2a45 	vsub.f32	s4, s2, s10
 801298a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012992:	bf14      	ite	ne
 8012994:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8012998:	eeb0 7a67 	vmoveq.f32	s14, s15
 801299c:	ee61 1a87 	vmul.f32	s3, s3, s14
 80129a0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80129a4:	fb05 f204 	mul.w	r2, r5, r4
 80129a8:	1abf      	subs	r7, r7, r2
 80129aa:	4494      	add	ip, r2
 80129ac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80129b0:	4411      	add	r1, r2
 80129b2:	eb09 020c 	add.w	r2, r9, ip
 80129b6:	b209      	sxth	r1, r1
 80129b8:	443a      	add	r2, r7
 80129ba:	428a      	cmp	r2, r1
 80129bc:	bfc4      	itt	gt
 80129be:	eba1 0209 	subgt.w	r2, r1, r9
 80129c2:	eba2 070c 	subgt.w	r7, r2, ip
 80129c6:	2f00      	cmp	r7, #0
 80129c8:	dd50      	ble.n	8012a6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80129ca:	fb97 f1f4 	sdiv	r1, r7, r4
 80129ce:	fb04 7211 	mls	r2, r4, r1, r7
 80129d2:	b90a      	cbnz	r2, 80129d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80129d4:	3901      	subs	r1, #1
 80129d6:	4622      	mov	r2, r4
 80129d8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80129dc:	6840      	ldr	r0, [r0, #4]
 80129de:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80129e2:	44b6      	add	lr, r6
 80129e4:	f8d0 a000 	ldr.w	sl, [r0]
 80129e8:	2900      	cmp	r1, #0
 80129ea:	bfcc      	ite	gt
 80129ec:	46a1      	movgt	r9, r4
 80129ee:	4691      	movle	r9, r2
 80129f0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80129f2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80129f4:	fb04 e505 	mla	r5, r4, r5, lr
 80129f8:	eef0 6a42 	vmov.f32	s13, s4
 80129fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012a00:	9008      	str	r0, [sp, #32]
 8012a02:	eeb0 7a61 	vmov.f32	s14, s3
 8012a06:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8012a08:	695b      	ldr	r3, [r3, #20]
 8012a0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012a0e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8012a12:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8012a16:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012a18:	445b      	add	r3, fp
 8012a1a:	9307      	str	r3, [sp, #28]
 8012a1c:	ee16 3a90 	vmov	r3, s13
 8012a20:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8012a24:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8012a28:	ee21 3a23 	vmul.f32	s6, s2, s7
 8012a2c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8012a30:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012a34:	ee17 7a90 	vmov	r7, s15
 8012a38:	ee73 7a42 	vsub.f32	s15, s6, s4
 8012a3c:	fb97 f7f4 	sdiv	r7, r7, r4
 8012a40:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012a44:	ee17 ca90 	vmov	ip, s15
 8012a48:	fb9c fcf4 	sdiv	ip, ip, r4
 8012a4c:	fb0c 3306 	mla	r3, ip, r6, r3
 8012a50:	9302      	str	r3, [sp, #8]
 8012a52:	ee17 3a10 	vmov	r3, s14
 8012a56:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8012a5a:	fb07 3706 	mla	r7, r7, r6, r3
 8012a5e:	eba9 0306 	sub.w	r3, r9, r6
 8012a62:	e9cd 4700 	strd	r4, r7, [sp]
 8012a66:	f8da 4008 	ldr.w	r4, [sl, #8]
 8012a6a:	47a0      	blx	r4
 8012a6c:	b00d      	add	sp, #52	@ 0x34
 8012a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a72:	2500      	movs	r5, #0
 8012a74:	462e      	mov	r6, r5
 8012a76:	e799      	b.n	80129ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08012a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a7c:	b0db      	sub	sp, #364	@ 0x16c
 8012a7e:	461d      	mov	r5, r3
 8012a80:	4614      	mov	r4, r2
 8012a82:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8012a86:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012a88:	4629      	mov	r1, r5
 8012a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a8c:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8012a90:	9009      	str	r0, [sp, #36]	@ 0x24
 8012a92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a94:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8012a98:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8012a9c:	9310      	str	r3, [sp, #64]	@ 0x40
 8012a9e:	6803      	ldr	r3, [r0, #0]
 8012aa0:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8012aa2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012aa6:	47b8      	blx	r7
 8012aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012aaa:	6058      	str	r0, [r3, #4]
 8012aac:	2800      	cmp	r0, #0
 8012aae:	f000 83a1 	beq.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012ab2:	682b      	ldr	r3, [r5, #0]
 8012ab4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8012ab8:	ed94 7a02 	vldr	s14, [r4, #8]
 8012abc:	9314      	str	r3, [sp, #80]	@ 0x50
 8012abe:	686b      	ldr	r3, [r5, #4]
 8012ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ac4:	9315      	str	r3, [sp, #84]	@ 0x54
 8012ac6:	4bc1      	ldr	r3, [pc, #772]	@ (8012dcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012ac8:	7819      	ldrb	r1, [r3, #0]
 8012aca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8012ace:	2900      	cmp	r1, #0
 8012ad0:	bf16      	itet	ne
 8012ad2:	4619      	movne	r1, r3
 8012ad4:	4611      	moveq	r1, r2
 8012ad6:	4613      	movne	r3, r2
 8012ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012adc:	9116      	str	r1, [sp, #88]	@ 0x58
 8012ade:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8012ae2:	f240 8387 	bls.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012ae6:	ed94 7a07 	vldr	s14, [r4, #28]
 8012aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af2:	f240 837f 	bls.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012af6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8012afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b02:	f240 8377 	bls.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012b06:	6822      	ldr	r2, [r4, #0]
 8012b08:	4bb1      	ldr	r3, [pc, #708]	@ (8012dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	f2c0 8372 	blt.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012b10:	49b0      	ldr	r1, [pc, #704]	@ (8012dd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8012b12:	6963      	ldr	r3, [r4, #20]
 8012b14:	428a      	cmp	r2, r1
 8012b16:	f300 836d 	bgt.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012b1a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8012b1e:	48ae      	ldr	r0, [pc, #696]	@ (8012dd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8012b20:	33ff      	adds	r3, #255	@ 0xff
 8012b22:	4283      	cmp	r3, r0
 8012b24:	f200 8366 	bhi.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012b28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8012b2a:	4dac      	ldr	r5, [pc, #688]	@ (8012ddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8012b2c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8012b30:	33ff      	adds	r3, #255	@ 0xff
 8012b32:	42ab      	cmp	r3, r5
 8012b34:	f200 835e 	bhi.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012b38:	6862      	ldr	r2, [r4, #4]
 8012b3a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8012b3e:	33ff      	adds	r3, #255	@ 0xff
 8012b40:	4283      	cmp	r3, r0
 8012b42:	f200 8357 	bhi.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012b46:	69a1      	ldr	r1, [r4, #24]
 8012b48:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8012b4c:	33ff      	adds	r3, #255	@ 0xff
 8012b4e:	4283      	cmp	r3, r0
 8012b50:	f200 8350 	bhi.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012b54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012b56:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8012b5a:	30ff      	adds	r0, #255	@ 0xff
 8012b5c:	42a8      	cmp	r0, r5
 8012b5e:	f200 8349 	bhi.w	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012b62:	428a      	cmp	r2, r1
 8012b64:	f280 8110 	bge.w	8012d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	f300 8119 	bgt.w	8012da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8012b6e:	4299      	cmp	r1, r3
 8012b70:	f280 811d 	bge.w	8012dae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8012b74:	2502      	movs	r5, #2
 8012b76:	2701      	movs	r7, #1
 8012b78:	46a9      	mov	r9, r5
 8012b7a:	46b8      	mov	r8, r7
 8012b7c:	f04f 0a00 	mov.w	sl, #0
 8012b80:	4621      	mov	r1, r4
 8012b82:	a849      	add	r0, sp, #292	@ 0x124
 8012b84:	f004 fb4e 	bl	8017224 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8012b88:	4622      	mov	r2, r4
 8012b8a:	4653      	mov	r3, sl
 8012b8c:	a949      	add	r1, sp, #292	@ 0x124
 8012b8e:	f8cd 9000 	str.w	r9, [sp]
 8012b92:	a819      	add	r0, sp, #100	@ 0x64
 8012b94:	f004 fc76 	bl	8017484 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012b98:	4622      	mov	r2, r4
 8012b9a:	4653      	mov	r3, sl
 8012b9c:	a949      	add	r1, sp, #292	@ 0x124
 8012b9e:	f8cd 8000 	str.w	r8, [sp]
 8012ba2:	a829      	add	r0, sp, #164	@ 0xa4
 8012ba4:	f004 fc6e 	bl	8017484 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012ba8:	4643      	mov	r3, r8
 8012baa:	4622      	mov	r2, r4
 8012bac:	a949      	add	r1, sp, #292	@ 0x124
 8012bae:	f8cd 9000 	str.w	r9, [sp]
 8012bb2:	a839      	add	r0, sp, #228	@ 0xe4
 8012bb4:	f004 fc66 	bl	8017484 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012bb8:	42af      	cmp	r7, r5
 8012bba:	af12      	add	r7, sp, #72	@ 0x48
 8012bbc:	bfb7      	itett	lt
 8012bbe:	2300      	movlt	r3, #0
 8012bc0:	2301      	movge	r3, #1
 8012bc2:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8012bc4:	ac19      	addlt	r4, sp, #100	@ 0x64
 8012bc6:	bfb1      	iteee	lt
 8012bc8:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8012bca:	ad19      	addge	r5, sp, #100	@ 0x64
 8012bcc:	930e      	strge	r3, [sp, #56]	@ 0x38
 8012bce:	ac29      	addge	r4, sp, #164	@ 0xa4
 8012bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012bd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012bd6:	e887 0003 	stmia.w	r7, {r0, r1}
 8012bda:	b928      	cbnz	r0, 8012be8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8012bdc:	4b80      	ldr	r3, [pc, #512]	@ (8012de0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8012bde:	6818      	ldr	r0, [r3, #0]
 8012be0:	6803      	ldr	r3, [r0, #0]
 8012be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012be4:	4798      	blx	r3
 8012be6:	6038      	str	r0, [r7, #0]
 8012be8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012bea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012bee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012bf2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8012bf4:	930c      	str	r3, [sp, #48]	@ 0x30
 8012bf6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012bf8:	6963      	ldr	r3, [r4, #20]
 8012bfa:	440b      	add	r3, r1
 8012bfc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012c00:	4408      	add	r0, r1
 8012c02:	b200      	sxth	r0, r0
 8012c04:	4283      	cmp	r3, r0
 8012c06:	900d      	str	r0, [sp, #52]	@ 0x34
 8012c08:	f280 80dd 	bge.w	8012dc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8012c0c:	428b      	cmp	r3, r1
 8012c0e:	da08      	bge.n	8012c22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012c10:	2a00      	cmp	r2, #0
 8012c12:	dd06      	ble.n	8012c22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012c14:	1acb      	subs	r3, r1, r3
 8012c16:	429a      	cmp	r2, r3
 8012c18:	f2c0 80e4 	blt.w	8012de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	f300 80e2 	bgt.w	8012de6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8012c22:	6967      	ldr	r7, [r4, #20]
 8012c24:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8012c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c2a:	443b      	add	r3, r7
 8012c2c:	461f      	mov	r7, r3
 8012c2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c30:	1bdf      	subs	r7, r3, r7
 8012c32:	4297      	cmp	r7, r2
 8012c34:	bfa8      	it	ge
 8012c36:	4617      	movge	r7, r2
 8012c38:	2f00      	cmp	r7, #0
 8012c3a:	f340 8166 	ble.w	8012f0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8012c3e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012c40:	6829      	ldr	r1, [r5, #0]
 8012c42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c46:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012c4a:	4411      	add	r1, r2
 8012c4c:	6820      	ldr	r0, [r4, #0]
 8012c4e:	4299      	cmp	r1, r3
 8012c50:	dd1a      	ble.n	8012c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012c52:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012c56:	4402      	add	r2, r0
 8012c58:	440b      	add	r3, r1
 8012c5a:	b21b      	sxth	r3, r3
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	dc13      	bgt.n	8012c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012c60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012c62:	a912      	add	r1, sp, #72	@ 0x48
 8012c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	9206      	str	r2, [sp, #24]
 8012c6c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012c6e:	9500      	str	r5, [sp, #0]
 8012c70:	9205      	str	r2, [sp, #20]
 8012c72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c74:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012c78:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8012c7a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012c7e:	aa49      	add	r2, sp, #292	@ 0x124
 8012c80:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8012c84:	4623      	mov	r3, r4
 8012c86:	47c8      	blx	r9
 8012c88:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8012c8c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8012c90:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8012c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c98:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8012c9c:	68a1      	ldr	r1, [r4, #8]
 8012c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012ca2:	ed94 6a08 	vldr	s12, [r4, #32]
 8012ca6:	edd4 6a07 	vldr	s13, [r4, #28]
 8012caa:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012cae:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012cb2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012cb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012cba:	edc4 6a07 	vstr	s13, [r4, #28]
 8012cbe:	441a      	add	r2, r3
 8012cc0:	6963      	ldr	r3, [r4, #20]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	6022      	str	r2, [r4, #0]
 8012cc6:	6163      	str	r3, [r4, #20]
 8012cc8:	69a3      	ldr	r3, [r4, #24]
 8012cca:	3b01      	subs	r3, #1
 8012ccc:	61a3      	str	r3, [r4, #24]
 8012cce:	6923      	ldr	r3, [r4, #16]
 8012cd0:	440b      	add	r3, r1
 8012cd2:	68e1      	ldr	r1, [r4, #12]
 8012cd4:	428b      	cmp	r3, r1
 8012cd6:	6123      	str	r3, [r4, #16]
 8012cd8:	db15      	blt.n	8012d06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8012cda:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8012cde:	3201      	adds	r2, #1
 8012ce0:	1a5b      	subs	r3, r3, r1
 8012ce2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012ce6:	6022      	str	r2, [r4, #0]
 8012ce8:	6123      	str	r3, [r4, #16]
 8012cea:	edc4 6a07 	vstr	s13, [r4, #28]
 8012cee:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8012cf2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012cf6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012cfa:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8012cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d02:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012d06:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8012d0a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8012d0e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8012d12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d16:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8012d1a:	68a9      	ldr	r1, [r5, #8]
 8012d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d20:	ed95 6a08 	vldr	s12, [r5, #32]
 8012d24:	edd5 6a07 	vldr	s13, [r5, #28]
 8012d28:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012d2c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012d30:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012d34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012d38:	edc5 6a07 	vstr	s13, [r5, #28]
 8012d3c:	441a      	add	r2, r3
 8012d3e:	696b      	ldr	r3, [r5, #20]
 8012d40:	3301      	adds	r3, #1
 8012d42:	602a      	str	r2, [r5, #0]
 8012d44:	616b      	str	r3, [r5, #20]
 8012d46:	69ab      	ldr	r3, [r5, #24]
 8012d48:	3b01      	subs	r3, #1
 8012d4a:	61ab      	str	r3, [r5, #24]
 8012d4c:	692b      	ldr	r3, [r5, #16]
 8012d4e:	440b      	add	r3, r1
 8012d50:	68e9      	ldr	r1, [r5, #12]
 8012d52:	428b      	cmp	r3, r1
 8012d54:	612b      	str	r3, [r5, #16]
 8012d56:	db15      	blt.n	8012d84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8012d58:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8012d5c:	3201      	adds	r2, #1
 8012d5e:	1a5b      	subs	r3, r3, r1
 8012d60:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012d64:	602a      	str	r2, [r5, #0]
 8012d66:	612b      	str	r3, [r5, #16]
 8012d68:	edc5 6a07 	vstr	s13, [r5, #28]
 8012d6c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8012d70:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012d74:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012d78:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8012d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d80:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012d84:	3f01      	subs	r7, #1
 8012d86:	e757      	b.n	8012c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8012d88:	4299      	cmp	r1, r3
 8012d8a:	dc13      	bgt.n	8012db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	da14      	bge.n	8012dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8012d90:	2502      	movs	r5, #2
 8012d92:	2703      	movs	r7, #3
 8012d94:	f04f 0800 	mov.w	r8, #0
 8012d98:	46a9      	mov	r9, r5
 8012d9a:	f04f 0a01 	mov.w	sl, #1
 8012d9e:	e6ef      	b.n	8012b80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012da0:	2501      	movs	r5, #1
 8012da2:	2700      	movs	r7, #0
 8012da4:	46a9      	mov	r9, r5
 8012da6:	46b8      	mov	r8, r7
 8012da8:	f04f 0a02 	mov.w	sl, #2
 8012dac:	e6e8      	b.n	8012b80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012dae:	2501      	movs	r5, #1
 8012db0:	2702      	movs	r7, #2
 8012db2:	e6e1      	b.n	8012b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8012db4:	2500      	movs	r5, #0
 8012db6:	2701      	movs	r7, #1
 8012db8:	e7f4      	b.n	8012da4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8012dba:	2702      	movs	r7, #2
 8012dbc:	2503      	movs	r5, #3
 8012dbe:	f04f 0900 	mov.w	r9, #0
 8012dc2:	46b8      	mov	r8, r7
 8012dc4:	e7e9      	b.n	8012d9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8012dc6:	4613      	mov	r3, r2
 8012dc8:	e728      	b.n	8012c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8012dca:	bf00      	nop
 8012dcc:	240252f4 	.word	0x240252f4
 8012dd0:	fffd8f01 	.word	0xfffd8f01
 8012dd4:	00027100 	.word	0x00027100
 8012dd8:	0004e1ff 	.word	0x0004e1ff
 8012ddc:	0004e1fe 	.word	0x0004e1fe
 8012de0:	240252fc 	.word	0x240252fc
 8012de4:	4613      	mov	r3, r2
 8012de6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012de8:	469e      	mov	lr, r3
 8012dea:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8012dec:	469c      	mov	ip, r3
 8012dee:	9111      	str	r1, [sp, #68]	@ 0x44
 8012df0:	f04f 0900 	mov.w	r9, #0
 8012df4:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8012df8:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8012dfc:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8012e00:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8012e04:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8012e08:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012e0c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8012e10:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8012e14:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8012e18:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8012e1c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8012e20:	f1bc 0f00 	cmp.w	ip, #0
 8012e24:	d147      	bne.n	8012eb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8012e26:	eb03 0c07 	add.w	ip, r3, r7
 8012e2a:	1ad7      	subs	r7, r2, r3
 8012e2c:	f1b9 0f00 	cmp.w	r9, #0
 8012e30:	d009      	beq.n	8012e46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012e32:	9029      	str	r0, [sp, #164]	@ 0xa4
 8012e34:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8012e38:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8012e3c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8012e40:	912d      	str	r1, [sp, #180]	@ 0xb4
 8012e42:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8012e46:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8012e48:	f04f 0800 	mov.w	r8, #0
 8012e4c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012e50:	9111      	str	r1, [sp, #68]	@ 0x44
 8012e52:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8012e56:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8012e5a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8012e5e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8012e62:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8012e66:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8012e6a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8012e6e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8012e72:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8012e76:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8012e7a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8012e7e:	f1be 0f00 	cmp.w	lr, #0
 8012e82:	d031      	beq.n	8012ee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012e84:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012e86:	4450      	add	r0, sl
 8012e88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012e8c:	4431      	add	r1, r6
 8012e8e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012e92:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012e96:	4549      	cmp	r1, r9
 8012e98:	db08      	blt.n	8012eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8012e9a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012e9e:	3001      	adds	r0, #1
 8012ea0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012ea4:	eba1 0109 	sub.w	r1, r1, r9
 8012ea8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012eac:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012eb0:	f04f 0801 	mov.w	r8, #1
 8012eb4:	e7e3      	b.n	8012e7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8012eb6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012eb8:	4450      	add	r0, sl
 8012eba:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012ebe:	4431      	add	r1, r6
 8012ec0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012ec4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012ec8:	4541      	cmp	r1, r8
 8012eca:	db08      	blt.n	8012ede <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8012ecc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012ed0:	3001      	adds	r0, #1
 8012ed2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012ed6:	eba1 0108 	sub.w	r1, r1, r8
 8012eda:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012ede:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012ee2:	f04f 0901 	mov.w	r9, #1
 8012ee6:	e79b      	b.n	8012e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012ee8:	449c      	add	ip, r3
 8012eea:	1aff      	subs	r7, r7, r3
 8012eec:	f1b8 0f00 	cmp.w	r8, #0
 8012ef0:	d009      	beq.n	8012f06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8012ef2:	9019      	str	r0, [sp, #100]	@ 0x64
 8012ef4:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8012ef8:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8012efc:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8012f00:	911d      	str	r1, [sp, #116]	@ 0x74
 8012f02:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8012f06:	1ad2      	subs	r2, r2, r3
 8012f08:	e68b      	b.n	8012c22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012f0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f0c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	f000 80d1 	beq.w	80130b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012f14:	ad19      	add	r5, sp, #100	@ 0x64
 8012f16:	ac39      	add	r4, sp, #228	@ 0xe4
 8012f18:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012f1a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012f1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012f22:	930c      	str	r3, [sp, #48]	@ 0x30
 8012f24:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012f26:	6963      	ldr	r3, [r4, #20]
 8012f28:	440b      	add	r3, r1
 8012f2a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012f2e:	4408      	add	r0, r1
 8012f30:	b200      	sxth	r0, r0
 8012f32:	4283      	cmp	r3, r0
 8012f34:	900d      	str	r0, [sp, #52]	@ 0x34
 8012f36:	f280 80c1 	bge.w	80130bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8012f3a:	428b      	cmp	r3, r1
 8012f3c:	da08      	bge.n	8012f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012f3e:	2a00      	cmp	r2, #0
 8012f40:	dd06      	ble.n	8012f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012f42:	1acb      	subs	r3, r1, r3
 8012f44:	429a      	cmp	r2, r3
 8012f46:	f2c0 80bb 	blt.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	f300 80b9 	bgt.w	80130c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012f50:	6967      	ldr	r7, [r4, #20]
 8012f52:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8012f56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f58:	443b      	add	r3, r7
 8012f5a:	461f      	mov	r7, r3
 8012f5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012f5e:	1bdf      	subs	r7, r3, r7
 8012f60:	4297      	cmp	r7, r2
 8012f62:	bfa8      	it	ge
 8012f64:	4617      	movge	r7, r2
 8012f66:	2f00      	cmp	r7, #0
 8012f68:	f340 813c 	ble.w	80131e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8012f6c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012f6e:	6829      	ldr	r1, [r5, #0]
 8012f70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f74:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012f78:	4411      	add	r1, r2
 8012f7a:	6820      	ldr	r0, [r4, #0]
 8012f7c:	4299      	cmp	r1, r3
 8012f7e:	dd1a      	ble.n	8012fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012f80:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012f84:	4402      	add	r2, r0
 8012f86:	440b      	add	r3, r1
 8012f88:	b21b      	sxth	r3, r3
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	dc13      	bgt.n	8012fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012f8e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012f90:	a912      	add	r1, sp, #72	@ 0x48
 8012f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	9206      	str	r2, [sp, #24]
 8012f9a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012f9c:	9500      	str	r5, [sp, #0]
 8012f9e:	9205      	str	r2, [sp, #20]
 8012fa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012fa2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012fa6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8012fa8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012fac:	aa49      	add	r2, sp, #292	@ 0x124
 8012fae:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8012fb2:	4623      	mov	r3, r4
 8012fb4:	47c8      	blx	r9
 8012fb6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8012fba:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8012fbe:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8012fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012fc6:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8012fca:	68a1      	ldr	r1, [r4, #8]
 8012fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012fd0:	ed94 6a08 	vldr	s12, [r4, #32]
 8012fd4:	edd4 6a07 	vldr	s13, [r4, #28]
 8012fd8:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012fdc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012fe0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012fe4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012fe8:	edc4 6a07 	vstr	s13, [r4, #28]
 8012fec:	441a      	add	r2, r3
 8012fee:	6963      	ldr	r3, [r4, #20]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	6022      	str	r2, [r4, #0]
 8012ff4:	6163      	str	r3, [r4, #20]
 8012ff6:	69a3      	ldr	r3, [r4, #24]
 8012ff8:	3b01      	subs	r3, #1
 8012ffa:	61a3      	str	r3, [r4, #24]
 8012ffc:	6923      	ldr	r3, [r4, #16]
 8012ffe:	440b      	add	r3, r1
 8013000:	68e1      	ldr	r1, [r4, #12]
 8013002:	428b      	cmp	r3, r1
 8013004:	6123      	str	r3, [r4, #16]
 8013006:	db15      	blt.n	8013034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8013008:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801300c:	3201      	adds	r2, #1
 801300e:	1a5b      	subs	r3, r3, r1
 8013010:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013014:	6022      	str	r2, [r4, #0]
 8013016:	6123      	str	r3, [r4, #16]
 8013018:	edc4 6a07 	vstr	s13, [r4, #28]
 801301c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013020:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013024:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013028:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013030:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013034:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8013038:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801303c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8013040:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013044:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8013048:	68a9      	ldr	r1, [r5, #8]
 801304a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801304e:	ed95 6a08 	vldr	s12, [r5, #32]
 8013052:	edd5 6a07 	vldr	s13, [r5, #28]
 8013056:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801305a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801305e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013062:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013066:	edc5 6a07 	vstr	s13, [r5, #28]
 801306a:	441a      	add	r2, r3
 801306c:	696b      	ldr	r3, [r5, #20]
 801306e:	3301      	adds	r3, #1
 8013070:	602a      	str	r2, [r5, #0]
 8013072:	616b      	str	r3, [r5, #20]
 8013074:	69ab      	ldr	r3, [r5, #24]
 8013076:	3b01      	subs	r3, #1
 8013078:	61ab      	str	r3, [r5, #24]
 801307a:	692b      	ldr	r3, [r5, #16]
 801307c:	440b      	add	r3, r1
 801307e:	68e9      	ldr	r1, [r5, #12]
 8013080:	428b      	cmp	r3, r1
 8013082:	612b      	str	r3, [r5, #16]
 8013084:	db15      	blt.n	80130b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8013086:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801308a:	3201      	adds	r2, #1
 801308c:	1a5b      	subs	r3, r3, r1
 801308e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013092:	602a      	str	r2, [r5, #0]
 8013094:	612b      	str	r3, [r5, #16]
 8013096:	edc5 6a07 	vstr	s13, [r5, #28]
 801309a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801309e:	ee36 7a87 	vadd.f32	s14, s13, s14
 80130a2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80130a6:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80130aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130ae:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80130b2:	3f01      	subs	r7, #1
 80130b4:	e757      	b.n	8012f66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80130b6:	ad39      	add	r5, sp, #228	@ 0xe4
 80130b8:	ac19      	add	r4, sp, #100	@ 0x64
 80130ba:	e72d      	b.n	8012f18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80130bc:	4613      	mov	r3, r2
 80130be:	e744      	b.n	8012f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80130c0:	4613      	mov	r3, r2
 80130c2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80130c4:	469e      	mov	lr, r3
 80130c6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80130ca:	461f      	mov	r7, r3
 80130cc:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80130d0:	f04f 0900 	mov.w	r9, #0
 80130d4:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80130d8:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80130dc:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80130e0:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80130e4:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80130e8:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80130ea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80130ee:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80130f2:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80130f6:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80130fa:	960e      	str	r6, [sp, #56]	@ 0x38
 80130fc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8013100:	2f00      	cmp	r7, #0
 8013102:	d146      	bne.n	8013192 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8013104:	449c      	add	ip, r3
 8013106:	1ad7      	subs	r7, r2, r3
 8013108:	f1b9 0f00 	cmp.w	r9, #0
 801310c:	d009      	beq.n	8013122 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801310e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8013110:	913d      	str	r1, [sp, #244]	@ 0xf4
 8013112:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8013116:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801311a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801311e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8013122:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013124:	f04f 0800 	mov.w	r8, #0
 8013128:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801312c:	910e      	str	r1, [sp, #56]	@ 0x38
 801312e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8013132:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8013136:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801313a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801313e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8013142:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8013146:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801314a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801314e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8013152:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8013156:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801315a:	f1be 0f00 	cmp.w	lr, #0
 801315e:	d030      	beq.n	80131c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8013160:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013162:	4450      	add	r0, sl
 8013164:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013168:	4431      	add	r1, r6
 801316a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801316e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8013172:	4549      	cmp	r1, r9
 8013174:	db08      	blt.n	8013188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8013176:	ee77 7a85 	vadd.f32	s15, s15, s10
 801317a:	3001      	adds	r0, #1
 801317c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013180:	eba1 0109 	sub.w	r1, r1, r9
 8013184:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013188:	f10e 3eff 	add.w	lr, lr, #4294967295
 801318c:	f04f 0801 	mov.w	r8, #1
 8013190:	e7e3      	b.n	801315a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8013192:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013194:	4450      	add	r0, sl
 8013196:	ee37 7a24 	vadd.f32	s14, s14, s9
 801319a:	4431      	add	r1, r6
 801319c:	ee77 7a84 	vadd.f32	s15, s15, s8
 80131a0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80131a4:	4541      	cmp	r1, r8
 80131a6:	db08      	blt.n	80131ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80131a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80131ac:	3001      	adds	r0, #1
 80131ae:	ee37 7a25 	vadd.f32	s14, s14, s11
 80131b2:	eba1 0108 	sub.w	r1, r1, r8
 80131b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80131ba:	3f01      	subs	r7, #1
 80131bc:	f04f 0901 	mov.w	r9, #1
 80131c0:	e79e      	b.n	8013100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80131c2:	449c      	add	ip, r3
 80131c4:	1aff      	subs	r7, r7, r3
 80131c6:	f1b8 0f00 	cmp.w	r8, #0
 80131ca:	d009      	beq.n	80131e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80131cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80131ce:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80131d2:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80131d6:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80131da:	911d      	str	r1, [sp, #116]	@ 0x74
 80131dc:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80131e0:	1ad2      	subs	r2, r2, r3
 80131e2:	e6b5      	b.n	8012f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80131e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	b923      	cbnz	r3, 80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80131ea:	4b04      	ldr	r3, [pc, #16]	@ (80131fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80131ec:	6818      	ldr	r0, [r3, #0]
 80131ee:	6803      	ldr	r3, [r0, #0]
 80131f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80131f2:	4798      	blx	r3
 80131f4:	b05b      	add	sp, #364	@ 0x16c
 80131f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fa:	bf00      	nop
 80131fc:	240252fc 	.word	0x240252fc

08013200 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8013200:	b570      	push	{r4, r5, r6, lr}
 8013202:	4604      	mov	r4, r0
 8013204:	2500      	movs	r5, #0
 8013206:	9805      	ldr	r0, [sp, #20]
 8013208:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801320c:	6061      	str	r1, [r4, #4]
 801320e:	8263      	strh	r3, [r4, #18]
 8013210:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8013214:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013218:	8025      	strh	r5, [r4, #0]
 801321a:	7221      	strb	r1, [r4, #8]
 801321c:	7266      	strb	r6, [r4, #9]
 801321e:	60e0      	str	r0, [r4, #12]
 8013220:	8222      	strh	r2, [r4, #16]
 8013222:	82a3      	strh	r3, [r4, #20]
 8013224:	82e5      	strh	r5, [r4, #22]
 8013226:	8325      	strh	r5, [r4, #24]
 8013228:	8365      	strh	r5, [r4, #26]
 801322a:	83a5      	strh	r5, [r4, #28]
 801322c:	83e5      	strh	r5, [r4, #30]
 801322e:	8425      	strh	r5, [r4, #32]
 8013230:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8013234:	b32e      	cbz	r6, 8013282 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013236:	6803      	ldr	r3, [r0, #0]
 8013238:	695b      	ldr	r3, [r3, #20]
 801323a:	4798      	blx	r3
 801323c:	4606      	mov	r6, r0
 801323e:	b300      	cbz	r0, 8013282 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013240:	68e0      	ldr	r0, [r4, #12]
 8013242:	4631      	mov	r1, r6
 8013244:	6803      	ldr	r3, [r0, #0]
 8013246:	68db      	ldr	r3, [r3, #12]
 8013248:	4798      	blx	r3
 801324a:	4605      	mov	r5, r0
 801324c:	b1c8      	cbz	r0, 8013282 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801324e:	7b43      	ldrb	r3, [r0, #13]
 8013250:	7a82      	ldrb	r2, [r0, #10]
 8013252:	005b      	lsls	r3, r3, #1
 8013254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013258:	4313      	orrs	r3, r2
 801325a:	8423      	strh	r3, [r4, #32]
 801325c:	7a63      	ldrb	r3, [r4, #9]
 801325e:	2b06      	cmp	r3, #6
 8013260:	d10f      	bne.n	8013282 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013262:	68e0      	ldr	r0, [r4, #12]
 8013264:	462a      	mov	r2, r5
 8013266:	4631      	mov	r1, r6
 8013268:	6803      	ldr	r3, [r0, #0]
 801326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801326c:	4798      	blx	r3
 801326e:	7b6b      	ldrb	r3, [r5, #13]
 8013270:	005b      	lsls	r3, r3, #1
 8013272:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013276:	7aab      	ldrb	r3, [r5, #10]
 8013278:	4313      	orrs	r3, r2
 801327a:	4418      	add	r0, r3
 801327c:	8c23      	ldrh	r3, [r4, #32]
 801327e:	4418      	add	r0, r3
 8013280:	8420      	strh	r0, [r4, #32]
 8013282:	4620      	mov	r0, r4
 8013284:	bd70      	pop	{r4, r5, r6, pc}

08013286 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8013286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801328a:	2400      	movs	r4, #0
 801328c:	b085      	sub	sp, #20
 801328e:	4681      	mov	r9, r0
 8013290:	4688      	mov	r8, r1
 8013292:	4692      	mov	sl, r2
 8013294:	469b      	mov	fp, r3
 8013296:	4627      	mov	r7, r4
 8013298:	4625      	mov	r5, r4
 801329a:	4626      	mov	r6, r4
 801329c:	4554      	cmp	r4, sl
 801329e:	da2a      	bge.n	80132f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80132a0:	2300      	movs	r3, #0
 80132a2:	9303      	str	r3, [sp, #12]
 80132a4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80132a8:	429d      	cmp	r5, r3
 80132aa:	d004      	beq.n	80132b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80132ac:	f242 030b 	movw	r3, #8203	@ 0x200b
 80132b0:	429d      	cmp	r5, r3
 80132b2:	bf18      	it	ne
 80132b4:	462f      	movne	r7, r5
 80132b6:	ab03      	add	r3, sp, #12
 80132b8:	4642      	mov	r2, r8
 80132ba:	4659      	mov	r1, fp
 80132bc:	4648      	mov	r0, r9
 80132be:	f003 fdc7 	bl	8016e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80132c2:	4605      	mov	r5, r0
 80132c4:	b1b8      	cbz	r0, 80132f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80132c6:	280a      	cmp	r0, #10
 80132c8:	d015      	beq.n	80132f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80132ca:	9a03      	ldr	r2, [sp, #12]
 80132cc:	b18a      	cbz	r2, 80132f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80132ce:	7b50      	ldrb	r0, [r2, #13]
 80132d0:	4639      	mov	r1, r7
 80132d2:	7a93      	ldrb	r3, [r2, #10]
 80132d4:	0040      	lsls	r0, r0, #1
 80132d6:	8895      	ldrh	r5, [r2, #4]
 80132d8:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80132dc:	4303      	orrs	r3, r0
 80132de:	4640      	mov	r0, r8
 80132e0:	9301      	str	r3, [sp, #4]
 80132e2:	f8d8 3000 	ldr.w	r3, [r8]
 80132e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132e8:	4798      	blx	r3
 80132ea:	9b01      	ldr	r3, [sp, #4]
 80132ec:	4418      	add	r0, r3
 80132ee:	4406      	add	r6, r0
 80132f0:	b2b6      	uxth	r6, r6
 80132f2:	3401      	adds	r4, #1
 80132f4:	e7d2      	b.n	801329c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80132f6:	4630      	mov	r0, r6
 80132f8:	b005      	add	sp, #20
 80132fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80132fe:	2a02      	cmp	r2, #2
 8013300:	b530      	push	{r4, r5, lr}
 8013302:	d011      	beq.n	8013328 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8013304:	2a03      	cmp	r2, #3
 8013306:	d01c      	beq.n	8013342 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8013308:	2a01      	cmp	r2, #1
 801330a:	d10c      	bne.n	8013326 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801330c:	888b      	ldrh	r3, [r1, #4]
 801330e:	8801      	ldrh	r1, [r0, #0]
 8013310:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013314:	1a5b      	subs	r3, r3, r1
 8013316:	8844      	ldrh	r4, [r0, #2]
 8013318:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801331c:	1a9b      	subs	r3, r3, r2
 801331e:	8004      	strh	r4, [r0, #0]
 8013320:	8081      	strh	r1, [r0, #4]
 8013322:	8043      	strh	r3, [r0, #2]
 8013324:	80c2      	strh	r2, [r0, #6]
 8013326:	bd30      	pop	{r4, r5, pc}
 8013328:	88cb      	ldrh	r3, [r1, #6]
 801332a:	8842      	ldrh	r2, [r0, #2]
 801332c:	1a9b      	subs	r3, r3, r2
 801332e:	88c2      	ldrh	r2, [r0, #6]
 8013330:	1a9b      	subs	r3, r3, r2
 8013332:	888a      	ldrh	r2, [r1, #4]
 8013334:	8801      	ldrh	r1, [r0, #0]
 8013336:	8043      	strh	r3, [r0, #2]
 8013338:	1a52      	subs	r2, r2, r1
 801333a:	8881      	ldrh	r1, [r0, #4]
 801333c:	1a52      	subs	r2, r2, r1
 801333e:	8002      	strh	r2, [r0, #0]
 8013340:	e7f1      	b.n	8013326 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8013342:	88cb      	ldrh	r3, [r1, #6]
 8013344:	8841      	ldrh	r1, [r0, #2]
 8013346:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801334a:	1a5b      	subs	r3, r3, r1
 801334c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8013350:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8013354:	1a9b      	subs	r3, r3, r2
 8013356:	8045      	strh	r5, [r0, #2]
 8013358:	8082      	strh	r2, [r0, #4]
 801335a:	8003      	strh	r3, [r0, #0]
 801335c:	80c4      	strh	r4, [r0, #6]
 801335e:	e7e2      	b.n	8013326 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08013360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8013360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013364:	b09f      	sub	sp, #124	@ 0x7c
 8013366:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013368:	9312      	str	r3, [sp, #72]	@ 0x48
 801336a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801336c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801336e:	8812      	ldrh	r2, [r2, #0]
 8013370:	889b      	ldrh	r3, [r3, #4]
 8013372:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8013374:	4413      	add	r3, r2
 8013376:	900e      	str	r0, [sp, #56]	@ 0x38
 8013378:	6828      	ldr	r0, [r5, #0]
 801337a:	b21b      	sxth	r3, r3
 801337c:	9117      	str	r1, [sp, #92]	@ 0x5c
 801337e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8013382:	9311      	str	r3, [sp, #68]	@ 0x44
 8013384:	6803      	ldr	r3, [r0, #0]
 8013386:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 801338a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801338c:	4798      	blx	r3
 801338e:	682b      	ldr	r3, [r5, #0]
 8013390:	9013      	str	r0, [sp, #76]	@ 0x4c
 8013392:	7b1a      	ldrb	r2, [r3, #12]
 8013394:	7adb      	ldrb	r3, [r3, #11]
 8013396:	9215      	str	r2, [sp, #84]	@ 0x54
 8013398:	9316      	str	r3, [sp, #88]	@ 0x58
 801339a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801339e:	2c00      	cmp	r4, #0
 80133a0:	d067      	beq.n	8013472 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80133a2:	7c2b      	ldrb	r3, [r5, #16]
 80133a4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80133a6:	2b06      	cmp	r3, #6
 80133a8:	bf14      	ite	ne
 80133aa:	2301      	movne	r3, #1
 80133ac:	2302      	moveq	r3, #2
 80133ae:	4413      	add	r3, r2
 80133b0:	f04f 0900 	mov.w	r9, #0
 80133b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80133b6:	464c      	mov	r4, r9
 80133b8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80133bc:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80133c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80133c2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80133c4:	4293      	cmp	r3, r2
 80133c6:	f280 808b 	bge.w	80134e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80133ca:	2300      	movs	r3, #0
 80133cc:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80133d0:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 80133d4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80133d8:	429c      	cmp	r4, r3
 80133da:	d006      	beq.n	80133ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 80133dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133de:	f242 020b 	movw	r2, #8203	@ 0x200b
 80133e2:	4294      	cmp	r4, r2
 80133e4:	bf18      	it	ne
 80133e6:	4623      	movne	r3, r4
 80133e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80133ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80133ec:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80133ee:	682a      	ldr	r2, [r5, #0]
 80133f0:	428b      	cmp	r3, r1
 80133f2:	db40      	blt.n	8013476 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80133f4:	6813      	ldr	r3, [r2, #0]
 80133f6:	4610      	mov	r0, r2
 80133f8:	695b      	ldr	r3, [r3, #20]
 80133fa:	4798      	blx	r3
 80133fc:	4604      	mov	r4, r0
 80133fe:	6828      	ldr	r0, [r5, #0]
 8013400:	aa1d      	add	r2, sp, #116	@ 0x74
 8013402:	4621      	mov	r1, r4
 8013404:	6803      	ldr	r3, [r0, #0]
 8013406:	689f      	ldr	r7, [r3, #8]
 8013408:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801340c:	47b8      	blx	r7
 801340e:	901c      	str	r0, [sp, #112]	@ 0x70
 8013410:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013414:	429c      	cmp	r4, r3
 8013416:	f000 80eb 	beq.w	80135f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801341a:	f242 030b 	movw	r3, #8203	@ 0x200b
 801341e:	429c      	cmp	r4, r3
 8013420:	f000 80e6 	beq.w	80135f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013424:	2c00      	cmp	r4, #0
 8013426:	f000 810d 	beq.w	8013644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801342a:	2c0a      	cmp	r4, #10
 801342c:	d05e      	beq.n	80134ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801342e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013430:	b36a      	cbz	r2, 801348e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8013432:	8894      	ldrh	r4, [r2, #4]
 8013434:	f1bb 0f00 	cmp.w	fp, #0
 8013438:	d03a      	beq.n	80134b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801343a:	f892 900d 	ldrb.w	r9, [r2, #13]
 801343e:	f1bb 0f01 	cmp.w	fp, #1
 8013442:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8013446:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801344a:	f892 900a 	ldrb.w	r9, [r2, #10]
 801344e:	ea49 0903 	orr.w	r9, r9, r3
 8013452:	d133      	bne.n	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8013454:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013456:	eba6 0609 	sub.w	r6, r6, r9
 801345a:	2b00      	cmp	r3, #0
 801345c:	d14d      	bne.n	80134fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801345e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013460:	eb09 0306 	add.w	r3, r9, r6
 8013464:	4413      	add	r3, r2
 8013466:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013468:	f9b2 2000 	ldrsh.w	r2, [r2]
 801346c:	4293      	cmp	r3, r2
 801346e:	da4e      	bge.n	801350e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8013470:	e036      	b.n	80134e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8013472:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8013474:	e79c      	b.n	80133b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8013476:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801347a:	4659      	mov	r1, fp
 801347c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801347e:	9301      	str	r3, [sp, #4]
 8013480:	ab1d      	add	r3, sp, #116	@ 0x74
 8013482:	9300      	str	r3, [sp, #0]
 8013484:	ab1c      	add	r3, sp, #112	@ 0x70
 8013486:	f003 fd2c 	bl	8016ee2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801348a:	4604      	mov	r4, r0
 801348c:	e7c0      	b.n	8013410 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801348e:	6828      	ldr	r0, [r5, #0]
 8013490:	6803      	ldr	r3, [r0, #0]
 8013492:	691b      	ldr	r3, [r3, #16]
 8013494:	4798      	blx	r3
 8013496:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801349a:	4298      	cmp	r0, r3
 801349c:	f000 80a8 	beq.w	80135f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80134a0:	f242 030b 	movw	r3, #8203	@ 0x200b
 80134a4:	4298      	cmp	r0, r3
 80134a6:	f000 80a3 	beq.w	80135f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80134aa:	f1bb 0f00 	cmp.w	fp, #0
 80134ae:	d100      	bne.n	80134b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80134b0:	444e      	add	r6, r9
 80134b2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80134b4:	2a00      	cmp	r2, #0
 80134b6:	d1c0      	bne.n	801343a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80134b8:	4691      	mov	r9, r2
 80134ba:	e099      	b.n	80135f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80134bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80134be:	2b00      	cmp	r3, #0
 80134c0:	f000 80c2 	beq.w	8013648 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 80134c4:	f1bb 0f00 	cmp.w	fp, #0
 80134c8:	d117      	bne.n	80134fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80134ca:	6828      	ldr	r0, [r5, #0]
 80134cc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80134ce:	6803      	ldr	r3, [r0, #0]
 80134d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134d2:	4798      	blx	r3
 80134d4:	4406      	add	r6, r0
 80134d6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80134d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80134da:	1af3      	subs	r3, r6, r3
 80134dc:	4293      	cmp	r3, r2
 80134de:	dd16      	ble.n	801350e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80134e0:	2c00      	cmp	r4, #0
 80134e2:	f000 80af 	beq.w	8013644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80134e6:	2c0a      	cmp	r4, #10
 80134e8:	f040 809d 	bne.w	8013626 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 80134ec:	240a      	movs	r4, #10
 80134ee:	fab4 f084 	clz	r0, r4
 80134f2:	0940      	lsrs	r0, r0, #5
 80134f4:	b01f      	add	sp, #124	@ 0x7c
 80134f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134fa:	6828      	ldr	r0, [r5, #0]
 80134fc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80134fe:	6803      	ldr	r3, [r0, #0]
 8013500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013502:	4798      	blx	r3
 8013504:	f1bb 0f01 	cmp.w	fp, #1
 8013508:	eba6 0600 	sub.w	r6, r6, r0
 801350c:	d0a7      	beq.n	801345e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801350e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013510:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8013512:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8013516:	f9b3 8000 	ldrsh.w	r8, [r3]
 801351a:	7b43      	ldrb	r3, [r0, #13]
 801351c:	4431      	add	r1, r6
 801351e:	015b      	lsls	r3, r3, #5
 8013520:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013524:	7983      	ldrb	r3, [r0, #6]
 8013526:	4313      	orrs	r3, r2
 8013528:	440b      	add	r3, r1
 801352a:	4543      	cmp	r3, r8
 801352c:	db60      	blt.n	80135f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801352e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013530:	4299      	cmp	r1, r3
 8013532:	da5d      	bge.n	80135f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013534:	6828      	ldr	r0, [r5, #0]
 8013536:	45b0      	cmp	r8, r6
 8013538:	6803      	ldr	r3, [r0, #0]
 801353a:	bfcc      	ite	gt
 801353c:	eba8 0806 	subgt.w	r8, r8, r6
 8013540:	f04f 0800 	movle.w	r8, #0
 8013544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013546:	bfc8      	it	gt
 8013548:	fa1f f888 	uxthgt.w	r8, r8
 801354c:	4798      	blx	r3
 801354e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013550:	7b53      	ldrb	r3, [r2, #13]
 8013552:	00d9      	lsls	r1, r3, #3
 8013554:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8013558:	7a11      	ldrb	r1, [r2, #8]
 801355a:	4339      	orrs	r1, r7
 801355c:	065f      	lsls	r7, r3, #25
 801355e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8013560:	bf48      	it	mi
 8013562:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8013566:	4407      	add	r7, r0
 8013568:	bf48      	it	mi
 801356a:	b209      	sxthmi	r1, r1
 801356c:	1a7f      	subs	r7, r7, r1
 801356e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8013570:	b2bf      	uxth	r7, r7
 8013572:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013576:	fa0f fa87 	sxth.w	sl, r7
 801357a:	4551      	cmp	r1, sl
 801357c:	dd3c      	ble.n	80135f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801357e:	011b      	lsls	r3, r3, #4
 8013580:	79d0      	ldrb	r0, [r2, #7]
 8013582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013586:	4303      	orrs	r3, r0
 8013588:	449a      	add	sl, r3
 801358a:	4551      	cmp	r1, sl
 801358c:	dc30      	bgt.n	80135f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801358e:	1bcf      	subs	r7, r1, r7
 8013590:	468a      	mov	sl, r1
 8013592:	b23f      	sxth	r7, r7
 8013594:	9219      	str	r2, [sp, #100]	@ 0x64
 8013596:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013598:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801359a:	6828      	ldr	r0, [r5, #0]
 801359c:	2a00      	cmp	r2, #0
 801359e:	d12d      	bne.n	80135fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 80135a0:	9318      	str	r3, [sp, #96]	@ 0x60
 80135a2:	b2bf      	uxth	r7, r7
 80135a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135a6:	6819      	ldr	r1, [r3, #0]
 80135a8:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80135aa:	6801      	ldr	r1, [r0, #0]
 80135ac:	9314      	str	r3, [sp, #80]	@ 0x50
 80135ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80135b0:	4788      	blx	r1
 80135b2:	79a9      	ldrb	r1, [r5, #6]
 80135b4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80135b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80135b8:	7ba9      	ldrb	r1, [r5, #14]
 80135ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80135bc:	910a      	str	r1, [sp, #40]	@ 0x28
 80135be:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 80135c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80135c4:	68a9      	ldr	r1, [r5, #8]
 80135c6:	9306      	str	r3, [sp, #24]
 80135c8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80135ca:	9205      	str	r2, [sp, #20]
 80135cc:	9304      	str	r3, [sp, #16]
 80135ce:	f8cd a004 	str.w	sl, [sp, #4]
 80135d2:	e9cd 8702 	strd	r8, r7, [sp, #8]
 80135d6:	44b0      	add	r8, r6
 80135d8:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80135da:	fa0f f388 	sxth.w	r3, r8
 80135de:	9300      	str	r3, [sp, #0]
 80135e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135e2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80135e6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	47b8      	blx	r7
 80135f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135f2:	3301      	adds	r3, #1
 80135f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80135f6:	e6e3      	b.n	80133c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 80135f8:	2700      	movs	r7, #0
 80135fa:	e7cb      	b.n	8013594 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 80135fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80135fe:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8013602:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013604:	f8dc 1000 	ldr.w	r1, [ip]
 8013608:	e9cd 6204 	strd	r6, r2, [sp, #16]
 801360c:	79aa      	ldrb	r2, [r5, #6]
 801360e:	9203      	str	r2, [sp, #12]
 8013610:	7baa      	ldrb	r2, [r5, #14]
 8013612:	9202      	str	r2, [sp, #8]
 8013614:	68aa      	ldr	r2, [r5, #8]
 8013616:	e9cd 0200 	strd	r0, r2, [sp]
 801361a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801361c:	4660      	mov	r0, ip
 801361e:	688f      	ldr	r7, [r1, #8]
 8013620:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013622:	47b8      	blx	r7
 8013624:	e7e4      	b.n	80135f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013626:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013628:	3501      	adds	r5, #1
 801362a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801362c:	429d      	cmp	r5, r3
 801362e:	f6bf af5e 	bge.w	80134ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013632:	4659      	mov	r1, fp
 8013634:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8013636:	f7f1 fc0b 	bl	8004e50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801363a:	4604      	mov	r4, r0
 801363c:	b110      	cbz	r0, 8013644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801363e:	280a      	cmp	r0, #10
 8013640:	d1f2      	bne.n	8013628 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8013642:	e753      	b.n	80134ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013644:	2400      	movs	r4, #0
 8013646:	e752      	b.n	80134ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013648:	f1bb 0f00 	cmp.w	fp, #0
 801364c:	f43f af43 	beq.w	80134d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8013650:	e75d      	b.n	801350e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08013652 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8013652:	b530      	push	{r4, r5, lr}
 8013654:	8ac4      	ldrh	r4, [r0, #22]
 8013656:	8b45      	ldrh	r5, [r0, #26]
 8013658:	8343      	strh	r3, [r0, #26]
 801365a:	442c      	add	r4, r5
 801365c:	1ae4      	subs	r4, r4, r3
 801365e:	8b83      	ldrh	r3, [r0, #28]
 8013660:	82c4      	strh	r4, [r0, #22]
 8013662:	8b04      	ldrh	r4, [r0, #24]
 8013664:	4422      	add	r2, r4
 8013666:	440c      	add	r4, r1
 8013668:	1a59      	subs	r1, r3, r1
 801366a:	83c2      	strh	r2, [r0, #30]
 801366c:	8304      	strh	r4, [r0, #24]
 801366e:	8381      	strh	r1, [r0, #28]
 8013670:	bd30      	pop	{r4, r5, pc}

08013672 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8013672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013676:	4604      	mov	r4, r0
 8013678:	8a47      	ldrh	r7, [r0, #18]
 801367a:	68c0      	ldr	r0, [r0, #12]
 801367c:	b085      	sub	sp, #20
 801367e:	6803      	ldr	r3, [r0, #0]
 8013680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013682:	4798      	blx	r3
 8013684:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8013688:	7a63      	ldrb	r3, [r4, #9]
 801368a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801368e:	3b01      	subs	r3, #1
 8013690:	42b7      	cmp	r7, r6
 8013692:	bfac      	ite	ge
 8013694:	f04f 0900 	movge.w	r9, #0
 8013698:	f04f 0901 	movlt.w	r9, #1
 801369c:	2b05      	cmp	r3, #5
 801369e:	d804      	bhi.n	80136aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80136a0:	e8df f003 	tbb	[pc, r3]
 80136a4:	470f0854 	.word	0x470f0854
 80136a8:	4c4c      	.short	0x4c4c
 80136aa:	2500      	movs	r5, #0
 80136ac:	46a9      	mov	r9, r5
 80136ae:	462e      	mov	r6, r5
 80136b0:	462f      	mov	r7, r5
 80136b2:	e00e      	b.n	80136d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80136b4:	42b7      	cmp	r7, r6
 80136b6:	f04f 0500 	mov.w	r5, #0
 80136ba:	bfb4      	ite	lt
 80136bc:	2600      	movlt	r6, #0
 80136be:	2601      	movge	r6, #1
 80136c0:	e7f6      	b.n	80136b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80136c2:	42b7      	cmp	r7, r6
 80136c4:	464d      	mov	r5, r9
 80136c6:	f04f 0900 	mov.w	r9, #0
 80136ca:	bfb4      	ite	lt
 80136cc:	2600      	movlt	r6, #0
 80136ce:	2601      	movge	r6, #1
 80136d0:	464f      	mov	r7, r9
 80136d2:	f04f 0800 	mov.w	r8, #0
 80136d6:	f8a4 8016 	strh.w	r8, [r4, #22]
 80136da:	f8a4 8018 	strh.w	r8, [r4, #24]
 80136de:	f8cd 8004 	str.w	r8, [sp, #4]
 80136e2:	2300      	movs	r3, #0
 80136e4:	9303      	str	r3, [sp, #12]
 80136e6:	8823      	ldrh	r3, [r4, #0]
 80136e8:	2b20      	cmp	r3, #32
 80136ea:	d033      	beq.n	8013754 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80136ec:	f242 010b 	movw	r1, #8203	@ 0x200b
 80136f0:	1a5a      	subs	r2, r3, r1
 80136f2:	f1d2 0a00 	rsbs	sl, r2, #0
 80136f6:	eb4a 0a02 	adc.w	sl, sl, r2
 80136fa:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80136fe:	4293      	cmp	r3, r2
 8013700:	d008      	beq.n	8013714 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8013702:	428b      	cmp	r3, r1
 8013704:	9a01      	ldr	r2, [sp, #4]
 8013706:	bf0e      	itee	eq
 8013708:	f04f 0a01 	moveq.w	sl, #1
 801370c:	461a      	movne	r2, r3
 801370e:	f04f 0a00 	movne.w	sl, #0
 8013712:	9201      	str	r2, [sp, #4]
 8013714:	ab03      	add	r3, sp, #12
 8013716:	68e2      	ldr	r2, [r4, #12]
 8013718:	7a21      	ldrb	r1, [r4, #8]
 801371a:	6860      	ldr	r0, [r4, #4]
 801371c:	f003 fb98 	bl	8016e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013720:	8020      	strh	r0, [r4, #0]
 8013722:	b9d8      	cbnz	r0, 801375c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8013724:	8ba2      	ldrh	r2, [r4, #28]
 8013726:	2300      	movs	r3, #0
 8013728:	4611      	mov	r1, r2
 801372a:	4620      	mov	r0, r4
 801372c:	f7ff ff91 	bl	8013652 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013730:	e06e      	b.n	8013810 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8013732:	2500      	movs	r5, #0
 8013734:	2701      	movs	r7, #1
 8013736:	46a9      	mov	r9, r5
 8013738:	462e      	mov	r6, r5
 801373a:	e7ca      	b.n	80136d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801373c:	42b7      	cmp	r7, r6
 801373e:	f04f 0500 	mov.w	r5, #0
 8013742:	bfb4      	ite	lt
 8013744:	2700      	movlt	r7, #0
 8013746:	2701      	movge	r7, #1
 8013748:	462e      	mov	r6, r5
 801374a:	e7c2      	b.n	80136d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801374c:	2500      	movs	r5, #0
 801374e:	2601      	movs	r6, #1
 8013750:	46a9      	mov	r9, r5
 8013752:	e7ad      	b.n	80136b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8013754:	9301      	str	r3, [sp, #4]
 8013756:	f04f 0a01 	mov.w	sl, #1
 801375a:	e7db      	b.n	8013714 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801375c:	8b63      	ldrh	r3, [r4, #26]
 801375e:	280a      	cmp	r0, #10
 8013760:	f103 0301 	add.w	r3, r3, #1
 8013764:	8363      	strh	r3, [r4, #26]
 8013766:	d0dd      	beq.n	8013724 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8013768:	9a03      	ldr	r2, [sp, #12]
 801376a:	bb62      	cbnz	r2, 80137c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801376c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013770:	4298      	cmp	r0, r3
 8013772:	d003      	beq.n	801377c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8013774:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013778:	4298      	cmp	r0, r3
 801377a:	d1b2      	bne.n	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801377c:	8823      	ldrh	r3, [r4, #0]
 801377e:	8ba1      	ldrh	r1, [r4, #28]
 8013780:	2b20      	cmp	r3, #32
 8013782:	d003      	beq.n	801378c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8013784:	f242 000b 	movw	r0, #8203	@ 0x200b
 8013788:	4283      	cmp	r3, r0
 801378a:	d131      	bne.n	80137f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801378c:	f1ba 0f00 	cmp.w	sl, #0
 8013790:	bf0a      	itet	eq
 8013792:	4688      	moveq	r8, r1
 8013794:	4650      	movne	r0, sl
 8013796:	2001      	moveq	r0, #1
 8013798:	440a      	add	r2, r1
 801379a:	8b23      	ldrh	r3, [r4, #24]
 801379c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80137a0:	b292      	uxth	r2, r2
 80137a2:	83a2      	strh	r2, [r4, #28]
 80137a4:	4413      	add	r3, r2
 80137a6:	f1b9 0f00 	cmp.w	r9, #0
 80137aa:	d102      	bne.n	80137b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 80137ac:	2d00      	cmp	r5, #0
 80137ae:	d042      	beq.n	8013836 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 80137b0:	b300      	cbz	r0, 80137f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 80137b2:	8c21      	ldrh	r1, [r4, #32]
 80137b4:	4419      	add	r1, r3
 80137b6:	458c      	cmp	ip, r1
 80137b8:	da37      	bge.n	801382a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80137ba:	8ae1      	ldrh	r1, [r4, #22]
 80137bc:	2900      	cmp	r1, #0
 80137be:	d034      	beq.n	801382a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80137c0:	4563      	cmp	r3, ip
 80137c2:	dd8e      	ble.n	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80137c4:	e01d      	b.n	8013802 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 80137c6:	8893      	ldrh	r3, [r2, #4]
 80137c8:	9901      	ldr	r1, [sp, #4]
 80137ca:	8023      	strh	r3, [r4, #0]
 80137cc:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80137d0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80137d4:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 80137d8:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80137dc:	ea4b 0b00 	orr.w	fp, fp, r0
 80137e0:	68e0      	ldr	r0, [r4, #12]
 80137e2:	6803      	ldr	r3, [r0, #0]
 80137e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137e6:	4798      	blx	r3
 80137e8:	eb0b 0200 	add.w	r2, fp, r0
 80137ec:	b292      	uxth	r2, r2
 80137ee:	e7c5      	b.n	801377c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80137f0:	2000      	movs	r0, #0
 80137f2:	e7d1      	b.n	8013798 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80137f4:	4563      	cmp	r3, ip
 80137f6:	f77f af74 	ble.w	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80137fa:	8ae3      	ldrh	r3, [r4, #22]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	f43f af70 	beq.w	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013802:	2301      	movs	r3, #1
 8013804:	8c22      	ldrh	r2, [r4, #32]
 8013806:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801380a:	8be3      	ldrh	r3, [r4, #30]
 801380c:	4413      	add	r3, r2
 801380e:	83e3      	strh	r3, [r4, #30]
 8013810:	68e0      	ldr	r0, [r4, #12]
 8013812:	6803      	ldr	r3, [r0, #0]
 8013814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013816:	4798      	blx	r3
 8013818:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801381c:	4418      	add	r0, r3
 801381e:	8a63      	ldrh	r3, [r4, #18]
 8013820:	1a18      	subs	r0, r3, r0
 8013822:	8260      	strh	r0, [r4, #18]
 8013824:	b005      	add	sp, #20
 8013826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382a:	2300      	movs	r3, #0
 801382c:	4611      	mov	r1, r2
 801382e:	4620      	mov	r0, r4
 8013830:	f7ff ff0f 	bl	8013652 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013834:	e755      	b.n	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013836:	4563      	cmp	r3, ip
 8013838:	dd14      	ble.n	8013864 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801383a:	b117      	cbz	r7, 8013842 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801383c:	2301      	movs	r3, #1
 801383e:	460a      	mov	r2, r1
 8013840:	e772      	b.n	8013728 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8013842:	2e00      	cmp	r6, #0
 8013844:	f43f af4d 	beq.w	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013848:	2800      	cmp	r0, #0
 801384a:	f47f af4a 	bne.w	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801384e:	f1ba 0f00 	cmp.w	sl, #0
 8013852:	d002      	beq.n	801385a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8013854:	2301      	movs	r3, #1
 8013856:	4642      	mov	r2, r8
 8013858:	e767      	b.n	801372a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801385a:	8ae3      	ldrh	r3, [r4, #22]
 801385c:	2b00      	cmp	r3, #0
 801385e:	f43f af40 	beq.w	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013862:	e7d5      	b.n	8013810 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8013864:	2800      	cmp	r0, #0
 8013866:	f47f af3c 	bne.w	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801386a:	f1ba 0f00 	cmp.w	sl, #0
 801386e:	f43f af38 	beq.w	80136e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013872:	2301      	movs	r3, #1
 8013874:	4642      	mov	r2, r8
 8013876:	e7da      	b.n	801382e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08013878 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8013878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801387a:	4605      	mov	r5, r0
 801387c:	b08f      	sub	sp, #60	@ 0x3c
 801387e:	4617      	mov	r7, r2
 8013880:	461c      	mov	r4, r3
 8013882:	460e      	mov	r6, r1
 8013884:	b1d1      	cbz	r1, 80138bc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	4620      	mov	r0, r4
 801388a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801388c:	4798      	blx	r3
 801388e:	4240      	negs	r0, r0
 8013890:	9603      	str	r6, [sp, #12]
 8013892:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013896:	b200      	sxth	r0, r0
 8013898:	9700      	str	r7, [sp, #0]
 801389a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801389e:	4629      	mov	r1, r5
 80138a0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80138a4:	2401      	movs	r4, #1
 80138a6:	a805      	add	r0, sp, #20
 80138a8:	f7ff fcaa 	bl	8013200 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80138ac:	a805      	add	r0, sp, #20
 80138ae:	f7ff fee0 	bl	8013672 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80138b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80138b6:	b163      	cbz	r3, 80138d2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80138b8:	3401      	adds	r4, #1
 80138ba:	e7f7      	b.n	80138ac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80138bc:	2401      	movs	r4, #1
 80138be:	f003 fb93 	bl	8016fe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80138c2:	280a      	cmp	r0, #10
 80138c4:	4628      	mov	r0, r5
 80138c6:	bf08      	it	eq
 80138c8:	3401      	addeq	r4, #1
 80138ca:	f003 fb8d 	bl	8016fe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80138ce:	2800      	cmp	r0, #0
 80138d0:	d1f7      	bne.n	80138c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80138d2:	b2a0      	uxth	r0, r4
 80138d4:	b00f      	add	sp, #60	@ 0x3c
 80138d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080138d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	b0e3      	sub	sp, #396	@ 0x18c
 80138de:	461c      	mov	r4, r3
 80138e0:	4683      	mov	fp, r0
 80138e2:	4688      	mov	r8, r1
 80138e4:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f000 8112 	beq.w	8013b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80138ec:	6823      	ldr	r3, [r4, #0]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	f000 810e 	beq.w	8013b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80138f4:	7ba3      	ldrb	r3, [r4, #14]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f000 810a 	beq.w	8013b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80138fc:	ad0a      	add	r5, sp, #40	@ 0x28
 80138fe:	6810      	ldr	r0, [r2, #0]
 8013900:	6851      	ldr	r1, [r2, #4]
 8013902:	462b      	mov	r3, r5
 8013904:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8013908:	c303      	stmia	r3!, {r0, r1}
 801390a:	2100      	movs	r1, #0
 801390c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013910:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8013914:	4628      	mov	r0, r5
 8013916:	910c      	str	r1, [sp, #48]	@ 0x30
 8013918:	a90c      	add	r1, sp, #48	@ 0x30
 801391a:	79a2      	ldrb	r2, [r4, #6]
 801391c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013920:	f7ff fced 	bl	80132fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8013924:	a90c      	add	r1, sp, #48	@ 0x30
 8013926:	79a2      	ldrb	r2, [r4, #6]
 8013928:	4608      	mov	r0, r1
 801392a:	f7ff fce8 	bl	80132fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801392e:	a817      	add	r0, sp, #92	@ 0x5c
 8013930:	f002 ff19 	bl	8016766 <_ZN8touchgfx12TextProviderC1Ev>
 8013934:	6820      	ldr	r0, [r4, #0]
 8013936:	6803      	ldr	r3, [r0, #0]
 8013938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801393a:	4798      	blx	r3
 801393c:	4606      	mov	r6, r0
 801393e:	6820      	ldr	r0, [r4, #0]
 8013940:	6803      	ldr	r3, [r0, #0]
 8013942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013944:	4798      	blx	r3
 8013946:	4633      	mov	r3, r6
 8013948:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801394a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801394c:	9000      	str	r0, [sp, #0]
 801394e:	a817      	add	r0, sp, #92	@ 0x5c
 8013950:	f002 ff5c 	bl	801680c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013954:	6820      	ldr	r0, [r4, #0]
 8013956:	f894 a004 	ldrb.w	sl, [r4, #4]
 801395a:	6803      	ldr	r3, [r0, #0]
 801395c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801395e:	4798      	blx	r3
 8013960:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8013964:	6823      	ldr	r3, [r4, #0]
 8013966:	4607      	mov	r7, r0
 8013968:	4406      	add	r6, r0
 801396a:	a830      	add	r0, sp, #192	@ 0xc0
 801396c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8013970:	f002 fef9 	bl	8016766 <_ZN8touchgfx12TextProviderC1Ev>
 8013974:	7c23      	ldrb	r3, [r4, #16]
 8013976:	b17b      	cbz	r3, 8013998 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8013978:	6820      	ldr	r0, [r4, #0]
 801397a:	6803      	ldr	r3, [r0, #0]
 801397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801397e:	4798      	blx	r3
 8013980:	9009      	str	r0, [sp, #36]	@ 0x24
 8013982:	6820      	ldr	r0, [r4, #0]
 8013984:	6802      	ldr	r2, [r0, #0]
 8013986:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013988:	4790      	blx	r2
 801398a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801398c:	9000      	str	r0, [sp, #0]
 801398e:	a830      	add	r0, sp, #192	@ 0xc0
 8013990:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013992:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013994:	f002 ff3a 	bl	801680c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013998:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801399c:	a80e      	add	r0, sp, #56	@ 0x38
 801399e:	7be2      	ldrb	r2, [r4, #15]
 80139a0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80139a4:	1a8a      	subs	r2, r1, r2
 80139a6:	7c21      	ldrb	r1, [r4, #16]
 80139a8:	9103      	str	r1, [sp, #12]
 80139aa:	b292      	uxth	r2, r2
 80139ac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80139b0:	9102      	str	r1, [sp, #8]
 80139b2:	6821      	ldr	r1, [r4, #0]
 80139b4:	9101      	str	r1, [sp, #4]
 80139b6:	7961      	ldrb	r1, [r4, #5]
 80139b8:	9100      	str	r1, [sp, #0]
 80139ba:	a930      	add	r1, sp, #192	@ 0xc0
 80139bc:	f7ff fc20 	bl	8013200 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80139c0:	2e00      	cmp	r6, #0
 80139c2:	dc5b      	bgt.n	8013a7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80139c4:	af17      	add	r7, sp, #92	@ 0x5c
 80139c6:	f04f 0900 	mov.w	r9, #0
 80139ca:	7c23      	ldrb	r3, [r4, #16]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	f000 80b1 	beq.w	8013b34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80139d2:	a80e      	add	r0, sp, #56	@ 0x38
 80139d4:	f7ff fe4d 	bl	8013672 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80139d8:	f1ba 0f00 	cmp.w	sl, #0
 80139dc:	f000 80a5 	beq.w	8013b2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80139e0:	7c23      	ldrb	r3, [r4, #16]
 80139e2:	2264      	movs	r2, #100	@ 0x64
 80139e4:	4639      	mov	r1, r7
 80139e6:	a849      	add	r0, sp, #292	@ 0x124
 80139e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80139ea:	f00f ffee 	bl	80239ca <memcpy>
 80139ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	f000 80a7 	beq.w	8013b44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80139f6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80139fa:	7922      	ldrb	r2, [r4, #4]
 80139fc:	2a01      	cmp	r2, #1
 80139fe:	f040 808a 	bne.w	8013b16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8013a02:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8013a06:	1ac0      	subs	r0, r0, r3
 8013a08:	2302      	movs	r3, #2
 8013a0a:	fb90 f0f3 	sdiv	r0, r0, r3
 8013a0e:	b200      	sxth	r0, r0
 8013a10:	7c23      	ldrb	r3, [r4, #16]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	f000 808b 	beq.w	8013b2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8013a18:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8013a1c:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8013a20:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013a24:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8013a28:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	4410      	add	r0, r2
 8013a30:	4642      	mov	r2, r8
 8013a32:	b200      	sxth	r0, r0
 8013a34:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8013a38:	9000      	str	r0, [sp, #0]
 8013a3a:	4658      	mov	r0, fp
 8013a3c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8013a40:	f7ff fc8e 	bl	8013360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	d163      	bne.n	8013b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013a48:	b2b2      	uxth	r2, r6
 8013a4a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8013a4e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8013a52:	4413      	add	r3, r2
 8013a54:	1a8a      	subs	r2, r1, r2
 8013a56:	b21b      	sxth	r3, r3
 8013a58:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8013a5c:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8013a60:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013a64:	2a00      	cmp	r2, #0
 8013a66:	d153      	bne.n	8013b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013a68:	6822      	ldr	r2, [r4, #0]
 8013a6a:	8869      	ldrh	r1, [r5, #2]
 8013a6c:	7a12      	ldrb	r2, [r2, #8]
 8013a6e:	1a9b      	subs	r3, r3, r2
 8013a70:	88ea      	ldrh	r2, [r5, #6]
 8013a72:	440a      	add	r2, r1
 8013a74:	b212      	sxth	r2, r2
 8013a76:	4293      	cmp	r3, r2
 8013a78:	dda7      	ble.n	80139ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8013a7a:	e049      	b.n	8013b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013a7c:	7c23      	ldrb	r3, [r4, #16]
 8013a7e:	444f      	add	r7, r9
 8013a80:	b1c3      	cbz	r3, 8013ab4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8013a82:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8013a86:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013a8a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013a8e:	443b      	add	r3, r7
 8013a90:	4293      	cmp	r3, r2
 8013a92:	da97      	bge.n	80139c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8013a94:	a80e      	add	r0, sp, #56	@ 0x38
 8013a96:	f7ff fdec 	bl	8013672 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013a9a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8013a9e:	3b01      	subs	r3, #1
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	454b      	cmp	r3, r9
 8013aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013aa6:	d021      	beq.n	8013aec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8013aa8:	7961      	ldrb	r1, [r4, #5]
 8013aaa:	a817      	add	r0, sp, #92	@ 0x5c
 8013aac:	f7f1 f9d0 	bl	8004e50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ab2:	e7f4      	b.n	8013a9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8013ab4:	fa1f f986 	uxth.w	r9, r6
 8013ab8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013abc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013ac0:	443b      	add	r3, r7
 8013ac2:	4293      	cmp	r3, r2
 8013ac4:	f6bf af7e 	bge.w	80139c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8013ac8:	a817      	add	r0, sp, #92	@ 0x5c
 8013aca:	f003 fa8d 	bl	8016fe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013ace:	b1f8      	cbz	r0, 8013b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013ad0:	280a      	cmp	r0, #10
 8013ad2:	d1f1      	bne.n	8013ab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8013ad4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8013ad8:	444b      	add	r3, r9
 8013ada:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013ade:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8013ae2:	eba3 0309 	sub.w	r3, r3, r9
 8013ae6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013aea:	e7e5      	b.n	8013ab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8013aec:	b2b3      	uxth	r3, r6
 8013aee:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8013af2:	441a      	add	r2, r3
 8013af4:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8013af8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8013afc:	1ad3      	subs	r3, r2, r3
 8013afe:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013b02:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013b06:	b11b      	cbz	r3, 8013b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013b08:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d0ba      	beq.n	8013a86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8013b10:	b063      	add	sp, #396	@ 0x18c
 8013b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b16:	2a02      	cmp	r2, #2
 8013b18:	d105      	bne.n	8013b26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8013b1a:	7be2      	ldrb	r2, [r4, #15]
 8013b1c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8013b20:	1a80      	subs	r0, r0, r2
 8013b22:	1ac0      	subs	r0, r0, r3
 8013b24:	e773      	b.n	8013a0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8013b26:	2000      	movs	r0, #0
 8013b28:	e772      	b.n	8013a10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8013b2a:	7be0      	ldrb	r0, [r4, #15]
 8013b2c:	e770      	b.n	8013a10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8013b2e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013b32:	e773      	b.n	8013a1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8013b34:	f1ba 0f00 	cmp.w	sl, #0
 8013b38:	d0f7      	beq.n	8013b2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8013b3a:	2264      	movs	r2, #100	@ 0x64
 8013b3c:	4639      	mov	r1, r7
 8013b3e:	a849      	add	r0, sp, #292	@ 0x124
 8013b40:	f00f ff43 	bl	80239ca <memcpy>
 8013b44:	2300      	movs	r3, #0
 8013b46:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013b4a:	6821      	ldr	r1, [r4, #0]
 8013b4c:	a849      	add	r0, sp, #292	@ 0x124
 8013b4e:	f7ff fb9a 	bl	8013286 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013b52:	b203      	sxth	r3, r0
 8013b54:	e751      	b.n	80139fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08013b56 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8013b56:	2b03      	cmp	r3, #3
 8013b58:	d818      	bhi.n	8013b8c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8013b5a:	e8df f003 	tbb	[pc, r3]
 8013b5e:	0602      	.short	0x0602
 8013b60:	130d      	.short	0x130d
 8013b62:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013b66:	1850      	adds	r0, r2, r1
 8013b68:	4770      	bx	lr
 8013b6a:	8803      	ldrh	r3, [r0, #0]
 8013b6c:	8880      	ldrh	r0, [r0, #4]
 8013b6e:	4418      	add	r0, r3
 8013b70:	b200      	sxth	r0, r0
 8013b72:	1a80      	subs	r0, r0, r2
 8013b74:	3801      	subs	r0, #1
 8013b76:	4770      	bx	lr
 8013b78:	8803      	ldrh	r3, [r0, #0]
 8013b7a:	8880      	ldrh	r0, [r0, #4]
 8013b7c:	4418      	add	r0, r3
 8013b7e:	b200      	sxth	r0, r0
 8013b80:	1a40      	subs	r0, r0, r1
 8013b82:	e7f7      	b.n	8013b74 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8013b84:	f9b0 0000 	ldrsh.w	r0, [r0]
 8013b88:	4410      	add	r0, r2
 8013b8a:	4770      	bx	lr
 8013b8c:	2000      	movs	r0, #0
 8013b8e:	4770      	bx	lr

08013b90 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8013b90:	2b03      	cmp	r3, #3
 8013b92:	d817      	bhi.n	8013bc4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8013b94:	e8df f003 	tbb	[pc, r3]
 8013b98:	10090602 	.word	0x10090602
 8013b9c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013ba0:	1850      	adds	r0, r2, r1
 8013ba2:	4770      	bx	lr
 8013ba4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013ba8:	e7fa      	b.n	8013ba0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8013baa:	8843      	ldrh	r3, [r0, #2]
 8013bac:	88c0      	ldrh	r0, [r0, #6]
 8013bae:	4418      	add	r0, r3
 8013bb0:	b200      	sxth	r0, r0
 8013bb2:	1a80      	subs	r0, r0, r2
 8013bb4:	3801      	subs	r0, #1
 8013bb6:	4770      	bx	lr
 8013bb8:	8843      	ldrh	r3, [r0, #2]
 8013bba:	88c0      	ldrh	r0, [r0, #6]
 8013bbc:	4418      	add	r0, r3
 8013bbe:	b200      	sxth	r0, r0
 8013bc0:	1a40      	subs	r0, r0, r1
 8013bc2:	e7f7      	b.n	8013bb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8013bc4:	2000      	movs	r0, #0
 8013bc6:	4770      	bx	lr

08013bc8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8013bc8:	4b01      	ldr	r3, [pc, #4]	@ (8013bd0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8013bca:	2200      	movs	r2, #0
 8013bcc:	601a      	str	r2, [r3, #0]
 8013bce:	4770      	bx	lr
 8013bd0:	2402530c 	.word	0x2402530c

08013bd4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	b1c8      	cbz	r0, 8013c0c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8013bd8:	0c02      	lsrs	r2, r0, #16
 8013bda:	0412      	lsls	r2, r2, #16
 8013bdc:	b9a2      	cbnz	r2, 8013c08 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8013bde:	0403      	lsls	r3, r0, #16
 8013be0:	2010      	movs	r0, #16
 8013be2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8013be6:	bf04      	itt	eq
 8013be8:	021b      	lsleq	r3, r3, #8
 8013bea:	3008      	addeq	r0, #8
 8013bec:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8013bf0:	bf04      	itt	eq
 8013bf2:	011b      	lsleq	r3, r3, #4
 8013bf4:	3004      	addeq	r0, #4
 8013bf6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8013bfa:	bf04      	itt	eq
 8013bfc:	009b      	lsleq	r3, r3, #2
 8013bfe:	3002      	addeq	r0, #2
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	db04      	blt.n	8013c0e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8013c04:	3001      	adds	r0, #1
 8013c06:	4770      	bx	lr
 8013c08:	2000      	movs	r0, #0
 8013c0a:	e7ea      	b.n	8013be2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8013c0c:	2020      	movs	r0, #32
 8013c0e:	4770      	bx	lr

08013c10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	b087      	sub	sp, #28
 8013c16:	460d      	mov	r5, r1
 8013c18:	4616      	mov	r6, r2
 8013c1a:	4698      	mov	r8, r3
 8013c1c:	4601      	mov	r1, r0
 8013c1e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8013c22:	b120      	cbz	r0, 8013c2e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013c24:	b11a      	cbz	r2, 8013c2e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013c26:	2d1f      	cmp	r5, #31
 8013c28:	d801      	bhi.n	8013c2e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013c2a:	2b1f      	cmp	r3, #31
 8013c2c:	d904      	bls.n	8013c38 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8013c2e:	2000      	movs	r0, #0
 8013c30:	6038      	str	r0, [r7, #0]
 8013c32:	b007      	add	sp, #28
 8013c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c38:	b97d      	cbnz	r5, 8013c5a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8013c3a:	b143      	cbz	r3, 8013c4e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8013c3c:	4602      	mov	r2, r0
 8013c3e:	462b      	mov	r3, r5
 8013c40:	4641      	mov	r1, r8
 8013c42:	4630      	mov	r0, r6
 8013c44:	e9cd 4700 	strd	r4, r7, [sp]
 8013c48:	f7ff ffe2 	bl	8013c10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013c4c:	e7f1      	b.n	8013c32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8013c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c52:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013c56:	603b      	str	r3, [r7, #0]
 8013c58:	e7eb      	b.n	8013c32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8013c5a:	fa32 fa05 	lsrs.w	sl, r2, r5
 8013c5e:	d106      	bne.n	8013c6e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8013c60:	4346      	muls	r6, r0
 8013c62:	fbb6 f0f4 	udiv	r0, r6, r4
 8013c66:	fb04 6610 	mls	r6, r4, r0, r6
 8013c6a:	603e      	str	r6, [r7, #0]
 8013c6c:	e7e1      	b.n	8013c32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8013c6e:	2201      	movs	r2, #1
 8013c70:	fa00 fb05 	lsl.w	fp, r0, r5
 8013c74:	40aa      	lsls	r2, r5
 8013c76:	fbbb f9f4 	udiv	r9, fp, r4
 8013c7a:	3a01      	subs	r2, #1
 8013c7c:	fb0a f309 	mul.w	r3, sl, r9
 8013c80:	fb04 b919 	mls	r9, r4, r9, fp
 8013c84:	4016      	ands	r6, r2
 8013c86:	9303      	str	r3, [sp, #12]
 8013c88:	4630      	mov	r0, r6
 8013c8a:	f7ff ffa3 	bl	8013bd4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013c8e:	462b      	mov	r3, r5
 8013c90:	460a      	mov	r2, r1
 8013c92:	4601      	mov	r1, r0
 8013c94:	4630      	mov	r0, r6
 8013c96:	e9cd 4700 	strd	r4, r7, [sp]
 8013c9a:	f7ff ffb9 	bl	8013c10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013c9e:	4606      	mov	r6, r0
 8013ca0:	4648      	mov	r0, r9
 8013ca2:	eb05 0108 	add.w	r1, r5, r8
 8013ca6:	f7ff ff95 	bl	8013bd4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013caa:	ab05      	add	r3, sp, #20
 8013cac:	464a      	mov	r2, r9
 8013cae:	e9cd 4300 	strd	r4, r3, [sp]
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	4650      	mov	r0, sl
 8013cb6:	f7ff ffab 	bl	8013c10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013cba:	6839      	ldr	r1, [r7, #0]
 8013cbc:	9a05      	ldr	r2, [sp, #20]
 8013cbe:	9b03      	ldr	r3, [sp, #12]
 8013cc0:	4411      	add	r1, r2
 8013cc2:	fbb1 f2f4 	udiv	r2, r1, r4
 8013cc6:	18d3      	adds	r3, r2, r3
 8013cc8:	fb04 1412 	mls	r4, r4, r2, r1
 8013ccc:	441e      	add	r6, r3
 8013cce:	603c      	str	r4, [r7, #0]
 8013cd0:	4430      	add	r0, r6
 8013cd2:	e7ae      	b.n	8013c32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08013cd4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8013cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013cd8:	b085      	sub	sp, #20
 8013cda:	f1b0 0900 	subs.w	r9, r0, #0
 8013cde:	461d      	mov	r5, r3
 8013ce0:	4617      	mov	r7, r2
 8013ce2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8013ce4:	bfbb      	ittet	lt
 8013ce6:	f1c9 0900 	rsblt	r9, r9, #0
 8013cea:	f04f 36ff 	movlt.w	r6, #4294967295
 8013cee:	2601      	movge	r6, #1
 8013cf0:	6823      	ldrlt	r3, [r4, #0]
 8013cf2:	bfbc      	itt	lt
 8013cf4:	425b      	neglt	r3, r3
 8013cf6:	6023      	strlt	r3, [r4, #0]
 8013cf8:	2a00      	cmp	r2, #0
 8013cfa:	da04      	bge.n	8013d06 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8013cfc:	6823      	ldr	r3, [r4, #0]
 8013cfe:	4257      	negs	r7, r2
 8013d00:	4276      	negs	r6, r6
 8013d02:	425b      	negs	r3, r3
 8013d04:	6023      	str	r3, [r4, #0]
 8013d06:	2d00      	cmp	r5, #0
 8013d08:	4638      	mov	r0, r7
 8013d0a:	bfba      	itte	lt
 8013d0c:	426d      	neglt	r5, r5
 8013d0e:	f04f 38ff 	movlt.w	r8, #4294967295
 8013d12:	f04f 0801 	movge.w	r8, #1
 8013d16:	f7ff ff5d 	bl	8013bd4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013d1a:	ab03      	add	r3, sp, #12
 8013d1c:	463a      	mov	r2, r7
 8013d1e:	e9cd 5300 	strd	r5, r3, [sp]
 8013d22:	4603      	mov	r3, r0
 8013d24:	4648      	mov	r0, r9
 8013d26:	f7ff ff73 	bl	8013c10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013d2a:	6823      	ldr	r3, [r4, #0]
 8013d2c:	9a03      	ldr	r2, [sp, #12]
 8013d2e:	4546      	cmp	r6, r8
 8013d30:	441a      	add	r2, r3
 8013d32:	fb92 f3f5 	sdiv	r3, r2, r5
 8013d36:	4418      	add	r0, r3
 8013d38:	fb05 2313 	mls	r3, r5, r3, r2
 8013d3c:	bf18      	it	ne
 8013d3e:	4240      	negne	r0, r0
 8013d40:	1c72      	adds	r2, r6, #1
 8013d42:	6023      	str	r3, [r4, #0]
 8013d44:	d105      	bne.n	8013d52 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f1c3 0200 	rsb	r2, r3, #0
 8013d4c:	db0b      	blt.n	8013d66 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8013d4e:	6022      	str	r2, [r4, #0]
 8013d50:	e006      	b.n	8013d60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013d52:	2e01      	cmp	r6, #1
 8013d54:	d104      	bne.n	8013d60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	da02      	bge.n	8013d60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013d5a:	442b      	add	r3, r5
 8013d5c:	3801      	subs	r0, #1
 8013d5e:	6023      	str	r3, [r4, #0]
 8013d60:	b005      	add	sp, #20
 8013d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d66:	3801      	subs	r0, #1
 8013d68:	1b52      	subs	r2, r2, r5
 8013d6a:	e7f0      	b.n	8013d4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08013d6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8013d6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013d70:	4c1c      	ldr	r4, [pc, #112]	@ (8013de4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8013d72:	4605      	mov	r5, r0
 8013d74:	6807      	ldr	r7, [r0, #0]
 8013d76:	69a3      	ldr	r3, [r4, #24]
 8013d78:	b92b      	cbnz	r3, 8013d86 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8013d7a:	6840      	ldr	r0, [r0, #4]
 8013d7c:	e9c5 7000 	strd	r7, r0, [r5]
 8013d80:	b004      	add	sp, #16
 8013d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d86:	f04f 0802 	mov.w	r8, #2
 8013d8a:	68a2      	ldr	r2, [r4, #8]
 8013d8c:	ae04      	add	r6, sp, #16
 8013d8e:	6820      	ldr	r0, [r4, #0]
 8013d90:	fb93 f1f8 	sdiv	r1, r3, r8
 8013d94:	440a      	add	r2, r1
 8013d96:	69e1      	ldr	r1, [r4, #28]
 8013d98:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013d9c:	463a      	mov	r2, r7
 8013d9e:	9600      	str	r6, [sp, #0]
 8013da0:	f7ff ff98 	bl	8013cd4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013da4:	69a3      	ldr	r3, [r4, #24]
 8013da6:	4607      	mov	r7, r0
 8013da8:	686a      	ldr	r2, [r5, #4]
 8013daa:	6a21      	ldr	r1, [r4, #32]
 8013dac:	9600      	str	r6, [sp, #0]
 8013dae:	6860      	ldr	r0, [r4, #4]
 8013db0:	f7ff ff90 	bl	8013cd4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013db4:	69a3      	ldr	r3, [r4, #24]
 8013db6:	6962      	ldr	r2, [r4, #20]
 8013db8:	4407      	add	r7, r0
 8013dba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013dbc:	9600      	str	r6, [sp, #0]
 8013dbe:	68e0      	ldr	r0, [r4, #12]
 8013dc0:	fb93 f8f8 	sdiv	r8, r3, r8
 8013dc4:	4442      	add	r2, r8
 8013dc6:	9203      	str	r2, [sp, #12]
 8013dc8:	682a      	ldr	r2, [r5, #0]
 8013dca:	f7ff ff83 	bl	8013cd4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013dce:	4680      	mov	r8, r0
 8013dd0:	9600      	str	r6, [sp, #0]
 8013dd2:	69a3      	ldr	r3, [r4, #24]
 8013dd4:	686a      	ldr	r2, [r5, #4]
 8013dd6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013dd8:	6920      	ldr	r0, [r4, #16]
 8013dda:	f7ff ff7b 	bl	8013cd4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013dde:	4440      	add	r0, r8
 8013de0:	e7cc      	b.n	8013d7c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8013de2:	bf00      	nop
 8013de4:	24025310 	.word	0x24025310

08013de8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8013de8:	4b07      	ldr	r3, [pc, #28]	@ (8013e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	d109      	bne.n	8013e04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8013df0:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013df4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013df8:	8003      	strh	r3, [r0, #0]
 8013dfa:	4b04      	ldr	r3, [pc, #16]	@ (8013e0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8013dfc:	881b      	ldrh	r3, [r3, #0]
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	1a9b      	subs	r3, r3, r2
 8013e02:	800b      	strh	r3, [r1, #0]
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	240252f4 	.word	0x240252f4
 8013e0c:	240252f0 	.word	0x240252f0

08013e10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8013e10:	4b07      	ldr	r3, [pc, #28]	@ (8013e30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8013e12:	b510      	push	{r4, lr}
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d108      	bne.n	8013e2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8013e1a:	4b06      	ldr	r3, [pc, #24]	@ (8013e34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8013e1c:	880c      	ldrh	r4, [r1, #0]
 8013e1e:	881b      	ldrh	r3, [r3, #0]
 8013e20:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013e24:	3b01      	subs	r3, #1
 8013e26:	1b1b      	subs	r3, r3, r4
 8013e28:	8003      	strh	r3, [r0, #0]
 8013e2a:	800a      	strh	r2, [r1, #0]
 8013e2c:	bd10      	pop	{r4, pc}
 8013e2e:	bf00      	nop
 8013e30:	240252f4 	.word	0x240252f4
 8013e34:	240252f0 	.word	0x240252f0

08013e38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8013e38:	4b0a      	ldr	r3, [pc, #40]	@ (8013e64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8013e3a:	b510      	push	{r4, lr}
 8013e3c:	781b      	ldrb	r3, [r3, #0]
 8013e3e:	2b01      	cmp	r3, #1
 8013e40:	d10e      	bne.n	8013e60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8013e42:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013e46:	8843      	ldrh	r3, [r0, #2]
 8013e48:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013e4c:	18ca      	adds	r2, r1, r3
 8013e4e:	4b06      	ldr	r3, [pc, #24]	@ (8013e68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8013e50:	8044      	strh	r4, [r0, #2]
 8013e52:	881b      	ldrh	r3, [r3, #0]
 8013e54:	1a9b      	subs	r3, r3, r2
 8013e56:	8003      	strh	r3, [r0, #0]
 8013e58:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013e5c:	8081      	strh	r1, [r0, #4]
 8013e5e:	80c3      	strh	r3, [r0, #6]
 8013e60:	bd10      	pop	{r4, pc}
 8013e62:	bf00      	nop
 8013e64:	240252f4 	.word	0x240252f4
 8013e68:	240252f0 	.word	0x240252f0

08013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8013e6c:	4b08      	ldr	r3, [pc, #32]	@ (8013e90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d10c      	bne.n	8013e8e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013e74:	8803      	ldrh	r3, [r0, #0]
 8013e76:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013e7a:	8842      	ldrh	r2, [r0, #2]
 8013e7c:	8002      	strh	r2, [r0, #0]
 8013e7e:	185a      	adds	r2, r3, r1
 8013e80:	4b04      	ldr	r3, [pc, #16]	@ (8013e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8013e82:	881b      	ldrh	r3, [r3, #0]
 8013e84:	1a9b      	subs	r3, r3, r2
 8013e86:	8043      	strh	r3, [r0, #2]
 8013e88:	88c3      	ldrh	r3, [r0, #6]
 8013e8a:	80c1      	strh	r1, [r0, #6]
 8013e8c:	8083      	strh	r3, [r0, #4]
 8013e8e:	4770      	bx	lr
 8013e90:	240252f4 	.word	0x240252f4
 8013e94:	240252f0 	.word	0x240252f0

08013e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013e98:	4b07      	ldr	r3, [pc, #28]	@ (8013eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8013e9a:	b510      	push	{r4, lr}
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	d108      	bne.n	8013eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8013ea2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013ea6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013eaa:	8003      	strh	r3, [r0, #0]
 8013eac:	8893      	ldrh	r3, [r2, #4]
 8013eae:	3b01      	subs	r3, #1
 8013eb0:	1b1b      	subs	r3, r3, r4
 8013eb2:	800b      	strh	r3, [r1, #0]
 8013eb4:	bd10      	pop	{r4, pc}
 8013eb6:	bf00      	nop
 8013eb8:	240252f4 	.word	0x240252f4

08013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8013ebe:	460a      	mov	r2, r1
 8013ec0:	b510      	push	{r4, lr}
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	2b01      	cmp	r3, #1
 8013ec6:	d10d      	bne.n	8013ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013ec8:	8881      	ldrh	r1, [r0, #4]
 8013eca:	8803      	ldrh	r3, [r0, #0]
 8013ecc:	440b      	add	r3, r1
 8013ece:	4601      	mov	r1, r0
 8013ed0:	3b01      	subs	r3, #1
 8013ed2:	f821 3b02 	strh.w	r3, [r1], #2
 8013ed6:	f7ff ffdf 	bl	8013e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013eda:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013ede:	88c2      	ldrh	r2, [r0, #6]
 8013ee0:	80c3      	strh	r3, [r0, #6]
 8013ee2:	8082      	strh	r2, [r0, #4]
 8013ee4:	bd10      	pop	{r4, pc}
 8013ee6:	bf00      	nop
 8013ee8:	240252f4 	.word	0x240252f4

08013eec <_ZN8touchgfx11Application13requestRedrawEv>:
 8013eec:	4b06      	ldr	r3, [pc, #24]	@ (8013f08 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8013eee:	2100      	movs	r1, #0
 8013ef0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013ef4:	4b05      	ldr	r3, [pc, #20]	@ (8013f0c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8013ef6:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8013efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013efe:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8013f02:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8013f06:	4770      	bx	lr
 8013f08:	240252f0 	.word	0x240252f0
 8013f0c:	240252f2 	.word	0x240252f2

08013f10 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8013f10:	4b03      	ldr	r3, [pc, #12]	@ (8013f20 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8013f12:	6818      	ldr	r0, [r3, #0]
 8013f14:	b110      	cbz	r0, 8013f1c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8013f16:	6803      	ldr	r3, [r0, #0]
 8013f18:	699b      	ldr	r3, [r3, #24]
 8013f1a:	4718      	bx	r3
 8013f1c:	4770      	bx	lr
 8013f1e:	bf00      	nop
 8013f20:	24025340 	.word	0x24025340

08013f24 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8013f24:	4770      	bx	lr
	...

08013f28 <_ZN8touchgfx11Application4drawEv>:
 8013f28:	4b09      	ldr	r3, [pc, #36]	@ (8013f50 <_ZN8touchgfx11Application4drawEv+0x28>)
 8013f2a:	b507      	push	{r0, r1, r2, lr}
 8013f2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013f30:	2100      	movs	r1, #0
 8013f32:	4b08      	ldr	r3, [pc, #32]	@ (8013f54 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8013f34:	9100      	str	r1, [sp, #0]
 8013f36:	4669      	mov	r1, sp
 8013f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f3c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013f40:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013f44:	6803      	ldr	r3, [r0, #0]
 8013f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013f48:	4798      	blx	r3
 8013f4a:	b003      	add	sp, #12
 8013f4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f50:	240252f0 	.word	0x240252f0
 8013f54:	240252f2 	.word	0x240252f2

08013f58 <_ZN8touchgfx11Application10invalidateEv>:
 8013f58:	4b09      	ldr	r3, [pc, #36]	@ (8013f80 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	2100      	movs	r1, #0
 8013f5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013f62:	4b08      	ldr	r3, [pc, #32]	@ (8013f84 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8013f64:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013f68:	aa02      	add	r2, sp, #8
 8013f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f6e:	9100      	str	r1, [sp, #0]
 8013f70:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013f74:	6803      	ldr	r3, [r0, #0]
 8013f76:	e912 0006 	ldmdb	r2, {r1, r2}
 8013f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f7c:	b002      	add	sp, #8
 8013f7e:	4718      	bx	r3
 8013f80:	240252f0 	.word	0x240252f0
 8013f84:	240252f2 	.word	0x240252f2

08013f88 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8013f88:	4b03      	ldr	r3, [pc, #12]	@ (8013f98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8013f8a:	6818      	ldr	r0, [r3, #0]
 8013f8c:	b110      	cbz	r0, 8013f94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8013f8e:	6803      	ldr	r3, [r0, #0]
 8013f90:	69db      	ldr	r3, [r3, #28]
 8013f92:	4718      	bx	r3
 8013f94:	4770      	bx	lr
 8013f96:	bf00      	nop
 8013f98:	24025340 	.word	0x24025340

08013f9c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8013f9c:	4b03      	ldr	r3, [pc, #12]	@ (8013fac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8013f9e:	6818      	ldr	r0, [r3, #0]
 8013fa0:	b110      	cbz	r0, 8013fa8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8013fa2:	6803      	ldr	r3, [r0, #0]
 8013fa4:	6a1b      	ldr	r3, [r3, #32]
 8013fa6:	4718      	bx	r3
 8013fa8:	4770      	bx	lr
 8013faa:	bf00      	nop
 8013fac:	24025340 	.word	0x24025340

08013fb0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8013fb6:	4770      	bx	lr

08013fb8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013fb8:	4b03      	ldr	r3, [pc, #12]	@ (8013fc8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013fba:	6818      	ldr	r0, [r3, #0]
 8013fbc:	b110      	cbz	r0, 8013fc4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8013fbe:	6803      	ldr	r3, [r0, #0]
 8013fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fc2:	4718      	bx	r3
 8013fc4:	4770      	bx	lr
 8013fc6:	bf00      	nop
 8013fc8:	24025340 	.word	0x24025340

08013fcc <_ZN8touchgfx11ApplicationD1Ev>:
 8013fcc:	4770      	bx	lr

08013fce <_ZN8touchgfx11ApplicationD0Ev>:
 8013fce:	b510      	push	{r4, lr}
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8013fd6:	f00e fe05 	bl	8022be4 <_ZdlPvj>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	bd10      	pop	{r4, pc}

08013fde <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013fde:	b510      	push	{r4, lr}
 8013fe0:	f9b1 4000 	ldrsh.w	r4, [r1]
 8013fe4:	888a      	ldrh	r2, [r1, #4]
 8013fe6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013fea:	4422      	add	r2, r4
 8013fec:	b212      	sxth	r2, r2
 8013fee:	4293      	cmp	r3, r2
 8013ff0:	da15      	bge.n	801401e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013ff2:	8882      	ldrh	r2, [r0, #4]
 8013ff4:	4413      	add	r3, r2
 8013ff6:	b21b      	sxth	r3, r3
 8013ff8:	429c      	cmp	r4, r3
 8013ffa:	da10      	bge.n	801401e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013ffc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014000:	88c9      	ldrh	r1, [r1, #6]
 8014002:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014006:	4419      	add	r1, r3
 8014008:	b209      	sxth	r1, r1
 801400a:	428a      	cmp	r2, r1
 801400c:	da07      	bge.n	801401e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801400e:	88c0      	ldrh	r0, [r0, #6]
 8014010:	4410      	add	r0, r2
 8014012:	b200      	sxth	r0, r0
 8014014:	4283      	cmp	r3, r0
 8014016:	bfac      	ite	ge
 8014018:	2000      	movge	r0, #0
 801401a:	2001      	movlt	r0, #1
 801401c:	bd10      	pop	{r4, pc}
 801401e:	2000      	movs	r0, #0
 8014020:	e7fc      	b.n	801401c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08014022 <_ZN8touchgfx4Rect10restrictToEss>:
 8014022:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014026:	2b00      	cmp	r3, #0
 8014028:	b510      	push	{r4, lr}
 801402a:	da04      	bge.n	8014036 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801402c:	8884      	ldrh	r4, [r0, #4]
 801402e:	4423      	add	r3, r4
 8014030:	8083      	strh	r3, [r0, #4]
 8014032:	2300      	movs	r3, #0
 8014034:	8003      	strh	r3, [r0, #0]
 8014036:	f9b0 4000 	ldrsh.w	r4, [r0]
 801403a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801403e:	1b09      	subs	r1, r1, r4
 8014040:	428b      	cmp	r3, r1
 8014042:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014046:	bfc8      	it	gt
 8014048:	8081      	strhgt	r1, [r0, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	da04      	bge.n	8014058 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801404e:	88c1      	ldrh	r1, [r0, #6]
 8014050:	440b      	add	r3, r1
 8014052:	80c3      	strh	r3, [r0, #6]
 8014054:	2300      	movs	r3, #0
 8014056:	8043      	strh	r3, [r0, #2]
 8014058:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801405c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014060:	1a52      	subs	r2, r2, r1
 8014062:	4293      	cmp	r3, r2
 8014064:	bfc8      	it	gt
 8014066:	80c2      	strhgt	r2, [r0, #6]
 8014068:	bd10      	pop	{r4, pc}
	...

0801406c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801406c:	4b10      	ldr	r3, [pc, #64]	@ (80140b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801406e:	b510      	push	{r4, lr}
 8014070:	460c      	mov	r4, r1
 8014072:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014076:	4b0f      	ldr	r3, [pc, #60]	@ (80140b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8014078:	4620      	mov	r0, r4
 801407a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801407e:	f7ff ffd0 	bl	8014022 <_ZN8touchgfx4Rect10restrictToEss>
 8014082:	4b0d      	ldr	r3, [pc, #52]	@ (80140b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8014084:	6818      	ldr	r0, [r3, #0]
 8014086:	b190      	cbz	r0, 80140ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8014088:	6803      	ldr	r3, [r0, #0]
 801408a:	4621      	mov	r1, r4
 801408c:	689b      	ldr	r3, [r3, #8]
 801408e:	4798      	blx	r3
 8014090:	4b0a      	ldr	r3, [pc, #40]	@ (80140bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8014092:	6818      	ldr	r0, [r3, #0]
 8014094:	b118      	cbz	r0, 801409e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8014096:	6803      	ldr	r3, [r0, #0]
 8014098:	4621      	mov	r1, r4
 801409a:	689b      	ldr	r3, [r3, #8]
 801409c:	4798      	blx	r3
 801409e:	4b08      	ldr	r3, [pc, #32]	@ (80140c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80140a0:	4621      	mov	r1, r4
 80140a2:	6818      	ldr	r0, [r3, #0]
 80140a4:	6803      	ldr	r3, [r0, #0]
 80140a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140aa:	69db      	ldr	r3, [r3, #28]
 80140ac:	4718      	bx	r3
 80140ae:	bd10      	pop	{r4, pc}
 80140b0:	240252f2 	.word	0x240252f2
 80140b4:	240252f0 	.word	0x240252f0
 80140b8:	24025340 	.word	0x24025340
 80140bc:	2402533c 	.word	0x2402533c
 80140c0:	240252fc 	.word	0x240252fc

080140c4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80140c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140c6:	4606      	mov	r6, r0
 80140c8:	4608      	mov	r0, r1
 80140ca:	460f      	mov	r7, r1
 80140cc:	f7fa fa1f 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 80140d0:	b9e8      	cbnz	r0, 801410e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80140d2:	f9b7 5000 	ldrsh.w	r5, [r7]
 80140d6:	f9b6 4000 	ldrsh.w	r4, [r6]
 80140da:	42a5      	cmp	r5, r4
 80140dc:	db17      	blt.n	801410e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80140de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80140e2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	db11      	blt.n	801410e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80140ea:	88b9      	ldrh	r1, [r7, #4]
 80140ec:	440d      	add	r5, r1
 80140ee:	88b1      	ldrh	r1, [r6, #4]
 80140f0:	440c      	add	r4, r1
 80140f2:	b22d      	sxth	r5, r5
 80140f4:	b224      	sxth	r4, r4
 80140f6:	42a5      	cmp	r5, r4
 80140f8:	dc09      	bgt.n	801410e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80140fa:	88f8      	ldrh	r0, [r7, #6]
 80140fc:	4410      	add	r0, r2
 80140fe:	88f2      	ldrh	r2, [r6, #6]
 8014100:	4413      	add	r3, r2
 8014102:	b200      	sxth	r0, r0
 8014104:	b21b      	sxth	r3, r3
 8014106:	4298      	cmp	r0, r3
 8014108:	bfcc      	ite	gt
 801410a:	2000      	movgt	r0, #0
 801410c:	2001      	movle	r0, #1
 801410e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014110 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014112:	4604      	mov	r4, r0
 8014114:	4608      	mov	r0, r1
 8014116:	460d      	mov	r5, r1
 8014118:	f7fa f9f9 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 801411c:	b978      	cbnz	r0, 801413e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801411e:	4620      	mov	r0, r4
 8014120:	f7fa f9f5 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014124:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014128:	b150      	cbz	r0, 8014140 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801412a:	8026      	strh	r6, [r4, #0]
 801412c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014130:	8063      	strh	r3, [r4, #2]
 8014132:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8014136:	80a3      	strh	r3, [r4, #4]
 8014138:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801413c:	80e3      	strh	r3, [r4, #6]
 801413e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014140:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014144:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014148:	42b1      	cmp	r1, r6
 801414a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801414e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8014152:	460f      	mov	r7, r1
 8014154:	88ed      	ldrh	r5, [r5, #6]
 8014156:	bfa8      	it	ge
 8014158:	4637      	movge	r7, r6
 801415a:	4293      	cmp	r3, r2
 801415c:	4618      	mov	r0, r3
 801415e:	4466      	add	r6, ip
 8014160:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014164:	bfa8      	it	ge
 8014166:	4610      	movge	r0, r2
 8014168:	442a      	add	r2, r5
 801416a:	88e5      	ldrh	r5, [r4, #6]
 801416c:	4461      	add	r1, ip
 801416e:	b236      	sxth	r6, r6
 8014170:	8027      	strh	r7, [r4, #0]
 8014172:	442b      	add	r3, r5
 8014174:	b209      	sxth	r1, r1
 8014176:	b212      	sxth	r2, r2
 8014178:	8060      	strh	r0, [r4, #2]
 801417a:	b21b      	sxth	r3, r3
 801417c:	428e      	cmp	r6, r1
 801417e:	bfac      	ite	ge
 8014180:	ebc7 0106 	rsbge	r1, r7, r6
 8014184:	ebc7 0101 	rsblt	r1, r7, r1
 8014188:	429a      	cmp	r2, r3
 801418a:	bfac      	ite	ge
 801418c:	ebc0 0202 	rsbge	r2, r0, r2
 8014190:	ebc0 0203 	rsblt	r2, r0, r3
 8014194:	80a1      	strh	r1, [r4, #4]
 8014196:	80e2      	strh	r2, [r4, #6]
 8014198:	e7d1      	b.n	801413e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801419c <_ZN8touchgfx11Application11getInstanceEv>:
 801419c:	4b01      	ldr	r3, [pc, #4]	@ (80141a4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801419e:	6818      	ldr	r0, [r3, #0]
 80141a0:	4770      	bx	lr
 80141a2:	bf00      	nop
 80141a4:	24025350 	.word	0x24025350

080141a8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 80141a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141aa:	4b10      	ldr	r3, [pc, #64]	@ (80141ec <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 80141ac:	4605      	mov	r5, r0
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	b1d3      	cbz	r3, 80141e8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 80141b2:	4b0f      	ldr	r3, [pc, #60]	@ (80141f0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 80141b4:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 80141b8:	4f0e      	ldr	r7, [pc, #56]	@ (80141f4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 80141ba:	881c      	ldrh	r4, [r3, #0]
 80141bc:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 80141c0:	42a3      	cmp	r3, r4
 80141c2:	d90e      	bls.n	80141e2 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80141ca:	b10a      	cbz	r2, 80141d0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 80141cc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80141ce:	b900      	cbnz	r0, 80141d2 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 80141d0:	6898      	ldr	r0, [r3, #8]
 80141d2:	6803      	ldr	r3, [r0, #0]
 80141d4:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 80141d8:	3401      	adds	r4, #1
 80141da:	69db      	ldr	r3, [r3, #28]
 80141dc:	4798      	blx	r3
 80141de:	b2a4      	uxth	r4, r4
 80141e0:	e7ec      	b.n	80141bc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 80141e2:	2300      	movs	r3, #0
 80141e4:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 80141e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141ea:	bf00      	nop
 80141ec:	240252fa 	.word	0x240252fa
 80141f0:	2400007c 	.word	0x2400007c
 80141f4:	240252fc 	.word	0x240252fc

080141f8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80141f8:	2300      	movs	r3, #0
 80141fa:	b510      	push	{r4, lr}
 80141fc:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8014200:	4604      	mov	r4, r0
 8014202:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014206:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801420a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801420e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8014212:	429a      	cmp	r2, r3
 8014214:	d90e      	bls.n	8014234 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8014216:	18e2      	adds	r2, r4, r3
 8014218:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801421c:	b122      	cbz	r2, 8014228 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801421e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8014222:	6803      	ldr	r3, [r0, #0]
 8014224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014226:	4798      	blx	r3
 8014228:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801422c:	3301      	adds	r3, #1
 801422e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014232:	e7ea      	b.n	801420a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8014234:	bd10      	pop	{r4, pc}

08014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8014236:	2300      	movs	r3, #0
 8014238:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801423c:	30a4      	adds	r0, #164	@ 0xa4
 801423e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8014242:	f802 3b01 	strb.w	r3, [r2], #1
 8014246:	4282      	cmp	r2, r0
 8014248:	d1fb      	bne.n	8014242 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801424a:	4770      	bx	lr

0801424c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801424c:	b570      	push	{r4, r5, r6, lr}
 801424e:	4c0b      	ldr	r4, [pc, #44]	@ (801427c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8014250:	4605      	mov	r5, r0
 8014252:	460e      	mov	r6, r1
 8014254:	6820      	ldr	r0, [r4, #0]
 8014256:	b110      	cbz	r0, 801425e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8014258:	6803      	ldr	r3, [r0, #0]
 801425a:	695b      	ldr	r3, [r3, #20]
 801425c:	4798      	blx	r3
 801425e:	1d28      	adds	r0, r5, #4
 8014260:	f7ff ffe9 	bl	8014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8014264:	6026      	str	r6, [r4, #0]
 8014266:	6833      	ldr	r3, [r6, #0]
 8014268:	4630      	mov	r0, r6
 801426a:	68db      	ldr	r3, [r3, #12]
 801426c:	4798      	blx	r3
 801426e:	682b      	ldr	r3, [r5, #0]
 8014270:	4628      	mov	r0, r5
 8014272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014278:	4718      	bx	r3
 801427a:	bf00      	nop
 801427c:	24025340 	.word	0x24025340

08014280 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8014280:	2300      	movs	r3, #0
 8014282:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8014286:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801428a:	461a      	mov	r2, r3
 801428c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801428e:	461c      	mov	r4, r3
 8014290:	461d      	mov	r5, r3
 8014292:	459c      	cmp	ip, r3
 8014294:	dd1a      	ble.n	80142cc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8014296:	18c6      	adds	r6, r0, r3
 8014298:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801429c:	b16e      	cbz	r6, 80142ba <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801429e:	429a      	cmp	r2, r3
 80142a0:	d008      	beq.n	80142b4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80142a2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80142a6:	fa1f fe82 	uxth.w	lr, r2
 80142aa:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80142ae:	1887      	adds	r7, r0, r2
 80142b0:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80142b4:	3201      	adds	r2, #1
 80142b6:	3301      	adds	r3, #1
 80142b8:	e7eb      	b.n	8014292 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80142ba:	4299      	cmp	r1, r3
 80142bc:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80142c0:	bfa8      	it	ge
 80142c2:	3501      	addge	r5, #1
 80142c4:	429e      	cmp	r6, r3
 80142c6:	bfc8      	it	gt
 80142c8:	3401      	addgt	r4, #1
 80142ca:	e7f4      	b.n	80142b6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80142cc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80142d0:	1b49      	subs	r1, r1, r5
 80142d2:	1b1b      	subs	r3, r3, r4
 80142d4:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80142d8:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80142dc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80142e0:	4293      	cmp	r3, r2
 80142e2:	dd03      	ble.n	80142ec <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80142e4:	3b01      	subs	r3, #1
 80142e6:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80142ea:	e7f7      	b.n	80142dc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80142ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080142f0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80142f0:	b570      	push	{r4, r5, r6, lr}
 80142f2:	4d16      	ldr	r5, [pc, #88]	@ (801434c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80142f4:	4604      	mov	r4, r0
 80142f6:	6828      	ldr	r0, [r5, #0]
 80142f8:	b140      	cbz	r0, 801430c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80142fa:	7a03      	ldrb	r3, [r0, #8]
 80142fc:	b933      	cbnz	r3, 801430c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80142fe:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8014302:	6803      	ldr	r3, [r0, #0]
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801430a:	4718      	bx	r3
 801430c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8014310:	4e0f      	ldr	r6, [pc, #60]	@ (8014350 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8014312:	b973      	cbnz	r3, 8014332 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014314:	b168      	cbz	r0, 8014332 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014316:	7a03      	ldrb	r3, [r0, #8]
 8014318:	b15b      	cbz	r3, 8014332 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801431a:	6830      	ldr	r0, [r6, #0]
 801431c:	b110      	cbz	r0, 8014324 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801431e:	6803      	ldr	r3, [r0, #0]
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	4798      	blx	r3
 8014324:	6828      	ldr	r0, [r5, #0]
 8014326:	6803      	ldr	r3, [r0, #0]
 8014328:	68db      	ldr	r3, [r3, #12]
 801432a:	4798      	blx	r3
 801432c:	2301      	movs	r3, #1
 801432e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8014332:	3404      	adds	r4, #4
 8014334:	4620      	mov	r0, r4
 8014336:	f7ff ff5f 	bl	80141f8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801433a:	4620      	mov	r0, r4
 801433c:	f7ff ffa0 	bl	8014280 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8014340:	6830      	ldr	r0, [r6, #0]
 8014342:	b110      	cbz	r0, 801434a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8014344:	6803      	ldr	r3, [r0, #0]
 8014346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014348:	e7dd      	b.n	8014306 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801434a:	bd70      	pop	{r4, r5, r6, pc}
 801434c:	24025344 	.word	0x24025344
 8014350:	24025340 	.word	0x24025340

08014354 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8014354:	4603      	mov	r3, r0
 8014356:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801435a:	2200      	movs	r2, #0
 801435c:	801a      	strh	r2, [r3, #0]
 801435e:	3308      	adds	r3, #8
 8014360:	f823 2c06 	strh.w	r2, [r3, #-6]
 8014364:	f823 2c04 	strh.w	r2, [r3, #-4]
 8014368:	f823 2c02 	strh.w	r2, [r3, #-2]
 801436c:	428b      	cmp	r3, r1
 801436e:	d1f5      	bne.n	801435c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8014370:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8014374:	4770      	bx	lr
	...

08014378 <_ZN8touchgfx11ApplicationC1Ev>:
 8014378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801437a:	4b1d      	ldr	r3, [pc, #116]	@ (80143f0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801437c:	4606      	mov	r6, r0
 801437e:	4604      	mov	r4, r0
 8014380:	2500      	movs	r5, #0
 8014382:	f846 3b04 	str.w	r3, [r6], #4
 8014386:	22a8      	movs	r2, #168	@ 0xa8
 8014388:	2100      	movs	r1, #0
 801438a:	4630      	mov	r0, r6
 801438c:	f00f fa3c 	bl	8023808 <memset>
 8014390:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8014394:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014398:	4f16      	ldr	r7, [pc, #88]	@ (80143f4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801439a:	f7ff ffdb 	bl	8014354 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801439e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80143a2:	f7ff ffd7 	bl	8014354 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80143a6:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80143aa:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80143ae:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80143b2:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80143b6:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80143ba:	490f      	ldr	r1, [pc, #60]	@ (80143f8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80143bc:	480f      	ldr	r0, [pc, #60]	@ (80143fc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80143be:	f00d fd81 	bl	8021ec4 <CRC_Lock>
 80143c2:	4b0f      	ldr	r3, [pc, #60]	@ (8014400 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80143c4:	b158      	cbz	r0, 80143de <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80143c6:	801d      	strh	r5, [r3, #0]
 80143c8:	2300      	movs	r3, #0
 80143ca:	4a0e      	ldr	r2, [pc, #56]	@ (8014404 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80143cc:	4630      	mov	r0, r6
 80143ce:	6013      	str	r3, [r2, #0]
 80143d0:	4a0d      	ldr	r2, [pc, #52]	@ (8014408 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80143d2:	603b      	str	r3, [r7, #0]
 80143d4:	6013      	str	r3, [r2, #0]
 80143d6:	f7ff ff2e 	bl	8014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80143da:	4620      	mov	r0, r4
 80143dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80143e2:	2002      	movs	r0, #2
 80143e4:	801a      	strh	r2, [r3, #0]
 80143e6:	6038      	str	r0, [r7, #0]
 80143e8:	f002 f810 	bl	801640c <_ZN8touchgfx6Screen4drawEv>
 80143ec:	e7ec      	b.n	80143c8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80143ee:	bf00      	nop
 80143f0:	08027820 	.word	0x08027820
 80143f4:	24025340 	.word	0x24025340
 80143f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80143fc:	f407a5c2 	.word	0xf407a5c2
 8014400:	2400007c 	.word	0x2400007c
 8014404:	24025350 	.word	0x24025350
 8014408:	24025344 	.word	0x24025344

0801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801440c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8014410:	3b01      	subs	r3, #1
 8014412:	b29b      	uxth	r3, r3
 8014414:	428b      	cmp	r3, r1
 8014416:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801441a:	b510      	push	{r4, lr}
 801441c:	d908      	bls.n	8014430 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801441e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8014422:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801442c:	685a      	ldr	r2, [r3, #4]
 801442e:	6062      	str	r2, [r4, #4]
 8014430:	bd10      	pop	{r4, pc}
	...

08014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8014434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014438:	b08f      	sub	sp, #60	@ 0x3c
 801443a:	4b92      	ldr	r3, [pc, #584]	@ (8014684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 801443c:	4683      	mov	fp, r0
 801443e:	ac0a      	add	r4, sp, #40	@ 0x28
 8014440:	e884 0006 	stmia.w	r4, {r1, r2}
 8014444:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014448:	4620      	mov	r0, r4
 801444a:	4b8f      	ldr	r3, [pc, #572]	@ (8014688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 801444c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014450:	f7ff fde7 	bl	8014022 <_ZN8touchgfx4Rect10restrictToEss>
 8014454:	4620      	mov	r0, r4
 8014456:	f7fa f85a 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 801445a:	2800      	cmp	r0, #0
 801445c:	d170      	bne.n	8014540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801445e:	4b8b      	ldr	r3, [pc, #556]	@ (801468c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014466:	2b02      	cmp	r3, #2
 8014468:	d06a      	beq.n	8014540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801446a:	9403      	str	r4, [sp, #12]
 801446c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014470:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014474:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8014478:	9301      	str	r3, [sp, #4]
 801447a:	35a4      	adds	r5, #164	@ 0xa4
 801447c:	b15c      	cbz	r4, 8014496 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801447e:	4629      	mov	r1, r5
 8014480:	9803      	ldr	r0, [sp, #12]
 8014482:	f7ff fe1f 	bl	80140c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014486:	3c01      	subs	r4, #1
 8014488:	b118      	cbz	r0, 8014492 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801448a:	b2a1      	uxth	r1, r4
 801448c:	9801      	ldr	r0, [sp, #4]
 801448e:	f7ff ffbd 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014492:	3d08      	subs	r5, #8
 8014494:	e7f2      	b.n	801447c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8014496:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801449a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801449e:	f8cd a010 	str.w	sl, [sp, #16]
 80144a2:	9302      	str	r3, [sp, #8]
 80144a4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80144a8:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 80144ac:	9306      	str	r3, [sp, #24]
 80144ae:	445c      	add	r4, fp
 80144b0:	2500      	movs	r5, #0
 80144b2:	4626      	mov	r6, r4
 80144b4:	f8cd a014 	str.w	sl, [sp, #20]
 80144b8:	462f      	mov	r7, r5
 80144ba:	9b05      	ldr	r3, [sp, #20]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d073      	beq.n	80145a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 80144c0:	9903      	ldr	r1, [sp, #12]
 80144c2:	4630      	mov	r0, r6
 80144c4:	f7ff fd8b 	bl	8013fde <_ZNK8touchgfx4Rect9intersectERKS0_>
 80144c8:	b350      	cbz	r0, 8014520 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 80144ca:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80144ce:	f9b6 c000 	ldrsh.w	ip, [r6]
 80144d2:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 80144d6:	45e6      	cmp	lr, ip
 80144d8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80144dc:	db33      	blt.n	8014546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 80144de:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80144e2:	88b3      	ldrh	r3, [r6, #4]
 80144e4:	4472      	add	r2, lr
 80144e6:	4463      	add	r3, ip
 80144e8:	b212      	sxth	r2, r2
 80144ea:	b21b      	sxth	r3, r3
 80144ec:	429a      	cmp	r2, r3
 80144ee:	dc2a      	bgt.n	8014546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 80144f0:	fa1f f289 	uxth.w	r2, r9
 80144f4:	88f3      	ldrh	r3, [r6, #6]
 80144f6:	45c8      	cmp	r8, r9
 80144f8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80144fc:	4413      	add	r3, r2
 80144fe:	fa1f fc88 	uxth.w	ip, r8
 8014502:	b29b      	uxth	r3, r3
 8014504:	fa0f fe83 	sxth.w	lr, r3
 8014508:	db0f      	blt.n	801452a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 801450a:	eba3 030c 	sub.w	r3, r3, ip
 801450e:	1ac9      	subs	r1, r1, r3
 8014510:	b209      	sxth	r1, r1
 8014512:	2900      	cmp	r1, #0
 8014514:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014518:	dd12      	ble.n	8014540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801451a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801451e:	4605      	mov	r5, r0
 8014520:	9b05      	ldr	r3, [sp, #20]
 8014522:	3e08      	subs	r6, #8
 8014524:	3b01      	subs	r3, #1
 8014526:	9305      	str	r3, [sp, #20]
 8014528:	e7c7      	b.n	80144ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 801452a:	4461      	add	r1, ip
 801452c:	b209      	sxth	r1, r1
 801452e:	4571      	cmp	r1, lr
 8014530:	dc38      	bgt.n	80145a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014532:	eba2 020c 	sub.w	r2, r2, ip
 8014536:	b212      	sxth	r2, r2
 8014538:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801453c:	2a00      	cmp	r2, #0
 801453e:	dcee      	bgt.n	801451e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8014540:	b00f      	add	sp, #60	@ 0x3c
 8014542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014546:	45c8      	cmp	r8, r9
 8014548:	db2c      	blt.n	80145a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 801454a:	88f3      	ldrh	r3, [r6, #6]
 801454c:	4499      	add	r9, r3
 801454e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8014552:	4498      	add	r8, r3
 8014554:	fa0f f989 	sxth.w	r9, r9
 8014558:	fa0f f888 	sxth.w	r8, r8
 801455c:	45c1      	cmp	r9, r8
 801455e:	db21      	blt.n	80145a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014560:	fa1f f28c 	uxth.w	r2, ip
 8014564:	88b3      	ldrh	r3, [r6, #4]
 8014566:	45e6      	cmp	lr, ip
 8014568:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801456c:	4413      	add	r3, r2
 801456e:	fa1f f88e 	uxth.w	r8, lr
 8014572:	b29b      	uxth	r3, r3
 8014574:	fa0f f983 	sxth.w	r9, r3
 8014578:	db0a      	blt.n	8014590 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 801457a:	eba3 0308 	sub.w	r3, r3, r8
 801457e:	1ac9      	subs	r1, r1, r3
 8014580:	b209      	sxth	r1, r1
 8014582:	2900      	cmp	r1, #0
 8014584:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8014588:	ddda      	ble.n	8014540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801458a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801458e:	e7c6      	b.n	801451e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8014590:	4441      	add	r1, r8
 8014592:	b209      	sxth	r1, r1
 8014594:	4549      	cmp	r1, r9
 8014596:	dc05      	bgt.n	80145a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014598:	eba2 0208 	sub.w	r2, r2, r8
 801459c:	b212      	sxth	r2, r2
 801459e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80145a2:	e7cb      	b.n	801453c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 80145a4:	4607      	mov	r7, r0
 80145a6:	e7bb      	b.n	8014520 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 80145a8:	2d00      	cmp	r5, #0
 80145aa:	d181      	bne.n	80144b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 80145ac:	2f00      	cmp	r7, #0
 80145ae:	f000 81df 	beq.w	8014970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80145b2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80145b6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 80145ba:	b2b3      	uxth	r3, r6
 80145bc:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 80145c0:	9305      	str	r3, [sp, #20]
 80145c2:	9a05      	ldr	r2, [sp, #20]
 80145c4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80145c8:	4413      	add	r3, r2
 80145ca:	b2ba      	uxth	r2, r7
 80145cc:	4492      	add	sl, r2
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	fa1f fa8a 	uxth.w	sl, sl
 80145d4:	fa0f f883 	sxth.w	r8, r3
 80145d8:	fa0f f98a 	sxth.w	r9, sl
 80145dc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80145e0:	9b04      	ldr	r3, [sp, #16]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d054      	beq.n	8014690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 80145e6:	9903      	ldr	r1, [sp, #12]
 80145e8:	4620      	mov	r0, r4
 80145ea:	f7ff fcf8 	bl	8013fde <_ZNK8touchgfx4Rect9intersectERKS0_>
 80145ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80145f2:	b1c0      	cbz	r0, 8014626 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80145f4:	f9b4 e000 	ldrsh.w	lr, [r4]
 80145f8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80145fc:	4576      	cmp	r6, lr
 80145fe:	dc22      	bgt.n	8014646 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8014600:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014604:	44f4      	add	ip, lr
 8014606:	fa0f fc8c 	sxth.w	ip, ip
 801460a:	45e0      	cmp	r8, ip
 801460c:	db1b      	blt.n	8014646 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 801460e:	428f      	cmp	r7, r1
 8014610:	fa1f fc81 	uxth.w	ip, r1
 8014614:	88e1      	ldrh	r1, [r4, #6]
 8014616:	dc0d      	bgt.n	8014634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8014618:	ebaa 0c0c 	sub.w	ip, sl, ip
 801461c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8014620:	eba1 010c 	sub.w	r1, r1, ip
 8014624:	80e1      	strh	r1, [r4, #6]
 8014626:	4628      	mov	r0, r5
 8014628:	9904      	ldr	r1, [sp, #16]
 801462a:	3c08      	subs	r4, #8
 801462c:	4605      	mov	r5, r0
 801462e:	3901      	subs	r1, #1
 8014630:	9104      	str	r1, [sp, #16]
 8014632:	e7d3      	b.n	80145dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 8014634:	4461      	add	r1, ip
 8014636:	b209      	sxth	r1, r1
 8014638:	4549      	cmp	r1, r9
 801463a:	dcf5      	bgt.n	8014628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801463c:	eba2 0c0c 	sub.w	ip, r2, ip
 8014640:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014644:	e7ef      	b.n	8014626 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014646:	428f      	cmp	r7, r1
 8014648:	dcee      	bgt.n	8014628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801464a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801464e:	4461      	add	r1, ip
 8014650:	b209      	sxth	r1, r1
 8014652:	4589      	cmp	r9, r1
 8014654:	dbe8      	blt.n	8014628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014656:	4576      	cmp	r6, lr
 8014658:	fa1f fc8e 	uxth.w	ip, lr
 801465c:	88a1      	ldrh	r1, [r4, #4]
 801465e:	dc07      	bgt.n	8014670 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8014660:	eba3 0c0c 	sub.w	ip, r3, ip
 8014664:	f8a4 8000 	strh.w	r8, [r4]
 8014668:	eba1 010c 	sub.w	r1, r1, ip
 801466c:	80a1      	strh	r1, [r4, #4]
 801466e:	e7da      	b.n	8014626 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014670:	4461      	add	r1, ip
 8014672:	b209      	sxth	r1, r1
 8014674:	4588      	cmp	r8, r1
 8014676:	dbd7      	blt.n	8014628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014678:	9905      	ldr	r1, [sp, #20]
 801467a:	eba1 0c0c 	sub.w	ip, r1, ip
 801467e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8014682:	e7d0      	b.n	8014626 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014684:	240252f2 	.word	0x240252f2
 8014688:	240252f0 	.word	0x240252f0
 801468c:	240252fc 	.word	0x240252fc
 8014690:	2d00      	cmp	r5, #0
 8014692:	f000 816d 	beq.w	8014970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014696:	9b06      	ldr	r3, [sp, #24]
 8014698:	445b      	add	r3, fp
 801469a:	461c      	mov	r4, r3
 801469c:	9b02      	ldr	r3, [sp, #8]
 801469e:	3301      	adds	r3, #1
 80146a0:	f000 8166 	beq.w	8014970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80146a4:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 80146a8:	9803      	ldr	r0, [sp, #12]
 80146aa:	4629      	mov	r1, r5
 80146ac:	f7ff fd0a 	bl	80140c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 80146b0:	b120      	cbz	r0, 80146bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 80146b2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80146b6:	9801      	ldr	r0, [sp, #4]
 80146b8:	f7ff fea8 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80146bc:	9903      	ldr	r1, [sp, #12]
 80146be:	4628      	mov	r0, r5
 80146c0:	f7ff fc8d 	bl	8013fde <_ZNK8touchgfx4Rect9intersectERKS0_>
 80146c4:	2800      	cmp	r0, #0
 80146c6:	f000 809c 	beq.w	8014802 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 80146ca:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 80146ce:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80146d2:	fa1f f189 	uxth.w	r1, r9
 80146d6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80146da:	9309      	str	r3, [sp, #36]	@ 0x24
 80146dc:	eb01 0c03 	add.w	ip, r1, r3
 80146e0:	b283      	uxth	r3, r0
 80146e2:	4548      	cmp	r0, r9
 80146e4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 80146e8:	fa1f fa8c 	uxth.w	sl, ip
 80146ec:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80146f0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 80146f4:	eb03 050c 	add.w	r5, r3, ip
 80146f8:	b2ad      	uxth	r5, r5
 80146fa:	9505      	str	r5, [sp, #20]
 80146fc:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8014700:	9504      	str	r5, [sp, #16]
 8014702:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8014706:	f340 8099 	ble.w	801483c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 801470a:	1a5b      	subs	r3, r3, r1
 801470c:	4596      	cmp	lr, r2
 801470e:	fa0f f08a 	sxth.w	r0, sl
 8014712:	b29b      	uxth	r3, r3
 8014714:	b21e      	sxth	r6, r3
 8014716:	dd2e      	ble.n	8014776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8014718:	9f02      	ldr	r7, [sp, #8]
 801471a:	fa1f fe8e 	uxth.w	lr, lr
 801471e:	b292      	uxth	r2, r2
 8014720:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8014724:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014728:	9f04      	ldr	r7, [sp, #16]
 801472a:	ebae 0102 	sub.w	r1, lr, r2
 801472e:	44a6      	add	lr, r4
 8014730:	1a3f      	subs	r7, r7, r0
 8014732:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8014736:	b289      	uxth	r1, r1
 8014738:	4402      	add	r2, r0
 801473a:	fa0f fe8e 	sxth.w	lr, lr
 801473e:	b20d      	sxth	r5, r1
 8014740:	b212      	sxth	r2, r2
 8014742:	436f      	muls	r7, r5
 8014744:	ebae 0202 	sub.w	r2, lr, r2
 8014748:	4372      	muls	r2, r6
 801474a:	4297      	cmp	r7, r2
 801474c:	db09      	blt.n	8014762 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 801474e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8014752:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8014756:	449c      	add	ip, r3
 8014758:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801475c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014760:	e684      	b.n	801446c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014762:	4421      	add	r1, r4
 8014764:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8014768:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801476c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014770:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014774:	e67a      	b.n	801446c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014776:	9f04      	ldr	r7, [sp, #16]
 8014778:	42b8      	cmp	r0, r7
 801477a:	da27      	bge.n	80147cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 801477c:	9902      	ldr	r1, [sp, #8]
 801477e:	1a3f      	subs	r7, r7, r0
 8014780:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8014784:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8014788:	eb05 010e 	add.w	r1, r5, lr
 801478c:	fa1f f881 	uxth.w	r8, r1
 8014790:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8014794:	4411      	add	r1, r2
 8014796:	fa0f f988 	sxth.w	r9, r8
 801479a:	eba2 020e 	sub.w	r2, r2, lr
 801479e:	eba1 0108 	sub.w	r1, r1, r8
 80147a2:	4372      	muls	r2, r6
 80147a4:	b289      	uxth	r1, r1
 80147a6:	fa0f f881 	sxth.w	r8, r1
 80147aa:	fb08 f707 	mul.w	r7, r8, r7
 80147ae:	42ba      	cmp	r2, r7
 80147b0:	dc06      	bgt.n	80147c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 80147b2:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 80147b6:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 80147ba:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 80147be:	e7ca      	b.n	8014756 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80147c0:	4429      	add	r1, r5
 80147c2:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 80147c6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80147ca:	e64f      	b.n	801446c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80147cc:	9805      	ldr	r0, [sp, #20]
 80147ce:	2d06      	cmp	r5, #6
 80147d0:	ebaa 0000 	sub.w	r0, sl, r0
 80147d4:	b280      	uxth	r0, r0
 80147d6:	fa0f fe80 	sxth.w	lr, r0
 80147da:	d817      	bhi.n	801480c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 80147dc:	9b04      	ldr	r3, [sp, #16]
 80147de:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 80147e2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80147e6:	1c6b      	adds	r3, r5, #1
 80147e8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 80147ec:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80147f0:	9b01      	ldr	r3, [sp, #4]
 80147f2:	9801      	ldr	r0, [sp, #4]
 80147f4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80147f8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80147fc:	805a      	strh	r2, [r3, #2]
 80147fe:	809e      	strh	r6, [r3, #4]
 8014800:	80d9      	strh	r1, [r3, #6]
 8014802:	9b02      	ldr	r3, [sp, #8]
 8014804:	3c08      	subs	r4, #8
 8014806:	3b01      	subs	r3, #1
 8014808:	9302      	str	r3, [sp, #8]
 801480a:	e747      	b.n	801469c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 801480c:	9a02      	ldr	r2, [sp, #8]
 801480e:	45b6      	cmp	lr, r6
 8014810:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014814:	db0d      	blt.n	8014832 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8014816:	449c      	add	ip, r3
 8014818:	445a      	add	r2, fp
 801481a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801481e:	fa1f fc8c 	uxth.w	ip, ip
 8014822:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8014826:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801482a:	448c      	add	ip, r1
 801482c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8014830:	e61c      	b.n	801446c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014832:	445a      	add	r2, fp
 8014834:	4484      	add	ip, r0
 8014836:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801483a:	e78f      	b.n	801475c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801483c:	fa1f f18e 	uxth.w	r1, lr
 8014840:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8014844:	b293      	uxth	r3, r2
 8014846:	4596      	cmp	lr, r2
 8014848:	eb01 0806 	add.w	r8, r1, r6
 801484c:	9306      	str	r3, [sp, #24]
 801484e:	fa1f f888 	uxth.w	r8, r8
 8014852:	9f06      	ldr	r7, [sp, #24]
 8014854:	fa0f f388 	sxth.w	r3, r8
 8014858:	9307      	str	r3, [sp, #28]
 801485a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801485e:	443b      	add	r3, r7
 8014860:	b29b      	uxth	r3, r3
 8014862:	9308      	str	r3, [sp, #32]
 8014864:	da24      	bge.n	80148b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8014866:	9905      	ldr	r1, [sp, #20]
 8014868:	eba3 0308 	sub.w	r3, r3, r8
 801486c:	eba2 020e 	sub.w	r2, r2, lr
 8014870:	eba9 0000 	sub.w	r0, r9, r0
 8014874:	ebaa 0401 	sub.w	r4, sl, r1
 8014878:	b29b      	uxth	r3, r3
 801487a:	b2a4      	uxth	r4, r4
 801487c:	b219      	sxth	r1, r3
 801487e:	b225      	sxth	r5, r4
 8014880:	4348      	muls	r0, r1
 8014882:	436a      	muls	r2, r5
 8014884:	4282      	cmp	r2, r0
 8014886:	9a02      	ldr	r2, [sp, #8]
 8014888:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801488c:	445a      	add	r2, fp
 801488e:	dc06      	bgt.n	801489e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8014890:	9b07      	ldr	r3, [sp, #28]
 8014892:	44a4      	add	ip, r4
 8014894:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8014898:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801489c:	e75e      	b.n	801475c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801489e:	9904      	ldr	r1, [sp, #16]
 80148a0:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 80148a4:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 80148a8:	4433      	add	r3, r6
 80148aa:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80148ae:	e5dd      	b.n	801446c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80148b0:	9f06      	ldr	r7, [sp, #24]
 80148b2:	9b04      	ldr	r3, [sp, #16]
 80148b4:	1bc9      	subs	r1, r1, r7
 80148b6:	fa0f f78a 	sxth.w	r7, sl
 80148ba:	b289      	uxth	r1, r1
 80148bc:	429f      	cmp	r7, r3
 80148be:	fa0f fe81 	sxth.w	lr, r1
 80148c2:	dd23      	ble.n	801490c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 80148c4:	9a05      	ldr	r2, [sp, #20]
 80148c6:	eba9 0000 	sub.w	r0, r9, r0
 80148ca:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80148ce:	ebaa 0202 	sub.w	r2, sl, r2
 80148d2:	9d07      	ldr	r5, [sp, #28]
 80148d4:	fb0e f000 	mul.w	r0, lr, r0
 80148d8:	b292      	uxth	r2, r2
 80148da:	eba5 0a03 	sub.w	sl, r5, r3
 80148de:	9b02      	ldr	r3, [sp, #8]
 80148e0:	b214      	sxth	r4, r2
 80148e2:	00db      	lsls	r3, r3, #3
 80148e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80148e8:	445b      	add	r3, fp
 80148ea:	4550      	cmp	r0, sl
 80148ec:	db03      	blt.n	80148f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 80148ee:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80148f2:	4494      	add	ip, r2
 80148f4:	e732      	b.n	801475c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80148f6:	9a04      	ldr	r2, [sp, #16]
 80148f8:	4431      	add	r1, r6
 80148fa:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 80148fe:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8014902:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8014906:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801490a:	e75c      	b.n	80147c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 801490c:	9b08      	ldr	r3, [sp, #32]
 801490e:	2d06      	cmp	r5, #6
 8014910:	eba3 0308 	sub.w	r3, r3, r8
 8014914:	b29b      	uxth	r3, r3
 8014916:	b218      	sxth	r0, r3
 8014918:	d813      	bhi.n	8014942 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 801491a:	9b07      	ldr	r3, [sp, #28]
 801491c:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8014920:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8014924:	1c6b      	adds	r3, r5, #1
 8014926:	9901      	ldr	r1, [sp, #4]
 8014928:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801492c:	9b01      	ldr	r3, [sp, #4]
 801492e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8014932:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014936:	805a      	strh	r2, [r3, #2]
 8014938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801493a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801493e:	809a      	strh	r2, [r3, #4]
 8014940:	e75f      	b.n	8014802 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8014942:	9c02      	ldr	r4, [sp, #8]
 8014944:	4570      	cmp	r0, lr
 8014946:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801494a:	db0d      	blt.n	8014968 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801494c:	4431      	add	r1, r6
 801494e:	9b06      	ldr	r3, [sp, #24]
 8014950:	445c      	add	r4, fp
 8014952:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8014956:	b289      	uxth	r1, r1
 8014958:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801495c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014960:	4419      	add	r1, r3
 8014962:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8014966:	e581      	b.n	801446c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014968:	445c      	add	r4, fp
 801496a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801496e:	e79b      	b.n	80148a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8014970:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014974:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8014978:	1e65      	subs	r5, r4, #1
 801497a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801497e:	b2ad      	uxth	r5, r5
 8014980:	42b5      	cmp	r5, r6
 8014982:	d044      	beq.n	8014a0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 8014984:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8014988:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801498c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8014990:	4282      	cmp	r2, r0
 8014992:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8014996:	d11f      	bne.n	80149d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8014998:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801499c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80149a0:	459c      	cmp	ip, r3
 80149a2:	d119      	bne.n	80149d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 80149a4:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80149a8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80149ac:	19d8      	adds	r0, r3, r7
 80149ae:	b200      	sxth	r0, r0
 80149b0:	4288      	cmp	r0, r1
 80149b2:	d109      	bne.n	80149c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80149b4:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80149b8:	4413      	add	r3, r2
 80149ba:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80149be:	4629      	mov	r1, r5
 80149c0:	9801      	ldr	r0, [sp, #4]
 80149c2:	f7ff fd23 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80149c6:	e003      	b.n	80149d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80149c8:	4411      	add	r1, r2
 80149ca:	b209      	sxth	r1, r1
 80149cc:	42b9      	cmp	r1, r7
 80149ce:	d0f3      	beq.n	80149b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80149d0:	3d01      	subs	r5, #1
 80149d2:	3c08      	subs	r4, #8
 80149d4:	b2ad      	uxth	r5, r5
 80149d6:	e7d3      	b.n	8014980 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80149d8:	42b9      	cmp	r1, r7
 80149da:	d1f9      	bne.n	80149d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80149dc:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80149e0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80149e4:	4299      	cmp	r1, r3
 80149e6:	d1f3      	bne.n	80149d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80149e8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80149ec:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80149f0:	181f      	adds	r7, r3, r0
 80149f2:	b23f      	sxth	r7, r7
 80149f4:	42ba      	cmp	r2, r7
 80149f6:	d105      	bne.n	8014a04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 80149f8:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80149fc:	440b      	add	r3, r1
 80149fe:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014a02:	e7dc      	b.n	80149be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8014a04:	440a      	add	r2, r1
 8014a06:	b212      	sxth	r2, r2
 8014a08:	4290      	cmp	r0, r2
 8014a0a:	d1e1      	bne.n	80149d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014a0c:	e7f6      	b.n	80149fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 8014a0e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8014a12:	2e07      	cmp	r6, #7
 8014a14:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8014a18:	d812      	bhi.n	8014a40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 8014a1a:	1c75      	adds	r5, r6, #1
 8014a1c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014a20:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8014a24:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8014a28:	9d01      	ldr	r5, [sp, #4]
 8014a2a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8014a2e:	442c      	add	r4, r5
 8014a30:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8014a34:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8014a38:	8061      	strh	r1, [r4, #2]
 8014a3a:	80a2      	strh	r2, [r4, #4]
 8014a3c:	80e3      	strh	r3, [r4, #6]
 8014a3e:	e57f      	b.n	8014540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014a40:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014a44:	3e01      	subs	r6, #1
 8014a46:	445c      	add	r4, fp
 8014a48:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8014a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8014a50:	2500      	movs	r5, #0
 8014a52:	9305      	str	r3, [sp, #20]
 8014a54:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014a58:	1e72      	subs	r2, r6, #1
 8014a5a:	9302      	str	r3, [sp, #8]
 8014a5c:	4691      	mov	r9, r2
 8014a5e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8014a62:	9304      	str	r3, [sp, #16]
 8014a64:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8014a68:	f1b9 3fff 	cmp.w	r9, #4294967295
 8014a6c:	6818      	ldr	r0, [r3, #0]
 8014a6e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014a72:	9207      	str	r2, [sp, #28]
 8014a74:	bf16      	itet	ne
 8014a76:	9905      	ldrne	r1, [sp, #20]
 8014a78:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8014a7c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8014a80:	9306      	str	r3, [sp, #24]
 8014a82:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8014a86:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8014a8a:	fb18 f801 	smulbb	r8, r8, r1
 8014a8e:	6859      	ldr	r1, [r3, #4]
 8014a90:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014a94:	4671      	mov	r1, lr
 8014a96:	a80c      	add	r0, sp, #48	@ 0x30
 8014a98:	f7ff fb3a 	bl	8014110 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014a9c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8014aa0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8014aa4:	f04f 0c08 	mov.w	ip, #8
 8014aa8:	9b04      	ldr	r3, [sp, #16]
 8014aaa:	9a02      	ldr	r2, [sp, #8]
 8014aac:	fb10 f001 	smulbb	r0, r0, r1
 8014ab0:	fb02 8803 	mla	r8, r2, r3, r8
 8014ab4:	eba0 0108 	sub.w	r1, r0, r8
 8014ab8:	fb90 f0fc 	sdiv	r0, r0, ip
 8014abc:	4288      	cmp	r0, r1
 8014abe:	dc20      	bgt.n	8014b02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8014ac0:	4551      	cmp	r1, sl
 8014ac2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014ac6:	da03      	bge.n	8014ad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 8014ac8:	b1d9      	cbz	r1, 8014b02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8014aca:	468a      	mov	sl, r1
 8014acc:	464f      	mov	r7, r9
 8014ace:	4635      	mov	r5, r6
 8014ad0:	f109 39ff 	add.w	r9, r9, #4294967295
 8014ad4:	f119 0f02 	cmn.w	r9, #2
 8014ad8:	d1c6      	bne.n	8014a68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8014ada:	4616      	mov	r6, r2
 8014adc:	3201      	adds	r2, #1
 8014ade:	f1a4 0408 	sub.w	r4, r4, #8
 8014ae2:	d1b7      	bne.n	8014a54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8014ae4:	9b01      	ldr	r3, [sp, #4]
 8014ae6:	b2ac      	uxth	r4, r5
 8014ae8:	00ed      	lsls	r5, r5, #3
 8014aea:	1958      	adds	r0, r3, r5
 8014aec:	1c7b      	adds	r3, r7, #1
 8014aee:	d10b      	bne.n	8014b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 8014af0:	4601      	mov	r1, r0
 8014af2:	9803      	ldr	r0, [sp, #12]
 8014af4:	f7ff fb0c 	bl	8014110 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014af8:	4621      	mov	r1, r4
 8014afa:	9801      	ldr	r0, [sp, #4]
 8014afc:	f7ff fc86 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014b00:	e4b4      	b.n	801446c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014b02:	464f      	mov	r7, r9
 8014b04:	4635      	mov	r5, r6
 8014b06:	e7ed      	b.n	8014ae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 8014b08:	9b01      	ldr	r3, [sp, #4]
 8014b0a:	00ff      	lsls	r7, r7, #3
 8014b0c:	445d      	add	r5, fp
 8014b0e:	19d9      	adds	r1, r3, r7
 8014b10:	445f      	add	r7, fp
 8014b12:	f7ff fafd 	bl	8014110 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014b16:	9b03      	ldr	r3, [sp, #12]
 8014b18:	cb03      	ldmia	r3!, {r0, r1}
 8014b1a:	9b03      	ldr	r3, [sp, #12]
 8014b1c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8014b20:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8014b24:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8014b28:	6869      	ldr	r1, [r5, #4]
 8014b2a:	c303      	stmia	r3!, {r0, r1}
 8014b2c:	e7e4      	b.n	8014af8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8014b2e:	bf00      	nop

08014b30 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8014b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b34:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8014b38:	b0a1      	sub	sp, #132	@ 0x84
 8014b3a:	4604      	mov	r4, r0
 8014b3c:	4630      	mov	r0, r6
 8014b3e:	f7f9 fce6 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014b42:	4605      	mov	r5, r0
 8014b44:	b948      	cbnz	r0, 8014b5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8014b46:	6823      	ldr	r3, [r4, #0]
 8014b48:	4620      	mov	r0, r4
 8014b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b4c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8014b50:	4798      	blx	r3
 8014b52:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8014b56:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8014b5a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d149      	bne.n	8014bf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 8014b62:	4bb2      	ldr	r3, [pc, #712]	@ (8014e2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 8014b6a:	1ebb      	subs	r3, r7, #2
 8014b6c:	425f      	negs	r7, r3
 8014b6e:	415f      	adcs	r7, r3
 8014b70:	4baf      	ldr	r3, [pc, #700]	@ (8014e30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d040      	beq.n	8014bfa <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8014b78:	4dae      	ldr	r5, [pc, #696]	@ (8014e34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f7f9 fcc7 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014b80:	4606      	mov	r6, r0
 8014b82:	2800      	cmp	r0, #0
 8014b84:	d139      	bne.n	8014bfa <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8014b86:	4628      	mov	r0, r5
 8014b88:	f7ff f956 	bl	8013e38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014b8c:	6823      	ldr	r3, [r4, #0]
 8014b8e:	6829      	ldr	r1, [r5, #0]
 8014b90:	4620      	mov	r0, r4
 8014b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b94:	686a      	ldr	r2, [r5, #4]
 8014b96:	4798      	blx	r3
 8014b98:	802e      	strh	r6, [r5, #0]
 8014b9a:	806e      	strh	r6, [r5, #2]
 8014b9c:	80ae      	strh	r6, [r5, #4]
 8014b9e:	80ee      	strh	r6, [r5, #6]
 8014ba0:	af0f      	add	r7, sp, #60	@ 0x3c
 8014ba2:	4ea5      	ldr	r6, [pc, #660]	@ (8014e38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 8014ba4:	4638      	mov	r0, r7
 8014ba6:	f7ff fbd5 	bl	8014354 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014baa:	8835      	ldrh	r5, [r6, #0]
 8014bac:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 8014bb0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014bb4:	462b      	mov	r3, r5
 8014bb6:	4563      	cmp	r3, ip
 8014bb8:	d224      	bcs.n	8014c04 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8014bba:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8014bbe:	2907      	cmp	r1, #7
 8014bc0:	d816      	bhi.n	8014bf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8014bc2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8014bc6:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8014bca:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8014bce:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 8014bd2:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8014bd6:	1c4a      	adds	r2, r1, #1
 8014bd8:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 8014bdc:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 8014be0:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 8014be4:	f8a2 a002 	strh.w	sl, [r2, #2]
 8014be8:	f8a2 8004 	strh.w	r8, [r2, #4]
 8014bec:	f8a2 e006 	strh.w	lr, [r2, #6]
 8014bf0:	3301      	adds	r3, #1
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	e7df      	b.n	8014bb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8014bf6:	2701      	movs	r7, #1
 8014bf8:	e7ba      	b.n	8014b70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 8014bfa:	2f00      	cmp	r7, #0
 8014bfc:	d1d0      	bne.n	8014ba0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 8014bfe:	b021      	add	sp, #132	@ 0x84
 8014c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c04:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8014c08:	42ab      	cmp	r3, r5
 8014c0a:	d90c      	bls.n	8014c26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 8014c0c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8014c10:	6822      	ldr	r2, [r4, #0]
 8014c12:	3501      	adds	r5, #1
 8014c14:	4620      	mov	r0, r4
 8014c16:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8014c18:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8014c1c:	b2ad      	uxth	r5, r5
 8014c1e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8014c22:	47b8      	blx	r7
 8014c24:	e7ee      	b.n	8014c04 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8014c26:	4d81      	ldr	r5, [pc, #516]	@ (8014e2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8014c28:	6828      	ldr	r0, [r5, #0]
 8014c2a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	f040 813d 	bne.w	8014eae <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8014c34:	4a81      	ldr	r2, [pc, #516]	@ (8014e3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8014c36:	8833      	ldrh	r3, [r6, #0]
 8014c38:	7812      	ldrb	r2, [r2, #0]
 8014c3a:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 8014c3e:	2a01      	cmp	r2, #1
 8014c40:	d014      	beq.n	8014c6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8014c42:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8014c46:	f04f 0900 	mov.w	r9, #0
 8014c4a:	32ae      	adds	r2, #174	@ 0xae
 8014c4c:	4283      	cmp	r3, r0
 8014c4e:	f102 0208 	add.w	r2, r2, #8
 8014c52:	f280 8083 	bge.w	8014d5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8014c56:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 8014c5a:	3301      	adds	r3, #1
 8014c5c:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 8014c60:	4439      	add	r1, r7
 8014c62:	b209      	sxth	r1, r1
 8014c64:	4589      	cmp	r9, r1
 8014c66:	bfb8      	it	lt
 8014c68:	4689      	movlt	r9, r1
 8014c6a:	e7ef      	b.n	8014c4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8014c6c:	4f74      	ldr	r7, [pc, #464]	@ (8014e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 8014c6e:	883a      	ldrh	r2, [r7, #0]
 8014c70:	4693      	mov	fp, r2
 8014c72:	4283      	cmp	r3, r0
 8014c74:	da08      	bge.n	8014c88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 8014c76:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 8014c80:	458b      	cmp	fp, r1
 8014c82:	bfa8      	it	ge
 8014c84:	468b      	movge	fp, r1
 8014c86:	e7f4      	b.n	8014c72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8014c88:	2a0f      	cmp	r2, #15
 8014c8a:	f04f 0300 	mov.w	r3, #0
 8014c8e:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8014e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 8014c92:	bf8c      	ite	hi
 8014c94:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 8014c98:	f04f 0801 	movls.w	r8, #1
 8014c9c:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8014ca0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014ca4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8014ca8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014cac:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8014cb0:	6828      	ldr	r0, [r5, #0]
 8014cb2:	455b      	cmp	r3, fp
 8014cb4:	f340 80c8 	ble.w	8014e48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8014cb8:	6803      	ldr	r3, [r0, #0]
 8014cba:	f8b7 a000 	ldrh.w	sl, [r7]
 8014cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014cc2:	4798      	blx	r3
 8014cc4:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8014cc8:	ebaa 0000 	sub.w	r0, sl, r0
 8014ccc:	682b      	ldr	r3, [r5, #0]
 8014cce:	ebac 0e08 	sub.w	lr, ip, r8
 8014cd2:	b280      	uxth	r0, r0
 8014cd4:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8014cd8:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8014cdc:	4570      	cmp	r0, lr
 8014cde:	dd05      	ble.n	8014cec <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8014ce0:	4558      	cmp	r0, fp
 8014ce2:	dd03      	ble.n	8014cec <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8014ce4:	b901      	cbnz	r1, 8014ce8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8014ce6:	b392      	cbz	r2, 8014d4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 8014ce8:	4658      	mov	r0, fp
 8014cea:	e006      	b.n	8014cfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 8014cec:	2900      	cmp	r1, #0
 8014cee:	d1fb      	bne.n	8014ce8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8014cf0:	2a00      	cmp	r2, #0
 8014cf2:	d1f9      	bne.n	8014ce8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8014cf4:	4558      	cmp	r0, fp
 8014cf6:	bfb8      	it	lt
 8014cf8:	4658      	movlt	r0, fp
 8014cfa:	f9b9 3000 	ldrsh.w	r3, [r9]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8014d04:	ebac 0000 	sub.w	r0, ip, r0
 8014d08:	f8b6 a000 	ldrh.w	sl, [r6]
 8014d0c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8014d10:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8014d14:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014d18:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014d1c:	4553      	cmp	r3, sl
 8014d1e:	ddc5      	ble.n	8014cac <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8014d20:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8014d24:	ab0d      	add	r3, sp, #52	@ 0x34
 8014d26:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8014d2a:	6851      	ldr	r1, [r2, #4]
 8014d2c:	c303      	stmia	r3!, {r0, r1}
 8014d2e:	a80d      	add	r0, sp, #52	@ 0x34
 8014d30:	a90b      	add	r1, sp, #44	@ 0x2c
 8014d32:	f7f9 fba9 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 8014d36:	a80d      	add	r0, sp, #52	@ 0x34
 8014d38:	f7f9 fbe9 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d3c:	b920      	cbnz	r0, 8014d48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 8014d3e:	6823      	ldr	r3, [r4, #0]
 8014d40:	a90d      	add	r1, sp, #52	@ 0x34
 8014d42:	4620      	mov	r0, r4
 8014d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014d46:	4798      	blx	r3
 8014d48:	f10a 0a01 	add.w	sl, sl, #1
 8014d4c:	e7e4      	b.n	8014d18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 8014d4e:	681a      	ldr	r2, [r3, #0]
 8014d50:	2101      	movs	r1, #1
 8014d52:	4618      	mov	r0, r3
 8014d54:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8014d58:	4790      	blx	r2
 8014d5a:	e7a7      	b.n	8014cac <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8014d5c:	4b39      	ldr	r3, [pc, #228]	@ (8014e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 8014d5e:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8014e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 8014d62:	881f      	ldrh	r7, [r3, #0]
 8014d64:	2300      	movs	r3, #0
 8014d66:	2f0f      	cmp	r7, #15
 8014d68:	bf8c      	ite	hi
 8014d6a:	08ff      	lsrhi	r7, r7, #3
 8014d6c:	2701      	movls	r7, #1
 8014d6e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8014d72:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8014d76:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8014d7a:	6828      	ldr	r0, [r5, #0]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	b21b      	sxth	r3, r3
 8014d80:	454b      	cmp	r3, r9
 8014d82:	da61      	bge.n	8014e48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8014d84:	6803      	ldr	r3, [r0, #0]
 8014d86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014d8a:	4798      	blx	r3
 8014d8c:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 8014d90:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8014d94:	682a      	ldr	r2, [r5, #0]
 8014d96:	4473      	add	r3, lr
 8014d98:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 8014d9c:	b21b      	sxth	r3, r3
 8014d9e:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 8014da2:	eb03 0e07 	add.w	lr, r3, r7
 8014da6:	4570      	cmp	r0, lr
 8014da8:	da0d      	bge.n	8014dc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8014daa:	4548      	cmp	r0, r9
 8014dac:	da0b      	bge.n	8014dc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8014dae:	f1bc 0f00 	cmp.w	ip, #0
 8014db2:	d138      	bne.n	8014e26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014db4:	2900      	cmp	r1, #0
 8014db6:	d136      	bne.n	8014e26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014db8:	6813      	ldr	r3, [r2, #0]
 8014dba:	2101      	movs	r1, #1
 8014dbc:	4610      	mov	r0, r2
 8014dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014dc2:	4798      	blx	r3
 8014dc4:	e7d5      	b.n	8014d72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8014dc6:	f1bc 0f00 	cmp.w	ip, #0
 8014dca:	d12c      	bne.n	8014e26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014dcc:	bb59      	cbnz	r1, 8014e26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014dce:	4548      	cmp	r0, r9
 8014dd0:	bfa8      	it	ge
 8014dd2:	4648      	movge	r0, r9
 8014dd4:	f9b8 2000 	ldrsh.w	r2, [r8]
 8014dd8:	2100      	movs	r1, #0
 8014dda:	1ac0      	subs	r0, r0, r3
 8014ddc:	f8b6 a000 	ldrh.w	sl, [r6]
 8014de0:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8014de4:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014de8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8014dec:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8014df0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014df4:	4553      	cmp	r3, sl
 8014df6:	ddbc      	ble.n	8014d72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8014df8:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8014dfc:	ab0d      	add	r3, sp, #52	@ 0x34
 8014dfe:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8014e02:	6851      	ldr	r1, [r2, #4]
 8014e04:	c303      	stmia	r3!, {r0, r1}
 8014e06:	a80d      	add	r0, sp, #52	@ 0x34
 8014e08:	a90b      	add	r1, sp, #44	@ 0x2c
 8014e0a:	f7f9 fb3d 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 8014e0e:	a80d      	add	r0, sp, #52	@ 0x34
 8014e10:	f7f9 fb7d 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014e14:	b920      	cbnz	r0, 8014e20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 8014e16:	6823      	ldr	r3, [r4, #0]
 8014e18:	a90d      	add	r1, sp, #52	@ 0x34
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e1e:	4798      	blx	r3
 8014e20:	f10a 0a01 	add.w	sl, sl, #1
 8014e24:	e7e4      	b.n	8014df0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 8014e26:	4648      	mov	r0, r9
 8014e28:	e7d4      	b.n	8014dd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 8014e2a:	bf00      	nop
 8014e2c:	240252fc 	.word	0x240252fc
 8014e30:	2402533c 	.word	0x2402533c
 8014e34:	24025348 	.word	0x24025348
 8014e38:	2400007c 	.word	0x2400007c
 8014e3c:	240252f4 	.word	0x240252f4
 8014e40:	240252f0 	.word	0x240252f0
 8014e44:	240252f2 	.word	0x240252f2
 8014e48:	6828      	ldr	r0, [r5, #0]
 8014e4a:	6803      	ldr	r3, [r0, #0]
 8014e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e4e:	4798      	blx	r3
 8014e50:	4ba4      	ldr	r3, [pc, #656]	@ (80150e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	f43f aed2 	beq.w	8014bfe <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 8014e60:	a80f      	add	r0, sp, #60	@ 0x3c
 8014e62:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 8014e66:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8014e6a:	4b9f      	ldr	r3, [pc, #636]	@ (80150e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8014e6c:	881b      	ldrh	r3, [r3, #0]
 8014e6e:	42b3      	cmp	r3, r6
 8014e70:	f4bf aec5 	bcs.w	8014bfe <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8014e74:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8014e78:	2907      	cmp	r1, #7
 8014e7a:	d815      	bhi.n	8014ea8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 8014e7c:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8014e80:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8014e84:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8014e88:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8014e8c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8014e90:	1c4a      	adds	r2, r1, #1
 8014e92:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8014e96:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 8014e9a:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 8014e9e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8014ea2:	f8a2 c004 	strh.w	ip, [r2, #4]
 8014ea6:	80d7      	strh	r7, [r2, #6]
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	e7df      	b.n	8014e6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 8014eae:	2b02      	cmp	r3, #2
 8014eb0:	f040 80ce 	bne.w	8015050 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8014eb4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014eb8:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 8014ebc:	9308      	str	r3, [sp, #32]
 8014ebe:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 8014ec2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014ec6:	9307      	str	r3, [sp, #28]
 8014ec8:	b2bf      	uxth	r7, r7
 8014eca:	6803      	ldr	r3, [r0, #0]
 8014ecc:	fa0f f887 	sxth.w	r8, r7
 8014ed0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014ed4:	4798      	blx	r3
 8014ed6:	4b85      	ldr	r3, [pc, #532]	@ (80150ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8014ed8:	4682      	mov	sl, r0
 8014eda:	2000      	movs	r0, #0
 8014edc:	881b      	ldrh	r3, [r3, #0]
 8014ede:	9302      	str	r3, [sp, #8]
 8014ee0:	4b83      	ldr	r3, [pc, #524]	@ (80150f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 8014ee2:	881e      	ldrh	r6, [r3, #0]
 8014ee4:	4b83      	ldr	r3, [pc, #524]	@ (80150f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	bf1e      	ittt	ne
 8014eec:	9b02      	ldrne	r3, [sp, #8]
 8014eee:	9602      	strne	r6, [sp, #8]
 8014ef0:	461e      	movne	r6, r3
 8014ef2:	f7ec fcfd 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014ef6:	fb96 fbfb 	sdiv	fp, r6, fp
 8014efa:	fb0b f808 	mul.w	r8, fp, r8
 8014efe:	45c2      	cmp	sl, r8
 8014f00:	da0c      	bge.n	8014f1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 8014f02:	6828      	ldr	r0, [r5, #0]
 8014f04:	210a      	movs	r1, #10
 8014f06:	6803      	ldr	r3, [r0, #0]
 8014f08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014f0c:	4798      	blx	r3
 8014f0e:	6828      	ldr	r0, [r5, #0]
 8014f10:	6803      	ldr	r3, [r0, #0]
 8014f12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014f16:	4798      	blx	r3
 8014f18:	4682      	mov	sl, r0
 8014f1a:	e7f0      	b.n	8014efe <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 8014f1c:	2000      	movs	r0, #0
 8014f1e:	f04f 0800 	mov.w	r8, #0
 8014f22:	f7ec fd15 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014f26:	fa1f f38b 	uxth.w	r3, fp
 8014f2a:	4645      	mov	r5, r8
 8014f2c:	fb17 f703 	smulbb	r7, r7, r3
 8014f30:	9304      	str	r3, [sp, #16]
 8014f32:	b2bb      	uxth	r3, r7
 8014f34:	4f70      	ldr	r7, [pc, #448]	@ (80150f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 8014f36:	9305      	str	r3, [sp, #20]
 8014f38:	0973      	lsrs	r3, r6, #5
 8014f3a:	9306      	str	r3, [sp, #24]
 8014f3c:	42b5      	cmp	r5, r6
 8014f3e:	d087      	beq.n	8014e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8014f40:	6838      	ldr	r0, [r7, #0]
 8014f42:	6803      	ldr	r3, [r0, #0]
 8014f44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014f48:	4798      	blx	r3
 8014f4a:	4582      	cmp	sl, r0
 8014f4c:	4681      	mov	r9, r0
 8014f4e:	d907      	bls.n	8014f60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 8014f50:	f1b8 0f00 	cmp.w	r8, #0
 8014f54:	d007      	beq.n	8014f66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 8014f56:	6838      	ldr	r0, [r7, #0]
 8014f58:	6803      	ldr	r3, [r0, #0]
 8014f5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014f5e:	e776      	b.n	8014e4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8014f60:	f1b8 0f00 	cmp.w	r8, #0
 8014f64:	d003      	beq.n	8014f6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 8014f66:	454d      	cmp	r5, r9
 8014f68:	d3f5      	bcc.n	8014f56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 8014f6a:	f04f 0801 	mov.w	r8, #1
 8014f6e:	9a04      	ldr	r2, [sp, #16]
 8014f70:	fb95 f3fb 	sdiv	r3, r5, fp
 8014f74:	9303      	str	r3, [sp, #12]
 8014f76:	3301      	adds	r3, #1
 8014f78:	fb13 f302 	smulbb	r3, r3, r2
 8014f7c:	b299      	uxth	r1, r3
 8014f7e:	f1b8 0f00 	cmp.w	r8, #0
 8014f82:	d04d      	beq.n	8015020 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 8014f84:	eb09 030b 	add.w	r3, r9, fp
 8014f88:	42b3      	cmp	r3, r6
 8014f8a:	bfa8      	it	ge
 8014f8c:	4633      	movge	r3, r6
 8014f8e:	b29b      	uxth	r3, r3
 8014f90:	9807      	ldr	r0, [sp, #28]
 8014f92:	428b      	cmp	r3, r1
 8014f94:	bf94      	ite	ls
 8014f96:	ebc5 0203 	rsbls	r2, r5, r3
 8014f9a:	ebc5 0201 	rsbhi	r2, r5, r1
 8014f9e:	4282      	cmp	r2, r0
 8014fa0:	bfa8      	it	ge
 8014fa2:	4602      	movge	r2, r0
 8014fa4:	9808      	ldr	r0, [sp, #32]
 8014fa6:	fa1f fa82 	uxth.w	sl, r2
 8014faa:	4582      	cmp	sl, r0
 8014fac:	d205      	bcs.n	8014fba <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8014fae:	fa15 f082 	uxtah	r0, r5, r2
 8014fb2:	4286      	cmp	r6, r0
 8014fb4:	d001      	beq.n	8014fba <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8014fb6:	4299      	cmp	r1, r3
 8014fb8:	d23f      	bcs.n	801503a <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 8014fba:	2001      	movs	r0, #1
 8014fbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8014fbe:	f7ec fc97 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014fc2:	6838      	ldr	r0, [r7, #0]
 8014fc4:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8014fc8:	6803      	ldr	r3, [r0, #0]
 8014fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014fce:	4798      	blx	r3
 8014fd0:	4b48      	ldr	r3, [pc, #288]	@ (80150f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8014fd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8014fdc:	b212      	sxth	r2, r2
 8014fde:	2b01      	cmp	r3, #1
 8014fe0:	d122      	bne.n	8015028 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 8014fe2:	1b73      	subs	r3, r6, r5
 8014fe4:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 8014fe8:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8014fec:	eba3 030a 	sub.w	r3, r3, sl
 8014ff0:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 8014ff4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8014ff8:	6823      	ldr	r3, [r4, #0]
 8014ffa:	a90d      	add	r1, sp, #52	@ 0x34
 8014ffc:	4620      	mov	r0, r4
 8014ffe:	4455      	add	r5, sl
 8015000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015002:	4798      	blx	r3
 8015004:	6838      	ldr	r0, [r7, #0]
 8015006:	9b03      	ldr	r3, [sp, #12]
 8015008:	b2ad      	uxth	r5, r5
 801500a:	4259      	negs	r1, r3
 801500c:	6803      	ldr	r3, [r0, #0]
 801500e:	b209      	sxth	r1, r1
 8015010:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015014:	4798      	blx	r3
 8015016:	2001      	movs	r0, #1
 8015018:	f7ec fc9a 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801501c:	46ca      	mov	sl, r9
 801501e:	e78d      	b.n	8014f3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 8015020:	9b05      	ldr	r3, [sp, #20]
 8015022:	eba9 0303 	sub.w	r3, r9, r3
 8015026:	e7b2      	b.n	8014f8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8015028:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 801502c:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 8015030:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8015034:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 8015038:	e7de      	b.n	8014ff8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 801503a:	6838      	ldr	r0, [r7, #0]
 801503c:	6803      	ldr	r3, [r0, #0]
 801503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015040:	4798      	blx	r3
 8015042:	6838      	ldr	r0, [r7, #0]
 8015044:	9906      	ldr	r1, [sp, #24]
 8015046:	6803      	ldr	r3, [r0, #0]
 8015048:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801504c:	4798      	blx	r3
 801504e:	e7e5      	b.n	801501c <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 8015050:	2b03      	cmp	r3, #3
 8015052:	f040 8133 	bne.w	80152bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 8015056:	4b27      	ldr	r3, [pc, #156]	@ (80150f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8015058:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801505c:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	2b01      	cmp	r3, #1
 8015064:	f000 8095 	beq.w	8015192 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8015068:	8832      	ldrh	r2, [r6, #0]
 801506a:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801506e:	3201      	adds	r2, #1
 8015070:	b292      	uxth	r2, r2
 8015072:	2900      	cmp	r1, #0
 8015074:	f43f aeec 	beq.w	8014e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8015078:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 801507c:	4694      	mov	ip, r2
 801507e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 8015082:	f04f 0800 	mov.w	r8, #0
 8015086:	441d      	add	r5, r3
 8015088:	b22d      	sxth	r5, r5
 801508a:	fa1f f38c 	uxth.w	r3, ip
 801508e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8015092:	4299      	cmp	r1, r3
 8015094:	f240 80bc 	bls.w	8015210 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 8015098:	4427      	add	r7, r4
 801509a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801509e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80150a2:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80150a6:	4283      	cmp	r3, r0
 80150a8:	f340 809e 	ble.w	80151e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 80150ac:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 80150b0:	46e0      	mov	r8, ip
 80150b2:	4405      	add	r5, r0
 80150b4:	b22d      	sxth	r5, r5
 80150b6:	429d      	cmp	r5, r3
 80150b8:	bfa8      	it	ge
 80150ba:	461d      	movge	r5, r3
 80150bc:	f10c 0c01 	add.w	ip, ip, #1
 80150c0:	e7e3      	b.n	801508a <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 80150c2:	d10a      	bne.n	80150da <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 80150c4:	4562      	cmp	r2, ip
 80150c6:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 80150ca:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80150ce:	bfb8      	it	lt
 80150d0:	4662      	movlt	r2, ip
 80150d2:	4288      	cmp	r0, r1
 80150d4:	bfb8      	it	lt
 80150d6:	4698      	movlt	r8, r3
 80150d8:	e084      	b.n	80151e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 80150da:	428a      	cmp	r2, r1
 80150dc:	bfb8      	it	lt
 80150de:	460a      	movlt	r2, r1
 80150e0:	e080      	b.n	80151e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 80150e2:	bf00      	nop
 80150e4:	240252fa 	.word	0x240252fa
 80150e8:	2400007c 	.word	0x2400007c
 80150ec:	240252f2 	.word	0x240252f2
 80150f0:	240252f0 	.word	0x240252f0
 80150f4:	240252f4 	.word	0x240252f4
 80150f8:	240252fc 	.word	0x240252fc
 80150fc:	19e1      	adds	r1, r4, r7
 80150fe:	ab0d      	add	r3, sp, #52	@ 0x34
 8015100:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8015104:	6849      	ldr	r1, [r1, #4]
 8015106:	c303      	stmia	r3!, {r0, r1}
 8015108:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 801510c:	a80d      	add	r0, sp, #52	@ 0x34
 801510e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015112:	454b      	cmp	r3, r9
 8015114:	440b      	add	r3, r1
 8015116:	bfb8      	it	lt
 8015118:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 801511c:	1a9b      	subs	r3, r3, r2
 801511e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015122:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8015126:	f7fe fea1 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801512a:	a80d      	add	r0, sp, #52	@ 0x34
 801512c:	f7f9 f9ef 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015130:	bb78      	cbnz	r0, 8015192 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8015132:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 8015136:	4427      	add	r7, r4
 8015138:	6828      	ldr	r0, [r5, #0]
 801513a:	45cc      	cmp	ip, r9
 801513c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015140:	f8d0 e000 	ldr.w	lr, [r0]
 8015144:	bfd8      	it	le
 8015146:	fa1f fc8c 	uxthle.w	ip, ip
 801514a:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801514e:	bfc8      	it	gt
 8015150:	fa1f fc89 	uxthgt.w	ip, r9
 8015154:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015158:	f8cd c000 	str.w	ip, [sp]
 801515c:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 8015160:	47d8      	blx	fp
 8015162:	4683      	mov	fp, r0
 8015164:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8015168:	a80d      	add	r0, sp, #52	@ 0x34
 801516a:	f7fe fe65 	bl	8013e38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801516e:	6823      	ldr	r3, [r4, #0]
 8015170:	4620      	mov	r0, r4
 8015172:	a90d      	add	r1, sp, #52	@ 0x34
 8015174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015176:	4798      	blx	r3
 8015178:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 801517c:	eba0 000b 	sub.w	r0, r0, fp
 8015180:	b200      	sxth	r0, r0
 8015182:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 8015186:	b920      	cbnz	r0, 8015192 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8015188:	fa1f f188 	uxth.w	r1, r8
 801518c:	4650      	mov	r0, sl
 801518e:	f7ff f93d 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015192:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8015196:	f1bb 0f00 	cmp.w	fp, #0
 801519a:	f43f ae59 	beq.w	8014e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801519e:	8833      	ldrh	r3, [r6, #0]
 80151a0:	f04f 0800 	mov.w	r8, #0
 80151a4:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80151a8:	3301      	adds	r3, #1
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	b299      	uxth	r1, r3
 80151ae:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80151b2:	458b      	cmp	fp, r1
 80151b4:	d9a2      	bls.n	80150fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 80151b6:	4427      	add	r7, r4
 80151b8:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80151bc:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 80151c0:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 80151c4:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80151c8:	4408      	add	r0, r1
 80151ca:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80151ce:	4461      	add	r1, ip
 80151d0:	b200      	sxth	r0, r0
 80151d2:	b209      	sxth	r1, r1
 80151d4:	4288      	cmp	r0, r1
 80151d6:	f6bf af74 	bge.w	80150c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 80151da:	4584      	cmp	ip, r0
 80151dc:	4662      	mov	r2, ip
 80151de:	4698      	mov	r8, r3
 80151e0:	bfb8      	it	lt
 80151e2:	4602      	movlt	r2, r0
 80151e4:	3301      	adds	r3, #1
 80151e6:	e7e1      	b.n	80151ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 80151e8:	d10e      	bne.n	8015208 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 80151ea:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80151ee:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80151f2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80151f6:	4473      	add	r3, lr
 80151f8:	b21b      	sxth	r3, r3
 80151fa:	429d      	cmp	r5, r3
 80151fc:	bfa8      	it	ge
 80151fe:	461d      	movge	r5, r3
 8015200:	4287      	cmp	r7, r0
 8015202:	bfb8      	it	lt
 8015204:	46e0      	movlt	r8, ip
 8015206:	e759      	b.n	80150bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8015208:	4285      	cmp	r5, r0
 801520a:	bfa8      	it	ge
 801520c:	4605      	movge	r5, r0
 801520e:	e755      	b.n	80150bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8015210:	eb0a 0007 	add.w	r0, sl, r7
 8015214:	4427      	add	r7, r4
 8015216:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801521a:	45cb      	cmp	fp, r9
 801521c:	bfbc      	itt	lt
 801521e:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 8015222:	445d      	addlt	r5, fp
 8015224:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015228:	bfb8      	it	lt
 801522a:	b22d      	sxthlt	r5, r5
 801522c:	f7f9 f96f 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015230:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015234:	2800      	cmp	r0, #0
 8015236:	f47f af1c 	bne.w	8015072 <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 801523a:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801523e:	fa1f fb8b 	uxth.w	fp, fp
 8015242:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8015246:	1aad      	subs	r5, r5, r2
 8015248:	4829      	ldr	r0, [pc, #164]	@ (80152f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 801524a:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801524e:	454d      	cmp	r5, r9
 8015250:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8015254:	6800      	ldr	r0, [r0, #0]
 8015256:	bfa8      	it	ge
 8015258:	464d      	movge	r5, r9
 801525a:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 801525e:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8015262:	b289      	uxth	r1, r1
 8015264:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8015268:	b2ad      	uxth	r5, r5
 801526a:	f8d0 c000 	ldr.w	ip, [r0]
 801526e:	b292      	uxth	r2, r2
 8015270:	455d      	cmp	r5, fp
 8015272:	bf94      	ite	ls
 8015274:	9500      	strls	r5, [sp, #0]
 8015276:	f8cd b000 	strhi.w	fp, [sp]
 801527a:	b29b      	uxth	r3, r3
 801527c:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 8015280:	47a8      	blx	r5
 8015282:	6823      	ldr	r3, [r4, #0]
 8015284:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8015288:	a90d      	add	r1, sp, #52	@ 0x34
 801528a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801528c:	4620      	mov	r0, r4
 801528e:	4798      	blx	r3
 8015290:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 8015294:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8015298:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801529c:	1a5b      	subs	r3, r3, r1
 801529e:	440a      	add	r2, r1
 80152a0:	b21b      	sxth	r3, r3
 80152a2:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80152a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	f47f aedc 	bne.w	8015068 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 80152b0:	fa1f f188 	uxth.w	r1, r8
 80152b4:	4650      	mov	r0, sl
 80152b6:	f7ff f8a9 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80152ba:	e6d5      	b.n	8015068 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 80152bc:	8835      	ldrh	r5, [r6, #0]
 80152be:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80152c2:	42ab      	cmp	r3, r5
 80152c4:	f67f adc4 	bls.w	8014e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80152c8:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80152cc:	ab0d      	add	r3, sp, #52	@ 0x34
 80152ce:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80152d2:	6851      	ldr	r1, [r2, #4]
 80152d4:	c303      	stmia	r3!, {r0, r1}
 80152d6:	a80d      	add	r0, sp, #52	@ 0x34
 80152d8:	f7f9 f919 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 80152dc:	b920      	cbnz	r0, 80152e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 80152de:	6823      	ldr	r3, [r4, #0]
 80152e0:	a90d      	add	r1, sp, #52	@ 0x34
 80152e2:	4620      	mov	r0, r4
 80152e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80152e6:	4798      	blx	r3
 80152e8:	3501      	adds	r5, #1
 80152ea:	b2ad      	uxth	r5, r5
 80152ec:	e7e7      	b.n	80152be <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 80152ee:	bf00      	nop
 80152f0:	240252fc 	.word	0x240252fc

080152f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80152f4:	4b03      	ldr	r3, [pc, #12]	@ (8015304 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80152f6:	2200      	movs	r2, #0
 80152f8:	801a      	strh	r2, [r3, #0]
 80152fa:	805a      	strh	r2, [r3, #2]
 80152fc:	809a      	strh	r2, [r3, #4]
 80152fe:	80da      	strh	r2, [r3, #6]
 8015300:	4770      	bx	lr
 8015302:	bf00      	nop
 8015304:	24025348 	.word	0x24025348

08015308 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801530c:	b09d      	sub	sp, #116	@ 0x74
 801530e:	4606      	mov	r6, r0
 8015310:	4614      	mov	r4, r2
 8015312:	468a      	mov	sl, r1
 8015314:	a803      	add	r0, sp, #12
 8015316:	461d      	mov	r5, r3
 8015318:	f001 fa25 	bl	8016766 <_ZN8touchgfx12TextProviderC1Ev>
 801531c:	6833      	ldr	r3, [r6, #0]
 801531e:	4630      	mov	r0, r6
 8015320:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8015324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015326:	4798      	blx	r3
 8015328:	6833      	ldr	r3, [r6, #0]
 801532a:	4607      	mov	r7, r0
 801532c:	4630      	mov	r0, r6
 801532e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015330:	4798      	blx	r3
 8015332:	462a      	mov	r2, r5
 8015334:	2500      	movs	r5, #0
 8015336:	4621      	mov	r1, r4
 8015338:	9000      	str	r0, [sp, #0]
 801533a:	463b      	mov	r3, r7
 801533c:	462c      	mov	r4, r5
 801533e:	46a9      	mov	r9, r5
 8015340:	46a8      	mov	r8, r5
 8015342:	a803      	add	r0, sp, #12
 8015344:	f001 fa62 	bl	801680c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015348:	2300      	movs	r3, #0
 801534a:	9302      	str	r3, [sp, #8]
 801534c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015350:	429c      	cmp	r4, r3
 8015352:	d002      	beq.n	801535a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8015354:	455c      	cmp	r4, fp
 8015356:	bf18      	it	ne
 8015358:	4625      	movne	r5, r4
 801535a:	ab02      	add	r3, sp, #8
 801535c:	4632      	mov	r2, r6
 801535e:	4651      	mov	r1, sl
 8015360:	a803      	add	r0, sp, #12
 8015362:	f001 fd75 	bl	8016e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015366:	4604      	mov	r4, r0
 8015368:	b108      	cbz	r0, 801536e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801536a:	280a      	cmp	r0, #10
 801536c:	d10a      	bne.n	8015384 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801536e:	45c1      	cmp	r9, r8
 8015370:	bf38      	it	cc
 8015372:	46c1      	movcc	r9, r8
 8015374:	f04f 0800 	mov.w	r8, #0
 8015378:	2c00      	cmp	r4, #0
 801537a:	d1e5      	bne.n	8015348 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801537c:	4648      	mov	r0, r9
 801537e:	b01d      	add	sp, #116	@ 0x74
 8015380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015384:	9a02      	ldr	r2, [sp, #8]
 8015386:	2a00      	cmp	r2, #0
 8015388:	d0de      	beq.n	8015348 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801538a:	7b57      	ldrb	r7, [r2, #13]
 801538c:	4629      	mov	r1, r5
 801538e:	6833      	ldr	r3, [r6, #0]
 8015390:	007f      	lsls	r7, r7, #1
 8015392:	8894      	ldrh	r4, [r2, #4]
 8015394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015396:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801539a:	7a97      	ldrb	r7, [r2, #10]
 801539c:	4307      	orrs	r7, r0
 801539e:	4630      	mov	r0, r6
 80153a0:	4798      	blx	r3
 80153a2:	4438      	add	r0, r7
 80153a4:	4480      	add	r8, r0
 80153a6:	fa1f f888 	uxth.w	r8, r8
 80153aa:	e7e5      	b.n	8015378 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080153ac <_ZNK8touchgfx4Font12getCharWidthEt>:
 80153ac:	b508      	push	{r3, lr}
 80153ae:	6803      	ldr	r3, [r0, #0]
 80153b0:	68db      	ldr	r3, [r3, #12]
 80153b2:	4798      	blx	r3
 80153b4:	b128      	cbz	r0, 80153c2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80153b6:	7b43      	ldrb	r3, [r0, #13]
 80153b8:	7a80      	ldrb	r0, [r0, #10]
 80153ba:	005b      	lsls	r3, r3, #1
 80153bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80153c0:	4318      	orrs	r0, r3
 80153c2:	bd08      	pop	{r3, pc}

080153c4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80153c4:	b40e      	push	{r1, r2, r3}
 80153c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153c8:	b09e      	sub	sp, #120	@ 0x78
 80153ca:	4605      	mov	r5, r0
 80153cc:	ab23      	add	r3, sp, #140	@ 0x8c
 80153ce:	a805      	add	r0, sp, #20
 80153d0:	f853 4b04 	ldr.w	r4, [r3], #4
 80153d4:	9303      	str	r3, [sp, #12]
 80153d6:	f001 f9c6 	bl	8016766 <_ZN8touchgfx12TextProviderC1Ev>
 80153da:	682b      	ldr	r3, [r5, #0]
 80153dc:	4628      	mov	r0, r5
 80153de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80153e0:	4798      	blx	r3
 80153e2:	682b      	ldr	r3, [r5, #0]
 80153e4:	4606      	mov	r6, r0
 80153e6:	4628      	mov	r0, r5
 80153e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80153ea:	4798      	blx	r3
 80153ec:	4633      	mov	r3, r6
 80153ee:	4621      	mov	r1, r4
 80153f0:	ae1e      	add	r6, sp, #120	@ 0x78
 80153f2:	2400      	movs	r4, #0
 80153f4:	9000      	str	r0, [sp, #0]
 80153f6:	9a03      	ldr	r2, [sp, #12]
 80153f8:	a805      	add	r0, sp, #20
 80153fa:	f001 fa07 	bl	801680c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80153fe:	f846 4d68 	str.w	r4, [r6, #-104]!
 8015402:	462a      	mov	r2, r5
 8015404:	4633      	mov	r3, r6
 8015406:	4621      	mov	r1, r4
 8015408:	a805      	add	r0, sp, #20
 801540a:	f001 fd21 	bl	8016e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801540e:	b300      	cbz	r0, 8015452 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8015410:	280a      	cmp	r0, #10
 8015412:	d01a      	beq.n	801544a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015414:	9f04      	ldr	r7, [sp, #16]
 8015416:	b1c7      	cbz	r7, 801544a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015418:	7b78      	ldrb	r0, [r7, #13]
 801541a:	7a3b      	ldrb	r3, [r7, #8]
 801541c:	00c1      	lsls	r1, r0, #3
 801541e:	88ea      	ldrh	r2, [r5, #6]
 8015420:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8015424:	4319      	orrs	r1, r3
 8015426:	0643      	lsls	r3, r0, #25
 8015428:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801542c:	bf48      	it	mi
 801542e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8015432:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8015436:	bf48      	it	mi
 8015438:	b219      	sxthmi	r1, r3
 801543a:	79fb      	ldrb	r3, [r7, #7]
 801543c:	4303      	orrs	r3, r0
 801543e:	4413      	add	r3, r2
 8015440:	1a5b      	subs	r3, r3, r1
 8015442:	b21b      	sxth	r3, r3
 8015444:	429c      	cmp	r4, r3
 8015446:	bfb8      	it	lt
 8015448:	461c      	movlt	r4, r3
 801544a:	4633      	mov	r3, r6
 801544c:	462a      	mov	r2, r5
 801544e:	2100      	movs	r1, #0
 8015450:	e7da      	b.n	8015408 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8015452:	b2a0      	uxth	r0, r4
 8015454:	b01e      	add	sp, #120	@ 0x78
 8015456:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801545a:	b003      	add	sp, #12
 801545c:	4770      	bx	lr

0801545e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801545e:	7a43      	ldrb	r3, [r0, #9]
 8015460:	8880      	ldrh	r0, [r0, #4]
 8015462:	4418      	add	r0, r3
 8015464:	b280      	uxth	r0, r0
 8015466:	4770      	bx	lr

08015468 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8015468:	6803      	ldr	r3, [r0, #0]
 801546a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801546c:	4718      	bx	r3

0801546e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801546e:	b40e      	push	{r1, r2, r3}
 8015470:	b570      	push	{r4, r5, r6, lr}
 8015472:	b09d      	sub	sp, #116	@ 0x74
 8015474:	4604      	mov	r4, r0
 8015476:	ab21      	add	r3, sp, #132	@ 0x84
 8015478:	a803      	add	r0, sp, #12
 801547a:	f853 5b04 	ldr.w	r5, [r3], #4
 801547e:	9302      	str	r3, [sp, #8]
 8015480:	f001 f971 	bl	8016766 <_ZN8touchgfx12TextProviderC1Ev>
 8015484:	6823      	ldr	r3, [r4, #0]
 8015486:	4620      	mov	r0, r4
 8015488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801548a:	4798      	blx	r3
 801548c:	6823      	ldr	r3, [r4, #0]
 801548e:	4606      	mov	r6, r0
 8015490:	4620      	mov	r0, r4
 8015492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015494:	2401      	movs	r4, #1
 8015496:	4798      	blx	r3
 8015498:	4633      	mov	r3, r6
 801549a:	9000      	str	r0, [sp, #0]
 801549c:	4629      	mov	r1, r5
 801549e:	9a02      	ldr	r2, [sp, #8]
 80154a0:	a803      	add	r0, sp, #12
 80154a2:	f001 f9b3 	bl	801680c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80154a6:	a803      	add	r0, sp, #12
 80154a8:	f001 fd9e 	bl	8016fe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80154ac:	b2a3      	uxth	r3, r4
 80154ae:	b138      	cbz	r0, 80154c0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80154b0:	280a      	cmp	r0, #10
 80154b2:	a803      	add	r0, sp, #12
 80154b4:	bf04      	itt	eq
 80154b6:	3301      	addeq	r3, #1
 80154b8:	b21c      	sxtheq	r4, r3
 80154ba:	f001 fd95 	bl	8016fe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80154be:	e7f5      	b.n	80154ac <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80154c0:	4618      	mov	r0, r3
 80154c2:	b01d      	add	sp, #116	@ 0x74
 80154c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154c8:	b003      	add	sp, #12
 80154ca:	4770      	bx	lr

080154cc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80154cc:	b40e      	push	{r1, r2, r3}
 80154ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154d0:	b09e      	sub	sp, #120	@ 0x78
 80154d2:	4604      	mov	r4, r0
 80154d4:	ab23      	add	r3, sp, #140	@ 0x8c
 80154d6:	a805      	add	r0, sp, #20
 80154d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80154dc:	9303      	str	r3, [sp, #12]
 80154de:	f001 f942 	bl	8016766 <_ZN8touchgfx12TextProviderC1Ev>
 80154e2:	6823      	ldr	r3, [r4, #0]
 80154e4:	4620      	mov	r0, r4
 80154e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154e8:	4798      	blx	r3
 80154ea:	6823      	ldr	r3, [r4, #0]
 80154ec:	4606      	mov	r6, r0
 80154ee:	4620      	mov	r0, r4
 80154f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80154f2:	4798      	blx	r3
 80154f4:	4633      	mov	r3, r6
 80154f6:	4629      	mov	r1, r5
 80154f8:	9000      	str	r0, [sp, #0]
 80154fa:	9a03      	ldr	r2, [sp, #12]
 80154fc:	a805      	add	r0, sp, #20
 80154fe:	f001 f985 	bl	801680c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015502:	ad1e      	add	r5, sp, #120	@ 0x78
 8015504:	2100      	movs	r1, #0
 8015506:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801550a:	4622      	mov	r2, r4
 801550c:	a805      	add	r0, sp, #20
 801550e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8015512:	462b      	mov	r3, r5
 8015514:	f001 fc9c 	bl	8016e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015518:	b1d8      	cbz	r0, 8015552 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801551a:	280a      	cmp	r0, #10
 801551c:	d012      	beq.n	8015544 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801551e:	9804      	ldr	r0, [sp, #16]
 8015520:	b180      	cbz	r0, 8015544 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8015522:	7b47      	ldrb	r7, [r0, #13]
 8015524:	88e2      	ldrh	r2, [r4, #6]
 8015526:	00fb      	lsls	r3, r7, #3
 8015528:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801552c:	7a03      	ldrb	r3, [r0, #8]
 801552e:	430b      	orrs	r3, r1
 8015530:	0679      	lsls	r1, r7, #25
 8015532:	bf44      	itt	mi
 8015534:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015538:	b21b      	sxthmi	r3, r3
 801553a:	1ad3      	subs	r3, r2, r3
 801553c:	b21b      	sxth	r3, r3
 801553e:	429e      	cmp	r6, r3
 8015540:	bfa8      	it	ge
 8015542:	461e      	movge	r6, r3
 8015544:	462b      	mov	r3, r5
 8015546:	4622      	mov	r2, r4
 8015548:	2100      	movs	r1, #0
 801554a:	a805      	add	r0, sp, #20
 801554c:	f001 fc80 	bl	8016e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015550:	e7e2      	b.n	8015518 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8015552:	4630      	mov	r0, r6
 8015554:	b01e      	add	sp, #120	@ 0x78
 8015556:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801555a:	b003      	add	sp, #12
 801555c:	4770      	bx	lr

0801555e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801555e:	b513      	push	{r0, r1, r4, lr}
 8015560:	6803      	ldr	r3, [r0, #0]
 8015562:	2400      	movs	r4, #0
 8015564:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015568:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801556c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015570:	4669      	mov	r1, sp
 8015572:	691b      	ldr	r3, [r3, #16]
 8015574:	9400      	str	r4, [sp, #0]
 8015576:	f8ad 2006 	strh.w	r2, [sp, #6]
 801557a:	4798      	blx	r3
 801557c:	b002      	add	sp, #8
 801557e:	bd10      	pop	{r4, pc}

08015580 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015580:	b538      	push	{r3, r4, r5, lr}
 8015582:	680b      	ldr	r3, [r1, #0]
 8015584:	460c      	mov	r4, r1
 8015586:	4605      	mov	r5, r0
 8015588:	68db      	ldr	r3, [r3, #12]
 801558a:	4798      	blx	r3
 801558c:	6823      	ldr	r3, [r4, #0]
 801558e:	4620      	mov	r0, r4
 8015590:	4629      	mov	r1, r5
 8015592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015594:	4798      	blx	r3
 8015596:	4628      	mov	r0, r5
 8015598:	bd38      	pop	{r3, r4, r5, pc}

0801559a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801559a:	b410      	push	{r4}
 801559c:	880a      	ldrh	r2, [r1, #0]
 801559e:	8884      	ldrh	r4, [r0, #4]
 80155a0:	4422      	add	r2, r4
 80155a2:	800a      	strh	r2, [r1, #0]
 80155a4:	884a      	ldrh	r2, [r1, #2]
 80155a6:	88c4      	ldrh	r4, [r0, #6]
 80155a8:	4422      	add	r2, r4
 80155aa:	804a      	strh	r2, [r1, #2]
 80155ac:	6940      	ldr	r0, [r0, #20]
 80155ae:	b120      	cbz	r0, 80155ba <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80155b0:	6803      	ldr	r3, [r0, #0]
 80155b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155b8:	4718      	bx	r3
 80155ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155be:	4770      	bx	lr

080155c0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80155c0:	b570      	push	{r4, r5, r6, lr}
 80155c2:	8882      	ldrh	r2, [r0, #4]
 80155c4:	460c      	mov	r4, r1
 80155c6:	880b      	ldrh	r3, [r1, #0]
 80155c8:	4605      	mov	r5, r0
 80155ca:	4413      	add	r3, r2
 80155cc:	800b      	strh	r3, [r1, #0]
 80155ce:	884b      	ldrh	r3, [r1, #2]
 80155d0:	88c2      	ldrh	r2, [r0, #6]
 80155d2:	4413      	add	r3, r2
 80155d4:	804b      	strh	r3, [r1, #2]
 80155d6:	1d01      	adds	r1, r0, #4
 80155d8:	4620      	mov	r0, r4
 80155da:	f7f8 ff55 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 80155de:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	dd0b      	ble.n	80155fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80155e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	dd07      	ble.n	80155fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80155ee:	6968      	ldr	r0, [r5, #20]
 80155f0:	b128      	cbz	r0, 80155fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80155f2:	6803      	ldr	r3, [r0, #0]
 80155f4:	4621      	mov	r1, r4
 80155f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80155f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155fc:	4718      	bx	r3
 80155fe:	bd70      	pop	{r4, r5, r6, pc}

08015600 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015600:	b570      	push	{r4, r5, r6, lr}
 8015602:	8882      	ldrh	r2, [r0, #4]
 8015604:	460c      	mov	r4, r1
 8015606:	880b      	ldrh	r3, [r1, #0]
 8015608:	4605      	mov	r5, r0
 801560a:	4413      	add	r3, r2
 801560c:	800b      	strh	r3, [r1, #0]
 801560e:	884b      	ldrh	r3, [r1, #2]
 8015610:	88c2      	ldrh	r2, [r0, #6]
 8015612:	4413      	add	r3, r2
 8015614:	804b      	strh	r3, [r1, #2]
 8015616:	1d01      	adds	r1, r0, #4
 8015618:	4620      	mov	r0, r4
 801561a:	f7f8 ff35 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 801561e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015622:	2b00      	cmp	r3, #0
 8015624:	dd19      	ble.n	801565a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015626:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801562a:	2b00      	cmp	r3, #0
 801562c:	dd15      	ble.n	801565a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801562e:	6968      	ldr	r0, [r5, #20]
 8015630:	b128      	cbz	r0, 801563e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8015632:	6803      	ldr	r3, [r0, #0]
 8015634:	4621      	mov	r1, r4
 8015636:	691b      	ldr	r3, [r3, #16]
 8015638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801563c:	4718      	bx	r3
 801563e:	4b07      	ldr	r3, [pc, #28]	@ (801565c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	3304      	adds	r3, #4
 8015644:	429d      	cmp	r5, r3
 8015646:	d108      	bne.n	801565a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015648:	f7fe fda8 	bl	801419c <_ZN8touchgfx11Application11getInstanceEv>
 801564c:	6803      	ldr	r3, [r0, #0]
 801564e:	6821      	ldr	r1, [r4, #0]
 8015650:	6862      	ldr	r2, [r4, #4]
 8015652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015658:	4718      	bx	r3
 801565a:	bd70      	pop	{r4, r5, r6, pc}
 801565c:	24025340 	.word	0x24025340

08015660 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015660:	b570      	push	{r4, r5, r6, lr}
 8015662:	4604      	mov	r4, r0
 8015664:	4616      	mov	r6, r2
 8015666:	460d      	mov	r5, r1
 8015668:	b901      	cbnz	r1, 801566c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801566a:	b192      	cbz	r2, 8015692 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801566c:	6823      	ldr	r3, [r4, #0]
 801566e:	4620      	mov	r0, r4
 8015670:	699b      	ldr	r3, [r3, #24]
 8015672:	4798      	blx	r3
 8015674:	88e2      	ldrh	r2, [r4, #6]
 8015676:	88a1      	ldrh	r1, [r4, #4]
 8015678:	4620      	mov	r0, r4
 801567a:	4432      	add	r2, r6
 801567c:	4429      	add	r1, r5
 801567e:	b212      	sxth	r2, r2
 8015680:	b209      	sxth	r1, r1
 8015682:	f7ee ff1b 	bl	80044bc <_ZN8touchgfx8Drawable5setXYEss>
 8015686:	6823      	ldr	r3, [r4, #0]
 8015688:	4620      	mov	r0, r4
 801568a:	699b      	ldr	r3, [r3, #24]
 801568c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015690:	4718      	bx	r3
 8015692:	bd70      	pop	{r4, r5, r6, pc}

08015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8015694:	b510      	push	{r4, lr}
 8015696:	2300      	movs	r3, #0
 8015698:	4604      	mov	r4, r0
 801569a:	4608      	mov	r0, r1
 801569c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80156a0:	8023      	strh	r3, [r4, #0]
 80156a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80156a6:	8063      	strh	r3, [r4, #2]
 80156a8:	6803      	ldr	r3, [r0, #0]
 80156aa:	80a1      	strh	r1, [r4, #4]
 80156ac:	4621      	mov	r1, r4
 80156ae:	80e2      	strh	r2, [r4, #6]
 80156b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156b2:	4798      	blx	r3
 80156b4:	4620      	mov	r0, r4
 80156b6:	bd10      	pop	{r4, pc}

080156b8 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 80156b8:	4770      	bx	lr

080156ba <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 80156ba:	b510      	push	{r4, lr}
 80156bc:	4604      	mov	r4, r0
 80156be:	211c      	movs	r1, #28
 80156c0:	f00d fa90 	bl	8022be4 <_ZdlPvj>
 80156c4:	4620      	mov	r0, r4
 80156c6:	bd10      	pop	{r4, pc}

080156c8 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 80156c8:	4a04      	ldr	r2, [pc, #16]	@ (80156dc <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 80156ca:	6002      	str	r2, [r0, #0]
 80156cc:	2200      	movs	r2, #0
 80156ce:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80156d2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80156d6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80156da:	4770      	bx	lr
 80156dc:	080278dc 	.word	0x080278dc

080156e0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 80156e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e4:	4604      	mov	r4, r0
 80156e6:	b087      	sub	sp, #28
 80156e8:	8b45      	ldrh	r5, [r0, #26]
 80156ea:	f8b2 c000 	ldrh.w	ip, [r2]
 80156ee:	9105      	str	r1, [sp, #20]
 80156f0:	1c68      	adds	r0, r5, #1
 80156f2:	68e1      	ldr	r1, [r4, #12]
 80156f4:	9203      	str	r2, [sp, #12]
 80156f6:	b280      	uxth	r0, r0
 80156f8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80156fc:	f01c 0501 	ands.w	r5, ip, #1
 8015700:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015704:	9502      	str	r5, [sp, #8]
 8015706:	d07d      	beq.n	8015804 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 8015708:	ee07 2a90 	vmov	s15, r2
 801570c:	8360      	strh	r0, [r4, #26]
 801570e:	f04f 0e00 	mov.w	lr, #0
 8015712:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015716:	ee06 ea10 	vmov	s12, lr
 801571a:	edc1 6a00 	vstr	s13, [r1]
 801571e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015722:	8b61      	ldrh	r1, [r4, #26]
 8015724:	ee07 2a10 	vmov	s14, r2
 8015728:	68e2      	ldr	r2, [r4, #12]
 801572a:	1c48      	adds	r0, r1, #1
 801572c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015730:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015734:	8360      	strh	r0, [r4, #26]
 8015736:	ed82 7a00 	vstr	s14, [r2]
 801573a:	8b21      	ldrh	r1, [r4, #24]
 801573c:	2501      	movs	r5, #1
 801573e:	68a2      	ldr	r2, [r4, #8]
 8015740:	3304      	adds	r3, #4
 8015742:	1c48      	adds	r0, r1, #1
 8015744:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8015748:	9300      	str	r3, [sp, #0]
 801574a:	46aa      	mov	sl, r5
 801574c:	8320      	strh	r0, [r4, #24]
 801574e:	462e      	mov	r6, r5
 8015750:	5455      	strb	r5, [r2, r1]
 8015752:	2200      	movs	r2, #0
 8015754:	ee07 2a90 	vmov	s15, r2
 8015758:	4613      	mov	r3, r2
 801575a:	4611      	mov	r1, r2
 801575c:	9201      	str	r2, [sp, #4]
 801575e:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8015762:	9805      	ldr	r0, [sp, #20]
 8015764:	f108 0701 	add.w	r7, r8, #1
 8015768:	f8d4 b008 	ldr.w	fp, [r4, #8]
 801576c:	42a8      	cmp	r0, r5
 801576e:	b2bf      	uxth	r7, r7
 8015770:	eb0b 0908 	add.w	r9, fp, r8
 8015774:	f340 80db 	ble.w	801592e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 8015778:	fa4c f906 	asr.w	r9, ip, r6
 801577c:	f009 0901 	and.w	r9, r9, #1
 8015780:	fa5f f389 	uxtb.w	r3, r9
 8015784:	9304      	str	r3, [sp, #16]
 8015786:	9b00      	ldr	r3, [sp, #0]
 8015788:	f9b3 1000 	ldrsh.w	r1, [r3]
 801578c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015790:	f1b9 0f00 	cmp.w	r9, #0
 8015794:	d07d      	beq.n	8015892 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 8015796:	ee05 1a10 	vmov	s10, r1
 801579a:	8327      	strh	r7, [r4, #24]
 801579c:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 80157a0:	ee05 3a10 	vmov	s10, r3
 80157a4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80157a8:	f1ba 0f00 	cmp.w	sl, #0
 80157ac:	d050      	beq.n	8015850 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 80157ae:	f04f 0002 	mov.w	r0, #2
 80157b2:	f80b 0008 	strb.w	r0, [fp, r8]
 80157b6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80157ba:	68e7      	ldr	r7, [r4, #12]
 80157bc:	f108 0901 	add.w	r9, r8, #1
 80157c0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80157c4:	f8a4 901a 	strh.w	r9, [r4, #26]
 80157c8:	edc7 4a00 	vstr	s9, [r7]
 80157cc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80157d0:	68e7      	ldr	r7, [r4, #12]
 80157d2:	f108 0901 	add.w	r9, r8, #1
 80157d6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80157da:	f8a4 901a 	strh.w	r9, [r4, #26]
 80157de:	ed87 5a00 	vstr	s10, [r7]
 80157e2:	3601      	adds	r6, #1
 80157e4:	2e10      	cmp	r6, #16
 80157e6:	d106      	bne.n	80157f6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 80157e8:	9e01      	ldr	r6, [sp, #4]
 80157ea:	9803      	ldr	r0, [sp, #12]
 80157ec:	3601      	adds	r6, #1
 80157ee:	9601      	str	r6, [sp, #4]
 80157f0:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 80157f4:	2600      	movs	r6, #0
 80157f6:	9800      	ldr	r0, [sp, #0]
 80157f8:	3501      	adds	r5, #1
 80157fa:	f8dd a010 	ldr.w	sl, [sp, #16]
 80157fe:	3004      	adds	r0, #4
 8015800:	9000      	str	r0, [sp, #0]
 8015802:	e7ac      	b.n	801575e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 8015804:	ee06 2a10 	vmov	s12, r2
 8015808:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801580c:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8015810:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015814:	ee16 5a10 	vmov	r5, s12
 8015818:	442a      	add	r2, r5
 801581a:	ee06 2a90 	vmov	s13, r2
 801581e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015822:	8360      	strh	r0, [r4, #26]
 8015824:	4472      	add	r2, lr
 8015826:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801582a:	ee07 2a10 	vmov	s14, r2
 801582e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015832:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015836:	edc1 6a00 	vstr	s13, [r1]
 801583a:	8b61      	ldrh	r1, [r4, #26]
 801583c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015840:	68e2      	ldr	r2, [r4, #12]
 8015842:	1c48      	adds	r0, r1, #1
 8015844:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015848:	8360      	strh	r0, [r4, #26]
 801584a:	ed82 7a00 	vstr	s14, [r2]
 801584e:	e774      	b.n	801573a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 8015850:	f04f 0005 	mov.w	r0, #5
 8015854:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8015858:	f80b 0008 	strb.w	r0, [fp, r8]
 801585c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015860:	68e7      	ldr	r7, [r4, #12]
 8015862:	f108 0901 	add.w	r9, r8, #1
 8015866:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801586a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801586e:	ed87 4a00 	vstr	s8, [r7]
 8015872:	ee04 2a10 	vmov	s8, r2
 8015876:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801587a:	68e7      	ldr	r7, [r4, #12]
 801587c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8015880:	f108 0901 	add.w	r9, r8, #1
 8015884:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015888:	f8a4 901a 	strh.w	r9, [r4, #26]
 801588c:	ed87 4a00 	vstr	s8, [r7]
 8015890:	e791      	b.n	80157b6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 8015892:	f1ba 0f00 	cmp.w	sl, #0
 8015896:	d146      	bne.n	8015926 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 8015898:	f04f 0005 	mov.w	r0, #5
 801589c:	8327      	strh	r7, [r4, #24]
 801589e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80158a2:	f80b 0008 	strb.w	r0, [fp, r8]
 80158a6:	ee17 0a90 	vmov	r0, s15
 80158aa:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80158ae:	68e7      	ldr	r7, [r4, #12]
 80158b0:	4408      	add	r0, r1
 80158b2:	f108 0901 	add.w	r9, r8, #1
 80158b6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80158ba:	ee07 0a90 	vmov	s15, r0
 80158be:	f8a4 901a 	strh.w	r9, [r4, #26]
 80158c2:	ed87 5a00 	vstr	s10, [r7]
 80158c6:	ee05 2a10 	vmov	s10, r2
 80158ca:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80158ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80158d2:	68e7      	ldr	r7, [r4, #12]
 80158d4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80158d8:	f108 0901 	add.w	r9, r8, #1
 80158dc:	441a      	add	r2, r3
 80158de:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80158e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80158e6:	f8a4 901a 	strh.w	r9, [r4, #26]
 80158ea:	ed87 5a00 	vstr	s10, [r7]
 80158ee:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80158f2:	68e7      	ldr	r7, [r4, #12]
 80158f4:	f108 0901 	add.w	r9, r8, #1
 80158f8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80158fc:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015900:	edc7 7a00 	vstr	s15, [r7]
 8015904:	ee07 2a90 	vmov	s15, r2
 8015908:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801590c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015910:	68e7      	ldr	r7, [r4, #12]
 8015912:	f108 0901 	add.w	r9, r8, #1
 8015916:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801591a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801591e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015922:	edc7 7a00 	vstr	s15, [r7]
 8015926:	461a      	mov	r2, r3
 8015928:	ee07 1a90 	vmov	s15, r1
 801592c:	e759      	b.n	80157e2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801592e:	f1ba 0f00 	cmp.w	sl, #0
 8015932:	d045      	beq.n	80159c0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8015934:	ee05 1a90 	vmov	s11, r1
 8015938:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801593c:	eef4 5a66 	vcmp.f32	s11, s13
 8015940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015944:	d108      	bne.n	8015958 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 8015946:	ee05 3a90 	vmov	s11, r3
 801594a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801594e:	eef4 5a47 	vcmp.f32	s11, s14
 8015952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015956:	d033      	beq.n	80159c0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8015958:	9b02      	ldr	r3, [sp, #8]
 801595a:	8327      	strh	r7, [r4, #24]
 801595c:	b1b3      	cbz	r3, 801598c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 801595e:	2302      	movs	r3, #2
 8015960:	f889 3000 	strb.w	r3, [r9]
 8015964:	8b62      	ldrh	r2, [r4, #26]
 8015966:	68e3      	ldr	r3, [r4, #12]
 8015968:	1c51      	adds	r1, r2, #1
 801596a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801596e:	8361      	strh	r1, [r4, #26]
 8015970:	edc3 6a00 	vstr	s13, [r3]
 8015974:	8b62      	ldrh	r2, [r4, #26]
 8015976:	68e3      	ldr	r3, [r4, #12]
 8015978:	1c51      	adds	r1, r2, #1
 801597a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801597e:	8361      	strh	r1, [r4, #26]
 8015980:	ed83 7a00 	vstr	s14, [r3]
 8015984:	9800      	ldr	r0, [sp, #0]
 8015986:	b007      	add	sp, #28
 8015988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801598c:	2305      	movs	r3, #5
 801598e:	f889 3000 	strb.w	r3, [r9]
 8015992:	8b62      	ldrh	r2, [r4, #26]
 8015994:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015998:	68e3      	ldr	r3, [r4, #12]
 801599a:	ee07 ea90 	vmov	s15, lr
 801599e:	1c51      	adds	r1, r2, #1
 80159a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80159a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80159a8:	8361      	strh	r1, [r4, #26]
 80159aa:	ed83 6a00 	vstr	s12, [r3]
 80159ae:	8b62      	ldrh	r2, [r4, #26]
 80159b0:	68e3      	ldr	r3, [r4, #12]
 80159b2:	1c51      	adds	r1, r2, #1
 80159b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80159b8:	8361      	strh	r1, [r4, #26]
 80159ba:	edc3 7a00 	vstr	s15, [r3]
 80159be:	e7d1      	b.n	8015964 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 80159c0:	ee05 2a90 	vmov	s11, r2
 80159c4:	2305      	movs	r3, #5
 80159c6:	9902      	ldr	r1, [sp, #8]
 80159c8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80159cc:	8327      	strh	r7, [r4, #24]
 80159ce:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80159d2:	f889 3000 	strb.w	r3, [r9]
 80159d6:	b181      	cbz	r1, 80159fa <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 80159d8:	8b62      	ldrh	r2, [r4, #26]
 80159da:	68e3      	ldr	r3, [r4, #12]
 80159dc:	1c51      	adds	r1, r2, #1
 80159de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80159e2:	8361      	strh	r1, [r4, #26]
 80159e4:	ed83 5a00 	vstr	s10, [r3]
 80159e8:	8b62      	ldrh	r2, [r4, #26]
 80159ea:	68e3      	ldr	r3, [r4, #12]
 80159ec:	1c51      	adds	r1, r2, #1
 80159ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80159f2:	8361      	strh	r1, [r4, #26]
 80159f4:	edc3 5a00 	vstr	s11, [r3]
 80159f8:	e7b4      	b.n	8015964 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 80159fa:	8b65      	ldrh	r5, [r4, #26]
 80159fc:	ee17 0a90 	vmov	r0, s15
 8015a00:	68e1      	ldr	r1, [r4, #12]
 8015a02:	4472      	add	r2, lr
 8015a04:	1c6e      	adds	r6, r5, #1
 8015a06:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015a0a:	8366      	strh	r6, [r4, #26]
 8015a0c:	ed81 5a00 	vstr	s10, [r1]
 8015a10:	8b65      	ldrh	r5, [r4, #26]
 8015a12:	68e1      	ldr	r1, [r4, #12]
 8015a14:	1c6e      	adds	r6, r5, #1
 8015a16:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015a1a:	8366      	strh	r6, [r4, #26]
 8015a1c:	edc1 5a00 	vstr	s11, [r1]
 8015a20:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8015a24:	8b65      	ldrh	r5, [r4, #26]
 8015a26:	68e1      	ldr	r1, [r4, #12]
 8015a28:	1c6e      	adds	r6, r5, #1
 8015a2a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015a2e:	ee16 5a10 	vmov	r5, s12
 8015a32:	8366      	strh	r6, [r4, #26]
 8015a34:	4428      	add	r0, r5
 8015a36:	ee07 0a90 	vmov	s15, r0
 8015a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a3e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015a42:	edc1 7a00 	vstr	s15, [r1]
 8015a46:	ee07 2a90 	vmov	s15, r2
 8015a4a:	8b61      	ldrh	r1, [r4, #26]
 8015a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a50:	68e5      	ldr	r5, [r4, #12]
 8015a52:	1c4e      	adds	r6, r1, #1
 8015a54:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8015a58:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015a5c:	8366      	strh	r6, [r4, #26]
 8015a5e:	edc1 7a00 	vstr	s15, [r1]
 8015a62:	8b22      	ldrh	r2, [r4, #24]
 8015a64:	68a1      	ldr	r1, [r4, #8]
 8015a66:	1c55      	adds	r5, r2, #1
 8015a68:	8325      	strh	r5, [r4, #24]
 8015a6a:	548b      	strb	r3, [r1, r2]
 8015a6c:	e791      	b.n	8015992 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

08015a70 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8015a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a74:	4604      	mov	r4, r0
 8015a76:	b08e      	sub	sp, #56	@ 0x38
 8015a78:	4699      	mov	r9, r3
 8015a7a:	4688      	mov	r8, r1
 8015a7c:	4615      	mov	r5, r2
 8015a7e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8015a80:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8015a84:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015a86:	f7ed fe73 	bl	8003770 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8015a8a:	6060      	str	r0, [r4, #4]
 8015a8c:	f1b9 0f00 	cmp.w	r9, #0
 8015a90:	f000 80e8 	beq.w	8015c64 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015a94:	2800      	cmp	r0, #0
 8015a96:	f000 80e5 	beq.w	8015c64 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015a9a:	a805      	add	r0, sp, #20
 8015a9c:	f000 f8f9 	bl	8015c92 <_ZN8touchgfx9Matrix3x3C1Ev>
 8015aa0:	6833      	ldr	r3, [r6, #0]
 8015aa2:	4630      	mov	r0, r6
 8015aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015aa6:	4798      	blx	r3
 8015aa8:	a805      	add	r0, sp, #20
 8015aaa:	eef0 0a40 	vmov.f32	s1, s0
 8015aae:	f000 f8f4 	bl	8015c9a <_ZN8touchgfx9Matrix3x35scaleEff>
 8015ab2:	6860      	ldr	r0, [r4, #4]
 8015ab4:	f1ba 0f03 	cmp.w	sl, #3
 8015ab8:	d83b      	bhi.n	8015b32 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8015aba:	e8df f00a 	tbb	[pc, sl]
 8015abe:	1002      	.short	0x1002
 8015ac0:	9f71      	.short	0x9f71
 8015ac2:	6803      	ldr	r3, [r0, #0]
 8015ac4:	462a      	mov	r2, r5
 8015ac6:	4641      	mov	r1, r8
 8015ac8:	689b      	ldr	r3, [r3, #8]
 8015aca:	4798      	blx	r3
 8015acc:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8015ad0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015ad4:	ee07 7a90 	vmov	s15, r7
 8015ad8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8015adc:	e026      	b.n	8015b2c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8015ade:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8015ae2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015ae6:	8869      	ldrh	r1, [r5, #2]
 8015ae8:	1a9b      	subs	r3, r3, r2
 8015aea:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015aee:	aa03      	add	r2, sp, #12
 8015af0:	1a5b      	subs	r3, r3, r1
 8015af2:	4641      	mov	r1, r8
 8015af4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015af8:	882b      	ldrh	r3, [r5, #0]
 8015afa:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015afe:	88ab      	ldrh	r3, [r5, #4]
 8015b00:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015b04:	6803      	ldr	r3, [r0, #0]
 8015b06:	689b      	ldr	r3, [r3, #8]
 8015b08:	4798      	blx	r3
 8015b0a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8015c6c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8015b0e:	a805      	add	r0, sp, #20
 8015b10:	f000 f8e8 	bl	8015ce4 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015b14:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8015b18:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015b1a:	ee07 7a90 	vmov	s15, r7
 8015b1e:	1a9b      	subs	r3, r3, r2
 8015b20:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015b24:	ee00 3a10 	vmov	s0, r3
 8015b28:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8015b2c:	a805      	add	r0, sp, #20
 8015b2e:	f000 f927 	bl	8015d80 <_ZN8touchgfx9Matrix3x39translateEff>
 8015b32:	6860      	ldr	r0, [r4, #4]
 8015b34:	a905      	add	r1, sp, #20
 8015b36:	2500      	movs	r5, #0
 8015b38:	f109 0602 	add.w	r6, r9, #2
 8015b3c:	6803      	ldr	r3, [r0, #0]
 8015b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b40:	4798      	blx	r3
 8015b42:	6860      	ldr	r0, [r4, #4]
 8015b44:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8015b46:	6803      	ldr	r3, [r0, #0]
 8015b48:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8015b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b4e:	4798      	blx	r3
 8015b50:	6860      	ldr	r0, [r4, #4]
 8015b52:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8015b56:	6803      	ldr	r3, [r0, #0]
 8015b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b5a:	4798      	blx	r3
 8015b5c:	6860      	ldr	r0, [r4, #4]
 8015b5e:	2101      	movs	r1, #1
 8015b60:	6803      	ldr	r3, [r0, #0]
 8015b62:	68db      	ldr	r3, [r3, #12]
 8015b64:	4798      	blx	r3
 8015b66:	f8b9 7000 	ldrh.w	r7, [r9]
 8015b6a:	f104 0310 	add.w	r3, r4, #16
 8015b6e:	61a5      	str	r5, [r4, #24]
 8015b70:	f104 0208 	add.w	r2, r4, #8
 8015b74:	f104 0114 	add.w	r1, r4, #20
 8015b78:	f104 000c 	add.w	r0, r4, #12
 8015b7c:	f7ef fa1c 	bl	8004fb8 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8015b80:	42af      	cmp	r7, r5
 8015b82:	dd60      	ble.n	8015c46 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8015b84:	8831      	ldrh	r1, [r6, #0]
 8015b86:	1cb2      	adds	r2, r6, #2
 8015b88:	4620      	mov	r0, r4
 8015b8a:	3501      	adds	r5, #1
 8015b8c:	f101 030f 	add.w	r3, r1, #15
 8015b90:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8015b94:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015b98:	f7ff fda2 	bl	80156e0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8015b9c:	4606      	mov	r6, r0
 8015b9e:	e7ef      	b.n	8015b80 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8015ba0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015ba4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015ba8:	8829      	ldrh	r1, [r5, #0]
 8015baa:	1a9b      	subs	r3, r3, r2
 8015bac:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015bb0:	aa03      	add	r2, sp, #12
 8015bb2:	1a5b      	subs	r3, r3, r1
 8015bb4:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015bb8:	886d      	ldrh	r5, [r5, #2]
 8015bba:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015bbe:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015bc2:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015bc6:	1a5b      	subs	r3, r3, r1
 8015bc8:	4641      	mov	r1, r8
 8015bca:	1b5b      	subs	r3, r3, r5
 8015bcc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015bd0:	6803      	ldr	r3, [r0, #0]
 8015bd2:	689b      	ldr	r3, [r3, #8]
 8015bd4:	4798      	blx	r3
 8015bd6:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8015c70 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8015bda:	a805      	add	r0, sp, #20
 8015bdc:	f000 f882 	bl	8015ce4 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015be0:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015be4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015be6:	1a9b      	subs	r3, r3, r2
 8015be8:	ee00 3a90 	vmov	s1, r3
 8015bec:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8015bf0:	1bdb      	subs	r3, r3, r7
 8015bf2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8015bf6:	ee00 3a10 	vmov	s0, r3
 8015bfa:	e795      	b.n	8015b28 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8015bfc:	886b      	ldrh	r3, [r5, #2]
 8015bfe:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015c02:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015c06:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015c0a:	8829      	ldrh	r1, [r5, #0]
 8015c0c:	1a9b      	subs	r3, r3, r2
 8015c0e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015c12:	aa03      	add	r2, sp, #12
 8015c14:	1a5b      	subs	r3, r3, r1
 8015c16:	4641      	mov	r1, r8
 8015c18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015c1c:	88eb      	ldrh	r3, [r5, #6]
 8015c1e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8015c22:	6803      	ldr	r3, [r0, #0]
 8015c24:	689b      	ldr	r3, [r3, #8]
 8015c26:	4798      	blx	r3
 8015c28:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8015c74 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8015c2c:	a805      	add	r0, sp, #20
 8015c2e:	f000 f859 	bl	8015ce4 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015c32:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015c36:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8015c3a:	1bdb      	subs	r3, r3, r7
 8015c3c:	ee00 3a90 	vmov	s1, r3
 8015c40:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8015c44:	e748      	b.n	8015ad8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8015c46:	6860      	ldr	r0, [r4, #4]
 8015c48:	2100      	movs	r1, #0
 8015c4a:	8b22      	ldrh	r2, [r4, #24]
 8015c4c:	6803      	ldr	r3, [r0, #0]
 8015c4e:	9101      	str	r1, [sp, #4]
 8015c50:	8b61      	ldrh	r1, [r4, #26]
 8015c52:	9100      	str	r1, [sp, #0]
 8015c54:	6a1d      	ldr	r5, [r3, #32]
 8015c56:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8015c5a:	47a8      	blx	r5
 8015c5c:	6860      	ldr	r0, [r4, #4]
 8015c5e:	6803      	ldr	r3, [r0, #0]
 8015c60:	69db      	ldr	r3, [r3, #28]
 8015c62:	4798      	blx	r3
 8015c64:	b00e      	add	sp, #56	@ 0x38
 8015c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c6a:	bf00      	nop
 8015c6c:	42b40000 	.word	0x42b40000
 8015c70:	43340000 	.word	0x43340000
 8015c74:	43870000 	.word	0x43870000

08015c78 <_ZN8touchgfx9Matrix3x35resetEv>:
 8015c78:	2300      	movs	r3, #0
 8015c7a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8015c7e:	6043      	str	r3, [r0, #4]
 8015c80:	6002      	str	r2, [r0, #0]
 8015c82:	6083      	str	r3, [r0, #8]
 8015c84:	60c3      	str	r3, [r0, #12]
 8015c86:	6102      	str	r2, [r0, #16]
 8015c88:	6143      	str	r3, [r0, #20]
 8015c8a:	6183      	str	r3, [r0, #24]
 8015c8c:	61c3      	str	r3, [r0, #28]
 8015c8e:	6202      	str	r2, [r0, #32]
 8015c90:	4770      	bx	lr

08015c92 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8015c92:	b508      	push	{r3, lr}
 8015c94:	f7ff fff0 	bl	8015c78 <_ZN8touchgfx9Matrix3x35resetEv>
 8015c98:	bd08      	pop	{r3, pc}

08015c9a <_ZN8touchgfx9Matrix3x35scaleEff>:
 8015c9a:	edd0 7a00 	vldr	s15, [r0]
 8015c9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015ca2:	edc0 7a00 	vstr	s15, [r0]
 8015ca6:	edd0 7a01 	vldr	s15, [r0, #4]
 8015caa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015cae:	edc0 7a01 	vstr	s15, [r0, #4]
 8015cb2:	edd0 7a02 	vldr	s15, [r0, #8]
 8015cb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015cba:	edd0 7a03 	vldr	s15, [r0, #12]
 8015cbe:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8015cc2:	ed80 0a02 	vstr	s0, [r0, #8]
 8015cc6:	edc0 7a03 	vstr	s15, [r0, #12]
 8015cca:	edd0 7a04 	vldr	s15, [r0, #16]
 8015cce:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8015cd2:	edc0 7a04 	vstr	s15, [r0, #16]
 8015cd6:	edd0 7a05 	vldr	s15, [r0, #20]
 8015cda:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8015cde:	edc0 0a05 	vstr	s1, [r0, #20]
 8015ce2:	4770      	bx	lr

08015ce4 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8015ce4:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8015d78 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8015ce8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015cec:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8015d7c <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8015cf0:	b510      	push	{r4, lr}
 8015cf2:	ed2d 8b02 	vpush	{d8}
 8015cf6:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	eeb0 0a68 	vmov.f32	s0, s17
 8015d00:	f00d f8a6 	bl	8022e50 <cosf>
 8015d04:	eeb0 8a40 	vmov.f32	s16, s0
 8015d08:	eeb0 0a68 	vmov.f32	s0, s17
 8015d0c:	f00c ffdc 	bl	8022cc8 <sinf>
 8015d10:	edd4 6a03 	vldr	s13, [r4, #12]
 8015d14:	edd4 4a00 	vldr	s9, [r4]
 8015d18:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8015d1c:	ed94 7a04 	vldr	s14, [r4, #16]
 8015d20:	ed94 5a01 	vldr	s10, [r4, #4]
 8015d24:	ee66 6a88 	vmul.f32	s13, s13, s16
 8015d28:	edd4 5a02 	vldr	s11, [r4, #8]
 8015d2c:	eee8 7a24 	vfma.f32	s15, s16, s9
 8015d30:	eee0 6a24 	vfma.f32	s13, s0, s9
 8015d34:	edc4 7a00 	vstr	s15, [r4]
 8015d38:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8015d3c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015d40:	edc4 6a03 	vstr	s13, [r4, #12]
 8015d44:	eee8 7a05 	vfma.f32	s15, s16, s10
 8015d48:	eea0 7a05 	vfma.f32	s14, s0, s10
 8015d4c:	edc4 7a01 	vstr	s15, [r4, #4]
 8015d50:	edd4 7a05 	vldr	s15, [r4, #20]
 8015d54:	ed84 7a04 	vstr	s14, [r4, #16]
 8015d58:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8015d5c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015d60:	eea8 6a25 	vfma.f32	s12, s16, s11
 8015d64:	eee0 7a25 	vfma.f32	s15, s0, s11
 8015d68:	ecbd 8b02 	vpop	{d8}
 8015d6c:	ed84 6a02 	vstr	s12, [r4, #8]
 8015d70:	edc4 7a05 	vstr	s15, [r4, #20]
 8015d74:	bd10      	pop	{r4, pc}
 8015d76:	bf00      	nop
 8015d78:	40490fdb 	.word	0x40490fdb
 8015d7c:	43340000 	.word	0x43340000

08015d80 <_ZN8touchgfx9Matrix3x39translateEff>:
 8015d80:	ed90 6a06 	vldr	s12, [r0, #24]
 8015d84:	edd0 7a00 	vldr	s15, [r0]
 8015d88:	edd0 6a07 	vldr	s13, [r0, #28]
 8015d8c:	eee6 7a00 	vfma.f32	s15, s12, s0
 8015d90:	ed90 7a08 	vldr	s14, [r0, #32]
 8015d94:	edc0 7a00 	vstr	s15, [r0]
 8015d98:	edd0 7a01 	vldr	s15, [r0, #4]
 8015d9c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8015da0:	edc0 7a01 	vstr	s15, [r0, #4]
 8015da4:	edd0 7a02 	vldr	s15, [r0, #8]
 8015da8:	eee7 7a00 	vfma.f32	s15, s14, s0
 8015dac:	edc0 7a02 	vstr	s15, [r0, #8]
 8015db0:	edd0 7a03 	vldr	s15, [r0, #12]
 8015db4:	eee6 7a20 	vfma.f32	s15, s12, s1
 8015db8:	edc0 7a03 	vstr	s15, [r0, #12]
 8015dbc:	edd0 7a04 	vldr	s15, [r0, #16]
 8015dc0:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8015dc4:	edc0 7a04 	vstr	s15, [r0, #16]
 8015dc8:	edd0 7a05 	vldr	s15, [r0, #20]
 8015dcc:	eee7 7a20 	vfma.f32	s15, s14, s1
 8015dd0:	edc0 7a05 	vstr	s15, [r0, #20]
 8015dd4:	4770      	bx	lr

08015dd6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8015dd6:	edd0 6a01 	vldr	s13, [r0, #4]
 8015dda:	b084      	sub	sp, #16
 8015ddc:	edd0 7a04 	vldr	s15, [r0, #16]
 8015de0:	ed90 7a03 	vldr	s14, [r0, #12]
 8015de4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8015de8:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8015dec:	edd0 6a00 	vldr	s13, [r0]
 8015df0:	eee7 7a00 	vfma.f32	s15, s14, s0
 8015df4:	ed90 7a05 	vldr	s14, [r0, #20]
 8015df8:	eee6 0a80 	vfma.f32	s1, s13, s0
 8015dfc:	ed90 0a02 	vldr	s0, [r0, #8]
 8015e00:	ee30 0a80 	vadd.f32	s0, s1, s0
 8015e04:	ee77 0a87 	vadd.f32	s1, s15, s14
 8015e08:	b004      	add	sp, #16
 8015e0a:	4770      	bx	lr

08015e0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8015e0c:	b530      	push	{r4, r5, lr}
 8015e0e:	8083      	strh	r3, [r0, #4]
 8015e10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015e14:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8015e18:	80c3      	strh	r3, [r0, #6]
 8015e1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8015e1e:	6141      	str	r1, [r0, #20]
 8015e20:	7203      	strb	r3, [r0, #8]
 8015e22:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015e26:	8302      	strh	r2, [r0, #24]
 8015e28:	7243      	strb	r3, [r0, #9]
 8015e2a:	7a83      	ldrb	r3, [r0, #10]
 8015e2c:	f365 0306 	bfi	r3, r5, #0, #7
 8015e30:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8015e34:	f365 13c7 	bfi	r3, r5, #7, #1
 8015e38:	7283      	strb	r3, [r0, #10]
 8015e3a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8015e3e:	72c3      	strb	r3, [r0, #11]
 8015e40:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015e44:	7303      	strb	r3, [r0, #12]
 8015e46:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8015e4a:	81c3      	strh	r3, [r0, #14]
 8015e4c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8015e50:	8203      	strh	r3, [r0, #16]
 8015e52:	4b01      	ldr	r3, [pc, #4]	@ (8015e58 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8015e54:	6003      	str	r3, [r0, #0]
 8015e56:	bd30      	pop	{r4, r5, pc}
 8015e58:	080278f0 	.word	0x080278f0

08015e5c <_ZNK8touchgfx9ConstFont4findEt>:
 8015e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e5e:	6944      	ldr	r4, [r0, #20]
 8015e60:	b3bc      	cbz	r4, 8015ed2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015e62:	88a3      	ldrh	r3, [r4, #4]
 8015e64:	8b02      	ldrh	r2, [r0, #24]
 8015e66:	1acb      	subs	r3, r1, r3
 8015e68:	f102 32ff 	add.w	r2, r2, #4294967295
 8015e6c:	d431      	bmi.n	8015ed2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015e6e:	4293      	cmp	r3, r2
 8015e70:	dd0c      	ble.n	8015e8c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8015e72:	230e      	movs	r3, #14
 8015e74:	fb03 4302 	mla	r3, r3, r2, r4
 8015e78:	889b      	ldrh	r3, [r3, #4]
 8015e7a:	1a5b      	subs	r3, r3, r1
 8015e7c:	1ad3      	subs	r3, r2, r3
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	db27      	blt.n	8015ed2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	bfbc      	itt	lt
 8015e86:	2302      	movlt	r3, #2
 8015e88:	fb92 f3f3 	sdivlt	r3, r2, r3
 8015e8c:	2500      	movs	r5, #0
 8015e8e:	260e      	movs	r6, #14
 8015e90:	4295      	cmp	r5, r2
 8015e92:	dc1e      	bgt.n	8015ed2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015e94:	fb06 4003 	mla	r0, r6, r3, r4
 8015e98:	8887      	ldrh	r7, [r0, #4]
 8015e9a:	42b9      	cmp	r1, r7
 8015e9c:	d01a      	beq.n	8015ed4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8015e9e:	d20d      	bcs.n	8015ebc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8015ea0:	1e5a      	subs	r2, r3, #1
 8015ea2:	4295      	cmp	r5, r2
 8015ea4:	dc15      	bgt.n	8015ed2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015ea6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8015eaa:	1a5b      	subs	r3, r3, r1
 8015eac:	1ad3      	subs	r3, r2, r3
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	db0f      	blt.n	8015ed2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015eb2:	429d      	cmp	r5, r3
 8015eb4:	ddec      	ble.n	8015e90 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015eb6:	1953      	adds	r3, r2, r5
 8015eb8:	105b      	asrs	r3, r3, #1
 8015eba:	e7e9      	b.n	8015e90 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015ebc:	1c5d      	adds	r5, r3, #1
 8015ebe:	42aa      	cmp	r2, r5
 8015ec0:	db07      	blt.n	8015ed2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015ec2:	8a43      	ldrh	r3, [r0, #18]
 8015ec4:	1acb      	subs	r3, r1, r3
 8015ec6:	442b      	add	r3, r5
 8015ec8:	429d      	cmp	r5, r3
 8015eca:	dc02      	bgt.n	8015ed2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	dadf      	bge.n	8015e90 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015ed0:	e7f1      	b.n	8015eb6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8015ed2:	2000      	movs	r0, #0
 8015ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ed6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8015ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ed8:	4604      	mov	r4, r0
 8015eda:	4617      	mov	r7, r2
 8015edc:	461e      	mov	r6, r3
 8015ede:	b911      	cbnz	r1, 8015ee6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8015ee0:	2500      	movs	r5, #0
 8015ee2:	4628      	mov	r0, r5
 8015ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ee6:	290a      	cmp	r1, #10
 8015ee8:	d0fa      	beq.n	8015ee0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015eea:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015eee:	4291      	cmp	r1, r2
 8015ef0:	d0f6      	beq.n	8015ee0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015ef2:	f242 020b 	movw	r2, #8203	@ 0x200b
 8015ef6:	4291      	cmp	r1, r2
 8015ef8:	d0f2      	beq.n	8015ee0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015efa:	f7ff ffaf 	bl	8015e5c <_ZNK8touchgfx9ConstFont4findEt>
 8015efe:	4605      	mov	r5, r0
 8015f00:	b950      	cbnz	r0, 8015f18 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8015f02:	6823      	ldr	r3, [r4, #0]
 8015f04:	4620      	mov	r0, r4
 8015f06:	691b      	ldr	r3, [r3, #16]
 8015f08:	4798      	blx	r3
 8015f0a:	4601      	mov	r1, r0
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f7ff ffa5 	bl	8015e5c <_ZNK8touchgfx9ConstFont4findEt>
 8015f12:	4605      	mov	r5, r0
 8015f14:	2800      	cmp	r0, #0
 8015f16:	d0e3      	beq.n	8015ee0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015f18:	6823      	ldr	r3, [r4, #0]
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015f20:	4798      	blx	r3
 8015f22:	6038      	str	r0, [r7, #0]
 8015f24:	6823      	ldr	r3, [r4, #0]
 8015f26:	4620      	mov	r0, r4
 8015f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f2a:	4798      	blx	r3
 8015f2c:	7030      	strb	r0, [r6, #0]
 8015f2e:	e7d8      	b.n	8015ee2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08015f30 <_ZN8touchgfx4clzuEm>:
 8015f30:	4603      	mov	r3, r0
 8015f32:	b1c8      	cbz	r0, 8015f68 <_ZN8touchgfx4clzuEm+0x38>
 8015f34:	0c02      	lsrs	r2, r0, #16
 8015f36:	0412      	lsls	r2, r2, #16
 8015f38:	b9a2      	cbnz	r2, 8015f64 <_ZN8touchgfx4clzuEm+0x34>
 8015f3a:	0403      	lsls	r3, r0, #16
 8015f3c:	2010      	movs	r0, #16
 8015f3e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8015f42:	bf04      	itt	eq
 8015f44:	021b      	lsleq	r3, r3, #8
 8015f46:	3008      	addeq	r0, #8
 8015f48:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8015f4c:	bf04      	itt	eq
 8015f4e:	011b      	lsleq	r3, r3, #4
 8015f50:	3004      	addeq	r0, #4
 8015f52:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8015f56:	bf04      	itt	eq
 8015f58:	009b      	lsleq	r3, r3, #2
 8015f5a:	3002      	addeq	r0, #2
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	db04      	blt.n	8015f6a <_ZN8touchgfx4clzuEm+0x3a>
 8015f60:	3001      	adds	r0, #1
 8015f62:	4770      	bx	lr
 8015f64:	2000      	movs	r0, #0
 8015f66:	e7ea      	b.n	8015f3e <_ZN8touchgfx4clzuEm+0xe>
 8015f68:	2020      	movs	r0, #32
 8015f6a:	4770      	bx	lr

08015f6c <_ZN8touchgfx7muldivuEmmmRm>:
 8015f6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f70:	460f      	mov	r7, r1
 8015f72:	4615      	mov	r5, r2
 8015f74:	461e      	mov	r6, r3
 8015f76:	4601      	mov	r1, r0
 8015f78:	b100      	cbz	r0, 8015f7c <_ZN8touchgfx7muldivuEmmmRm+0x10>
 8015f7a:	b927      	cbnz	r7, 8015f86 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 8015f7c:	2000      	movs	r0, #0
 8015f7e:	6030      	str	r0, [r6, #0]
 8015f80:	b002      	add	sp, #8
 8015f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f86:	f7ff ffd3 	bl	8015f30 <_ZN8touchgfx4clzuEm>
 8015f8a:	b980      	cbnz	r0, 8015fae <_ZN8touchgfx7muldivuEmmmRm+0x42>
 8015f8c:	4638      	mov	r0, r7
 8015f8e:	f7ff ffcf 	bl	8015f30 <_ZN8touchgfx4clzuEm>
 8015f92:	2800      	cmp	r0, #0
 8015f94:	dd05      	ble.n	8015fa2 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 8015f96:	4633      	mov	r3, r6
 8015f98:	462a      	mov	r2, r5
 8015f9a:	4638      	mov	r0, r7
 8015f9c:	f7ff ffe6 	bl	8015f6c <_ZN8touchgfx7muldivuEmmmRm>
 8015fa0:	e7ee      	b.n	8015f80 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8015fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8015fa6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015faa:	6033      	str	r3, [r6, #0]
 8015fac:	e7e8      	b.n	8015f80 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8015fae:	fa37 f800 	lsrs.w	r8, r7, r0
 8015fb2:	fb07 f301 	mul.w	r3, r7, r1
 8015fb6:	d105      	bne.n	8015fc4 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8015fb8:	fbb3 f0f5 	udiv	r0, r3, r5
 8015fbc:	fb05 3510 	mls	r5, r5, r0, r3
 8015fc0:	6035      	str	r5, [r6, #0]
 8015fc2:	e7dd      	b.n	8015f80 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8015fc4:	2301      	movs	r3, #1
 8015fc6:	fa01 fa00 	lsl.w	sl, r1, r0
 8015fca:	462a      	mov	r2, r5
 8015fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8015fd0:	4633      	mov	r3, r6
 8015fd2:	fbba f9f5 	udiv	r9, sl, r5
 8015fd6:	3801      	subs	r0, #1
 8015fd8:	fb08 f409 	mul.w	r4, r8, r9
 8015fdc:	4038      	ands	r0, r7
 8015fde:	f7ff ffc5 	bl	8015f6c <_ZN8touchgfx7muldivuEmmmRm>
 8015fe2:	462a      	mov	r2, r5
 8015fe4:	4607      	mov	r7, r0
 8015fe6:	ab01      	add	r3, sp, #4
 8015fe8:	fb05 a119 	mls	r1, r5, r9, sl
 8015fec:	4640      	mov	r0, r8
 8015fee:	f7ff ffbd 	bl	8015f6c <_ZN8touchgfx7muldivuEmmmRm>
 8015ff2:	9b01      	ldr	r3, [sp, #4]
 8015ff4:	6832      	ldr	r2, [r6, #0]
 8015ff6:	441a      	add	r2, r3
 8015ff8:	fbb2 f3f5 	udiv	r3, r2, r5
 8015ffc:	441c      	add	r4, r3
 8015ffe:	fb05 2513 	mls	r5, r5, r3, r2
 8016002:	443c      	add	r4, r7
 8016004:	4420      	add	r0, r4
 8016006:	e7db      	b.n	8015fc0 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08016008 <_ZN8touchgfx6muldivElllRl>:
 8016008:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801600a:	2800      	cmp	r0, #0
 801600c:	461e      	mov	r6, r3
 801600e:	bfba      	itte	lt
 8016010:	4240      	neglt	r0, r0
 8016012:	f04f 34ff 	movlt.w	r4, #4294967295
 8016016:	2401      	movge	r4, #1
 8016018:	2900      	cmp	r1, #0
 801601a:	bfbc      	itt	lt
 801601c:	4249      	neglt	r1, r1
 801601e:	4264      	neglt	r4, r4
 8016020:	2a00      	cmp	r2, #0
 8016022:	bfb6      	itet	lt
 8016024:	4265      	neglt	r5, r4
 8016026:	4625      	movge	r5, r4
 8016028:	4252      	neglt	r2, r2
 801602a:	4288      	cmp	r0, r1
 801602c:	bfc2      	ittt	gt
 801602e:	4603      	movgt	r3, r0
 8016030:	4608      	movgt	r0, r1
 8016032:	4619      	movgt	r1, r3
 8016034:	ab01      	add	r3, sp, #4
 8016036:	f7ff ff99 	bl	8015f6c <_ZN8touchgfx7muldivuEmmmRm>
 801603a:	9b01      	ldr	r3, [sp, #4]
 801603c:	4368      	muls	r0, r5
 801603e:	435c      	muls	r4, r3
 8016040:	6034      	str	r4, [r6, #0]
 8016042:	b002      	add	sp, #8
 8016044:	bd70      	pop	{r4, r5, r6, pc}

08016046 <_ZN8touchgfx6muldivElll>:
 8016046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016048:	4606      	mov	r6, r0
 801604a:	ab01      	add	r3, sp, #4
 801604c:	460d      	mov	r5, r1
 801604e:	4614      	mov	r4, r2
 8016050:	f7ff ffda 	bl	8016008 <_ZN8touchgfx6muldivElllRl>
 8016054:	2e00      	cmp	r6, #0
 8016056:	db20      	blt.n	801609a <_ZN8touchgfx6muldivElll+0x54>
 8016058:	bf14      	ite	ne
 801605a:	2301      	movne	r3, #1
 801605c:	2300      	moveq	r3, #0
 801605e:	2d00      	cmp	r5, #0
 8016060:	db1e      	blt.n	80160a0 <_ZN8touchgfx6muldivElll+0x5a>
 8016062:	bf14      	ite	ne
 8016064:	2201      	movne	r2, #1
 8016066:	2200      	moveq	r2, #0
 8016068:	2c00      	cmp	r4, #0
 801606a:	fb03 f202 	mul.w	r2, r3, r2
 801606e:	db1a      	blt.n	80160a6 <_ZN8touchgfx6muldivElll+0x60>
 8016070:	bf14      	ite	ne
 8016072:	2301      	movne	r3, #1
 8016074:	2300      	moveq	r3, #0
 8016076:	4353      	muls	r3, r2
 8016078:	2b01      	cmp	r3, #1
 801607a:	d117      	bne.n	80160ac <_ZN8touchgfx6muldivElll+0x66>
 801607c:	2c00      	cmp	r4, #0
 801607e:	9b01      	ldr	r3, [sp, #4]
 8016080:	bfb8      	it	lt
 8016082:	4264      	neglt	r4, r4
 8016084:	2b00      	cmp	r3, #0
 8016086:	f104 0401 	add.w	r4, r4, #1
 801608a:	bfb8      	it	lt
 801608c:	425b      	neglt	r3, r3
 801608e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8016092:	db00      	blt.n	8016096 <_ZN8touchgfx6muldivElll+0x50>
 8016094:	3001      	adds	r0, #1
 8016096:	b002      	add	sp, #8
 8016098:	bd70      	pop	{r4, r5, r6, pc}
 801609a:	f04f 33ff 	mov.w	r3, #4294967295
 801609e:	e7de      	b.n	801605e <_ZN8touchgfx6muldivElll+0x18>
 80160a0:	f04f 32ff 	mov.w	r2, #4294967295
 80160a4:	e7e0      	b.n	8016068 <_ZN8touchgfx6muldivElll+0x22>
 80160a6:	f04f 33ff 	mov.w	r3, #4294967295
 80160aa:	e7e4      	b.n	8016076 <_ZN8touchgfx6muldivElll+0x30>
 80160ac:	3301      	adds	r3, #1
 80160ae:	d1f2      	bne.n	8016096 <_ZN8touchgfx6muldivElll+0x50>
 80160b0:	9b01      	ldr	r3, [sp, #4]
 80160b2:	2c00      	cmp	r4, #0
 80160b4:	bfb8      	it	lt
 80160b6:	4264      	neglt	r4, r4
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	bfb8      	it	lt
 80160bc:	425b      	neglt	r3, r3
 80160be:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80160c2:	bfc8      	it	gt
 80160c4:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80160c8:	e7e5      	b.n	8016096 <_ZN8touchgfx6muldivElll+0x50>

080160ca <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80160ca:	2000      	movs	r0, #0
 80160cc:	4770      	bx	lr

080160ce <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80160ce:	2001      	movs	r0, #1
 80160d0:	4770      	bx	lr

080160d2 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80160d2:	2002      	movs	r0, #2
 80160d4:	4770      	bx	lr

080160d6 <_ZN8touchgfx6ScreenD1Ev>:
 80160d6:	4770      	bx	lr

080160d8 <_ZN8touchgfx12GestureEventD1Ev>:
 80160d8:	4770      	bx	lr

080160da <_ZN8touchgfx9DragEventD1Ev>:
 80160da:	4770      	bx	lr

080160dc <_ZN8touchgfx10ClickEventD1Ev>:
 80160dc:	4770      	bx	lr

080160de <_ZN8touchgfx10ClickEventD0Ev>:
 80160de:	b510      	push	{r4, lr}
 80160e0:	4604      	mov	r4, r0
 80160e2:	210c      	movs	r1, #12
 80160e4:	f00c fd7e 	bl	8022be4 <_ZdlPvj>
 80160e8:	4620      	mov	r0, r4
 80160ea:	bd10      	pop	{r4, pc}

080160ec <_ZN8touchgfx9DragEventD0Ev>:
 80160ec:	b510      	push	{r4, lr}
 80160ee:	4604      	mov	r4, r0
 80160f0:	2110      	movs	r1, #16
 80160f2:	f00c fd77 	bl	8022be4 <_ZdlPvj>
 80160f6:	4620      	mov	r0, r4
 80160f8:	bd10      	pop	{r4, pc}

080160fa <_ZN8touchgfx12GestureEventD0Ev>:
 80160fa:	b510      	push	{r4, lr}
 80160fc:	4604      	mov	r4, r0
 80160fe:	210c      	movs	r1, #12
 8016100:	f00c fd70 	bl	8022be4 <_ZdlPvj>
 8016104:	4620      	mov	r0, r4
 8016106:	bd10      	pop	{r4, pc}

08016108 <_ZN8touchgfx6ScreenD0Ev>:
 8016108:	b510      	push	{r4, lr}
 801610a:	4604      	mov	r4, r0
 801610c:	213c      	movs	r1, #60	@ 0x3c
 801610e:	f00c fd69 	bl	8022be4 <_ZdlPvj>
 8016112:	4620      	mov	r0, r4
 8016114:	bd10      	pop	{r4, pc}
	...

08016118 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016118:	b530      	push	{r4, r5, lr}
 801611a:	460d      	mov	r5, r1
 801611c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801611e:	b087      	sub	sp, #28
 8016120:	4604      	mov	r4, r0
 8016122:	b301      	cbz	r1, 8016166 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016124:	a801      	add	r0, sp, #4
 8016126:	f7ff fab5 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801612a:	892a      	ldrh	r2, [r5, #8]
 801612c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016130:	7928      	ldrb	r0, [r5, #4]
 8016132:	1ad2      	subs	r2, r2, r3
 8016134:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016136:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801613a:	441a      	add	r2, r3
 801613c:	896b      	ldrh	r3, [r5, #10]
 801613e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016142:	f88d 0010 	strb.w	r0, [sp, #16]
 8016146:	1b5b      	subs	r3, r3, r5
 8016148:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801614a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801614c:	442b      	add	r3, r5
 801614e:	4d07      	ldr	r5, [pc, #28]	@ (801616c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016150:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016154:	a903      	add	r1, sp, #12
 8016156:	9503      	str	r5, [sp, #12]
 8016158:	f8ad 2014 	strh.w	r2, [sp, #20]
 801615c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016160:	6803      	ldr	r3, [r0, #0]
 8016162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016164:	4798      	blx	r3
 8016166:	b007      	add	sp, #28
 8016168:	bd30      	pop	{r4, r5, pc}
 801616a:	bf00      	nop
 801616c:	08027980 	.word	0x08027980

08016170 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016174:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016176:	b08a      	sub	sp, #40	@ 0x28
 8016178:	4604      	mov	r4, r0
 801617a:	460d      	mov	r5, r1
 801617c:	b113      	cbz	r3, 8016184 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801617e:	790b      	ldrb	r3, [r1, #4]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d044      	beq.n	801620e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016184:	f104 0804 	add.w	r8, r4, #4
 8016188:	a803      	add	r0, sp, #12
 801618a:	4641      	mov	r1, r8
 801618c:	f7ff fa82 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016190:	792b      	ldrb	r3, [r5, #4]
 8016192:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016196:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801619a:	b983      	cbnz	r3, 80161be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801619c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 80161a0:	892a      	ldrh	r2, [r5, #8]
 80161a2:	88e9      	ldrh	r1, [r5, #6]
 80161a4:	4640      	mov	r0, r8
 80161a6:	1b92      	subs	r2, r2, r6
 80161a8:	9301      	str	r3, [sp, #4]
 80161aa:	1bc9      	subs	r1, r1, r7
 80161ac:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 80161b0:	b212      	sxth	r2, r2
 80161b2:	9300      	str	r3, [sp, #0]
 80161b4:	b209      	sxth	r1, r1
 80161b6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80161ba:	f7f8 f883 	bl	800e2c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80161be:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80161c0:	b329      	cbz	r1, 801620e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80161c2:	a805      	add	r0, sp, #20
 80161c4:	f7ff fa66 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80161c8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80161cc:	792b      	ldrb	r3, [r5, #4]
 80161ce:	a907      	add	r1, sp, #28
 80161d0:	1abf      	subs	r7, r7, r2
 80161d2:	88ea      	ldrh	r2, [r5, #6]
 80161d4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80161d6:	4417      	add	r7, r2
 80161d8:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80161da:	f88d 3020 	strb.w	r3, [sp, #32]
 80161de:	4417      	add	r7, r2
 80161e0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80161e4:	1ab6      	subs	r6, r6, r2
 80161e6:	892a      	ldrh	r2, [r5, #8]
 80161e8:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80161ec:	4416      	add	r6, r2
 80161ee:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80161f0:	4416      	add	r6, r2
 80161f2:	4a08      	ldr	r2, [pc, #32]	@ (8016214 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80161f4:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80161f8:	2600      	movs	r6, #0
 80161fa:	9207      	str	r2, [sp, #28]
 80161fc:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8016200:	6803      	ldr	r3, [r0, #0]
 8016202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016204:	4798      	blx	r3
 8016206:	792b      	ldrb	r3, [r5, #4]
 8016208:	b10b      	cbz	r3, 801620e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801620a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801620e:	b00a      	add	sp, #40	@ 0x28
 8016210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016214:	08027958 	.word	0x08027958

08016218 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801621c:	460c      	mov	r4, r1
 801621e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8016220:	b088      	sub	sp, #32
 8016222:	4605      	mov	r5, r0
 8016224:	2900      	cmp	r1, #0
 8016226:	d06d      	beq.n	8016304 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016228:	4668      	mov	r0, sp
 801622a:	f7ff fa33 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801622e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8016230:	88e3      	ldrh	r3, [r4, #6]
 8016232:	f9bd 8000 	ldrsh.w	r8, [sp]
 8016236:	440b      	add	r3, r1
 8016238:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801623c:	b21b      	sxth	r3, r3
 801623e:	4543      	cmp	r3, r8
 8016240:	db31      	blt.n	80162a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016242:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8016246:	44c4      	add	ip, r8
 8016248:	fa0f fc8c 	sxth.w	ip, ip
 801624c:	4563      	cmp	r3, ip
 801624e:	da2a      	bge.n	80162a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016250:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8016252:	8926      	ldrh	r6, [r4, #8]
 8016254:	4416      	add	r6, r2
 8016256:	b236      	sxth	r6, r6
 8016258:	42be      	cmp	r6, r7
 801625a:	db24      	blt.n	80162a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801625c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016260:	4438      	add	r0, r7
 8016262:	b200      	sxth	r0, r0
 8016264:	4286      	cmp	r6, r0
 8016266:	da1e      	bge.n	80162a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016268:	8963      	ldrh	r3, [r4, #10]
 801626a:	4419      	add	r1, r3
 801626c:	b209      	sxth	r1, r1
 801626e:	4541      	cmp	r1, r8
 8016270:	db08      	blt.n	8016284 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016272:	4561      	cmp	r1, ip
 8016274:	da06      	bge.n	8016284 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016276:	89a3      	ldrh	r3, [r4, #12]
 8016278:	441a      	add	r2, r3
 801627a:	b212      	sxth	r2, r2
 801627c:	42ba      	cmp	r2, r7
 801627e:	db01      	blt.n	8016284 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016280:	4282      	cmp	r2, r0
 8016282:	db10      	blt.n	80162a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016284:	4b21      	ldr	r3, [pc, #132]	@ (801630c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8016286:	a904      	add	r1, sp, #16
 8016288:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801628a:	9304      	str	r3, [sp, #16]
 801628c:	2302      	movs	r3, #2
 801628e:	f88d 3014 	strb.w	r3, [sp, #20]
 8016292:	2300      	movs	r3, #0
 8016294:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016298:	f8ad 3018 	strh.w	r3, [sp, #24]
 801629c:	f8ad 301a 	strh.w	r3, [sp, #26]
 80162a0:	6803      	ldr	r3, [r0, #0]
 80162a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162a4:	4798      	blx	r3
 80162a6:	1d29      	adds	r1, r5, #4
 80162a8:	a802      	add	r0, sp, #8
 80162aa:	f7ff f9f3 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80162ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80162b2:	88e0      	ldrh	r0, [r4, #6]
 80162b4:	eba3 0808 	sub.w	r8, r3, r8
 80162b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80162bc:	7921      	ldrb	r1, [r4, #4]
 80162be:	fa1f f888 	uxth.w	r8, r8
 80162c2:	1bdf      	subs	r7, r3, r7
 80162c4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 80162c8:	b2bb      	uxth	r3, r7
 80162ca:	4440      	add	r0, r8
 80162cc:	8922      	ldrh	r2, [r4, #8]
 80162ce:	8967      	ldrh	r7, [r4, #10]
 80162d0:	4460      	add	r0, ip
 80162d2:	89a4      	ldrh	r4, [r4, #12]
 80162d4:	441a      	add	r2, r3
 80162d6:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 80162d8:	44b8      	add	r8, r7
 80162da:	4423      	add	r3, r4
 80162dc:	f8ad 0016 	strh.w	r0, [sp, #22]
 80162e0:	4432      	add	r2, r6
 80162e2:	44e0      	add	r8, ip
 80162e4:	4433      	add	r3, r6
 80162e6:	4c0a      	ldr	r4, [pc, #40]	@ (8016310 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80162e8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80162ea:	f88d 1014 	strb.w	r1, [sp, #20]
 80162ee:	a904      	add	r1, sp, #16
 80162f0:	9404      	str	r4, [sp, #16]
 80162f2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80162f6:	f8ad 801a 	strh.w	r8, [sp, #26]
 80162fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80162fe:	6803      	ldr	r3, [r0, #0]
 8016300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016302:	4798      	blx	r3
 8016304:	b008      	add	sp, #32
 8016306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801630a:	bf00      	nop
 801630c:	08027958 	.word	0x08027958
 8016310:	0802796c 	.word	0x0802796c

08016314 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8016314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016316:	4604      	mov	r4, r0
 8016318:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801631c:	3201      	adds	r2, #1
 801631e:	d112      	bne.n	8016346 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016320:	2500      	movs	r5, #0
 8016322:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016326:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801632a:	6803      	ldr	r3, [r0, #0]
 801632c:	9500      	str	r5, [sp, #0]
 801632e:	466d      	mov	r5, sp
 8016330:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016334:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016338:	4629      	mov	r1, r5
 801633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801633c:	4798      	blx	r3
 801633e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016342:	e884 0003 	stmia.w	r4, {r0, r1}
 8016346:	4620      	mov	r0, r4
 8016348:	b003      	add	sp, #12
 801634a:	bd30      	pop	{r4, r5, pc}

0801634c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801634c:	b513      	push	{r0, r1, r4, lr}
 801634e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016352:	4604      	mov	r4, r0
 8016354:	3301      	adds	r3, #1
 8016356:	d109      	bne.n	801636c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016358:	4601      	mov	r1, r0
 801635a:	4668      	mov	r0, sp
 801635c:	f7ff f99a 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016360:	f8bd 3000 	ldrh.w	r3, [sp]
 8016364:	8423      	strh	r3, [r4, #32]
 8016366:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801636a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801636c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016370:	b002      	add	sp, #8
 8016372:	bd10      	pop	{r4, pc}

08016374 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8016374:	b513      	push	{r0, r1, r4, lr}
 8016376:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801637a:	4604      	mov	r4, r0
 801637c:	3301      	adds	r3, #1
 801637e:	d109      	bne.n	8016394 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016380:	4601      	mov	r1, r0
 8016382:	4668      	mov	r0, sp
 8016384:	f7ff f986 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016388:	f8bd 3000 	ldrh.w	r3, [sp]
 801638c:	8423      	strh	r3, [r4, #32]
 801638e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016392:	8463      	strh	r3, [r4, #34]	@ 0x22
 8016394:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8016398:	b002      	add	sp, #8
 801639a:	bd10      	pop	{r4, pc}

0801639c <_ZN8touchgfx6ScreenC1Ev>:
 801639c:	b570      	push	{r4, r5, r6, lr}
 801639e:	4b17      	ldr	r3, [pc, #92]	@ (80163fc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80163a0:	4605      	mov	r5, r0
 80163a2:	4a17      	ldr	r2, [pc, #92]	@ (8016400 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80163a4:	2101      	movs	r1, #1
 80163a6:	f845 3b04 	str.w	r3, [r5], #4
 80163aa:	2300      	movs	r3, #0
 80163ac:	6042      	str	r2, [r0, #4]
 80163ae:	4604      	mov	r4, r0
 80163b0:	8103      	strh	r3, [r0, #8]
 80163b2:	8143      	strh	r3, [r0, #10]
 80163b4:	8183      	strh	r3, [r0, #12]
 80163b6:	81c3      	strh	r3, [r0, #14]
 80163b8:	8203      	strh	r3, [r0, #16]
 80163ba:	8243      	strh	r3, [r0, #18]
 80163bc:	8283      	strh	r3, [r0, #20]
 80163be:	82c3      	strh	r3, [r0, #22]
 80163c0:	6203      	str	r3, [r0, #32]
 80163c2:	8483      	strh	r3, [r0, #36]	@ 0x24
 80163c4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80163c6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80163ca:	6343      	str	r3, [r0, #52]	@ 0x34
 80163cc:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80163d0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80163d4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80163d8:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80163dc:	4b09      	ldr	r3, [pc, #36]	@ (8016404 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80163de:	4628      	mov	r0, r5
 80163e0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80163e4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80163e6:	4a08      	ldr	r2, [pc, #32]	@ (8016408 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80163e8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80163ec:	4798      	blx	r3
 80163ee:	6863      	ldr	r3, [r4, #4]
 80163f0:	4628      	mov	r0, r5
 80163f2:	4631      	mov	r1, r6
 80163f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80163f6:	4798      	blx	r3
 80163f8:	4620      	mov	r0, r4
 80163fa:	bd70      	pop	{r4, r5, r6, pc}
 80163fc:	08027994 	.word	0x08027994
 8016400:	080273a4 	.word	0x080273a4
 8016404:	240252f2 	.word	0x240252f2
 8016408:	240252f0 	.word	0x240252f0

0801640c <_ZN8touchgfx6Screen4drawEv>:
 801640c:	4b09      	ldr	r3, [pc, #36]	@ (8016434 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801640e:	b507      	push	{r0, r1, r2, lr}
 8016410:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016414:	2100      	movs	r1, #0
 8016416:	4b08      	ldr	r3, [pc, #32]	@ (8016438 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8016418:	9100      	str	r1, [sp, #0]
 801641a:	4669      	mov	r1, sp
 801641c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016420:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016424:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016428:	6803      	ldr	r3, [r0, #0]
 801642a:	689b      	ldr	r3, [r3, #8]
 801642c:	4798      	blx	r3
 801642e:	b003      	add	sp, #12
 8016430:	f85d fb04 	ldr.w	pc, [sp], #4
 8016434:	240252f0 	.word	0x240252f0
 8016438:	240252f2 	.word	0x240252f2

0801643c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016440:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016444:	b089      	sub	sp, #36	@ 0x24
 8016446:	4680      	mov	r8, r0
 8016448:	460c      	mov	r4, r1
 801644a:	2b00      	cmp	r3, #0
 801644c:	4615      	mov	r5, r2
 801644e:	dd0e      	ble.n	801646e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016450:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016454:	2b00      	cmp	r3, #0
 8016456:	dd0a      	ble.n	801646e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016458:	4628      	mov	r0, r5
 801645a:	f7ff ff5b 	bl	8016314 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801645e:	4621      	mov	r1, r4
 8016460:	f7fd fdbd 	bl	8013fde <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016464:	69eb      	ldr	r3, [r5, #28]
 8016466:	b928      	cbnz	r0, 8016474 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8016468:	461d      	mov	r5, r3
 801646a:	2b00      	cmp	r3, #0
 801646c:	d1f4      	bne.n	8016458 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801646e:	b009      	add	sp, #36	@ 0x24
 8016470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016474:	ae04      	add	r6, sp, #16
 8016476:	2b00      	cmp	r3, #0
 8016478:	f000 80b5 	beq.w	80165e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801647c:	682b      	ldr	r3, [r5, #0]
 801647e:	4629      	mov	r1, r5
 8016480:	a802      	add	r0, sp, #8
 8016482:	68db      	ldr	r3, [r3, #12]
 8016484:	4798      	blx	r3
 8016486:	4628      	mov	r0, r5
 8016488:	f7ff ff60 	bl	801634c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801648c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016490:	4407      	add	r7, r0
 8016492:	4628      	mov	r0, r5
 8016494:	f7ff ff6e 	bl	8016374 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016498:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801649c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80164a0:	b23f      	sxth	r7, r7
 80164a2:	4418      	add	r0, r3
 80164a4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80164a8:	4621      	mov	r1, r4
 80164aa:	f8ad 2014 	strh.w	r2, [sp, #20]
 80164ae:	f8ad 0012 	strh.w	r0, [sp, #18]
 80164b2:	4630      	mov	r0, r6
 80164b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80164b8:	f8ad 7010 	strh.w	r7, [sp, #16]
 80164bc:	f7f7 ffe4 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 80164c0:	4628      	mov	r0, r5
 80164c2:	f7ff ff27 	bl	8016314 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80164c6:	ab06      	add	r3, sp, #24
 80164c8:	4602      	mov	r2, r0
 80164ca:	e896 0003 	ldmia.w	r6, {r0, r1}
 80164ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80164d2:	4611      	mov	r1, r2
 80164d4:	4618      	mov	r0, r3
 80164d6:	f7f7 ffd7 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 80164da:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80164de:	f9b4 1000 	ldrsh.w	r1, [r4]
 80164e2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80164e6:	4299      	cmp	r1, r3
 80164e8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80164ec:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80164f0:	d10b      	bne.n	801650a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80164f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80164f6:	4552      	cmp	r2, sl
 80164f8:	d107      	bne.n	801650a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80164fa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80164fe:	455a      	cmp	r2, fp
 8016500:	d103      	bne.n	801650a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016502:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016506:	454a      	cmp	r2, r9
 8016508:	d06d      	beq.n	80165e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801650a:	f1bb 0f00 	cmp.w	fp, #0
 801650e:	dd65      	ble.n	80165dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016510:	f1b9 0f00 	cmp.w	r9, #0
 8016514:	dd62      	ble.n	80165dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016516:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801651a:	fa1f f08a 	uxth.w	r0, sl
 801651e:	4552      	cmp	r2, sl
 8016520:	9000      	str	r0, [sp, #0]
 8016522:	da12      	bge.n	801654a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8016524:	9301      	str	r3, [sp, #4]
 8016526:	9b00      	ldr	r3, [sp, #0]
 8016528:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801652c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016530:	1a9a      	subs	r2, r3, r2
 8016532:	f8ad 1010 	strh.w	r1, [sp, #16]
 8016536:	4631      	mov	r1, r6
 8016538:	f8ad 0014 	strh.w	r0, [sp, #20]
 801653c:	4640      	mov	r0, r8
 801653e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016542:	69ea      	ldr	r2, [r5, #28]
 8016544:	f7ff ff7a 	bl	801643c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016548:	9b01      	ldr	r3, [sp, #4]
 801654a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801654e:	b29f      	uxth	r7, r3
 8016550:	429a      	cmp	r2, r3
 8016552:	da0d      	bge.n	8016570 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8016554:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016558:	1aba      	subs	r2, r7, r2
 801655a:	f8ad a012 	strh.w	sl, [sp, #18]
 801655e:	4631      	mov	r1, r6
 8016560:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016564:	4640      	mov	r0, r8
 8016566:	f8ad 9016 	strh.w	r9, [sp, #22]
 801656a:	69ea      	ldr	r2, [r5, #28]
 801656c:	f7ff ff66 	bl	801643c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016570:	8822      	ldrh	r2, [r4, #0]
 8016572:	445f      	add	r7, fp
 8016574:	88a3      	ldrh	r3, [r4, #4]
 8016576:	b2bf      	uxth	r7, r7
 8016578:	4413      	add	r3, r2
 801657a:	b23a      	sxth	r2, r7
 801657c:	b29b      	uxth	r3, r3
 801657e:	b219      	sxth	r1, r3
 8016580:	4291      	cmp	r1, r2
 8016582:	dd0d      	ble.n	80165a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8016584:	1bdb      	subs	r3, r3, r7
 8016586:	f8ad 2010 	strh.w	r2, [sp, #16]
 801658a:	f8ad a012 	strh.w	sl, [sp, #18]
 801658e:	4631      	mov	r1, r6
 8016590:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016594:	4640      	mov	r0, r8
 8016596:	f8ad 9016 	strh.w	r9, [sp, #22]
 801659a:	69ea      	ldr	r2, [r5, #28]
 801659c:	f7ff ff4e 	bl	801643c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80165a0:	88e2      	ldrh	r2, [r4, #6]
 80165a2:	8863      	ldrh	r3, [r4, #2]
 80165a4:	4413      	add	r3, r2
 80165a6:	9a00      	ldr	r2, [sp, #0]
 80165a8:	444a      	add	r2, r9
 80165aa:	b29b      	uxth	r3, r3
 80165ac:	fa1f f982 	uxth.w	r9, r2
 80165b0:	b219      	sxth	r1, r3
 80165b2:	fa0f f289 	sxth.w	r2, r9
 80165b6:	428a      	cmp	r2, r1
 80165b8:	da15      	bge.n	80165e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80165ba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80165be:	eba3 0309 	sub.w	r3, r3, r9
 80165c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80165c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80165ca:	4631      	mov	r1, r6
 80165cc:	f8ad 0010 	strh.w	r0, [sp, #16]
 80165d0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80165d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165d8:	69ea      	ldr	r2, [r5, #28]
 80165da:	e001      	b.n	80165e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80165dc:	69ea      	ldr	r2, [r5, #28]
 80165de:	4621      	mov	r1, r4
 80165e0:	4640      	mov	r0, r8
 80165e2:	f7ff ff2b 	bl	801643c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80165e6:	4628      	mov	r0, r5
 80165e8:	f7ff fe94 	bl	8016314 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80165ec:	6861      	ldr	r1, [r4, #4]
 80165ee:	4602      	mov	r2, r0
 80165f0:	4633      	mov	r3, r6
 80165f2:	6820      	ldr	r0, [r4, #0]
 80165f4:	c303      	stmia	r3!, {r0, r1}
 80165f6:	4611      	mov	r1, r2
 80165f8:	4630      	mov	r0, r6
 80165fa:	f7f7 ff45 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 80165fe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016602:	2b00      	cmp	r3, #0
 8016604:	f77f af33 	ble.w	801646e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016608:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801660c:	2b00      	cmp	r3, #0
 801660e:	f77f af2e 	ble.w	801646e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016612:	4628      	mov	r0, r5
 8016614:	f7ff fe9a 	bl	801634c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016618:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801661c:	1a18      	subs	r0, r3, r0
 801661e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016622:	4628      	mov	r0, r5
 8016624:	f7ff fea6 	bl	8016374 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016628:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801662c:	4631      	mov	r1, r6
 801662e:	1a18      	subs	r0, r3, r0
 8016630:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016634:	4628      	mov	r0, r5
 8016636:	682b      	ldr	r3, [r5, #0]
 8016638:	689b      	ldr	r3, [r3, #8]
 801663a:	4798      	blx	r3
 801663c:	e717      	b.n	801646e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801663e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801663e:	b570      	push	{r4, r5, r6, lr}
 8016640:	1d06      	adds	r6, r0, #4
 8016642:	b086      	sub	sp, #24
 8016644:	460c      	mov	r4, r1
 8016646:	2300      	movs	r3, #0
 8016648:	4631      	mov	r1, r6
 801664a:	4605      	mov	r5, r0
 801664c:	a802      	add	r0, sp, #8
 801664e:	9301      	str	r3, [sp, #4]
 8016650:	f7ff f820 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016654:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016658:	8822      	ldrh	r2, [r4, #0]
 801665a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801665e:	1ad2      	subs	r2, r2, r3
 8016660:	8863      	ldrh	r3, [r4, #2]
 8016662:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016666:	1a5b      	subs	r3, r3, r1
 8016668:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801666c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016670:	aa01      	add	r2, sp, #4
 8016672:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016676:	4630      	mov	r0, r6
 8016678:	f8ad 1016 	strh.w	r1, [sp, #22]
 801667c:	a904      	add	r1, sp, #16
 801667e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016682:	f7f7 ffd9 	bl	800e638 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8016686:	9a01      	ldr	r2, [sp, #4]
 8016688:	b11a      	cbz	r2, 8016692 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801668a:	4621      	mov	r1, r4
 801668c:	4628      	mov	r0, r5
 801668e:	f7ff fed5 	bl	801643c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016692:	b006      	add	sp, #24
 8016694:	bd70      	pop	{r4, r5, r6, pc}

08016696 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016696:	4602      	mov	r2, r0
 8016698:	b530      	push	{r4, r5, lr}
 801669a:	4604      	mov	r4, r0
 801669c:	b085      	sub	sp, #20
 801669e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80166a2:	460d      	mov	r5, r1
 80166a4:	466b      	mov	r3, sp
 80166a6:	6851      	ldr	r1, [r2, #4]
 80166a8:	c303      	stmia	r3!, {r0, r1}
 80166aa:	4629      	mov	r1, r5
 80166ac:	4668      	mov	r0, sp
 80166ae:	f7f7 feeb 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 80166b2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80166b6:	b12b      	cbz	r3, 80166c4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80166b8:	4669      	mov	r1, sp
 80166ba:	4620      	mov	r0, r4
 80166bc:	f7ff ffbf 	bl	801663e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80166c0:	b005      	add	sp, #20
 80166c2:	bd30      	pop	{r4, r5, pc}
 80166c4:	3404      	adds	r4, #4
 80166c6:	a802      	add	r0, sp, #8
 80166c8:	4621      	mov	r1, r4
 80166ca:	f7fe ffe3 	bl	8015694 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80166ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80166d2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80166d6:	4669      	mov	r1, sp
 80166d8:	4620      	mov	r0, r4
 80166da:	1a9b      	subs	r3, r3, r2
 80166dc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80166e0:	f8ad 3000 	strh.w	r3, [sp]
 80166e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80166e8:	1a9b      	subs	r3, r3, r2
 80166ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80166ee:	f7f7 ff6a 	bl	800e5c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80166f2:	e7e5      	b.n	80166c0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080166f4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80166f4:	460b      	mov	r3, r1
 80166f6:	680a      	ldr	r2, [r1, #0]
 80166f8:	1d01      	adds	r1, r0, #4
 80166fa:	6992      	ldr	r2, [r2, #24]
 80166fc:	4618      	mov	r0, r3
 80166fe:	4710      	bx	r2

08016700 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8016700:	4298      	cmp	r0, r3
 8016702:	d200      	bcs.n	8016706 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8016704:	b913      	cbnz	r3, 801670c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8016706:	440a      	add	r2, r1
 8016708:	b210      	sxth	r0, r2
 801670a:	4770      	bx	lr
 801670c:	ee07 0a90 	vmov	s15, r0
 8016710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016714:	ee07 3a90 	vmov	s15, r3
 8016718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801671c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016720:	ee07 2a90 	vmov	s15, r2
 8016724:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016728:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801672c:	ee07 1a90 	vmov	s15, r1
 8016730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016734:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016738:	ee67 5a07 	vmul.f32	s11, s14, s14
 801673c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016740:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8016744:	eee6 7a26 	vfma.f32	s15, s12, s13
 8016748:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801674c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016750:	bfcc      	ite	gt
 8016752:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8016756:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801675a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801675e:	ee17 3a90 	vmov	r3, s15
 8016762:	b218      	sxth	r0, r3
 8016764:	4770      	bx	lr

08016766 <_ZN8touchgfx12TextProviderC1Ev>:
 8016766:	b538      	push	{r3, r4, r5, lr}
 8016768:	2500      	movs	r5, #0
 801676a:	2302      	movs	r3, #2
 801676c:	4604      	mov	r4, r0
 801676e:	220e      	movs	r2, #14
 8016770:	7403      	strb	r3, [r0, #16]
 8016772:	4629      	mov	r1, r5
 8016774:	6145      	str	r5, [r0, #20]
 8016776:	7605      	strb	r5, [r0, #24]
 8016778:	83c5      	strh	r5, [r0, #30]
 801677a:	8405      	strh	r5, [r0, #32]
 801677c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801677e:	8705      	strh	r5, [r0, #56]	@ 0x38
 8016780:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8016782:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8016786:	e9c0 5500 	strd	r5, r5, [r0]
 801678a:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801678e:	304c      	adds	r0, #76	@ 0x4c
 8016790:	f00d f83a 	bl	8023808 <memset>
 8016794:	2301      	movs	r3, #1
 8016796:	4620      	mov	r0, r4
 8016798:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801679c:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80167a0:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 80167a4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 80167a8:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 80167ac:	f7ee fb92 	bl	8004ed4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80167b0:	4620      	mov	r0, r4
 80167b2:	bd38      	pop	{r3, r4, r5, pc}

080167b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80167b4:	b530      	push	{r4, r5, lr}
 80167b6:	2500      	movs	r5, #0
 80167b8:	2401      	movs	r4, #1
 80167ba:	6843      	ldr	r3, [r0, #4]
 80167bc:	b913      	cbnz	r3, 80167c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80167be:	6803      	ldr	r3, [r0, #0]
 80167c0:	b313      	cbz	r3, 8016808 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80167c2:	6043      	str	r3, [r0, #4]
 80167c4:	7e03      	ldrb	r3, [r0, #24]
 80167c6:	b143      	cbz	r3, 80167da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80167c8:	6943      	ldr	r3, [r0, #20]
 80167ca:	b12b      	cbz	r3, 80167d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80167cc:	881a      	ldrh	r2, [r3, #0]
 80167ce:	b11a      	cbz	r2, 80167d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80167d0:	1c9a      	adds	r2, r3, #2
 80167d2:	6142      	str	r2, [r0, #20]
 80167d4:	8818      	ldrh	r0, [r3, #0]
 80167d6:	bd30      	pop	{r4, r5, pc}
 80167d8:	7605      	strb	r5, [r0, #24]
 80167da:	6843      	ldr	r3, [r0, #4]
 80167dc:	8819      	ldrh	r1, [r3, #0]
 80167de:	b199      	cbz	r1, 8016808 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80167e0:	1c9a      	adds	r2, r3, #2
 80167e2:	2902      	cmp	r1, #2
 80167e4:	6042      	str	r2, [r0, #4]
 80167e6:	d1f5      	bne.n	80167d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80167e8:	7c03      	ldrb	r3, [r0, #16]
 80167ea:	2b01      	cmp	r3, #1
 80167ec:	d8e5      	bhi.n	80167ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80167ee:	1c5a      	adds	r2, r3, #1
 80167f0:	3302      	adds	r3, #2
 80167f2:	7402      	strb	r2, [r0, #16]
 80167f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80167f8:	6143      	str	r3, [r0, #20]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d0dd      	beq.n	80167ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80167fe:	881b      	ldrh	r3, [r3, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d0da      	beq.n	80167ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016804:	7604      	strb	r4, [r0, #24]
 8016806:	e7d8      	b.n	80167ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016808:	2000      	movs	r0, #0
 801680a:	e7e4      	b.n	80167d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801680c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801680c:	6001      	str	r1, [r0, #0]
 801680e:	2100      	movs	r1, #0
 8016810:	b430      	push	{r4, r5}
 8016812:	6041      	str	r1, [r0, #4]
 8016814:	6815      	ldr	r5, [r2, #0]
 8016816:	6085      	str	r5, [r0, #8]
 8016818:	6852      	ldr	r2, [r2, #4]
 801681a:	6443      	str	r3, [r0, #68]	@ 0x44
 801681c:	9b02      	ldr	r3, [sp, #8]
 801681e:	60c2      	str	r2, [r0, #12]
 8016820:	7401      	strb	r1, [r0, #16]
 8016822:	6141      	str	r1, [r0, #20]
 8016824:	7601      	strb	r1, [r0, #24]
 8016826:	8701      	strh	r1, [r0, #56]	@ 0x38
 8016828:	8401      	strh	r1, [r0, #32]
 801682a:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801682e:	6483      	str	r3, [r0, #72]	@ 0x48
 8016830:	bc30      	pop	{r4, r5}
 8016832:	f7ee bb4f 	b.w	8004ed4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08016836 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016838:	4605      	mov	r5, r0
 801683a:	4608      	mov	r0, r1
 801683c:	b1f1      	cbz	r1, 801687c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801683e:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8016842:	460b      	mov	r3, r1
 8016844:	f101 0708 	add.w	r7, r1, #8
 8016848:	4622      	mov	r2, r4
 801684a:	6818      	ldr	r0, [r3, #0]
 801684c:	3308      	adds	r3, #8
 801684e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016852:	4626      	mov	r6, r4
 8016854:	42bb      	cmp	r3, r7
 8016856:	c603      	stmia	r6!, {r0, r1}
 8016858:	4634      	mov	r4, r6
 801685a:	d1f6      	bne.n	801684a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801685c:	6818      	ldr	r0, [r3, #0]
 801685e:	6030      	str	r0, [r6, #0]
 8016860:	4610      	mov	r0, r2
 8016862:	889b      	ldrh	r3, [r3, #4]
 8016864:	80b3      	strh	r3, [r6, #4]
 8016866:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801686a:	015b      	lsls	r3, r3, #5
 801686c:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016870:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8016874:	430b      	orrs	r3, r1
 8016876:	425b      	negs	r3, r3
 8016878:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801687c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801687e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801687e:	b538      	push	{r3, r4, r5, lr}
 8016880:	460c      	mov	r4, r1
 8016882:	6811      	ldr	r1, [r2, #0]
 8016884:	4610      	mov	r0, r2
 8016886:	68cd      	ldr	r5, [r1, #12]
 8016888:	4619      	mov	r1, r3
 801688a:	47a8      	blx	r5
 801688c:	2800      	cmp	r0, #0
 801688e:	bf08      	it	eq
 8016890:	4620      	moveq	r0, r4
 8016892:	bd38      	pop	{r3, r4, r5, pc}

08016894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016898:	468c      	mov	ip, r1
 801689a:	4605      	mov	r5, r0
 801689c:	4614      	mov	r4, r2
 801689e:	b942      	cbnz	r2, 80168b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 80168a0:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 80168a4:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 80168a8:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 80168ac:	4620      	mov	r0, r4
 80168ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168b2:	7b50      	ldrb	r0, [r2, #13]
 80168b4:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 80168b8:	8893      	ldrh	r3, [r2, #4]
 80168ba:	0106      	lsls	r6, r0, #4
 80168bc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80168c0:	79e6      	ldrb	r6, [r4, #7]
 80168c2:	4316      	orrs	r6, r2
 80168c4:	185a      	adds	r2, r3, r1
 80168c6:	b291      	uxth	r1, r2
 80168c8:	b2b7      	uxth	r7, r6
 80168ca:	291d      	cmp	r1, #29
 80168cc:	d87f      	bhi.n	80169ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80168ce:	2201      	movs	r2, #1
 80168d0:	10f6      	asrs	r6, r6, #3
 80168d2:	408a      	lsls	r2, r1
 80168d4:	498b      	ldr	r1, [pc, #556]	@ (8016b04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 80168d6:	420a      	tst	r2, r1
 80168d8:	d12e      	bne.n	8016938 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80168da:	f412 7f60 	tst.w	r2, #896	@ 0x380
 80168de:	d076      	beq.n	80169ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80168e0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80168e4:	4623      	mov	r3, r4
 80168e6:	f104 0e08 	add.w	lr, r4, #8
 80168ea:	4614      	mov	r4, r2
 80168ec:	6818      	ldr	r0, [r3, #0]
 80168ee:	3308      	adds	r3, #8
 80168f0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80168f4:	4694      	mov	ip, r2
 80168f6:	4573      	cmp	r3, lr
 80168f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80168fc:	4662      	mov	r2, ip
 80168fe:	d1f5      	bne.n	80168ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8016900:	6818      	ldr	r0, [r3, #0]
 8016902:	f8cc 0000 	str.w	r0, [ip]
 8016906:	889b      	ldrh	r3, [r3, #4]
 8016908:	f8ac 3004 	strh.w	r3, [ip, #4]
 801690c:	b2b3      	uxth	r3, r6
 801690e:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8016912:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8016916:	1aca      	subs	r2, r1, r3
 8016918:	1bcf      	subs	r7, r1, r7
 801691a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801691e:	b292      	uxth	r2, r2
 8016920:	1afb      	subs	r3, r7, r3
 8016922:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8016926:	10d2      	asrs	r2, r2, #3
 8016928:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801692c:	4302      	orrs	r2, r0
 801692e:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8016932:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8016936:	e7b9      	b.n	80168ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8016938:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801693c:	4623      	mov	r3, r4
 801693e:	f104 0808 	add.w	r8, r4, #8
 8016942:	4614      	mov	r4, r2
 8016944:	6818      	ldr	r0, [r3, #0]
 8016946:	3308      	adds	r3, #8
 8016948:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801694c:	4696      	mov	lr, r2
 801694e:	4543      	cmp	r3, r8
 8016950:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016954:	4672      	mov	r2, lr
 8016956:	d1f5      	bne.n	8016944 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8016958:	6818      	ldr	r0, [r3, #0]
 801695a:	f8ce 0000 	str.w	r0, [lr]
 801695e:	889b      	ldrh	r3, [r3, #4]
 8016960:	f8ae 3004 	strh.w	r3, [lr, #4]
 8016964:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8016966:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801696a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801696c:	f640 6333 	movw	r3, #3635	@ 0xe33
 8016970:	4299      	cmp	r1, r3
 8016972:	d111      	bne.n	8016998 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8016974:	f8dc 3000 	ldr.w	r3, [ip]
 8016978:	4660      	mov	r0, ip
 801697a:	68db      	ldr	r3, [r3, #12]
 801697c:	4798      	blx	r3
 801697e:	7b41      	ldrb	r1, [r0, #13]
 8016980:	00cb      	lsls	r3, r1, #3
 8016982:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016986:	7a03      	ldrb	r3, [r0, #8]
 8016988:	4313      	orrs	r3, r2
 801698a:	064a      	lsls	r2, r1, #25
 801698c:	bf44      	itt	mi
 801698e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016992:	b21b      	sxthmi	r3, r3
 8016994:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016998:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801699c:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 80169a0:	443b      	add	r3, r7
 80169a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80169a6:	4433      	add	r3, r6
 80169a8:	b29b      	uxth	r3, r3
 80169aa:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80169ae:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 80169b2:	10db      	asrs	r3, r3, #3
 80169b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80169b8:	4313      	orrs	r3, r2
 80169ba:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 80169be:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 80169c2:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 80169c6:	1a9b      	subs	r3, r3, r2
 80169c8:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80169cc:	e76e      	b.n	80168ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80169ce:	f023 0204 	bic.w	r2, r3, #4
 80169d2:	f640 611b 	movw	r1, #3611	@ 0xe1b
 80169d6:	428a      	cmp	r2, r1
 80169d8:	d003      	beq.n	80169e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 80169da:	f640 621d 	movw	r2, #3613	@ 0xe1d
 80169de:	4293      	cmp	r3, r2
 80169e0:	d138      	bne.n	8016a54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 80169e2:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 80169e6:	4622      	mov	r2, r4
 80169e8:	f104 0808 	add.w	r8, r4, #8
 80169ec:	4634      	mov	r4, r6
 80169ee:	6810      	ldr	r0, [r2, #0]
 80169f0:	3208      	adds	r2, #8
 80169f2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80169f6:	46b6      	mov	lr, r6
 80169f8:	4542      	cmp	r2, r8
 80169fa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80169fe:	4676      	mov	r6, lr
 8016a00:	d1f5      	bne.n	80169ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8016a02:	6810      	ldr	r0, [r2, #0]
 8016a04:	3b01      	subs	r3, #1
 8016a06:	4621      	mov	r1, r4
 8016a08:	f8ce 0000 	str.w	r0, [lr]
 8016a0c:	b29b      	uxth	r3, r3
 8016a0e:	8892      	ldrh	r2, [r2, #4]
 8016a10:	4628      	mov	r0, r5
 8016a12:	f8ae 2004 	strh.w	r2, [lr, #4]
 8016a16:	4662      	mov	r2, ip
 8016a18:	f7ff ff31 	bl	801687e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016a1c:	7b41      	ldrb	r1, [r0, #13]
 8016a1e:	00cb      	lsls	r3, r1, #3
 8016a20:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016a24:	7a03      	ldrb	r3, [r0, #8]
 8016a26:	0648      	lsls	r0, r1, #25
 8016a28:	ea43 0302 	orr.w	r3, r3, r2
 8016a2c:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8016a30:	bf44      	itt	mi
 8016a32:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016a36:	b21b      	sxthmi	r3, r3
 8016a38:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016a3c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8016a40:	005b      	lsls	r3, r3, #1
 8016a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016a46:	4313      	orrs	r3, r2
 8016a48:	115a      	asrs	r2, r3, #5
 8016a4a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016a4e:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8016a52:	e047      	b.n	8016ae4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8016a54:	00c2      	lsls	r2, r0, #3
 8016a56:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8016a5a:	7a22      	ldrb	r2, [r4, #8]
 8016a5c:	430a      	orrs	r2, r1
 8016a5e:	0641      	lsls	r1, r0, #25
 8016a60:	f640 6109 	movw	r1, #3593	@ 0xe09
 8016a64:	bf44      	itt	mi
 8016a66:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8016a6a:	b212      	sxthmi	r2, r2
 8016a6c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8016a70:	f023 0210 	bic.w	r2, r3, #16
 8016a74:	428a      	cmp	r2, r1
 8016a76:	d003      	beq.n	8016a80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8016a78:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016a7c:	4293      	cmp	r3, r2
 8016a7e:	d13e      	bne.n	8016afe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8016a80:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016a84:	f104 0808 	add.w	r8, r4, #8
 8016a88:	4696      	mov	lr, r2
 8016a8a:	6820      	ldr	r0, [r4, #0]
 8016a8c:	3408      	adds	r4, #8
 8016a8e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8016a92:	4616      	mov	r6, r2
 8016a94:	4544      	cmp	r4, r8
 8016a96:	c603      	stmia	r6!, {r0, r1}
 8016a98:	4632      	mov	r2, r6
 8016a9a:	d1f6      	bne.n	8016a8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8016a9c:	6820      	ldr	r0, [r4, #0]
 8016a9e:	6030      	str	r0, [r6, #0]
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	88a1      	ldrh	r1, [r4, #4]
 8016aa4:	4674      	mov	r4, lr
 8016aa6:	80b1      	strh	r1, [r6, #4]
 8016aa8:	4671      	mov	r1, lr
 8016aaa:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8016aae:	0076      	lsls	r6, r6, #1
 8016ab0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016ab4:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8016ab8:	4316      	orrs	r6, r2
 8016aba:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016abe:	4293      	cmp	r3, r2
 8016ac0:	4662      	mov	r2, ip
 8016ac2:	bf16      	itet	ne
 8016ac4:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016ac8:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8016acc:	b29b      	uxthne	r3, r3
 8016ace:	f7ff fed6 	bl	801687e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016ad2:	7b43      	ldrb	r3, [r0, #13]
 8016ad4:	7a82      	ldrb	r2, [r0, #10]
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016adc:	4313      	orrs	r3, r2
 8016ade:	1af6      	subs	r6, r6, r3
 8016ae0:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8016ae4:	7b61      	ldrb	r1, [r4, #13]
 8016ae6:	00cb      	lsls	r3, r1, #3
 8016ae8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016aec:	7a23      	ldrb	r3, [r4, #8]
 8016aee:	4313      	orrs	r3, r2
 8016af0:	064a      	lsls	r2, r1, #25
 8016af2:	bf44      	itt	mi
 8016af4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016af8:	b21b      	sxthmi	r3, r3
 8016afa:	1bdb      	subs	r3, r3, r7
 8016afc:	e719      	b.n	8016932 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016afe:	2300      	movs	r3, #0
 8016b00:	e7a5      	b.n	8016a4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8016b02:	bf00      	nop
 8016b04:	3fc00079 	.word	0x3fc00079

08016b08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b0c:	4604      	mov	r4, r0
 8016b0e:	b942      	cbnz	r2, 8016b22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016b10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016b14:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8016b18:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8016b1c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8016b20:	e047      	b.n	8016bb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016b22:	7b51      	ldrb	r1, [r2, #13]
 8016b24:	8893      	ldrh	r3, [r2, #4]
 8016b26:	010d      	lsls	r5, r1, #4
 8016b28:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8016b2c:	79d5      	ldrb	r5, [r2, #7]
 8016b2e:	4305      	orrs	r5, r0
 8016b30:	2d04      	cmp	r5, #4
 8016b32:	bfcc      	ite	gt
 8016b34:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016b38:	f04f 0e01 	movle.w	lr, #1
 8016b3c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8016b40:	f200 80ab 	bhi.w	8016c9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8016b44:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8016b48:	4283      	cmp	r3, r0
 8016b4a:	d216      	bcs.n	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b4c:	f240 605b 	movw	r0, #1627	@ 0x65b
 8016b50:	4283      	cmp	r3, r0
 8016b52:	d859      	bhi.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8016b54:	f240 6057 	movw	r0, #1623	@ 0x657
 8016b58:	4283      	cmp	r3, r0
 8016b5a:	d20e      	bcs.n	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b5c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016b60:	d24a      	bcs.n	8016bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8016b62:	f240 604e 	movw	r0, #1614	@ 0x64e
 8016b66:	4283      	cmp	r3, r0
 8016b68:	d207      	bcs.n	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b6a:	f240 601a 	movw	r0, #1562	@ 0x61a
 8016b6e:	4283      	cmp	r3, r0
 8016b70:	d02a      	beq.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016b72:	d821      	bhi.n	8016bb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8016b74:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8016b78:	d35b      	bcc.n	8016c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016b7a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8016b7e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016b82:	f040 80d0 	bne.w	8016d26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016b86:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8016b8a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016b8e:	f040 80ca 	bne.w	8016d26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016b92:	00cb      	lsls	r3, r1, #3
 8016b94:	0649      	lsls	r1, r1, #25
 8016b96:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016b9a:	7a13      	ldrb	r3, [r2, #8]
 8016b9c:	ea43 0300 	orr.w	r3, r3, r0
 8016ba0:	bf44      	itt	mi
 8016ba2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016ba6:	b21b      	sxthmi	r3, r3
 8016ba8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016bac:	1b5d      	subs	r5, r3, r5
 8016bae:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016bb2:	4610      	mov	r0, r2
 8016bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bb8:	f240 604b 	movw	r0, #1611	@ 0x64b
 8016bbc:	4283      	cmp	r3, r0
 8016bbe:	d338      	bcc.n	8016c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016bc0:	f240 604c 	movw	r0, #1612	@ 0x64c
 8016bc4:	4283      	cmp	r3, r0
 8016bc6:	d9d8      	bls.n	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016bc8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8016bcc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8016bd0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016bd4:	f040 80f3 	bne.w	8016dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016bd8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016bdc:	f040 80ef 	bne.w	8016dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016be0:	00cb      	lsls	r3, r1, #3
 8016be2:	064e      	lsls	r6, r1, #25
 8016be4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016be8:	7a13      	ldrb	r3, [r2, #8]
 8016bea:	ea43 0300 	orr.w	r3, r3, r0
 8016bee:	bf44      	itt	mi
 8016bf0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016bf4:	b21b      	sxthmi	r3, r3
 8016bf6:	e7d9      	b.n	8016bac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016bf8:	f240 6054 	movw	r0, #1620	@ 0x654
 8016bfc:	4283      	cmp	r3, r0
 8016bfe:	d8e3      	bhi.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c00:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016c04:	d9e0      	bls.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c06:	e7b8      	b.n	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c08:	f240 6074 	movw	r0, #1652	@ 0x674
 8016c0c:	4283      	cmp	r3, r0
 8016c0e:	d0b4      	beq.n	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c10:	d82d      	bhi.n	8016c6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8016c12:	f240 605e 	movw	r0, #1630	@ 0x65e
 8016c16:	4283      	cmp	r3, r0
 8016c18:	d804      	bhi.n	8016c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016c1a:	f240 605d 	movw	r0, #1629	@ 0x65d
 8016c1e:	4283      	cmp	r3, r0
 8016c20:	d3d2      	bcc.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c22:	e7aa      	b.n	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c24:	f240 605f 	movw	r0, #1631	@ 0x65f
 8016c28:	4283      	cmp	r3, r0
 8016c2a:	d0cd      	beq.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c2c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8016c30:	d0a3      	beq.n	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c32:	00cb      	lsls	r3, r1, #3
 8016c34:	0649      	lsls	r1, r1, #25
 8016c36:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016c3a:	7a13      	ldrb	r3, [r2, #8]
 8016c3c:	ea43 0300 	orr.w	r3, r3, r0
 8016c40:	bf44      	itt	mi
 8016c42:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016c46:	b21b      	sxthmi	r3, r3
 8016c48:	1b5d      	subs	r5, r3, r5
 8016c4a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016c4e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016c52:	7b53      	ldrb	r3, [r2, #13]
 8016c54:	015b      	lsls	r3, r3, #5
 8016c56:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016c5a:	7993      	ldrb	r3, [r2, #6]
 8016c5c:	430b      	orrs	r3, r1
 8016c5e:	2105      	movs	r1, #5
 8016c60:	005b      	lsls	r3, r3, #1
 8016c62:	fb93 f3f1 	sdiv	r3, r3, r1
 8016c66:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016c6a:	440b      	add	r3, r1
 8016c6c:	e756      	b.n	8016b1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016c6e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8016c72:	4283      	cmp	r3, r0
 8016c74:	d809      	bhi.n	8016c8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8016c76:	f240 60df 	movw	r0, #1759	@ 0x6df
 8016c7a:	4283      	cmp	r3, r0
 8016c7c:	f4bf af7d 	bcs.w	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c80:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8016c84:	2b05      	cmp	r3, #5
 8016c86:	d8d4      	bhi.n	8016c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016c88:	e777      	b.n	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c8a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8016c8e:	4283      	cmp	r3, r0
 8016c90:	d09a      	beq.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c92:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8016c96:	4283      	cmp	r3, r0
 8016c98:	e7ca      	b.n	8016c30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016c9a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8016c9e:	d22b      	bcs.n	8016cf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8016ca0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8016ca4:	4283      	cmp	r3, r0
 8016ca6:	d28f      	bcs.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016ca8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8016cac:	4283      	cmp	r3, r0
 8016cae:	d816      	bhi.n	8016cde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8016cb0:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8016cb4:	4283      	cmp	r3, r0
 8016cb6:	f4bf af60 	bcs.w	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cba:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8016cbe:	4283      	cmp	r3, r0
 8016cc0:	d80a      	bhi.n	8016cd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8016cc2:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8016cc6:	4283      	cmp	r3, r0
 8016cc8:	f4bf af57 	bcs.w	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ccc:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8016cd0:	4283      	cmp	r3, r0
 8016cd2:	f43f af79 	beq.w	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016cd6:	e7ac      	b.n	8016c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016cd8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8016cdc:	e7f8      	b.n	8016cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8016cde:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8016ce2:	4283      	cmp	r3, r0
 8016ce4:	d802      	bhi.n	8016cec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016ce6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8016cea:	e798      	b.n	8016c1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016cec:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8016cf0:	4283      	cmp	r3, r0
 8016cf2:	f47f af42 	bne.w	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cf6:	e767      	b.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016cf8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8016cfc:	4283      	cmp	r3, r0
 8016cfe:	f43f af63 	beq.w	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d02:	d802      	bhi.n	8016d0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016d04:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8016d08:	e7f2      	b.n	8016cf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016d0a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8016d0e:	4283      	cmp	r3, r0
 8016d10:	d805      	bhi.n	8016d1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8016d12:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8016d16:	4283      	cmp	r3, r0
 8016d18:	f4ff af2f 	bcc.w	8016b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016d1c:	e754      	b.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d1e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8016d22:	4283      	cmp	r3, r0
 8016d24:	e7af      	b.n	8016c86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8016d26:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8016d2a:	4617      	mov	r7, r2
 8016d2c:	f102 0808 	add.w	r8, r2, #8
 8016d30:	4666      	mov	r6, ip
 8016d32:	6838      	ldr	r0, [r7, #0]
 8016d34:	3708      	adds	r7, #8
 8016d36:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016d3a:	46e6      	mov	lr, ip
 8016d3c:	4547      	cmp	r7, r8
 8016d3e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016d42:	46f4      	mov	ip, lr
 8016d44:	d1f5      	bne.n	8016d32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8016d46:	6838      	ldr	r0, [r7, #0]
 8016d48:	f8ce 0000 	str.w	r0, [lr]
 8016d4c:	88b9      	ldrh	r1, [r7, #4]
 8016d4e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8016d52:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8016d56:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016d5a:	d009      	beq.n	8016d70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8016d5c:	7b51      	ldrb	r1, [r2, #13]
 8016d5e:	7992      	ldrb	r2, [r2, #6]
 8016d60:	0149      	lsls	r1, r1, #5
 8016d62:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8016d66:	4311      	orrs	r1, r2
 8016d68:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016d6c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8016d70:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016d74:	b2ad      	uxth	r5, r5
 8016d76:	d00d      	beq.n	8016d94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8016d78:	442b      	add	r3, r5
 8016d7a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8016d7e:	b29b      	uxth	r3, r3
 8016d80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016d84:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016d88:	10db      	asrs	r3, r3, #3
 8016d8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016d8e:	4313      	orrs	r3, r2
 8016d90:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8016d94:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8016d98:	00cb      	lsls	r3, r1, #3
 8016d9a:	064f      	lsls	r7, r1, #25
 8016d9c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016da0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8016da4:	ea43 0302 	orr.w	r3, r3, r2
 8016da8:	bf44      	itt	mi
 8016daa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016dae:	b21b      	sxthmi	r3, r3
 8016db0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016db4:	1b5b      	subs	r3, r3, r5
 8016db6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8016dba:	4632      	mov	r2, r6
 8016dbc:	e6f9      	b.n	8016bb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016dbe:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8016dc2:	4617      	mov	r7, r2
 8016dc4:	f102 0908 	add.w	r9, r2, #8
 8016dc8:	4666      	mov	r6, ip
 8016dca:	6838      	ldr	r0, [r7, #0]
 8016dcc:	3708      	adds	r7, #8
 8016dce:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016dd2:	46e0      	mov	r8, ip
 8016dd4:	454f      	cmp	r7, r9
 8016dd6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8016dda:	46c4      	mov	ip, r8
 8016ddc:	d1f5      	bne.n	8016dca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8016dde:	6838      	ldr	r0, [r7, #0]
 8016de0:	f8c8 0000 	str.w	r0, [r8]
 8016de4:	88b9      	ldrh	r1, [r7, #4]
 8016de6:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016dea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8016dee:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016df2:	d009      	beq.n	8016e08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8016df4:	7b51      	ldrb	r1, [r2, #13]
 8016df6:	7992      	ldrb	r2, [r2, #6]
 8016df8:	0149      	lsls	r1, r1, #5
 8016dfa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8016dfe:	4311      	orrs	r1, r2
 8016e00:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016e04:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8016e08:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016e0c:	d00e      	beq.n	8016e2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8016e0e:	eba3 030e 	sub.w	r3, r3, lr
 8016e12:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8016e16:	b29b      	uxth	r3, r3
 8016e18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016e1c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016e20:	10db      	asrs	r3, r3, #3
 8016e22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016e26:	4313      	orrs	r3, r2
 8016e28:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8016e2c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8016e30:	00cb      	lsls	r3, r1, #3
 8016e32:	0648      	lsls	r0, r1, #25
 8016e34:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016e38:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8016e3c:	ea43 0302 	orr.w	r3, r3, r2
 8016e40:	bf44      	itt	mi
 8016e42:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016e46:	b21b      	sxthmi	r3, r3
 8016e48:	1b5d      	subs	r5, r3, r5
 8016e4a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016e4e:	e7b4      	b.n	8016dba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08016e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e54:	461e      	mov	r6, r3
 8016e56:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016e58:	4604      	mov	r4, r0
 8016e5a:	4617      	mov	r7, r2
 8016e5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016e60:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016e64:	f7ed fff4 	bl	8004e50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016e68:	4605      	mov	r5, r0
 8016e6a:	b918      	cbnz	r0, 8016e74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8016e6c:	6030      	str	r0, [r6, #0]
 8016e6e:	4628      	mov	r0, r5
 8016e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	4601      	mov	r1, r0
 8016e78:	4638      	mov	r0, r7
 8016e7a:	68db      	ldr	r3, [r3, #12]
 8016e7c:	4798      	blx	r3
 8016e7e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8016e82:	4602      	mov	r2, r0
 8016e84:	6030      	str	r0, [r6, #0]
 8016e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016e8a:	d213      	bcs.n	8016eb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8016e8c:	4643      	mov	r3, r8
 8016e8e:	4639      	mov	r1, r7
 8016e90:	4620      	mov	r0, r4
 8016e92:	f7ff fe39 	bl	8016b08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016e96:	6030      	str	r0, [r6, #0]
 8016e98:	6833      	ldr	r3, [r6, #0]
 8016e9a:	b143      	cbz	r3, 8016eae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8016e9c:	7b5a      	ldrb	r2, [r3, #13]
 8016e9e:	7a9b      	ldrb	r3, [r3, #10]
 8016ea0:	0052      	lsls	r2, r2, #1
 8016ea2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8016ea6:	4313      	orrs	r3, r2
 8016ea8:	bf0c      	ite	eq
 8016eaa:	2301      	moveq	r3, #1
 8016eac:	2300      	movne	r3, #0
 8016eae:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8016eb2:	e7dc      	b.n	8016e6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8016eb4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8016eb8:	b29b      	uxth	r3, r3
 8016eba:	2b7f      	cmp	r3, #127	@ 0x7f
 8016ebc:	d804      	bhi.n	8016ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8016ebe:	4639      	mov	r1, r7
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	f7ff fce7 	bl	8016894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016ec6:	e7e6      	b.n	8016e96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8016ec8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d0e3      	beq.n	8016e98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016ed0:	f640 1302 	movw	r3, #2306	@ 0x902
 8016ed4:	429d      	cmp	r5, r3
 8016ed6:	d1df      	bne.n	8016e98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016ed8:	4601      	mov	r1, r0
 8016eda:	4620      	mov	r0, r4
 8016edc:	f7ff fcab 	bl	8016836 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016ee0:	e7d9      	b.n	8016e96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08016ee2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8016ee2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ee6:	461e      	mov	r6, r3
 8016ee8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016eea:	4604      	mov	r4, r0
 8016eec:	4617      	mov	r7, r2
 8016eee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016ef2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016ef6:	f7ed ffab 	bl	8004e50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016efa:	4605      	mov	r5, r0
 8016efc:	b918      	cbnz	r0, 8016f06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8016efe:	6030      	str	r0, [r6, #0]
 8016f00:	4628      	mov	r0, r5
 8016f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	4601      	mov	r1, r0
 8016f0a:	4638      	mov	r0, r7
 8016f0c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8016f10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016f14:	47c8      	blx	r9
 8016f16:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8016f1a:	4602      	mov	r2, r0
 8016f1c:	6030      	str	r0, [r6, #0]
 8016f1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016f22:	d213      	bcs.n	8016f4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8016f24:	4643      	mov	r3, r8
 8016f26:	4639      	mov	r1, r7
 8016f28:	4620      	mov	r0, r4
 8016f2a:	f7ff fded 	bl	8016b08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016f2e:	6030      	str	r0, [r6, #0]
 8016f30:	6833      	ldr	r3, [r6, #0]
 8016f32:	b143      	cbz	r3, 8016f46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8016f34:	7b5a      	ldrb	r2, [r3, #13]
 8016f36:	7a9b      	ldrb	r3, [r3, #10]
 8016f38:	0052      	lsls	r2, r2, #1
 8016f3a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8016f3e:	4313      	orrs	r3, r2
 8016f40:	bf0c      	ite	eq
 8016f42:	2301      	moveq	r3, #1
 8016f44:	2300      	movne	r3, #0
 8016f46:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8016f4a:	e7d9      	b.n	8016f00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8016f4c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8016f50:	b29b      	uxth	r3, r3
 8016f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8016f54:	d804      	bhi.n	8016f60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8016f56:	4639      	mov	r1, r7
 8016f58:	4620      	mov	r0, r4
 8016f5a:	f7ff fc9b 	bl	8016894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016f5e:	e7e6      	b.n	8016f2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8016f60:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d0e3      	beq.n	8016f30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016f68:	f640 1302 	movw	r3, #2306	@ 0x902
 8016f6c:	429d      	cmp	r5, r3
 8016f6e:	d1df      	bne.n	8016f30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016f70:	4601      	mov	r1, r0
 8016f72:	4620      	mov	r0, r4
 8016f74:	f7ff fc5f 	bl	8016836 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016f78:	e7d9      	b.n	8016f2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08016f7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8016f7a:	b510      	push	{r4, lr}
 8016f7c:	4604      	mov	r4, r0
 8016f7e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8016f82:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016f84:	b1e1      	cbz	r1, 8016fc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016f86:	2b0a      	cmp	r3, #10
 8016f88:	d02d      	beq.n	8016fe6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016f8a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8016f8c:	3901      	subs	r1, #1
 8016f8e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016f92:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8016f94:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8016f98:	1c51      	adds	r1, r2, #1
 8016f9a:	b289      	uxth	r1, r1
 8016f9c:	2901      	cmp	r1, #1
 8016f9e:	bf8a      	itet	hi
 8016fa0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016fa4:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8016fa6:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8016fa8:	1c5a      	adds	r2, r3, #1
 8016faa:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016fac:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016fae:	4413      	add	r3, r2
 8016fb0:	b29b      	uxth	r3, r3
 8016fb2:	2b09      	cmp	r3, #9
 8016fb4:	bf88      	it	hi
 8016fb6:	3b0a      	subhi	r3, #10
 8016fb8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016fbc:	8458      	strh	r0, [r3, #34]	@ 0x22
 8016fbe:	e7de      	b.n	8016f7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8016fc0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016fc2:	2b0a      	cmp	r3, #10
 8016fc4:	d00f      	beq.n	8016fe6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	f7ff fbf4 	bl	80167b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8016fcc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016fce:	1c5a      	adds	r2, r3, #1
 8016fd0:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016fd2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016fd4:	4413      	add	r3, r2
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	2b09      	cmp	r3, #9
 8016fda:	bf88      	it	hi
 8016fdc:	3b0a      	subhi	r3, #10
 8016fde:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016fe2:	8458      	strh	r0, [r3, #34]	@ 0x22
 8016fe4:	e7ec      	b.n	8016fc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016fe6:	bd10      	pop	{r4, pc}

08016fe8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8016fe8:	b538      	push	{r3, r4, r5, lr}
 8016fea:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016fec:	4604      	mov	r4, r0
 8016fee:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8016ff2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8016ff4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8016ff6:	3a01      	subs	r2, #1
 8016ff8:	8702      	strh	r2, [r0, #56]	@ 0x38
 8016ffa:	1c5a      	adds	r2, r3, #1
 8016ffc:	b292      	uxth	r2, r2
 8016ffe:	2a09      	cmp	r2, #9
 8017000:	bf8a      	itet	hi
 8017002:	3b09      	subhi	r3, #9
 8017004:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8017006:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8017008:	f7ff ffb7 	bl	8016f7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801700c:	8c23      	ldrh	r3, [r4, #32]
 801700e:	2b01      	cmp	r3, #1
 8017010:	bf9c      	itt	ls
 8017012:	3301      	addls	r3, #1
 8017014:	8423      	strhls	r3, [r4, #32]
 8017016:	8be3      	ldrh	r3, [r4, #30]
 8017018:	b90b      	cbnz	r3, 801701e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801701a:	2302      	movs	r3, #2
 801701c:	83e3      	strh	r3, [r4, #30]
 801701e:	8be3      	ldrh	r3, [r4, #30]
 8017020:	4628      	mov	r0, r5
 8017022:	3b01      	subs	r3, #1
 8017024:	b29b      	uxth	r3, r3
 8017026:	83e3      	strh	r3, [r4, #30]
 8017028:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801702c:	8365      	strh	r5, [r4, #26]
 801702e:	bd38      	pop	{r3, r4, r5, pc}

08017030 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017030:	428a      	cmp	r2, r1
 8017032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017036:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8017038:	d932      	bls.n	80170a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801703a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801703c:	1a54      	subs	r4, r2, r1
 801703e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8017042:	19ee      	adds	r6, r5, r7
 8017044:	fa1f fe84 	uxth.w	lr, r4
 8017048:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801704c:	3e01      	subs	r6, #1
 801704e:	b2b4      	uxth	r4, r6
 8017050:	eba4 090e 	sub.w	r9, r4, lr
 8017054:	fa1f f989 	uxth.w	r9, r9
 8017058:	2c09      	cmp	r4, #9
 801705a:	4626      	mov	r6, r4
 801705c:	bf88      	it	hi
 801705e:	f1a4 060a 	subhi.w	r6, r4, #10
 8017062:	f1bc 0f00 	cmp.w	ip, #0
 8017066:	f104 34ff 	add.w	r4, r4, #4294967295
 801706a:	bf08      	it	eq
 801706c:	f04f 0c02 	moveq.w	ip, #2
 8017070:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017074:	b2a4      	uxth	r4, r4
 8017076:	f10c 3cff 	add.w	ip, ip, #4294967295
 801707a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801707e:	454c      	cmp	r4, r9
 8017080:	fa1f fc8c 	uxth.w	ip, ip
 8017084:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017088:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801708c:	d1e4      	bne.n	8017058 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801708e:	eba5 050e 	sub.w	r5, r5, lr
 8017092:	eb0e 0408 	add.w	r4, lr, r8
 8017096:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801709a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801709c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80170a0:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80170a2:	250a      	movs	r5, #10
 80170a4:	1a64      	subs	r4, r4, r1
 80170a6:	4439      	add	r1, r7
 80170a8:	b289      	uxth	r1, r1
 80170aa:	8704      	strh	r4, [r0, #56]	@ 0x38
 80170ac:	2909      	cmp	r1, #9
 80170ae:	bf88      	it	hi
 80170b0:	390a      	subhi	r1, #10
 80170b2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80170b4:	b18a      	cbz	r2, 80170da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80170b6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80170b8:	3a01      	subs	r2, #1
 80170ba:	3101      	adds	r1, #1
 80170bc:	b292      	uxth	r2, r2
 80170be:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80170c2:	8701      	strh	r1, [r0, #56]	@ 0x38
 80170c4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80170c6:	b901      	cbnz	r1, 80170ca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80170c8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80170ca:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80170cc:	3901      	subs	r1, #1
 80170ce:	b289      	uxth	r1, r1
 80170d0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80170d2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80170d6:	844c      	strh	r4, [r1, #34]	@ 0x22
 80170d8:	e7ec      	b.n	80170b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80170da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170de:	f7ff bf4c 	b.w	8016f7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080170e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80170e2:	b570      	push	{r4, r5, r6, lr}
 80170e4:	2500      	movs	r5, #0
 80170e6:	4295      	cmp	r5, r2
 80170e8:	d011      	beq.n	801710e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80170ea:	8bc4      	ldrh	r4, [r0, #30]
 80170ec:	f831 6b02 	ldrh.w	r6, [r1], #2
 80170f0:	4414      	add	r4, r2
 80170f2:	3c01      	subs	r4, #1
 80170f4:	1b64      	subs	r4, r4, r5
 80170f6:	b2a4      	uxth	r4, r4
 80170f8:	2c01      	cmp	r4, #1
 80170fa:	bf88      	it	hi
 80170fc:	3c02      	subhi	r4, #2
 80170fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017102:	8b64      	ldrh	r4, [r4, #26]
 8017104:	42b4      	cmp	r4, r6
 8017106:	d117      	bne.n	8017138 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017108:	3501      	adds	r5, #1
 801710a:	b2ad      	uxth	r5, r5
 801710c:	e7eb      	b.n	80170e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801710e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017112:	2400      	movs	r4, #0
 8017114:	4413      	add	r3, r2
 8017116:	b2a2      	uxth	r2, r4
 8017118:	429a      	cmp	r2, r3
 801711a:	da0f      	bge.n	801713c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801711c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801711e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017122:	3401      	adds	r4, #1
 8017124:	4432      	add	r2, r6
 8017126:	b292      	uxth	r2, r2
 8017128:	2a09      	cmp	r2, #9
 801712a:	bf88      	it	hi
 801712c:	3a0a      	subhi	r2, #10
 801712e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017132:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8017134:	42aa      	cmp	r2, r5
 8017136:	d0ee      	beq.n	8017116 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017138:	2000      	movs	r0, #0
 801713a:	bd70      	pop	{r4, r5, r6, pc}
 801713c:	2001      	movs	r0, #1
 801713e:	e7fc      	b.n	801713a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017140 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017144:	4605      	mov	r5, r0
 8017146:	4616      	mov	r6, r2
 8017148:	1c8c      	adds	r4, r1, #2
 801714a:	8809      	ldrh	r1, [r1, #0]
 801714c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017150:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017154:	42b3      	cmp	r3, r6
 8017156:	d124      	bne.n	80171a2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017158:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801715c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017160:	f001 070f 	and.w	r7, r1, #15
 8017164:	4652      	mov	r2, sl
 8017166:	f8cd 8000 	str.w	r8, [sp]
 801716a:	464b      	mov	r3, r9
 801716c:	4621      	mov	r1, r4
 801716e:	4628      	mov	r0, r5
 8017170:	f7ff ffb7 	bl	80170e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017174:	4683      	mov	fp, r0
 8017176:	b168      	cbz	r0, 8017194 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017178:	eb0a 0109 	add.w	r1, sl, r9
 801717c:	463a      	mov	r2, r7
 801717e:	4628      	mov	r0, r5
 8017180:	4441      	add	r1, r8
 8017182:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017186:	4649      	mov	r1, r9
 8017188:	f7ff ff52 	bl	8017030 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801718c:	4658      	mov	r0, fp
 801718e:	b003      	add	sp, #12
 8017190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017194:	eb07 010a 	add.w	r1, r7, sl
 8017198:	4449      	add	r1, r9
 801719a:	4441      	add	r1, r8
 801719c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80171a0:	e7d2      	b.n	8017148 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80171a2:	f04f 0b00 	mov.w	fp, #0
 80171a6:	e7f1      	b.n	801718c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080171a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80171a8:	b570      	push	{r4, r5, r6, lr}
 80171aa:	8810      	ldrh	r0, [r2, #0]
 80171ac:	4298      	cmp	r0, r3
 80171ae:	d817      	bhi.n	80171e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80171b0:	1e48      	subs	r0, r1, #1
 80171b2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80171b6:	4298      	cmp	r0, r3
 80171b8:	d312      	bcc.n	80171e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80171ba:	2400      	movs	r4, #0
 80171bc:	428c      	cmp	r4, r1
 80171be:	d20f      	bcs.n	80171e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80171c0:	1860      	adds	r0, r4, r1
 80171c2:	1040      	asrs	r0, r0, #1
 80171c4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80171c8:	0085      	lsls	r5, r0, #2
 80171ca:	42b3      	cmp	r3, r6
 80171cc:	d902      	bls.n	80171d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80171ce:	3001      	adds	r0, #1
 80171d0:	b284      	uxth	r4, r0
 80171d2:	e7f3      	b.n	80171bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80171d4:	d201      	bcs.n	80171da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80171d6:	b281      	uxth	r1, r0
 80171d8:	e7f0      	b.n	80171bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80171da:	442a      	add	r2, r5
 80171dc:	8850      	ldrh	r0, [r2, #2]
 80171de:	bd70      	pop	{r4, r5, r6, pc}
 80171e0:	2000      	movs	r0, #0
 80171e2:	e7fc      	b.n	80171de <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080171e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80171e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171e8:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80171ea:	4604      	mov	r4, r0
 80171ec:	260b      	movs	r6, #11
 80171ee:	886f      	ldrh	r7, [r5, #2]
 80171f0:	087f      	lsrs	r7, r7, #1
 80171f2:	3e01      	subs	r6, #1
 80171f4:	d013      	beq.n	801721e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80171f6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80171f8:	462a      	mov	r2, r5
 80171fa:	4639      	mov	r1, r7
 80171fc:	4620      	mov	r0, r4
 80171fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017202:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8017206:	4643      	mov	r3, r8
 8017208:	f7ff ffce 	bl	80171a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801720c:	b138      	cbz	r0, 801721e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801720e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017212:	4642      	mov	r2, r8
 8017214:	4620      	mov	r0, r4
 8017216:	f7ff ff93 	bl	8017140 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801721a:	2800      	cmp	r0, #0
 801721c:	d1e9      	bne.n	80171f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801721e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017224 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017224:	b570      	push	{r4, r5, r6, lr}
 8017226:	694a      	ldr	r2, [r1, #20]
 8017228:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801722a:	684b      	ldr	r3, [r1, #4]
 801722c:	1b54      	subs	r4, r2, r5
 801722e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8017230:	f000 8106 	beq.w	8017440 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017234:	1b9b      	subs	r3, r3, r6
 8017236:	d003      	beq.n	8017240 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017238:	4363      	muls	r3, r4
 801723a:	2210      	movs	r2, #16
 801723c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017240:	680c      	ldr	r4, [r1, #0]
 8017242:	698a      	ldr	r2, [r1, #24]
 8017244:	1b65      	subs	r5, r4, r5
 8017246:	f000 80fd 	beq.w	8017444 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801724a:	1b92      	subs	r2, r2, r6
 801724c:	d003      	beq.n	8017256 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801724e:	436a      	muls	r2, r5
 8017250:	2410      	movs	r4, #16
 8017252:	fb92 f2f4 	sdiv	r2, r2, r4
 8017256:	1a9b      	subs	r3, r3, r2
 8017258:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8017480 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801725c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017260:	460a      	mov	r2, r1
 8017262:	ee07 3a90 	vmov	s15, r3
 8017266:	f100 040c 	add.w	r4, r0, #12
 801726a:	4603      	mov	r3, r0
 801726c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017270:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017274:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017278:	eeb1 6a43 	vneg.f32	s12, s6
 801727c:	edd2 7a02 	vldr	s15, [r2, #8]
 8017280:	3214      	adds	r2, #20
 8017282:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017286:	ece3 6a01 	vstmia	r3!, {s13}
 801728a:	429c      	cmp	r4, r3
 801728c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017290:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017294:	edc3 7a02 	vstr	s15, [r3, #8]
 8017298:	ed52 7a01 	vldr	s15, [r2, #-4]
 801729c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80172a0:	edc3 7a05 	vstr	s15, [r3, #20]
 80172a4:	d1ea      	bne.n	801727c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80172a6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80172a8:	698b      	ldr	r3, [r1, #24]
 80172aa:	edd0 4a02 	vldr	s9, [r0, #8]
 80172ae:	1a9b      	subs	r3, r3, r2
 80172b0:	edd0 3a00 	vldr	s7, [r0]
 80172b4:	edd0 6a01 	vldr	s13, [r0, #4]
 80172b8:	ee07 3a90 	vmov	s15, r3
 80172bc:	684b      	ldr	r3, [r1, #4]
 80172be:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80172c2:	ed90 5a05 	vldr	s10, [r0, #20]
 80172c6:	1a9b      	subs	r3, r3, r2
 80172c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172cc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80172d0:	ed90 2a03 	vldr	s4, [r0, #12]
 80172d4:	ee07 3a10 	vmov	s14, r3
 80172d8:	edd0 5a04 	vldr	s11, [r0, #16]
 80172dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80172e0:	ed90 1a07 	vldr	s2, [r0, #28]
 80172e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172e8:	edd0 2a06 	vldr	s5, [r0, #24]
 80172ec:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80172f0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80172f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80172f8:	ee32 5a45 	vsub.f32	s10, s4, s10
 80172fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017300:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017304:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8017308:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801730a:	694a      	ldr	r2, [r1, #20]
 801730c:	1b13      	subs	r3, r2, r4
 801730e:	ee07 3a10 	vmov	s14, r3
 8017312:	680b      	ldr	r3, [r1, #0]
 8017314:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017318:	1b1b      	subs	r3, r3, r4
 801731a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801731e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017322:	ee07 3a10 	vmov	s14, r3
 8017326:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801732a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801732e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017332:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017336:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801733a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801733c:	698b      	ldr	r3, [r1, #24]
 801733e:	1a9b      	subs	r3, r3, r2
 8017340:	ee06 3a90 	vmov	s13, r3
 8017344:	684b      	ldr	r3, [r1, #4]
 8017346:	1a9b      	subs	r3, r3, r2
 8017348:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801734c:	ee07 3a10 	vmov	s14, r3
 8017350:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017358:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801735c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017360:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017364:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017368:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801736c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801736e:	694a      	ldr	r2, [r1, #20]
 8017370:	1b13      	subs	r3, r2, r4
 8017372:	ee07 3a10 	vmov	s14, r3
 8017376:	680b      	ldr	r3, [r1, #0]
 8017378:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801737c:	1b1b      	subs	r3, r3, r4
 801737e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017382:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8017386:	ee07 3a10 	vmov	s14, r3
 801738a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801738e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017392:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017396:	edd0 5a08 	vldr	s11, [r0, #32]
 801739a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801739e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80173a2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80173a6:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80173aa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80173ac:	698b      	ldr	r3, [r1, #24]
 80173ae:	1a9b      	subs	r3, r3, r2
 80173b0:	ee07 3a10 	vmov	s14, r3
 80173b4:	684b      	ldr	r3, [r1, #4]
 80173b6:	1a9b      	subs	r3, r3, r2
 80173b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173bc:	ee01 3a90 	vmov	s3, r3
 80173c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80173c4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80173c8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80173cc:	ee61 1a84 	vmul.f32	s3, s3, s8
 80173d0:	eea1 7a21 	vfma.f32	s14, s2, s3
 80173d4:	ee27 7a03 	vmul.f32	s14, s14, s6
 80173d8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80173dc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80173de:	694a      	ldr	r2, [r1, #20]
 80173e0:	1b13      	subs	r3, r2, r4
 80173e2:	ee03 3a10 	vmov	s6, r3
 80173e6:	680b      	ldr	r3, [r1, #0]
 80173e8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80173ec:	1b1b      	subs	r3, r3, r4
 80173ee:	ee23 3a04 	vmul.f32	s6, s6, s8
 80173f2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80173f6:	ee03 3a10 	vmov	s6, r3
 80173fa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80173fe:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017402:	eee1 5a04 	vfma.f32	s11, s2, s8
 8017406:	ee25 6a86 	vmul.f32	s12, s11, s12
 801740a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801740e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8017412:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8017416:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801741a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801741e:	dd13      	ble.n	8017448 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017420:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017424:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017428:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801742a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801742e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017436:	dd15      	ble.n	8017464 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017438:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801743c:	6403      	str	r3, [r0, #64]	@ 0x40
 801743e:	bd70      	pop	{r4, r5, r6, pc}
 8017440:	4623      	mov	r3, r4
 8017442:	e6fd      	b.n	8017240 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017444:	462a      	mov	r2, r5
 8017446:	e706      	b.n	8017256 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017448:	d502      	bpl.n	8017450 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801744a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801744e:	e7e9      	b.n	8017424 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017450:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017454:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017458:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801745c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017460:	dade      	bge.n	8017420 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8017462:	e7f2      	b.n	801744a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017464:	d502      	bpl.n	801746c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8017466:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801746a:	e7e7      	b.n	801743c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801746c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017470:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017474:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801747c:	dadc      	bge.n	8017438 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801747e:	e7f2      	b.n	8017466 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017480:	3d800000 	.word	0x3d800000

08017484 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017488:	2714      	movs	r7, #20
 801748a:	435f      	muls	r7, r3
 801748c:	eb02 0c07 	add.w	ip, r2, r7
 8017490:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017494:	f115 0e0f 	adds.w	lr, r5, #15
 8017498:	f100 80a2 	bmi.w	80175e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801749c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80174a0:	9c08      	ldr	r4, [sp, #32]
 80174a2:	2614      	movs	r6, #20
 80174a4:	f8c0 e014 	str.w	lr, [r0, #20]
 80174a8:	4366      	muls	r6, r4
 80174aa:	eb02 0806 	add.w	r8, r2, r6
 80174ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80174b2:	f115 040f 	adds.w	r4, r5, #15
 80174b6:	f100 809f 	bmi.w	80175f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80174ba:	1124      	asrs	r4, r4, #4
 80174bc:	eba4 040e 	sub.w	r4, r4, lr
 80174c0:	6184      	str	r4, [r0, #24]
 80174c2:	2c00      	cmp	r4, #0
 80174c4:	f000 808a 	beq.w	80175dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80174c8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80174cc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80174d0:	5995      	ldr	r5, [r2, r6]
 80174d2:	eba4 0809 	sub.w	r8, r4, r9
 80174d6:	59d4      	ldr	r4, [r2, r7]
 80174d8:	eba5 0a04 	sub.w	sl, r5, r4
 80174dc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80174e0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80174e4:	fb0e fe05 	mul.w	lr, lr, r5
 80174e8:	fb0a ee19 	mls	lr, sl, r9, lr
 80174ec:	fb08 e404 	mla	r4, r8, r4, lr
 80174f0:	3c01      	subs	r4, #1
 80174f2:	19a4      	adds	r4, r4, r6
 80174f4:	f100 808c 	bmi.w	8017610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80174f8:	fb94 fef6 	sdiv	lr, r4, r6
 80174fc:	fb06 441e 	mls	r4, r6, lr, r4
 8017500:	f8c0 e000 	str.w	lr, [r0]
 8017504:	6104      	str	r4, [r0, #16]
 8017506:	2d00      	cmp	r5, #0
 8017508:	f2c0 8095 	blt.w	8017636 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801750c:	fb95 f4f6 	sdiv	r4, r5, r6
 8017510:	fb06 5514 	mls	r5, r6, r4, r5
 8017514:	6044      	str	r4, [r0, #4]
 8017516:	6085      	str	r5, [r0, #8]
 8017518:	60c6      	str	r6, [r0, #12]
 801751a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801751e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017522:	6945      	ldr	r5, [r0, #20]
 8017524:	59d2      	ldr	r2, [r2, r7]
 8017526:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801752a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8017658 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801752e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8017532:	ee07 4a10 	vmov	s14, r4
 8017536:	6804      	ldr	r4, [r0, #0]
 8017538:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801753c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017540:	ee07 2a90 	vmov	s15, r2
 8017544:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801754c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017550:	edd3 6a00 	vldr	s13, [r3]
 8017554:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017558:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801755c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017560:	edc0 6a07 	vstr	s13, [r0, #28]
 8017564:	edd0 6a01 	vldr	s13, [r0, #4]
 8017568:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801756c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017570:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8017574:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017578:	ed80 6a08 	vstr	s12, [r0, #32]
 801757c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801757e:	6242      	str	r2, [r0, #36]	@ 0x24
 8017580:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8017584:	ed93 6a03 	vldr	s12, [r3, #12]
 8017588:	eea5 6a87 	vfma.f32	s12, s11, s14
 801758c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8017590:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8017594:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8017598:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801759c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80175a0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80175a4:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80175a8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80175aa:	6302      	str	r2, [r0, #48]	@ 0x30
 80175ac:	ed93 6a06 	vldr	s12, [r3, #24]
 80175b0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80175b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80175b8:	eeb0 7a46 	vmov.f32	s14, s12
 80175bc:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80175c0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80175c4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80175c8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80175cc:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80175d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80175d4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80175d8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80175da:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80175dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175e0:	2410      	movs	r4, #16
 80175e2:	f1c5 0501 	rsb	r5, r5, #1
 80175e6:	fb9e fef4 	sdiv	lr, lr, r4
 80175ea:	f015 050f 	ands.w	r5, r5, #15
 80175ee:	bf18      	it	ne
 80175f0:	2501      	movne	r5, #1
 80175f2:	ebae 0e05 	sub.w	lr, lr, r5
 80175f6:	e753      	b.n	80174a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80175f8:	f04f 0910 	mov.w	r9, #16
 80175fc:	f1c5 0501 	rsb	r5, r5, #1
 8017600:	fb94 f4f9 	sdiv	r4, r4, r9
 8017604:	f015 050f 	ands.w	r5, r5, #15
 8017608:	bf18      	it	ne
 801760a:	2501      	movne	r5, #1
 801760c:	1b64      	subs	r4, r4, r5
 801760e:	e755      	b.n	80174bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8017610:	4264      	negs	r4, r4
 8017612:	fb94 fef6 	sdiv	lr, r4, r6
 8017616:	f1ce 0800 	rsb	r8, lr, #0
 801761a:	fb06 441e 	mls	r4, r6, lr, r4
 801761e:	f8c0 8000 	str.w	r8, [r0]
 8017622:	6104      	str	r4, [r0, #16]
 8017624:	2c00      	cmp	r4, #0
 8017626:	f43f af6e 	beq.w	8017506 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801762a:	ea6f 0e0e 	mvn.w	lr, lr
 801762e:	1b34      	subs	r4, r6, r4
 8017630:	f8c0 e000 	str.w	lr, [r0]
 8017634:	e766      	b.n	8017504 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8017636:	426d      	negs	r5, r5
 8017638:	fb95 f4f6 	sdiv	r4, r5, r6
 801763c:	f1c4 0e00 	rsb	lr, r4, #0
 8017640:	fb06 5514 	mls	r5, r6, r4, r5
 8017644:	f8c0 e004 	str.w	lr, [r0, #4]
 8017648:	6085      	str	r5, [r0, #8]
 801764a:	2d00      	cmp	r5, #0
 801764c:	f43f af64 	beq.w	8017518 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017650:	43e4      	mvns	r4, r4
 8017652:	1b75      	subs	r5, r6, r5
 8017654:	6044      	str	r4, [r0, #4]
 8017656:	e75e      	b.n	8017516 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017658:	3d800000 	.word	0x3d800000

0801765c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801765c:	4602      	mov	r2, r0
 801765e:	b148      	cbz	r0, 8017674 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8017660:	2300      	movs	r3, #0
 8017662:	b298      	uxth	r0, r3
 8017664:	3301      	adds	r3, #1
 8017666:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801766a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801766e:	2900      	cmp	r1, #0
 8017670:	d1f7      	bne.n	8017662 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8017672:	4770      	bx	lr
 8017674:	4770      	bx	lr

08017676 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8017676:	b530      	push	{r4, r5, lr}
 8017678:	4604      	mov	r4, r0
 801767a:	b159      	cbz	r1, 8017694 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801767c:	b148      	cbz	r0, 8017692 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801767e:	2300      	movs	r3, #0
 8017680:	b298      	uxth	r0, r3
 8017682:	4282      	cmp	r2, r0
 8017684:	d905      	bls.n	8017692 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8017686:	5ccd      	ldrb	r5, [r1, r3]
 8017688:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801768c:	3301      	adds	r3, #1
 801768e:	2d00      	cmp	r5, #0
 8017690:	d1f6      	bne.n	8017680 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8017692:	bd30      	pop	{r4, r5, pc}
 8017694:	4608      	mov	r0, r1
 8017696:	e7fc      	b.n	8017692 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08017698 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8017698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801769a:	b08b      	sub	sp, #44	@ 0x2c
 801769c:	468c      	mov	ip, r1
 801769e:	4604      	mov	r4, r0
 80176a0:	2100      	movs	r1, #0
 80176a2:	261f      	movs	r6, #31
 80176a4:	af01      	add	r7, sp, #4
 80176a6:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80176aa:	1e71      	subs	r1, r6, #1
 80176ac:	fb94 fef3 	sdiv	lr, r4, r3
 80176b0:	fb03 441e 	mls	r4, r3, lr, r4
 80176b4:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80176b8:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80176bc:	b2ec      	uxtb	r4, r5
 80176be:	2d09      	cmp	r5, #9
 80176c0:	bfd4      	ite	le
 80176c2:	3430      	addle	r4, #48	@ 0x30
 80176c4:	3457      	addgt	r4, #87	@ 0x57
 80176c6:	b2e4      	uxtb	r4, r4
 80176c8:	55bc      	strb	r4, [r7, r6]
 80176ca:	4674      	mov	r4, lr
 80176cc:	b974      	cbnz	r4, 80176ec <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	da05      	bge.n	80176de <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 80176d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80176d4:	4419      	add	r1, r3
 80176d6:	232d      	movs	r3, #45	@ 0x2d
 80176d8:	f801 3c24 	strb.w	r3, [r1, #-36]
 80176dc:	1eb1      	subs	r1, r6, #2
 80176de:	3101      	adds	r1, #1
 80176e0:	4660      	mov	r0, ip
 80176e2:	4439      	add	r1, r7
 80176e4:	f7ff ffc7 	bl	8017676 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80176e8:	b00b      	add	sp, #44	@ 0x2c
 80176ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176ec:	460e      	mov	r6, r1
 80176ee:	e7dc      	b.n	80176aa <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

080176f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80176f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176f2:	468c      	mov	ip, r1
 80176f4:	b08b      	sub	sp, #44	@ 0x2c
 80176f6:	2100      	movs	r1, #0
 80176f8:	ae01      	add	r6, sp, #4
 80176fa:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80176fe:	211f      	movs	r1, #31
 8017700:	fbb0 f7f3 	udiv	r7, r0, r3
 8017704:	fb03 0517 	mls	r5, r3, r7, r0
 8017708:	4638      	mov	r0, r7
 801770a:	b2ec      	uxtb	r4, r5
 801770c:	2d09      	cmp	r5, #9
 801770e:	bfd4      	ite	le
 8017710:	3430      	addle	r4, #48	@ 0x30
 8017712:	3457      	addgt	r4, #87	@ 0x57
 8017714:	b2e4      	uxtb	r4, r4
 8017716:	558c      	strb	r4, [r1, r6]
 8017718:	1e4c      	subs	r4, r1, #1
 801771a:	b92f      	cbnz	r7, 8017728 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801771c:	4431      	add	r1, r6
 801771e:	4660      	mov	r0, ip
 8017720:	f7ff ffa9 	bl	8017676 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017724:	b00b      	add	sp, #44	@ 0x2c
 8017726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017728:	4621      	mov	r1, r4
 801772a:	e7e9      	b.n	8017700 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801772c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801772c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017730:	b085      	sub	sp, #20
 8017732:	4691      	mov	r9, r2
 8017734:	6802      	ldr	r2, [r0, #0]
 8017736:	4688      	mov	r8, r1
 8017738:	461c      	mov	r4, r3
 801773a:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801773e:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8017742:	4683      	mov	fp, r0
 8017744:	4610      	mov	r0, r2
 8017746:	9103      	str	r1, [sp, #12]
 8017748:	9302      	str	r3, [sp, #8]
 801774a:	9201      	str	r2, [sp, #4]
 801774c:	f7ff ff86 	bl	801765c <_ZN8touchgfx7Unicode6strlenEPKt>
 8017750:	f1b8 0f00 	cmp.w	r8, #0
 8017754:	bf0c      	ite	eq
 8017756:	4684      	moveq	ip, r0
 8017758:	f100 0c01 	addne.w	ip, r0, #1
 801775c:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8017760:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8017764:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017766:	fa1f fc8c 	uxth.w	ip, ip
 801776a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801776c:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8017770:	9903      	ldr	r1, [sp, #12]
 8017772:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017776:	d041      	beq.n	80177fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8017778:	d834      	bhi.n	80177e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801777a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801777e:	d059      	beq.n	8017834 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8017780:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8017784:	d03a      	beq.n	80177fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8017786:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801778a:	d034      	beq.n	80177f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801778c:	2400      	movs	r4, #0
 801778e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8017792:	3a01      	subs	r2, #1
 8017794:	b169      	cbz	r1, 80177b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017796:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017798:	458c      	cmp	ip, r1
 801779a:	da09      	bge.n	80177b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801779c:	eba1 010c 	sub.w	r1, r1, ip
 80177a0:	b289      	uxth	r1, r1
 80177a2:	b933      	cbnz	r3, 80177b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80177a4:	2e00      	cmp	r6, #0
 80177a6:	d051      	beq.n	801784c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d04f      	beq.n	801784c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80177ac:	440c      	add	r4, r1
 80177ae:	b2a4      	uxth	r4, r4
 80177b0:	2100      	movs	r1, #0
 80177b2:	682b      	ldr	r3, [r5, #0]
 80177b4:	4293      	cmp	r3, r2
 80177b6:	da07      	bge.n	80177c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80177b8:	f1b8 0f00 	cmp.w	r8, #0
 80177bc:	d004      	beq.n	80177c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80177be:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80177c2:	682b      	ldr	r3, [r5, #0]
 80177c4:	3301      	adds	r3, #1
 80177c6:	602b      	str	r3, [r5, #0]
 80177c8:	2730      	movs	r7, #48	@ 0x30
 80177ca:	2c00      	cmp	r4, #0
 80177cc:	d04e      	beq.n	801786c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80177ce:	682e      	ldr	r6, [r5, #0]
 80177d0:	3c01      	subs	r4, #1
 80177d2:	42b2      	cmp	r2, r6
 80177d4:	b2a4      	uxth	r4, r4
 80177d6:	dd49      	ble.n	801786c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80177d8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80177dc:	682b      	ldr	r3, [r5, #0]
 80177de:	3301      	adds	r3, #1
 80177e0:	602b      	str	r3, [r5, #0]
 80177e2:	e7f2      	b.n	80177ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80177e4:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 80177e8:	d01d      	beq.n	8017826 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80177ea:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 80177ee:	d002      	beq.n	80177f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80177f0:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 80177f4:	e7c9      	b.n	801778a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80177f6:	4684      	mov	ip, r0
 80177f8:	f04f 0800 	mov.w	r8, #0
 80177fc:	2c00      	cmp	r4, #0
 80177fe:	d0c6      	beq.n	801778e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017800:	b947      	cbnz	r7, 8017814 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8017802:	2801      	cmp	r0, #1
 8017804:	d106      	bne.n	8017814 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8017806:	8814      	ldrh	r4, [r2, #0]
 8017808:	2c30      	cmp	r4, #48	@ 0x30
 801780a:	bf02      	ittt	eq
 801780c:	3202      	addeq	r2, #2
 801780e:	4638      	moveq	r0, r7
 8017810:	f8cb 2000 	streq.w	r2, [fp]
 8017814:	45bc      	cmp	ip, r7
 8017816:	da14      	bge.n	8017842 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8017818:	b2bf      	uxth	r7, r7
 801781a:	eba7 040c 	sub.w	r4, r7, ip
 801781e:	46bc      	mov	ip, r7
 8017820:	b2a4      	uxth	r4, r4
 8017822:	2600      	movs	r6, #0
 8017824:	e7b3      	b.n	801778e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017826:	4684      	mov	ip, r0
 8017828:	b16c      	cbz	r4, 8017846 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801782a:	42b8      	cmp	r0, r7
 801782c:	dd00      	ble.n	8017830 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801782e:	b2b8      	uxth	r0, r7
 8017830:	2400      	movs	r4, #0
 8017832:	e003      	b.n	801783c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8017834:	f04f 0c01 	mov.w	ip, #1
 8017838:	2400      	movs	r4, #0
 801783a:	4660      	mov	r0, ip
 801783c:	4626      	mov	r6, r4
 801783e:	46a0      	mov	r8, r4
 8017840:	e7a5      	b.n	801778e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017842:	2400      	movs	r4, #0
 8017844:	e7ed      	b.n	8017822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8017846:	4626      	mov	r6, r4
 8017848:	46a0      	mov	r8, r4
 801784a:	e7a0      	b.n	801778e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801784c:	2900      	cmp	r1, #0
 801784e:	d0b0      	beq.n	80177b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017850:	2720      	movs	r7, #32
 8017852:	682e      	ldr	r6, [r5, #0]
 8017854:	2900      	cmp	r1, #0
 8017856:	d0ac      	beq.n	80177b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017858:	3901      	subs	r1, #1
 801785a:	4296      	cmp	r6, r2
 801785c:	b289      	uxth	r1, r1
 801785e:	daa7      	bge.n	80177b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8017860:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8017864:	682b      	ldr	r3, [r5, #0]
 8017866:	3301      	adds	r3, #1
 8017868:	602b      	str	r3, [r5, #0]
 801786a:	e7f2      	b.n	8017852 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801786c:	b188      	cbz	r0, 8017892 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801786e:	682b      	ldr	r3, [r5, #0]
 8017870:	3801      	subs	r0, #1
 8017872:	429a      	cmp	r2, r3
 8017874:	b280      	uxth	r0, r0
 8017876:	dd0c      	ble.n	8017892 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8017878:	f8db 3000 	ldr.w	r3, [fp]
 801787c:	1c9c      	adds	r4, r3, #2
 801787e:	f8cb 4000 	str.w	r4, [fp]
 8017882:	881c      	ldrh	r4, [r3, #0]
 8017884:	682b      	ldr	r3, [r5, #0]
 8017886:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801788a:	682b      	ldr	r3, [r5, #0]
 801788c:	3301      	adds	r3, #1
 801788e:	602b      	str	r3, [r5, #0]
 8017890:	e7ec      	b.n	801786c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8017892:	2620      	movs	r6, #32
 8017894:	b151      	cbz	r1, 80178ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8017896:	6828      	ldr	r0, [r5, #0]
 8017898:	3901      	subs	r1, #1
 801789a:	4282      	cmp	r2, r0
 801789c:	b289      	uxth	r1, r1
 801789e:	dd05      	ble.n	80178ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80178a0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80178a4:	682b      	ldr	r3, [r5, #0]
 80178a6:	3301      	adds	r3, #1
 80178a8:	602b      	str	r3, [r5, #0]
 80178aa:	e7f3      	b.n	8017894 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80178ac:	b005      	add	sp, #20
 80178ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080178b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80178b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178b6:	2400      	movs	r4, #0
 80178b8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80178bc:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 80178c0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 80178c4:	8014      	strh	r4, [r2, #0]
 80178c6:	701c      	strb	r4, [r3, #0]
 80178c8:	f888 4000 	strb.w	r4, [r8]
 80178cc:	f88c 4000 	strb.w	r4, [ip]
 80178d0:	f88e 4000 	strb.w	r4, [lr]
 80178d4:	703c      	strb	r4, [r7, #0]
 80178d6:	6804      	ldr	r4, [r0, #0]
 80178d8:	b1a4      	cbz	r4, 8017904 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80178da:	8824      	ldrh	r4, [r4, #0]
 80178dc:	f04f 0901 	mov.w	r9, #1
 80178e0:	b314      	cbz	r4, 8017928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80178e2:	2c2b      	cmp	r4, #43	@ 0x2b
 80178e4:	d001      	beq.n	80178ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80178e6:	2c20      	cmp	r4, #32
 80178e8:	d110      	bne.n	801790c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80178ea:	8014      	strh	r4, [r2, #0]
 80178ec:	6804      	ldr	r4, [r0, #0]
 80178ee:	b10c      	cbz	r4, 80178f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80178f0:	3402      	adds	r4, #2
 80178f2:	6004      	str	r4, [r0, #0]
 80178f4:	680c      	ldr	r4, [r1, #0]
 80178f6:	b10c      	cbz	r4, 80178fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80178f8:	3401      	adds	r4, #1
 80178fa:	600c      	str	r4, [r1, #0]
 80178fc:	6804      	ldr	r4, [r0, #0]
 80178fe:	b17c      	cbz	r4, 8017920 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8017900:	8824      	ldrh	r4, [r4, #0]
 8017902:	e7ed      	b.n	80178e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017904:	680c      	ldr	r4, [r1, #0]
 8017906:	b17c      	cbz	r4, 8017928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017908:	7824      	ldrb	r4, [r4, #0]
 801790a:	e7e7      	b.n	80178dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801790c:	2c2d      	cmp	r4, #45	@ 0x2d
 801790e:	d102      	bne.n	8017916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8017910:	f883 9000 	strb.w	r9, [r3]
 8017914:	e7ea      	b.n	80178ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017916:	2c23      	cmp	r4, #35	@ 0x23
 8017918:	d107      	bne.n	801792a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801791a:	f888 9000 	strb.w	r9, [r8]
 801791e:	e7e5      	b.n	80178ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017920:	680c      	ldr	r4, [r1, #0]
 8017922:	b10c      	cbz	r4, 8017928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017924:	7824      	ldrb	r4, [r4, #0]
 8017926:	e7db      	b.n	80178e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017928:	2400      	movs	r4, #0
 801792a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801792e:	2b09      	cmp	r3, #9
 8017930:	d901      	bls.n	8017936 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8017932:	2c2a      	cmp	r4, #42	@ 0x2a
 8017934:	d122      	bne.n	801797c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017936:	2301      	movs	r3, #1
 8017938:	2c30      	cmp	r4, #48	@ 0x30
 801793a:	f88e 3000 	strb.w	r3, [lr]
 801793e:	d10d      	bne.n	801795c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8017940:	f88c 3000 	strb.w	r3, [ip]
 8017944:	6803      	ldr	r3, [r0, #0]
 8017946:	b10b      	cbz	r3, 801794c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8017948:	3302      	adds	r3, #2
 801794a:	6003      	str	r3, [r0, #0]
 801794c:	680b      	ldr	r3, [r1, #0]
 801794e:	b10b      	cbz	r3, 8017954 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8017950:	3301      	adds	r3, #1
 8017952:	600b      	str	r3, [r1, #0]
 8017954:	6803      	ldr	r3, [r0, #0]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d02f      	beq.n	80179ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801795a:	881c      	ldrh	r4, [r3, #0]
 801795c:	2c2a      	cmp	r4, #42	@ 0x2a
 801795e:	d135      	bne.n	80179cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8017960:	f04f 33ff 	mov.w	r3, #4294967295
 8017964:	6033      	str	r3, [r6, #0]
 8017966:	6803      	ldr	r3, [r0, #0]
 8017968:	b10b      	cbz	r3, 801796e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801796a:	3302      	adds	r3, #2
 801796c:	6003      	str	r3, [r0, #0]
 801796e:	680b      	ldr	r3, [r1, #0]
 8017970:	b10b      	cbz	r3, 8017976 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8017972:	3301      	adds	r3, #1
 8017974:	600b      	str	r3, [r1, #0]
 8017976:	6803      	ldr	r3, [r0, #0]
 8017978:	b31b      	cbz	r3, 80179c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801797a:	881c      	ldrh	r4, [r3, #0]
 801797c:	2c2e      	cmp	r4, #46	@ 0x2e
 801797e:	d11a      	bne.n	80179b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8017980:	2301      	movs	r3, #1
 8017982:	703b      	strb	r3, [r7, #0]
 8017984:	6803      	ldr	r3, [r0, #0]
 8017986:	b10b      	cbz	r3, 801798c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8017988:	3302      	adds	r3, #2
 801798a:	6003      	str	r3, [r0, #0]
 801798c:	680b      	ldr	r3, [r1, #0]
 801798e:	b10b      	cbz	r3, 8017994 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8017990:	3301      	adds	r3, #1
 8017992:	600b      	str	r3, [r1, #0]
 8017994:	6803      	ldr	r3, [r0, #0]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d036      	beq.n	8017a08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801799a:	881b      	ldrh	r3, [r3, #0]
 801799c:	2b2a      	cmp	r3, #42	@ 0x2a
 801799e:	d137      	bne.n	8017a10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80179a0:	f04f 33ff 	mov.w	r3, #4294967295
 80179a4:	602b      	str	r3, [r5, #0]
 80179a6:	6803      	ldr	r3, [r0, #0]
 80179a8:	b10b      	cbz	r3, 80179ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80179aa:	3302      	adds	r3, #2
 80179ac:	6003      	str	r3, [r0, #0]
 80179ae:	680b      	ldr	r3, [r1, #0]
 80179b0:	b10b      	cbz	r3, 80179b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80179b2:	3301      	adds	r3, #1
 80179b4:	600b      	str	r3, [r1, #0]
 80179b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179ba:	680c      	ldr	r4, [r1, #0]
 80179bc:	b134      	cbz	r4, 80179cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80179be:	7824      	ldrb	r4, [r4, #0]
 80179c0:	e7cc      	b.n	801795c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80179c2:	680b      	ldr	r3, [r1, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d0f6      	beq.n	80179b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80179c8:	781c      	ldrb	r4, [r3, #0]
 80179ca:	e7d7      	b.n	801797c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80179cc:	2300      	movs	r3, #0
 80179ce:	220a      	movs	r2, #10
 80179d0:	6033      	str	r3, [r6, #0]
 80179d2:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80179d6:	fa1f f38c 	uxth.w	r3, ip
 80179da:	2b09      	cmp	r3, #9
 80179dc:	d8ce      	bhi.n	801797c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80179de:	6833      	ldr	r3, [r6, #0]
 80179e0:	fb02 c303 	mla	r3, r2, r3, ip
 80179e4:	6033      	str	r3, [r6, #0]
 80179e6:	6803      	ldr	r3, [r0, #0]
 80179e8:	b10b      	cbz	r3, 80179ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80179ea:	3302      	adds	r3, #2
 80179ec:	6003      	str	r3, [r0, #0]
 80179ee:	680b      	ldr	r3, [r1, #0]
 80179f0:	b10b      	cbz	r3, 80179f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80179f2:	3301      	adds	r3, #1
 80179f4:	600b      	str	r3, [r1, #0]
 80179f6:	6803      	ldr	r3, [r0, #0]
 80179f8:	b10b      	cbz	r3, 80179fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80179fa:	881c      	ldrh	r4, [r3, #0]
 80179fc:	e7e9      	b.n	80179d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80179fe:	680c      	ldr	r4, [r1, #0]
 8017a00:	2c00      	cmp	r4, #0
 8017a02:	d0e6      	beq.n	80179d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017a04:	7824      	ldrb	r4, [r4, #0]
 8017a06:	e7e4      	b.n	80179d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017a08:	680b      	ldr	r3, [r1, #0]
 8017a0a:	b10b      	cbz	r3, 8017a10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8017a0c:	781b      	ldrb	r3, [r3, #0]
 8017a0e:	e7c5      	b.n	801799c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8017a10:	2200      	movs	r2, #0
 8017a12:	240a      	movs	r4, #10
 8017a14:	602a      	str	r2, [r5, #0]
 8017a16:	3b30      	subs	r3, #48	@ 0x30
 8017a18:	682a      	ldr	r2, [r5, #0]
 8017a1a:	b29e      	uxth	r6, r3
 8017a1c:	2e09      	cmp	r6, #9
 8017a1e:	d813      	bhi.n	8017a48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8017a20:	fb04 3302 	mla	r3, r4, r2, r3
 8017a24:	602b      	str	r3, [r5, #0]
 8017a26:	6803      	ldr	r3, [r0, #0]
 8017a28:	b10b      	cbz	r3, 8017a2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8017a2a:	3302      	adds	r3, #2
 8017a2c:	6003      	str	r3, [r0, #0]
 8017a2e:	680b      	ldr	r3, [r1, #0]
 8017a30:	b10b      	cbz	r3, 8017a36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8017a32:	3301      	adds	r3, #1
 8017a34:	600b      	str	r3, [r1, #0]
 8017a36:	6803      	ldr	r3, [r0, #0]
 8017a38:	b10b      	cbz	r3, 8017a3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8017a3a:	881b      	ldrh	r3, [r3, #0]
 8017a3c:	e7eb      	b.n	8017a16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017a3e:	680b      	ldr	r3, [r1, #0]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d0e8      	beq.n	8017a16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017a44:	781b      	ldrb	r3, [r3, #0]
 8017a46:	e7e6      	b.n	8017a16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017a48:	2a06      	cmp	r2, #6
 8017a4a:	bfa8      	it	ge
 8017a4c:	2206      	movge	r2, #6
 8017a4e:	602a      	str	r2, [r5, #0]
 8017a50:	e7b1      	b.n	80179b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08017a52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8017a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a56:	b0a3      	sub	sp, #140	@ 0x8c
 8017a58:	2600      	movs	r6, #0
 8017a5a:	4607      	mov	r7, r0
 8017a5c:	4688      	mov	r8, r1
 8017a5e:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8017a62:	4631      	mov	r1, r6
 8017a64:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8017a66:	4648      	mov	r0, r9
 8017a68:	960d      	str	r6, [sp, #52]	@ 0x34
 8017a6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017a6e:	2242      	movs	r2, #66	@ 0x42
 8017a70:	f00b feca 	bl	8023808 <memset>
 8017a74:	b15f      	cbz	r7, 8017a8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8017a76:	f108 3aff 	add.w	sl, r8, #4294967295
 8017a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017a7e:	b152      	cbz	r2, 8017a96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8017a80:	8812      	ldrh	r2, [r2, #0]
 8017a82:	b10a      	cbz	r2, 8017a88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017a84:	459a      	cmp	sl, r3
 8017a86:	dc2e      	bgt.n	8017ae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8017a88:	2200      	movs	r2, #0
 8017a8a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8017a8e:	4638      	mov	r0, r7
 8017a90:	b023      	add	sp, #140	@ 0x8c
 8017a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a96:	9a08      	ldr	r2, [sp, #32]
 8017a98:	2a00      	cmp	r2, #0
 8017a9a:	d0f5      	beq.n	8017a88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017a9c:	7812      	ldrb	r2, [r2, #0]
 8017a9e:	e7f0      	b.n	8017a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8017aa0:	2d00      	cmp	r5, #0
 8017aa2:	d0ea      	beq.n	8017a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017aa4:	782a      	ldrb	r2, [r5, #0]
 8017aa6:	b142      	cbz	r2, 8017aba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8017aa8:	2a25      	cmp	r2, #37	@ 0x25
 8017aaa:	d001      	beq.n	8017ab0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8017aac:	459a      	cmp	sl, r3
 8017aae:	dc08      	bgt.n	8017ac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8017ab0:	f1bb 0f00 	cmp.w	fp, #0
 8017ab4:	d121      	bne.n	8017afa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8017ab6:	2d00      	cmp	r5, #0
 8017ab8:	d0df      	beq.n	8017a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017aba:	782a      	ldrb	r2, [r5, #0]
 8017abc:	f04f 0b00 	mov.w	fp, #0
 8017ac0:	e01d      	b.n	8017afe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8017ac2:	f1bb 0f00 	cmp.w	fp, #0
 8017ac6:	d077      	beq.n	8017bb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8017ac8:	f8bb 2000 	ldrh.w	r2, [fp]
 8017acc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8017ad0:	f1bb 0f00 	cmp.w	fp, #0
 8017ad4:	d002      	beq.n	8017adc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8017ad6:	f10b 0202 	add.w	r2, fp, #2
 8017ada:	9209      	str	r2, [sp, #36]	@ 0x24
 8017adc:	b10d      	cbz	r5, 8017ae2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8017ade:	3501      	adds	r5, #1
 8017ae0:	9508      	str	r5, [sp, #32]
 8017ae2:	3301      	adds	r3, #1
 8017ae4:	930d      	str	r3, [sp, #52]	@ 0x34
 8017ae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017ae8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8017aec:	f1bb 0f00 	cmp.w	fp, #0
 8017af0:	d0d6      	beq.n	8017aa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8017af2:	f8bb 2000 	ldrh.w	r2, [fp]
 8017af6:	2a00      	cmp	r2, #0
 8017af8:	d1d6      	bne.n	8017aa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8017afa:	f8bb 2000 	ldrh.w	r2, [fp]
 8017afe:	2a00      	cmp	r2, #0
 8017b00:	d0bb      	beq.n	8017a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017b02:	459a      	cmp	sl, r3
 8017b04:	ddb9      	ble.n	8017a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017b06:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8017b0a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8017b0e:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8017b12:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8017b16:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8017b1a:	960e      	str	r6, [sp, #56]	@ 0x38
 8017b1c:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8017b20:	960f      	str	r6, [sp, #60]	@ 0x3c
 8017b22:	f1bb 0f00 	cmp.w	fp, #0
 8017b26:	d002      	beq.n	8017b2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8017b28:	f10b 0302 	add.w	r3, fp, #2
 8017b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b2e:	b10d      	cbz	r5, 8017b34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8017b30:	1c6b      	adds	r3, r5, #1
 8017b32:	9308      	str	r3, [sp, #32]
 8017b34:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017b36:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017b3a:	a908      	add	r1, sp, #32
 8017b3c:	a809      	add	r0, sp, #36	@ 0x24
 8017b3e:	9305      	str	r3, [sp, #20]
 8017b40:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8017b44:	9304      	str	r3, [sp, #16]
 8017b46:	ab0e      	add	r3, sp, #56	@ 0x38
 8017b48:	9303      	str	r3, [sp, #12]
 8017b4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8017b4c:	9302      	str	r3, [sp, #8]
 8017b4e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017b52:	9301      	str	r3, [sp, #4]
 8017b54:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8017b58:	9300      	str	r3, [sp, #0]
 8017b5a:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8017b5e:	f7ff fea8 	bl	80178b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8017b62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	bfbf      	itttt	lt
 8017b68:	6823      	ldrlt	r3, [r4, #0]
 8017b6a:	3404      	addlt	r4, #4
 8017b6c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017b70:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8017b72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	bfbe      	ittt	lt
 8017b78:	6823      	ldrlt	r3, [r4, #0]
 8017b7a:	3404      	addlt	r4, #4
 8017b7c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017b80:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8017b84:	bfb8      	it	lt
 8017b86:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8017b88:	b1d9      	cbz	r1, 8017bc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8017b8a:	880b      	ldrh	r3, [r1, #0]
 8017b8c:	2b69      	cmp	r3, #105	@ 0x69
 8017b8e:	d01f      	beq.n	8017bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017b90:	d82f      	bhi.n	8017bf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8017b92:	2b58      	cmp	r3, #88	@ 0x58
 8017b94:	d01c      	beq.n	8017bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017b96:	d818      	bhi.n	8017bca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8017b98:	2b25      	cmp	r3, #37	@ 0x25
 8017b9a:	d034      	beq.n	8017c06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8017b9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017b9e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8017ba2:	f1bb 0f00 	cmp.w	fp, #0
 8017ba6:	f000 80b7 	beq.w	8017d18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8017baa:	f8bb 5000 	ldrh.w	r5, [fp]
 8017bae:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8017bb2:	3301      	adds	r3, #1
 8017bb4:	930d      	str	r3, [sp, #52]	@ 0x34
 8017bb6:	e029      	b.n	8017c0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8017bb8:	b10d      	cbz	r5, 8017bbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8017bba:	782a      	ldrb	r2, [r5, #0]
 8017bbc:	e786      	b.n	8017acc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8017bbe:	462a      	mov	r2, r5
 8017bc0:	e784      	b.n	8017acc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8017bc2:	2a00      	cmp	r2, #0
 8017bc4:	d0ea      	beq.n	8017b9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017bc6:	7813      	ldrb	r3, [r2, #0]
 8017bc8:	e7e0      	b.n	8017b8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8017bca:	3b63      	subs	r3, #99	@ 0x63
 8017bcc:	2b01      	cmp	r3, #1
 8017bce:	d8e5      	bhi.n	8017b9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017bd0:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8017bd4:	b329      	cbz	r1, 8017c22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8017bd6:	880b      	ldrh	r3, [r1, #0]
 8017bd8:	2b69      	cmp	r3, #105	@ 0x69
 8017bda:	d063      	beq.n	8017ca4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017bdc:	d825      	bhi.n	8017c2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8017bde:	2b63      	cmp	r3, #99	@ 0x63
 8017be0:	d038      	beq.n	8017c54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8017be2:	2b64      	cmp	r3, #100	@ 0x64
 8017be4:	d05e      	beq.n	8017ca4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017be6:	2b58      	cmp	r3, #88	@ 0x58
 8017be8:	d07a      	beq.n	8017ce0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8017bea:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8017bee:	4625      	mov	r5, r4
 8017bf0:	e036      	b.n	8017c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017bf2:	2b73      	cmp	r3, #115	@ 0x73
 8017bf4:	d0ec      	beq.n	8017bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017bf6:	d802      	bhi.n	8017bfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8017bf8:	2b6f      	cmp	r3, #111	@ 0x6f
 8017bfa:	d1cf      	bne.n	8017b9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017bfc:	e7e8      	b.n	8017bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017bfe:	2b75      	cmp	r3, #117	@ 0x75
 8017c00:	d0e6      	beq.n	8017bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017c02:	2b78      	cmp	r3, #120	@ 0x78
 8017c04:	e7f9      	b.n	8017bfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8017c06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017c08:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8017c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c0e:	b10b      	cbz	r3, 8017c14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8017c10:	3302      	adds	r3, #2
 8017c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c14:	9b08      	ldr	r3, [sp, #32]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	f43f af2f 	beq.w	8017a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	9308      	str	r3, [sp, #32]
 8017c20:	e72b      	b.n	8017a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017c22:	2a00      	cmp	r2, #0
 8017c24:	d0e1      	beq.n	8017bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017c26:	7813      	ldrb	r3, [r2, #0]
 8017c28:	e7d6      	b.n	8017bd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8017c2a:	2b73      	cmp	r3, #115	@ 0x73
 8017c2c:	d036      	beq.n	8017c9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8017c2e:	d807      	bhi.n	8017c40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8017c30:	2b6f      	cmp	r3, #111	@ 0x6f
 8017c32:	d1da      	bne.n	8017bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017c34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017c36:	1d25      	adds	r5, r4, #4
 8017c38:	2308      	movs	r3, #8
 8017c3a:	eba8 0202 	sub.w	r2, r8, r2
 8017c3e:	e049      	b.n	8017cd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8017c40:	2b75      	cmp	r3, #117	@ 0x75
 8017c42:	d042      	beq.n	8017cca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8017c44:	2b78      	cmp	r3, #120	@ 0x78
 8017c46:	d1d0      	bne.n	8017bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017c48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017c4a:	1d25      	adds	r5, r4, #4
 8017c4c:	2310      	movs	r3, #16
 8017c4e:	eba8 0202 	sub.w	r2, r8, r2
 8017c52:	e03f      	b.n	8017cd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8017c54:	6823      	ldr	r3, [r4, #0]
 8017c56:	1d25      	adds	r5, r4, #4
 8017c58:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8017c5c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8017c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c62:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d051      	beq.n	8017d0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8017c6a:	881a      	ldrh	r2, [r3, #0]
 8017c6c:	a80d      	add	r0, sp, #52	@ 0x34
 8017c6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8017c72:	462c      	mov	r4, r5
 8017c74:	9005      	str	r0, [sp, #20]
 8017c76:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8017c7a:	9004      	str	r0, [sp, #16]
 8017c7c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8017c7e:	9003      	str	r0, [sp, #12]
 8017c80:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8017c84:	9002      	str	r0, [sp, #8]
 8017c86:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8017c88:	9001      	str	r0, [sp, #4]
 8017c8a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8017c8e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8017c92:	9000      	str	r0, [sp, #0]
 8017c94:	a810      	add	r0, sp, #64	@ 0x40
 8017c96:	f7ff fd49 	bl	801772c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8017c9a:	e7b7      	b.n	8017c0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8017c9c:	1d25      	adds	r5, r4, #4
 8017c9e:	6823      	ldr	r3, [r4, #0]
 8017ca0:	9310      	str	r3, [sp, #64]	@ 0x40
 8017ca2:	e7dd      	b.n	8017c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017ca4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017ca6:	230a      	movs	r3, #10
 8017ca8:	4649      	mov	r1, r9
 8017caa:	6820      	ldr	r0, [r4, #0]
 8017cac:	eba8 0202 	sub.w	r2, r8, r2
 8017cb0:	1d25      	adds	r5, r4, #4
 8017cb2:	b292      	uxth	r2, r2
 8017cb4:	f7ff fcf0 	bl	8017698 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8017cb8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8017cbc:	2b2d      	cmp	r3, #45	@ 0x2d
 8017cbe:	d1cf      	bne.n	8017c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017cc0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017cc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017cc6:	3302      	adds	r3, #2
 8017cc8:	e7ea      	b.n	8017ca0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8017cca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017ccc:	1d25      	adds	r5, r4, #4
 8017cce:	230a      	movs	r3, #10
 8017cd0:	eba8 0202 	sub.w	r2, r8, r2
 8017cd4:	b292      	uxth	r2, r2
 8017cd6:	4649      	mov	r1, r9
 8017cd8:	6820      	ldr	r0, [r4, #0]
 8017cda:	f7ff fd09 	bl	80176f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8017cde:	e7bf      	b.n	8017c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017ce0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017ce2:	2310      	movs	r3, #16
 8017ce4:	4649      	mov	r1, r9
 8017ce6:	6820      	ldr	r0, [r4, #0]
 8017ce8:	eba8 0202 	sub.w	r2, r8, r2
 8017cec:	1d25      	adds	r5, r4, #4
 8017cee:	b292      	uxth	r2, r2
 8017cf0:	f7ff fcfe 	bl	80176f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8017cf4:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8017cf8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d0af      	beq.n	8017c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017d00:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8017d04:	2919      	cmp	r1, #25
 8017d06:	d8f7      	bhi.n	8017cf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8017d08:	3b20      	subs	r3, #32
 8017d0a:	8013      	strh	r3, [r2, #0]
 8017d0c:	e7f4      	b.n	8017cf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8017d0e:	9a08      	ldr	r2, [sp, #32]
 8017d10:	2a00      	cmp	r2, #0
 8017d12:	d0ab      	beq.n	8017c6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8017d14:	7812      	ldrb	r2, [r2, #0]
 8017d16:	e7a9      	b.n	8017c6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8017d18:	2d00      	cmp	r5, #0
 8017d1a:	f43f af48 	beq.w	8017bae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8017d1e:	782d      	ldrb	r5, [r5, #0]
 8017d20:	e745      	b.n	8017bae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08017d22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8017d22:	b507      	push	{r0, r1, r2, lr}
 8017d24:	9300      	str	r3, [sp, #0]
 8017d26:	4613      	mov	r3, r2
 8017d28:	2200      	movs	r2, #0
 8017d2a:	f7ff fe92 	bl	8017a52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8017d2e:	b003      	add	sp, #12
 8017d30:	f85d fb04 	ldr.w	pc, [sp], #4

08017d34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8017d34:	b40c      	push	{r2, r3}
 8017d36:	b507      	push	{r0, r1, r2, lr}
 8017d38:	ab04      	add	r3, sp, #16
 8017d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d3e:	9301      	str	r3, [sp, #4]
 8017d40:	f7ff ffef 	bl	8017d22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8017d44:	b003      	add	sp, #12
 8017d46:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d4a:	b002      	add	sp, #8
 8017d4c:	4770      	bx	lr
	...

08017d50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8017d50:	4b01      	ldr	r3, [pc, #4]	@ (8017d58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8017d52:	6018      	str	r0, [r3, #0]
 8017d54:	4770      	bx	lr
 8017d56:	bf00      	nop
 8017d58:	24025364 	.word	0x24025364

08017d5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017d5c:	4b06      	ldr	r3, [pc, #24]	@ (8017d78 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8017d5e:	881a      	ldrh	r2, [r3, #0]
 8017d60:	4282      	cmp	r2, r0
 8017d62:	d807      	bhi.n	8017d74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8017d64:	4b05      	ldr	r3, [pc, #20]	@ (8017d7c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8017d66:	881b      	ldrh	r3, [r3, #0]
 8017d68:	4413      	add	r3, r2
 8017d6a:	4298      	cmp	r0, r3
 8017d6c:	bfac      	ite	ge
 8017d6e:	2000      	movge	r0, #0
 8017d70:	2001      	movlt	r0, #1
 8017d72:	4770      	bx	lr
 8017d74:	2000      	movs	r0, #0
 8017d76:	4770      	bx	lr
 8017d78:	24025384 	.word	0x24025384
 8017d7c:	24025388 	.word	0x24025388

08017d80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8017d80:	b508      	push	{r3, lr}
 8017d82:	4601      	mov	r1, r0
 8017d84:	f7ff ffea 	bl	8017d5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017d88:	b118      	cbz	r0, 8017d92 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8017d8a:	4b02      	ldr	r3, [pc, #8]	@ (8017d94 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8017d92:	bd08      	pop	{r3, pc}
 8017d94:	24025368 	.word	0x24025368

08017d98 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8017d98:	b538      	push	{r3, r4, r5, lr}
 8017d9a:	4604      	mov	r4, r0
 8017d9c:	f7ff ffde 	bl	8017d5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017da0:	b1d8      	cbz	r0, 8017dda <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8017da2:	4b0f      	ldr	r3, [pc, #60]	@ (8017de0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8017da4:	881b      	ldrh	r3, [r3, #0]
 8017da6:	1ae4      	subs	r4, r4, r3
 8017da8:	230e      	movs	r3, #14
 8017daa:	4363      	muls	r3, r4
 8017dac:	4c0d      	ldr	r4, [pc, #52]	@ (8017de4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8017dae:	6825      	ldr	r5, [r4, #0]
 8017db0:	18ea      	adds	r2, r5, r3
 8017db2:	7b12      	ldrb	r2, [r2, #12]
 8017db4:	f012 0220 	ands.w	r2, r2, #32
 8017db8:	d010      	beq.n	8017ddc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8017dba:	f9b1 2000 	ldrsh.w	r2, [r1]
 8017dbe:	52ea      	strh	r2, [r5, r3]
 8017dc0:	6822      	ldr	r2, [r4, #0]
 8017dc2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017dc6:	441a      	add	r2, r3
 8017dc8:	8055      	strh	r5, [r2, #2]
 8017dca:	6822      	ldr	r2, [r4, #0]
 8017dcc:	4413      	add	r3, r2
 8017dce:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8017dd2:	809a      	strh	r2, [r3, #4]
 8017dd4:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8017dd8:	80da      	strh	r2, [r3, #6]
 8017dda:	bd38      	pop	{r3, r4, r5, pc}
 8017ddc:	4610      	mov	r0, r2
 8017dde:	e7fc      	b.n	8017dda <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8017de0:	24025384 	.word	0x24025384
 8017de4:	2402536c 	.word	0x2402536c

08017de8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8017de8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017dec:	4606      	mov	r6, r0
 8017dee:	460c      	mov	r4, r1
 8017df0:	f7ff ffb4 	bl	8017d5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017df4:	b918      	cbnz	r0, 8017dfe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8017df6:	2000      	movs	r0, #0
 8017df8:	b002      	add	sp, #8
 8017dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dfe:	4608      	mov	r0, r1
 8017e00:	f7f6 fb85 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017e04:	2800      	cmp	r0, #0
 8017e06:	d1f6      	bne.n	8017df6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017e08:	4b3f      	ldr	r3, [pc, #252]	@ (8017f08 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8017e0a:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8017f0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8017e0e:	881d      	ldrh	r5, [r3, #0]
 8017e10:	f8d9 a000 	ldr.w	sl, [r9]
 8017e14:	46c8      	mov	r8, r9
 8017e16:	1b73      	subs	r3, r6, r5
 8017e18:	250e      	movs	r5, #14
 8017e1a:	435d      	muls	r5, r3
 8017e1c:	eb0a 0705 	add.w	r7, sl, r5
 8017e20:	7b3b      	ldrb	r3, [r7, #12]
 8017e22:	f013 0f20 	tst.w	r3, #32
 8017e26:	d0e6      	beq.n	8017df6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017e28:	4621      	mov	r1, r4
 8017e2a:	4638      	mov	r0, r7
 8017e2c:	f7fc f94a 	bl	80140c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017e30:	2800      	cmp	r0, #0
 8017e32:	d1e1      	bne.n	8017df8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017e34:	4639      	mov	r1, r7
 8017e36:	4620      	mov	r0, r4
 8017e38:	f7fc f944 	bl	80140c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017e3c:	b108      	cbz	r0, 8017e42 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8017e3e:	4621      	mov	r1, r4
 8017e40:	e020      	b.n	8017e84 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8017e42:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017e46:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d11e      	bne.n	8017e8c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017e4e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017e52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8017e56:	429a      	cmp	r2, r3
 8017e58:	d118      	bne.n	8017e8c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017e5a:	6820      	ldr	r0, [r4, #0]
 8017e5c:	466b      	mov	r3, sp
 8017e5e:	6861      	ldr	r1, [r4, #4]
 8017e60:	c303      	stmia	r3!, {r0, r1}
 8017e62:	4639      	mov	r1, r7
 8017e64:	4668      	mov	r0, sp
 8017e66:	f7fc f953 	bl	8014110 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017e6a:	f8d9 3000 	ldr.w	r3, [r9]
 8017e6e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017e72:	442b      	add	r3, r5
 8017e74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017e78:	4413      	add	r3, r2
 8017e7a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8017e7e:	4293      	cmp	r3, r2
 8017e80:	dc04      	bgt.n	8017e8c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017e82:	4669      	mov	r1, sp
 8017e84:	4630      	mov	r0, r6
 8017e86:	f7ff ff87 	bl	8017d98 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8017e8a:	e7b5      	b.n	8017df8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8017e90:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017e94:	442b      	add	r3, r5
 8017e96:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017e9a:	4291      	cmp	r1, r2
 8017e9c:	d119      	bne.n	8017ed2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8017e9e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017ea2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8017ea6:	4291      	cmp	r1, r2
 8017ea8:	d113      	bne.n	8017ed2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8017eaa:	6820      	ldr	r0, [r4, #0]
 8017eac:	466a      	mov	r2, sp
 8017eae:	6861      	ldr	r1, [r4, #4]
 8017eb0:	c203      	stmia	r2!, {r0, r1}
 8017eb2:	4619      	mov	r1, r3
 8017eb4:	4668      	mov	r0, sp
 8017eb6:	f7fc f92b 	bl	8014110 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017eba:	f8d8 3000 	ldr.w	r3, [r8]
 8017ebe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017ec2:	442b      	add	r3, r5
 8017ec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017ec8:	4413      	add	r3, r2
 8017eca:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017ece:	4293      	cmp	r3, r2
 8017ed0:	ddd7      	ble.n	8017e82 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	f7f6 fb1b 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ed8:	b990      	cbnz	r0, 8017f00 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8017eda:	88a7      	ldrh	r7, [r4, #4]
 8017edc:	88e3      	ldrh	r3, [r4, #6]
 8017ede:	fb17 f703 	smulbb	r7, r7, r3
 8017ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8017ee6:	441d      	add	r5, r3
 8017ee8:	4628      	mov	r0, r5
 8017eea:	f7f6 fb10 	bl	800e50e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017eee:	b948      	cbnz	r0, 8017f04 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8017ef0:	88ab      	ldrh	r3, [r5, #4]
 8017ef2:	88ea      	ldrh	r2, [r5, #6]
 8017ef4:	fb13 f302 	smulbb	r3, r3, r2
 8017ef8:	42bb      	cmp	r3, r7
 8017efa:	f6bf af7c 	bge.w	8017df6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017efe:	e79e      	b.n	8017e3e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8017f00:	2700      	movs	r7, #0
 8017f02:	e7ee      	b.n	8017ee2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8017f04:	2300      	movs	r3, #0
 8017f06:	e7f7      	b.n	8017ef8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8017f08:	24025384 	.word	0x24025384
 8017f0c:	2402536c 	.word	0x2402536c

08017f10 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8017f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f12:	4c24      	ldr	r4, [pc, #144]	@ (8017fa4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8017f14:	6823      	ldr	r3, [r4, #0]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d042      	beq.n	8017fa0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017f1a:	4a23      	ldr	r2, [pc, #140]	@ (8017fa8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8017f1c:	4d23      	ldr	r5, [pc, #140]	@ (8017fac <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8017f1e:	8811      	ldrh	r1, [r2, #0]
 8017f20:	f8b5 c000 	ldrh.w	ip, [r5]
 8017f24:	4822      	ldr	r0, [pc, #136]	@ (8017fb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8017f26:	4461      	add	r1, ip
 8017f28:	1c4a      	adds	r2, r1, #1
 8017f2a:	008f      	lsls	r7, r1, #2
 8017f2c:	f022 0201 	bic.w	r2, r2, #1
 8017f30:	19de      	adds	r6, r3, r7
 8017f32:	0412      	lsls	r2, r2, #16
 8017f34:	6006      	str	r6, [r0, #0]
 8017f36:	4e1f      	ldr	r6, [pc, #124]	@ (8017fb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8017f38:	0c12      	lsrs	r2, r2, #16
 8017f3a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8017f3e:	19da      	adds	r2, r3, r7
 8017f40:	6032      	str	r2, [r6, #0]
 8017f42:	220e      	movs	r2, #14
 8017f44:	fb02 f20c 	mul.w	r2, r2, ip
 8017f48:	3203      	adds	r2, #3
 8017f4a:	f022 0203 	bic.w	r2, r2, #3
 8017f4e:	443a      	add	r2, r7
 8017f50:	4f19      	ldr	r7, [pc, #100]	@ (8017fb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017f52:	4413      	add	r3, r2
 8017f54:	603b      	str	r3, [r7, #0]
 8017f56:	2300      	movs	r3, #0
 8017f58:	4f18      	ldr	r7, [pc, #96]	@ (8017fbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8017f5a:	469c      	mov	ip, r3
 8017f5c:	803b      	strh	r3, [r7, #0]
 8017f5e:	4f18      	ldr	r7, [pc, #96]	@ (8017fc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017f60:	683f      	ldr	r7, [r7, #0]
 8017f62:	1aba      	subs	r2, r7, r2
 8017f64:	4f17      	ldr	r7, [pc, #92]	@ (8017fc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8017f66:	603a      	str	r2, [r7, #0]
 8017f68:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8017f6c:	4a16      	ldr	r2, [pc, #88]	@ (8017fc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8017f6e:	8013      	strh	r3, [r2, #0]
 8017f70:	428b      	cmp	r3, r1
 8017f72:	d10d      	bne.n	8017f90 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8017f74:	882d      	ldrh	r5, [r5, #0]
 8017f76:	2300      	movs	r3, #0
 8017f78:	6830      	ldr	r0, [r6, #0]
 8017f7a:	240e      	movs	r4, #14
 8017f7c:	429d      	cmp	r5, r3
 8017f7e:	d90f      	bls.n	8017fa0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017f80:	fb04 0203 	mla	r2, r4, r3, r0
 8017f84:	3301      	adds	r3, #1
 8017f86:	7b11      	ldrb	r1, [r2, #12]
 8017f88:	f36f 1145 	bfc	r1, #5, #1
 8017f8c:	7311      	strb	r1, [r2, #12]
 8017f8e:	e7f5      	b.n	8017f7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8017f90:	6822      	ldr	r2, [r4, #0]
 8017f92:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8017f96:	6802      	ldr	r2, [r0, #0]
 8017f98:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8017f9c:	3301      	adds	r3, #1
 8017f9e:	e7e7      	b.n	8017f70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8017fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fa2:	bf00      	nop
 8017fa4:	24025368 	.word	0x24025368
 8017fa8:	24025384 	.word	0x24025384
 8017fac:	24025388 	.word	0x24025388
 8017fb0:	2402537c 	.word	0x2402537c
 8017fb4:	2402536c 	.word	0x2402536c
 8017fb8:	24025374 	.word	0x24025374
 8017fbc:	24025386 	.word	0x24025386
 8017fc0:	24025370 	.word	0x24025370
 8017fc4:	24025380 	.word	0x24025380
 8017fc8:	24025378 	.word	0x24025378

08017fcc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017fcc:	4b06      	ldr	r3, [pc, #24]	@ (8017fe8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	b943      	cbnz	r3, 8017fe4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017fd2:	b139      	cbz	r1, 8017fe4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017fd4:	4b05      	ldr	r3, [pc, #20]	@ (8017fec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8017fd6:	801a      	strh	r2, [r3, #0]
 8017fd8:	4b05      	ldr	r3, [pc, #20]	@ (8017ff0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8017fda:	6019      	str	r1, [r3, #0]
 8017fdc:	4b05      	ldr	r3, [pc, #20]	@ (8017ff4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8017fde:	6018      	str	r0, [r3, #0]
 8017fe0:	f7ff bf96 	b.w	8017f10 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017fe4:	4770      	bx	lr
 8017fe6:	bf00      	nop
 8017fe8:	24025374 	.word	0x24025374
 8017fec:	24025388 	.word	0x24025388
 8017ff0:	24025370 	.word	0x24025370
 8017ff4:	24025368 	.word	0x24025368

08017ff8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8017ff8:	b470      	push	{r4, r5, r6}
 8017ffa:	4c07      	ldr	r4, [pc, #28]	@ (8018018 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8017ffc:	4605      	mov	r5, r0
 8017ffe:	4610      	mov	r0, r2
 8018000:	9a03      	ldr	r2, [sp, #12]
 8018002:	6826      	ldr	r6, [r4, #0]
 8018004:	b936      	cbnz	r6, 8018014 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018006:	6025      	str	r5, [r4, #0]
 8018008:	4c04      	ldr	r4, [pc, #16]	@ (801801c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801800a:	8021      	strh	r1, [r4, #0]
 801800c:	4619      	mov	r1, r3
 801800e:	bc70      	pop	{r4, r5, r6}
 8018010:	f7ff bfdc 	b.w	8017fcc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018014:	bc70      	pop	{r4, r5, r6}
 8018016:	4770      	bx	lr
 8018018:	2402538c 	.word	0x2402538c
 801801c:	24025384 	.word	0x24025384

08018020 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018020:	4a12      	ldr	r2, [pc, #72]	@ (801806c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8018022:	8803      	ldrh	r3, [r0, #0]
 8018024:	8812      	ldrh	r2, [r2, #0]
 8018026:	4293      	cmp	r3, r2
 8018028:	d207      	bcs.n	801803a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801802a:	4a11      	ldr	r2, [pc, #68]	@ (8018070 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801802c:	2114      	movs	r1, #20
 801802e:	6812      	ldr	r2, [r2, #0]
 8018030:	fb01 2303 	mla	r3, r1, r3, r2
 8018034:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018038:	4770      	bx	lr
 801803a:	490e      	ldr	r1, [pc, #56]	@ (8018074 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801803c:	8809      	ldrh	r1, [r1, #0]
 801803e:	4411      	add	r1, r2
 8018040:	428b      	cmp	r3, r1
 8018042:	da04      	bge.n	801804e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018044:	1a9b      	subs	r3, r3, r2
 8018046:	4a0c      	ldr	r2, [pc, #48]	@ (8018078 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018048:	210e      	movs	r1, #14
 801804a:	6812      	ldr	r2, [r2, #0]
 801804c:	e7f0      	b.n	8018030 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801804e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8018052:	4293      	cmp	r3, r2
 8018054:	d108      	bne.n	8018068 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8018056:	4b09      	ldr	r3, [pc, #36]	@ (801807c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018058:	781b      	ldrb	r3, [r3, #0]
 801805a:	b91b      	cbnz	r3, 8018064 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801805c:	4b08      	ldr	r3, [pc, #32]	@ (8018080 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801805e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018062:	4770      	bx	lr
 8018064:	4b07      	ldr	r3, [pc, #28]	@ (8018084 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018066:	e7fa      	b.n	801805e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018068:	2000      	movs	r0, #0
 801806a:	4770      	bx	lr
 801806c:	24025384 	.word	0x24025384
 8018070:	2402538c 	.word	0x2402538c
 8018074:	24025388 	.word	0x24025388
 8018078:	2402536c 	.word	0x2402536c
 801807c:	240252f4 	.word	0x240252f4
 8018080:	240252f6 	.word	0x240252f6
 8018084:	240252f8 	.word	0x240252f8

08018088 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018088:	4a12      	ldr	r2, [pc, #72]	@ (80180d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801808a:	8803      	ldrh	r3, [r0, #0]
 801808c:	8812      	ldrh	r2, [r2, #0]
 801808e:	4293      	cmp	r3, r2
 8018090:	d207      	bcs.n	80180a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8018092:	4a11      	ldr	r2, [pc, #68]	@ (80180d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8018094:	2114      	movs	r1, #20
 8018096:	6812      	ldr	r2, [r2, #0]
 8018098:	fb01 2303 	mla	r3, r1, r3, r2
 801809c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80180a0:	4770      	bx	lr
 80180a2:	490e      	ldr	r1, [pc, #56]	@ (80180dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80180a4:	8809      	ldrh	r1, [r1, #0]
 80180a6:	4411      	add	r1, r2
 80180a8:	428b      	cmp	r3, r1
 80180aa:	da04      	bge.n	80180b6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80180ac:	1a9b      	subs	r3, r3, r2
 80180ae:	4a0c      	ldr	r2, [pc, #48]	@ (80180e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80180b0:	210e      	movs	r1, #14
 80180b2:	6812      	ldr	r2, [r2, #0]
 80180b4:	e7f0      	b.n	8018098 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80180b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80180ba:	4293      	cmp	r3, r2
 80180bc:	d108      	bne.n	80180d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80180be:	4b09      	ldr	r3, [pc, #36]	@ (80180e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80180c0:	781b      	ldrb	r3, [r3, #0]
 80180c2:	b91b      	cbnz	r3, 80180cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80180c4:	4b08      	ldr	r3, [pc, #32]	@ (80180e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80180c6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80180ca:	4770      	bx	lr
 80180cc:	4b07      	ldr	r3, [pc, #28]	@ (80180ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80180ce:	e7fa      	b.n	80180c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80180d0:	2000      	movs	r0, #0
 80180d2:	4770      	bx	lr
 80180d4:	24025384 	.word	0x24025384
 80180d8:	2402538c 	.word	0x2402538c
 80180dc:	24025388 	.word	0x24025388
 80180e0:	2402536c 	.word	0x2402536c
 80180e4:	240252f4 	.word	0x240252f4
 80180e8:	240252f8 	.word	0x240252f8
 80180ec:	240252f6 	.word	0x240252f6

080180f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80180f0:	4a22      	ldr	r2, [pc, #136]	@ (801817c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80180f2:	b530      	push	{r4, r5, lr}
 80180f4:	880b      	ldrh	r3, [r1, #0]
 80180f6:	8812      	ldrh	r2, [r2, #0]
 80180f8:	4293      	cmp	r3, r2
 80180fa:	d213      	bcs.n	8018124 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80180fc:	4a20      	ldr	r2, [pc, #128]	@ (8018180 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80180fe:	2114      	movs	r1, #20
 8018100:	6812      	ldr	r2, [r2, #0]
 8018102:	fb01 2303 	mla	r3, r1, r3, r2
 8018106:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801810a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801810e:	8a1a      	ldrh	r2, [r3, #16]
 8018110:	8a5b      	ldrh	r3, [r3, #18]
 8018112:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018116:	8004      	strh	r4, [r0, #0]
 8018118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801811c:	8041      	strh	r1, [r0, #2]
 801811e:	8082      	strh	r2, [r0, #4]
 8018120:	80c3      	strh	r3, [r0, #6]
 8018122:	e024      	b.n	801816e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8018124:	4917      	ldr	r1, [pc, #92]	@ (8018184 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018126:	8809      	ldrh	r1, [r1, #0]
 8018128:	4411      	add	r1, r2
 801812a:	428b      	cmp	r3, r1
 801812c:	da10      	bge.n	8018150 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801812e:	1a9b      	subs	r3, r3, r2
 8018130:	220e      	movs	r2, #14
 8018132:	4353      	muls	r3, r2
 8018134:	4a14      	ldr	r2, [pc, #80]	@ (8018188 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8018136:	6811      	ldr	r1, [r2, #0]
 8018138:	18ca      	adds	r2, r1, r3
 801813a:	5ecd      	ldrsh	r5, [r1, r3]
 801813c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8018140:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8018144:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8018148:	8005      	strh	r5, [r0, #0]
 801814a:	8044      	strh	r4, [r0, #2]
 801814c:	8081      	strh	r1, [r0, #4]
 801814e:	e7e7      	b.n	8018120 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018150:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8018154:	4293      	cmp	r3, r2
 8018156:	d10b      	bne.n	8018170 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8018158:	4b0c      	ldr	r3, [pc, #48]	@ (801818c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801815a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801815e:	4b0c      	ldr	r3, [pc, #48]	@ (8018190 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8018160:	8081      	strh	r1, [r0, #4]
 8018162:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018166:	2300      	movs	r3, #0
 8018168:	80c2      	strh	r2, [r0, #6]
 801816a:	8003      	strh	r3, [r0, #0]
 801816c:	8043      	strh	r3, [r0, #2]
 801816e:	bd30      	pop	{r4, r5, pc}
 8018170:	2300      	movs	r3, #0
 8018172:	8003      	strh	r3, [r0, #0]
 8018174:	8043      	strh	r3, [r0, #2]
 8018176:	8083      	strh	r3, [r0, #4]
 8018178:	e7d2      	b.n	8018120 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801817a:	bf00      	nop
 801817c:	24025384 	.word	0x24025384
 8018180:	2402538c 	.word	0x2402538c
 8018184:	24025388 	.word	0x24025388
 8018188:	2402536c 	.word	0x2402536c
 801818c:	240252f0 	.word	0x240252f0
 8018190:	240252f2 	.word	0x240252f2

08018194 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018194:	4a12      	ldr	r2, [pc, #72]	@ (80181e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018196:	8803      	ldrh	r3, [r0, #0]
 8018198:	8811      	ldrh	r1, [r2, #0]
 801819a:	428b      	cmp	r3, r1
 801819c:	d20b      	bcs.n	80181b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801819e:	4a11      	ldr	r2, [pc, #68]	@ (80181e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80181a0:	6812      	ldr	r2, [r2, #0]
 80181a2:	b112      	cbz	r2, 80181aa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80181a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80181a8:	b9c0      	cbnz	r0, 80181dc <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80181aa:	4a0f      	ldr	r2, [pc, #60]	@ (80181e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80181ac:	6811      	ldr	r1, [r2, #0]
 80181ae:	2214      	movs	r2, #20
 80181b0:	4353      	muls	r3, r2
 80181b2:	58c8      	ldr	r0, [r1, r3]
 80181b4:	4770      	bx	lr
 80181b6:	4a0d      	ldr	r2, [pc, #52]	@ (80181ec <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80181b8:	8812      	ldrh	r2, [r2, #0]
 80181ba:	440a      	add	r2, r1
 80181bc:	4293      	cmp	r3, r2
 80181be:	da04      	bge.n	80181ca <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80181c0:	4a08      	ldr	r2, [pc, #32]	@ (80181e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80181c2:	6812      	ldr	r2, [r2, #0]
 80181c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80181c8:	4770      	bx	lr
 80181ca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80181ce:	4293      	cmp	r3, r2
 80181d0:	d103      	bne.n	80181da <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80181d2:	4b07      	ldr	r3, [pc, #28]	@ (80181f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80181d8:	4770      	bx	lr
 80181da:	2000      	movs	r0, #0
 80181dc:	4770      	bx	lr
 80181de:	bf00      	nop
 80181e0:	24025384 	.word	0x24025384
 80181e4:	24025368 	.word	0x24025368
 80181e8:	2402538c 	.word	0x2402538c
 80181ec:	24025388 	.word	0x24025388
 80181f0:	240252fc 	.word	0x240252fc

080181f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80181f4:	4b24      	ldr	r3, [pc, #144]	@ (8018288 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80181f6:	8802      	ldrh	r2, [r0, #0]
 80181f8:	8818      	ldrh	r0, [r3, #0]
 80181fa:	4282      	cmp	r2, r0
 80181fc:	d221      	bcs.n	8018242 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80181fe:	4b23      	ldr	r3, [pc, #140]	@ (801828c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018200:	6819      	ldr	r1, [r3, #0]
 8018202:	2314      	movs	r3, #20
 8018204:	fb03 1302 	mla	r3, r3, r2, r1
 8018208:	6858      	ldr	r0, [r3, #4]
 801820a:	2800      	cmp	r0, #0
 801820c:	d03a      	beq.n	8018284 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801820e:	4920      	ldr	r1, [pc, #128]	@ (8018290 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018210:	6809      	ldr	r1, [r1, #0]
 8018212:	2900      	cmp	r1, #0
 8018214:	d036      	beq.n	8018284 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018216:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801821a:	2900      	cmp	r1, #0
 801821c:	d032      	beq.n	8018284 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801821e:	891a      	ldrh	r2, [r3, #8]
 8018220:	8958      	ldrh	r0, [r3, #10]
 8018222:	4350      	muls	r0, r2
 8018224:	7c5a      	ldrb	r2, [r3, #17]
 8018226:	7cdb      	ldrb	r3, [r3, #19]
 8018228:	0952      	lsrs	r2, r2, #5
 801822a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801822e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018232:	2b0b      	cmp	r3, #11
 8018234:	bf18      	it	ne
 8018236:	0040      	lslne	r0, r0, #1
 8018238:	3003      	adds	r0, #3
 801823a:	f020 0003 	bic.w	r0, r0, #3
 801823e:	4408      	add	r0, r1
 8018240:	4770      	bx	lr
 8018242:	4b14      	ldr	r3, [pc, #80]	@ (8018294 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018244:	881b      	ldrh	r3, [r3, #0]
 8018246:	4403      	add	r3, r0
 8018248:	429a      	cmp	r2, r3
 801824a:	da1a      	bge.n	8018282 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801824c:	4b12      	ldr	r3, [pc, #72]	@ (8018298 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801824e:	1a10      	subs	r0, r2, r0
 8018250:	210e      	movs	r1, #14
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	fb01 3000 	mla	r0, r1, r0, r3
 8018258:	7b03      	ldrb	r3, [r0, #12]
 801825a:	f003 031f 	and.w	r3, r3, #31
 801825e:	2b0b      	cmp	r3, #11
 8018260:	d10b      	bne.n	801827a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8018262:	8903      	ldrh	r3, [r0, #8]
 8018264:	8940      	ldrh	r0, [r0, #10]
 8018266:	4358      	muls	r0, r3
 8018268:	4b09      	ldr	r3, [pc, #36]	@ (8018290 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801826a:	3003      	adds	r0, #3
 801826c:	6819      	ldr	r1, [r3, #0]
 801826e:	f020 0303 	bic.w	r3, r0, #3
 8018272:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8018276:	4418      	add	r0, r3
 8018278:	4770      	bx	lr
 801827a:	2b0d      	cmp	r3, #13
 801827c:	d101      	bne.n	8018282 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801827e:	300d      	adds	r0, #13
 8018280:	4770      	bx	lr
 8018282:	2000      	movs	r0, #0
 8018284:	4770      	bx	lr
 8018286:	bf00      	nop
 8018288:	24025384 	.word	0x24025384
 801828c:	2402538c 	.word	0x2402538c
 8018290:	24025368 	.word	0x24025368
 8018294:	24025388 	.word	0x24025388
 8018298:	2402536c 	.word	0x2402536c

0801829c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801829c:	4b1f      	ldr	r3, [pc, #124]	@ (801831c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801829e:	b510      	push	{r4, lr}
 80182a0:	8802      	ldrh	r2, [r0, #0]
 80182a2:	881b      	ldrh	r3, [r3, #0]
 80182a4:	429a      	cmp	r2, r3
 80182a6:	d21a      	bcs.n	80182de <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 80182a8:	4b1d      	ldr	r3, [pc, #116]	@ (8018320 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 80182aa:	2114      	movs	r1, #20
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	fb01 3102 	mla	r1, r1, r2, r3
 80182b2:	7c4b      	ldrb	r3, [r1, #17]
 80182b4:	0958      	lsrs	r0, r3, #5
 80182b6:	7ccb      	ldrb	r3, [r1, #19]
 80182b8:	491a      	ldr	r1, [pc, #104]	@ (8018324 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 80182ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80182be:	6809      	ldr	r1, [r1, #0]
 80182c0:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 80182c4:	b2d8      	uxtb	r0, r3
 80182c6:	b149      	cbz	r1, 80182dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80182c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80182cc:	b132      	cbz	r2, 80182dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80182ce:	2b0e      	cmp	r3, #14
 80182d0:	d021      	beq.n	8018316 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 80182d2:	280f      	cmp	r0, #15
 80182d4:	d01d      	beq.n	8018312 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 80182d6:	2810      	cmp	r0, #16
 80182d8:	bf08      	it	eq
 80182da:	2002      	moveq	r0, #2
 80182dc:	bd10      	pop	{r4, pc}
 80182de:	4912      	ldr	r1, [pc, #72]	@ (8018328 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 80182e0:	8809      	ldrh	r1, [r1, #0]
 80182e2:	4419      	add	r1, r3
 80182e4:	428a      	cmp	r2, r1
 80182e6:	da09      	bge.n	80182fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 80182e8:	1ad3      	subs	r3, r2, r3
 80182ea:	4a10      	ldr	r2, [pc, #64]	@ (801832c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 80182ec:	210e      	movs	r1, #14
 80182ee:	6812      	ldr	r2, [r2, #0]
 80182f0:	fb01 2303 	mla	r3, r1, r3, r2
 80182f4:	7b18      	ldrb	r0, [r3, #12]
 80182f6:	f000 001f 	and.w	r0, r0, #31
 80182fa:	e7ef      	b.n	80182dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80182fc:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8018300:	429a      	cmp	r2, r3
 8018302:	d108      	bne.n	8018316 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8018304:	f7eb fe9e 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 8018308:	6803      	ldr	r3, [r0, #0]
 801830a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801830e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018310:	4718      	bx	r3
 8018312:	2001      	movs	r0, #1
 8018314:	e7e2      	b.n	80182dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8018316:	2000      	movs	r0, #0
 8018318:	e7e0      	b.n	80182dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801831a:	bf00      	nop
 801831c:	24025384 	.word	0x24025384
 8018320:	2402538c 	.word	0x2402538c
 8018324:	24025368 	.word	0x24025368
 8018328:	24025388 	.word	0x24025388
 801832c:	2402536c 	.word	0x2402536c

08018330 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8018330:	2018      	movs	r0, #24
 8018332:	4770      	bx	lr

08018334 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8018334:	2001      	movs	r0, #1
 8018336:	4770      	bx	lr

08018338 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8018338:	4b02      	ldr	r3, [pc, #8]	@ (8018344 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801833a:	8818      	ldrh	r0, [r3, #0]
 801833c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018340:	b280      	uxth	r0, r0
 8018342:	4770      	bx	lr
 8018344:	240252f6 	.word	0x240252f6

08018348 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018348:	2bff      	cmp	r3, #255	@ 0xff
 801834a:	d04c      	beq.n	80183e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801834c:	2a2c      	cmp	r2, #44	@ 0x2c
 801834e:	d030      	beq.n	80183b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8018350:	d80f      	bhi.n	8018372 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8018352:	2a08      	cmp	r2, #8
 8018354:	d043      	beq.n	80183de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8018356:	d805      	bhi.n	8018364 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8018358:	2a04      	cmp	r2, #4
 801835a:	d03e      	beq.n	80183da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801835c:	2a05      	cmp	r2, #5
 801835e:	d03a      	beq.n	80183d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8018360:	2300      	movs	r3, #0
 8018362:	e024      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018364:	2a0a      	cmp	r2, #10
 8018366:	d03a      	beq.n	80183de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8018368:	d301      	bcc.n	801836e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801836a:	2a0b      	cmp	r2, #11
 801836c:	d1f8      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801836e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8018370:	e01d      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018372:	2a30      	cmp	r2, #48	@ 0x30
 8018374:	d035      	beq.n	80183e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018376:	d80a      	bhi.n	801838e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 8018378:	2a2e      	cmp	r2, #46	@ 0x2e
 801837a:	684b      	ldr	r3, [r1, #4]
 801837c:	d023      	beq.n	80183c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801837e:	d90d      	bls.n	801839c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8018380:	781a      	ldrb	r2, [r3, #0]
 8018382:	785b      	ldrb	r3, [r3, #1]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d1eb      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018388:	b98a      	cbnz	r2, 80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801838a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801838c:	e00f      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801838e:	2a32      	cmp	r2, #50	@ 0x32
 8018390:	d027      	beq.n	80183e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018392:	d301      	bcc.n	8018398 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8018394:	2a33      	cmp	r2, #51	@ 0x33
 8018396:	d1e3      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018398:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801839a:	e008      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801839c:	781a      	ldrb	r2, [r3, #0]
 801839e:	785b      	ldrb	r3, [r3, #1]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d1dd      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80183a4:	2a00      	cmp	r2, #0
 80183a6:	d0f0      	beq.n	801838a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 80183a8:	2a01      	cmp	r2, #1
 80183aa:	d1d9      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80183ac:	6943      	ldr	r3, [r0, #20]
 80183ae:	4618      	mov	r0, r3
 80183b0:	4770      	bx	lr
 80183b2:	684b      	ldr	r3, [r1, #4]
 80183b4:	781a      	ldrb	r2, [r3, #0]
 80183b6:	785b      	ldrb	r3, [r3, #1]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d1d1      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80183bc:	b14a      	cbz	r2, 80183d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80183be:	2a01      	cmp	r2, #1
 80183c0:	bf08      	it	eq
 80183c2:	68c3      	ldreq	r3, [r0, #12]
 80183c4:	e7f3      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80183c6:	781a      	ldrb	r2, [r3, #0]
 80183c8:	785b      	ldrb	r3, [r3, #1]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d1c8      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80183ce:	2a00      	cmp	r2, #0
 80183d0:	d1ed      	bne.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80183d2:	69c3      	ldr	r3, [r0, #28]
 80183d4:	e7eb      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80183d6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80183d8:	e7e9      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80183da:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80183dc:	e7e7      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80183de:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80183e0:	e7e5      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80183e2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80183e4:	e7e3      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80183e6:	2a2c      	cmp	r2, #44	@ 0x2c
 80183e8:	d030      	beq.n	801844c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 80183ea:	d80f      	bhi.n	801840c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 80183ec:	2a08      	cmp	r2, #8
 80183ee:	d042      	beq.n	8018476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80183f0:	d805      	bhi.n	80183fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80183f2:	2a04      	cmp	r2, #4
 80183f4:	d03d      	beq.n	8018472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80183f6:	2a05      	cmp	r2, #5
 80183f8:	d1b2      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80183fa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80183fc:	e7d7      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80183fe:	2a0a      	cmp	r2, #10
 8018400:	d039      	beq.n	8018476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018402:	d301      	bcc.n	8018408 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8018404:	2a0b      	cmp	r2, #11
 8018406:	d1ab      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018408:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801840a:	e7d0      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801840c:	2a30      	cmp	r2, #48	@ 0x30
 801840e:	d034      	beq.n	801847a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018410:	d80b      	bhi.n	801842a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8018412:	2a2e      	cmp	r2, #46	@ 0x2e
 8018414:	684b      	ldr	r3, [r1, #4]
 8018416:	d023      	beq.n	8018460 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8018418:	d90e      	bls.n	8018438 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801841a:	781a      	ldrb	r2, [r3, #0]
 801841c:	785b      	ldrb	r3, [r3, #1]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d19e      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018422:	2a00      	cmp	r2, #0
 8018424:	d1c3      	bne.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018426:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8018428:	e7c1      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801842a:	2a32      	cmp	r2, #50	@ 0x32
 801842c:	d025      	beq.n	801847a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801842e:	d301      	bcc.n	8018434 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8018430:	2a33      	cmp	r2, #51	@ 0x33
 8018432:	d195      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018434:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8018436:	e7ba      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018438:	781a      	ldrb	r2, [r3, #0]
 801843a:	785b      	ldrb	r3, [r3, #1]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d18f      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018440:	2a00      	cmp	r2, #0
 8018442:	d0f0      	beq.n	8018426 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8018444:	2a01      	cmp	r2, #1
 8018446:	d18b      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018448:	6983      	ldr	r3, [r0, #24]
 801844a:	e7b0      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801844c:	684b      	ldr	r3, [r1, #4]
 801844e:	781a      	ldrb	r2, [r3, #0]
 8018450:	785b      	ldrb	r3, [r3, #1]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d184      	bne.n	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018456:	b152      	cbz	r2, 801846e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8018458:	2a01      	cmp	r2, #1
 801845a:	bf08      	it	eq
 801845c:	6903      	ldreq	r3, [r0, #16]
 801845e:	e7a6      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018460:	781a      	ldrb	r2, [r3, #0]
 8018462:	785b      	ldrb	r3, [r3, #1]
 8018464:	2b00      	cmp	r3, #0
 8018466:	f47f af7b 	bne.w	8018360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801846a:	2a00      	cmp	r2, #0
 801846c:	d19f      	bne.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801846e:	6a03      	ldr	r3, [r0, #32]
 8018470:	e79d      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018472:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018474:	e79b      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018476:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018478:	e799      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801847a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801847c:	e797      	b.n	80183ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801847e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801847e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018482:	b085      	sub	sp, #20
 8018484:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8018486:	9203      	str	r2, [sp, #12]
 8018488:	6870      	ldr	r0, [r6, #4]
 801848a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801848e:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8018492:	9101      	str	r1, [sp, #4]
 8018494:	fa1f f885 	uxth.w	r8, r5
 8018498:	43ed      	mvns	r5, r5
 801849a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801849e:	b2ed      	uxtb	r5, r5
 80184a0:	fb00 2404 	mla	r4, r0, r4, r2
 80184a4:	6832      	ldr	r2, [r6, #0]
 80184a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80184aa:	4414      	add	r4, r2
 80184ac:	f8dc 2000 	ldr.w	r2, [ip]
 80184b0:	9202      	str	r2, [sp, #8]
 80184b2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80184b6:	f102 0e04 	add.w	lr, r2, #4
 80184ba:	9a01      	ldr	r2, [sp, #4]
 80184bc:	2a00      	cmp	r2, #0
 80184be:	dc03      	bgt.n	80184c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80184c0:	9a03      	ldr	r2, [sp, #12]
 80184c2:	2a00      	cmp	r2, #0
 80184c4:	f340 8116 	ble.w	80186f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80184c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80184ca:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80184ce:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80184d2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80184d4:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80184d8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80184dc:	2b00      	cmp	r3, #0
 80184de:	dd0e      	ble.n	80184fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80184e0:	1406      	asrs	r6, r0, #16
 80184e2:	d405      	bmi.n	80184f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80184e4:	4556      	cmp	r6, sl
 80184e6:	da03      	bge.n	80184f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80184e8:	1416      	asrs	r6, r2, #16
 80184ea:	d401      	bmi.n	80184f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80184ec:	454e      	cmp	r6, r9
 80184ee:	db07      	blt.n	8018500 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80184f0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80184f2:	3b01      	subs	r3, #1
 80184f4:	3403      	adds	r4, #3
 80184f6:	4430      	add	r0, r6
 80184f8:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80184fa:	4432      	add	r2, r6
 80184fc:	e7ee      	b.n	80184dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80184fe:	d063      	beq.n	80185c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018500:	1e5e      	subs	r6, r3, #1
 8018502:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8018504:	fb07 0706 	mla	r7, r7, r6, r0
 8018508:	143f      	asrs	r7, r7, #16
 801850a:	d454      	bmi.n	80185b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801850c:	4557      	cmp	r7, sl
 801850e:	da52      	bge.n	80185b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018510:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8018512:	fb07 2606 	mla	r6, r7, r6, r2
 8018516:	1436      	asrs	r6, r6, #16
 8018518:	d44d      	bmi.n	80185b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801851a:	454e      	cmp	r6, r9
 801851c:	da4b      	bge.n	80185b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801851e:	1ce6      	adds	r6, r4, #3
 8018520:	4699      	mov	r9, r3
 8018522:	f1b9 0f00 	cmp.w	r9, #0
 8018526:	f106 0603 	add.w	r6, r6, #3
 801852a:	dd48      	ble.n	80185be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801852c:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8018530:	1417      	asrs	r7, r2, #16
 8018532:	9902      	ldr	r1, [sp, #8]
 8018534:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018538:	f109 39ff 	add.w	r9, r9, #4294967295
 801853c:	fb0b 1707 	mla	r7, fp, r7, r1
 8018540:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018544:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018546:	f817 700a 	ldrb.w	r7, [r7, sl]
 801854a:	fb1b fb05 	smulbb	fp, fp, r5
 801854e:	4408      	add	r0, r1
 8018550:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018552:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018556:	440a      	add	r2, r1
 8018558:	eb0e 0a07 	add.w	sl, lr, r7
 801855c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8018560:	fb07 b708 	mla	r7, r7, r8, fp
 8018564:	b2bf      	uxth	r7, r7
 8018566:	f107 0b01 	add.w	fp, r7, #1
 801856a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801856e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018572:	fb1b fb05 	smulbb	fp, fp, r5
 8018576:	123f      	asrs	r7, r7, #8
 8018578:	f806 7c06 	strb.w	r7, [r6, #-6]
 801857c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018580:	fb07 b708 	mla	r7, r7, r8, fp
 8018584:	b2bf      	uxth	r7, r7
 8018586:	f107 0b01 	add.w	fp, r7, #1
 801858a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801858e:	123f      	asrs	r7, r7, #8
 8018590:	f806 7c05 	strb.w	r7, [r6, #-5]
 8018594:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018598:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801859c:	fb1a fa05 	smulbb	sl, sl, r5
 80185a0:	fb07 a708 	mla	r7, r7, r8, sl
 80185a4:	b2bf      	uxth	r7, r7
 80185a6:	f107 0a01 	add.w	sl, r7, #1
 80185aa:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80185ae:	123f      	asrs	r7, r7, #8
 80185b0:	f806 7c04 	strb.w	r7, [r6, #-4]
 80185b4:	e7b5      	b.n	8018522 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80185b6:	2700      	movs	r7, #0
 80185b8:	1bde      	subs	r6, r3, r7
 80185ba:	2e00      	cmp	r6, #0
 80185bc:	dc42      	bgt.n	8018644 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80185be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80185c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80185c6:	441c      	add	r4, r3
 80185c8:	9b01      	ldr	r3, [sp, #4]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	f340 8092 	ble.w	80186f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80185d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80185d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80185d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80185da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80185de:	eef0 6a62 	vmov.f32	s13, s5
 80185e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80185e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80185ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80185ee:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 80185f2:	eef0 6a43 	vmov.f32	s13, s6
 80185f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80185fa:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 80185fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018602:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018606:	ee77 2a62 	vsub.f32	s5, s14, s5
 801860a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801860e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018612:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018616:	ee12 2a90 	vmov	r2, s5
 801861a:	eef0 2a47 	vmov.f32	s5, s14
 801861e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018622:	ee13 2a10 	vmov	r2, s6
 8018626:	9311      	str	r3, [sp, #68]	@ 0x44
 8018628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801862a:	eeb0 3a67 	vmov.f32	s6, s15
 801862e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018632:	9312      	str	r3, [sp, #72]	@ 0x48
 8018634:	9b01      	ldr	r3, [sp, #4]
 8018636:	9a03      	ldr	r2, [sp, #12]
 8018638:	3b01      	subs	r3, #1
 801863a:	9301      	str	r3, [sp, #4]
 801863c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801863e:	bf08      	it	eq
 8018640:	4613      	moveq	r3, r2
 8018642:	e73a      	b.n	80184ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018644:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8018648:	d44e      	bmi.n	80186e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801864a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801864e:	4556      	cmp	r6, sl
 8018650:	dd4a      	ble.n	80186e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018652:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8018656:	d447      	bmi.n	80186e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018658:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801865c:	4559      	cmp	r1, fp
 801865e:	dd43      	ble.n	80186e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018660:	fa0f f986 	sxth.w	r9, r6
 8018664:	9902      	ldr	r1, [sp, #8]
 8018666:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801866a:	fb0b 1909 	mla	r9, fp, r9, r1
 801866e:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018672:	f819 900a 	ldrb.w	r9, [r9, sl]
 8018676:	fb1b fb05 	smulbb	fp, fp, r5
 801867a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801867e:	eb0e 0a09 	add.w	sl, lr, r9
 8018682:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8018686:	fb09 b908 	mla	r9, r9, r8, fp
 801868a:	fa1f f989 	uxth.w	r9, r9
 801868e:	f109 0b01 	add.w	fp, r9, #1
 8018692:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018696:	ea4f 2929 	mov.w	r9, r9, asr #8
 801869a:	f804 9006 	strb.w	r9, [r4, r6]
 801869e:	4426      	add	r6, r4
 80186a0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80186a4:	f896 b001 	ldrb.w	fp, [r6, #1]
 80186a8:	fb1b fb05 	smulbb	fp, fp, r5
 80186ac:	fb09 b908 	mla	r9, r9, r8, fp
 80186b0:	fa1f f989 	uxth.w	r9, r9
 80186b4:	f109 0b01 	add.w	fp, r9, #1
 80186b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80186bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80186c0:	f886 9001 	strb.w	r9, [r6, #1]
 80186c4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80186c8:	f896 a002 	ldrb.w	sl, [r6, #2]
 80186cc:	fb1a fa05 	smulbb	sl, sl, r5
 80186d0:	fb09 a908 	mla	r9, r9, r8, sl
 80186d4:	fa1f f989 	uxth.w	r9, r9
 80186d8:	f109 0a01 	add.w	sl, r9, #1
 80186dc:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80186e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80186e4:	f886 9002 	strb.w	r9, [r6, #2]
 80186e8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80186ea:	3701      	adds	r7, #1
 80186ec:	4408      	add	r0, r1
 80186ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80186f0:	440a      	add	r2, r1
 80186f2:	e761      	b.n	80185b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80186f4:	b005      	add	sp, #20
 80186f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186fa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80186fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018700:	4693      	mov	fp, r2
 8018702:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8018704:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018708:	6868      	ldr	r0, [r5, #4]
 801870a:	6877      	ldr	r7, [r6, #4]
 801870c:	9100      	str	r1, [sp, #0]
 801870e:	3704      	adds	r7, #4
 8018710:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018714:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8018718:	fb00 2404 	mla	r4, r0, r4, r2
 801871c:	682a      	ldr	r2, [r5, #0]
 801871e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018722:	4414      	add	r4, r2
 8018724:	6832      	ldr	r2, [r6, #0]
 8018726:	9201      	str	r2, [sp, #4]
 8018728:	9a00      	ldr	r2, [sp, #0]
 801872a:	2a00      	cmp	r2, #0
 801872c:	dc03      	bgt.n	8018736 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801872e:	f1bb 0f00 	cmp.w	fp, #0
 8018732:	f340 80bc 	ble.w	80188ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8018736:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018738:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801873c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018740:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018742:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8018746:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801874a:	2b00      	cmp	r3, #0
 801874c:	dd0c      	ble.n	8018768 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801874e:	1405      	asrs	r5, r0, #16
 8018750:	d405      	bmi.n	801875e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018752:	4555      	cmp	r5, sl
 8018754:	da03      	bge.n	801875e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018756:	1415      	asrs	r5, r2, #16
 8018758:	d401      	bmi.n	801875e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801875a:	454d      	cmp	r5, r9
 801875c:	db05      	blt.n	801876a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801875e:	4440      	add	r0, r8
 8018760:	4472      	add	r2, lr
 8018762:	3b01      	subs	r3, #1
 8018764:	3403      	adds	r4, #3
 8018766:	e7f0      	b.n	801874a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8018768:	d03f      	beq.n	80187ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801876a:	1e5d      	subs	r5, r3, #1
 801876c:	fb08 0c05 	mla	ip, r8, r5, r0
 8018770:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8018774:	d42e      	bmi.n	80187d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018776:	45d4      	cmp	ip, sl
 8018778:	da2c      	bge.n	80187d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801877a:	fb0e 2505 	mla	r5, lr, r5, r2
 801877e:	142d      	asrs	r5, r5, #16
 8018780:	d428      	bmi.n	80187d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018782:	454d      	cmp	r5, r9
 8018784:	da26      	bge.n	80187d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018786:	1ce5      	adds	r5, r4, #3
 8018788:	469c      	mov	ip, r3
 801878a:	f1bc 0f00 	cmp.w	ip, #0
 801878e:	f105 0503 	add.w	r5, r5, #3
 8018792:	dd25      	ble.n	80187e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8018794:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018798:	ea4f 4922 	mov.w	r9, r2, asr #16
 801879c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80187a0:	4472      	add	r2, lr
 80187a2:	468a      	mov	sl, r1
 80187a4:	9901      	ldr	r1, [sp, #4]
 80187a6:	fb0a 1909 	mla	r9, sl, r9, r1
 80187aa:	1401      	asrs	r1, r0, #16
 80187ac:	4440      	add	r0, r8
 80187ae:	f819 9001 	ldrb.w	r9, [r9, r1]
 80187b2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80187b6:	eb07 0a09 	add.w	sl, r7, r9
 80187ba:	f817 9009 	ldrb.w	r9, [r7, r9]
 80187be:	f805 9c06 	strb.w	r9, [r5, #-6]
 80187c2:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80187c6:	f805 9c05 	strb.w	r9, [r5, #-5]
 80187ca:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80187ce:	f805 9c04 	strb.w	r9, [r5, #-4]
 80187d2:	e7da      	b.n	801878a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80187d4:	2500      	movs	r5, #0
 80187d6:	eba3 0c05 	sub.w	ip, r3, r5
 80187da:	f1bc 0f00 	cmp.w	ip, #0
 80187de:	dc3b      	bgt.n	8018858 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80187e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80187e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80187e8:	441c      	add	r4, r3
 80187ea:	9b00      	ldr	r3, [sp, #0]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	dd5e      	ble.n	80188ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80187f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80187f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80187fa:	eeb0 6a62 	vmov.f32	s12, s5
 80187fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018802:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018806:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801880a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801880e:	eeb0 6a43 	vmov.f32	s12, s6
 8018812:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018816:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801881a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801881e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018822:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018826:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801882a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801882e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018832:	ee12 2a90 	vmov	r2, s5
 8018836:	eef0 2a47 	vmov.f32	s5, s14
 801883a:	fb92 f8f3 	sdiv	r8, r2, r3
 801883e:	ee13 2a10 	vmov	r2, s6
 8018842:	eeb0 3a67 	vmov.f32	s6, s15
 8018846:	fb92 fef3 	sdiv	lr, r2, r3
 801884a:	9b00      	ldr	r3, [sp, #0]
 801884c:	3b01      	subs	r3, #1
 801884e:	9300      	str	r3, [sp, #0]
 8018850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018852:	bf08      	it	eq
 8018854:	465b      	moveq	r3, fp
 8018856:	e767      	b.n	8018728 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018858:	ea5f 4920 	movs.w	r9, r0, asr #16
 801885c:	d423      	bmi.n	80188a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801885e:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8018862:	45cc      	cmp	ip, r9
 8018864:	dd1f      	ble.n	80188a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018866:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801886a:	d41c      	bmi.n	80188a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801886c:	68f1      	ldr	r1, [r6, #12]
 801886e:	4551      	cmp	r1, sl
 8018870:	dd19      	ble.n	80188a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018872:	fa0f fc8c 	sxth.w	ip, ip
 8018876:	9901      	ldr	r1, [sp, #4]
 8018878:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801887c:	f81c c009 	ldrb.w	ip, [ip, r9]
 8018880:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018884:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8018888:	eb07 090c 	add.w	r9, r7, ip
 801888c:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8018890:	f804 a00c 	strb.w	sl, [r4, ip]
 8018894:	44a4      	add	ip, r4
 8018896:	f899 a001 	ldrb.w	sl, [r9, #1]
 801889a:	f88c a001 	strb.w	sl, [ip, #1]
 801889e:	f899 9002 	ldrb.w	r9, [r9, #2]
 80188a2:	f88c 9002 	strb.w	r9, [ip, #2]
 80188a6:	4440      	add	r0, r8
 80188a8:	4472      	add	r2, lr
 80188aa:	3501      	adds	r5, #1
 80188ac:	e793      	b.n	80187d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80188ae:	b003      	add	sp, #12
 80188b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080188b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80188b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188b8:	b085      	sub	sp, #20
 80188ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80188be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80188c0:	9202      	str	r2, [sp, #8]
 80188c2:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80188c6:	6860      	ldr	r0, [r4, #4]
 80188c8:	9203      	str	r2, [sp, #12]
 80188ca:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80188ce:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80188d2:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 80188d6:	fb00 2505 	mla	r5, r0, r5, r2
 80188da:	6822      	ldr	r2, [r4, #0]
 80188dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188e0:	4415      	add	r5, r2
 80188e2:	f8dc 2000 	ldr.w	r2, [ip]
 80188e6:	9200      	str	r2, [sp, #0]
 80188e8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80188ec:	3204      	adds	r2, #4
 80188ee:	9201      	str	r2, [sp, #4]
 80188f0:	2900      	cmp	r1, #0
 80188f2:	dc03      	bgt.n	80188fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80188f4:	9a02      	ldr	r2, [sp, #8]
 80188f6:	2a00      	cmp	r2, #0
 80188f8:	f340 8127 	ble.w	8018b4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80188fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80188fe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018902:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018906:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018908:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801890c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018910:	2b00      	cmp	r3, #0
 8018912:	dd0d      	ble.n	8018930 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018914:	1422      	asrs	r2, r4, #16
 8018916:	d405      	bmi.n	8018924 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018918:	4542      	cmp	r2, r8
 801891a:	da03      	bge.n	8018924 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801891c:	1402      	asrs	r2, r0, #16
 801891e:	d401      	bmi.n	8018924 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018920:	42ba      	cmp	r2, r7
 8018922:	db06      	blt.n	8018932 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018924:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018926:	4474      	add	r4, lr
 8018928:	3b01      	subs	r3, #1
 801892a:	3503      	adds	r5, #3
 801892c:	4410      	add	r0, r2
 801892e:	e7ef      	b.n	8018910 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018930:	d075      	beq.n	8018a1e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8018932:	1e5a      	subs	r2, r3, #1
 8018934:	fb0e 4602 	mla	r6, lr, r2, r4
 8018938:	1436      	asrs	r6, r6, #16
 801893a:	d465      	bmi.n	8018a08 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801893c:	4546      	cmp	r6, r8
 801893e:	da63      	bge.n	8018a08 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018940:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018942:	fb06 0202 	mla	r2, r6, r2, r0
 8018946:	1412      	asrs	r2, r2, #16
 8018948:	d45e      	bmi.n	8018a08 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801894a:	42ba      	cmp	r2, r7
 801894c:	da5c      	bge.n	8018a08 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801894e:	1cef      	adds	r7, r5, #3
 8018950:	4699      	mov	r9, r3
 8018952:	f1b9 0f00 	cmp.w	r9, #0
 8018956:	dd5d      	ble.n	8018a14 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8018958:	1402      	asrs	r2, r0, #16
 801895a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801895e:	1426      	asrs	r6, r4, #16
 8018960:	4692      	mov	sl, r2
 8018962:	9a00      	ldr	r2, [sp, #0]
 8018964:	fb08 220a 	mla	r2, r8, sl, r2
 8018968:	5d92      	ldrb	r2, [r2, r6]
 801896a:	9e01      	ldr	r6, [sp, #4]
 801896c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018970:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018974:	d041      	beq.n	80189fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018976:	9a03      	ldr	r2, [sp, #12]
 8018978:	fa5f fb86 	uxtb.w	fp, r6
 801897c:	fb02 f808 	mul.w	r8, r2, r8
 8018980:	f108 0201 	add.w	r2, r8, #1
 8018984:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018988:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801898c:	1212      	asrs	r2, r2, #8
 801898e:	fa1f fa82 	uxth.w	sl, r2
 8018992:	43d2      	mvns	r2, r2
 8018994:	fb1b fb0a 	smulbb	fp, fp, sl
 8018998:	b2d2      	uxtb	r2, r2
 801899a:	fb08 b802 	mla	r8, r8, r2, fp
 801899e:	fa1f f888 	uxth.w	r8, r8
 80189a2:	f108 0b01 	add.w	fp, r8, #1
 80189a6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80189aa:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80189ae:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80189b2:	fb1b fb0a 	smulbb	fp, fp, sl
 80189b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80189ba:	fb16 fa0a 	smulbb	sl, r6, sl
 80189be:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80189c2:	f807 8c03 	strb.w	r8, [r7, #-3]
 80189c6:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80189ca:	fb06 aa02 	mla	sl, r6, r2, sl
 80189ce:	fb08 b802 	mla	r8, r8, r2, fp
 80189d2:	fa1f fa8a 	uxth.w	sl, sl
 80189d6:	fa1f f888 	uxth.w	r8, r8
 80189da:	f10a 0601 	add.w	r6, sl, #1
 80189de:	f108 0b01 	add.w	fp, r8, #1
 80189e2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80189e6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80189ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80189ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 80189f2:	f807 ac01 	strb.w	sl, [r7, #-1]
 80189f6:	f807 8c02 	strb.w	r8, [r7, #-2]
 80189fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80189fc:	4474      	add	r4, lr
 80189fe:	3703      	adds	r7, #3
 8018a00:	f109 39ff 	add.w	r9, r9, #4294967295
 8018a04:	4410      	add	r0, r2
 8018a06:	e7a4      	b.n	8018952 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018a08:	f04f 0800 	mov.w	r8, #0
 8018a0c:	eba3 0208 	sub.w	r2, r3, r8
 8018a10:	2a00      	cmp	r2, #0
 8018a12:	dc3b      	bgt.n	8018a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8018a14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a1c:	441d      	add	r5, r3
 8018a1e:	2900      	cmp	r1, #0
 8018a20:	f340 8093 	ble.w	8018b4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018a24:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018a28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018a2e:	3901      	subs	r1, #1
 8018a30:	eeb0 6a62 	vmov.f32	s12, s5
 8018a34:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018a38:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018a3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a40:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018a44:	eeb0 6a43 	vmov.f32	s12, s6
 8018a48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a4c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018a50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018a54:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018a58:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018a5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018a60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018a64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018a68:	ee12 2a90 	vmov	r2, s5
 8018a6c:	eef0 2a47 	vmov.f32	s5, s14
 8018a70:	fb92 fef3 	sdiv	lr, r2, r3
 8018a74:	ee13 2a10 	vmov	r2, s6
 8018a78:	eeb0 3a67 	vmov.f32	s6, s15
 8018a7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a80:	9a02      	ldr	r2, [sp, #8]
 8018a82:	9312      	str	r3, [sp, #72]	@ 0x48
 8018a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a86:	bf08      	it	eq
 8018a88:	4613      	moveq	r3, r2
 8018a8a:	e731      	b.n	80188f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018a8c:	1427      	asrs	r7, r4, #16
 8018a8e:	d456      	bmi.n	8018b3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018a90:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018a94:	42be      	cmp	r6, r7
 8018a96:	dd52      	ble.n	8018b3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018a98:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018a9c:	d44f      	bmi.n	8018b3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018a9e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018aa2:	454a      	cmp	r2, r9
 8018aa4:	dd4b      	ble.n	8018b3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018aa6:	9a00      	ldr	r2, [sp, #0]
 8018aa8:	b236      	sxth	r6, r6
 8018aaa:	fb09 2606 	mla	r6, r9, r6, r2
 8018aae:	5df2      	ldrb	r2, [r6, r7]
 8018ab0:	9e01      	ldr	r6, [sp, #4]
 8018ab2:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8018ab6:	0e3a      	lsrs	r2, r7, #24
 8018ab8:	d041      	beq.n	8018b3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018aba:	9e03      	ldr	r6, [sp, #12]
 8018abc:	fa5f fb87 	uxtb.w	fp, r7
 8018ac0:	4372      	muls	r2, r6
 8018ac2:	1c56      	adds	r6, r2, #1
 8018ac4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018ac8:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018acc:	1212      	asrs	r2, r2, #8
 8018ace:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018ad2:	fa1f fa82 	uxth.w	sl, r2
 8018ad6:	43d2      	mvns	r2, r2
 8018ad8:	fb1b fb0a 	smulbb	fp, fp, sl
 8018adc:	b2d2      	uxtb	r2, r2
 8018ade:	fb09 b902 	mla	r9, r9, r2, fp
 8018ae2:	fa1f f989 	uxth.w	r9, r9
 8018ae6:	f109 0b01 	add.w	fp, r9, #1
 8018aea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018aee:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018af2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018af6:	fb1b fb0a 	smulbb	fp, fp, sl
 8018afa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018afe:	fb17 fa0a 	smulbb	sl, r7, sl
 8018b02:	f805 9006 	strb.w	r9, [r5, r6]
 8018b06:	442e      	add	r6, r5
 8018b08:	78b7      	ldrb	r7, [r6, #2]
 8018b0a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018b0e:	fb07 aa02 	mla	sl, r7, r2, sl
 8018b12:	fb09 b902 	mla	r9, r9, r2, fp
 8018b16:	fa1f fa8a 	uxth.w	sl, sl
 8018b1a:	fa1f f989 	uxth.w	r9, r9
 8018b1e:	f10a 0701 	add.w	r7, sl, #1
 8018b22:	f109 0b01 	add.w	fp, r9, #1
 8018b26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018b2a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018b2e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018b32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018b36:	f886 a002 	strb.w	sl, [r6, #2]
 8018b3a:	f886 9001 	strb.w	r9, [r6, #1]
 8018b3e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018b40:	4474      	add	r4, lr
 8018b42:	f108 0801 	add.w	r8, r8, #1
 8018b46:	4410      	add	r0, r2
 8018b48:	e760      	b.n	8018a0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8018b4a:	b005      	add	sp, #20
 8018b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b50 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b54:	b085      	sub	sp, #20
 8018b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018b5a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8018b5c:	9203      	str	r2, [sp, #12]
 8018b5e:	6868      	ldr	r0, [r5, #4]
 8018b60:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018b64:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018b68:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8018b6c:	fb00 2404 	mla	r4, r0, r4, r2
 8018b70:	682a      	ldr	r2, [r5, #0]
 8018b72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018b76:	4414      	add	r4, r2
 8018b78:	f8dc 2000 	ldr.w	r2, [ip]
 8018b7c:	9201      	str	r2, [sp, #4]
 8018b7e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018b82:	3204      	adds	r2, #4
 8018b84:	9202      	str	r2, [sp, #8]
 8018b86:	2900      	cmp	r1, #0
 8018b88:	dc03      	bgt.n	8018b92 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018b8a:	9a03      	ldr	r2, [sp, #12]
 8018b8c:	2a00      	cmp	r2, #0
 8018b8e:	f340 8137 	ble.w	8018e00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018b92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018b94:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018b98:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018b9c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018b9e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018ba2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	dd0d      	ble.n	8018bc6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018baa:	1405      	asrs	r5, r0, #16
 8018bac:	d405      	bmi.n	8018bba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018bae:	4545      	cmp	r5, r8
 8018bb0:	da03      	bge.n	8018bba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018bb2:	1415      	asrs	r5, r2, #16
 8018bb4:	d401      	bmi.n	8018bba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018bb6:	42bd      	cmp	r5, r7
 8018bb8:	db06      	blt.n	8018bc8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018bba:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018bbc:	4470      	add	r0, lr
 8018bbe:	3b01      	subs	r3, #1
 8018bc0:	3403      	adds	r4, #3
 8018bc2:	442a      	add	r2, r5
 8018bc4:	e7ef      	b.n	8018ba6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018bc6:	d070      	beq.n	8018caa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018bc8:	1e5d      	subs	r5, r3, #1
 8018bca:	fb0e 0605 	mla	r6, lr, r5, r0
 8018bce:	1436      	asrs	r6, r6, #16
 8018bd0:	d462      	bmi.n	8018c98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018bd2:	4546      	cmp	r6, r8
 8018bd4:	da60      	bge.n	8018c98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018bd6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018bd8:	fb06 2505 	mla	r5, r6, r5, r2
 8018bdc:	142d      	asrs	r5, r5, #16
 8018bde:	d45b      	bmi.n	8018c98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018be0:	42bd      	cmp	r5, r7
 8018be2:	da59      	bge.n	8018c98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018be4:	1ce5      	adds	r5, r4, #3
 8018be6:	469a      	mov	sl, r3
 8018be8:	f1ba 0f00 	cmp.w	sl, #0
 8018bec:	dd58      	ble.n	8018ca0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8018bee:	1416      	asrs	r6, r2, #16
 8018bf0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018bf4:	1407      	asrs	r7, r0, #16
 8018bf6:	46b1      	mov	r9, r6
 8018bf8:	9e01      	ldr	r6, [sp, #4]
 8018bfa:	fb08 6609 	mla	r6, r8, r9, r6
 8018bfe:	5df6      	ldrb	r6, [r6, r7]
 8018c00:	9f02      	ldr	r7, [sp, #8]
 8018c02:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8018c06:	0e37      	lsrs	r7, r6, #24
 8018c08:	2fff      	cmp	r7, #255	@ 0xff
 8018c0a:	f000 80f0 	beq.w	8018dee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018c0e:	fa5f f887 	uxtb.w	r8, r7
 8018c12:	b3d7      	cbz	r7, 8018c8a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018c14:	fa1f f788 	uxth.w	r7, r8
 8018c18:	ea6f 0808 	mvn.w	r8, r8
 8018c1c:	fa5f fb86 	uxtb.w	fp, r6
 8018c20:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8018c24:	fa5f f888 	uxtb.w	r8, r8
 8018c28:	fb1b fb07 	smulbb	fp, fp, r7
 8018c2c:	fb09 b908 	mla	r9, r9, r8, fp
 8018c30:	fa1f f989 	uxth.w	r9, r9
 8018c34:	f109 0b01 	add.w	fp, r9, #1
 8018c38:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c3c:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8018c40:	fb1b fb08 	smulbb	fp, fp, r8
 8018c44:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c48:	f805 9c03 	strb.w	r9, [r5, #-3]
 8018c4c:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8018c50:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018c54:	fb09 b907 	mla	r9, r9, r7, fp
 8018c58:	fa1f f989 	uxth.w	r9, r9
 8018c5c:	f109 0b01 	add.w	fp, r9, #1
 8018c60:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c64:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c68:	f805 9c02 	strb.w	r9, [r5, #-2]
 8018c6c:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8018c70:	fb19 f808 	smulbb	r8, r9, r8
 8018c74:	fb06 8607 	mla	r6, r6, r7, r8
 8018c78:	b2b6      	uxth	r6, r6
 8018c7a:	f106 0801 	add.w	r8, r6, #1
 8018c7e:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8018c82:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018c86:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018c8a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018c8c:	4470      	add	r0, lr
 8018c8e:	3503      	adds	r5, #3
 8018c90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018c94:	4432      	add	r2, r6
 8018c96:	e7a7      	b.n	8018be8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018c98:	2600      	movs	r6, #0
 8018c9a:	1b9d      	subs	r5, r3, r6
 8018c9c:	2d00      	cmp	r5, #0
 8018c9e:	dc3b      	bgt.n	8018d18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018ca0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018ca4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018ca8:	441c      	add	r4, r3
 8018caa:	2900      	cmp	r1, #0
 8018cac:	f340 80a8 	ble.w	8018e00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018cb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018cb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cb6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018cba:	3901      	subs	r1, #1
 8018cbc:	eeb0 6a62 	vmov.f32	s12, s5
 8018cc0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018cc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018cc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ccc:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018cd0:	eeb0 6a43 	vmov.f32	s12, s6
 8018cd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018cd8:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018cdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018ce0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018ce4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018ce8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018cec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018cf0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018cf4:	ee12 2a90 	vmov	r2, s5
 8018cf8:	eef0 2a47 	vmov.f32	s5, s14
 8018cfc:	fb92 fef3 	sdiv	lr, r2, r3
 8018d00:	ee13 2a10 	vmov	r2, s6
 8018d04:	eeb0 3a67 	vmov.f32	s6, s15
 8018d08:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d0c:	9a03      	ldr	r2, [sp, #12]
 8018d0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8018d10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d12:	bf08      	it	eq
 8018d14:	4613      	moveq	r3, r2
 8018d16:	e736      	b.n	8018b86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018d18:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018d1c:	d457      	bmi.n	8018dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018d1e:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8018d22:	4547      	cmp	r7, r8
 8018d24:	dd53      	ble.n	8018dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018d26:	ea5f 4922 	movs.w	r9, r2, asr #16
 8018d2a:	d450      	bmi.n	8018dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018d2c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8018d30:	454d      	cmp	r5, r9
 8018d32:	dd4c      	ble.n	8018dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018d34:	9d01      	ldr	r5, [sp, #4]
 8018d36:	b23f      	sxth	r7, r7
 8018d38:	fb09 5707 	mla	r7, r9, r7, r5
 8018d3c:	f817 5008 	ldrb.w	r5, [r7, r8]
 8018d40:	9f02      	ldr	r7, [sp, #8]
 8018d42:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8018d46:	0e2f      	lsrs	r7, r5, #24
 8018d48:	2fff      	cmp	r7, #255	@ 0xff
 8018d4a:	d045      	beq.n	8018dd8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018d4c:	fa5f f987 	uxtb.w	r9, r7
 8018d50:	b3ef      	cbz	r7, 8018dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018d52:	fa1f f889 	uxth.w	r8, r9
 8018d56:	ea6f 0909 	mvn.w	r9, r9
 8018d5a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018d5e:	fa5f fb85 	uxtb.w	fp, r5
 8018d62:	f814 a007 	ldrb.w	sl, [r4, r7]
 8018d66:	fa5f f989 	uxtb.w	r9, r9
 8018d6a:	fb1b fb08 	smulbb	fp, fp, r8
 8018d6e:	fb0a ba09 	mla	sl, sl, r9, fp
 8018d72:	fa1f fa8a 	uxth.w	sl, sl
 8018d76:	f10a 0b01 	add.w	fp, sl, #1
 8018d7a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8018d7e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018d82:	f804 a007 	strb.w	sl, [r4, r7]
 8018d86:	4427      	add	r7, r4
 8018d88:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018d8c:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8018d90:	f897 b001 	ldrb.w	fp, [r7, #1]
 8018d94:	fb1b fb09 	smulbb	fp, fp, r9
 8018d98:	fb0a ba08 	mla	sl, sl, r8, fp
 8018d9c:	fa1f fa8a 	uxth.w	sl, sl
 8018da0:	f10a 0b01 	add.w	fp, sl, #1
 8018da4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8018da8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018dac:	f887 a001 	strb.w	sl, [r7, #1]
 8018db0:	f897 a002 	ldrb.w	sl, [r7, #2]
 8018db4:	fb1a f909 	smulbb	r9, sl, r9
 8018db8:	fb05 9508 	mla	r5, r5, r8, r9
 8018dbc:	b2ad      	uxth	r5, r5
 8018dbe:	f105 0901 	add.w	r9, r5, #1
 8018dc2:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8018dc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018dca:	f887 9002 	strb.w	r9, [r7, #2]
 8018dce:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018dd0:	4470      	add	r0, lr
 8018dd2:	3601      	adds	r6, #1
 8018dd4:	442a      	add	r2, r5
 8018dd6:	e760      	b.n	8018c9a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018dd8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018ddc:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8018de0:	55e5      	strb	r5, [r4, r7]
 8018de2:	4427      	add	r7, r4
 8018de4:	0c2d      	lsrs	r5, r5, #16
 8018de6:	f887 8001 	strb.w	r8, [r7, #1]
 8018dea:	70bd      	strb	r5, [r7, #2]
 8018dec:	e7ef      	b.n	8018dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018dee:	0a37      	lsrs	r7, r6, #8
 8018df0:	f805 6c03 	strb.w	r6, [r5, #-3]
 8018df4:	0c36      	lsrs	r6, r6, #16
 8018df6:	f805 7c02 	strb.w	r7, [r5, #-2]
 8018dfa:	f805 6c01 	strb.w	r6, [r5, #-1]
 8018dfe:	e744      	b.n	8018c8a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018e00:	b005      	add	sp, #20
 8018e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e06 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e0a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018e0c:	9201      	str	r2, [sp, #4]
 8018e0e:	6870      	ldr	r0, [r6, #4]
 8018e10:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8018e14:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8018e18:	fa1f fe85 	uxth.w	lr, r5
 8018e1c:	43ed      	mvns	r5, r5
 8018e1e:	f8dc 8000 	ldr.w	r8, [ip]
 8018e22:	b2ed      	uxtb	r5, r5
 8018e24:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018e28:	fb00 2404 	mla	r4, r0, r4, r2
 8018e2c:	6832      	ldr	r2, [r6, #0]
 8018e2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018e32:	4414      	add	r4, r2
 8018e34:	2900      	cmp	r1, #0
 8018e36:	dc03      	bgt.n	8018e40 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8018e38:	9a01      	ldr	r2, [sp, #4]
 8018e3a:	2a00      	cmp	r2, #0
 8018e3c:	f340 810d 	ble.w	801905a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018e40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018e42:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018e46:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018e4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018e4c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8018e50:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	dd0e      	ble.n	8018e76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018e58:	1406      	asrs	r6, r0, #16
 8018e5a:	d405      	bmi.n	8018e68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018e5c:	4556      	cmp	r6, sl
 8018e5e:	da03      	bge.n	8018e68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018e60:	1416      	asrs	r6, r2, #16
 8018e62:	d401      	bmi.n	8018e68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018e64:	454e      	cmp	r6, r9
 8018e66:	db07      	blt.n	8018e78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018e68:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018e6a:	3b01      	subs	r3, #1
 8018e6c:	3403      	adds	r4, #3
 8018e6e:	4430      	add	r0, r6
 8018e70:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018e72:	4432      	add	r2, r6
 8018e74:	e7ee      	b.n	8018e54 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8018e76:	d060      	beq.n	8018f3a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8018e78:	1e5e      	subs	r6, r3, #1
 8018e7a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018e7c:	fb07 0706 	mla	r7, r7, r6, r0
 8018e80:	143f      	asrs	r7, r7, #16
 8018e82:	d451      	bmi.n	8018f28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018e84:	4557      	cmp	r7, sl
 8018e86:	da4f      	bge.n	8018f28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018e88:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018e8a:	fb07 2606 	mla	r6, r7, r6, r2
 8018e8e:	1436      	asrs	r6, r6, #16
 8018e90:	d44a      	bmi.n	8018f28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018e92:	454e      	cmp	r6, r9
 8018e94:	da48      	bge.n	8018f28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018e96:	1ce6      	adds	r6, r4, #3
 8018e98:	4699      	mov	r9, r3
 8018e9a:	f1b9 0f00 	cmp.w	r9, #0
 8018e9e:	f106 0603 	add.w	r6, r6, #3
 8018ea2:	dd45      	ble.n	8018f30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8018ea4:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8018ea8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018eac:	1417      	asrs	r7, r2, #16
 8018eae:	f109 39ff 	add.w	r9, r9, #4294967295
 8018eb2:	fb0b a707 	mla	r7, fp, r7, sl
 8018eb6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018eba:	fb1b fb05 	smulbb	fp, fp, r5
 8018ebe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018ec2:	eb08 0a07 	add.w	sl, r8, r7
 8018ec6:	f818 7007 	ldrb.w	r7, [r8, r7]
 8018eca:	fb07 b70e 	mla	r7, r7, lr, fp
 8018ece:	b2bf      	uxth	r7, r7
 8018ed0:	f107 0b01 	add.w	fp, r7, #1
 8018ed4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018ed8:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018edc:	fb1b fb05 	smulbb	fp, fp, r5
 8018ee0:	123f      	asrs	r7, r7, #8
 8018ee2:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018ee6:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018eea:	fb07 b70e 	mla	r7, r7, lr, fp
 8018eee:	b2bf      	uxth	r7, r7
 8018ef0:	f107 0b01 	add.w	fp, r7, #1
 8018ef4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018ef8:	123f      	asrs	r7, r7, #8
 8018efa:	f806 7c05 	strb.w	r7, [r6, #-5]
 8018efe:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018f02:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018f06:	fb1a fa05 	smulbb	sl, sl, r5
 8018f0a:	fb07 a70e 	mla	r7, r7, lr, sl
 8018f0e:	b2bf      	uxth	r7, r7
 8018f10:	f107 0a01 	add.w	sl, r7, #1
 8018f14:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018f18:	123f      	asrs	r7, r7, #8
 8018f1a:	f806 7c04 	strb.w	r7, [r6, #-4]
 8018f1e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018f20:	4438      	add	r0, r7
 8018f22:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018f24:	443a      	add	r2, r7
 8018f26:	e7b8      	b.n	8018e9a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018f28:	2700      	movs	r7, #0
 8018f2a:	1bde      	subs	r6, r3, r7
 8018f2c:	2e00      	cmp	r6, #0
 8018f2e:	dc3f      	bgt.n	8018fb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018f30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f38:	441c      	add	r4, r3
 8018f3a:	2900      	cmp	r1, #0
 8018f3c:	f340 808d 	ble.w	801905a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018f40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018f44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f46:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018f4a:	3901      	subs	r1, #1
 8018f4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018f50:	eef0 6a62 	vmov.f32	s13, s5
 8018f54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018f58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018f5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018f60:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8018f64:	eef0 6a43 	vmov.f32	s13, s6
 8018f68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018f6c:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8018f70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018f74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018f78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018f7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018f80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018f84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018f88:	ee12 2a90 	vmov	r2, s5
 8018f8c:	eef0 2a47 	vmov.f32	s5, s14
 8018f90:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f94:	ee13 2a10 	vmov	r2, s6
 8018f98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018f9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f9c:	eeb0 3a67 	vmov.f32	s6, s15
 8018fa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8018fa4:	9a01      	ldr	r2, [sp, #4]
 8018fa6:	9310      	str	r3, [sp, #64]	@ 0x40
 8018fa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018faa:	bf08      	it	eq
 8018fac:	4613      	moveq	r3, r2
 8018fae:	e741      	b.n	8018e34 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018fb0:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018fb4:	d44b      	bmi.n	801904e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018fb6:	f8dc b008 	ldr.w	fp, [ip, #8]
 8018fba:	45cb      	cmp	fp, r9
 8018fbc:	dd47      	ble.n	801904e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018fbe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018fc2:	d444      	bmi.n	801904e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018fc4:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8018fc8:	4556      	cmp	r6, sl
 8018fca:	dd40      	ble.n	801904e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018fcc:	fa0f f68b 	sxth.w	r6, fp
 8018fd0:	fb0a 9906 	mla	r9, sl, r6, r9
 8018fd4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018fd8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018fdc:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018fe0:	fb1b fb05 	smulbb	fp, fp, r5
 8018fe4:	eb08 0a09 	add.w	sl, r8, r9
 8018fe8:	f818 9009 	ldrb.w	r9, [r8, r9]
 8018fec:	fb09 b90e 	mla	r9, r9, lr, fp
 8018ff0:	fa1f f989 	uxth.w	r9, r9
 8018ff4:	f109 0b01 	add.w	fp, r9, #1
 8018ff8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018ffc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019000:	f804 9006 	strb.w	r9, [r4, r6]
 8019004:	4426      	add	r6, r4
 8019006:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801900a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801900e:	fb1b fb05 	smulbb	fp, fp, r5
 8019012:	fb09 b90e 	mla	r9, r9, lr, fp
 8019016:	fa1f f989 	uxth.w	r9, r9
 801901a:	f109 0b01 	add.w	fp, r9, #1
 801901e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019022:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019026:	f886 9001 	strb.w	r9, [r6, #1]
 801902a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801902e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019032:	fb1a fa05 	smulbb	sl, sl, r5
 8019036:	fb09 a90e 	mla	r9, r9, lr, sl
 801903a:	fa1f f989 	uxth.w	r9, r9
 801903e:	f109 0a01 	add.w	sl, r9, #1
 8019042:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019046:	ea4f 2929 	mov.w	r9, r9, asr #8
 801904a:	f886 9002 	strb.w	r9, [r6, #2]
 801904e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8019050:	3701      	adds	r7, #1
 8019052:	4430      	add	r0, r6
 8019054:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8019056:	4432      	add	r2, r6
 8019058:	e767      	b.n	8018f2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801905a:	b003      	add	sp, #12
 801905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019060 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019064:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8019066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801906a:	9201      	str	r2, [sp, #4]
 801906c:	6868      	ldr	r0, [r5, #4]
 801906e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8019070:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8019074:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8019078:	fb00 2404 	mla	r4, r0, r4, r2
 801907c:	682a      	ldr	r2, [r5, #0]
 801907e:	f8d7 8000 	ldr.w	r8, [r7]
 8019082:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019086:	4414      	add	r4, r2
 8019088:	2900      	cmp	r1, #0
 801908a:	dc03      	bgt.n	8019094 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801908c:	9a01      	ldr	r2, [sp, #4]
 801908e:	2a00      	cmp	r2, #0
 8019090:	f340 80af 	ble.w	80191f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8019094:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019096:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801909a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801909e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80190a0:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80190a4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	dd0c      	ble.n	80190c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80190ac:	1405      	asrs	r5, r0, #16
 80190ae:	d405      	bmi.n	80190bc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80190b0:	4555      	cmp	r5, sl
 80190b2:	da03      	bge.n	80190bc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80190b4:	1415      	asrs	r5, r2, #16
 80190b6:	d401      	bmi.n	80190bc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80190b8:	454d      	cmp	r5, r9
 80190ba:	db05      	blt.n	80190c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80190bc:	4470      	add	r0, lr
 80190be:	4462      	add	r2, ip
 80190c0:	3b01      	subs	r3, #1
 80190c2:	3403      	adds	r4, #3
 80190c4:	e7f0      	b.n	80190a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80190c6:	d038      	beq.n	801913a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80190c8:	1e5d      	subs	r5, r3, #1
 80190ca:	fb0e 0605 	mla	r6, lr, r5, r0
 80190ce:	1436      	asrs	r6, r6, #16
 80190d0:	d42a      	bmi.n	8019128 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80190d2:	4556      	cmp	r6, sl
 80190d4:	da28      	bge.n	8019128 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80190d6:	fb0c 2505 	mla	r5, ip, r5, r2
 80190da:	142d      	asrs	r5, r5, #16
 80190dc:	d424      	bmi.n	8019128 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80190de:	454d      	cmp	r5, r9
 80190e0:	da22      	bge.n	8019128 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80190e2:	1ce6      	adds	r6, r4, #3
 80190e4:	4699      	mov	r9, r3
 80190e6:	f1b9 0f00 	cmp.w	r9, #0
 80190ea:	f106 0603 	add.w	r6, r6, #3
 80190ee:	dd1f      	ble.n	8019130 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80190f0:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80190f4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80190f8:	1415      	asrs	r5, r2, #16
 80190fa:	4470      	add	r0, lr
 80190fc:	4462      	add	r2, ip
 80190fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8019102:	fb0b a505 	mla	r5, fp, r5, sl
 8019106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801910a:	eb08 0a05 	add.w	sl, r8, r5
 801910e:	f818 5005 	ldrb.w	r5, [r8, r5]
 8019112:	f806 5c06 	strb.w	r5, [r6, #-6]
 8019116:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801911a:	f806 5c05 	strb.w	r5, [r6, #-5]
 801911e:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8019122:	f806 5c04 	strb.w	r5, [r6, #-4]
 8019126:	e7de      	b.n	80190e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019128:	2600      	movs	r6, #0
 801912a:	1b9d      	subs	r5, r3, r6
 801912c:	2d00      	cmp	r5, #0
 801912e:	dc38      	bgt.n	80191a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019130:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019134:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019138:	441c      	add	r4, r3
 801913a:	2900      	cmp	r1, #0
 801913c:	dd59      	ble.n	80191f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801913e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019144:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019148:	3901      	subs	r1, #1
 801914a:	eeb0 6a62 	vmov.f32	s12, s5
 801914e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019152:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019156:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801915a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801915e:	eeb0 6a43 	vmov.f32	s12, s6
 8019162:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019166:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801916a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801916e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019172:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019176:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801917a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801917e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019182:	ee12 2a90 	vmov	r2, s5
 8019186:	eef0 2a47 	vmov.f32	s5, s14
 801918a:	fb92 fef3 	sdiv	lr, r2, r3
 801918e:	ee13 2a10 	vmov	r2, s6
 8019192:	eeb0 3a67 	vmov.f32	s6, s15
 8019196:	fb92 fcf3 	sdiv	ip, r2, r3
 801919a:	9a01      	ldr	r2, [sp, #4]
 801919c:	bf08      	it	eq
 801919e:	4613      	moveq	r3, r2
 80191a0:	e772      	b.n	8019088 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80191a2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80191a6:	d420      	bmi.n	80191ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80191a8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80191ac:	45cb      	cmp	fp, r9
 80191ae:	dd1c      	ble.n	80191ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80191b0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80191b4:	d419      	bmi.n	80191ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80191b6:	68fd      	ldr	r5, [r7, #12]
 80191b8:	4555      	cmp	r5, sl
 80191ba:	dd16      	ble.n	80191ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80191bc:	fa0f f58b 	sxth.w	r5, fp
 80191c0:	fb0a 9505 	mla	r5, sl, r5, r9
 80191c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191c8:	f818 9005 	ldrb.w	r9, [r8, r5]
 80191cc:	eb08 0b05 	add.w	fp, r8, r5
 80191d0:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80191d4:	f804 9005 	strb.w	r9, [r4, r5]
 80191d8:	4425      	add	r5, r4
 80191da:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80191de:	f885 9001 	strb.w	r9, [r5, #1]
 80191e2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80191e6:	f885 9002 	strb.w	r9, [r5, #2]
 80191ea:	4470      	add	r0, lr
 80191ec:	4462      	add	r2, ip
 80191ee:	3601      	adds	r6, #1
 80191f0:	e79b      	b.n	801912a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80191f2:	b003      	add	sp, #12
 80191f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80191f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191fc:	b085      	sub	sp, #20
 80191fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019202:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019204:	9202      	str	r2, [sp, #8]
 8019206:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801920a:	6860      	ldr	r0, [r4, #4]
 801920c:	9203      	str	r2, [sp, #12]
 801920e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8019212:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8019216:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801921a:	fb00 2505 	mla	r5, r0, r5, r2
 801921e:	6822      	ldr	r2, [r4, #0]
 8019220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019224:	4415      	add	r5, r2
 8019226:	f8dc 2000 	ldr.w	r2, [ip]
 801922a:	9201      	str	r2, [sp, #4]
 801922c:	2900      	cmp	r1, #0
 801922e:	dc03      	bgt.n	8019238 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8019230:	9a02      	ldr	r2, [sp, #8]
 8019232:	2a00      	cmp	r2, #0
 8019234:	f340 8122 	ble.w	801947c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019238:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801923a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801923e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019242:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019244:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019248:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801924c:	2b00      	cmp	r3, #0
 801924e:	dd0d      	ble.n	801926c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8019250:	1422      	asrs	r2, r4, #16
 8019252:	d405      	bmi.n	8019260 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019254:	4542      	cmp	r2, r8
 8019256:	da03      	bge.n	8019260 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019258:	1402      	asrs	r2, r0, #16
 801925a:	d401      	bmi.n	8019260 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801925c:	42ba      	cmp	r2, r7
 801925e:	db06      	blt.n	801926e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019260:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019262:	4474      	add	r4, lr
 8019264:	3b01      	subs	r3, #1
 8019266:	3503      	adds	r5, #3
 8019268:	4410      	add	r0, r2
 801926a:	e7ef      	b.n	801924c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801926c:	d072      	beq.n	8019354 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801926e:	1e5a      	subs	r2, r3, #1
 8019270:	fb0e 4602 	mla	r6, lr, r2, r4
 8019274:	1436      	asrs	r6, r6, #16
 8019276:	d462      	bmi.n	801933e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019278:	4546      	cmp	r6, r8
 801927a:	da60      	bge.n	801933e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801927c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801927e:	fb06 0202 	mla	r2, r6, r2, r0
 8019282:	1412      	asrs	r2, r2, #16
 8019284:	d45b      	bmi.n	801933e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019286:	42ba      	cmp	r2, r7
 8019288:	da59      	bge.n	801933e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801928a:	1cef      	adds	r7, r5, #3
 801928c:	4699      	mov	r9, r3
 801928e:	f1b9 0f00 	cmp.w	r9, #0
 8019292:	dd5a      	ble.n	801934a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019294:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019298:	1426      	asrs	r6, r4, #16
 801929a:	1402      	asrs	r2, r0, #16
 801929c:	fb08 6202 	mla	r2, r8, r2, r6
 80192a0:	9e01      	ldr	r6, [sp, #4]
 80192a2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80192a6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80192aa:	d041      	beq.n	8019330 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80192ac:	9a03      	ldr	r2, [sp, #12]
 80192ae:	fa5f fb86 	uxtb.w	fp, r6
 80192b2:	fb02 f808 	mul.w	r8, r2, r8
 80192b6:	f108 0201 	add.w	r2, r8, #1
 80192ba:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80192be:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80192c2:	1212      	asrs	r2, r2, #8
 80192c4:	fa1f fa82 	uxth.w	sl, r2
 80192c8:	43d2      	mvns	r2, r2
 80192ca:	fb1b fb0a 	smulbb	fp, fp, sl
 80192ce:	b2d2      	uxtb	r2, r2
 80192d0:	fb08 b802 	mla	r8, r8, r2, fp
 80192d4:	fa1f f888 	uxth.w	r8, r8
 80192d8:	f108 0b01 	add.w	fp, r8, #1
 80192dc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80192e0:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80192e4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80192e8:	fb1b fb0a 	smulbb	fp, fp, sl
 80192ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 80192f0:	fb16 fa0a 	smulbb	sl, r6, sl
 80192f4:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80192f8:	f807 8c03 	strb.w	r8, [r7, #-3]
 80192fc:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8019300:	fb06 aa02 	mla	sl, r6, r2, sl
 8019304:	fb08 b802 	mla	r8, r8, r2, fp
 8019308:	fa1f fa8a 	uxth.w	sl, sl
 801930c:	fa1f f888 	uxth.w	r8, r8
 8019310:	f10a 0601 	add.w	r6, sl, #1
 8019314:	f108 0b01 	add.w	fp, r8, #1
 8019318:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801931c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019320:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019324:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019328:	f807 ac01 	strb.w	sl, [r7, #-1]
 801932c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8019330:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019332:	4474      	add	r4, lr
 8019334:	3703      	adds	r7, #3
 8019336:	f109 39ff 	add.w	r9, r9, #4294967295
 801933a:	4410      	add	r0, r2
 801933c:	e7a7      	b.n	801928e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801933e:	f04f 0800 	mov.w	r8, #0
 8019342:	eba3 0208 	sub.w	r2, r3, r8
 8019346:	2a00      	cmp	r2, #0
 8019348:	dc3b      	bgt.n	80193c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801934a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801934e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019352:	441d      	add	r5, r3
 8019354:	2900      	cmp	r1, #0
 8019356:	f340 8091 	ble.w	801947c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801935a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801935e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019360:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019364:	3901      	subs	r1, #1
 8019366:	eeb0 6a62 	vmov.f32	s12, s5
 801936a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801936e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019372:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019376:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801937a:	eeb0 6a43 	vmov.f32	s12, s6
 801937e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019382:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8019386:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801938a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801938e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019392:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019396:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801939a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801939e:	ee12 2a90 	vmov	r2, s5
 80193a2:	eef0 2a47 	vmov.f32	s5, s14
 80193a6:	fb92 fef3 	sdiv	lr, r2, r3
 80193aa:	ee13 2a10 	vmov	r2, s6
 80193ae:	eeb0 3a67 	vmov.f32	s6, s15
 80193b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80193b6:	9a02      	ldr	r2, [sp, #8]
 80193b8:	9312      	str	r3, [sp, #72]	@ 0x48
 80193ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80193bc:	bf08      	it	eq
 80193be:	4613      	moveq	r3, r2
 80193c0:	e734      	b.n	801922c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80193c2:	1427      	asrs	r7, r4, #16
 80193c4:	d454      	bmi.n	8019470 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80193c6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80193ca:	42be      	cmp	r6, r7
 80193cc:	dd50      	ble.n	8019470 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80193ce:	ea5f 4920 	movs.w	r9, r0, asr #16
 80193d2:	d44d      	bmi.n	8019470 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80193d4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80193d8:	454a      	cmp	r2, r9
 80193da:	dd49      	ble.n	8019470 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80193dc:	b236      	sxth	r6, r6
 80193de:	9a01      	ldr	r2, [sp, #4]
 80193e0:	fb09 7606 	mla	r6, r9, r6, r7
 80193e4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80193e8:	0e3a      	lsrs	r2, r7, #24
 80193ea:	d041      	beq.n	8019470 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80193ec:	9e03      	ldr	r6, [sp, #12]
 80193ee:	fa5f fb87 	uxtb.w	fp, r7
 80193f2:	4372      	muls	r2, r6
 80193f4:	1c56      	adds	r6, r2, #1
 80193f6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80193fa:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80193fe:	1212      	asrs	r2, r2, #8
 8019400:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019404:	fa1f fa82 	uxth.w	sl, r2
 8019408:	43d2      	mvns	r2, r2
 801940a:	fb1b fb0a 	smulbb	fp, fp, sl
 801940e:	b2d2      	uxtb	r2, r2
 8019410:	fb09 b902 	mla	r9, r9, r2, fp
 8019414:	fa1f f989 	uxth.w	r9, r9
 8019418:	f109 0b01 	add.w	fp, r9, #1
 801941c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019420:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019424:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019428:	fb1b fb0a 	smulbb	fp, fp, sl
 801942c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019430:	fb17 fa0a 	smulbb	sl, r7, sl
 8019434:	f805 9006 	strb.w	r9, [r5, r6]
 8019438:	442e      	add	r6, r5
 801943a:	78b7      	ldrb	r7, [r6, #2]
 801943c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019440:	fb07 aa02 	mla	sl, r7, r2, sl
 8019444:	fb09 b902 	mla	r9, r9, r2, fp
 8019448:	fa1f fa8a 	uxth.w	sl, sl
 801944c:	fa1f f989 	uxth.w	r9, r9
 8019450:	f10a 0701 	add.w	r7, sl, #1
 8019454:	f109 0b01 	add.w	fp, r9, #1
 8019458:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801945c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019460:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019464:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019468:	f886 a002 	strb.w	sl, [r6, #2]
 801946c:	f886 9001 	strb.w	r9, [r6, #1]
 8019470:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019472:	4474      	add	r4, lr
 8019474:	f108 0801 	add.w	r8, r8, #1
 8019478:	4410      	add	r0, r2
 801947a:	e762      	b.n	8019342 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801947c:	b005      	add	sp, #20
 801947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019482 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019482:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019486:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8019488:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801948c:	9201      	str	r2, [sp, #4]
 801948e:	6860      	ldr	r0, [r4, #4]
 8019490:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8019494:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8019498:	fb00 2505 	mla	r5, r0, r5, r2
 801949c:	6822      	ldr	r2, [r4, #0]
 801949e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194a2:	4415      	add	r5, r2
 80194a4:	f8dc 2000 	ldr.w	r2, [ip]
 80194a8:	9200      	str	r2, [sp, #0]
 80194aa:	2900      	cmp	r1, #0
 80194ac:	dc03      	bgt.n	80194b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80194ae:	9a01      	ldr	r2, [sp, #4]
 80194b0:	2a00      	cmp	r2, #0
 80194b2:	f340 812b 	ble.w	801970c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80194b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80194b8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80194bc:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80194c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80194c2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80194c6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	dd0e      	ble.n	80194ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80194ce:	1422      	asrs	r2, r4, #16
 80194d0:	d405      	bmi.n	80194de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80194d2:	4572      	cmp	r2, lr
 80194d4:	da03      	bge.n	80194de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80194d6:	1402      	asrs	r2, r0, #16
 80194d8:	d401      	bmi.n	80194de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80194da:	42ba      	cmp	r2, r7
 80194dc:	db07      	blt.n	80194ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80194de:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80194e0:	3b01      	subs	r3, #1
 80194e2:	3503      	adds	r5, #3
 80194e4:	4414      	add	r4, r2
 80194e6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80194e8:	4410      	add	r0, r2
 80194ea:	e7ee      	b.n	80194ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80194ec:	d06f      	beq.n	80195ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80194ee:	1e5a      	subs	r2, r3, #1
 80194f0:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80194f2:	fb06 4602 	mla	r6, r6, r2, r4
 80194f6:	1436      	asrs	r6, r6, #16
 80194f8:	d45e      	bmi.n	80195b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80194fa:	4576      	cmp	r6, lr
 80194fc:	da5c      	bge.n	80195b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80194fe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8019500:	fb06 0202 	mla	r2, r6, r2, r0
 8019504:	1412      	asrs	r2, r2, #16
 8019506:	d457      	bmi.n	80195b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019508:	42ba      	cmp	r2, r7
 801950a:	da55      	bge.n	80195b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801950c:	1cee      	adds	r6, r5, #3
 801950e:	469a      	mov	sl, r3
 8019510:	f1ba 0f00 	cmp.w	sl, #0
 8019514:	dd56      	ble.n	80195c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019516:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801951a:	1427      	asrs	r7, r4, #16
 801951c:	1402      	asrs	r2, r0, #16
 801951e:	fb0e 7202 	mla	r2, lr, r2, r7
 8019522:	9f00      	ldr	r7, [sp, #0]
 8019524:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8019528:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801952c:	d03c      	beq.n	80195a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801952e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8019532:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019536:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801953a:	fa5f f28e 	uxtb.w	r2, lr
 801953e:	b2ff      	uxtb	r7, r7
 8019540:	f000 80dd 	beq.w	80196fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8019544:	fa1f f882 	uxth.w	r8, r2
 8019548:	43d2      	mvns	r2, r2
 801954a:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801954e:	fb17 f708 	smulbb	r7, r7, r8
 8019552:	b2d2      	uxtb	r2, r2
 8019554:	fb19 f908 	smulbb	r9, r9, r8
 8019558:	fb0e 7702 	mla	r7, lr, r2, r7
 801955c:	fb1b f808 	smulbb	r8, fp, r8
 8019560:	b2bf      	uxth	r7, r7
 8019562:	f107 0e01 	add.w	lr, r7, #1
 8019566:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801956a:	123f      	asrs	r7, r7, #8
 801956c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019570:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8019574:	fb07 9902 	mla	r9, r7, r2, r9
 8019578:	fa1f f989 	uxth.w	r9, r9
 801957c:	f109 0701 	add.w	r7, r9, #1
 8019580:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019584:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019588:	fb07 8802 	mla	r8, r7, r2, r8
 801958c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019590:	fa1f f888 	uxth.w	r8, r8
 8019594:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019598:	f108 0201 	add.w	r2, r8, #1
 801959c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80195a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80195a4:	f806 8c01 	strb.w	r8, [r6, #-1]
 80195a8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80195aa:	3603      	adds	r6, #3
 80195ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80195b0:	4414      	add	r4, r2
 80195b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80195b4:	4410      	add	r0, r2
 80195b6:	e7ab      	b.n	8019510 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80195b8:	f04f 0e00 	mov.w	lr, #0
 80195bc:	eba3 020e 	sub.w	r2, r3, lr
 80195c0:	2a00      	cmp	r2, #0
 80195c2:	dc3d      	bgt.n	8019640 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80195c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80195c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80195cc:	441d      	add	r5, r3
 80195ce:	2900      	cmp	r1, #0
 80195d0:	f340 809c 	ble.w	801970c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80195d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80195d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80195da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80195de:	3901      	subs	r1, #1
 80195e0:	eeb0 6a62 	vmov.f32	s12, s5
 80195e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80195e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80195ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80195f0:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80195f4:	eeb0 6a43 	vmov.f32	s12, s6
 80195f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80195fc:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8019600:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019604:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019608:	ee77 2a62 	vsub.f32	s5, s14, s5
 801960c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019610:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019614:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019618:	ee12 2a90 	vmov	r2, s5
 801961c:	eef0 2a47 	vmov.f32	s5, s14
 8019620:	fb92 f3f3 	sdiv	r3, r2, r3
 8019624:	ee13 2a10 	vmov	r2, s6
 8019628:	930f      	str	r3, [sp, #60]	@ 0x3c
 801962a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801962c:	eeb0 3a67 	vmov.f32	s6, s15
 8019630:	fb92 f3f3 	sdiv	r3, r2, r3
 8019634:	9a01      	ldr	r2, [sp, #4]
 8019636:	9310      	str	r3, [sp, #64]	@ 0x40
 8019638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801963a:	bf08      	it	eq
 801963c:	4613      	moveq	r3, r2
 801963e:	e734      	b.n	80194aa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8019640:	1427      	asrs	r7, r4, #16
 8019642:	d44d      	bmi.n	80196e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019644:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019648:	42be      	cmp	r6, r7
 801964a:	dd49      	ble.n	80196e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801964c:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019650:	d446      	bmi.n	80196e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019652:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019656:	4542      	cmp	r2, r8
 8019658:	dd42      	ble.n	80196e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801965a:	b236      	sxth	r6, r6
 801965c:	9a00      	ldr	r2, [sp, #0]
 801965e:	fb08 7606 	mla	r6, r8, r6, r7
 8019662:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8019666:	0e3a      	lsrs	r2, r7, #24
 8019668:	d03a      	beq.n	80196e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801966a:	2aff      	cmp	r2, #255	@ 0xff
 801966c:	b2d6      	uxtb	r6, r2
 801966e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019672:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8019676:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801967a:	b2ff      	uxtb	r7, r7
 801967c:	d037      	beq.n	80196ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801967e:	fa1f f986 	uxth.w	r9, r6
 8019682:	4472      	add	r2, lr
 8019684:	43f6      	mvns	r6, r6
 8019686:	f815 8002 	ldrb.w	r8, [r5, r2]
 801968a:	fb17 f709 	smulbb	r7, r7, r9
 801968e:	fb1a fa09 	smulbb	sl, sl, r9
 8019692:	b2f6      	uxtb	r6, r6
 8019694:	fb1b f909 	smulbb	r9, fp, r9
 8019698:	fb08 7706 	mla	r7, r8, r6, r7
 801969c:	b2bf      	uxth	r7, r7
 801969e:	f107 0801 	add.w	r8, r7, #1
 80196a2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80196a6:	123f      	asrs	r7, r7, #8
 80196a8:	54af      	strb	r7, [r5, r2]
 80196aa:	442a      	add	r2, r5
 80196ac:	7857      	ldrb	r7, [r2, #1]
 80196ae:	fb07 aa06 	mla	sl, r7, r6, sl
 80196b2:	fa1f fa8a 	uxth.w	sl, sl
 80196b6:	f10a 0701 	add.w	r7, sl, #1
 80196ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80196be:	7897      	ldrb	r7, [r2, #2]
 80196c0:	fb07 9906 	mla	r9, r7, r6, r9
 80196c4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80196c8:	fa1f f989 	uxth.w	r9, r9
 80196cc:	f882 a001 	strb.w	sl, [r2, #1]
 80196d0:	f109 0601 	add.w	r6, r9, #1
 80196d4:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80196d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80196dc:	f882 9002 	strb.w	r9, [r2, #2]
 80196e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80196e2:	f10e 0e01 	add.w	lr, lr, #1
 80196e6:	4414      	add	r4, r2
 80196e8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80196ea:	4410      	add	r0, r2
 80196ec:	e766      	b.n	80195bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80196ee:	4472      	add	r2, lr
 80196f0:	54af      	strb	r7, [r5, r2]
 80196f2:	442a      	add	r2, r5
 80196f4:	f882 a001 	strb.w	sl, [r2, #1]
 80196f8:	f882 b002 	strb.w	fp, [r2, #2]
 80196fc:	e7f0      	b.n	80196e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80196fe:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019702:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019706:	f806 bc01 	strb.w	fp, [r6, #-1]
 801970a:	e74d      	b.n	80195a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801970c:	b003      	add	sp, #12
 801970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019714 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019718:	b087      	sub	sp, #28
 801971a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801971e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8019720:	9204      	str	r2, [sp, #16]
 8019722:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019726:	6860      	ldr	r0, [r4, #4]
 8019728:	9205      	str	r2, [sp, #20]
 801972a:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801972e:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8019732:	9101      	str	r1, [sp, #4]
 8019734:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8019738:	fb00 2505 	mla	r5, r0, r5, r2
 801973c:	6822      	ldr	r2, [r4, #0]
 801973e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019742:	4415      	add	r5, r2
 8019744:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019748:	3201      	adds	r2, #1
 801974a:	f022 0201 	bic.w	r2, r2, #1
 801974e:	9202      	str	r2, [sp, #8]
 8019750:	f8dc 2000 	ldr.w	r2, [ip]
 8019754:	9203      	str	r2, [sp, #12]
 8019756:	9a01      	ldr	r2, [sp, #4]
 8019758:	2a00      	cmp	r2, #0
 801975a:	dc03      	bgt.n	8019764 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801975c:	9a04      	ldr	r2, [sp, #16]
 801975e:	2a00      	cmp	r2, #0
 8019760:	f340 8135 	ble.w	80199ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019764:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019766:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801976a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801976e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019770:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019774:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019778:	2b00      	cmp	r3, #0
 801977a:	dd0d      	ble.n	8019798 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801977c:	1422      	asrs	r2, r4, #16
 801977e:	d405      	bmi.n	801978c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019780:	4542      	cmp	r2, r8
 8019782:	da03      	bge.n	801978c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019784:	1402      	asrs	r2, r0, #16
 8019786:	d401      	bmi.n	801978c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019788:	42ba      	cmp	r2, r7
 801978a:	db06      	blt.n	801979a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801978c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801978e:	4474      	add	r4, lr
 8019790:	3b01      	subs	r3, #1
 8019792:	3503      	adds	r5, #3
 8019794:	4410      	add	r0, r2
 8019796:	e7ef      	b.n	8019778 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019798:	d077      	beq.n	801988a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801979a:	1e5a      	subs	r2, r3, #1
 801979c:	fb0e 4602 	mla	r6, lr, r2, r4
 80197a0:	1436      	asrs	r6, r6, #16
 80197a2:	d469      	bmi.n	8019878 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80197a4:	4546      	cmp	r6, r8
 80197a6:	da67      	bge.n	8019878 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80197a8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80197aa:	fb06 0202 	mla	r2, r6, r2, r0
 80197ae:	1412      	asrs	r2, r2, #16
 80197b0:	d462      	bmi.n	8019878 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80197b2:	42ba      	cmp	r2, r7
 80197b4:	da60      	bge.n	8019878 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80197b6:	1cee      	adds	r6, r5, #3
 80197b8:	4699      	mov	r9, r3
 80197ba:	f1b9 0f00 	cmp.w	r9, #0
 80197be:	dd5f      	ble.n	8019880 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80197c0:	1422      	asrs	r2, r4, #16
 80197c2:	9902      	ldr	r1, [sp, #8]
 80197c4:	1407      	asrs	r7, r0, #16
 80197c6:	fb01 2707 	mla	r7, r1, r7, r2
 80197ca:	9903      	ldr	r1, [sp, #12]
 80197cc:	087a      	lsrs	r2, r7, #1
 80197ce:	5c8a      	ldrb	r2, [r1, r2]
 80197d0:	07f9      	lsls	r1, r7, #31
 80197d2:	bf54      	ite	pl
 80197d4:	f002 020f 	andpl.w	r2, r2, #15
 80197d8:	1112      	asrmi	r2, r2, #4
 80197da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80197de:	b2d2      	uxtb	r2, r2
 80197e0:	2a00      	cmp	r2, #0
 80197e2:	d042      	beq.n	801986a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80197e4:	497b      	ldr	r1, [pc, #492]	@ (80199d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80197e6:	680f      	ldr	r7, [r1, #0]
 80197e8:	9905      	ldr	r1, [sp, #20]
 80197ea:	fa5f fb87 	uxtb.w	fp, r7
 80197ee:	434a      	muls	r2, r1
 80197f0:	f102 0801 	add.w	r8, r2, #1
 80197f4:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80197f8:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80197fc:	1212      	asrs	r2, r2, #8
 80197fe:	fa1f fa82 	uxth.w	sl, r2
 8019802:	43d2      	mvns	r2, r2
 8019804:	fb1b fb0a 	smulbb	fp, fp, sl
 8019808:	b2d2      	uxtb	r2, r2
 801980a:	fb08 b802 	mla	r8, r8, r2, fp
 801980e:	fa1f f888 	uxth.w	r8, r8
 8019812:	f108 0b01 	add.w	fp, r8, #1
 8019816:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801981a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801981e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019822:	fb1b fb0a 	smulbb	fp, fp, sl
 8019826:	ea4f 2828 	mov.w	r8, r8, asr #8
 801982a:	fb17 fa0a 	smulbb	sl, r7, sl
 801982e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019832:	f806 8c03 	strb.w	r8, [r6, #-3]
 8019836:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801983a:	fb07 aa02 	mla	sl, r7, r2, sl
 801983e:	fb08 b802 	mla	r8, r8, r2, fp
 8019842:	fa1f fa8a 	uxth.w	sl, sl
 8019846:	fa1f f888 	uxth.w	r8, r8
 801984a:	f10a 0701 	add.w	r7, sl, #1
 801984e:	f108 0b01 	add.w	fp, r8, #1
 8019852:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019856:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801985a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801985e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019862:	f806 ac01 	strb.w	sl, [r6, #-1]
 8019866:	f806 8c02 	strb.w	r8, [r6, #-2]
 801986a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801986c:	4474      	add	r4, lr
 801986e:	3603      	adds	r6, #3
 8019870:	f109 39ff 	add.w	r9, r9, #4294967295
 8019874:	4410      	add	r0, r2
 8019876:	e7a0      	b.n	80197ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019878:	2700      	movs	r7, #0
 801987a:	1bda      	subs	r2, r3, r7
 801987c:	2a00      	cmp	r2, #0
 801987e:	dc3e      	bgt.n	80198fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8019880:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019884:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019888:	441d      	add	r5, r3
 801988a:	9b01      	ldr	r3, [sp, #4]
 801988c:	2b00      	cmp	r3, #0
 801988e:	f340 809e 	ble.w	80199ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019892:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019896:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019898:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801989c:	eeb0 6a62 	vmov.f32	s12, s5
 80198a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80198a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80198a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80198ac:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80198b0:	eeb0 6a43 	vmov.f32	s12, s6
 80198b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80198b8:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80198bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80198c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80198c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80198c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80198cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80198d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80198d4:	ee12 2a90 	vmov	r2, s5
 80198d8:	eef0 2a47 	vmov.f32	s5, s14
 80198dc:	fb92 fef3 	sdiv	lr, r2, r3
 80198e0:	ee13 2a10 	vmov	r2, s6
 80198e4:	eeb0 3a67 	vmov.f32	s6, s15
 80198e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80198ec:	9314      	str	r3, [sp, #80]	@ 0x50
 80198ee:	9b01      	ldr	r3, [sp, #4]
 80198f0:	9a04      	ldr	r2, [sp, #16]
 80198f2:	3b01      	subs	r3, #1
 80198f4:	9301      	str	r3, [sp, #4]
 80198f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80198f8:	bf08      	it	eq
 80198fa:	4613      	moveq	r3, r2
 80198fc:	e72b      	b.n	8019756 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80198fe:	1426      	asrs	r6, r4, #16
 8019900:	d460      	bmi.n	80199c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019902:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019906:	42b2      	cmp	r2, r6
 8019908:	dd5c      	ble.n	80199c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801990a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801990e:	d459      	bmi.n	80199c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019910:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019914:	4542      	cmp	r2, r8
 8019916:	dd55      	ble.n	80199c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019918:	9a02      	ldr	r2, [sp, #8]
 801991a:	9903      	ldr	r1, [sp, #12]
 801991c:	fb08 6602 	mla	r6, r8, r2, r6
 8019920:	0872      	lsrs	r2, r6, #1
 8019922:	07f6      	lsls	r6, r6, #31
 8019924:	5c8a      	ldrb	r2, [r1, r2]
 8019926:	bf54      	ite	pl
 8019928:	f002 020f 	andpl.w	r2, r2, #15
 801992c:	1112      	asrmi	r2, r2, #4
 801992e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019932:	b2d2      	uxtb	r2, r2
 8019934:	2a00      	cmp	r2, #0
 8019936:	d045      	beq.n	80199c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019938:	4926      	ldr	r1, [pc, #152]	@ (80199d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801993a:	f8d1 8000 	ldr.w	r8, [r1]
 801993e:	9905      	ldr	r1, [sp, #20]
 8019940:	fa5f fb88 	uxtb.w	fp, r8
 8019944:	434a      	muls	r2, r1
 8019946:	1c56      	adds	r6, r2, #1
 8019948:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801994c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019950:	1212      	asrs	r2, r2, #8
 8019952:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019956:	fa1f fa82 	uxth.w	sl, r2
 801995a:	43d2      	mvns	r2, r2
 801995c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019960:	b2d2      	uxtb	r2, r2
 8019962:	fb09 b902 	mla	r9, r9, r2, fp
 8019966:	fa1f f989 	uxth.w	r9, r9
 801996a:	f109 0b01 	add.w	fp, r9, #1
 801996e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019972:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8019976:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801997a:	fb1b fb0a 	smulbb	fp, fp, sl
 801997e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019982:	fb18 fa0a 	smulbb	sl, r8, sl
 8019986:	f805 9006 	strb.w	r9, [r5, r6]
 801998a:	442e      	add	r6, r5
 801998c:	f896 8002 	ldrb.w	r8, [r6, #2]
 8019990:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019994:	fb08 aa02 	mla	sl, r8, r2, sl
 8019998:	fb09 b902 	mla	r9, r9, r2, fp
 801999c:	fa1f fa8a 	uxth.w	sl, sl
 80199a0:	fa1f f989 	uxth.w	r9, r9
 80199a4:	f10a 0801 	add.w	r8, sl, #1
 80199a8:	f109 0b01 	add.w	fp, r9, #1
 80199ac:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80199b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80199b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80199b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80199bc:	f886 a002 	strb.w	sl, [r6, #2]
 80199c0:	f886 9001 	strb.w	r9, [r6, #1]
 80199c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80199c6:	4474      	add	r4, lr
 80199c8:	3701      	adds	r7, #1
 80199ca:	4410      	add	r0, r2
 80199cc:	e755      	b.n	801987a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80199ce:	b007      	add	sp, #28
 80199d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199d4:	2402530c 	.word	0x2402530c

080199d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80199d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199dc:	b085      	sub	sp, #20
 80199de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80199e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80199e4:	9203      	str	r2, [sp, #12]
 80199e6:	6860      	ldr	r0, [r4, #4]
 80199e8:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80199ec:	9100      	str	r1, [sp, #0]
 80199ee:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 80199f2:	fb00 2606 	mla	r6, r0, r6, r2
 80199f6:	6822      	ldr	r2, [r4, #0]
 80199f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80199fc:	4416      	add	r6, r2
 80199fe:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019a02:	3201      	adds	r2, #1
 8019a04:	f022 0201 	bic.w	r2, r2, #1
 8019a08:	9201      	str	r2, [sp, #4]
 8019a0a:	f8dc 2000 	ldr.w	r2, [ip]
 8019a0e:	9202      	str	r2, [sp, #8]
 8019a10:	9a00      	ldr	r2, [sp, #0]
 8019a12:	2a00      	cmp	r2, #0
 8019a14:	dc03      	bgt.n	8019a1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8019a16:	9a03      	ldr	r2, [sp, #12]
 8019a18:	2a00      	cmp	r2, #0
 8019a1a:	f340 8140 	ble.w	8019c9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019a1e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019a20:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019a24:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8019a28:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019a2a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019a2e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	dd0e      	ble.n	8019a54 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019a36:	142a      	asrs	r2, r5, #16
 8019a38:	d405      	bmi.n	8019a46 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019a3a:	4572      	cmp	r2, lr
 8019a3c:	da03      	bge.n	8019a46 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019a3e:	1422      	asrs	r2, r4, #16
 8019a40:	d401      	bmi.n	8019a46 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019a42:	42ba      	cmp	r2, r7
 8019a44:	db07      	blt.n	8019a56 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019a46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019a48:	3b01      	subs	r3, #1
 8019a4a:	3603      	adds	r6, #3
 8019a4c:	4415      	add	r5, r2
 8019a4e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019a50:	4414      	add	r4, r2
 8019a52:	e7ee      	b.n	8019a32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019a54:	d072      	beq.n	8019b3c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019a56:	1e5a      	subs	r2, r3, #1
 8019a58:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8019a5a:	fb00 5002 	mla	r0, r0, r2, r5
 8019a5e:	1400      	asrs	r0, r0, #16
 8019a60:	d463      	bmi.n	8019b2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019a62:	4570      	cmp	r0, lr
 8019a64:	da61      	bge.n	8019b2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019a66:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019a68:	fb00 4202 	mla	r2, r0, r2, r4
 8019a6c:	1412      	asrs	r2, r2, #16
 8019a6e:	d45c      	bmi.n	8019b2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019a70:	42ba      	cmp	r2, r7
 8019a72:	da5a      	bge.n	8019b2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019a74:	1cf0      	adds	r0, r6, #3
 8019a76:	469a      	mov	sl, r3
 8019a78:	f1ba 0f00 	cmp.w	sl, #0
 8019a7c:	dd59      	ble.n	8019b32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8019a7e:	142a      	asrs	r2, r5, #16
 8019a80:	9901      	ldr	r1, [sp, #4]
 8019a82:	1427      	asrs	r7, r4, #16
 8019a84:	fb01 2707 	mla	r7, r1, r7, r2
 8019a88:	9902      	ldr	r1, [sp, #8]
 8019a8a:	087a      	lsrs	r2, r7, #1
 8019a8c:	5c8a      	ldrb	r2, [r1, r2]
 8019a8e:	07f9      	lsls	r1, r7, #31
 8019a90:	bf54      	ite	pl
 8019a92:	f002 020f 	andpl.w	r2, r2, #15
 8019a96:	1112      	asrmi	r2, r2, #4
 8019a98:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019a9c:	b2d2      	uxtb	r2, r2
 8019a9e:	2a00      	cmp	r2, #0
 8019aa0:	d03b      	beq.n	8019b1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019aa2:	4980      	ldr	r1, [pc, #512]	@ (8019ca4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019aa4:	2aff      	cmp	r2, #255	@ 0xff
 8019aa6:	680f      	ldr	r7, [r1, #0]
 8019aa8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019aac:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019ab0:	b2ff      	uxtb	r7, r7
 8019ab2:	f000 80ed 	beq.w	8019c90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8019ab6:	fa1f f882 	uxth.w	r8, r2
 8019aba:	43d2      	mvns	r2, r2
 8019abc:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8019ac0:	fb17 f708 	smulbb	r7, r7, r8
 8019ac4:	b2d2      	uxtb	r2, r2
 8019ac6:	fb19 f908 	smulbb	r9, r9, r8
 8019aca:	fb0e 7702 	mla	r7, lr, r2, r7
 8019ace:	fb1b f808 	smulbb	r8, fp, r8
 8019ad2:	b2bf      	uxth	r7, r7
 8019ad4:	f107 0e01 	add.w	lr, r7, #1
 8019ad8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019adc:	123f      	asrs	r7, r7, #8
 8019ade:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019ae2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8019ae6:	fb07 9902 	mla	r9, r7, r2, r9
 8019aea:	fa1f f989 	uxth.w	r9, r9
 8019aee:	f109 0701 	add.w	r7, r9, #1
 8019af2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019af6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8019afa:	fb07 8802 	mla	r8, r7, r2, r8
 8019afe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019b02:	fa1f f888 	uxth.w	r8, r8
 8019b06:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019b0a:	f108 0201 	add.w	r2, r8, #1
 8019b0e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019b12:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019b16:	f800 8c01 	strb.w	r8, [r0, #-1]
 8019b1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019b1c:	3003      	adds	r0, #3
 8019b1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019b22:	4415      	add	r5, r2
 8019b24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019b26:	4414      	add	r4, r2
 8019b28:	e7a6      	b.n	8019a78 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019b2a:	2700      	movs	r7, #0
 8019b2c:	1bda      	subs	r2, r3, r7
 8019b2e:	2a00      	cmp	r2, #0
 8019b30:	dc40      	bgt.n	8019bb4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8019b32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b3a:	441e      	add	r6, r3
 8019b3c:	9b00      	ldr	r3, [sp, #0]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	f340 80ad 	ble.w	8019c9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019b44:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019b4e:	eeb0 6a62 	vmov.f32	s12, s5
 8019b52:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019b56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019b5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b5e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8019b62:	eeb0 6a43 	vmov.f32	s12, s6
 8019b66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b6a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8019b6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019b72:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019b76:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019b7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019b7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019b82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019b86:	ee12 2a90 	vmov	r2, s5
 8019b8a:	eef0 2a47 	vmov.f32	s5, s14
 8019b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b92:	ee13 2a10 	vmov	r2, s6
 8019b96:	9311      	str	r3, [sp, #68]	@ 0x44
 8019b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b9a:	eeb0 3a67 	vmov.f32	s6, s15
 8019b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ba2:	9312      	str	r3, [sp, #72]	@ 0x48
 8019ba4:	9b00      	ldr	r3, [sp, #0]
 8019ba6:	9a03      	ldr	r2, [sp, #12]
 8019ba8:	3b01      	subs	r3, #1
 8019baa:	9300      	str	r3, [sp, #0]
 8019bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019bae:	bf08      	it	eq
 8019bb0:	4613      	moveq	r3, r2
 8019bb2:	e72d      	b.n	8019a10 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019bb4:	1428      	asrs	r0, r5, #16
 8019bb6:	d45c      	bmi.n	8019c72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019bb8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019bbc:	4282      	cmp	r2, r0
 8019bbe:	dd58      	ble.n	8019c72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019bc0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019bc4:	d455      	bmi.n	8019c72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019bc6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019bca:	4572      	cmp	r2, lr
 8019bcc:	dd51      	ble.n	8019c72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019bce:	9a01      	ldr	r2, [sp, #4]
 8019bd0:	9902      	ldr	r1, [sp, #8]
 8019bd2:	fb0e 0002 	mla	r0, lr, r2, r0
 8019bd6:	0842      	lsrs	r2, r0, #1
 8019bd8:	07c0      	lsls	r0, r0, #31
 8019bda:	5c8a      	ldrb	r2, [r1, r2]
 8019bdc:	bf54      	ite	pl
 8019bde:	f002 020f 	andpl.w	r2, r2, #15
 8019be2:	1112      	asrmi	r2, r2, #4
 8019be4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019be8:	b2d2      	uxtb	r2, r2
 8019bea:	2a00      	cmp	r2, #0
 8019bec:	d041      	beq.n	8019c72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019bee:	492d      	ldr	r1, [pc, #180]	@ (8019ca4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019bf0:	2aff      	cmp	r2, #255	@ 0xff
 8019bf2:	6808      	ldr	r0, [r1, #0]
 8019bf4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8019bf8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019bfc:	fa5f fe80 	uxtb.w	lr, r0
 8019c00:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8019c04:	d03b      	beq.n	8019c7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019c06:	fa1f f982 	uxth.w	r9, r2
 8019c0a:	4438      	add	r0, r7
 8019c0c:	43d2      	mvns	r2, r2
 8019c0e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8019c12:	fb1e fe09 	smulbb	lr, lr, r9
 8019c16:	fb1a fa09 	smulbb	sl, sl, r9
 8019c1a:	b2d2      	uxtb	r2, r2
 8019c1c:	fb1b f909 	smulbb	r9, fp, r9
 8019c20:	fb08 ee02 	mla	lr, r8, r2, lr
 8019c24:	fa1f fe8e 	uxth.w	lr, lr
 8019c28:	f10e 0801 	add.w	r8, lr, #1
 8019c2c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8019c30:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019c34:	f806 e000 	strb.w	lr, [r6, r0]
 8019c38:	4430      	add	r0, r6
 8019c3a:	f890 e001 	ldrb.w	lr, [r0, #1]
 8019c3e:	fb0e aa02 	mla	sl, lr, r2, sl
 8019c42:	fa1f fa8a 	uxth.w	sl, sl
 8019c46:	f10a 0e01 	add.w	lr, sl, #1
 8019c4a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8019c4e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8019c52:	fb0e 9902 	mla	r9, lr, r2, r9
 8019c56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019c5a:	fa1f f989 	uxth.w	r9, r9
 8019c5e:	f880 a001 	strb.w	sl, [r0, #1]
 8019c62:	f109 0201 	add.w	r2, r9, #1
 8019c66:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8019c6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c6e:	f880 9002 	strb.w	r9, [r0, #2]
 8019c72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019c74:	3701      	adds	r7, #1
 8019c76:	4415      	add	r5, r2
 8019c78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019c7a:	4414      	add	r4, r2
 8019c7c:	e756      	b.n	8019b2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019c7e:	4438      	add	r0, r7
 8019c80:	f806 e000 	strb.w	lr, [r6, r0]
 8019c84:	4430      	add	r0, r6
 8019c86:	f880 a001 	strb.w	sl, [r0, #1]
 8019c8a:	f880 b002 	strb.w	fp, [r0, #2]
 8019c8e:	e7f0      	b.n	8019c72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019c90:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019c94:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019c98:	f800 bc01 	strb.w	fp, [r0, #-1]
 8019c9c:	e73d      	b.n	8019b1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019c9e:	b005      	add	sp, #20
 8019ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ca4:	2402530c 	.word	0x2402530c

08019ca8 <_ZN8touchgfx8LCD24bppD1Ev>:
 8019ca8:	4770      	bx	lr

08019caa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8019caa:	4770      	bx	lr

08019cac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8019cac:	4770      	bx	lr

08019cae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8019cae:	4770      	bx	lr

08019cb0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8019cb0:	4770      	bx	lr

08019cb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019cb2:	4770      	bx	lr

08019cb4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019cb4:	4770      	bx	lr

08019cb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8019cb6:	4770      	bx	lr

08019cb8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8019cb8:	4770      	bx	lr

08019cba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019cba:	4770      	bx	lr

08019cbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019cbc:	4770      	bx	lr

08019cbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019cbe:	4770      	bx	lr

08019cc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019cc0:	4770      	bx	lr

08019cc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019cc2:	4770      	bx	lr

08019cc4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019cc4:	4770      	bx	lr

08019cc6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019cc6:	4770      	bx	lr

08019cc8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019cc8:	4770      	bx	lr

08019cca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019cca:	4770      	bx	lr

08019ccc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019ccc:	4770      	bx	lr

08019cce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019cce:	4770      	bx	lr

08019cd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019cd0:	4770      	bx	lr

08019cd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019cd2:	4770      	bx	lr

08019cd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019cd4:	4770      	bx	lr

08019cd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019cd6:	4770      	bx	lr

08019cd8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019cd8:	4770      	bx	lr
	...

08019cdc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cde:	4606      	mov	r6, r0
 8019ce0:	b087      	sub	sp, #28
 8019ce2:	4615      	mov	r5, r2
 8019ce4:	461f      	mov	r7, r3
 8019ce6:	b353      	cbz	r3, 8019d3e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019ce8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	dd26      	ble.n	8019d3e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019cf0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	dd22      	ble.n	8019d3e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019cf8:	6808      	ldr	r0, [r1, #0]
 8019cfa:	aa04      	add	r2, sp, #16
 8019cfc:	6849      	ldr	r1, [r1, #4]
 8019cfe:	4c1b      	ldr	r4, [pc, #108]	@ (8019d6c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8019d00:	c203      	stmia	r2!, {r0, r1}
 8019d02:	a804      	add	r0, sp, #16
 8019d04:	f7fa f8b2 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019d08:	6820      	ldr	r0, [r4, #0]
 8019d0a:	6803      	ldr	r3, [r0, #0]
 8019d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019d0e:	4798      	blx	r3
 8019d10:	2fff      	cmp	r7, #255	@ 0xff
 8019d12:	d016      	beq.n	8019d42 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019d14:	f010 0f08 	tst.w	r0, #8
 8019d18:	6820      	ldr	r0, [r4, #0]
 8019d1a:	d015      	beq.n	8019d48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8019d1c:	2400      	movs	r4, #0
 8019d1e:	6801      	ldr	r1, [r0, #0]
 8019d20:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019d24:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019d28:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8019d2c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019d30:	9401      	str	r4, [sp, #4]
 8019d32:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019d36:	9400      	str	r4, [sp, #0]
 8019d38:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8019d3a:	4629      	mov	r1, r5
 8019d3c:	47a0      	blx	r4
 8019d3e:	b007      	add	sp, #28
 8019d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d42:	f010 0f02 	tst.w	r0, #2
 8019d46:	e7e7      	b.n	8019d18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8019d48:	6803      	ldr	r3, [r0, #0]
 8019d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d4c:	4798      	blx	r3
 8019d4e:	4b08      	ldr	r3, [pc, #32]	@ (8019d70 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8019d50:	4601      	mov	r1, r0
 8019d52:	4630      	mov	r0, r6
 8019d54:	881a      	ldrh	r2, [r3, #0]
 8019d56:	6833      	ldr	r3, [r6, #0]
 8019d58:	e9cd 5700 	strd	r5, r7, [sp]
 8019d5c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8019d5e:	ab04      	add	r3, sp, #16
 8019d60:	47a8      	blx	r5
 8019d62:	6820      	ldr	r0, [r4, #0]
 8019d64:	6803      	ldr	r3, [r0, #0]
 8019d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019d68:	4798      	blx	r3
 8019d6a:	e7e8      	b.n	8019d3e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019d6c:	240252fc 	.word	0x240252fc
 8019d70:	240252f6 	.word	0x240252f6

08019d74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8019d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d78:	b08b      	sub	sp, #44	@ 0x2c
 8019d7a:	460d      	mov	r5, r1
 8019d7c:	4616      	mov	r6, r2
 8019d7e:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8019d82:	f1b8 0f00 	cmp.w	r8, #0
 8019d86:	d047      	beq.n	8019e18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019d88:	6810      	ldr	r0, [r2, #0]
 8019d8a:	ac06      	add	r4, sp, #24
 8019d8c:	6851      	ldr	r1, [r2, #4]
 8019d8e:	4f51      	ldr	r7, [pc, #324]	@ (8019ed4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8019d90:	c403      	stmia	r4!, {r0, r1}
 8019d92:	6818      	ldr	r0, [r3, #0]
 8019d94:	ac08      	add	r4, sp, #32
 8019d96:	6859      	ldr	r1, [r3, #4]
 8019d98:	c403      	stmia	r4!, {r0, r1}
 8019d9a:	a806      	add	r0, sp, #24
 8019d9c:	f7fa f866 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019da0:	4631      	mov	r1, r6
 8019da2:	a808      	add	r0, sp, #32
 8019da4:	f7fa f88a 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019da8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019dac:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8019db0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019db4:	6838      	ldr	r0, [r7, #0]
 8019db6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019dba:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8019dbe:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8019dc2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019dc6:	440d      	add	r5, r1
 8019dc8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019dcc:	440a      	add	r2, r1
 8019dce:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019dd2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019dd6:	4413      	add	r3, r2
 8019dd8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019ddc:	6803      	ldr	r3, [r0, #0]
 8019dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019de0:	4798      	blx	r3
 8019de2:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019de6:	d01a      	beq.n	8019e1e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8019de8:	f010 0f04 	tst.w	r0, #4
 8019dec:	6838      	ldr	r0, [r7, #0]
 8019dee:	d019      	beq.n	8019e24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8019df0:	2100      	movs	r1, #0
 8019df2:	6807      	ldr	r7, [r0, #0]
 8019df4:	b2a4      	uxth	r4, r4
 8019df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019dfa:	b2b6      	uxth	r6, r6
 8019dfc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8019e00:	9401      	str	r4, [sp, #4]
 8019e02:	9600      	str	r6, [sp, #0]
 8019e04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019e08:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8019e0c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019e10:	9102      	str	r1, [sp, #8]
 8019e12:	4629      	mov	r1, r5
 8019e14:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8019e16:	47a0      	blx	r4
 8019e18:	b00b      	add	sp, #44	@ 0x2c
 8019e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e1e:	f010 0f01 	tst.w	r0, #1
 8019e22:	e7e3      	b.n	8019dec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8019e24:	6803      	ldr	r3, [r0, #0]
 8019e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e28:	4798      	blx	r3
 8019e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8019ed8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8019e2c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8019e30:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019e34:	8813      	ldrh	r3, [r2, #0]
 8019e36:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8019e3a:	fb03 f404 	mul.w	r4, r3, r4
 8019e3e:	fb03 c101 	mla	r1, r3, r1, ip
 8019e42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019e46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019e4a:	4408      	add	r0, r1
 8019e4c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8019e50:	4404      	add	r4, r0
 8019e52:	d02e      	beq.n	8019eb2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8019e54:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8019e58:	1b9b      	subs	r3, r3, r6
 8019e5a:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8019e5e:	1b96      	subs	r6, r2, r6
 8019e60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e64:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019e68:	42a0      	cmp	r0, r4
 8019e6a:	d22d      	bcs.n	8019ec8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019e6c:	eb00 0e01 	add.w	lr, r0, r1
 8019e70:	4570      	cmp	r0, lr
 8019e72:	d210      	bcs.n	8019e96 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8019e74:	f890 9000 	ldrb.w	r9, [r0]
 8019e78:	f815 2b01 	ldrb.w	r2, [r5], #1
 8019e7c:	fb19 f90c 	smulbb	r9, r9, ip
 8019e80:	fb02 9208 	mla	r2, r2, r8, r9
 8019e84:	b292      	uxth	r2, r2
 8019e86:	f102 0901 	add.w	r9, r2, #1
 8019e8a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8019e8e:	1212      	asrs	r2, r2, #8
 8019e90:	f800 2b01 	strb.w	r2, [r0], #1
 8019e94:	e7ec      	b.n	8019e70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8019e96:	4418      	add	r0, r3
 8019e98:	4435      	add	r5, r6
 8019e9a:	e7e5      	b.n	8019e68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8019e9c:	8813      	ldrh	r3, [r2, #0]
 8019e9e:	1b9b      	subs	r3, r3, r6
 8019ea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ea4:	4418      	add	r0, r3
 8019ea6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019eaa:	1b9b      	subs	r3, r3, r6
 8019eac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019eb0:	441d      	add	r5, r3
 8019eb2:	42a0      	cmp	r0, r4
 8019eb4:	d208      	bcs.n	8019ec8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019eb6:	eb00 0c01 	add.w	ip, r0, r1
 8019eba:	4560      	cmp	r0, ip
 8019ebc:	d2ee      	bcs.n	8019e9c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8019ebe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019ec2:	f800 3b01 	strb.w	r3, [r0], #1
 8019ec6:	e7f8      	b.n	8019eba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8019ec8:	6838      	ldr	r0, [r7, #0]
 8019eca:	6803      	ldr	r3, [r0, #0]
 8019ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019ece:	4798      	blx	r3
 8019ed0:	e7a2      	b.n	8019e18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019ed2:	bf00      	nop
 8019ed4:	240252fc 	.word	0x240252fc
 8019ed8:	240252f6 	.word	0x240252f6

08019edc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ede:	2300      	movs	r3, #0
 8019ee0:	b085      	sub	sp, #20
 8019ee2:	9300      	str	r3, [sp, #0]
 8019ee4:	4b41      	ldr	r3, [pc, #260]	@ (8019fec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8019ee6:	781b      	ldrb	r3, [r3, #0]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d136      	bne.n	8019f5a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8019eec:	4a40      	ldr	r2, [pc, #256]	@ (8019ff0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019eee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019ef2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d131      	bne.n	8019f5e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8019efa:	4b3e      	ldr	r3, [pc, #248]	@ (8019ff4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f00:	ac02      	add	r4, sp, #8
 8019f02:	6808      	ldr	r0, [r1, #0]
 8019f04:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019f08:	ab02      	add	r3, sp, #8
 8019f0a:	6849      	ldr	r1, [r1, #4]
 8019f0c:	4d3a      	ldr	r5, [pc, #232]	@ (8019ff8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8019f0e:	c303      	stmia	r3!, {r0, r1}
 8019f10:	4669      	mov	r1, sp
 8019f12:	4620      	mov	r0, r4
 8019f14:	f7f9 ffd2 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019f18:	4668      	mov	r0, sp
 8019f1a:	f7f9 ffa7 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019f1e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019f22:	f8bd 2000 	ldrh.w	r2, [sp]
 8019f26:	462e      	mov	r6, r5
 8019f28:	6828      	ldr	r0, [r5, #0]
 8019f2a:	4413      	add	r3, r2
 8019f2c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019f30:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019f34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019f38:	4413      	add	r3, r2
 8019f3a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019f3e:	6803      	ldr	r3, [r0, #0]
 8019f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f42:	4798      	blx	r3
 8019f44:	f010 0f01 	tst.w	r0, #1
 8019f48:	d00b      	beq.n	8019f62 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8019f4a:	6828      	ldr	r0, [r5, #0]
 8019f4c:	6803      	ldr	r3, [r0, #0]
 8019f4e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019f54:	4798      	blx	r3
 8019f56:	b005      	add	sp, #20
 8019f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f5a:	4a26      	ldr	r2, [pc, #152]	@ (8019ff4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019f5c:	e7c7      	b.n	8019eee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8019f5e:	4b24      	ldr	r3, [pc, #144]	@ (8019ff0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019f60:	e7cc      	b.n	8019efc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019f62:	6830      	ldr	r0, [r6, #0]
 8019f64:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8019f68:	6803      	ldr	r3, [r0, #0]
 8019f6a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8019f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f70:	4798      	blx	r3
 8019f72:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8019f76:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019f7a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8019f7e:	fb14 3402 	smlabb	r4, r4, r2, r3
 8019f82:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019f86:	4404      	add	r4, r0
 8019f88:	6830      	ldr	r0, [r6, #0]
 8019f8a:	6803      	ldr	r3, [r0, #0]
 8019f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f8e:	4798      	blx	r3
 8019f90:	4917      	ldr	r1, [pc, #92]	@ (8019ff0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019f92:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019f96:	880b      	ldrh	r3, [r1, #0]
 8019f98:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8019f9c:	fb03 c202 	mla	r2, r3, r2, ip
 8019fa0:	437b      	muls	r3, r7
 8019fa2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8019fa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019faa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019fae:	4410      	add	r0, r2
 8019fb0:	18c2      	adds	r2, r0, r3
 8019fb2:	4290      	cmp	r0, r2
 8019fb4:	d214      	bcs.n	8019fe0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8019fb6:	eb00 0c07 	add.w	ip, r0, r7
 8019fba:	4560      	cmp	r0, ip
 8019fbc:	d204      	bcs.n	8019fc8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8019fbe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019fc2:	f800 3b01 	strb.w	r3, [r0], #1
 8019fc6:	e7f8      	b.n	8019fba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8019fc8:	880b      	ldrh	r3, [r1, #0]
 8019fca:	1b5b      	subs	r3, r3, r5
 8019fcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019fd0:	4418      	add	r0, r3
 8019fd2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019fd6:	1b5b      	subs	r3, r3, r5
 8019fd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019fdc:	441c      	add	r4, r3
 8019fde:	e7e8      	b.n	8019fb2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8019fe0:	6830      	ldr	r0, [r6, #0]
 8019fe2:	6803      	ldr	r3, [r0, #0]
 8019fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019fe6:	4798      	blx	r3
 8019fe8:	e7b5      	b.n	8019f56 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8019fea:	bf00      	nop
 8019fec:	240252f4 	.word	0x240252f4
 8019ff0:	240252f6 	.word	0x240252f6
 8019ff4:	240252f8 	.word	0x240252f8
 8019ff8:	240252fc 	.word	0x240252fc

08019ffc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8019ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a000:	b08f      	sub	sp, #60	@ 0x3c
 801a002:	461c      	mov	r4, r3
 801a004:	9203      	str	r2, [sp, #12]
 801a006:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a00a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a00c:	6820      	ldr	r0, [r4, #0]
 801a00e:	9100      	str	r1, [sp, #0]
 801a010:	9204      	str	r2, [sp, #16]
 801a012:	aa0a      	add	r2, sp, #40	@ 0x28
 801a014:	6861      	ldr	r1, [r4, #4]
 801a016:	c203      	stmia	r2!, {r0, r1}
 801a018:	6818      	ldr	r0, [r3, #0]
 801a01a:	aa0c      	add	r2, sp, #48	@ 0x30
 801a01c:	6859      	ldr	r1, [r3, #4]
 801a01e:	c203      	stmia	r2!, {r0, r1}
 801a020:	a80a      	add	r0, sp, #40	@ 0x28
 801a022:	f7f9 ff23 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a026:	4621      	mov	r1, r4
 801a028:	a80c      	add	r0, sp, #48	@ 0x30
 801a02a:	f7f9 ff47 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a02e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801a032:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a036:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a03a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a03e:	bfdb      	ittet	le
 801a040:	b2b3      	uxthle	r3, r6
 801a042:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a046:	2301      	movgt	r3, #1
 801a048:	fb92 f3f3 	sdivle	r3, r2, r3
 801a04c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a050:	441d      	add	r5, r3
 801a052:	fb92 f1f3 	sdiv	r1, r2, r3
 801a056:	fa1f fc81 	uxth.w	ip, r1
 801a05a:	3d01      	subs	r5, #1
 801a05c:	fb0c 2413 	mls	r4, ip, r3, r2
 801a060:	4661      	mov	r1, ip
 801a062:	fb14 f406 	smulbb	r4, r4, r6
 801a066:	4404      	add	r4, r0
 801a068:	fb95 f5f3 	sdiv	r5, r5, r3
 801a06c:	b2a4      	uxth	r4, r4
 801a06e:	b131      	cbz	r1, 801a07e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801a070:	9b03      	ldr	r3, [sp, #12]
 801a072:	9900      	ldr	r1, [sp, #0]
 801a074:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a078:	ba1b      	rev	r3, r3
 801a07a:	4419      	add	r1, r3
 801a07c:	9100      	str	r1, [sp, #0]
 801a07e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a082:	b2ad      	uxth	r5, r5
 801a084:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801a088:	4418      	add	r0, r3
 801a08a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a08e:	00ad      	lsls	r5, r5, #2
 801a090:	441a      	add	r2, r3
 801a092:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a096:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a09a:	9301      	str	r3, [sp, #4]
 801a09c:	4b79      	ldr	r3, [pc, #484]	@ (801a284 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801a09e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a0a2:	6818      	ldr	r0, [r3, #0]
 801a0a4:	6803      	ldr	r3, [r0, #0]
 801a0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0a8:	4798      	blx	r3
 801a0aa:	4a77      	ldr	r2, [pc, #476]	@ (801a288 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801a0ac:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a0b0:	2c00      	cmp	r4, #0
 801a0b2:	8813      	ldrh	r3, [r2, #0]
 801a0b4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a0b8:	9209      	str	r2, [sp, #36]	@ 0x24
 801a0ba:	fb03 c101 	mla	r1, r3, r1, ip
 801a0be:	fb06 f303 	mul.w	r3, r6, r3
 801a0c2:	bf18      	it	ne
 801a0c4:	2600      	movne	r6, #0
 801a0c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a0ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a0ce:	4408      	add	r0, r1
 801a0d0:	4403      	add	r3, r0
 801a0d2:	9306      	str	r3, [sp, #24]
 801a0d4:	f105 0304 	add.w	r3, r5, #4
 801a0d8:	9305      	str	r3, [sp, #20]
 801a0da:	9b01      	ldr	r3, [sp, #4]
 801a0dc:	bf08      	it	eq
 801a0de:	461e      	moveq	r6, r3
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	b2b6      	uxth	r6, r6
 801a0e4:	9302      	str	r3, [sp, #8]
 801a0e6:	9a06      	ldr	r2, [sp, #24]
 801a0e8:	4290      	cmp	r0, r2
 801a0ea:	f080 80c2 	bcs.w	801a272 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801a0ee:	b963      	cbnz	r3, 801a10a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801a0f0:	9b00      	ldr	r3, [sp, #0]
 801a0f2:	781a      	ldrb	r2, [r3, #0]
 801a0f4:	0993      	lsrs	r3, r2, #6
 801a0f6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a0fa:	9202      	str	r2, [sp, #8]
 801a0fc:	1e5a      	subs	r2, r3, #1
 801a0fe:	2a02      	cmp	r2, #2
 801a100:	d815      	bhi.n	801a12e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801a102:	9a00      	ldr	r2, [sp, #0]
 801a104:	b29b      	uxth	r3, r3
 801a106:	3201      	adds	r2, #1
 801a108:	9200      	str	r2, [sp, #0]
 801a10a:	b1b4      	cbz	r4, 801a13a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801a10c:	429c      	cmp	r4, r3
 801a10e:	bf91      	iteee	ls
 801a110:	1b1c      	subls	r4, r3, r4
 801a112:	1ae4      	subhi	r4, r4, r3
 801a114:	4635      	movhi	r5, r6
 801a116:	f04f 0e00 	movhi.w	lr, #0
 801a11a:	bf9b      	ittet	ls
 801a11c:	fa1f fe84 	uxthls.w	lr, r4
 801a120:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801a124:	b2a4      	uxthhi	r4, r4
 801a126:	2400      	movls	r4, #0
 801a128:	4673      	mov	r3, lr
 801a12a:	462e      	mov	r6, r5
 801a12c:	e7db      	b.n	801a0e6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801a12e:	9a00      	ldr	r2, [sp, #0]
 801a130:	9b00      	ldr	r3, [sp, #0]
 801a132:	3202      	adds	r2, #2
 801a134:	785b      	ldrb	r3, [r3, #1]
 801a136:	9200      	str	r2, [sp, #0]
 801a138:	e7e7      	b.n	801a10a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801a13a:	2204      	movs	r2, #4
 801a13c:	9905      	ldr	r1, [sp, #20]
 801a13e:	429e      	cmp	r6, r3
 801a140:	4615      	mov	r5, r2
 801a142:	9a02      	ldr	r2, [sp, #8]
 801a144:	bf94      	ite	ls
 801a146:	eba3 0e06 	subls.w	lr, r3, r6
 801a14a:	46a6      	movhi	lr, r4
 801a14c:	fb15 1202 	smlabb	r2, r5, r2, r1
 801a150:	9903      	ldr	r1, [sp, #12]
 801a152:	bf8c      	ite	hi
 801a154:	1af5      	subhi	r5, r6, r3
 801a156:	fa1f fe8e 	uxthls.w	lr, lr
 801a15a:	f851 c002 	ldr.w	ip, [r1, r2]
 801a15e:	bf9a      	itte	ls
 801a160:	4625      	movls	r5, r4
 801a162:	4632      	movls	r2, r6
 801a164:	b2ad      	uxthhi	r5, r5
 801a166:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801a16a:	bf88      	it	hi
 801a16c:	461a      	movhi	r2, r3
 801a16e:	b179      	cbz	r1, 801a190 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801a170:	29ff      	cmp	r1, #255	@ 0xff
 801a172:	fa5f f98c 	uxtb.w	r9, ip
 801a176:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801a17a:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801a17e:	d126      	bne.n	801a1ce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801a180:	9f04      	ldr	r7, [sp, #16]
 801a182:	2fff      	cmp	r7, #255	@ 0xff
 801a184:	d123      	bne.n	801a1ce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801a186:	4682      	mov	sl, r0
 801a188:	4611      	mov	r1, r2
 801a18a:	f10a 0a03 	add.w	sl, sl, #3
 801a18e:	b9a9      	cbnz	r1, 801a1bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801a190:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a194:	429e      	cmp	r6, r3
 801a196:	4410      	add	r0, r2
 801a198:	d8c6      	bhi.n	801a128 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801a19a:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801a19e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1a4:	1b64      	subs	r4, r4, r5
 801a1a6:	9a01      	ldr	r2, [sp, #4]
 801a1a8:	881b      	ldrh	r3, [r3, #0]
 801a1aa:	b2a4      	uxth	r4, r4
 801a1ac:	1a9b      	subs	r3, r3, r2
 801a1ae:	2c00      	cmp	r4, #0
 801a1b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a1b4:	bf18      	it	ne
 801a1b6:	2500      	movne	r5, #0
 801a1b8:	4418      	add	r0, r3
 801a1ba:	e7b5      	b.n	801a128 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801a1bc:	3901      	subs	r1, #1
 801a1be:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801a1c2:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801a1c6:	f80a cc01 	strb.w	ip, [sl, #-1]
 801a1ca:	b289      	uxth	r1, r1
 801a1cc:	e7dd      	b.n	801a18a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801a1ce:	9f04      	ldr	r7, [sp, #16]
 801a1d0:	fb07 fa01 	mul.w	sl, r7, r1
 801a1d4:	f10a 0101 	add.w	r1, sl, #1
 801a1d8:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801a1dc:	1209      	asrs	r1, r1, #8
 801a1de:	ea6f 0a01 	mvn.w	sl, r1
 801a1e2:	b289      	uxth	r1, r1
 801a1e4:	fb19 f901 	smulbb	r9, r9, r1
 801a1e8:	fa5f fa8a 	uxtb.w	sl, sl
 801a1ec:	fb18 f801 	smulbb	r8, r8, r1
 801a1f0:	fb1c f101 	smulbb	r1, ip, r1
 801a1f4:	fa1f f789 	uxth.w	r7, r9
 801a1f8:	4684      	mov	ip, r0
 801a1fa:	4691      	mov	r9, r2
 801a1fc:	9707      	str	r7, [sp, #28]
 801a1fe:	b289      	uxth	r1, r1
 801a200:	fa1f f788 	uxth.w	r7, r8
 801a204:	9708      	str	r7, [sp, #32]
 801a206:	f10c 0c03 	add.w	ip, ip, #3
 801a20a:	f1b9 0f00 	cmp.w	r9, #0
 801a20e:	d0bf      	beq.n	801a190 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801a210:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801a214:	f109 39ff 	add.w	r9, r9, #4294967295
 801a218:	9f07      	ldr	r7, [sp, #28]
 801a21a:	fa1f f989 	uxth.w	r9, r9
 801a21e:	fb08 780a 	mla	r8, r8, sl, r7
 801a222:	9f08      	ldr	r7, [sp, #32]
 801a224:	fa1f f888 	uxth.w	r8, r8
 801a228:	f108 0b01 	add.w	fp, r8, #1
 801a22c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a230:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a234:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801a238:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801a23c:	fb08 780a 	mla	r8, r8, sl, r7
 801a240:	fa1f f888 	uxth.w	r8, r8
 801a244:	f108 0b01 	add.w	fp, r8, #1
 801a248:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a24c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a250:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801a254:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801a258:	fb08 180a 	mla	r8, r8, sl, r1
 801a25c:	fa1f f888 	uxth.w	r8, r8
 801a260:	f108 0b01 	add.w	fp, r8, #1
 801a264:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a268:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a26c:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801a270:	e7c9      	b.n	801a206 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801a272:	4b04      	ldr	r3, [pc, #16]	@ (801a284 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801a274:	6818      	ldr	r0, [r3, #0]
 801a276:	6803      	ldr	r3, [r0, #0]
 801a278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a27a:	4798      	blx	r3
 801a27c:	b00f      	add	sp, #60	@ 0x3c
 801a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a282:	bf00      	nop
 801a284:	240252fc 	.word	0x240252fc
 801a288:	240252f6 	.word	0x240252f6

0801a28c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a290:	b089      	sub	sp, #36	@ 0x24
 801a292:	4607      	mov	r7, r0
 801a294:	4689      	mov	r9, r1
 801a296:	4692      	mov	sl, r2
 801a298:	ac08      	add	r4, sp, #32
 801a29a:	461e      	mov	r6, r3
 801a29c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	f7fd ff77 	bl	8018194 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a2a6:	683b      	ldr	r3, [r7, #0]
 801a2a8:	4605      	mov	r5, r0
 801a2aa:	4620      	mov	r0, r4
 801a2ac:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801a2b0:	f7fd feb6 	bl	8018020 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a2b4:	4683      	mov	fp, r0
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	f7fd fee6 	bl	8018088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a2bc:	4653      	mov	r3, sl
 801a2be:	464a      	mov	r2, r9
 801a2c0:	4639      	mov	r1, r7
 801a2c2:	9500      	str	r5, [sp, #0]
 801a2c4:	e9cd b001 	strd	fp, r0, [sp, #4]
 801a2c8:	a806      	add	r0, sp, #24
 801a2ca:	47c0      	blx	r8
 801a2cc:	a906      	add	r1, sp, #24
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	f7fd fd8a 	bl	8017de8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801a2d4:	4628      	mov	r0, r5
 801a2d6:	b009      	add	sp, #36	@ 0x24
 801a2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2dc <_ZN8touchgfx8LCD24bppD0Ev>:
 801a2dc:	b510      	push	{r4, lr}
 801a2de:	4604      	mov	r4, r0
 801a2e0:	216c      	movs	r1, #108	@ 0x6c
 801a2e2:	f008 fc7f 	bl	8022be4 <_ZdlPvj>
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	bd10      	pop	{r4, pc}

0801a2ea <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801a2ea:	b510      	push	{r4, lr}
 801a2ec:	4604      	mov	r4, r0
 801a2ee:	2104      	movs	r1, #4
 801a2f0:	f008 fc78 	bl	8022be4 <_ZdlPvj>
 801a2f4:	4620      	mov	r0, r4
 801a2f6:	bd10      	pop	{r4, pc}

0801a2f8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801a2f8:	b510      	push	{r4, lr}
 801a2fa:	4604      	mov	r4, r0
 801a2fc:	2104      	movs	r1, #4
 801a2fe:	f008 fc71 	bl	8022be4 <_ZdlPvj>
 801a302:	4620      	mov	r0, r4
 801a304:	bd10      	pop	{r4, pc}

0801a306 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801a306:	b510      	push	{r4, lr}
 801a308:	4604      	mov	r4, r0
 801a30a:	f640 0144 	movw	r1, #2116	@ 0x844
 801a30e:	f008 fc69 	bl	8022be4 <_ZdlPvj>
 801a312:	4620      	mov	r0, r4
 801a314:	bd10      	pop	{r4, pc}

0801a316 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801a316:	b510      	push	{r4, lr}
 801a318:	4604      	mov	r4, r0
 801a31a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801a31e:	f008 fc61 	bl	8022be4 <_ZdlPvj>
 801a322:	4620      	mov	r0, r4
 801a324:	bd10      	pop	{r4, pc}

0801a326 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a326:	b510      	push	{r4, lr}
 801a328:	4604      	mov	r4, r0
 801a32a:	2104      	movs	r1, #4
 801a32c:	f008 fc5a 	bl	8022be4 <_ZdlPvj>
 801a330:	4620      	mov	r0, r4
 801a332:	bd10      	pop	{r4, pc}

0801a334 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a334:	b510      	push	{r4, lr}
 801a336:	4604      	mov	r4, r0
 801a338:	2104      	movs	r1, #4
 801a33a:	f008 fc53 	bl	8022be4 <_ZdlPvj>
 801a33e:	4620      	mov	r0, r4
 801a340:	bd10      	pop	{r4, pc}

0801a342 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a342:	b510      	push	{r4, lr}
 801a344:	4604      	mov	r4, r0
 801a346:	2104      	movs	r1, #4
 801a348:	f008 fc4c 	bl	8022be4 <_ZdlPvj>
 801a34c:	4620      	mov	r0, r4
 801a34e:	bd10      	pop	{r4, pc}

0801a350 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a350:	b510      	push	{r4, lr}
 801a352:	4604      	mov	r4, r0
 801a354:	2104      	movs	r1, #4
 801a356:	f008 fc45 	bl	8022be4 <_ZdlPvj>
 801a35a:	4620      	mov	r0, r4
 801a35c:	bd10      	pop	{r4, pc}

0801a35e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a35e:	b510      	push	{r4, lr}
 801a360:	4604      	mov	r4, r0
 801a362:	2104      	movs	r1, #4
 801a364:	f008 fc3e 	bl	8022be4 <_ZdlPvj>
 801a368:	4620      	mov	r0, r4
 801a36a:	bd10      	pop	{r4, pc}

0801a36c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a36c:	b510      	push	{r4, lr}
 801a36e:	4604      	mov	r4, r0
 801a370:	2104      	movs	r1, #4
 801a372:	f008 fc37 	bl	8022be4 <_ZdlPvj>
 801a376:	4620      	mov	r0, r4
 801a378:	bd10      	pop	{r4, pc}

0801a37a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a37a:	b510      	push	{r4, lr}
 801a37c:	4604      	mov	r4, r0
 801a37e:	2104      	movs	r1, #4
 801a380:	f008 fc30 	bl	8022be4 <_ZdlPvj>
 801a384:	4620      	mov	r0, r4
 801a386:	bd10      	pop	{r4, pc}

0801a388 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a388:	b510      	push	{r4, lr}
 801a38a:	4604      	mov	r4, r0
 801a38c:	2104      	movs	r1, #4
 801a38e:	f008 fc29 	bl	8022be4 <_ZdlPvj>
 801a392:	4620      	mov	r0, r4
 801a394:	bd10      	pop	{r4, pc}

0801a396 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a396:	b510      	push	{r4, lr}
 801a398:	4604      	mov	r4, r0
 801a39a:	2104      	movs	r1, #4
 801a39c:	f008 fc22 	bl	8022be4 <_ZdlPvj>
 801a3a0:	4620      	mov	r0, r4
 801a3a2:	bd10      	pop	{r4, pc}

0801a3a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a3a4:	b510      	push	{r4, lr}
 801a3a6:	4604      	mov	r4, r0
 801a3a8:	2104      	movs	r1, #4
 801a3aa:	f008 fc1b 	bl	8022be4 <_ZdlPvj>
 801a3ae:	4620      	mov	r0, r4
 801a3b0:	bd10      	pop	{r4, pc}

0801a3b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a3b2:	b510      	push	{r4, lr}
 801a3b4:	4604      	mov	r4, r0
 801a3b6:	2104      	movs	r1, #4
 801a3b8:	f008 fc14 	bl	8022be4 <_ZdlPvj>
 801a3bc:	4620      	mov	r0, r4
 801a3be:	bd10      	pop	{r4, pc}

0801a3c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a3c0:	b510      	push	{r4, lr}
 801a3c2:	4604      	mov	r4, r0
 801a3c4:	2104      	movs	r1, #4
 801a3c6:	f008 fc0d 	bl	8022be4 <_ZdlPvj>
 801a3ca:	4620      	mov	r0, r4
 801a3cc:	bd10      	pop	{r4, pc}

0801a3ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a3ce:	b510      	push	{r4, lr}
 801a3d0:	4604      	mov	r4, r0
 801a3d2:	2104      	movs	r1, #4
 801a3d4:	f008 fc06 	bl	8022be4 <_ZdlPvj>
 801a3d8:	4620      	mov	r0, r4
 801a3da:	bd10      	pop	{r4, pc}

0801a3dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a3dc:	b510      	push	{r4, lr}
 801a3de:	4604      	mov	r4, r0
 801a3e0:	2104      	movs	r1, #4
 801a3e2:	f008 fbff 	bl	8022be4 <_ZdlPvj>
 801a3e6:	4620      	mov	r0, r4
 801a3e8:	bd10      	pop	{r4, pc}

0801a3ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a3ea:	b510      	push	{r4, lr}
 801a3ec:	4604      	mov	r4, r0
 801a3ee:	2104      	movs	r1, #4
 801a3f0:	f008 fbf8 	bl	8022be4 <_ZdlPvj>
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	bd10      	pop	{r4, pc}

0801a3f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a3f8:	b510      	push	{r4, lr}
 801a3fa:	4604      	mov	r4, r0
 801a3fc:	2104      	movs	r1, #4
 801a3fe:	f008 fbf1 	bl	8022be4 <_ZdlPvj>
 801a402:	4620      	mov	r0, r4
 801a404:	bd10      	pop	{r4, pc}

0801a406 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a406:	b510      	push	{r4, lr}
 801a408:	4604      	mov	r4, r0
 801a40a:	2104      	movs	r1, #4
 801a40c:	f008 fbea 	bl	8022be4 <_ZdlPvj>
 801a410:	4620      	mov	r0, r4
 801a412:	bd10      	pop	{r4, pc}

0801a414 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a414:	b510      	push	{r4, lr}
 801a416:	4604      	mov	r4, r0
 801a418:	2104      	movs	r1, #4
 801a41a:	f008 fbe3 	bl	8022be4 <_ZdlPvj>
 801a41e:	4620      	mov	r0, r4
 801a420:	bd10      	pop	{r4, pc}

0801a422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a422:	b510      	push	{r4, lr}
 801a424:	4604      	mov	r4, r0
 801a426:	2104      	movs	r1, #4
 801a428:	f008 fbdc 	bl	8022be4 <_ZdlPvj>
 801a42c:	4620      	mov	r0, r4
 801a42e:	bd10      	pop	{r4, pc}

0801a430 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a430:	b510      	push	{r4, lr}
 801a432:	4604      	mov	r4, r0
 801a434:	2104      	movs	r1, #4
 801a436:	f008 fbd5 	bl	8022be4 <_ZdlPvj>
 801a43a:	4620      	mov	r0, r4
 801a43c:	bd10      	pop	{r4, pc}
	...

0801a440 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a444:	b08f      	sub	sp, #60	@ 0x3c
 801a446:	461c      	mov	r4, r3
 801a448:	460e      	mov	r6, r1
 801a44a:	9206      	str	r2, [sp, #24]
 801a44c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a450:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a452:	9202      	str	r2, [sp, #8]
 801a454:	2a00      	cmp	r2, #0
 801a456:	f000 8128 	beq.w	801a6aa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a45a:	6820      	ldr	r0, [r4, #0]
 801a45c:	aa0a      	add	r2, sp, #40	@ 0x28
 801a45e:	6861      	ldr	r1, [r4, #4]
 801a460:	c203      	stmia	r2!, {r0, r1}
 801a462:	6818      	ldr	r0, [r3, #0]
 801a464:	aa0c      	add	r2, sp, #48	@ 0x30
 801a466:	6859      	ldr	r1, [r3, #4]
 801a468:	c203      	stmia	r2!, {r0, r1}
 801a46a:	a80a      	add	r0, sp, #40	@ 0x28
 801a46c:	f7f9 fcfe 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a470:	4621      	mov	r1, r4
 801a472:	a80c      	add	r0, sp, #48	@ 0x30
 801a474:	f7f9 fd22 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a478:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801a47c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a480:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801a484:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a488:	bfdb      	ittet	le
 801a48a:	b2bb      	uxthle	r3, r7
 801a48c:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a490:	2301      	movgt	r3, #1
 801a492:	fb92 f3f3 	sdivle	r3, r2, r3
 801a496:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a49a:	441d      	add	r5, r3
 801a49c:	fb92 f1f3 	sdiv	r1, r2, r3
 801a4a0:	fa1f fc81 	uxth.w	ip, r1
 801a4a4:	3d01      	subs	r5, #1
 801a4a6:	fb0c 2413 	mls	r4, ip, r3, r2
 801a4aa:	4661      	mov	r1, ip
 801a4ac:	fb14 f407 	smulbb	r4, r4, r7
 801a4b0:	4404      	add	r4, r0
 801a4b2:	fb95 f5f3 	sdiv	r5, r5, r3
 801a4b6:	b2a4      	uxth	r4, r4
 801a4b8:	b121      	cbz	r1, 801a4c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801a4ba:	9b06      	ldr	r3, [sp, #24]
 801a4bc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a4c0:	ba1b      	rev	r3, r3
 801a4c2:	441e      	add	r6, r3
 801a4c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a4c8:	b2ad      	uxth	r5, r5
 801a4ca:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801a4ce:	4418      	add	r0, r3
 801a4d0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a4d4:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801a4d8:	00ad      	lsls	r5, r5, #2
 801a4da:	441a      	add	r2, r3
 801a4dc:	4b74      	ldr	r3, [pc, #464]	@ (801a6b0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a4de:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a4e2:	6818      	ldr	r0, [r3, #0]
 801a4e4:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a4e8:	6803      	ldr	r3, [r0, #0]
 801a4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a4ec:	4798      	blx	r3
 801a4ee:	4a71      	ldr	r2, [pc, #452]	@ (801a6b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801a4f0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a4f4:	2c00      	cmp	r4, #0
 801a4f6:	8813      	ldrh	r3, [r2, #0]
 801a4f8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a4fc:	9209      	str	r2, [sp, #36]	@ 0x24
 801a4fe:	fb03 c101 	mla	r1, r3, r1, ip
 801a502:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a506:	fb03 f307 	mul.w	r3, r3, r7
 801a50a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a50e:	9204      	str	r2, [sp, #16]
 801a510:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a514:	9a02      	ldr	r2, [sp, #8]
 801a516:	4408      	add	r0, r1
 801a518:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801a51c:	4403      	add	r3, r0
 801a51e:	b292      	uxth	r2, r2
 801a520:	9307      	str	r3, [sp, #28]
 801a522:	f105 0304 	add.w	r3, r5, #4
 801a526:	bf0c      	ite	eq
 801a528:	4645      	moveq	r5, r8
 801a52a:	2500      	movne	r5, #0
 801a52c:	9308      	str	r3, [sp, #32]
 801a52e:	2300      	movs	r3, #0
 801a530:	b2ad      	uxth	r5, r5
 801a532:	9205      	str	r2, [sp, #20]
 801a534:	9303      	str	r3, [sp, #12]
 801a536:	9a07      	ldr	r2, [sp, #28]
 801a538:	4282      	cmp	r2, r0
 801a53a:	f240 80b1 	bls.w	801a6a0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801a53e:	b95b      	cbnz	r3, 801a558 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801a540:	7832      	ldrb	r2, [r6, #0]
 801a542:	0993      	lsrs	r3, r2, #6
 801a544:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a548:	9203      	str	r2, [sp, #12]
 801a54a:	1e5a      	subs	r2, r3, #1
 801a54c:	2a02      	cmp	r2, #2
 801a54e:	bf8d      	iteet	hi
 801a550:	7873      	ldrbhi	r3, [r6, #1]
 801a552:	3601      	addls	r6, #1
 801a554:	b29b      	uxthls	r3, r3
 801a556:	3602      	addhi	r6, #2
 801a558:	b184      	cbz	r4, 801a57c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801a55a:	429c      	cmp	r4, r3
 801a55c:	bf91      	iteee	ls
 801a55e:	1b1c      	subls	r4, r3, r4
 801a560:	1ae4      	subhi	r4, r4, r3
 801a562:	4629      	movhi	r1, r5
 801a564:	f04f 0e00 	movhi.w	lr, #0
 801a568:	bf9b      	ittet	ls
 801a56a:	fa1f fe84 	uxthls.w	lr, r4
 801a56e:	2400      	movls	r4, #0
 801a570:	b2a4      	uxthhi	r4, r4
 801a572:	fa1f f188 	uxthls.w	r1, r8
 801a576:	4673      	mov	r3, lr
 801a578:	460d      	mov	r5, r1
 801a57a:	e7dc      	b.n	801a536 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801a57c:	2203      	movs	r2, #3
 801a57e:	9908      	ldr	r1, [sp, #32]
 801a580:	42ab      	cmp	r3, r5
 801a582:	4617      	mov	r7, r2
 801a584:	9a03      	ldr	r2, [sp, #12]
 801a586:	bf24      	itt	cs
 801a588:	eba3 0e05 	subcs.w	lr, r3, r5
 801a58c:	9501      	strcs	r5, [sp, #4]
 801a58e:	fb17 1702 	smlabb	r7, r7, r2, r1
 801a592:	9a06      	ldr	r2, [sp, #24]
 801a594:	bf34      	ite	cc
 801a596:	1ae9      	subcc	r1, r5, r3
 801a598:	fa1f fe8e 	uxthcs.w	lr, lr
 801a59c:	4417      	add	r7, r2
 801a59e:	9a02      	ldr	r2, [sp, #8]
 801a5a0:	bf2f      	iteee	cs
 801a5a2:	4621      	movcs	r1, r4
 801a5a4:	b289      	uxthcc	r1, r1
 801a5a6:	9301      	strcc	r3, [sp, #4]
 801a5a8:	46a6      	movcc	lr, r4
 801a5aa:	2aff      	cmp	r2, #255	@ 0xff
 801a5ac:	d11e      	bne.n	801a5ec <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801a5ae:	4681      	mov	r9, r0
 801a5b0:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a5b4:	f109 0903 	add.w	r9, r9, #3
 801a5b8:	f1bc 0f00 	cmp.w	ip, #0
 801a5bc:	d15f      	bne.n	801a67e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801a5be:	9a01      	ldr	r2, [sp, #4]
 801a5c0:	42ab      	cmp	r3, r5
 801a5c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5c6:	4410      	add	r0, r2
 801a5c8:	d3d5      	bcc.n	801a576 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a5ca:	fa1f f188 	uxth.w	r1, r8
 801a5ce:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5d4:	1a64      	subs	r4, r4, r1
 801a5d6:	881b      	ldrh	r3, [r3, #0]
 801a5d8:	b2a4      	uxth	r4, r4
 801a5da:	eba3 0308 	sub.w	r3, r3, r8
 801a5de:	2c00      	cmp	r4, #0
 801a5e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a5e4:	bf18      	it	ne
 801a5e6:	2100      	movne	r1, #0
 801a5e8:	4418      	add	r0, r3
 801a5ea:	e7c4      	b.n	801a576 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a5ec:	4684      	mov	ip, r0
 801a5ee:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a5f2:	f10c 0c03 	add.w	ip, ip, #3
 801a5f6:	f1ba 0f00 	cmp.w	sl, #0
 801a5fa:	d0e0      	beq.n	801a5be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801a5fc:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801a600:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a604:	9a05      	ldr	r2, [sp, #20]
 801a606:	f897 9000 	ldrb.w	r9, [r7]
 801a60a:	fa1f fa8a 	uxth.w	sl, sl
 801a60e:	fb1b fb02 	smulbb	fp, fp, r2
 801a612:	9a04      	ldr	r2, [sp, #16]
 801a614:	fb09 b902 	mla	r9, r9, r2, fp
 801a618:	9a05      	ldr	r2, [sp, #20]
 801a61a:	fa1f f989 	uxth.w	r9, r9
 801a61e:	f109 0b01 	add.w	fp, r9, #1
 801a622:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a626:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801a62a:	fb1b fb02 	smulbb	fp, fp, r2
 801a62e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a632:	9a04      	ldr	r2, [sp, #16]
 801a634:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801a638:	f897 9001 	ldrb.w	r9, [r7, #1]
 801a63c:	fb09 b902 	mla	r9, r9, r2, fp
 801a640:	9a05      	ldr	r2, [sp, #20]
 801a642:	fa1f f989 	uxth.w	r9, r9
 801a646:	f109 0b01 	add.w	fp, r9, #1
 801a64a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a64e:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801a652:	fb1b fb02 	smulbb	fp, fp, r2
 801a656:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a65a:	9a04      	ldr	r2, [sp, #16]
 801a65c:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801a660:	f897 9002 	ldrb.w	r9, [r7, #2]
 801a664:	fb09 b902 	mla	r9, r9, r2, fp
 801a668:	fa1f f989 	uxth.w	r9, r9
 801a66c:	f109 0b01 	add.w	fp, r9, #1
 801a670:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a674:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a678:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801a67c:	e7b9      	b.n	801a5f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801a67e:	f897 a000 	ldrb.w	sl, [r7]
 801a682:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a686:	f809 ac03 	strb.w	sl, [r9, #-3]
 801a68a:	fa1f fc8c 	uxth.w	ip, ip
 801a68e:	f897 a001 	ldrb.w	sl, [r7, #1]
 801a692:	f809 ac02 	strb.w	sl, [r9, #-2]
 801a696:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a69a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801a69e:	e789      	b.n	801a5b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801a6a0:	4b03      	ldr	r3, [pc, #12]	@ (801a6b0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a6a2:	6818      	ldr	r0, [r3, #0]
 801a6a4:	6803      	ldr	r3, [r0, #0]
 801a6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a6a8:	4798      	blx	r3
 801a6aa:	b00f      	add	sp, #60	@ 0x3c
 801a6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6b0:	240252fc 	.word	0x240252fc
 801a6b4:	240252f6 	.word	0x240252f6

0801a6b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6bc:	b09b      	sub	sp, #108	@ 0x6c
 801a6be:	461d      	mov	r5, r3
 801a6c0:	4604      	mov	r4, r0
 801a6c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a6c4:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801a6c8:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801a6cc:	9208      	str	r2, [sp, #32]
 801a6ce:	2a00      	cmp	r2, #0
 801a6d0:	f000 81f3 	beq.w	801aaba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801a6d4:	6828      	ldr	r0, [r5, #0]
 801a6d6:	aa16      	add	r2, sp, #88	@ 0x58
 801a6d8:	6869      	ldr	r1, [r5, #4]
 801a6da:	c203      	stmia	r2!, {r0, r1}
 801a6dc:	6818      	ldr	r0, [r3, #0]
 801a6de:	aa18      	add	r2, sp, #96	@ 0x60
 801a6e0:	6859      	ldr	r1, [r3, #4]
 801a6e2:	c203      	stmia	r2!, {r0, r1}
 801a6e4:	a816      	add	r0, sp, #88	@ 0x58
 801a6e6:	f7f9 fbc1 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a6ea:	4629      	mov	r1, r5
 801a6ec:	a818      	add	r0, sp, #96	@ 0x60
 801a6ee:	f7f9 fbe5 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a6f2:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801a6f6:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801a6fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a6fe:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801a702:	bfdb      	ittet	le
 801a704:	b29a      	uxthle	r2, r3
 801a706:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a70a:	f04f 0a01 	movgt.w	sl, #1
 801a70e:	fb91 faf2 	sdivle	sl, r1, r2
 801a712:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801a716:	4456      	add	r6, sl
 801a718:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801a71c:	3e01      	subs	r6, #1
 801a71e:	fb92 f0fa 	sdiv	r0, r2, sl
 801a722:	b280      	uxth	r0, r0
 801a724:	fb00 281a 	mls	r8, r0, sl, r2
 801a728:	900e      	str	r0, [sp, #56]	@ 0x38
 801a72a:	fb18 f803 	smulbb	r8, r8, r3
 801a72e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801a732:	4488      	add	r8, r1
 801a734:	4419      	add	r1, r3
 801a736:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801a73a:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801a73e:	fa1f f888 	uxth.w	r8, r8
 801a742:	441a      	add	r2, r3
 801a744:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801a748:	9303      	str	r3, [sp, #12]
 801a74a:	4b9c      	ldr	r3, [pc, #624]	@ (801a9bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801a74c:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801a750:	6818      	ldr	r0, [r3, #0]
 801a752:	6803      	ldr	r3, [r0, #0]
 801a754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a756:	4798      	blx	r3
 801a758:	4b99      	ldr	r3, [pc, #612]	@ (801a9c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801a75a:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801a75e:	f1b8 0f00 	cmp.w	r8, #0
 801a762:	881a      	ldrh	r2, [r3, #0]
 801a764:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801a768:	fb02 f505 	mul.w	r5, r2, r5
 801a76c:	fb02 7101 	mla	r1, r2, r1, r7
 801a770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a774:	9314      	str	r3, [sp, #80]	@ 0x50
 801a776:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a77a:	9b08      	ldr	r3, [sp, #32]
 801a77c:	fb96 f6fa 	sdiv	r6, r6, sl
 801a780:	4408      	add	r0, r1
 801a782:	f106 0601 	add.w	r6, r6, #1
 801a786:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801a78a:	f04f 0100 	mov.w	r1, #0
 801a78e:	eb00 0205 	add.w	r2, r0, r5
 801a792:	b2b6      	uxth	r6, r6
 801a794:	b29b      	uxth	r3, r3
 801a796:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a798:	9209      	str	r2, [sp, #36]	@ 0x24
 801a79a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a79c:	930d      	str	r3, [sp, #52]	@ 0x34
 801a79e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a7a2:	4b88      	ldr	r3, [pc, #544]	@ (801a9c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801a7a4:	f106 0204 	add.w	r2, r6, #4
 801a7a8:	eba3 0304 	sub.w	r3, r3, r4
 801a7ac:	9205      	str	r2, [sp, #20]
 801a7ae:	9a03      	ldr	r2, [sp, #12]
 801a7b0:	bf18      	it	ne
 801a7b2:	2200      	movne	r2, #0
 801a7b4:	9315      	str	r3, [sp, #84]	@ 0x54
 801a7b6:	b292      	uxth	r2, r2
 801a7b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a7ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a7bc:	fa11 f383 	uxtah	r3, r1, r3
 801a7c0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a7c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a7c6:	3304      	adds	r3, #4
 801a7c8:	9306      	str	r3, [sp, #24]
 801a7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7cc:	4283      	cmp	r3, r0
 801a7ce:	f240 816f 	bls.w	801aab0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801a7d2:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801a7d6:	f04f 0900 	mov.w	r9, #0
 801a7da:	9d06      	ldr	r5, [sp, #24]
 801a7dc:	fbb8 f3f3 	udiv	r3, r8, r3
 801a7e0:	ebaa 0303 	sub.w	r3, sl, r3
 801a7e4:	782d      	ldrb	r5, [r5, #0]
 801a7e6:	b29b      	uxth	r3, r3
 801a7e8:	950f      	str	r5, [sp, #60]	@ 0x3c
 801a7ea:	3501      	adds	r5, #1
 801a7ec:	9312      	str	r3, [sp, #72]	@ 0x48
 801a7ee:	9b06      	ldr	r3, [sp, #24]
 801a7f0:	9504      	str	r5, [sp, #16]
 801a7f2:	7859      	ldrb	r1, [r3, #1]
 801a7f4:	789b      	ldrb	r3, [r3, #2]
 801a7f6:	021b      	lsls	r3, r3, #8
 801a7f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a7fc:	9906      	ldr	r1, [sp, #24]
 801a7fe:	78c9      	ldrb	r1, [r1, #3]
 801a800:	430b      	orrs	r3, r1
 801a802:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801a804:	4419      	add	r1, r3
 801a806:	1c4d      	adds	r5, r1, #1
 801a808:	7849      	ldrb	r1, [r1, #1]
 801a80a:	9502      	str	r5, [sp, #8]
 801a80c:	0209      	lsls	r1, r1, #8
 801a80e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801a810:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801a814:	5ceb      	ldrb	r3, [r5, r3]
 801a816:	4319      	orrs	r1, r3
 801a818:	b28b      	uxth	r3, r1
 801a81a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801a81e:	930a      	str	r3, [sp, #40]	@ 0x28
 801a820:	2300      	movs	r3, #0
 801a822:	9307      	str	r3, [sp, #28]
 801a824:	2301      	movs	r3, #1
 801a826:	e9cd 3300 	strd	r3, r3, [sp]
 801a82a:	469c      	mov	ip, r3
 801a82c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a830:	930c      	str	r3, [sp, #48]	@ 0x30
 801a832:	f1b8 0f00 	cmp.w	r8, #0
 801a836:	f000 8082 	beq.w	801a93e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801a83a:	45c4      	cmp	ip, r8
 801a83c:	d270      	bcs.n	801a920 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801a83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a840:	eba8 080c 	sub.w	r8, r8, ip
 801a844:	4611      	mov	r1, r2
 801a846:	4283      	cmp	r3, r0
 801a848:	fa1f f888 	uxth.w	r8, r8
 801a84c:	d802      	bhi.n	801a854 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801a84e:	e074      	b.n	801a93a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801a850:	2b00      	cmp	r3, #0
 801a852:	d15f      	bne.n	801a914 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801a854:	9b02      	ldr	r3, [sp, #8]
 801a856:	9a01      	ldr	r2, [sp, #4]
 801a858:	785b      	ldrb	r3, [r3, #1]
 801a85a:	f1c2 0207 	rsb	r2, r2, #7
 801a85e:	9d01      	ldr	r5, [sp, #4]
 801a860:	4093      	lsls	r3, r2
 801a862:	005b      	lsls	r3, r3, #1
 801a864:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801a868:	9b02      	ldr	r3, [sp, #8]
 801a86a:	781b      	ldrb	r3, [r3, #0]
 801a86c:	412b      	asrs	r3, r5
 801a86e:	b2db      	uxtb	r3, r3
 801a870:	4313      	orrs	r3, r2
 801a872:	462a      	mov	r2, r5
 801a874:	3201      	adds	r2, #1
 801a876:	b29e      	uxth	r6, r3
 801a878:	b2d2      	uxtb	r2, r2
 801a87a:	2a08      	cmp	r2, #8
 801a87c:	9201      	str	r2, [sp, #4]
 801a87e:	9a02      	ldr	r2, [sp, #8]
 801a880:	bf09      	itett	eq
 801a882:	3202      	addeq	r2, #2
 801a884:	3201      	addne	r2, #1
 801a886:	9202      	streq	r2, [sp, #8]
 801a888:	2200      	moveq	r2, #0
 801a88a:	bf14      	ite	ne
 801a88c:	9202      	strne	r2, [sp, #8]
 801a88e:	9201      	streq	r2, [sp, #4]
 801a890:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a892:	42b2      	cmp	r2, r6
 801a894:	d309      	bcc.n	801a8aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801a896:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801a89a:	2301      	movs	r3, #1
 801a89c:	9a04      	ldr	r2, [sp, #16]
 801a89e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801a8a2:	d30e      	bcc.n	801a8c2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801a8a4:	9300      	str	r3, [sp, #0]
 801a8a6:	2500      	movs	r5, #0
 801a8a8:	e035      	b.n	801a916 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801a8aa:	9b04      	ldr	r3, [sp, #16]
 801a8ac:	429e      	cmp	r6, r3
 801a8ae:	d318      	bcc.n	801a8e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801a8b0:	9b00      	ldr	r3, [sp, #0]
 801a8b2:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801a8b6:	18e3      	adds	r3, r4, r3
 801a8b8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801a8bc:	9b00      	ldr	r3, [sp, #0]
 801a8be:	3301      	adds	r3, #1
 801a8c0:	b29b      	uxth	r3, r3
 801a8c2:	9a04      	ldr	r2, [sp, #16]
 801a8c4:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801a8c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a8cc:	9f00      	ldr	r7, [sp, #0]
 801a8ce:	7115      	strb	r5, [r2, #4]
 801a8d0:	3701      	adds	r7, #1
 801a8d2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801a8d4:	7157      	strb	r7, [r2, #5]
 801a8d6:	80d5      	strh	r5, [r2, #6]
 801a8d8:	9a04      	ldr	r2, [sp, #16]
 801a8da:	3201      	adds	r2, #1
 801a8dc:	b292      	uxth	r2, r2
 801a8de:	9204      	str	r2, [sp, #16]
 801a8e0:	e7e0      	b.n	801a8a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801a8e2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a8e6:	4632      	mov	r2, r6
 801a8e8:	795b      	ldrb	r3, [r3, #5]
 801a8ea:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801a8ee:	4425      	add	r5, r4
 801a8f0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801a8f2:	eb07 0c05 	add.w	ip, r7, r5
 801a8f6:	f1bc 0f00 	cmp.w	ip, #0
 801a8fa:	dd07      	ble.n	801a90c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801a8fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a900:	f892 c004 	ldrb.w	ip, [r2, #4]
 801a904:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801a908:	88d2      	ldrh	r2, [r2, #6]
 801a90a:	e7f1      	b.n	801a8f0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801a90c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801a910:	b29b      	uxth	r3, r3
 801a912:	e7c3      	b.n	801a89c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801a914:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a916:	460a      	mov	r2, r1
 801a918:	960a      	str	r6, [sp, #40]	@ 0x28
 801a91a:	46a9      	mov	r9, r5
 801a91c:	469c      	mov	ip, r3
 801a91e:	e788      	b.n	801a832 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801a920:	ebac 0308 	sub.w	r3, ip, r8
 801a924:	eb09 0508 	add.w	r5, r9, r8
 801a928:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a92c:	b29b      	uxth	r3, r3
 801a92e:	b2ad      	uxth	r5, r5
 801a930:	f04f 0800 	mov.w	r8, #0
 801a934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a936:	4282      	cmp	r2, r0
 801a938:	d88a      	bhi.n	801a850 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801a93a:	460a      	mov	r2, r1
 801a93c:	e745      	b.n	801a7ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801a93e:	4594      	cmp	ip, r2
 801a940:	9d08      	ldr	r5, [sp, #32]
 801a942:	4686      	mov	lr, r0
 801a944:	bf27      	ittee	cs
 801a946:	ebac 0302 	subcs.w	r3, ip, r2
 801a94a:	4616      	movcs	r6, r2
 801a94c:	eba2 010c 	subcc.w	r1, r2, ip
 801a950:	4666      	movcc	r6, ip
 801a952:	bf27      	ittee	cs
 801a954:	b29b      	uxthcs	r3, r3
 801a956:	4641      	movcs	r1, r8
 801a958:	b289      	uxthcc	r1, r1
 801a95a:	4643      	movcc	r3, r8
 801a95c:	2dff      	cmp	r5, #255	@ 0xff
 801a95e:	eb09 0506 	add.w	r5, r9, r6
 801a962:	b2ad      	uxth	r5, r5
 801a964:	d130      	bne.n	801a9c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801a966:	45a9      	cmp	r9, r5
 801a968:	f10e 0e03 	add.w	lr, lr, #3
 801a96c:	d17a      	bne.n	801aa64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801a96e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a972:	4594      	cmp	ip, r2
 801a974:	4430      	add	r0, r6
 801a976:	d3db      	bcc.n	801a930 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801a978:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a97a:	9903      	ldr	r1, [sp, #12]
 801a97c:	8812      	ldrh	r2, [r2, #0]
 801a97e:	1a52      	subs	r2, r2, r1
 801a980:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a982:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a986:	4410      	add	r0, r2
 801a988:	9a07      	ldr	r2, [sp, #28]
 801a98a:	3201      	adds	r2, #1
 801a98c:	428a      	cmp	r2, r1
 801a98e:	9207      	str	r2, [sp, #28]
 801a990:	f040 8081 	bne.w	801aa96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801a994:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801a998:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801a99c:	9b03      	ldr	r3, [sp, #12]
 801a99e:	eba8 080c 	sub.w	r8, r8, ip
 801a9a2:	fa1f f888 	uxth.w	r8, r8
 801a9a6:	f1b8 0f00 	cmp.w	r8, #0
 801a9aa:	bf08      	it	eq
 801a9ac:	461a      	moveq	r2, r3
 801a9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a9b0:	bf18      	it	ne
 801a9b2:	2200      	movne	r2, #0
 801a9b4:	3301      	adds	r3, #1
 801a9b6:	b292      	uxth	r2, r2
 801a9b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a9ba:	e6fd      	b.n	801a7b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801a9bc:	240252fc 	.word	0x240252fc
 801a9c0:	240252f6 	.word	0x240252f6
 801a9c4:	fffff7fb 	.word	0xfffff7fb
 801a9c8:	45a9      	cmp	r9, r5
 801a9ca:	f10e 0e03 	add.w	lr, lr, #3
 801a9ce:	d0ce      	beq.n	801a96e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801a9d0:	f109 0701 	add.w	r7, r9, #1
 801a9d4:	44a1      	add	r9, r4
 801a9d6:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801a9da:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801a9de:	9713      	str	r7, [sp, #76]	@ 0x4c
 801a9e0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a9e4:	9f05      	ldr	r7, [sp, #20]
 801a9e6:	eb07 0908 	add.w	r9, r7, r8
 801a9ea:	f817 8008 	ldrb.w	r8, [r7, r8]
 801a9ee:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a9f0:	fb1b fb07 	smulbb	fp, fp, r7
 801a9f4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a9f6:	fb08 b807 	mla	r8, r8, r7, fp
 801a9fa:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a9fc:	fa1f f888 	uxth.w	r8, r8
 801aa00:	f108 0b01 	add.w	fp, r8, #1
 801aa04:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aa08:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801aa0c:	fb1b fb07 	smulbb	fp, fp, r7
 801aa10:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aa14:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801aa16:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801aa1a:	f899 8001 	ldrb.w	r8, [r9, #1]
 801aa1e:	fb08 b807 	mla	r8, r8, r7, fp
 801aa22:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801aa24:	fa1f f888 	uxth.w	r8, r8
 801aa28:	f108 0b01 	add.w	fp, r8, #1
 801aa2c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aa30:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aa34:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801aa38:	f899 8002 	ldrb.w	r8, [r9, #2]
 801aa3c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801aa40:	fb19 f907 	smulbb	r9, r9, r7
 801aa44:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801aa46:	fb08 9807 	mla	r8, r8, r7, r9
 801aa4a:	fa1f f888 	uxth.w	r8, r8
 801aa4e:	f108 0901 	add.w	r9, r8, #1
 801aa52:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801aa56:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801aa5a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aa5e:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801aa62:	e7b1      	b.n	801a9c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801aa64:	f109 0b01 	add.w	fp, r9, #1
 801aa68:	44a1      	add	r9, r4
 801aa6a:	9f05      	ldr	r7, [sp, #20]
 801aa6c:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801aa70:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801aa74:	eb07 0908 	add.w	r9, r7, r8
 801aa78:	f817 8008 	ldrb.w	r8, [r7, r8]
 801aa7c:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801aa80:	f899 8001 	ldrb.w	r8, [r9, #1]
 801aa84:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801aa88:	f899 8002 	ldrb.w	r8, [r9, #2]
 801aa8c:	fa1f f98b 	uxth.w	r9, fp
 801aa90:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801aa94:	e767      	b.n	801a966 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801aa96:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801aa9a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801aa9e:	eba8 0801 	sub.w	r8, r8, r1
 801aaa2:	fa1f f888 	uxth.w	r8, r8
 801aaa6:	f1b8 0f00 	cmp.w	r8, #0
 801aaaa:	bf18      	it	ne
 801aaac:	2100      	movne	r1, #0
 801aaae:	e741      	b.n	801a934 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801aab0:	4b03      	ldr	r3, [pc, #12]	@ (801aac0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801aab2:	6818      	ldr	r0, [r3, #0]
 801aab4:	6803      	ldr	r3, [r0, #0]
 801aab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aab8:	4798      	blx	r3
 801aaba:	b01b      	add	sp, #108	@ 0x6c
 801aabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aac0:	240252fc 	.word	0x240252fc

0801aac4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac8:	b09d      	sub	sp, #116	@ 0x74
 801aaca:	461d      	mov	r5, r3
 801aacc:	4604      	mov	r4, r0
 801aace:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801aad0:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801aad4:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801aad8:	920c      	str	r2, [sp, #48]	@ 0x30
 801aada:	2a00      	cmp	r2, #0
 801aadc:	f000 81de 	beq.w	801ae9c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801aae0:	6828      	ldr	r0, [r5, #0]
 801aae2:	aa18      	add	r2, sp, #96	@ 0x60
 801aae4:	6869      	ldr	r1, [r5, #4]
 801aae6:	c203      	stmia	r2!, {r0, r1}
 801aae8:	6818      	ldr	r0, [r3, #0]
 801aaea:	aa1a      	add	r2, sp, #104	@ 0x68
 801aaec:	6859      	ldr	r1, [r3, #4]
 801aaee:	c203      	stmia	r2!, {r0, r1}
 801aaf0:	a818      	add	r0, sp, #96	@ 0x60
 801aaf2:	f7f9 f9bb 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aaf6:	4629      	mov	r1, r5
 801aaf8:	a81a      	add	r0, sp, #104	@ 0x68
 801aafa:	f7f9 f9df 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aafe:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801ab02:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801ab06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ab0a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801ab0e:	bfdb      	ittet	le
 801ab10:	b29a      	uxthle	r2, r3
 801ab12:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ab16:	2201      	movgt	r2, #1
 801ab18:	fb91 f2f2 	sdivle	r2, r1, r2
 801ab1c:	9201      	str	r2, [sp, #4]
 801ab1e:	9801      	ldr	r0, [sp, #4]
 801ab20:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801ab24:	9901      	ldr	r1, [sp, #4]
 801ab26:	fb92 f0f0 	sdiv	r0, r2, r0
 801ab2a:	b280      	uxth	r0, r0
 801ab2c:	440f      	add	r7, r1
 801ab2e:	900d      	str	r0, [sp, #52]	@ 0x34
 801ab30:	3f01      	subs	r7, #1
 801ab32:	9801      	ldr	r0, [sp, #4]
 801ab34:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801ab36:	fb05 2510 	mls	r5, r5, r0, r2
 801ab3a:	fb97 f7f1 	sdiv	r7, r7, r1
 801ab3e:	fb15 f503 	smulbb	r5, r5, r3
 801ab42:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801ab46:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801ab4a:	3701      	adds	r7, #1
 801ab4c:	440d      	add	r5, r1
 801ab4e:	4419      	add	r1, r3
 801ab50:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801ab54:	b2bf      	uxth	r7, r7
 801ab56:	441a      	add	r2, r3
 801ab58:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801ab5c:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801ab60:	00bf      	lsls	r7, r7, #2
 801ab62:	9304      	str	r3, [sp, #16]
 801ab64:	b2ad      	uxth	r5, r5
 801ab66:	4bb0      	ldr	r3, [pc, #704]	@ (801ae28 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801ab68:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801ab6c:	6818      	ldr	r0, [r3, #0]
 801ab6e:	6803      	ldr	r3, [r0, #0]
 801ab70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab72:	4798      	blx	r3
 801ab74:	4bad      	ldr	r3, [pc, #692]	@ (801ae2c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801ab76:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801ab7a:	2d00      	cmp	r5, #0
 801ab7c:	881a      	ldrh	r2, [r3, #0]
 801ab7e:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801ab82:	fb02 f606 	mul.w	r6, r2, r6
 801ab86:	fb02 c101 	mla	r1, r2, r1, ip
 801ab8a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ab8e:	9316      	str	r3, [sp, #88]	@ 0x58
 801ab90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ab94:	4ba6      	ldr	r3, [pc, #664]	@ (801ae30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801ab96:	eb00 0801 	add.w	r8, r0, r1
 801ab9a:	bf18      	it	ne
 801ab9c:	2100      	movne	r1, #0
 801ab9e:	eba3 0304 	sub.w	r3, r3, r4
 801aba2:	eb08 0206 	add.w	r2, r8, r6
 801aba6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801aba8:	9208      	str	r2, [sp, #32]
 801abaa:	f107 0204 	add.w	r2, r7, #4
 801abae:	9211      	str	r2, [sp, #68]	@ 0x44
 801abb0:	9a04      	ldr	r2, [sp, #16]
 801abb2:	bf08      	it	eq
 801abb4:	4611      	moveq	r1, r2
 801abb6:	2200      	movs	r2, #0
 801abb8:	b289      	uxth	r1, r1
 801abba:	920b      	str	r2, [sp, #44]	@ 0x2c
 801abbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801abbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801abc0:	fa12 f383 	uxtah	r3, r2, r3
 801abc4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801abc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801abca:	3304      	adds	r3, #4
 801abcc:	9306      	str	r3, [sp, #24]
 801abce:	9b08      	ldr	r3, [sp, #32]
 801abd0:	4543      	cmp	r3, r8
 801abd2:	f240 815e 	bls.w	801ae92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801abd6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801abda:	f04f 0b01 	mov.w	fp, #1
 801abde:	9a01      	ldr	r2, [sp, #4]
 801abe0:	9806      	ldr	r0, [sp, #24]
 801abe2:	465e      	mov	r6, fp
 801abe4:	f8cd b008 	str.w	fp, [sp, #8]
 801abe8:	7800      	ldrb	r0, [r0, #0]
 801abea:	fbb5 f3f3 	udiv	r3, r5, r3
 801abee:	1ad3      	subs	r3, r2, r3
 801abf0:	900e      	str	r0, [sp, #56]	@ 0x38
 801abf2:	3001      	adds	r0, #1
 801abf4:	b29b      	uxth	r3, r3
 801abf6:	9005      	str	r0, [sp, #20]
 801abf8:	9312      	str	r3, [sp, #72]	@ 0x48
 801abfa:	9b06      	ldr	r3, [sp, #24]
 801abfc:	785a      	ldrb	r2, [r3, #1]
 801abfe:	789b      	ldrb	r3, [r3, #2]
 801ac00:	021b      	lsls	r3, r3, #8
 801ac02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ac06:	9a06      	ldr	r2, [sp, #24]
 801ac08:	78d2      	ldrb	r2, [r2, #3]
 801ac0a:	4313      	orrs	r3, r2
 801ac0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ac0e:	441a      	add	r2, r3
 801ac10:	1c50      	adds	r0, r2, #1
 801ac12:	7852      	ldrb	r2, [r2, #1]
 801ac14:	9003      	str	r0, [sp, #12]
 801ac16:	0212      	lsls	r2, r2, #8
 801ac18:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ac1a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801ac1e:	5cc3      	ldrb	r3, [r0, r3]
 801ac20:	431a      	orrs	r2, r3
 801ac22:	b293      	uxth	r3, r2
 801ac24:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801ac28:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	461a      	mov	r2, r3
 801ac2e:	9307      	str	r3, [sp, #28]
 801ac30:	2d00      	cmp	r5, #0
 801ac32:	d07c      	beq.n	801ad2e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801ac34:	42ae      	cmp	r6, r5
 801ac36:	d26c      	bcs.n	801ad12 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801ac38:	9b08      	ldr	r3, [sp, #32]
 801ac3a:	1bad      	subs	r5, r5, r6
 801ac3c:	4608      	mov	r0, r1
 801ac3e:	4543      	cmp	r3, r8
 801ac40:	b2ad      	uxth	r5, r5
 801ac42:	d802      	bhi.n	801ac4a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801ac44:	e071      	b.n	801ad2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d15d      	bne.n	801ad06 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801ac4a:	9b03      	ldr	r3, [sp, #12]
 801ac4c:	9a02      	ldr	r2, [sp, #8]
 801ac4e:	785b      	ldrb	r3, [r3, #1]
 801ac50:	f1c2 0207 	rsb	r2, r2, #7
 801ac54:	9902      	ldr	r1, [sp, #8]
 801ac56:	4093      	lsls	r3, r2
 801ac58:	005b      	lsls	r3, r3, #1
 801ac5a:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801ac5e:	9b03      	ldr	r3, [sp, #12]
 801ac60:	781b      	ldrb	r3, [r3, #0]
 801ac62:	410b      	asrs	r3, r1
 801ac64:	3101      	adds	r1, #1
 801ac66:	b2c9      	uxtb	r1, r1
 801ac68:	b2db      	uxtb	r3, r3
 801ac6a:	2908      	cmp	r1, #8
 801ac6c:	9102      	str	r1, [sp, #8]
 801ac6e:	9903      	ldr	r1, [sp, #12]
 801ac70:	ea43 0302 	orr.w	r3, r3, r2
 801ac74:	bf0c      	ite	eq
 801ac76:	3102      	addeq	r1, #2
 801ac78:	3101      	addne	r1, #1
 801ac7a:	b29a      	uxth	r2, r3
 801ac7c:	bf05      	ittet	eq
 801ac7e:	9103      	streq	r1, [sp, #12]
 801ac80:	2100      	moveq	r1, #0
 801ac82:	9103      	strne	r1, [sp, #12]
 801ac84:	9102      	streq	r1, [sp, #8]
 801ac86:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ac88:	4291      	cmp	r1, r2
 801ac8a:	d30a      	bcc.n	801aca2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801ac8c:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801ac90:	2301      	movs	r3, #1
 801ac92:	9905      	ldr	r1, [sp, #20]
 801ac94:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801ac98:	d30f      	bcc.n	801acba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801ac9a:	469b      	mov	fp, r3
 801ac9c:	f04f 0c00 	mov.w	ip, #0
 801aca0:	e032      	b.n	801ad08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801aca2:	9b05      	ldr	r3, [sp, #20]
 801aca4:	429a      	cmp	r2, r3
 801aca6:	d318      	bcc.n	801acda <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801aca8:	eb04 030b 	add.w	r3, r4, fp
 801acac:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801acb0:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801acb4:	f10b 0301 	add.w	r3, fp, #1
 801acb8:	b29b      	uxth	r3, r3
 801acba:	9905      	ldr	r1, [sp, #20]
 801acbc:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801acc0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801acc4:	710e      	strb	r6, [r1, #4]
 801acc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801acc8:	80ce      	strh	r6, [r1, #6]
 801acca:	f10b 0601 	add.w	r6, fp, #1
 801acce:	714e      	strb	r6, [r1, #5]
 801acd0:	9905      	ldr	r1, [sp, #20]
 801acd2:	3101      	adds	r1, #1
 801acd4:	b289      	uxth	r1, r1
 801acd6:	9105      	str	r1, [sp, #20]
 801acd8:	e7df      	b.n	801ac9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801acda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801acde:	4611      	mov	r1, r2
 801ace0:	795b      	ldrb	r3, [r3, #5]
 801ace2:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801ace6:	4426      	add	r6, r4
 801ace8:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801acea:	4437      	add	r7, r6
 801acec:	2f00      	cmp	r7, #0
 801acee:	dd06      	ble.n	801acfe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801acf0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801acf4:	790f      	ldrb	r7, [r1, #4]
 801acf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801acfa:	88c9      	ldrh	r1, [r1, #6]
 801acfc:	e7f4      	b.n	801ace8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801acfe:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801ad02:	b29b      	uxth	r3, r3
 801ad04:	e7c5      	b.n	801ac92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801ad06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ad08:	920a      	str	r2, [sp, #40]	@ 0x28
 801ad0a:	4601      	mov	r1, r0
 801ad0c:	4662      	mov	r2, ip
 801ad0e:	461e      	mov	r6, r3
 801ad10:	e78e      	b.n	801ac30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801ad12:	1b73      	subs	r3, r6, r5
 801ad14:	eb02 0c05 	add.w	ip, r2, r5
 801ad18:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801ad1c:	b29b      	uxth	r3, r3
 801ad1e:	fa1f fc8c 	uxth.w	ip, ip
 801ad22:	2500      	movs	r5, #0
 801ad24:	9a08      	ldr	r2, [sp, #32]
 801ad26:	4542      	cmp	r2, r8
 801ad28:	d88d      	bhi.n	801ac46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801ad2a:	4601      	mov	r1, r0
 801ad2c:	e74f      	b.n	801abce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801ad2e:	428e      	cmp	r6, r1
 801ad30:	bf2b      	itete	cs
 801ad32:	468e      	movcs	lr, r1
 801ad34:	46b6      	movcc	lr, r6
 801ad36:	1a73      	subcs	r3, r6, r1
 801ad38:	1b88      	subcc	r0, r1, r6
 801ad3a:	eb02 0c0e 	add.w	ip, r2, lr
 801ad3e:	bf2b      	itete	cs
 801ad40:	4628      	movcs	r0, r5
 801ad42:	462b      	movcc	r3, r5
 801ad44:	b29b      	uxthcs	r3, r3
 801ad46:	b280      	uxthcc	r0, r0
 801ad48:	f108 0503 	add.w	r5, r8, #3
 801ad4c:	fa1f fc8c 	uxth.w	ip, ip
 801ad50:	4562      	cmp	r2, ip
 801ad52:	d06f      	beq.n	801ae34 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801ad54:	1c57      	adds	r7, r2, #1
 801ad56:	4422      	add	r2, r4
 801ad58:	b2bf      	uxth	r7, r7
 801ad5a:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801ad5e:	9713      	str	r7, [sp, #76]	@ 0x4c
 801ad60:	2704      	movs	r7, #4
 801ad62:	46b9      	mov	r9, r7
 801ad64:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801ad66:	fb19 7202 	smlabb	r2, r9, r2, r7
 801ad6a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ad6c:	58bf      	ldr	r7, [r7, r2]
 801ad6e:	0e3a      	lsrs	r2, r7, #24
 801ad70:	9209      	str	r2, [sp, #36]	@ 0x24
 801ad72:	d016      	beq.n	801ada2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801ad74:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ad78:	fa5f fa87 	uxtb.w	sl, r7
 801ad7c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ad80:	fa5f f289 	uxtb.w	r2, r9
 801ad84:	9214      	str	r2, [sp, #80]	@ 0x50
 801ad86:	b2fa      	uxtb	r2, r7
 801ad88:	9215      	str	r2, [sp, #84]	@ 0x54
 801ad8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad8c:	2aff      	cmp	r2, #255	@ 0xff
 801ad8e:	d10b      	bne.n	801ada8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801ad90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ad92:	2aff      	cmp	r2, #255	@ 0xff
 801ad94:	d108      	bne.n	801ada8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801ad96:	f805 ac03 	strb.w	sl, [r5, #-3]
 801ad9a:	f805 9c02 	strb.w	r9, [r5, #-2]
 801ad9e:	f805 7c01 	strb.w	r7, [r5, #-1]
 801ada2:	3503      	adds	r5, #3
 801ada4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ada6:	e7d3      	b.n	801ad50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801ada8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801adaa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801adac:	437a      	muls	r2, r7
 801adae:	1c57      	adds	r7, r2, #1
 801adb0:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801adb4:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801adb8:	1212      	asrs	r2, r2, #8
 801adba:	fa1f f982 	uxth.w	r9, r2
 801adbe:	43d2      	mvns	r2, r2
 801adc0:	fb1a fa09 	smulbb	sl, sl, r9
 801adc4:	b2d2      	uxtb	r2, r2
 801adc6:	fb07 a702 	mla	r7, r7, r2, sl
 801adca:	9209      	str	r2, [sp, #36]	@ 0x24
 801adcc:	b2bf      	uxth	r7, r7
 801adce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801add0:	f107 0a01 	add.w	sl, r7, #1
 801add4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801add8:	fb12 fa09 	smulbb	sl, r2, r9
 801addc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801adde:	123f      	asrs	r7, r7, #8
 801ade0:	f805 7c03 	strb.w	r7, [r5, #-3]
 801ade4:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801ade8:	fb07 aa02 	mla	sl, r7, r2, sl
 801adec:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801adee:	fb12 f909 	smulbb	r9, r2, r9
 801adf2:	fa1f fa8a 	uxth.w	sl, sl
 801adf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801adf8:	f10a 0701 	add.w	r7, sl, #1
 801adfc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ae00:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801ae04:	fb07 9902 	mla	r9, r7, r2, r9
 801ae08:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ae0c:	fa1f f989 	uxth.w	r9, r9
 801ae10:	f805 ac02 	strb.w	sl, [r5, #-2]
 801ae14:	f109 0201 	add.w	r2, r9, #1
 801ae18:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ae1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ae20:	f805 9c01 	strb.w	r9, [r5, #-1]
 801ae24:	e7bd      	b.n	801ada2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801ae26:	bf00      	nop
 801ae28:	240252fc 	.word	0x240252fc
 801ae2c:	240252f6 	.word	0x240252f6
 801ae30:	fffff7fb 	.word	0xfffff7fb
 801ae34:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ae38:	428e      	cmp	r6, r1
 801ae3a:	44f0      	add	r8, lr
 801ae3c:	f4ff af71 	bcc.w	801ad22 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801ae40:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ae42:	9904      	ldr	r1, [sp, #16]
 801ae44:	8812      	ldrh	r2, [r2, #0]
 801ae46:	1a52      	subs	r2, r2, r1
 801ae48:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ae4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ae4e:	4490      	add	r8, r2
 801ae50:	9a07      	ldr	r2, [sp, #28]
 801ae52:	3201      	adds	r2, #1
 801ae54:	428a      	cmp	r2, r1
 801ae56:	9207      	str	r2, [sp, #28]
 801ae58:	d111      	bne.n	801ae7e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801ae5a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801ae5e:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801ae62:	9b04      	ldr	r3, [sp, #16]
 801ae64:	eba5 050c 	sub.w	r5, r5, ip
 801ae68:	b2ad      	uxth	r5, r5
 801ae6a:	2d00      	cmp	r5, #0
 801ae6c:	bf08      	it	eq
 801ae6e:	4619      	moveq	r1, r3
 801ae70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ae72:	bf18      	it	ne
 801ae74:	2100      	movne	r1, #0
 801ae76:	3301      	adds	r3, #1
 801ae78:	b289      	uxth	r1, r1
 801ae7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ae7c:	e69e      	b.n	801abbc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801ae7e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801ae82:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801ae86:	1a2d      	subs	r5, r5, r0
 801ae88:	b2ad      	uxth	r5, r5
 801ae8a:	2d00      	cmp	r5, #0
 801ae8c:	bf18      	it	ne
 801ae8e:	2000      	movne	r0, #0
 801ae90:	e748      	b.n	801ad24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801ae92:	4b04      	ldr	r3, [pc, #16]	@ (801aea4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801ae94:	6818      	ldr	r0, [r3, #0]
 801ae96:	6803      	ldr	r3, [r0, #0]
 801ae98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ae9a:	4798      	blx	r3
 801ae9c:	b01d      	add	sp, #116	@ 0x74
 801ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aea2:	bf00      	nop
 801aea4:	240252fc 	.word	0x240252fc

0801aea8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801aea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeac:	b08f      	sub	sp, #60	@ 0x3c
 801aeae:	4616      	mov	r6, r2
 801aeb0:	4681      	mov	r9, r0
 801aeb2:	460d      	mov	r5, r1
 801aeb4:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801aeb8:	9205      	str	r2, [sp, #20]
 801aeba:	2a00      	cmp	r2, #0
 801aebc:	f000 82a8 	beq.w	801b410 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801aec0:	6830      	ldr	r0, [r6, #0]
 801aec2:	ac0a      	add	r4, sp, #40	@ 0x28
 801aec4:	6871      	ldr	r1, [r6, #4]
 801aec6:	c403      	stmia	r4!, {r0, r1}
 801aec8:	6818      	ldr	r0, [r3, #0]
 801aeca:	ac0c      	add	r4, sp, #48	@ 0x30
 801aecc:	6859      	ldr	r1, [r3, #4]
 801aece:	c403      	stmia	r4!, {r0, r1}
 801aed0:	a80a      	add	r0, sp, #40	@ 0x28
 801aed2:	f7f8 ffcb 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aed6:	4631      	mov	r1, r6
 801aed8:	a80c      	add	r0, sp, #48	@ 0x30
 801aeda:	f7f8 ffef 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aede:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801aee2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801aee6:	bfdb      	ittet	le
 801aee8:	b293      	uxthle	r3, r2
 801aeea:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801aeee:	2301      	movgt	r3, #1
 801aef0:	fb91 f3f3 	sdivle	r3, r1, r3
 801aef4:	9300      	str	r3, [sp, #0]
 801aef6:	f105 0308 	add.w	r3, r5, #8
 801aefa:	9900      	ldr	r1, [sp, #0]
 801aefc:	9306      	str	r3, [sp, #24]
 801aefe:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801af02:	440b      	add	r3, r1
 801af04:	3b01      	subs	r3, #1
 801af06:	fb93 f3f1 	sdiv	r3, r3, r1
 801af0a:	3b01      	subs	r3, #1
 801af0c:	9906      	ldr	r1, [sp, #24]
 801af0e:	b29b      	uxth	r3, r3
 801af10:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801af14:	9900      	ldr	r1, [sp, #0]
 801af16:	9307      	str	r3, [sp, #28]
 801af18:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801af1c:	fb93 f0f1 	sdiv	r0, r3, r1
 801af20:	b284      	uxth	r4, r0
 801af22:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801af26:	b280      	uxth	r0, r0
 801af28:	9402      	str	r4, [sp, #8]
 801af2a:	9d02      	ldr	r5, [sp, #8]
 801af2c:	9c00      	ldr	r4, [sp, #0]
 801af2e:	fb05 3514 	mls	r5, r5, r4, r3
 801af32:	fb15 f502 	smulbb	r5, r5, r2
 801af36:	440d      	add	r5, r1
 801af38:	b2ad      	uxth	r5, r5
 801af3a:	2800      	cmp	r0, #0
 801af3c:	d071      	beq.n	801b022 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801af3e:	1e42      	subs	r2, r0, #1
 801af40:	9806      	ldr	r0, [sp, #24]
 801af42:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801af46:	9a07      	ldr	r2, [sp, #28]
 801af48:	fa98 f888 	rev.w	r8, r8
 801af4c:	4490      	add	r8, r2
 801af4e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801af52:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801af56:	4411      	add	r1, r2
 801af58:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801af5c:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801b2a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801af60:	4413      	add	r3, r2
 801af62:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801af66:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801af6a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801af6e:	9301      	str	r3, [sp, #4]
 801af70:	4bcb      	ldr	r3, [pc, #812]	@ (801b2a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801af72:	6818      	ldr	r0, [r3, #0]
 801af74:	6803      	ldr	r3, [r0, #0]
 801af76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af78:	4798      	blx	r3
 801af7a:	4bca      	ldr	r3, [pc, #808]	@ (801b2a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801af7c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801af80:	881b      	ldrh	r3, [r3, #0]
 801af82:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801af86:	fb03 2707 	mla	r7, r3, r7, r2
 801af8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801af8e:	4363      	muls	r3, r4
 801af90:	2400      	movs	r4, #0
 801af92:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801af96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801af9a:	4621      	mov	r1, r4
 801af9c:	4407      	add	r7, r0
 801af9e:	18fb      	adds	r3, r7, r3
 801afa0:	9309      	str	r3, [sp, #36]	@ 0x24
 801afa2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801afa6:	fb95 f3f3 	sdiv	r3, r5, r3
 801afaa:	9304      	str	r3, [sp, #16]
 801afac:	f109 0304 	add.w	r3, r9, #4
 801afb0:	4618      	mov	r0, r3
 801afb2:	9308      	str	r3, [sp, #32]
 801afb4:	f008 fc28 	bl	8023808 <memset>
 801afb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801afba:	42bb      	cmp	r3, r7
 801afbc:	f240 8223 	bls.w	801b406 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801afc0:	2003      	movs	r0, #3
 801afc2:	f04f 0c07 	mov.w	ip, #7
 801afc6:	f04f 0e0b 	mov.w	lr, #11
 801afca:	2d00      	cmp	r5, #0
 801afcc:	f000 813c 	beq.w	801b248 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801afd0:	f898 3000 	ldrb.w	r3, [r8]
 801afd4:	b2db      	uxtb	r3, r3
 801afd6:	2bfe      	cmp	r3, #254	@ 0xfe
 801afd8:	d126      	bne.n	801b028 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801afda:	f898 1001 	ldrb.w	r1, [r8, #1]
 801afde:	f108 0604 	add.w	r6, r8, #4
 801afe2:	f898 2002 	ldrb.w	r2, [r8, #2]
 801afe6:	3d01      	subs	r5, #1
 801afe8:	b2c9      	uxtb	r1, r1
 801afea:	f898 8003 	ldrb.w	r8, [r8, #3]
 801afee:	b2d2      	uxtb	r2, r2
 801aff0:	f361 0407 	bfi	r4, r1, #0, #8
 801aff4:	fa5f f888 	uxtb.w	r8, r8
 801aff8:	b2ad      	uxth	r5, r5
 801affa:	f362 240f 	bfi	r4, r2, #8, #8
 801affe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b002:	fb10 2208 	smlabb	r2, r0, r8, r2
 801b006:	f368 4417 	bfi	r4, r8, #16, #8
 801b00a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801b00e:	0e23      	lsrs	r3, r4, #24
 801b010:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801b014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b018:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b01c:	605c      	str	r4, [r3, #4]
 801b01e:	46b0      	mov	r8, r6
 801b020:	e7d3      	b.n	801afca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801b022:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b026:	e792      	b.n	801af4e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801b028:	2bff      	cmp	r3, #255	@ 0xff
 801b02a:	d127      	bne.n	801b07c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801b02c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b030:	f108 0605 	add.w	r6, r8, #5
 801b034:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b038:	3d01      	subs	r5, #1
 801b03a:	b2d2      	uxtb	r2, r2
 801b03c:	f898 1003 	ldrb.w	r1, [r8, #3]
 801b040:	b2db      	uxtb	r3, r3
 801b042:	f898 8004 	ldrb.w	r8, [r8, #4]
 801b046:	f362 0407 	bfi	r4, r2, #0, #8
 801b04a:	b2c9      	uxtb	r1, r1
 801b04c:	fa5f f888 	uxtb.w	r8, r8
 801b050:	f363 240f 	bfi	r4, r3, #8, #8
 801b054:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b058:	b2ad      	uxth	r5, r5
 801b05a:	fb10 3301 	smlabb	r3, r0, r1, r3
 801b05e:	f361 4417 	bfi	r4, r1, #16, #8
 801b062:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801b066:	f368 641f 	bfi	r4, r8, #24, #8
 801b06a:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801b06e:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801b072:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801b076:	f8c8 4004 	str.w	r4, [r8, #4]
 801b07a:	e7d0      	b.n	801b01e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801b07c:	119a      	asrs	r2, r3, #6
 801b07e:	f108 0601 	add.w	r6, r8, #1
 801b082:	d107      	bne.n	801b094 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801b084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b088:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b08c:	685c      	ldr	r4, [r3, #4]
 801b08e:	3d01      	subs	r5, #1
 801b090:	b2ad      	uxth	r5, r5
 801b092:	e7c4      	b.n	801b01e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801b094:	2a01      	cmp	r2, #1
 801b096:	d129      	bne.n	801b0ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801b098:	f003 0203 	and.w	r2, r3, #3
 801b09c:	1ea1      	subs	r1, r4, #2
 801b09e:	4411      	add	r1, r2
 801b0a0:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801b0a4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b0a8:	b2c9      	uxtb	r1, r1
 801b0aa:	3a02      	subs	r2, #2
 801b0ac:	3b02      	subs	r3, #2
 801b0ae:	f361 0407 	bfi	r4, r1, #0, #8
 801b0b2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b0b6:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b0ba:	f362 240f 	bfi	r4, r2, #8, #8
 801b0be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b0c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801b0c6:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801b0ca:	fb10 2203 	smlabb	r2, r0, r3, r2
 801b0ce:	f363 4417 	bfi	r4, r3, #16, #8
 801b0d2:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801b0d6:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801b0da:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801b0de:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801b0e2:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801b0e6:	f8c8 4004 	str.w	r4, [r8, #4]
 801b0ea:	e7d0      	b.n	801b08e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801b0ec:	2a02      	cmp	r2, #2
 801b0ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b0f2:	d12e      	bne.n	801b152 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801b0f4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b0f8:	f1a3 0a20 	sub.w	sl, r3, #32
 801b0fc:	f108 0602 	add.w	r6, r8, #2
 801b100:	b2d2      	uxtb	r2, r2
 801b102:	f002 010f 	and.w	r1, r2, #15
 801b106:	1112      	asrs	r2, r2, #4
 801b108:	3908      	subs	r1, #8
 801b10a:	3a08      	subs	r2, #8
 801b10c:	4451      	add	r1, sl
 801b10e:	4492      	add	sl, r2
 801b110:	4421      	add	r1, r4
 801b112:	b2c9      	uxtb	r1, r1
 801b114:	f361 0407 	bfi	r4, r1, #0, #8
 801b118:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801b11c:	f1a8 0820 	sub.w	r8, r8, #32
 801b120:	4443      	add	r3, r8
 801b122:	b2db      	uxtb	r3, r3
 801b124:	f363 240f 	bfi	r4, r3, #8, #8
 801b128:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b12c:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801b130:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801b134:	fb10 330a 	smlabb	r3, r0, sl, r3
 801b138:	f36a 4417 	bfi	r4, sl, #16, #8
 801b13c:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801b140:	0e22      	lsrs	r2, r4, #24
 801b142:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801b146:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b14a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801b14e:	6054      	str	r4, [r2, #4]
 801b150:	e79d      	b.n	801b08e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801b152:	3301      	adds	r3, #1
 801b154:	42ab      	cmp	r3, r5
 801b156:	dd59      	ble.n	801b20c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801b158:	1b5d      	subs	r5, r3, r5
 801b15a:	2d00      	cmp	r5, #0
 801b15c:	dc58      	bgt.n	801b210 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801b15e:	f8dd a004 	ldr.w	sl, [sp, #4]
 801b162:	f04f 0800 	mov.w	r8, #0
 801b166:	f1ba 0f00 	cmp.w	sl, #0
 801b16a:	f340 8108 	ble.w	801b37e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801b16e:	1c73      	adds	r3, r6, #1
 801b170:	9303      	str	r3, [sp, #12]
 801b172:	7833      	ldrb	r3, [r6, #0]
 801b174:	b2db      	uxtb	r3, r3
 801b176:	2bfe      	cmp	r3, #254	@ 0xfe
 801b178:	d16a      	bne.n	801b250 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801b17a:	7871      	ldrb	r1, [r6, #1]
 801b17c:	1d33      	adds	r3, r6, #4
 801b17e:	78b2      	ldrb	r2, [r6, #2]
 801b180:	b2c9      	uxtb	r1, r1
 801b182:	78f0      	ldrb	r0, [r6, #3]
 801b184:	b2d2      	uxtb	r2, r2
 801b186:	9303      	str	r3, [sp, #12]
 801b188:	f361 0407 	bfi	r4, r1, #0, #8
 801b18c:	b2c0      	uxtb	r0, r0
 801b18e:	2303      	movs	r3, #3
 801b190:	f362 240f 	bfi	r4, r2, #8, #8
 801b194:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b198:	fb13 2200 	smlabb	r2, r3, r0, r2
 801b19c:	f360 4417 	bfi	r4, r0, #16, #8
 801b1a0:	2307      	movs	r3, #7
 801b1a2:	0e25      	lsrs	r5, r4, #24
 801b1a4:	fb13 2101 	smlabb	r1, r3, r1, r2
 801b1a8:	230b      	movs	r3, #11
 801b1aa:	fb13 1305 	smlabb	r3, r3, r5, r1
 801b1ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b1b2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b1b6:	605c      	str	r4, [r3, #4]
 801b1b8:	2501      	movs	r5, #1
 801b1ba:	462e      	mov	r6, r5
 801b1bc:	eb06 0308 	add.w	r3, r6, r8
 801b1c0:	ebaa 0a06 	sub.w	sl, sl, r6
 801b1c4:	1bad      	subs	r5, r5, r6
 801b1c6:	2b40      	cmp	r3, #64	@ 0x40
 801b1c8:	dd16      	ble.n	801b1f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801b1ca:	4658      	mov	r0, fp
 801b1cc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801b1d0:	f7e7 fe62 	bl	8002e98 <_ZN8touchgfx5paint9flushLineEPmi>
 801b1d4:	4659      	mov	r1, fp
 801b1d6:	9b05      	ldr	r3, [sp, #20]
 801b1d8:	4642      	mov	r2, r8
 801b1da:	4638      	mov	r0, r7
 801b1dc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b1e0:	f7e7 fec2 	bl	8002f68 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801b1e4:	4b30      	ldr	r3, [pc, #192]	@ (801b2a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801b1e6:	4447      	add	r7, r8
 801b1e8:	f04f 0800 	mov.w	r8, #0
 801b1ec:	459b      	cmp	fp, r3
 801b1ee:	bf0c      	ite	eq
 801b1f0:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801b2ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801b1f4:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801b2a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801b1f8:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801b1fc:	4633      	mov	r3, r6
 801b1fe:	3b01      	subs	r3, #1
 801b200:	f842 4b04 	str.w	r4, [r2], #4
 801b204:	d1fb      	bne.n	801b1fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801b206:	44b0      	add	r8, r6
 801b208:	9e03      	ldr	r6, [sp, #12]
 801b20a:	e7ac      	b.n	801b166 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801b20c:	1aed      	subs	r5, r5, r3
 801b20e:	e73f      	b.n	801b090 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801b210:	9b01      	ldr	r3, [sp, #4]
 801b212:	42ab      	cmp	r3, r5
 801b214:	bfa8      	it	ge
 801b216:	462b      	movge	r3, r5
 801b218:	4698      	mov	r8, r3
 801b21a:	9b01      	ldr	r3, [sp, #4]
 801b21c:	eba3 0a08 	sub.w	sl, r3, r8
 801b220:	0e23      	lsrs	r3, r4, #24
 801b222:	eba5 0508 	sub.w	r5, r5, r8
 801b226:	d00b      	beq.n	801b240 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801b228:	9a05      	ldr	r2, [sp, #20]
 801b22a:	4641      	mov	r1, r8
 801b22c:	4638      	mov	r0, r7
 801b22e:	4353      	muls	r3, r2
 801b230:	1c5a      	adds	r2, r3, #1
 801b232:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801b236:	4622      	mov	r2, r4
 801b238:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b23c:	f7e7 fe46 	bl	8002ecc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801b240:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b244:	4447      	add	r7, r8
 801b246:	e78c      	b.n	801b162 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801b248:	f8dd a004 	ldr.w	sl, [sp, #4]
 801b24c:	4646      	mov	r6, r8
 801b24e:	e788      	b.n	801b162 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801b250:	2bff      	cmp	r3, #255	@ 0xff
 801b252:	d11d      	bne.n	801b290 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801b254:	7870      	ldrb	r0, [r6, #1]
 801b256:	1d73      	adds	r3, r6, #5
 801b258:	78b2      	ldrb	r2, [r6, #2]
 801b25a:	b2c0      	uxtb	r0, r0
 801b25c:	78f5      	ldrb	r5, [r6, #3]
 801b25e:	b2d2      	uxtb	r2, r2
 801b260:	9303      	str	r3, [sp, #12]
 801b262:	f360 0407 	bfi	r4, r0, #0, #8
 801b266:	7933      	ldrb	r3, [r6, #4]
 801b268:	b2ed      	uxtb	r5, r5
 801b26a:	b2d9      	uxtb	r1, r3
 801b26c:	f362 240f 	bfi	r4, r2, #8, #8
 801b270:	2303      	movs	r3, #3
 801b272:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b276:	f365 4417 	bfi	r4, r5, #16, #8
 801b27a:	fb13 2205 	smlabb	r2, r3, r5, r2
 801b27e:	2307      	movs	r3, #7
 801b280:	f361 641f 	bfi	r4, r1, #24, #8
 801b284:	fb13 2000 	smlabb	r0, r3, r0, r2
 801b288:	230b      	movs	r3, #11
 801b28a:	fb13 0301 	smlabb	r3, r3, r1, r0
 801b28e:	e78e      	b.n	801b1ae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801b290:	119d      	asrs	r5, r3, #6
 801b292:	d10d      	bne.n	801b2b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801b294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b298:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b29c:	685c      	ldr	r4, [r3, #4]
 801b29e:	e78b      	b.n	801b1b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801b2a0:	240252fc 	.word	0x240252fc
 801b2a4:	240252f6 	.word	0x240252f6
 801b2a8:	24009740 	.word	0x24009740
 801b2ac:	24009840 	.word	0x24009840
 801b2b0:	2d01      	cmp	r5, #1
 801b2b2:	d12a      	bne.n	801b30a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801b2b4:	f003 0203 	and.w	r2, r3, #3
 801b2b8:	1ea1      	subs	r1, r4, #2
 801b2ba:	2603      	movs	r6, #3
 801b2bc:	4411      	add	r1, r2
 801b2be:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801b2c2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b2c6:	b2c9      	uxtb	r1, r1
 801b2c8:	3a02      	subs	r2, #2
 801b2ca:	3b02      	subs	r3, #2
 801b2cc:	f361 0407 	bfi	r4, r1, #0, #8
 801b2d0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b2d4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b2d8:	f362 240f 	bfi	r4, r2, #8, #8
 801b2dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b2e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801b2e4:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801b2e8:	fb16 2203 	smlabb	r2, r6, r3, r2
 801b2ec:	f363 4417 	bfi	r4, r3, #16, #8
 801b2f0:	2307      	movs	r3, #7
 801b2f2:	0e20      	lsrs	r0, r4, #24
 801b2f4:	fb13 2101 	smlabb	r1, r3, r1, r2
 801b2f8:	230b      	movs	r3, #11
 801b2fa:	fb13 1300 	smlabb	r3, r3, r0, r1
 801b2fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b302:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b306:	605c      	str	r4, [r3, #4]
 801b308:	e757      	b.n	801b1ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801b30a:	2d02      	cmp	r5, #2
 801b30c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b310:	d12f      	bne.n	801b372 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801b312:	1cb2      	adds	r2, r6, #2
 801b314:	f1a3 0020 	sub.w	r0, r3, #32
 801b318:	9203      	str	r2, [sp, #12]
 801b31a:	7872      	ldrb	r2, [r6, #1]
 801b31c:	b2d2      	uxtb	r2, r2
 801b31e:	f002 010f 	and.w	r1, r2, #15
 801b322:	1112      	asrs	r2, r2, #4
 801b324:	3908      	subs	r1, #8
 801b326:	3a08      	subs	r2, #8
 801b328:	4401      	add	r1, r0
 801b32a:	4402      	add	r2, r0
 801b32c:	4421      	add	r1, r4
 801b32e:	b2c9      	uxtb	r1, r1
 801b330:	f361 0407 	bfi	r4, r1, #0, #8
 801b334:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801b338:	3d20      	subs	r5, #32
 801b33a:	442b      	add	r3, r5
 801b33c:	2503      	movs	r5, #3
 801b33e:	b2db      	uxtb	r3, r3
 801b340:	f363 240f 	bfi	r4, r3, #8, #8
 801b344:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b348:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801b34c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b350:	fb15 3302 	smlabb	r3, r5, r2, r3
 801b354:	f362 4417 	bfi	r4, r2, #16, #8
 801b358:	2207      	movs	r2, #7
 801b35a:	0e20      	lsrs	r0, r4, #24
 801b35c:	fb12 3201 	smlabb	r2, r2, r1, r3
 801b360:	210b      	movs	r1, #11
 801b362:	fb11 2100 	smlabb	r1, r1, r0, r2
 801b366:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801b36a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801b36e:	604c      	str	r4, [r1, #4]
 801b370:	e722      	b.n	801b1b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801b372:	1c5d      	adds	r5, r3, #1
 801b374:	4656      	mov	r6, sl
 801b376:	45aa      	cmp	sl, r5
 801b378:	bfa8      	it	ge
 801b37a:	462e      	movge	r6, r5
 801b37c:	e71e      	b.n	801b1bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801b37e:	f1b8 0f00 	cmp.w	r8, #0
 801b382:	d00d      	beq.n	801b3a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801b384:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801b388:	4658      	mov	r0, fp
 801b38a:	f7e7 fd85 	bl	8002e98 <_ZN8touchgfx5paint9flushLineEPmi>
 801b38e:	4642      	mov	r2, r8
 801b390:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b394:	4638      	mov	r0, r7
 801b396:	9b05      	ldr	r3, [sp, #20]
 801b398:	4659      	mov	r1, fp
 801b39a:	4447      	add	r7, r8
 801b39c:	f7e7 fde4 	bl	8002f68 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801b3a0:	4b1d      	ldr	r3, [pc, #116]	@ (801b418 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801b3a2:	9a01      	ldr	r2, [sp, #4]
 801b3a4:	881b      	ldrh	r3, [r3, #0]
 801b3a6:	1a9b      	subs	r3, r3, r2
 801b3a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3ac:	441f      	add	r7, r3
 801b3ae:	9b04      	ldr	r3, [sp, #16]
 801b3b0:	3301      	adds	r3, #1
 801b3b2:	9304      	str	r3, [sp, #16]
 801b3b4:	9a04      	ldr	r2, [sp, #16]
 801b3b6:	9b00      	ldr	r3, [sp, #0]
 801b3b8:	4293      	cmp	r3, r2
 801b3ba:	d11d      	bne.n	801b3f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801b3bc:	9b02      	ldr	r3, [sp, #8]
 801b3be:	2400      	movs	r4, #0
 801b3c0:	9a02      	ldr	r2, [sp, #8]
 801b3c2:	f103 0801 	add.w	r8, r3, #1
 801b3c6:	9b06      	ldr	r3, [sp, #24]
 801b3c8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801b3cc:	4621      	mov	r1, r4
 801b3ce:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b3d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b3d6:	9b07      	ldr	r3, [sp, #28]
 801b3d8:	ba36      	rev	r6, r6
 801b3da:	9808      	ldr	r0, [sp, #32]
 801b3dc:	441e      	add	r6, r3
 801b3de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b3e2:	1aed      	subs	r5, r5, r3
 801b3e4:	f008 fa10 	bl	8023808 <memset>
 801b3e8:	f8cd 8008 	str.w	r8, [sp, #8]
 801b3ec:	b2ad      	uxth	r5, r5
 801b3ee:	9404      	str	r4, [sp, #16]
 801b3f0:	f7e7 fd48 	bl	8002e84 <_ZN8touchgfx5paint8tearDownEv>
 801b3f4:	46b0      	mov	r8, r6
 801b3f6:	e5df      	b.n	801afb8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801b3f8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b3fc:	9a01      	ldr	r2, [sp, #4]
 801b3fe:	1a9b      	subs	r3, r3, r2
 801b400:	1b5d      	subs	r5, r3, r5
 801b402:	b2ad      	uxth	r5, r5
 801b404:	e7f4      	b.n	801b3f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801b406:	4b05      	ldr	r3, [pc, #20]	@ (801b41c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801b408:	6818      	ldr	r0, [r3, #0]
 801b40a:	6803      	ldr	r3, [r0, #0]
 801b40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b40e:	4798      	blx	r3
 801b410:	b00f      	add	sp, #60	@ 0x3c
 801b412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b416:	bf00      	nop
 801b418:	240252f6 	.word	0x240252f6
 801b41c:	240252fc 	.word	0x240252fc

0801b420 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b424:	b093      	sub	sp, #76	@ 0x4c
 801b426:	460d      	mov	r5, r1
 801b428:	4616      	mov	r6, r2
 801b42a:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801b42e:	9000      	str	r0, [sp, #0]
 801b430:	f1bb 0f00 	cmp.w	fp, #0
 801b434:	f000 82ac 	beq.w	801b990 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801b438:	6810      	ldr	r0, [r2, #0]
 801b43a:	ac0e      	add	r4, sp, #56	@ 0x38
 801b43c:	6851      	ldr	r1, [r2, #4]
 801b43e:	c403      	stmia	r4!, {r0, r1}
 801b440:	6818      	ldr	r0, [r3, #0]
 801b442:	ac10      	add	r4, sp, #64	@ 0x40
 801b444:	6859      	ldr	r1, [r3, #4]
 801b446:	c403      	stmia	r4!, {r0, r1}
 801b448:	a80e      	add	r0, sp, #56	@ 0x38
 801b44a:	f7f8 fd0f 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b44e:	4631      	mov	r1, r6
 801b450:	a810      	add	r0, sp, #64	@ 0x40
 801b452:	f7f8 fd33 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b456:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801b45a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b45e:	bfdb      	ittet	le
 801b460:	b293      	uxthle	r3, r2
 801b462:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801b466:	2301      	movgt	r3, #1
 801b468:	fb91 f3f3 	sdivle	r3, r1, r3
 801b46c:	9301      	str	r3, [sp, #4]
 801b46e:	f105 0308 	add.w	r3, r5, #8
 801b472:	9901      	ldr	r1, [sp, #4]
 801b474:	9305      	str	r3, [sp, #20]
 801b476:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b47a:	440b      	add	r3, r1
 801b47c:	3b01      	subs	r3, #1
 801b47e:	fb93 f3f1 	sdiv	r3, r3, r1
 801b482:	3b01      	subs	r3, #1
 801b484:	9905      	ldr	r1, [sp, #20]
 801b486:	b29b      	uxth	r3, r3
 801b488:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b48c:	9901      	ldr	r1, [sp, #4]
 801b48e:	9306      	str	r3, [sp, #24]
 801b490:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801b494:	fb93 f0f1 	sdiv	r0, r3, r1
 801b498:	b284      	uxth	r4, r0
 801b49a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801b49e:	9403      	str	r4, [sp, #12]
 801b4a0:	9d03      	ldr	r5, [sp, #12]
 801b4a2:	9c01      	ldr	r4, [sp, #4]
 801b4a4:	fb05 3714 	mls	r7, r5, r4, r3
 801b4a8:	fb17 f702 	smulbb	r7, r7, r2
 801b4ac:	440f      	add	r7, r1
 801b4ae:	b2bf      	uxth	r7, r7
 801b4b0:	2d00      	cmp	r5, #0
 801b4b2:	d06b      	beq.n	801b58c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801b4b4:	1e6a      	subs	r2, r5, #1
 801b4b6:	9805      	ldr	r0, [sp, #20]
 801b4b8:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801b4bc:	9a06      	ldr	r2, [sp, #24]
 801b4be:	fa99 f989 	rev.w	r9, r9
 801b4c2:	4491      	add	r9, r2
 801b4c4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801b4c8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801b4cc:	4411      	add	r1, r2
 801b4ce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801b4d2:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801b830 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801b4d6:	4413      	add	r3, r2
 801b4d8:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b4dc:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b4e0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801b4e4:	9302      	str	r3, [sp, #8]
 801b4e6:	4bd0      	ldr	r3, [pc, #832]	@ (801b828 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801b4e8:	6818      	ldr	r0, [r3, #0]
 801b4ea:	6803      	ldr	r3, [r0, #0]
 801b4ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b4ee:	4798      	blx	r3
 801b4f0:	4bce      	ldr	r3, [pc, #824]	@ (801b82c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801b4f2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801b4f6:	881b      	ldrh	r3, [r3, #0]
 801b4f8:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801b4fc:	fb03 2404 	mla	r4, r3, r4, r2
 801b500:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b504:	436b      	muls	r3, r5
 801b506:	2500      	movs	r5, #0
 801b508:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b50c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b510:	4629      	mov	r1, r5
 801b512:	4404      	add	r4, r0
 801b514:	18e3      	adds	r3, r4, r3
 801b516:	930d      	str	r3, [sp, #52]	@ 0x34
 801b518:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801b51c:	fb97 f3f3 	sdiv	r3, r7, r3
 801b520:	9304      	str	r3, [sp, #16]
 801b522:	9b00      	ldr	r3, [sp, #0]
 801b524:	3304      	adds	r3, #4
 801b526:	4618      	mov	r0, r3
 801b528:	9309      	str	r3, [sp, #36]	@ 0x24
 801b52a:	f008 f96d 	bl	8023808 <memset>
 801b52e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b530:	42a3      	cmp	r3, r4
 801b532:	f240 8228 	bls.w	801b986 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801b536:	2003      	movs	r0, #3
 801b538:	2607      	movs	r6, #7
 801b53a:	2f00      	cmp	r7, #0
 801b53c:	f000 80cb 	beq.w	801b6d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801b540:	f899 3000 	ldrb.w	r3, [r9]
 801b544:	b2db      	uxtb	r3, r3
 801b546:	2bfe      	cmp	r3, #254	@ 0xfe
 801b548:	d123      	bne.n	801b592 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801b54a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801b54e:	3f01      	subs	r7, #1
 801b550:	f899 2002 	ldrb.w	r2, [r9, #2]
 801b554:	f109 0804 	add.w	r8, r9, #4
 801b558:	b2db      	uxtb	r3, r3
 801b55a:	f899 1003 	ldrb.w	r1, [r9, #3]
 801b55e:	b2d2      	uxtb	r2, r2
 801b560:	f363 0507 	bfi	r5, r3, #0, #8
 801b564:	b2c9      	uxtb	r1, r1
 801b566:	b2bf      	uxth	r7, r7
 801b568:	f362 250f 	bfi	r5, r2, #8, #8
 801b56c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b570:	fb10 2201 	smlabb	r2, r0, r1, r2
 801b574:	f361 4517 	bfi	r5, r1, #16, #8
 801b578:	fb16 2303 	smlabb	r3, r6, r3, r2
 801b57c:	9a00      	ldr	r2, [sp, #0]
 801b57e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b582:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b586:	605d      	str	r5, [r3, #4]
 801b588:	46c1      	mov	r9, r8
 801b58a:	e7d6      	b.n	801b53a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801b58c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801b590:	e798      	b.n	801b4c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801b592:	119a      	asrs	r2, r3, #6
 801b594:	f109 0801 	add.w	r8, r9, #1
 801b598:	d108      	bne.n	801b5ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801b59a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b59e:	9a00      	ldr	r2, [sp, #0]
 801b5a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b5a4:	685d      	ldr	r5, [r3, #4]
 801b5a6:	3f01      	subs	r7, #1
 801b5a8:	b2bf      	uxth	r7, r7
 801b5aa:	e7ed      	b.n	801b588 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801b5ac:	2a01      	cmp	r2, #1
 801b5ae:	d125      	bne.n	801b5fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801b5b0:	f003 0103 	and.w	r1, r3, #3
 801b5b4:	1eaa      	subs	r2, r5, #2
 801b5b6:	440a      	add	r2, r1
 801b5b8:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801b5bc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b5c0:	b2d2      	uxtb	r2, r2
 801b5c2:	3902      	subs	r1, #2
 801b5c4:	3b02      	subs	r3, #2
 801b5c6:	f362 0507 	bfi	r5, r2, #0, #8
 801b5ca:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801b5ce:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801b5d2:	f361 250f 	bfi	r5, r1, #8, #8
 801b5d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801b5da:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801b5de:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801b5e2:	fb10 1103 	smlabb	r1, r0, r3, r1
 801b5e6:	f363 4517 	bfi	r5, r3, #16, #8
 801b5ea:	9b00      	ldr	r3, [sp, #0]
 801b5ec:	fb16 1202 	smlabb	r2, r6, r2, r1
 801b5f0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b5f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801b5f8:	6055      	str	r5, [r2, #4]
 801b5fa:	e7d4      	b.n	801b5a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801b5fc:	2a02      	cmp	r2, #2
 801b5fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b602:	d12c      	bne.n	801b65e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801b604:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b608:	f1a3 0c20 	sub.w	ip, r3, #32
 801b60c:	f109 0802 	add.w	r8, r9, #2
 801b610:	b2d2      	uxtb	r2, r2
 801b612:	f002 010f 	and.w	r1, r2, #15
 801b616:	1112      	asrs	r2, r2, #4
 801b618:	3908      	subs	r1, #8
 801b61a:	3a08      	subs	r2, #8
 801b61c:	4461      	add	r1, ip
 801b61e:	4494      	add	ip, r2
 801b620:	4429      	add	r1, r5
 801b622:	b2c9      	uxtb	r1, r1
 801b624:	f361 0507 	bfi	r5, r1, #0, #8
 801b628:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801b62c:	f1ae 0e20 	sub.w	lr, lr, #32
 801b630:	4473      	add	r3, lr
 801b632:	b2db      	uxtb	r3, r3
 801b634:	f363 250f 	bfi	r5, r3, #8, #8
 801b638:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b63c:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801b640:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801b644:	fb10 330c 	smlabb	r3, r0, ip, r3
 801b648:	f36c 4517 	bfi	r5, ip, #16, #8
 801b64c:	fb16 3101 	smlabb	r1, r6, r1, r3
 801b650:	9b00      	ldr	r3, [sp, #0]
 801b652:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801b656:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801b65a:	604d      	str	r5, [r1, #4]
 801b65c:	e7a3      	b.n	801b5a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801b65e:	3301      	adds	r3, #1
 801b660:	42bb      	cmp	r3, r7
 801b662:	dd23      	ble.n	801b6ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801b664:	eba3 0907 	sub.w	r9, r3, r7
 801b668:	f1b9 0f00 	cmp.w	r9, #0
 801b66c:	dc20      	bgt.n	801b6b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801b66e:	9e02      	ldr	r6, [sp, #8]
 801b670:	2700      	movs	r7, #0
 801b672:	2e00      	cmp	r6, #0
 801b674:	f340 8142 	ble.w	801b8fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801b678:	f108 0301 	add.w	r3, r8, #1
 801b67c:	9307      	str	r3, [sp, #28]
 801b67e:	f898 3000 	ldrb.w	r3, [r8]
 801b682:	b2db      	uxtb	r3, r3
 801b684:	119a      	asrs	r2, r3, #6
 801b686:	d12a      	bne.n	801b6de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801b688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b68c:	9a00      	ldr	r2, [sp, #0]
 801b68e:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b692:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b696:	685d      	ldr	r5, [r3, #4]
 801b698:	f040 811f 	bne.w	801b8da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b69c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b6a0:	7025      	strb	r5, [r4, #0]
 801b6a2:	7063      	strb	r3, [r4, #1]
 801b6a4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b6a8:	70a3      	strb	r3, [r4, #2]
 801b6aa:	e04e      	b.n	801b74a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b6ac:	1aff      	subs	r7, r7, r3
 801b6ae:	e77b      	b.n	801b5a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801b6b0:	9b02      	ldr	r3, [sp, #8]
 801b6b2:	4620      	mov	r0, r4
 801b6b4:	462a      	mov	r2, r5
 801b6b6:	454b      	cmp	r3, r9
 801b6b8:	bfa8      	it	ge
 801b6ba:	464b      	movge	r3, r9
 801b6bc:	461f      	mov	r7, r3
 801b6be:	9b02      	ldr	r3, [sp, #8]
 801b6c0:	4639      	mov	r1, r7
 801b6c2:	1bde      	subs	r6, r3, r7
 801b6c4:	eba9 0907 	sub.w	r9, r9, r7
 801b6c8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b6cc:	465b      	mov	r3, fp
 801b6ce:	f7e7 fbfd 	bl	8002ecc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801b6d2:	443c      	add	r4, r7
 801b6d4:	e7cc      	b.n	801b670 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801b6d6:	46c8      	mov	r8, r9
 801b6d8:	9e02      	ldr	r6, [sp, #8]
 801b6da:	46b9      	mov	r9, r7
 801b6dc:	e7c8      	b.n	801b670 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801b6de:	2a01      	cmp	r2, #1
 801b6e0:	d136      	bne.n	801b750 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801b6e2:	f003 0103 	and.w	r1, r3, #3
 801b6e6:	1ea8      	subs	r0, r5, #2
 801b6e8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b6ec:	4408      	add	r0, r1
 801b6ee:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801b6f2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b6f6:	b2c0      	uxtb	r0, r0
 801b6f8:	f1a1 0102 	sub.w	r1, r1, #2
 801b6fc:	f1a3 0302 	sub.w	r3, r3, #2
 801b700:	f360 0507 	bfi	r5, r0, #0, #8
 801b704:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801b708:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801b70c:	f361 250f 	bfi	r5, r1, #8, #8
 801b710:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801b714:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801b718:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801b71c:	f04f 0303 	mov.w	r3, #3
 801b720:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801b724:	f04f 0c07 	mov.w	ip, #7
 801b728:	9b00      	ldr	r3, [sp, #0]
 801b72a:	f368 4517 	bfi	r5, r8, #16, #8
 801b72e:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801b732:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801b736:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801b73a:	f8cc 5004 	str.w	r5, [ip, #4]
 801b73e:	f040 80cd 	bne.w	801b8dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801b742:	7020      	strb	r0, [r4, #0]
 801b744:	7061      	strb	r1, [r4, #1]
 801b746:	f884 8002 	strb.w	r8, [r4, #2]
 801b74a:	3e01      	subs	r6, #1
 801b74c:	3403      	adds	r4, #3
 801b74e:	e0c1      	b.n	801b8d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801b750:	2a02      	cmp	r2, #2
 801b752:	d13d      	bne.n	801b7d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801b754:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b75c:	f108 0202 	add.w	r2, r8, #2
 801b760:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b764:	b2c9      	uxtb	r1, r1
 801b766:	f1a3 0c20 	sub.w	ip, r3, #32
 801b76a:	9207      	str	r2, [sp, #28]
 801b76c:	f001 000f 	and.w	r0, r1, #15
 801b770:	f1a0 0008 	sub.w	r0, r0, #8
 801b774:	4460      	add	r0, ip
 801b776:	4428      	add	r0, r5
 801b778:	b2c0      	uxtb	r0, r0
 801b77a:	f360 0507 	bfi	r5, r0, #0, #8
 801b77e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801b782:	f1a2 0220 	sub.w	r2, r2, #32
 801b786:	4413      	add	r3, r2
 801b788:	ea4f 1221 	mov.w	r2, r1, asr #4
 801b78c:	b2db      	uxtb	r3, r3
 801b78e:	f1a2 0208 	sub.w	r2, r2, #8
 801b792:	f363 250f 	bfi	r5, r3, #8, #8
 801b796:	4462      	add	r2, ip
 801b798:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801b79c:	f04f 0c03 	mov.w	ip, #3
 801b7a0:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801b7a4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b7a8:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801b7ac:	f04f 0107 	mov.w	r1, #7
 801b7b0:	f362 4517 	bfi	r5, r2, #16, #8
 801b7b4:	fb11 c100 	smlabb	r1, r1, r0, ip
 801b7b8:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801b7bc:	9900      	ldr	r1, [sp, #0]
 801b7be:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801b7c2:	604d      	str	r5, [r1, #4]
 801b7c4:	f040 8089 	bne.w	801b8da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b7c8:	7020      	strb	r0, [r4, #0]
 801b7ca:	7063      	strb	r3, [r4, #1]
 801b7cc:	70a2      	strb	r2, [r4, #2]
 801b7ce:	e7bc      	b.n	801b74a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b7d0:	2bfe      	cmp	r3, #254	@ 0xfe
 801b7d2:	d12f      	bne.n	801b834 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801b7d4:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b7d8:	f108 0304 	add.w	r3, r8, #4
 801b7dc:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b7e0:	f04f 0c03 	mov.w	ip, #3
 801b7e4:	f898 1003 	ldrb.w	r1, [r8, #3]
 801b7e8:	b2c0      	uxtb	r0, r0
 801b7ea:	b2d2      	uxtb	r2, r2
 801b7ec:	9307      	str	r3, [sp, #28]
 801b7ee:	b2c9      	uxtb	r1, r1
 801b7f0:	f360 0507 	bfi	r5, r0, #0, #8
 801b7f4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801b7f8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b7fc:	f362 250f 	bfi	r5, r2, #8, #8
 801b800:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801b804:	f04f 0307 	mov.w	r3, #7
 801b808:	f361 4517 	bfi	r5, r1, #16, #8
 801b80c:	fb13 c300 	smlabb	r3, r3, r0, ip
 801b810:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801b814:	9b00      	ldr	r3, [sp, #0]
 801b816:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801b81a:	605d      	str	r5, [r3, #4]
 801b81c:	d15d      	bne.n	801b8da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b81e:	7020      	strb	r0, [r4, #0]
 801b820:	7062      	strb	r2, [r4, #1]
 801b822:	70a1      	strb	r1, [r4, #2]
 801b824:	e791      	b.n	801b74a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b826:	bf00      	nop
 801b828:	240252fc 	.word	0x240252fc
 801b82c:	240252f6 	.word	0x240252f6
 801b830:	24009740 	.word	0x24009740
 801b834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b838:	1c5a      	adds	r2, r3, #1
 801b83a:	b94b      	cbnz	r3, 801b850 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801b83c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b840:	d14c      	bne.n	801b8dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801b842:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801b846:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b84a:	7025      	strb	r5, [r4, #0]
 801b84c:	7062      	strb	r2, [r4, #1]
 801b84e:	e72b      	b.n	801b6a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801b850:	4296      	cmp	r6, r2
 801b852:	46b0      	mov	r8, r6
 801b854:	bfa8      	it	ge
 801b856:	4690      	movge	r8, r2
 801b858:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b85c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b860:	eba6 0608 	sub.w	r6, r6, r8
 801b864:	eba2 0908 	sub.w	r9, r2, r8
 801b868:	9308      	str	r3, [sp, #32]
 801b86a:	b2eb      	uxtb	r3, r5
 801b86c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b86e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b872:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b874:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b878:	930a      	str	r3, [sp, #40]	@ 0x28
 801b87a:	9b08      	ldr	r3, [sp, #32]
 801b87c:	d030      	beq.n	801b8e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801b87e:	18fb      	adds	r3, r7, r3
 801b880:	2bc0      	cmp	r3, #192	@ 0xc0
 801b882:	dd15      	ble.n	801b8b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801b884:	4650      	mov	r0, sl
 801b886:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801b88a:	f7e7 fb05 	bl	8002e98 <_ZN8touchgfx5paint9flushLineEPmi>
 801b88e:	2203      	movs	r2, #3
 801b890:	4651      	mov	r1, sl
 801b892:	465b      	mov	r3, fp
 801b894:	4620      	mov	r0, r4
 801b896:	443c      	add	r4, r7
 801b898:	fb97 f2f2 	sdiv	r2, r7, r2
 801b89c:	f7e7 fb40 	bl	8002f20 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801b8a0:	4b3d      	ldr	r3, [pc, #244]	@ (801b998 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801b8a2:	2700      	movs	r7, #0
 801b8a4:	459a      	cmp	sl, r3
 801b8a6:	bf0c      	ite	eq
 801b8a8:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801b9a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801b8ac:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801b998 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801b8b0:	eb0a 0307 	add.w	r3, sl, r7
 801b8b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b8b6:	f1b8 0801 	subs.w	r8, r8, #1
 801b8ba:	f103 0303 	add.w	r3, r3, #3
 801b8be:	f803 2c03 	strb.w	r2, [r3, #-3]
 801b8c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b8c4:	f803 2c02 	strb.w	r2, [r3, #-2]
 801b8c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b8ca:	f803 2c01 	strb.w	r2, [r3, #-1]
 801b8ce:	d1f1      	bne.n	801b8b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801b8d0:	9b08      	ldr	r3, [sp, #32]
 801b8d2:	441f      	add	r7, r3
 801b8d4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b8d8:	e6cb      	b.n	801b672 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801b8da:	2201      	movs	r2, #1
 801b8dc:	4690      	mov	r8, r2
 801b8de:	e7bb      	b.n	801b858 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801b8e0:	4423      	add	r3, r4
 801b8e2:	42a3      	cmp	r3, r4
 801b8e4:	d9f6      	bls.n	801b8d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801b8e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b8e8:	3403      	adds	r4, #3
 801b8ea:	f804 2c03 	strb.w	r2, [r4, #-3]
 801b8ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b8f0:	f804 2c02 	strb.w	r2, [r4, #-2]
 801b8f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b8f6:	f804 2c01 	strb.w	r2, [r4, #-1]
 801b8fa:	e7f2      	b.n	801b8e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801b8fc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b900:	d00e      	beq.n	801b920 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801b902:	b16f      	cbz	r7, 801b920 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801b904:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801b908:	4650      	mov	r0, sl
 801b90a:	f7e7 fac5 	bl	8002e98 <_ZN8touchgfx5paint9flushLineEPmi>
 801b90e:	2203      	movs	r2, #3
 801b910:	4620      	mov	r0, r4
 801b912:	443c      	add	r4, r7
 801b914:	465b      	mov	r3, fp
 801b916:	4651      	mov	r1, sl
 801b918:	fb97 f2f2 	sdiv	r2, r7, r2
 801b91c:	f7e7 fb00 	bl	8002f20 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801b920:	4b1e      	ldr	r3, [pc, #120]	@ (801b99c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801b922:	9a02      	ldr	r2, [sp, #8]
 801b924:	881b      	ldrh	r3, [r3, #0]
 801b926:	1a9b      	subs	r3, r3, r2
 801b928:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b92c:	441c      	add	r4, r3
 801b92e:	9b04      	ldr	r3, [sp, #16]
 801b930:	3301      	adds	r3, #1
 801b932:	9304      	str	r3, [sp, #16]
 801b934:	9a04      	ldr	r2, [sp, #16]
 801b936:	9b01      	ldr	r3, [sp, #4]
 801b938:	4293      	cmp	r3, r2
 801b93a:	d11c      	bne.n	801b976 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801b93c:	9b03      	ldr	r3, [sp, #12]
 801b93e:	2500      	movs	r5, #0
 801b940:	9a03      	ldr	r2, [sp, #12]
 801b942:	1c5e      	adds	r6, r3, #1
 801b944:	9b05      	ldr	r3, [sp, #20]
 801b946:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801b94a:	4629      	mov	r1, r5
 801b94c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801b950:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b954:	9b06      	ldr	r3, [sp, #24]
 801b956:	fa98 f888 	rev.w	r8, r8
 801b95a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b95c:	4498      	add	r8, r3
 801b95e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b962:	1aff      	subs	r7, r7, r3
 801b964:	f007 ff50 	bl	8023808 <memset>
 801b968:	b2bf      	uxth	r7, r7
 801b96a:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801b96e:	f7e7 fa89 	bl	8002e84 <_ZN8touchgfx5paint8tearDownEv>
 801b972:	46c1      	mov	r9, r8
 801b974:	e5db      	b.n	801b52e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801b976:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801b97a:	9b02      	ldr	r3, [sp, #8]
 801b97c:	1aff      	subs	r7, r7, r3
 801b97e:	eba7 0709 	sub.w	r7, r7, r9
 801b982:	b2bf      	uxth	r7, r7
 801b984:	e7f3      	b.n	801b96e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801b986:	4b06      	ldr	r3, [pc, #24]	@ (801b9a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801b988:	6818      	ldr	r0, [r3, #0]
 801b98a:	6803      	ldr	r3, [r0, #0]
 801b98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b98e:	4798      	blx	r3
 801b990:	b013      	add	sp, #76	@ 0x4c
 801b992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b996:	bf00      	nop
 801b998:	24009740 	.word	0x24009740
 801b99c:	240252f6 	.word	0x240252f6
 801b9a0:	240252fc 	.word	0x240252fc
 801b9a4:	24009840 	.word	0x24009840

0801b9a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801b9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9ac:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801b9b0:	9c06      	ldr	r4, [sp, #24]
 801b9b2:	2800      	cmp	r0, #0
 801b9b4:	d06e      	beq.n	801ba94 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b9b6:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801b9ba:	2d00      	cmp	r5, #0
 801b9bc:	dd6a      	ble.n	801ba94 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b9be:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801b9c2:	f1bc 0f00 	cmp.w	ip, #0
 801b9c6:	dd65      	ble.n	801ba94 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b9c8:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801b9cc:	28ff      	cmp	r0, #255	@ 0xff
 801b9ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b9d2:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801b9d6:	fb02 3306 	mla	r3, r2, r6, r3
 801b9da:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801b9de:	b2e4      	uxtb	r4, r4
 801b9e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9e4:	4419      	add	r1, r3
 801b9e6:	fb02 f30c 	mul.w	r3, r2, ip
 801b9ea:	eba2 0205 	sub.w	r2, r2, r5
 801b9ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b9f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b9fa:	440b      	add	r3, r1
 801b9fc:	d03e      	beq.n	801ba7c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801b9fe:	fa1f fc80 	uxth.w	ip, r0
 801ba02:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801ba06:	fb06 f60c 	mul.w	r6, r6, ip
 801ba0a:	b280      	uxth	r0, r0
 801ba0c:	fb07 f70c 	mul.w	r7, r7, ip
 801ba10:	fb04 f40c 	mul.w	r4, r4, ip
 801ba14:	4299      	cmp	r1, r3
 801ba16:	d23d      	bcs.n	801ba94 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ba18:	eb01 0c05 	add.w	ip, r1, r5
 801ba1c:	458c      	cmp	ip, r1
 801ba1e:	f101 0e03 	add.w	lr, r1, #3
 801ba22:	d928      	bls.n	801ba76 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801ba24:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801ba28:	fb11 f100 	smulbb	r1, r1, r0
 801ba2c:	4421      	add	r1, r4
 801ba2e:	b289      	uxth	r1, r1
 801ba30:	f101 0801 	add.w	r8, r1, #1
 801ba34:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ba38:	1209      	asrs	r1, r1, #8
 801ba3a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801ba3e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801ba42:	fb11 f100 	smulbb	r1, r1, r0
 801ba46:	4439      	add	r1, r7
 801ba48:	b289      	uxth	r1, r1
 801ba4a:	f101 0801 	add.w	r8, r1, #1
 801ba4e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ba52:	1209      	asrs	r1, r1, #8
 801ba54:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801ba58:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801ba5c:	fb11 f100 	smulbb	r1, r1, r0
 801ba60:	4431      	add	r1, r6
 801ba62:	b289      	uxth	r1, r1
 801ba64:	f101 0801 	add.w	r8, r1, #1
 801ba68:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ba6c:	1209      	asrs	r1, r1, #8
 801ba6e:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801ba72:	4671      	mov	r1, lr
 801ba74:	e7d2      	b.n	801ba1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801ba76:	4411      	add	r1, r2
 801ba78:	e7cc      	b.n	801ba14 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801ba7a:	4411      	add	r1, r2
 801ba7c:	4299      	cmp	r1, r3
 801ba7e:	d209      	bcs.n	801ba94 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ba80:	1948      	adds	r0, r1, r5
 801ba82:	4281      	cmp	r1, r0
 801ba84:	d2f9      	bcs.n	801ba7a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801ba86:	700c      	strb	r4, [r1, #0]
 801ba88:	3103      	adds	r1, #3
 801ba8a:	f801 7c02 	strb.w	r7, [r1, #-2]
 801ba8e:	f801 6c01 	strb.w	r6, [r1, #-1]
 801ba92:	e7f6      	b.n	801ba82 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801ba94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ba98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba9c:	b093      	sub	sp, #76	@ 0x4c
 801ba9e:	4699      	mov	r9, r3
 801baa0:	4617      	mov	r7, r2
 801baa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801baa6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801baaa:	4604      	mov	r4, r0
 801baac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bab0:	a80c      	add	r0, sp, #48	@ 0x30
 801bab2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801bab6:	460d      	mov	r5, r1
 801bab8:	4649      	mov	r1, r9
 801baba:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801babe:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801bac2:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801bac6:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801baca:	f7f2 fcdd 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 801bace:	4639      	mov	r1, r7
 801bad0:	a80c      	add	r0, sp, #48	@ 0x30
 801bad2:	f7f2 fcd9 	bl	800e488 <_ZN8touchgfx4RectaNERKS0_>
 801bad6:	4b78      	ldr	r3, [pc, #480]	@ (801bcb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801bad8:	8818      	ldrh	r0, [r3, #0]
 801bada:	4b78      	ldr	r3, [pc, #480]	@ (801bcbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801badc:	b202      	sxth	r2, r0
 801bade:	8819      	ldrh	r1, [r3, #0]
 801bae0:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801bae4:	b20f      	sxth	r7, r1
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	da07      	bge.n	801bafa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801baea:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801baee:	4463      	add	r3, ip
 801baf0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801baf4:	2300      	movs	r3, #0
 801baf6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801bafa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801bafe:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801bb02:	1ad2      	subs	r2, r2, r3
 801bb04:	4594      	cmp	ip, r2
 801bb06:	bfc4      	itt	gt
 801bb08:	1ac2      	subgt	r2, r0, r3
 801bb0a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801bb0e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801bb12:	2a00      	cmp	r2, #0
 801bb14:	da07      	bge.n	801bb26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801bb16:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801bb1a:	4462      	add	r2, ip
 801bb1c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801bb20:	2200      	movs	r2, #0
 801bb22:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801bb26:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801bb2a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801bb2e:	1abf      	subs	r7, r7, r2
 801bb30:	45bc      	cmp	ip, r7
 801bb32:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801bcc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801bb36:	bfc8      	it	gt
 801bb38:	1a8f      	subgt	r7, r1, r2
 801bb3a:	f89c c000 	ldrb.w	ip, [ip]
 801bb3e:	bfc8      	it	gt
 801bb40:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801bb44:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801bb48:	f1bc 0f00 	cmp.w	ip, #0
 801bb4c:	d176      	bne.n	801bc3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801bb4e:	4287      	cmp	r7, r0
 801bb50:	bf14      	ite	ne
 801bb52:	2100      	movne	r1, #0
 801bb54:	2101      	moveq	r1, #1
 801bb56:	2f00      	cmp	r7, #0
 801bb58:	9107      	str	r1, [sp, #28]
 801bb5a:	dd73      	ble.n	801bc44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801bb5c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801bb60:	2900      	cmp	r1, #0
 801bb62:	9104      	str	r1, [sp, #16]
 801bb64:	dd6e      	ble.n	801bc44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801bb66:	f8b9 1000 	ldrh.w	r1, [r9]
 801bb6a:	a80e      	add	r0, sp, #56	@ 0x38
 801bb6c:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801bb70:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801bb74:	1a5b      	subs	r3, r3, r1
 801bb76:	a910      	add	r1, sp, #64	@ 0x40
 801bb78:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801bb7c:	b21b      	sxth	r3, r3
 801bb7e:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801bb82:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801bcc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801bb86:	9305      	str	r3, [sp, #20]
 801bb88:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801bb8c:	1ad2      	subs	r2, r2, r3
 801bb8e:	b213      	sxth	r3, r2
 801bb90:	9306      	str	r3, [sp, #24]
 801bb92:	9b05      	ldr	r3, [sp, #20]
 801bb94:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801bb98:	9b06      	ldr	r3, [sp, #24]
 801bb9a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801bb9e:	9b04      	ldr	r3, [sp, #16]
 801bba0:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801bba4:	2300      	movs	r3, #0
 801bba6:	9310      	str	r3, [sp, #64]	@ 0x40
 801bba8:	f7f8 f988 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bbac:	4640      	mov	r0, r8
 801bbae:	f7f8 f95d 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bbb2:	a810      	add	r0, sp, #64	@ 0x40
 801bbb4:	f7f8 f95a 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bbb8:	4b41      	ldr	r3, [pc, #260]	@ (801bcc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801bbba:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801bbbe:	4628      	mov	r0, r5
 801bbc0:	881b      	ldrh	r3, [r3, #0]
 801bbc2:	9308      	str	r3, [sp, #32]
 801bbc4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801bbc8:	b21b      	sxth	r3, r3
 801bbca:	9303      	str	r3, [sp, #12]
 801bbcc:	682b      	ldr	r3, [r5, #0]
 801bbce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bbd0:	4798      	blx	r3
 801bbd2:	9a03      	ldr	r2, [sp, #12]
 801bbd4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801bbd8:	4681      	mov	r9, r0
 801bbda:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801bbde:	fb13 f302 	smulbb	r3, r3, r2
 801bbe2:	2203      	movs	r2, #3
 801bbe4:	f8da 0000 	ldr.w	r0, [sl]
 801bbe8:	fb15 3302 	smlabb	r3, r5, r2, r3
 801bbec:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801bbee:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bbf0:	441d      	add	r5, r3
 801bbf2:	6803      	ldr	r3, [r0, #0]
 801bbf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bbf6:	4798      	blx	r3
 801bbf8:	9009      	str	r0, [sp, #36]	@ 0x24
 801bbfa:	f8da 0000 	ldr.w	r0, [sl]
 801bbfe:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801bc02:	6803      	ldr	r3, [r0, #0]
 801bc04:	910a      	str	r1, [sp, #40]	@ 0x28
 801bc06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bc08:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801bc0c:	4798      	blx	r3
 801bc0e:	f010 0f01 	tst.w	r0, #1
 801bc12:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801bc16:	d01e      	beq.n	801bc56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801bc18:	f8da 0000 	ldr.w	r0, [sl]
 801bc1c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801bc20:	6803      	ldr	r3, [r0, #0]
 801bc22:	9200      	str	r2, [sp, #0]
 801bc24:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801bc26:	462b      	mov	r3, r5
 801bc28:	e898 0006 	ldmia.w	r8, {r1, r2}
 801bc2c:	47b0      	blx	r6
 801bc2e:	9b05      	ldr	r3, [sp, #20]
 801bc30:	80a7      	strh	r7, [r4, #4]
 801bc32:	8023      	strh	r3, [r4, #0]
 801bc34:	9b06      	ldr	r3, [sp, #24]
 801bc36:	8063      	strh	r3, [r4, #2]
 801bc38:	9b04      	ldr	r3, [sp, #16]
 801bc3a:	e007      	b.n	801bc4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801bc3c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801bc40:	4288      	cmp	r0, r1
 801bc42:	e785      	b.n	801bb50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801bc44:	2300      	movs	r3, #0
 801bc46:	8023      	strh	r3, [r4, #0]
 801bc48:	8063      	strh	r3, [r4, #2]
 801bc4a:	80a3      	strh	r3, [r4, #4]
 801bc4c:	4620      	mov	r0, r4
 801bc4e:	80e3      	strh	r3, [r4, #6]
 801bc50:	b013      	add	sp, #76	@ 0x4c
 801bc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc56:	fb09 f606 	mul.w	r6, r9, r6
 801bc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc5c:	fb11 6602 	smlabb	r6, r1, r2, r6
 801bc60:	9a07      	ldr	r2, [sp, #28]
 801bc62:	4433      	add	r3, r6
 801bc64:	461e      	mov	r6, r3
 801bc66:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801bc6a:	b16a      	cbz	r2, 801bc88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801bc6c:	9a08      	ldr	r2, [sp, #32]
 801bc6e:	4593      	cmp	fp, r2
 801bc70:	d10a      	bne.n	801bc88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801bc72:	f8da 0000 	ldr.w	r0, [sl]
 801bc76:	fb09 f303 	mul.w	r3, r9, r3
 801bc7a:	4629      	mov	r1, r5
 801bc7c:	6802      	ldr	r2, [r0, #0]
 801bc7e:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801bc82:	4632      	mov	r2, r6
 801bc84:	47d0      	blx	sl
 801bc86:	e7d2      	b.n	801bc2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801bc88:	9a03      	ldr	r2, [sp, #12]
 801bc8a:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801bcc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801bc8e:	fb02 5803 	mla	r8, r2, r3, r5
 801bc92:	4545      	cmp	r5, r8
 801bc94:	d2cb      	bcs.n	801bc2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801bc96:	f8db 0000 	ldr.w	r0, [fp]
 801bc9a:	4629      	mov	r1, r5
 801bc9c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801bca0:	6802      	ldr	r2, [r0, #0]
 801bca2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bca6:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801bcaa:	4632      	mov	r2, r6
 801bcac:	47d0      	blx	sl
 801bcae:	9b03      	ldr	r3, [sp, #12]
 801bcb0:	444e      	add	r6, r9
 801bcb2:	441d      	add	r5, r3
 801bcb4:	e7ed      	b.n	801bc92 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801bcb6:	bf00      	nop
 801bcb8:	240252f0 	.word	0x240252f0
 801bcbc:	240252f2 	.word	0x240252f2
 801bcc0:	240252f6 	.word	0x240252f6
 801bcc4:	240252f4 	.word	0x240252f4
 801bcc8:	240252fc 	.word	0x240252fc

0801bccc <_ZN8touchgfx8LCD24bppC1Ev>:
 801bccc:	2200      	movs	r2, #0
 801bcce:	490e      	ldr	r1, [pc, #56]	@ (801bd08 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801bcd0:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801bcd4:	6001      	str	r1, [r0, #0]
 801bcd6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801bcda:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801bcde:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801bce2:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801bce6:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801bcea:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801bcee:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801bcf2:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801bcf6:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801bcfa:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801bcfe:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801bd02:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801bd06:	4770      	bx	lr
 801bd08:	08027bb8 	.word	0x08027bb8

0801bd0c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801bd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd10:	b091      	sub	sp, #68	@ 0x44
 801bd12:	4607      	mov	r7, r0
 801bd14:	4688      	mov	r8, r1
 801bd16:	6810      	ldr	r0, [r2, #0]
 801bd18:	6851      	ldr	r1, [r2, #4]
 801bd1a:	ac0c      	add	r4, sp, #48	@ 0x30
 801bd1c:	4616      	mov	r6, r2
 801bd1e:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801bd22:	4d64      	ldr	r5, [pc, #400]	@ (801beb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801bd24:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801beb8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801bd28:	c403      	stmia	r4!, {r0, r1}
 801bd2a:	6818      	ldr	r0, [r3, #0]
 801bd2c:	ac0e      	add	r4, sp, #56	@ 0x38
 801bd2e:	6859      	ldr	r1, [r3, #4]
 801bd30:	c403      	stmia	r4!, {r0, r1}
 801bd32:	a80c      	add	r0, sp, #48	@ 0x30
 801bd34:	f7f8 f89a 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd38:	4631      	mov	r1, r6
 801bd3a:	a80e      	add	r0, sp, #56	@ 0x38
 801bd3c:	f7f8 f8be 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bd40:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801bd44:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801bd48:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801bd4c:	6828      	ldr	r0, [r5, #0]
 801bd4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bd52:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801bd56:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801bd5a:	440f      	add	r7, r1
 801bd5c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801bd60:	440a      	add	r2, r1
 801bd62:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801bd66:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801bd6a:	4413      	add	r3, r2
 801bd6c:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801bd70:	6803      	ldr	r3, [r0, #0]
 801bd72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bd74:	4798      	blx	r3
 801bd76:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801bd7a:	6828      	ldr	r0, [r5, #0]
 801bd7c:	d01f      	beq.n	801bdbe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801bd7e:	2201      	movs	r2, #1
 801bd80:	2500      	movs	r5, #0
 801bd82:	6801      	ldr	r1, [r0, #0]
 801bd84:	b2a4      	uxth	r4, r4
 801bd86:	b2b6      	uxth	r6, r6
 801bd88:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801bd8c:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801bd90:	250b      	movs	r5, #11
 801bd92:	9507      	str	r5, [sp, #28]
 801bd94:	f8ba 5000 	ldrh.w	r5, [sl]
 801bd98:	f8cd 9010 	str.w	r9, [sp, #16]
 801bd9c:	9602      	str	r6, [sp, #8]
 801bd9e:	9401      	str	r4, [sp, #4]
 801bda0:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801bda4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801bda8:	9203      	str	r2, [sp, #12]
 801bdaa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801bdae:	9200      	str	r2, [sp, #0]
 801bdb0:	4642      	mov	r2, r8
 801bdb2:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 801bdb4:	4639      	mov	r1, r7
 801bdb6:	47a0      	blx	r4
 801bdb8:	b011      	add	sp, #68	@ 0x44
 801bdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdbe:	6803      	ldr	r3, [r0, #0]
 801bdc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bdc2:	4798      	blx	r3
 801bdc4:	f8ba 5000 	ldrh.w	r5, [sl]
 801bdc8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801bdcc:	f04f 0e04 	mov.w	lr, #4
 801bdd0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801bdd4:	436e      	muls	r6, r5
 801bdd6:	fb05 2303 	mla	r3, r5, r3, r2
 801bdda:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801bdde:	1b2d      	subs	r5, r5, r4
 801bde0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bde4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bde8:	4418      	add	r0, r3
 801bdea:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801bdee:	1982      	adds	r2, r0, r6
 801bdf0:	1b1b      	subs	r3, r3, r4
 801bdf2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bdf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bdf8:	4290      	cmp	r0, r2
 801bdfa:	d254      	bcs.n	801bea6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801bdfc:	eb00 0a04 	add.w	sl, r0, r4
 801be00:	4550      	cmp	r0, sl
 801be02:	d24c      	bcs.n	801be9e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801be04:	f817 1b01 	ldrb.w	r1, [r7], #1
 801be08:	fb1e e101 	smlabb	r1, lr, r1, lr
 801be0c:	eb08 0c01 	add.w	ip, r8, r1
 801be10:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801be14:	b173      	cbz	r3, 801be34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801be16:	2bff      	cmp	r3, #255	@ 0xff
 801be18:	f818 b001 	ldrb.w	fp, [r8, r1]
 801be1c:	d10c      	bne.n	801be38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801be1e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801be22:	d109      	bne.n	801be38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801be24:	f880 b000 	strb.w	fp, [r0]
 801be28:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801be2c:	7043      	strb	r3, [r0, #1]
 801be2e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801be32:	7083      	strb	r3, [r0, #2]
 801be34:	3003      	adds	r0, #3
 801be36:	e7e3      	b.n	801be00 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801be38:	fb09 f103 	mul.w	r1, r9, r3
 801be3c:	1c4b      	adds	r3, r1, #1
 801be3e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801be42:	7801      	ldrb	r1, [r0, #0]
 801be44:	121b      	asrs	r3, r3, #8
 801be46:	b29e      	uxth	r6, r3
 801be48:	43db      	mvns	r3, r3
 801be4a:	fb1b fb06 	smulbb	fp, fp, r6
 801be4e:	b2db      	uxtb	r3, r3
 801be50:	fb01 b103 	mla	r1, r1, r3, fp
 801be54:	b289      	uxth	r1, r1
 801be56:	f101 0b01 	add.w	fp, r1, #1
 801be5a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801be5e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801be62:	fb1b fb03 	smulbb	fp, fp, r3
 801be66:	1209      	asrs	r1, r1, #8
 801be68:	7001      	strb	r1, [r0, #0]
 801be6a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801be6e:	fb01 b106 	mla	r1, r1, r6, fp
 801be72:	b289      	uxth	r1, r1
 801be74:	f101 0b01 	add.w	fp, r1, #1
 801be78:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801be7c:	1209      	asrs	r1, r1, #8
 801be7e:	7041      	strb	r1, [r0, #1]
 801be80:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801be84:	f890 c002 	ldrb.w	ip, [r0, #2]
 801be88:	fb1c f303 	smulbb	r3, ip, r3
 801be8c:	fb01 3606 	mla	r6, r1, r6, r3
 801be90:	b2b6      	uxth	r6, r6
 801be92:	1c73      	adds	r3, r6, #1
 801be94:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801be98:	1236      	asrs	r6, r6, #8
 801be9a:	7086      	strb	r6, [r0, #2]
 801be9c:	e7ca      	b.n	801be34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801be9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bea0:	4428      	add	r0, r5
 801bea2:	441f      	add	r7, r3
 801bea4:	e7a8      	b.n	801bdf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801bea6:	4b03      	ldr	r3, [pc, #12]	@ (801beb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801bea8:	6818      	ldr	r0, [r3, #0]
 801beaa:	6803      	ldr	r3, [r0, #0]
 801beac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801beae:	4798      	blx	r3
 801beb0:	e782      	b.n	801bdb8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801beb2:	bf00      	nop
 801beb4:	240252fc 	.word	0x240252fc
 801beb8:	240252f6 	.word	0x240252f6

0801bebc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801bebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bec0:	b091      	sub	sp, #68	@ 0x44
 801bec2:	4680      	mov	r8, r0
 801bec4:	460e      	mov	r6, r1
 801bec6:	6810      	ldr	r0, [r2, #0]
 801bec8:	6851      	ldr	r1, [r2, #4]
 801beca:	ad0c      	add	r5, sp, #48	@ 0x30
 801becc:	4614      	mov	r4, r2
 801bece:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801bed2:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801c06c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801bed6:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801c070 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801beda:	c503      	stmia	r5!, {r0, r1}
 801bedc:	6818      	ldr	r0, [r3, #0]
 801bede:	ad0e      	add	r5, sp, #56	@ 0x38
 801bee0:	6859      	ldr	r1, [r3, #4]
 801bee2:	c503      	stmia	r5!, {r0, r1}
 801bee4:	a80c      	add	r0, sp, #48	@ 0x30
 801bee6:	f7f7 ffc1 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801beea:	4621      	mov	r1, r4
 801beec:	a80e      	add	r0, sp, #56	@ 0x38
 801beee:	f7f7 ffe5 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bef2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801bef6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801befa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801befe:	f8d9 0000 	ldr.w	r0, [r9]
 801bf02:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bf06:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801bf0a:	eb08 0401 	add.w	r4, r8, r1
 801bf0e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801bf12:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801bf16:	440a      	add	r2, r1
 801bf18:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801bf1c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801bf20:	4413      	add	r3, r2
 801bf22:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801bf26:	6803      	ldr	r3, [r0, #0]
 801bf28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bf2a:	4798      	blx	r3
 801bf2c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801bf30:	f8d9 0000 	ldr.w	r0, [r9]
 801bf34:	d022      	beq.n	801bf7c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801bf36:	2200      	movs	r2, #0
 801bf38:	f04f 0c01 	mov.w	ip, #1
 801bf3c:	6801      	ldr	r1, [r0, #0]
 801bf3e:	b2ad      	uxth	r5, r5
 801bf40:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801bf44:	e9cd c208 	strd	ip, r2, [sp, #32]
 801bf48:	f04f 0c0b 	mov.w	ip, #11
 801bf4c:	f8cd c01c 	str.w	ip, [sp, #28]
 801bf50:	f8ba c000 	ldrh.w	ip, [sl]
 801bf54:	9704      	str	r7, [sp, #16]
 801bf56:	9502      	str	r5, [sp, #8]
 801bf58:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801bf5c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801bf60:	9203      	str	r2, [sp, #12]
 801bf62:	fa1f f288 	uxth.w	r2, r8
 801bf66:	9201      	str	r2, [sp, #4]
 801bf68:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801bf6c:	9200      	str	r2, [sp, #0]
 801bf6e:	4632      	mov	r2, r6
 801bf70:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 801bf72:	4621      	mov	r1, r4
 801bf74:	47a8      	blx	r5
 801bf76:	b011      	add	sp, #68	@ 0x44
 801bf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf7c:	6803      	ldr	r3, [r0, #0]
 801bf7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bf80:	4798      	blx	r3
 801bf82:	f8ba 2000 	ldrh.w	r2, [sl]
 801bf86:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801bf8a:	f04f 0e03 	mov.w	lr, #3
 801bf8e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801bf92:	4355      	muls	r5, r2
 801bf94:	fa1f fc87 	uxth.w	ip, r7
 801bf98:	fb02 1303 	mla	r3, r2, r3, r1
 801bf9c:	eba2 0208 	sub.w	r2, r2, r8
 801bfa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bfa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bfa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bfac:	4418      	add	r0, r3
 801bfae:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bfb0:	1943      	adds	r3, r0, r5
 801bfb2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801bfb6:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801bfba:	eba2 0208 	sub.w	r2, r2, r8
 801bfbe:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bfc2:	b2ad      	uxth	r5, r5
 801bfc4:	4298      	cmp	r0, r3
 801bfc6:	d24a      	bcs.n	801c05e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801bfc8:	eb00 0908 	add.w	r9, r0, r8
 801bfcc:	4621      	mov	r1, r4
 801bfce:	4548      	cmp	r0, r9
 801bfd0:	460c      	mov	r4, r1
 801bfd2:	d240      	bcs.n	801c056 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801bfd4:	f04f 0a04 	mov.w	sl, #4
 801bfd8:	7824      	ldrb	r4, [r4, #0]
 801bfda:	2fff      	cmp	r7, #255	@ 0xff
 801bfdc:	f101 0101 	add.w	r1, r1, #1
 801bfe0:	fb1e a404 	smlabb	r4, lr, r4, sl
 801bfe4:	eb06 0a04 	add.w	sl, r6, r4
 801bfe8:	f816 b004 	ldrb.w	fp, [r6, r4]
 801bfec:	d02b      	beq.n	801c046 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801bfee:	7804      	ldrb	r4, [r0, #0]
 801bff0:	fb14 f405 	smulbb	r4, r4, r5
 801bff4:	fb0b 440c 	mla	r4, fp, ip, r4
 801bff8:	b2a4      	uxth	r4, r4
 801bffa:	f104 0b01 	add.w	fp, r4, #1
 801bffe:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801c002:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c006:	fb1b fb05 	smulbb	fp, fp, r5
 801c00a:	1224      	asrs	r4, r4, #8
 801c00c:	7004      	strb	r4, [r0, #0]
 801c00e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801c012:	fb04 b40c 	mla	r4, r4, ip, fp
 801c016:	b2a4      	uxth	r4, r4
 801c018:	f104 0b01 	add.w	fp, r4, #1
 801c01c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801c020:	1224      	asrs	r4, r4, #8
 801c022:	7044      	strb	r4, [r0, #1]
 801c024:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801c028:	f890 a002 	ldrb.w	sl, [r0, #2]
 801c02c:	fb1a fa05 	smulbb	sl, sl, r5
 801c030:	fb04 a40c 	mla	r4, r4, ip, sl
 801c034:	b2a4      	uxth	r4, r4
 801c036:	f104 0a01 	add.w	sl, r4, #1
 801c03a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c03e:	1224      	asrs	r4, r4, #8
 801c040:	7084      	strb	r4, [r0, #2]
 801c042:	3003      	adds	r0, #3
 801c044:	e7c3      	b.n	801bfce <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801c046:	f880 b000 	strb.w	fp, [r0]
 801c04a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801c04e:	7044      	strb	r4, [r0, #1]
 801c050:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801c054:	e7f4      	b.n	801c040 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801c056:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c058:	4420      	add	r0, r4
 801c05a:	188c      	adds	r4, r1, r2
 801c05c:	e7b2      	b.n	801bfc4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801c05e:	4b03      	ldr	r3, [pc, #12]	@ (801c06c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801c060:	6818      	ldr	r0, [r3, #0]
 801c062:	6803      	ldr	r3, [r0, #0]
 801c064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c066:	4798      	blx	r3
 801c068:	e785      	b.n	801bf76 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801c06a:	bf00      	nop
 801c06c:	240252fc 	.word	0x240252fc
 801c070:	240252f6 	.word	0x240252f6

0801c074 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801c074:	b4f0      	push	{r4, r5, r6, r7}
 801c076:	460c      	mov	r4, r1
 801c078:	4611      	mov	r1, r2
 801c07a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c07e:	461a      	mov	r2, r3
 801c080:	780f      	ldrb	r7, [r1, #0]
 801c082:	9b04      	ldr	r3, [sp, #16]
 801c084:	784e      	ldrb	r6, [r1, #1]
 801c086:	b11f      	cbz	r7, 801c090 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801c088:	2f01      	cmp	r7, #1
 801c08a:	d01d      	beq.n	801c0c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801c08c:	bcf0      	pop	{r4, r5, r6, r7}
 801c08e:	4770      	bx	lr
 801c090:	2e03      	cmp	r6, #3
 801c092:	d8fb      	bhi.n	801c08c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801c094:	e8df f006 	tbb	[pc, r6]
 801c098:	16140702 	.word	0x16140702
 801c09c:	9504      	str	r5, [sp, #16]
 801c09e:	4620      	mov	r0, r4
 801c0a0:	bcf0      	pop	{r4, r5, r6, r7}
 801c0a2:	f7ff be33 	b.w	801bd0c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801c0a6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801c0a8:	2800      	cmp	r0, #0
 801c0aa:	d0ef      	beq.n	801c08c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801c0ac:	6806      	ldr	r6, [r0, #0]
 801c0ae:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c0b2:	68f5      	ldr	r5, [r6, #12]
 801c0b4:	4613      	mov	r3, r2
 801c0b6:	46ac      	mov	ip, r5
 801c0b8:	460a      	mov	r2, r1
 801c0ba:	4621      	mov	r1, r4
 801c0bc:	bcf0      	pop	{r4, r5, r6, r7}
 801c0be:	4760      	bx	ip
 801c0c0:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c0c2:	e7f1      	b.n	801c0a8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801c0c4:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801c0c6:	e7ef      	b.n	801c0a8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801c0c8:	2e03      	cmp	r6, #3
 801c0ca:	d8df      	bhi.n	801c08c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801c0cc:	e8df f006 	tbb	[pc, r6]
 801c0d0:	110f0702 	.word	0x110f0702
 801c0d4:	9504      	str	r5, [sp, #16]
 801c0d6:	4620      	mov	r0, r4
 801c0d8:	bcf0      	pop	{r4, r5, r6, r7}
 801c0da:	f7ff beef 	b.w	801bebc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801c0de:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801c0e0:	2800      	cmp	r0, #0
 801c0e2:	d0d3      	beq.n	801c08c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801c0e4:	6806      	ldr	r6, [r0, #0]
 801c0e6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c0ea:	68b5      	ldr	r5, [r6, #8]
 801c0ec:	e7e2      	b.n	801c0b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801c0ee:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c0f0:	e7f6      	b.n	801c0e0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801c0f2:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801c0f4:	e7f4      	b.n	801c0e0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801c0f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801c0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c0fc:	4605      	mov	r5, r0
 801c0fe:	b08f      	sub	sp, #60	@ 0x3c
 801c100:	460c      	mov	r4, r1
 801c102:	461f      	mov	r7, r3
 801c104:	2b00      	cmp	r3, #0
 801c106:	d052      	beq.n	801c1ae <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801c108:	6808      	ldr	r0, [r1, #0]
 801c10a:	ab0a      	add	r3, sp, #40	@ 0x28
 801c10c:	6849      	ldr	r1, [r1, #4]
 801c10e:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801c2d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801c112:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801c2dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801c116:	c303      	stmia	r3!, {r0, r1}
 801c118:	6810      	ldr	r0, [r2, #0]
 801c11a:	ab0c      	add	r3, sp, #48	@ 0x30
 801c11c:	6851      	ldr	r1, [r2, #4]
 801c11e:	c303      	stmia	r3!, {r0, r1}
 801c120:	a80a      	add	r0, sp, #40	@ 0x28
 801c122:	f7f7 fea3 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c126:	4621      	mov	r1, r4
 801c128:	a80c      	add	r0, sp, #48	@ 0x30
 801c12a:	f7f7 fec7 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c12e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801c132:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801c136:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801c13a:	f8d8 0000 	ldr.w	r0, [r8]
 801c13e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c142:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801c146:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801c14a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801c14e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801c152:	440a      	add	r2, r1
 801c154:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801c158:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801c15c:	4413      	add	r3, r2
 801c15e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801c162:	6803      	ldr	r3, [r0, #0]
 801c164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c166:	4798      	blx	r3
 801c168:	2fff      	cmp	r7, #255	@ 0xff
 801c16a:	d023      	beq.n	801c1b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801c16c:	f010 0f04 	tst.w	r0, #4
 801c170:	f8d8 0000 	ldr.w	r0, [r8]
 801c174:	d021      	beq.n	801c1ba <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801c176:	2100      	movs	r1, #0
 801c178:	f04f 0e01 	mov.w	lr, #1
 801c17c:	f8d0 c000 	ldr.w	ip, [r0]
 801c180:	b2a4      	uxth	r4, r4
 801c182:	9106      	str	r1, [sp, #24]
 801c184:	b2b6      	uxth	r6, r6
 801c186:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801c18a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801c18e:	e9cd e107 	strd	lr, r1, [sp, #28]
 801c192:	f8b9 e000 	ldrh.w	lr, [r9]
 801c196:	9703      	str	r7, [sp, #12]
 801c198:	9401      	str	r4, [sp, #4]
 801c19a:	9600      	str	r6, [sp, #0]
 801c19c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801c1a0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801c1a4:	9102      	str	r1, [sp, #8]
 801c1a6:	4629      	mov	r1, r5
 801c1a8:	f8dc 4044 	ldr.w	r4, [ip, #68]	@ 0x44
 801c1ac:	47a0      	blx	r4
 801c1ae:	b00f      	add	sp, #60	@ 0x3c
 801c1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c1b4:	f010 0f01 	tst.w	r0, #1
 801c1b8:	e7da      	b.n	801c170 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801c1ba:	6803      	ldr	r3, [r0, #0]
 801c1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1be:	4798      	blx	r3
 801c1c0:	f8b9 1000 	ldrh.w	r1, [r9]
 801c1c4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801c1c8:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801c1cc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801c1d0:	434c      	muls	r4, r1
 801c1d2:	2fff      	cmp	r7, #255	@ 0xff
 801c1d4:	fb01 2303 	mla	r3, r1, r3, r2
 801c1d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c1dc:	eba1 0106 	sub.w	r1, r1, r6
 801c1e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c1e8:	4418      	add	r0, r3
 801c1ea:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801c1ee:	eba3 0606 	sub.w	r6, r3, r6
 801c1f2:	4404      	add	r4, r0
 801c1f4:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801c1f8:	d04a      	beq.n	801c290 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801c1fa:	43fa      	mvns	r2, r7
 801c1fc:	b2bb      	uxth	r3, r7
 801c1fe:	b2d7      	uxtb	r7, r2
 801c200:	42a0      	cmp	r0, r4
 801c202:	d263      	bcs.n	801c2cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801c204:	eb00 0e0c 	add.w	lr, r0, ip
 801c208:	4586      	cmp	lr, r0
 801c20a:	f100 0803 	add.w	r8, r0, #3
 801c20e:	d93a      	bls.n	801c286 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801c210:	f835 2b02 	ldrh.w	r2, [r5], #2
 801c214:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801c218:	00d0      	lsls	r0, r2, #3
 801c21a:	fb19 f907 	smulbb	r9, r9, r7
 801c21e:	b2c0      	uxtb	r0, r0
 801c220:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801c224:	fb00 9003 	mla	r0, r0, r3, r9
 801c228:	b280      	uxth	r0, r0
 801c22a:	f100 0901 	add.w	r9, r0, #1
 801c22e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801c232:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801c236:	fb19 f907 	smulbb	r9, r9, r7
 801c23a:	1200      	asrs	r0, r0, #8
 801c23c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801c240:	10d0      	asrs	r0, r2, #3
 801c242:	1212      	asrs	r2, r2, #8
 801c244:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801c248:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801c24c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801c250:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c254:	fb00 9003 	mla	r0, r0, r3, r9
 801c258:	b280      	uxth	r0, r0
 801c25a:	f100 0901 	add.w	r9, r0, #1
 801c25e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801c262:	1200      	asrs	r0, r0, #8
 801c264:	f808 0c02 	strb.w	r0, [r8, #-2]
 801c268:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801c26c:	fb10 f007 	smulbb	r0, r0, r7
 801c270:	fb02 0203 	mla	r2, r2, r3, r0
 801c274:	b292      	uxth	r2, r2
 801c276:	1c50      	adds	r0, r2, #1
 801c278:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c27c:	4640      	mov	r0, r8
 801c27e:	1212      	asrs	r2, r2, #8
 801c280:	f808 2c01 	strb.w	r2, [r8, #-1]
 801c284:	e7c0      	b.n	801c208 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801c286:	4408      	add	r0, r1
 801c288:	4435      	add	r5, r6
 801c28a:	e7b9      	b.n	801c200 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801c28c:	4408      	add	r0, r1
 801c28e:	4435      	add	r5, r6
 801c290:	42a0      	cmp	r0, r4
 801c292:	d21b      	bcs.n	801c2cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801c294:	eb00 070c 	add.w	r7, r0, ip
 801c298:	42b8      	cmp	r0, r7
 801c29a:	d2f7      	bcs.n	801c28c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801c29c:	f835 3b02 	ldrh.w	r3, [r5], #2
 801c2a0:	3003      	adds	r0, #3
 801c2a2:	00da      	lsls	r2, r3, #3
 801c2a4:	b2d2      	uxtb	r2, r2
 801c2a6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c2aa:	f800 2c03 	strb.w	r2, [r0, #-3]
 801c2ae:	10da      	asrs	r2, r3, #3
 801c2b0:	121b      	asrs	r3, r3, #8
 801c2b2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801c2b6:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801c2ba:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801c2be:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801c2c2:	f800 2c02 	strb.w	r2, [r0, #-2]
 801c2c6:	f800 3c01 	strb.w	r3, [r0, #-1]
 801c2ca:	e7e5      	b.n	801c298 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801c2cc:	4b02      	ldr	r3, [pc, #8]	@ (801c2d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801c2ce:	6818      	ldr	r0, [r3, #0]
 801c2d0:	6803      	ldr	r3, [r0, #0]
 801c2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c2d4:	4798      	blx	r3
 801c2d6:	e76a      	b.n	801c1ae <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801c2d8:	240252fc 	.word	0x240252fc
 801c2dc:	240252f6 	.word	0x240252f6

0801c2e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c2e4:	b08a      	sub	sp, #40	@ 0x28
 801c2e6:	460d      	mov	r5, r1
 801c2e8:	4604      	mov	r4, r0
 801c2ea:	461e      	mov	r6, r3
 801c2ec:	6808      	ldr	r0, [r1, #0]
 801c2ee:	ab06      	add	r3, sp, #24
 801c2f0:	6849      	ldr	r1, [r1, #4]
 801c2f2:	4f5d      	ldr	r7, [pc, #372]	@ (801c468 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801c2f4:	c303      	stmia	r3!, {r0, r1}
 801c2f6:	6810      	ldr	r0, [r2, #0]
 801c2f8:	ab08      	add	r3, sp, #32
 801c2fa:	6851      	ldr	r1, [r2, #4]
 801c2fc:	c303      	stmia	r3!, {r0, r1}
 801c2fe:	a806      	add	r0, sp, #24
 801c300:	f7f7 fdb4 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c304:	4629      	mov	r1, r5
 801c306:	a808      	add	r0, sp, #32
 801c308:	f7f7 fdd8 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c30c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c310:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c314:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c318:	6838      	ldr	r0, [r7, #0]
 801c31a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c31e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801c322:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801c326:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c32a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c32e:	440a      	add	r2, r1
 801c330:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c334:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c338:	4413      	add	r3, r2
 801c33a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c33e:	6803      	ldr	r3, [r0, #0]
 801c340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c342:	4798      	blx	r3
 801c344:	2eff      	cmp	r6, #255	@ 0xff
 801c346:	d119      	bne.n	801c37c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801c348:	f010 0f20 	tst.w	r0, #32
 801c34c:	6838      	ldr	r0, [r7, #0]
 801c34e:	d018      	beq.n	801c382 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801c350:	b2ad      	uxth	r5, r5
 801c352:	2700      	movs	r7, #0
 801c354:	6801      	ldr	r1, [r0, #0]
 801c356:	9501      	str	r5, [sp, #4]
 801c358:	fa1f f588 	uxth.w	r5, r8
 801c35c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801c360:	9500      	str	r5, [sp, #0]
 801c362:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c366:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801c36a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c36e:	9602      	str	r6, [sp, #8]
 801c370:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801c372:	4621      	mov	r1, r4
 801c374:	47a8      	blx	r5
 801c376:	b00a      	add	sp, #40	@ 0x28
 801c378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c37c:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801c380:	e7e4      	b.n	801c34c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801c382:	6803      	ldr	r3, [r0, #0]
 801c384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c386:	4798      	blx	r3
 801c388:	4b38      	ldr	r3, [pc, #224]	@ (801c46c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801c38a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c38e:	f8b3 c000 	ldrh.w	ip, [r3]
 801c392:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c396:	fb0c f505 	mul.w	r5, ip, r5
 801c39a:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801c39e:	fb0c 2303 	mla	r3, ip, r3, r2
 801c3a2:	ebac 0c08 	sub.w	ip, ip, r8
 801c3a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c3aa:	ebae 0e08 	sub.w	lr, lr, r8
 801c3ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3b2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c3b6:	4418      	add	r0, r3
 801c3b8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801c3bc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801c3c0:	4405      	add	r5, r0
 801c3c2:	42a8      	cmp	r0, r5
 801c3c4:	d24a      	bcs.n	801c45c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801c3c6:	eb00 0803 	add.w	r8, r0, r3
 801c3ca:	4540      	cmp	r0, r8
 801c3cc:	d243      	bcs.n	801c456 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801c3ce:	78e2      	ldrb	r2, [r4, #3]
 801c3d0:	b15a      	cbz	r2, 801c3ea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c3d2:	2aff      	cmp	r2, #255	@ 0xff
 801c3d4:	f894 9000 	ldrb.w	r9, [r4]
 801c3d8:	d10a      	bne.n	801c3f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c3da:	2eff      	cmp	r6, #255	@ 0xff
 801c3dc:	d108      	bne.n	801c3f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c3de:	f880 9000 	strb.w	r9, [r0]
 801c3e2:	7862      	ldrb	r2, [r4, #1]
 801c3e4:	7042      	strb	r2, [r0, #1]
 801c3e6:	78a2      	ldrb	r2, [r4, #2]
 801c3e8:	7082      	strb	r2, [r0, #2]
 801c3ea:	3003      	adds	r0, #3
 801c3ec:	3404      	adds	r4, #4
 801c3ee:	e7ec      	b.n	801c3ca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801c3f0:	4372      	muls	r2, r6
 801c3f2:	1c51      	adds	r1, r2, #1
 801c3f4:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801c3f8:	1209      	asrs	r1, r1, #8
 801c3fa:	fa1f fa81 	uxth.w	sl, r1
 801c3fe:	43c9      	mvns	r1, r1
 801c400:	fb19 f90a 	smulbb	r9, r9, sl
 801c404:	b2ca      	uxtb	r2, r1
 801c406:	7801      	ldrb	r1, [r0, #0]
 801c408:	fb01 9902 	mla	r9, r1, r2, r9
 801c40c:	fa1f f989 	uxth.w	r9, r9
 801c410:	f109 0101 	add.w	r1, r9, #1
 801c414:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801c418:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c41c:	f880 9000 	strb.w	r9, [r0]
 801c420:	f890 9001 	ldrb.w	r9, [r0, #1]
 801c424:	7861      	ldrb	r1, [r4, #1]
 801c426:	fb19 f902 	smulbb	r9, r9, r2
 801c42a:	fb01 910a 	mla	r1, r1, sl, r9
 801c42e:	b289      	uxth	r1, r1
 801c430:	f101 0901 	add.w	r9, r1, #1
 801c434:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801c438:	1209      	asrs	r1, r1, #8
 801c43a:	7041      	strb	r1, [r0, #1]
 801c43c:	7881      	ldrb	r1, [r0, #2]
 801c43e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801c442:	fb11 f202 	smulbb	r2, r1, r2
 801c446:	fb09 220a 	mla	r2, r9, sl, r2
 801c44a:	b292      	uxth	r2, r2
 801c44c:	1c51      	adds	r1, r2, #1
 801c44e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c452:	1212      	asrs	r2, r2, #8
 801c454:	e7c8      	b.n	801c3e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801c456:	4460      	add	r0, ip
 801c458:	4474      	add	r4, lr
 801c45a:	e7b2      	b.n	801c3c2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801c45c:	6838      	ldr	r0, [r7, #0]
 801c45e:	6803      	ldr	r3, [r0, #0]
 801c460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c462:	4798      	blx	r3
 801c464:	e787      	b.n	801c376 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801c466:	bf00      	nop
 801c468:	240252fc 	.word	0x240252fc
 801c46c:	240252f6 	.word	0x240252f6

0801c470 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c474:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801c478:	4607      	mov	r7, r0
 801c47a:	460c      	mov	r4, r1
 801c47c:	4692      	mov	sl, r2
 801c47e:	4699      	mov	r9, r3
 801c480:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c482:	b335      	cbz	r5, 801c4d2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c484:	4608      	mov	r0, r1
 801c486:	f7fb fdcb 	bl	8018020 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c48a:	4680      	mov	r8, r0
 801c48c:	4620      	mov	r0, r4
 801c48e:	f7fb fdfb 	bl	8018088 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c492:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c496:	4620      	mov	r0, r4
 801c498:	f8ad a008 	strh.w	sl, [sp, #8]
 801c49c:	f8ad 900a 	strh.w	r9, [sp, #10]
 801c4a0:	f8ad 800c 	strh.w	r8, [sp, #12]
 801c4a4:	f7fb fefa 	bl	801829c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c4a8:	2810      	cmp	r0, #16
 801c4aa:	d812      	bhi.n	801c4d2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c4ac:	e8df f000 	tbb	[pc, r0]
 801c4b0:	11092d24 	.word	0x11092d24
 801c4b4:	11111111 	.word	0x11111111
 801c4b8:	14111111 	.word	0x14111111
 801c4bc:	4c111111 	.word	0x4c111111
 801c4c0:	3c          	.byte	0x3c
 801c4c1:	00          	.byte	0x00
 801c4c2:	4620      	mov	r0, r4
 801c4c4:	f7fb fe66 	bl	8018194 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c4c8:	462b      	mov	r3, r5
 801c4ca:	4632      	mov	r2, r6
 801c4cc:	a902      	add	r1, sp, #8
 801c4ce:	f7ff ff07 	bl	801c2e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c4d2:	b004      	add	sp, #16
 801c4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4d8:	4620      	mov	r0, r4
 801c4da:	f7fb fe5b 	bl	8018194 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c4de:	4680      	mov	r8, r0
 801c4e0:	4620      	mov	r0, r4
 801c4e2:	f7fb fe87 	bl	80181f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c4e6:	ab02      	add	r3, sp, #8
 801c4e8:	4602      	mov	r2, r0
 801c4ea:	4641      	mov	r1, r8
 801c4ec:	4638      	mov	r0, r7
 801c4ee:	e9cd 6500 	strd	r6, r5, [sp]
 801c4f2:	f7ff fdbf 	bl	801c074 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c4f6:	e7ec      	b.n	801c4d2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c4f8:	4620      	mov	r0, r4
 801c4fa:	f7fb fe4b 	bl	8018194 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c4fe:	462b      	mov	r3, r5
 801c500:	4632      	mov	r2, r6
 801c502:	a902      	add	r1, sp, #8
 801c504:	f7ff fdf8 	bl	801c0f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c508:	e7e3      	b.n	801c4d2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c50a:	683b      	ldr	r3, [r7, #0]
 801c50c:	4620      	mov	r0, r4
 801c50e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c512:	f7fb fe3f 	bl	8018194 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c516:	2300      	movs	r3, #0
 801c518:	4601      	mov	r1, r0
 801c51a:	aa02      	add	r2, sp, #8
 801c51c:	4638      	mov	r0, r7
 801c51e:	e9cd 5300 	strd	r5, r3, [sp]
 801c522:	4633      	mov	r3, r6
 801c524:	47c0      	blx	r8
 801c526:	e7d4      	b.n	801c4d2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c528:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c52a:	2f00      	cmp	r7, #0
 801c52c:	d0d1      	beq.n	801c4d2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c52e:	683b      	ldr	r3, [r7, #0]
 801c530:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c534:	4620      	mov	r0, r4
 801c536:	f7fb fe2d 	bl	8018194 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c53a:	9500      	str	r5, [sp, #0]
 801c53c:	4601      	mov	r1, r0
 801c53e:	4633      	mov	r3, r6
 801c540:	aa02      	add	r2, sp, #8
 801c542:	4638      	mov	r0, r7
 801c544:	47c0      	blx	r8
 801c546:	e7c4      	b.n	801c4d2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c548:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c54a:	2f00      	cmp	r7, #0
 801c54c:	d0c1      	beq.n	801c4d2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c54e:	683b      	ldr	r3, [r7, #0]
 801c550:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c554:	e7ee      	b.n	801c534 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801c556 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c556:	b4f0      	push	{r4, r5, r6, r7}
 801c558:	4616      	mov	r6, r2
 801c55a:	461c      	mov	r4, r3
 801c55c:	460d      	mov	r5, r1
 801c55e:	9a04      	ldr	r2, [sp, #16]
 801c560:	2e01      	cmp	r6, #1
 801c562:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c566:	d00e      	beq.n	801c586 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801c568:	d303      	bcc.n	801c572 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801c56a:	2e02      	cmp	r6, #2
 801c56c:	d006      	beq.n	801c57c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801c56e:	bcf0      	pop	{r4, r5, r6, r7}
 801c570:	4770      	bx	lr
 801c572:	4621      	mov	r1, r4
 801c574:	4628      	mov	r0, r5
 801c576:	bcf0      	pop	{r4, r5, r6, r7}
 801c578:	f7ff bdbe 	b.w	801c0f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c57c:	4621      	mov	r1, r4
 801c57e:	4628      	mov	r0, r5
 801c580:	bcf0      	pop	{r4, r5, r6, r7}
 801c582:	f7ff bead 	b.w	801c2e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c586:	6805      	ldr	r5, [r0, #0]
 801c588:	2600      	movs	r6, #0
 801c58a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c58e:	68ed      	ldr	r5, [r5, #12]
 801c590:	4613      	mov	r3, r2
 801c592:	4622      	mov	r2, r4
 801c594:	46ac      	mov	ip, r5
 801c596:	bcf0      	pop	{r4, r5, r6, r7}
 801c598:	4760      	bx	ip
	...

0801c59c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801c59c:	b160      	cbz	r0, 801c5b8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801c59e:	2903      	cmp	r1, #3
 801c5a0:	d818      	bhi.n	801c5d4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c5a2:	e8df f001 	tbb	[pc, r1]
 801c5a6:	1902      	.short	0x1902
 801c5a8:	1b06      	.short	0x1b06
 801c5aa:	4b0e      	ldr	r3, [pc, #56]	@ (801c5e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c5ac:	8818      	ldrh	r0, [r3, #0]
 801c5ae:	4240      	negs	r0, r0
 801c5b0:	4770      	bx	lr
 801c5b2:	4b0c      	ldr	r3, [pc, #48]	@ (801c5e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c5b4:	8818      	ldrh	r0, [r3, #0]
 801c5b6:	4770      	bx	lr
 801c5b8:	2903      	cmp	r1, #3
 801c5ba:	d80b      	bhi.n	801c5d4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c5bc:	a301      	add	r3, pc, #4	@ (adr r3, 801c5c4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801c5be:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c5c2:	bf00      	nop
 801c5c4:	0801c5d9 	.word	0x0801c5d9
 801c5c8:	0801c5b3 	.word	0x0801c5b3
 801c5cc:	0801c5dd 	.word	0x0801c5dd
 801c5d0:	0801c5ab 	.word	0x0801c5ab
 801c5d4:	2000      	movs	r0, #0
 801c5d6:	4770      	bx	lr
 801c5d8:	2001      	movs	r0, #1
 801c5da:	4770      	bx	lr
 801c5dc:	f04f 30ff 	mov.w	r0, #4294967295
 801c5e0:	4770      	bx	lr
 801c5e2:	bf00      	nop
 801c5e4:	240252f6 	.word	0x240252f6

0801c5e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801c5e8:	b160      	cbz	r0, 801c604 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801c5ea:	2903      	cmp	r1, #3
 801c5ec:	d818      	bhi.n	801c620 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c5ee:	e8df f001 	tbb	[pc, r1]
 801c5f2:	0219      	.short	0x0219
 801c5f4:	051b      	.short	0x051b
 801c5f6:	4b0e      	ldr	r3, [pc, #56]	@ (801c630 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c5f8:	8818      	ldrh	r0, [r3, #0]
 801c5fa:	4770      	bx	lr
 801c5fc:	4b0c      	ldr	r3, [pc, #48]	@ (801c630 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c5fe:	8818      	ldrh	r0, [r3, #0]
 801c600:	4240      	negs	r0, r0
 801c602:	4770      	bx	lr
 801c604:	2903      	cmp	r1, #3
 801c606:	d80b      	bhi.n	801c620 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c608:	a301      	add	r3, pc, #4	@ (adr r3, 801c610 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801c60a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c60e:	bf00      	nop
 801c610:	0801c5f7 	.word	0x0801c5f7
 801c614:	0801c629 	.word	0x0801c629
 801c618:	0801c5fd 	.word	0x0801c5fd
 801c61c:	0801c625 	.word	0x0801c625
 801c620:	2000      	movs	r0, #0
 801c622:	4770      	bx	lr
 801c624:	2001      	movs	r0, #1
 801c626:	4770      	bx	lr
 801c628:	f04f 30ff 	mov.w	r0, #4294967295
 801c62c:	4770      	bx	lr
 801c62e:	bf00      	nop
 801c630:	240252f6 	.word	0x240252f6

0801c634 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c638:	b097      	sub	sp, #92	@ 0x5c
 801c63a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c63c:	a912      	add	r1, sp, #72	@ 0x48
 801c63e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801c642:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801c646:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801c64a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801c64e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801c652:	e881 000c 	stmia.w	r1, {r2, r3}
 801c656:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801c65a:	930a      	str	r3, [sp, #40]	@ 0x28
 801c65c:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801c660:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801c664:	9311      	str	r3, [sp, #68]	@ 0x44
 801c666:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801c66a:	798d      	ldrb	r5, [r1, #6]
 801c66c:	930c      	str	r3, [sp, #48]	@ 0x30
 801c66e:	7b4b      	ldrb	r3, [r1, #13]
 801c670:	0158      	lsls	r0, r3, #5
 801c672:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801c676:	4328      	orrs	r0, r5
 801c678:	9009      	str	r0, [sp, #36]	@ 0x24
 801c67a:	f000 817c 	beq.w	801c976 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c67e:	011b      	lsls	r3, r3, #4
 801c680:	79c8      	ldrb	r0, [r1, #7]
 801c682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c686:	4303      	orrs	r3, r0
 801c688:	930e      	str	r3, [sp, #56]	@ 0x38
 801c68a:	f000 8174 	beq.w	801c976 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c68e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c692:	b29b      	uxth	r3, r3
 801c694:	2f00      	cmp	r7, #0
 801c696:	f000 8116 	beq.w	801c8c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801c69a:	1aff      	subs	r7, r7, r3
 801c69c:	b2bf      	uxth	r7, r7
 801c69e:	043b      	lsls	r3, r7, #16
 801c6a0:	d502      	bpl.n	801c6a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c6a2:	1bf6      	subs	r6, r6, r7
 801c6a4:	2700      	movs	r7, #0
 801c6a6:	b236      	sxth	r6, r6
 801c6a8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c6ac:	a812      	add	r0, sp, #72	@ 0x48
 801c6ae:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801c6b2:	428e      	cmp	r6, r1
 801c6b4:	b28b      	uxth	r3, r1
 801c6b6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801c6ba:	bfbf      	itttt	lt
 801c6bc:	18ff      	addlt	r7, r7, r3
 801c6be:	1bbe      	sublt	r6, r7, r6
 801c6c0:	b2b7      	uxthlt	r7, r6
 801c6c2:	460e      	movlt	r6, r1
 801c6c4:	8891      	ldrh	r1, [r2, #4]
 801c6c6:	440b      	add	r3, r1
 801c6c8:	4631      	mov	r1, r6
 801c6ca:	b21b      	sxth	r3, r3
 801c6cc:	9310      	str	r3, [sp, #64]	@ 0x40
 801c6ce:	88d3      	ldrh	r3, [r2, #6]
 801c6d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c6d2:	449a      	add	sl, r3
 801c6d4:	fa0f f38a 	sxth.w	r3, sl
 801c6d8:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801c6dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c6de:	4bb5      	ldr	r3, [pc, #724]	@ (801c9b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801c6e0:	f893 b000 	ldrb.w	fp, [r3]
 801c6e4:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c6e8:	f1dc 0300 	rsbs	r3, ip, #0
 801c6ec:	eb43 030c 	adc.w	r3, r3, ip
 801c6f0:	930d      	str	r3, [sp, #52]	@ 0x34
 801c6f2:	464b      	mov	r3, r9
 801c6f4:	f7f7 fa2f 	bl	8013b56 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c6f8:	4631      	mov	r1, r6
 801c6fa:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801c6fe:	464b      	mov	r3, r9
 801c700:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c702:	a812      	add	r0, sp, #72	@ 0x48
 801c704:	f7f7 fa44 	bl	8013b90 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c708:	a916      	add	r1, sp, #88	@ 0x58
 801c70a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c70e:	a815      	add	r0, sp, #84	@ 0x54
 801c710:	f7f7 fb6a 	bl	8013de8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c714:	f1b9 0f00 	cmp.w	r9, #0
 801c718:	f040 80d8 	bne.w	801c8cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801c71c:	f1bb 0f01 	cmp.w	fp, #1
 801c720:	f040 80dc 	bne.w	801c8dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801c724:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c726:	b153      	cbz	r3, 801c73e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801c728:	2508      	movs	r5, #8
 801c72a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c72c:	fb95 f3f8 	sdiv	r3, r5, r8
 801c730:	1e5d      	subs	r5, r3, #1
 801c732:	4415      	add	r5, r2
 801c734:	fb95 f5f3 	sdiv	r5, r5, r3
 801c738:	fb15 f503 	smulbb	r5, r5, r3
 801c73c:	b2ad      	uxth	r5, r5
 801c73e:	b907      	cbnz	r7, 801c742 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801c740:	b16c      	cbz	r4, 801c75e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801c742:	fb04 7305 	mla	r3, r4, r5, r7
 801c746:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c748:	ebaa 0a04 	sub.w	sl, sl, r4
 801c74c:	fb08 f303 	mul.w	r3, r8, r3
 801c750:	fa1f fa8a 	uxth.w	sl, sl
 801c754:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801c758:	f003 0407 	and.w	r4, r3, #7
 801c75c:	9226      	str	r2, [sp, #152]	@ 0x98
 801c75e:	4649      	mov	r1, r9
 801c760:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c762:	f7ff ff1b 	bl	801c59c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801c766:	4683      	mov	fp, r0
 801c768:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c76a:	f7ff ff3d 	bl	801c5e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801c76e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c770:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c772:	4681      	mov	r9, r0
 801c774:	1a9b      	subs	r3, r3, r2
 801c776:	459a      	cmp	sl, r3
 801c778:	bfa8      	it	ge
 801c77a:	469a      	movge	sl, r3
 801c77c:	f1ba 0f00 	cmp.w	sl, #0
 801c780:	f340 80f9 	ble.w	801c976 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c784:	1bf6      	subs	r6, r6, r7
 801c786:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c788:	1b9e      	subs	r6, r3, r6
 801c78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c78c:	429e      	cmp	r6, r3
 801c78e:	bfd4      	ite	le
 801c790:	ebc7 0706 	rsble	r7, r7, r6
 801c794:	ebc7 0703 	rsbgt	r7, r7, r3
 801c798:	2f00      	cmp	r7, #0
 801c79a:	f340 80ec 	ble.w	801c976 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c79e:	1bed      	subs	r5, r5, r7
 801c7a0:	fb08 f305 	mul.w	r3, r8, r5
 801c7a4:	930d      	str	r3, [sp, #52]	@ 0x34
 801c7a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c7a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c7ac:	930e      	str	r3, [sp, #56]	@ 0x38
 801c7ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c7b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c7b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c7b6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c7b8:	b2db      	uxtb	r3, r3
 801c7ba:	9310      	str	r3, [sp, #64]	@ 0x40
 801c7bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	f040 80de 	bne.w	801c980 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801c7c4:	4b7c      	ldr	r3, [pc, #496]	@ (801c9b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801c7c6:	6818      	ldr	r0, [r3, #0]
 801c7c8:	6803      	ldr	r3, [r0, #0]
 801c7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7cc:	4798      	blx	r3
 801c7ce:	2301      	movs	r3, #1
 801c7d0:	4a7a      	ldr	r2, [pc, #488]	@ (801c9bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801c7d2:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801c7d6:	fb07 9b1b 	mls	fp, r7, fp, r9
 801c7da:	fa03 f308 	lsl.w	r3, r3, r8
 801c7de:	8811      	ldrh	r1, [r2, #0]
 801c7e0:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801c7e4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801c7e8:	3b01      	subs	r3, #1
 801c7ea:	fb06 bb07 	mla	fp, r6, r7, fp
 801c7ee:	b2db      	uxtb	r3, r3
 801c7f0:	930a      	str	r3, [sp, #40]	@ 0x28
 801c7f2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801c7f6:	fb01 2303 	mla	r3, r1, r3, r2
 801c7fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7fe:	18c3      	adds	r3, r0, r3
 801c800:	9309      	str	r3, [sp, #36]	@ 0x24
 801c802:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c804:	781a      	ldrb	r2, [r3, #0]
 801c806:	4122      	asrs	r2, r4
 801c808:	b2d2      	uxtb	r2, r2
 801c80a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801c80e:	f0c0 80d7 	bcc.w	801c9c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801c812:	46be      	mov	lr, r7
 801c814:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c816:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801c81a:	f0c0 80ba 	bcc.w	801c992 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801c81e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c820:	4013      	ands	r3, r2
 801c822:	d041      	beq.n	801c8a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c824:	20ff      	movs	r0, #255	@ 0xff
 801c826:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c828:	fb90 f5f5 	sdiv	r5, r0, r5
 801c82c:	436b      	muls	r3, r5
 801c82e:	2bfe      	cmp	r3, #254	@ 0xfe
 801c830:	dd03      	ble.n	801c83a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801c832:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c834:	4285      	cmp	r5, r0
 801c836:	f000 80a5 	beq.w	801c984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801c83a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c83c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c83e:	fb15 f303 	smulbb	r3, r5, r3
 801c842:	b29b      	uxth	r3, r3
 801c844:	1c5d      	adds	r5, r3, #1
 801c846:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c84a:	780d      	ldrb	r5, [r1, #0]
 801c84c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c850:	fa1f fc83 	uxth.w	ip, r3
 801c854:	43db      	mvns	r3, r3
 801c856:	fb10 f90c 	smulbb	r9, r0, ip
 801c85a:	b2db      	uxtb	r3, r3
 801c85c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c85e:	fb05 9503 	mla	r5, r5, r3, r9
 801c862:	b2ad      	uxth	r5, r5
 801c864:	f105 0901 	add.w	r9, r5, #1
 801c868:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c86c:	fb10 f90c 	smulbb	r9, r0, ip
 801c870:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801c872:	122d      	asrs	r5, r5, #8
 801c874:	fb10 fc0c 	smulbb	ip, r0, ip
 801c878:	700d      	strb	r5, [r1, #0]
 801c87a:	784d      	ldrb	r5, [r1, #1]
 801c87c:	fb05 9503 	mla	r5, r5, r3, r9
 801c880:	b2ad      	uxth	r5, r5
 801c882:	f105 0901 	add.w	r9, r5, #1
 801c886:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c88a:	122d      	asrs	r5, r5, #8
 801c88c:	704d      	strb	r5, [r1, #1]
 801c88e:	788d      	ldrb	r5, [r1, #2]
 801c890:	fb05 cc03 	mla	ip, r5, r3, ip
 801c894:	fa1f fc8c 	uxth.w	ip, ip
 801c898:	f10c 0301 	add.w	r3, ip, #1
 801c89c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c8a0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c8a4:	f881 c002 	strb.w	ip, [r1, #2]
 801c8a8:	4444      	add	r4, r8
 801c8aa:	4431      	add	r1, r6
 801c8ac:	b2a4      	uxth	r4, r4
 801c8ae:	2c07      	cmp	r4, #7
 801c8b0:	bf89      	itett	hi
 801c8b2:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801c8b4:	fa42 f208 	asrls.w	r2, r2, r8
 801c8b8:	2400      	movhi	r4, #0
 801c8ba:	785a      	ldrbhi	r2, [r3, #1]
 801c8bc:	bf8a      	itet	hi
 801c8be:	3301      	addhi	r3, #1
 801c8c0:	b2d2      	uxtbls	r2, r2
 801c8c2:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801c8c4:	e7a7      	b.n	801c816 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801c8c6:	441e      	add	r6, r3
 801c8c8:	b236      	sxth	r6, r6
 801c8ca:	e6ed      	b.n	801c6a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c8cc:	f1b9 0f01 	cmp.w	r9, #1
 801c8d0:	f47f af28 	bne.w	801c724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c8d4:	f1bb 0f01 	cmp.w	fp, #1
 801c8d8:	f47f af24 	bne.w	801c724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c8dc:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801c9b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801c8e0:	f8db 0000 	ldr.w	r0, [fp]
 801c8e4:	6803      	ldr	r3, [r0, #0]
 801c8e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c8e8:	4798      	blx	r3
 801c8ea:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801c8ee:	465a      	mov	r2, fp
 801c8f0:	d006      	beq.n	801c900 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c8f2:	f1b8 0f04 	cmp.w	r8, #4
 801c8f6:	d141      	bne.n	801c97c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801c8f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c8fa:	3300      	adds	r3, #0
 801c8fc:	bf18      	it	ne
 801c8fe:	2301      	movne	r3, #1
 801c900:	0580      	lsls	r0, r0, #22
 801c902:	d566      	bpl.n	801c9d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c904:	f1b8 0f08 	cmp.w	r8, #8
 801c908:	d163      	bne.n	801c9d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	bf0c      	ite	eq
 801c90e:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801c912:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801c916:	2f00      	cmp	r7, #0
 801c918:	f47f af04 	bne.w	801c724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c91c:	2c00      	cmp	r4, #0
 801c91e:	f47f af01 	bne.w	801c724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c924:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c926:	18f3      	adds	r3, r6, r3
 801c928:	4283      	cmp	r3, r0
 801c92a:	f73f aefb 	bgt.w	801c724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c92e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c932:	4403      	add	r3, r0
 801c934:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c936:	4283      	cmp	r3, r0
 801c938:	f73f aef4 	bgt.w	801c724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c93c:	f1b8 0f08 	cmp.w	r8, #8
 801c940:	6810      	ldr	r0, [r2, #0]
 801c942:	f04f 0600 	mov.w	r6, #0
 801c946:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801c94a:	bf18      	it	ne
 801c94c:	3501      	addne	r5, #1
 801c94e:	6804      	ldr	r4, [r0, #0]
 801c950:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801c954:	bf18      	it	ne
 801c956:	f025 0501 	bicne.w	r5, r5, #1
 801c95a:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801c95e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c960:	bf18      	it	ne
 801c962:	b2ad      	uxthne	r5, r5
 801c964:	9104      	str	r1, [sp, #16]
 801c966:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c968:	e9cd 5a00 	strd	r5, sl, [sp]
 801c96c:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801c970:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801c972:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 801c974:	47a0      	blx	r4
 801c976:	b017      	add	sp, #92	@ 0x5c
 801c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c97c:	2300      	movs	r3, #0
 801c97e:	e7bf      	b.n	801c900 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c980:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c982:	e724      	b.n	801c7ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801c984:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c986:	700b      	strb	r3, [r1, #0]
 801c988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c98a:	704b      	strb	r3, [r1, #1]
 801c98c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c98e:	708b      	strb	r3, [r1, #2]
 801c990:	e78a      	b.n	801c8a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c994:	b153      	cbz	r3, 801c9ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801c996:	441c      	add	r4, r3
 801c998:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c99a:	b2a4      	uxth	r4, r4
 801c99c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c9a0:	f004 0407 	and.w	r4, r4, #7
 801c9a4:	781a      	ldrb	r2, [r3, #0]
 801c9a6:	9326      	str	r3, [sp, #152]	@ 0x98
 801c9a8:	4122      	asrs	r2, r4
 801c9aa:	b2d2      	uxtb	r2, r2
 801c9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c9ae:	445b      	add	r3, fp
 801c9b0:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9b2:	e72a      	b.n	801c80a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801c9b4:	240252f4 	.word	0x240252f4
 801c9b8:	240252fc 	.word	0x240252fc
 801c9bc:	240252f6 	.word	0x240252f6
 801c9c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d1d7      	bne.n	801c976 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c9c6:	4b06      	ldr	r3, [pc, #24]	@ (801c9e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801c9c8:	6818      	ldr	r0, [r3, #0]
 801c9ca:	6803      	ldr	r3, [r0, #0]
 801c9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c9ce:	4798      	blx	r3
 801c9d0:	e7d1      	b.n	801c976 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	f43f aea6 	beq.w	801c724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c9d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c9dc:	e79b      	b.n	801c916 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801c9de:	bf00      	nop
 801c9e0:	240252fc 	.word	0x240252fc

0801c9e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c9e4:	b538      	push	{r3, r4, r5, lr}
 801c9e6:	4c15      	ldr	r4, [pc, #84]	@ (801ca3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c9e8:	4605      	mov	r5, r0
 801c9ea:	7823      	ldrb	r3, [r4, #0]
 801c9ec:	f3bf 8f5b 	dmb	ish
 801c9f0:	07da      	lsls	r2, r3, #31
 801c9f2:	d40b      	bmi.n	801ca0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c9f4:	4620      	mov	r0, r4
 801c9f6:	f006 f8f7 	bl	8022be8 <__cxa_guard_acquire>
 801c9fa:	b138      	cbz	r0, 801ca0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c9fc:	4620      	mov	r0, r4
 801c9fe:	f006 f8ff 	bl	8022c00 <__cxa_guard_release>
 801ca02:	4a0f      	ldr	r2, [pc, #60]	@ (801ca40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ca04:	490f      	ldr	r1, [pc, #60]	@ (801ca44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ca06:	4810      	ldr	r0, [pc, #64]	@ (801ca48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ca08:	f006 f8e7 	bl	8022bda <__aeabi_atexit>
 801ca0c:	4c0f      	ldr	r4, [pc, #60]	@ (801ca4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ca0e:	7823      	ldrb	r3, [r4, #0]
 801ca10:	f3bf 8f5b 	dmb	ish
 801ca14:	07db      	lsls	r3, r3, #31
 801ca16:	d40b      	bmi.n	801ca30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ca18:	4620      	mov	r0, r4
 801ca1a:	f006 f8e5 	bl	8022be8 <__cxa_guard_acquire>
 801ca1e:	b138      	cbz	r0, 801ca30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ca20:	4620      	mov	r0, r4
 801ca22:	f006 f8ed 	bl	8022c00 <__cxa_guard_release>
 801ca26:	4a06      	ldr	r2, [pc, #24]	@ (801ca40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ca28:	4909      	ldr	r1, [pc, #36]	@ (801ca50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ca2a:	480a      	ldr	r0, [pc, #40]	@ (801ca54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ca2c:	f006 f8d5 	bl	8022bda <__aeabi_atexit>
 801ca30:	4b05      	ldr	r3, [pc, #20]	@ (801ca48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ca32:	616b      	str	r3, [r5, #20]
 801ca34:	4b07      	ldr	r3, [pc, #28]	@ (801ca54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ca36:	61ab      	str	r3, [r5, #24]
 801ca38:	bd38      	pop	{r3, r4, r5, pc}
 801ca3a:	bf00      	nop
 801ca3c:	240253e0 	.word	0x240253e0
 801ca40:	24000000 	.word	0x24000000
 801ca44:	08019cd5 	.word	0x08019cd5
 801ca48:	240000c8 	.word	0x240000c8
 801ca4c:	240253e4 	.word	0x240253e4
 801ca50:	08019cd3 	.word	0x08019cd3
 801ca54:	240000cc 	.word	0x240000cc

0801ca58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ca58:	b538      	push	{r3, r4, r5, lr}
 801ca5a:	4c15      	ldr	r4, [pc, #84]	@ (801cab0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ca5c:	4605      	mov	r5, r0
 801ca5e:	7823      	ldrb	r3, [r4, #0]
 801ca60:	f3bf 8f5b 	dmb	ish
 801ca64:	07da      	lsls	r2, r3, #31
 801ca66:	d40b      	bmi.n	801ca80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ca68:	4620      	mov	r0, r4
 801ca6a:	f006 f8bd 	bl	8022be8 <__cxa_guard_acquire>
 801ca6e:	b138      	cbz	r0, 801ca80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ca70:	4620      	mov	r0, r4
 801ca72:	f006 f8c5 	bl	8022c00 <__cxa_guard_release>
 801ca76:	4a0f      	ldr	r2, [pc, #60]	@ (801cab4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ca78:	490f      	ldr	r1, [pc, #60]	@ (801cab8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ca7a:	4810      	ldr	r0, [pc, #64]	@ (801cabc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ca7c:	f006 f8ad 	bl	8022bda <__aeabi_atexit>
 801ca80:	4c0f      	ldr	r4, [pc, #60]	@ (801cac0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ca82:	7823      	ldrb	r3, [r4, #0]
 801ca84:	f3bf 8f5b 	dmb	ish
 801ca88:	07db      	lsls	r3, r3, #31
 801ca8a:	d40b      	bmi.n	801caa4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ca8c:	4620      	mov	r0, r4
 801ca8e:	f006 f8ab 	bl	8022be8 <__cxa_guard_acquire>
 801ca92:	b138      	cbz	r0, 801caa4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ca94:	4620      	mov	r0, r4
 801ca96:	f006 f8b3 	bl	8022c00 <__cxa_guard_release>
 801ca9a:	4a06      	ldr	r2, [pc, #24]	@ (801cab4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ca9c:	4909      	ldr	r1, [pc, #36]	@ (801cac4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ca9e:	480a      	ldr	r0, [pc, #40]	@ (801cac8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801caa0:	f006 f89b 	bl	8022bda <__aeabi_atexit>
 801caa4:	4b05      	ldr	r3, [pc, #20]	@ (801cabc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801caa6:	60eb      	str	r3, [r5, #12]
 801caa8:	4b07      	ldr	r3, [pc, #28]	@ (801cac8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801caaa:	612b      	str	r3, [r5, #16]
 801caac:	bd38      	pop	{r3, r4, r5, pc}
 801caae:	bf00      	nop
 801cab0:	240253c0 	.word	0x240253c0
 801cab4:	24000000 	.word	0x24000000
 801cab8:	08019cd9 	.word	0x08019cd9
 801cabc:	240000a8 	.word	0x240000a8
 801cac0:	240253c4 	.word	0x240253c4
 801cac4:	08019cd7 	.word	0x08019cd7
 801cac8:	240000ac 	.word	0x240000ac

0801cacc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801cacc:	b510      	push	{r4, lr}
 801cace:	4604      	mov	r4, r0
 801cad0:	f7ff ff88 	bl	801c9e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801cad4:	4620      	mov	r0, r4
 801cad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cada:	f7ff bfbd 	b.w	801ca58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801cae0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801cae0:	b538      	push	{r3, r4, r5, lr}
 801cae2:	4c15      	ldr	r4, [pc, #84]	@ (801cb38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801cae4:	4605      	mov	r5, r0
 801cae6:	7823      	ldrb	r3, [r4, #0]
 801cae8:	f3bf 8f5b 	dmb	ish
 801caec:	07da      	lsls	r2, r3, #31
 801caee:	d40b      	bmi.n	801cb08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801caf0:	4620      	mov	r0, r4
 801caf2:	f006 f879 	bl	8022be8 <__cxa_guard_acquire>
 801caf6:	b138      	cbz	r0, 801cb08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801caf8:	4620      	mov	r0, r4
 801cafa:	f006 f881 	bl	8022c00 <__cxa_guard_release>
 801cafe:	4a0f      	ldr	r2, [pc, #60]	@ (801cb3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801cb00:	490f      	ldr	r1, [pc, #60]	@ (801cb40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801cb02:	4810      	ldr	r0, [pc, #64]	@ (801cb44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801cb04:	f006 f869 	bl	8022bda <__aeabi_atexit>
 801cb08:	4c0f      	ldr	r4, [pc, #60]	@ (801cb48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801cb0a:	7823      	ldrb	r3, [r4, #0]
 801cb0c:	f3bf 8f5b 	dmb	ish
 801cb10:	07db      	lsls	r3, r3, #31
 801cb12:	d40b      	bmi.n	801cb2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801cb14:	4620      	mov	r0, r4
 801cb16:	f006 f867 	bl	8022be8 <__cxa_guard_acquire>
 801cb1a:	b138      	cbz	r0, 801cb2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801cb1c:	4620      	mov	r0, r4
 801cb1e:	f006 f86f 	bl	8022c00 <__cxa_guard_release>
 801cb22:	4a06      	ldr	r2, [pc, #24]	@ (801cb3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801cb24:	4909      	ldr	r1, [pc, #36]	@ (801cb4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801cb26:	480a      	ldr	r0, [pc, #40]	@ (801cb50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801cb28:	f006 f857 	bl	8022bda <__aeabi_atexit>
 801cb2c:	4b05      	ldr	r3, [pc, #20]	@ (801cb44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801cb2e:	626b      	str	r3, [r5, #36]	@ 0x24
 801cb30:	4b07      	ldr	r3, [pc, #28]	@ (801cb50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801cb32:	62ab      	str	r3, [r5, #40]	@ 0x28
 801cb34:	bd38      	pop	{r3, r4, r5, pc}
 801cb36:	bf00      	nop
 801cb38:	240253e8 	.word	0x240253e8
 801cb3c:	24000000 	.word	0x24000000
 801cb40:	08019ccd 	.word	0x08019ccd
 801cb44:	240000d0 	.word	0x240000d0
 801cb48:	240253ec 	.word	0x240253ec
 801cb4c:	08019ccb 	.word	0x08019ccb
 801cb50:	240000d4 	.word	0x240000d4

0801cb54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801cb54:	b538      	push	{r3, r4, r5, lr}
 801cb56:	4c15      	ldr	r4, [pc, #84]	@ (801cbac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801cb58:	4605      	mov	r5, r0
 801cb5a:	7823      	ldrb	r3, [r4, #0]
 801cb5c:	f3bf 8f5b 	dmb	ish
 801cb60:	07da      	lsls	r2, r3, #31
 801cb62:	d40b      	bmi.n	801cb7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801cb64:	4620      	mov	r0, r4
 801cb66:	f006 f83f 	bl	8022be8 <__cxa_guard_acquire>
 801cb6a:	b138      	cbz	r0, 801cb7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801cb6c:	4620      	mov	r0, r4
 801cb6e:	f006 f847 	bl	8022c00 <__cxa_guard_release>
 801cb72:	4a0f      	ldr	r2, [pc, #60]	@ (801cbb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801cb74:	490f      	ldr	r1, [pc, #60]	@ (801cbb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801cb76:	4810      	ldr	r0, [pc, #64]	@ (801cbb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801cb78:	f006 f82f 	bl	8022bda <__aeabi_atexit>
 801cb7c:	4c0f      	ldr	r4, [pc, #60]	@ (801cbbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801cb7e:	7823      	ldrb	r3, [r4, #0]
 801cb80:	f3bf 8f5b 	dmb	ish
 801cb84:	07db      	lsls	r3, r3, #31
 801cb86:	d40b      	bmi.n	801cba0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801cb88:	4620      	mov	r0, r4
 801cb8a:	f006 f82d 	bl	8022be8 <__cxa_guard_acquire>
 801cb8e:	b138      	cbz	r0, 801cba0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801cb90:	4620      	mov	r0, r4
 801cb92:	f006 f835 	bl	8022c00 <__cxa_guard_release>
 801cb96:	4a06      	ldr	r2, [pc, #24]	@ (801cbb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801cb98:	4909      	ldr	r1, [pc, #36]	@ (801cbc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801cb9a:	480a      	ldr	r0, [pc, #40]	@ (801cbc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801cb9c:	f006 f81d 	bl	8022bda <__aeabi_atexit>
 801cba0:	4b05      	ldr	r3, [pc, #20]	@ (801cbb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801cba2:	61eb      	str	r3, [r5, #28]
 801cba4:	4b07      	ldr	r3, [pc, #28]	@ (801cbc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801cba6:	622b      	str	r3, [r5, #32]
 801cba8:	bd38      	pop	{r3, r4, r5, pc}
 801cbaa:	bf00      	nop
 801cbac:	240253c8 	.word	0x240253c8
 801cbb0:	24000000 	.word	0x24000000
 801cbb4:	08019cd1 	.word	0x08019cd1
 801cbb8:	240000b0 	.word	0x240000b0
 801cbbc:	240253cc 	.word	0x240253cc
 801cbc0:	08019ccf 	.word	0x08019ccf
 801cbc4:	240000b4 	.word	0x240000b4

0801cbc8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801cbc8:	b510      	push	{r4, lr}
 801cbca:	4604      	mov	r4, r0
 801cbcc:	f7ff ff88 	bl	801cae0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbd6:	f7ff bfbd 	b.w	801cb54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801cbdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801cbdc:	b538      	push	{r3, r4, r5, lr}
 801cbde:	4c15      	ldr	r4, [pc, #84]	@ (801cc34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801cbe0:	4605      	mov	r5, r0
 801cbe2:	7823      	ldrb	r3, [r4, #0]
 801cbe4:	f3bf 8f5b 	dmb	ish
 801cbe8:	07da      	lsls	r2, r3, #31
 801cbea:	d40b      	bmi.n	801cc04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801cbec:	4620      	mov	r0, r4
 801cbee:	f005 fffb 	bl	8022be8 <__cxa_guard_acquire>
 801cbf2:	b138      	cbz	r0, 801cc04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	f006 f803 	bl	8022c00 <__cxa_guard_release>
 801cbfa:	4a0f      	ldr	r2, [pc, #60]	@ (801cc38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801cbfc:	490f      	ldr	r1, [pc, #60]	@ (801cc3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801cbfe:	4810      	ldr	r0, [pc, #64]	@ (801cc40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801cc00:	f005 ffeb 	bl	8022bda <__aeabi_atexit>
 801cc04:	4c0f      	ldr	r4, [pc, #60]	@ (801cc44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801cc06:	7823      	ldrb	r3, [r4, #0]
 801cc08:	f3bf 8f5b 	dmb	ish
 801cc0c:	07db      	lsls	r3, r3, #31
 801cc0e:	d40b      	bmi.n	801cc28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801cc10:	4620      	mov	r0, r4
 801cc12:	f005 ffe9 	bl	8022be8 <__cxa_guard_acquire>
 801cc16:	b138      	cbz	r0, 801cc28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801cc18:	4620      	mov	r0, r4
 801cc1a:	f005 fff1 	bl	8022c00 <__cxa_guard_release>
 801cc1e:	4a06      	ldr	r2, [pc, #24]	@ (801cc38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801cc20:	4909      	ldr	r1, [pc, #36]	@ (801cc48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801cc22:	480a      	ldr	r0, [pc, #40]	@ (801cc4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801cc24:	f005 ffd9 	bl	8022bda <__aeabi_atexit>
 801cc28:	4b05      	ldr	r3, [pc, #20]	@ (801cc40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801cc2a:	636b      	str	r3, [r5, #52]	@ 0x34
 801cc2c:	4b07      	ldr	r3, [pc, #28]	@ (801cc4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801cc2e:	63ab      	str	r3, [r5, #56]	@ 0x38
 801cc30:	bd38      	pop	{r3, r4, r5, pc}
 801cc32:	bf00      	nop
 801cc34:	240253d0 	.word	0x240253d0
 801cc38:	24000000 	.word	0x24000000
 801cc3c:	08019cc5 	.word	0x08019cc5
 801cc40:	240000b8 	.word	0x240000b8
 801cc44:	240253d4 	.word	0x240253d4
 801cc48:	08019cc3 	.word	0x08019cc3
 801cc4c:	240000bc 	.word	0x240000bc

0801cc50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801cc50:	b538      	push	{r3, r4, r5, lr}
 801cc52:	4c15      	ldr	r4, [pc, #84]	@ (801cca8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801cc54:	4605      	mov	r5, r0
 801cc56:	7823      	ldrb	r3, [r4, #0]
 801cc58:	f3bf 8f5b 	dmb	ish
 801cc5c:	07da      	lsls	r2, r3, #31
 801cc5e:	d40b      	bmi.n	801cc78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801cc60:	4620      	mov	r0, r4
 801cc62:	f005 ffc1 	bl	8022be8 <__cxa_guard_acquire>
 801cc66:	b138      	cbz	r0, 801cc78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801cc68:	4620      	mov	r0, r4
 801cc6a:	f005 ffc9 	bl	8022c00 <__cxa_guard_release>
 801cc6e:	4a0f      	ldr	r2, [pc, #60]	@ (801ccac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801cc70:	490f      	ldr	r1, [pc, #60]	@ (801ccb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801cc72:	4810      	ldr	r0, [pc, #64]	@ (801ccb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801cc74:	f005 ffb1 	bl	8022bda <__aeabi_atexit>
 801cc78:	4c0f      	ldr	r4, [pc, #60]	@ (801ccb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801cc7a:	7823      	ldrb	r3, [r4, #0]
 801cc7c:	f3bf 8f5b 	dmb	ish
 801cc80:	07db      	lsls	r3, r3, #31
 801cc82:	d40b      	bmi.n	801cc9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801cc84:	4620      	mov	r0, r4
 801cc86:	f005 ffaf 	bl	8022be8 <__cxa_guard_acquire>
 801cc8a:	b138      	cbz	r0, 801cc9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801cc8c:	4620      	mov	r0, r4
 801cc8e:	f005 ffb7 	bl	8022c00 <__cxa_guard_release>
 801cc92:	4a06      	ldr	r2, [pc, #24]	@ (801ccac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801cc94:	4909      	ldr	r1, [pc, #36]	@ (801ccbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801cc96:	480a      	ldr	r0, [pc, #40]	@ (801ccc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801cc98:	f005 ff9f 	bl	8022bda <__aeabi_atexit>
 801cc9c:	4b05      	ldr	r3, [pc, #20]	@ (801ccb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801cc9e:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801cca0:	4b07      	ldr	r3, [pc, #28]	@ (801ccc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801cca2:	632b      	str	r3, [r5, #48]	@ 0x30
 801cca4:	bd38      	pop	{r3, r4, r5, pc}
 801cca6:	bf00      	nop
 801cca8:	240253a8 	.word	0x240253a8
 801ccac:	24000000 	.word	0x24000000
 801ccb0:	08019cc9 	.word	0x08019cc9
 801ccb4:	24000090 	.word	0x24000090
 801ccb8:	240253ac 	.word	0x240253ac
 801ccbc:	08019cc7 	.word	0x08019cc7
 801ccc0:	24000094 	.word	0x24000094

0801ccc4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ccc4:	b510      	push	{r4, lr}
 801ccc6:	4604      	mov	r4, r0
 801ccc8:	f7ff ff88 	bl	801cbdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801cccc:	4620      	mov	r0, r4
 801ccce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccd2:	f7ff bfbd 	b.w	801cc50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ccd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ccd8:	b538      	push	{r3, r4, r5, lr}
 801ccda:	4c15      	ldr	r4, [pc, #84]	@ (801cd30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ccdc:	4605      	mov	r5, r0
 801ccde:	7823      	ldrb	r3, [r4, #0]
 801cce0:	f3bf 8f5b 	dmb	ish
 801cce4:	07da      	lsls	r2, r3, #31
 801cce6:	d40b      	bmi.n	801cd00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801cce8:	4620      	mov	r0, r4
 801ccea:	f005 ff7d 	bl	8022be8 <__cxa_guard_acquire>
 801ccee:	b138      	cbz	r0, 801cd00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ccf0:	4620      	mov	r0, r4
 801ccf2:	f005 ff85 	bl	8022c00 <__cxa_guard_release>
 801ccf6:	4a0f      	ldr	r2, [pc, #60]	@ (801cd34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ccf8:	490f      	ldr	r1, [pc, #60]	@ (801cd38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ccfa:	4810      	ldr	r0, [pc, #64]	@ (801cd3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ccfc:	f005 ff6d 	bl	8022bda <__aeabi_atexit>
 801cd00:	4c0f      	ldr	r4, [pc, #60]	@ (801cd40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801cd02:	7823      	ldrb	r3, [r4, #0]
 801cd04:	f3bf 8f5b 	dmb	ish
 801cd08:	07db      	lsls	r3, r3, #31
 801cd0a:	d40b      	bmi.n	801cd24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801cd0c:	4620      	mov	r0, r4
 801cd0e:	f005 ff6b 	bl	8022be8 <__cxa_guard_acquire>
 801cd12:	b138      	cbz	r0, 801cd24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801cd14:	4620      	mov	r0, r4
 801cd16:	f005 ff73 	bl	8022c00 <__cxa_guard_release>
 801cd1a:	4a06      	ldr	r2, [pc, #24]	@ (801cd34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801cd1c:	4909      	ldr	r1, [pc, #36]	@ (801cd44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801cd1e:	480a      	ldr	r0, [pc, #40]	@ (801cd48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801cd20:	f005 ff5b 	bl	8022bda <__aeabi_atexit>
 801cd24:	4b05      	ldr	r3, [pc, #20]	@ (801cd3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801cd26:	646b      	str	r3, [r5, #68]	@ 0x44
 801cd28:	4b07      	ldr	r3, [pc, #28]	@ (801cd48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801cd2a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801cd2c:	bd38      	pop	{r3, r4, r5, pc}
 801cd2e:	bf00      	nop
 801cd30:	240253d8 	.word	0x240253d8
 801cd34:	24000000 	.word	0x24000000
 801cd38:	08019cbd 	.word	0x08019cbd
 801cd3c:	240000c0 	.word	0x240000c0
 801cd40:	240253dc 	.word	0x240253dc
 801cd44:	08019cbb 	.word	0x08019cbb
 801cd48:	240000c4 	.word	0x240000c4

0801cd4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801cd4c:	b538      	push	{r3, r4, r5, lr}
 801cd4e:	4c15      	ldr	r4, [pc, #84]	@ (801cda4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801cd50:	4605      	mov	r5, r0
 801cd52:	7823      	ldrb	r3, [r4, #0]
 801cd54:	f3bf 8f5b 	dmb	ish
 801cd58:	07da      	lsls	r2, r3, #31
 801cd5a:	d40b      	bmi.n	801cd74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801cd5c:	4620      	mov	r0, r4
 801cd5e:	f005 ff43 	bl	8022be8 <__cxa_guard_acquire>
 801cd62:	b138      	cbz	r0, 801cd74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801cd64:	4620      	mov	r0, r4
 801cd66:	f005 ff4b 	bl	8022c00 <__cxa_guard_release>
 801cd6a:	4a0f      	ldr	r2, [pc, #60]	@ (801cda8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801cd6c:	490f      	ldr	r1, [pc, #60]	@ (801cdac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801cd6e:	4810      	ldr	r0, [pc, #64]	@ (801cdb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801cd70:	f005 ff33 	bl	8022bda <__aeabi_atexit>
 801cd74:	4c0f      	ldr	r4, [pc, #60]	@ (801cdb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801cd76:	7823      	ldrb	r3, [r4, #0]
 801cd78:	f3bf 8f5b 	dmb	ish
 801cd7c:	07db      	lsls	r3, r3, #31
 801cd7e:	d40b      	bmi.n	801cd98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801cd80:	4620      	mov	r0, r4
 801cd82:	f005 ff31 	bl	8022be8 <__cxa_guard_acquire>
 801cd86:	b138      	cbz	r0, 801cd98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801cd88:	4620      	mov	r0, r4
 801cd8a:	f005 ff39 	bl	8022c00 <__cxa_guard_release>
 801cd8e:	4a06      	ldr	r2, [pc, #24]	@ (801cda8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801cd90:	4909      	ldr	r1, [pc, #36]	@ (801cdb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801cd92:	480a      	ldr	r0, [pc, #40]	@ (801cdbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801cd94:	f005 ff21 	bl	8022bda <__aeabi_atexit>
 801cd98:	4b05      	ldr	r3, [pc, #20]	@ (801cdb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801cd9a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801cd9c:	4b07      	ldr	r3, [pc, #28]	@ (801cdbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801cd9e:	642b      	str	r3, [r5, #64]	@ 0x40
 801cda0:	bd38      	pop	{r3, r4, r5, pc}
 801cda2:	bf00      	nop
 801cda4:	240253b8 	.word	0x240253b8
 801cda8:	24000000 	.word	0x24000000
 801cdac:	08019cc1 	.word	0x08019cc1
 801cdb0:	240000a0 	.word	0x240000a0
 801cdb4:	240253bc 	.word	0x240253bc
 801cdb8:	08019cbf 	.word	0x08019cbf
 801cdbc:	240000a4 	.word	0x240000a4

0801cdc0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801cdc0:	b510      	push	{r4, lr}
 801cdc2:	4604      	mov	r4, r0
 801cdc4:	f7ff ff88 	bl	801ccd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801cdc8:	4620      	mov	r0, r4
 801cdca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cdce:	f7ff bfbd 	b.w	801cd4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801cdd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801cdd4:	b538      	push	{r3, r4, r5, lr}
 801cdd6:	4c15      	ldr	r4, [pc, #84]	@ (801ce2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801cdd8:	4605      	mov	r5, r0
 801cdda:	7823      	ldrb	r3, [r4, #0]
 801cddc:	f3bf 8f5b 	dmb	ish
 801cde0:	07da      	lsls	r2, r3, #31
 801cde2:	d40b      	bmi.n	801cdfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801cde4:	4620      	mov	r0, r4
 801cde6:	f005 feff 	bl	8022be8 <__cxa_guard_acquire>
 801cdea:	b138      	cbz	r0, 801cdfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801cdec:	4620      	mov	r0, r4
 801cdee:	f005 ff07 	bl	8022c00 <__cxa_guard_release>
 801cdf2:	4a0f      	ldr	r2, [pc, #60]	@ (801ce30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801cdf4:	490f      	ldr	r1, [pc, #60]	@ (801ce34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801cdf6:	4810      	ldr	r0, [pc, #64]	@ (801ce38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801cdf8:	f005 feef 	bl	8022bda <__aeabi_atexit>
 801cdfc:	4c0f      	ldr	r4, [pc, #60]	@ (801ce3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801cdfe:	7823      	ldrb	r3, [r4, #0]
 801ce00:	f3bf 8f5b 	dmb	ish
 801ce04:	07db      	lsls	r3, r3, #31
 801ce06:	d40b      	bmi.n	801ce20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ce08:	4620      	mov	r0, r4
 801ce0a:	f005 feed 	bl	8022be8 <__cxa_guard_acquire>
 801ce0e:	b138      	cbz	r0, 801ce20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ce10:	4620      	mov	r0, r4
 801ce12:	f005 fef5 	bl	8022c00 <__cxa_guard_release>
 801ce16:	4a06      	ldr	r2, [pc, #24]	@ (801ce30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ce18:	4909      	ldr	r1, [pc, #36]	@ (801ce40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ce1a:	480a      	ldr	r0, [pc, #40]	@ (801ce44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ce1c:	f005 fedd 	bl	8022bda <__aeabi_atexit>
 801ce20:	4b05      	ldr	r3, [pc, #20]	@ (801ce38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ce22:	656b      	str	r3, [r5, #84]	@ 0x54
 801ce24:	4b07      	ldr	r3, [pc, #28]	@ (801ce44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ce26:	65ab      	str	r3, [r5, #88]	@ 0x58
 801ce28:	bd38      	pop	{r3, r4, r5, pc}
 801ce2a:	bf00      	nop
 801ce2c:	240253b0 	.word	0x240253b0
 801ce30:	24000000 	.word	0x24000000
 801ce34:	08019cb5 	.word	0x08019cb5
 801ce38:	24000098 	.word	0x24000098
 801ce3c:	240253b4 	.word	0x240253b4
 801ce40:	08019cb3 	.word	0x08019cb3
 801ce44:	2400009c 	.word	0x2400009c

0801ce48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ce48:	b538      	push	{r3, r4, r5, lr}
 801ce4a:	4c15      	ldr	r4, [pc, #84]	@ (801cea0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ce4c:	4605      	mov	r5, r0
 801ce4e:	7823      	ldrb	r3, [r4, #0]
 801ce50:	f3bf 8f5b 	dmb	ish
 801ce54:	07da      	lsls	r2, r3, #31
 801ce56:	d40b      	bmi.n	801ce70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ce58:	4620      	mov	r0, r4
 801ce5a:	f005 fec5 	bl	8022be8 <__cxa_guard_acquire>
 801ce5e:	b138      	cbz	r0, 801ce70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ce60:	4620      	mov	r0, r4
 801ce62:	f005 fecd 	bl	8022c00 <__cxa_guard_release>
 801ce66:	4a0f      	ldr	r2, [pc, #60]	@ (801cea4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ce68:	490f      	ldr	r1, [pc, #60]	@ (801cea8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ce6a:	4810      	ldr	r0, [pc, #64]	@ (801ceac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ce6c:	f005 feb5 	bl	8022bda <__aeabi_atexit>
 801ce70:	4c0f      	ldr	r4, [pc, #60]	@ (801ceb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ce72:	7823      	ldrb	r3, [r4, #0]
 801ce74:	f3bf 8f5b 	dmb	ish
 801ce78:	07db      	lsls	r3, r3, #31
 801ce7a:	d40b      	bmi.n	801ce94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ce7c:	4620      	mov	r0, r4
 801ce7e:	f005 feb3 	bl	8022be8 <__cxa_guard_acquire>
 801ce82:	b138      	cbz	r0, 801ce94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ce84:	4620      	mov	r0, r4
 801ce86:	f005 febb 	bl	8022c00 <__cxa_guard_release>
 801ce8a:	4a06      	ldr	r2, [pc, #24]	@ (801cea4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ce8c:	4909      	ldr	r1, [pc, #36]	@ (801ceb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ce8e:	480a      	ldr	r0, [pc, #40]	@ (801ceb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ce90:	f005 fea3 	bl	8022bda <__aeabi_atexit>
 801ce94:	4b05      	ldr	r3, [pc, #20]	@ (801ceac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ce96:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801ce98:	4b07      	ldr	r3, [pc, #28]	@ (801ceb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ce9a:	652b      	str	r3, [r5, #80]	@ 0x50
 801ce9c:	bd38      	pop	{r3, r4, r5, pc}
 801ce9e:	bf00      	nop
 801cea0:	240253a0 	.word	0x240253a0
 801cea4:	24000000 	.word	0x24000000
 801cea8:	08019cb9 	.word	0x08019cb9
 801ceac:	24000088 	.word	0x24000088
 801ceb0:	240253a4 	.word	0x240253a4
 801ceb4:	08019cb7 	.word	0x08019cb7
 801ceb8:	2400008c 	.word	0x2400008c

0801cebc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801cebc:	b510      	push	{r4, lr}
 801cebe:	4604      	mov	r4, r0
 801cec0:	f7ff ff88 	bl	801cdd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801cec4:	4620      	mov	r0, r4
 801cec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ceca:	f7ff bfbd 	b.w	801ce48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801cece <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801cece:	b510      	push	{r4, lr}
 801ced0:	4604      	mov	r4, r0
 801ced2:	f7ff fff3 	bl	801cebc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801ced6:	4620      	mov	r0, r4
 801ced8:	f7ff ff72 	bl	801cdc0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801cedc:	4620      	mov	r0, r4
 801cede:	f7ff fe73 	bl	801cbc8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801cee2:	4620      	mov	r0, r4
 801cee4:	f7ff fdf2 	bl	801cacc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801cee8:	4620      	mov	r0, r4
 801ceea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ceee:	f7ff bee9 	b.w	801ccc4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801cef4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801cef4:	b538      	push	{r3, r4, r5, lr}
 801cef6:	4c0b      	ldr	r4, [pc, #44]	@ (801cf24 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801cef8:	4605      	mov	r5, r0
 801cefa:	7823      	ldrb	r3, [r4, #0]
 801cefc:	f3bf 8f5b 	dmb	ish
 801cf00:	07db      	lsls	r3, r3, #31
 801cf02:	d40b      	bmi.n	801cf1c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801cf04:	4620      	mov	r0, r4
 801cf06:	f005 fe6f 	bl	8022be8 <__cxa_guard_acquire>
 801cf0a:	b138      	cbz	r0, 801cf1c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801cf0c:	4620      	mov	r0, r4
 801cf0e:	f005 fe77 	bl	8022c00 <__cxa_guard_release>
 801cf12:	4a05      	ldr	r2, [pc, #20]	@ (801cf28 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801cf14:	4905      	ldr	r1, [pc, #20]	@ (801cf2c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801cf16:	4806      	ldr	r0, [pc, #24]	@ (801cf30 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801cf18:	f005 fe5f 	bl	8022bda <__aeabi_atexit>
 801cf1c:	4b04      	ldr	r3, [pc, #16]	@ (801cf30 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801cf1e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801cf20:	bd38      	pop	{r3, r4, r5, pc}
 801cf22:	bf00      	nop
 801cf24:	24025394 	.word	0x24025394
 801cf28:	24000000 	.word	0x24000000
 801cf2c:	08019cb1 	.word	0x08019cb1
 801cf30:	24000080 	.word	0x24000080

0801cf34 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801cf34:	b538      	push	{r3, r4, r5, lr}
 801cf36:	4c0b      	ldr	r4, [pc, #44]	@ (801cf64 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801cf38:	4605      	mov	r5, r0
 801cf3a:	7823      	ldrb	r3, [r4, #0]
 801cf3c:	f3bf 8f5b 	dmb	ish
 801cf40:	07db      	lsls	r3, r3, #31
 801cf42:	d40b      	bmi.n	801cf5c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801cf44:	4620      	mov	r0, r4
 801cf46:	f005 fe4f 	bl	8022be8 <__cxa_guard_acquire>
 801cf4a:	b138      	cbz	r0, 801cf5c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801cf4c:	4620      	mov	r0, r4
 801cf4e:	f005 fe57 	bl	8022c00 <__cxa_guard_release>
 801cf52:	4a05      	ldr	r2, [pc, #20]	@ (801cf68 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801cf54:	4905      	ldr	r1, [pc, #20]	@ (801cf6c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801cf56:	4806      	ldr	r0, [pc, #24]	@ (801cf70 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801cf58:	f005 fe3f 	bl	8022bda <__aeabi_atexit>
 801cf5c:	4b04      	ldr	r3, [pc, #16]	@ (801cf70 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801cf5e:	662b      	str	r3, [r5, #96]	@ 0x60
 801cf60:	bd38      	pop	{r3, r4, r5, pc}
 801cf62:	bf00      	nop
 801cf64:	24025398 	.word	0x24025398
 801cf68:	24000000 	.word	0x24000000
 801cf6c:	08019caf 	.word	0x08019caf
 801cf70:	24000084 	.word	0x24000084

0801cf74 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801cf74:	b570      	push	{r4, r5, r6, lr}
 801cf76:	4d0c      	ldr	r5, [pc, #48]	@ (801cfa8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801cf78:	4606      	mov	r6, r0
 801cf7a:	4c0c      	ldr	r4, [pc, #48]	@ (801cfac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801cf7c:	782b      	ldrb	r3, [r5, #0]
 801cf7e:	f3bf 8f5b 	dmb	ish
 801cf82:	f013 0f01 	tst.w	r3, #1
 801cf86:	d10d      	bne.n	801cfa4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801cf88:	4628      	mov	r0, r5
 801cf8a:	f005 fe2d 	bl	8022be8 <__cxa_guard_acquire>
 801cf8e:	b148      	cbz	r0, 801cfa4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801cf90:	4b07      	ldr	r3, [pc, #28]	@ (801cfb0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801cf92:	4628      	mov	r0, r5
 801cf94:	6023      	str	r3, [r4, #0]
 801cf96:	f005 fe33 	bl	8022c00 <__cxa_guard_release>
 801cf9a:	4a06      	ldr	r2, [pc, #24]	@ (801cfb4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801cf9c:	4620      	mov	r0, r4
 801cf9e:	4906      	ldr	r1, [pc, #24]	@ (801cfb8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801cfa0:	f005 fe1b 	bl	8022bda <__aeabi_atexit>
 801cfa4:	6674      	str	r4, [r6, #100]	@ 0x64
 801cfa6:	bd70      	pop	{r4, r5, r6, pc}
 801cfa8:	2402539c 	.word	0x2402539c
 801cfac:	240254f4 	.word	0x240254f4
 801cfb0:	080279f8 	.word	0x080279f8
 801cfb4:	24000000 	.word	0x24000000
 801cfb8:	08019cad 	.word	0x08019cad

0801cfbc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801cfbc:	b510      	push	{r4, lr}
 801cfbe:	4604      	mov	r4, r0
 801cfc0:	f7ff ff98 	bl	801cef4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801cfc4:	4620      	mov	r0, r4
 801cfc6:	f7ff ffb5 	bl	801cf34 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801cfca:	4620      	mov	r0, r4
 801cfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfd0:	f7ff bfd0 	b.w	801cf74 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801cfd4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801cfd4:	b570      	push	{r4, r5, r6, lr}
 801cfd6:	4d0c      	ldr	r5, [pc, #48]	@ (801d008 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801cfd8:	4606      	mov	r6, r0
 801cfda:	4c0c      	ldr	r4, [pc, #48]	@ (801d00c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801cfdc:	782b      	ldrb	r3, [r5, #0]
 801cfde:	f3bf 8f5b 	dmb	ish
 801cfe2:	f013 0f01 	tst.w	r3, #1
 801cfe6:	d10d      	bne.n	801d004 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801cfe8:	4628      	mov	r0, r5
 801cfea:	f005 fdfd 	bl	8022be8 <__cxa_guard_acquire>
 801cfee:	b148      	cbz	r0, 801d004 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801cff0:	4b07      	ldr	r3, [pc, #28]	@ (801d010 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801cff2:	4628      	mov	r0, r5
 801cff4:	6023      	str	r3, [r4, #0]
 801cff6:	f005 fe03 	bl	8022c00 <__cxa_guard_release>
 801cffa:	4a06      	ldr	r2, [pc, #24]	@ (801d014 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801cffc:	4620      	mov	r0, r4
 801cffe:	4906      	ldr	r1, [pc, #24]	@ (801d018 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801d000:	f005 fdeb 	bl	8022bda <__aeabi_atexit>
 801d004:	66b4      	str	r4, [r6, #104]	@ 0x68
 801d006:	bd70      	pop	{r4, r5, r6, pc}
 801d008:	24025390 	.word	0x24025390
 801d00c:	240253f0 	.word	0x240253f0
 801d010:	08027a10 	.word	0x08027a10
 801d014:	24000000 	.word	0x24000000
 801d018:	08019cab 	.word	0x08019cab

0801d01c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d020:	b087      	sub	sp, #28
 801d022:	788d      	ldrb	r5, [r1, #2]
 801d024:	f891 9000 	ldrb.w	r9, [r1]
 801d028:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801d02c:	9501      	str	r5, [sp, #4]
 801d02e:	784d      	ldrb	r5, [r1, #1]
 801d030:	9203      	str	r2, [sp, #12]
 801d032:	9502      	str	r5, [sp, #8]
 801d034:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801d038:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801d03c:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801d040:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801d044:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801d048:	fb06 0708 	mla	r7, r6, r8, r0
 801d04c:	2e00      	cmp	r6, #0
 801d04e:	eb02 0a07 	add.w	sl, r2, r7
 801d052:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801d056:	9d01      	ldr	r5, [sp, #4]
 801d058:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801d05c:	ea45 0509 	orr.w	r5, r5, r9
 801d060:	9505      	str	r5, [sp, #20]
 801d062:	f2c0 80b2 	blt.w	801d1ca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801d066:	45b3      	cmp	fp, r6
 801d068:	f340 80af 	ble.w	801d1ca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801d06c:	2800      	cmp	r0, #0
 801d06e:	f2c0 80aa 	blt.w	801d1c6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801d072:	4580      	cmp	r8, r0
 801d074:	f340 80a7 	ble.w	801d1c6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801d078:	9a03      	ldr	r2, [sp, #12]
 801d07a:	5dd7      	ldrb	r7, [r2, r7]
 801d07c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d080:	441f      	add	r7, r3
 801d082:	1c42      	adds	r2, r0, #1
 801d084:	f100 80a4 	bmi.w	801d1d0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801d088:	4590      	cmp	r8, r2
 801d08a:	f340 80a1 	ble.w	801d1d0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801d08e:	2c00      	cmp	r4, #0
 801d090:	f000 809e 	beq.w	801d1d0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801d094:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801d098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d09c:	441d      	add	r5, r3
 801d09e:	3601      	adds	r6, #1
 801d0a0:	f100 809a 	bmi.w	801d1d8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801d0a4:	45b3      	cmp	fp, r6
 801d0a6:	f340 8097 	ble.w	801d1d8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801d0aa:	f1bc 0f00 	cmp.w	ip, #0
 801d0ae:	f000 8093 	beq.w	801d1d8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801d0b2:	2800      	cmp	r0, #0
 801d0b4:	f2c0 808e 	blt.w	801d1d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801d0b8:	4580      	cmp	r8, r0
 801d0ba:	f340 808b 	ble.w	801d1d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801d0be:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801d0c2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d0c6:	441e      	add	r6, r3
 801d0c8:	3001      	adds	r0, #1
 801d0ca:	f100 8088 	bmi.w	801d1de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801d0ce:	4580      	cmp	r8, r0
 801d0d0:	f340 8085 	ble.w	801d1de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801d0d4:	2c00      	cmp	r4, #0
 801d0d6:	f000 8082 	beq.w	801d1de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801d0da:	44d0      	add	r8, sl
 801d0dc:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d0e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d0e4:	4413      	add	r3, r2
 801d0e6:	b2a4      	uxth	r4, r4
 801d0e8:	f895 a000 	ldrb.w	sl, [r5]
 801d0ec:	fa1f fc8c 	uxth.w	ip, ip
 801d0f0:	fb04 fb0c 	mul.w	fp, r4, ip
 801d0f4:	0124      	lsls	r4, r4, #4
 801d0f6:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801d0fa:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801d0fe:	eba4 040b 	sub.w	r4, r4, fp
 801d102:	fa1f f08c 	uxth.w	r0, ip
 801d106:	b2a2      	uxth	r2, r4
 801d108:	783c      	ldrb	r4, [r7, #0]
 801d10a:	eba8 0800 	sub.w	r8, r8, r0
 801d10e:	fa1f fc8e 	uxth.w	ip, lr
 801d112:	fb02 fa0a 	mul.w	sl, r2, sl
 801d116:	ea6f 0e0e 	mvn.w	lr, lr
 801d11a:	fa1f f888 	uxth.w	r8, r8
 801d11e:	fa5f fe8e 	uxtb.w	lr, lr
 801d122:	fb08 aa04 	mla	sl, r8, r4, sl
 801d126:	7834      	ldrb	r4, [r6, #0]
 801d128:	fb19 f90e 	smulbb	r9, r9, lr
 801d12c:	fb00 aa04 	mla	sl, r0, r4, sl
 801d130:	781c      	ldrb	r4, [r3, #0]
 801d132:	fb0b a404 	mla	r4, fp, r4, sl
 801d136:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d13a:	fb04 990c 	mla	r9, r4, ip, r9
 801d13e:	fa1f f989 	uxth.w	r9, r9
 801d142:	f109 0401 	add.w	r4, r9, #1
 801d146:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801d14a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d14e:	f881 9000 	strb.w	r9, [r1]
 801d152:	f895 9001 	ldrb.w	r9, [r5, #1]
 801d156:	787c      	ldrb	r4, [r7, #1]
 801d158:	fb02 f909 	mul.w	r9, r2, r9
 801d15c:	fb08 9904 	mla	r9, r8, r4, r9
 801d160:	7874      	ldrb	r4, [r6, #1]
 801d162:	fb00 9904 	mla	r9, r0, r4, r9
 801d166:	785c      	ldrb	r4, [r3, #1]
 801d168:	fb0b 9404 	mla	r4, fp, r4, r9
 801d16c:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801d170:	9c02      	ldr	r4, [sp, #8]
 801d172:	fb14 f90e 	smulbb	r9, r4, lr
 801d176:	fb0a 940c 	mla	r4, sl, ip, r9
 801d17a:	b2a4      	uxth	r4, r4
 801d17c:	f104 0901 	add.w	r9, r4, #1
 801d180:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801d184:	1224      	asrs	r4, r4, #8
 801d186:	704c      	strb	r4, [r1, #1]
 801d188:	78ad      	ldrb	r5, [r5, #2]
 801d18a:	78bc      	ldrb	r4, [r7, #2]
 801d18c:	436a      	muls	r2, r5
 801d18e:	789b      	ldrb	r3, [r3, #2]
 801d190:	fb08 2204 	mla	r2, r8, r4, r2
 801d194:	78b4      	ldrb	r4, [r6, #2]
 801d196:	fb00 2004 	mla	r0, r0, r4, r2
 801d19a:	fb0b 0b03 	mla	fp, fp, r3, r0
 801d19e:	9b01      	ldr	r3, [sp, #4]
 801d1a0:	fb13 fe0e 	smulbb	lr, r3, lr
 801d1a4:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801d1a8:	fb0b ec0c 	mla	ip, fp, ip, lr
 801d1ac:	fa1f fc8c 	uxth.w	ip, ip
 801d1b0:	f10c 0e01 	add.w	lr, ip, #1
 801d1b4:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d1b8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d1bc:	f881 c002 	strb.w	ip, [r1, #2]
 801d1c0:	b007      	add	sp, #28
 801d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1c6:	af05      	add	r7, sp, #20
 801d1c8:	e75b      	b.n	801d082 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801d1ca:	ad05      	add	r5, sp, #20
 801d1cc:	462f      	mov	r7, r5
 801d1ce:	e766      	b.n	801d09e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801d1d0:	ad05      	add	r5, sp, #20
 801d1d2:	e764      	b.n	801d09e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801d1d4:	ae05      	add	r6, sp, #20
 801d1d6:	e777      	b.n	801d0c8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801d1d8:	ab05      	add	r3, sp, #20
 801d1da:	461e      	mov	r6, r3
 801d1dc:	e783      	b.n	801d0e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801d1de:	ab05      	add	r3, sp, #20
 801d1e0:	e781      	b.n	801d0e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801d1e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d1e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1e6:	b093      	sub	sp, #76	@ 0x4c
 801d1e8:	9210      	str	r2, [sp, #64]	@ 0x40
 801d1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1ec:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d1ee:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801d1f2:	9011      	str	r0, [sp, #68]	@ 0x44
 801d1f4:	930e      	str	r3, [sp, #56]	@ 0x38
 801d1f6:	6850      	ldr	r0, [r2, #4]
 801d1f8:	910d      	str	r1, [sp, #52]	@ 0x34
 801d1fa:	6812      	ldr	r2, [r2, #0]
 801d1fc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801d200:	fb00 1303 	mla	r3, r0, r3, r1
 801d204:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d208:	18d3      	adds	r3, r2, r3
 801d20a:	930a      	str	r3, [sp, #40]	@ 0x28
 801d20c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	930c      	str	r3, [sp, #48]	@ 0x30
 801d212:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d214:	685c      	ldr	r4, [r3, #4]
 801d216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d218:	3404      	adds	r4, #4
 801d21a:	43db      	mvns	r3, r3
 801d21c:	b2db      	uxtb	r3, r3
 801d21e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d220:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d222:	2b00      	cmp	r3, #0
 801d224:	dc03      	bgt.n	801d22e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d226:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d228:	2b00      	cmp	r3, #0
 801d22a:	f340 8250 	ble.w	801d6ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801d22e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d230:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d234:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d238:	1e48      	subs	r0, r1, #1
 801d23a:	1e55      	subs	r5, r2, #1
 801d23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d23e:	2b00      	cmp	r3, #0
 801d240:	f340 80ee 	ble.w	801d420 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d244:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801d246:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d248:	1436      	asrs	r6, r6, #16
 801d24a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d24e:	d406      	bmi.n	801d25e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d250:	4286      	cmp	r6, r0
 801d252:	da04      	bge.n	801d25e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d254:	2b00      	cmp	r3, #0
 801d256:	db02      	blt.n	801d25e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d258:	42ab      	cmp	r3, r5
 801d25a:	f2c0 80e2 	blt.w	801d422 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d25e:	3601      	adds	r6, #1
 801d260:	f100 80cf 	bmi.w	801d402 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d264:	42b1      	cmp	r1, r6
 801d266:	f2c0 80cc 	blt.w	801d402 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d26a:	3301      	adds	r3, #1
 801d26c:	f100 80c9 	bmi.w	801d402 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d270:	429a      	cmp	r2, r3
 801d272:	f2c0 80c6 	blt.w	801d402 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d276:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801d27a:	f1bb 0f00 	cmp.w	fp, #0
 801d27e:	f340 80f1 	ble.w	801d464 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d282:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d284:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d286:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801d288:	141d      	asrs	r5, r3, #16
 801d28a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d28c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d290:	68c7      	ldr	r7, [r0, #12]
 801d292:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d294:	1418      	asrs	r0, r3, #16
 801d296:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801d29a:	6892      	ldr	r2, [r2, #8]
 801d29c:	f100 8137 	bmi.w	801d50e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d2a0:	f102 3cff 	add.w	ip, r2, #4294967295
 801d2a4:	4560      	cmp	r0, ip
 801d2a6:	f280 8132 	bge.w	801d50e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d2aa:	2d00      	cmp	r5, #0
 801d2ac:	f2c0 812f 	blt.w	801d50e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d2b0:	f107 3cff 	add.w	ip, r7, #4294967295
 801d2b4:	4565      	cmp	r5, ip
 801d2b6:	f280 812a 	bge.w	801d50e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d2ba:	b212      	sxth	r2, r2
 801d2bc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d2be:	fb05 0002 	mla	r0, r5, r2, r0
 801d2c2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d2c4:	f817 c000 	ldrb.w	ip, [r7, r0]
 801d2c8:	4405      	add	r5, r0
 801d2ca:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d2ce:	eb04 0e0c 	add.w	lr, r4, ip
 801d2d2:	f1b8 0f00 	cmp.w	r8, #0
 801d2d6:	f000 810c 	beq.w	801d4f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801d2da:	786f      	ldrb	r7, [r5, #1]
 801d2dc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d2e0:	4427      	add	r7, r4
 801d2e2:	2900      	cmp	r1, #0
 801d2e4:	f000 810d 	beq.w	801d502 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801d2e8:	18a8      	adds	r0, r5, r2
 801d2ea:	5caa      	ldrb	r2, [r5, r2]
 801d2ec:	7840      	ldrb	r0, [r0, #1]
 801d2ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d2f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d2f6:	4422      	add	r2, r4
 801d2f8:	4420      	add	r0, r4
 801d2fa:	fa1f f388 	uxth.w	r3, r8
 801d2fe:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801d302:	b289      	uxth	r1, r1
 801d304:	f897 c000 	ldrb.w	ip, [r7]
 801d308:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801d30c:	fb03 f901 	mul.w	r9, r3, r1
 801d310:	011b      	lsls	r3, r3, #4
 801d312:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d316:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801d31a:	eba3 0309 	sub.w	r3, r3, r9
 801d31e:	b289      	uxth	r1, r1
 801d320:	b29b      	uxth	r3, r3
 801d322:	eba8 0801 	sub.w	r8, r8, r1
 801d326:	fb03 fc0c 	mul.w	ip, r3, ip
 801d32a:	fa1f f888 	uxth.w	r8, r8
 801d32e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d330:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d332:	fb08 cc0a 	mla	ip, r8, sl, ip
 801d336:	f892 a000 	ldrb.w	sl, [r2]
 801d33a:	fb01 cc0a 	mla	ip, r1, sl, ip
 801d33e:	f890 a000 	ldrb.w	sl, [r0]
 801d342:	fb09 cc0a 	mla	ip, r9, sl, ip
 801d346:	f896 a000 	ldrb.w	sl, [r6]
 801d34a:	fb1a fa03 	smulbb	sl, sl, r3
 801d34e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d354:	fb0c ac05 	mla	ip, ip, r5, sl
 801d358:	fa1f fc8c 	uxth.w	ip, ip
 801d35c:	f10c 0a01 	add.w	sl, ip, #1
 801d360:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801d364:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d368:	f886 a000 	strb.w	sl, [r6]
 801d36c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801d370:	f89e a001 	ldrb.w	sl, [lr, #1]
 801d374:	fb03 fc0c 	mul.w	ip, r3, ip
 801d378:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d37a:	fb08 cc0a 	mla	ip, r8, sl, ip
 801d37e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d382:	fb01 cc0a 	mla	ip, r1, sl, ip
 801d386:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d38a:	fb09 cc0a 	mla	ip, r9, sl, ip
 801d38e:	f896 a001 	ldrb.w	sl, [r6, #1]
 801d392:	fb1a fa03 	smulbb	sl, sl, r3
 801d396:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d39a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d39c:	fb0c ac05 	mla	ip, ip, r5, sl
 801d3a0:	fa1f fc8c 	uxth.w	ip, ip
 801d3a4:	f10c 0a01 	add.w	sl, ip, #1
 801d3a8:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801d3ac:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d3b0:	f886 c001 	strb.w	ip, [r6, #1]
 801d3b4:	78bf      	ldrb	r7, [r7, #2]
 801d3b6:	f89e c002 	ldrb.w	ip, [lr, #2]
 801d3ba:	437b      	muls	r3, r7
 801d3bc:	fb08 330c 	mla	r3, r8, ip, r3
 801d3c0:	f892 c002 	ldrb.w	ip, [r2, #2]
 801d3c4:	7882      	ldrb	r2, [r0, #2]
 801d3c6:	fb01 310c 	mla	r1, r1, ip, r3
 801d3ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d3cc:	fb09 1902 	mla	r9, r9, r2, r1
 801d3d0:	78b1      	ldrb	r1, [r6, #2]
 801d3d2:	fb11 f103 	smulbb	r1, r1, r3
 801d3d6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d3da:	fb09 1505 	mla	r5, r9, r5, r1
 801d3de:	b2ad      	uxth	r5, r5
 801d3e0:	1c6b      	adds	r3, r5, #1
 801d3e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d3e6:	122d      	asrs	r5, r5, #8
 801d3e8:	70b5      	strb	r5, [r6, #2]
 801d3ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d3ec:	3603      	adds	r6, #3
 801d3ee:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d3f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d3f4:	4413      	add	r3, r2
 801d3f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d3f8:	931d      	str	r3, [sp, #116]	@ 0x74
 801d3fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d3fc:	4413      	add	r3, r2
 801d3fe:	931e      	str	r3, [sp, #120]	@ 0x78
 801d400:	e73b      	b.n	801d27a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d402:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d404:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801d406:	4433      	add	r3, r6
 801d408:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d40a:	931d      	str	r3, [sp, #116]	@ 0x74
 801d40c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d40e:	4433      	add	r3, r6
 801d410:	931e      	str	r3, [sp, #120]	@ 0x78
 801d412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d414:	3b01      	subs	r3, #1
 801d416:	9309      	str	r3, [sp, #36]	@ 0x24
 801d418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d41a:	3303      	adds	r3, #3
 801d41c:	930a      	str	r3, [sp, #40]	@ 0x28
 801d41e:	e70d      	b.n	801d23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d420:	d028      	beq.n	801d474 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801d422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d424:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801d426:	3b01      	subs	r3, #1
 801d428:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d42a:	fb00 5003 	mla	r0, r0, r3, r5
 801d42e:	1400      	asrs	r0, r0, #16
 801d430:	f53f af21 	bmi.w	801d276 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d434:	3901      	subs	r1, #1
 801d436:	4288      	cmp	r0, r1
 801d438:	f6bf af1d 	bge.w	801d276 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d43c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801d43e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d440:	fb01 0303 	mla	r3, r1, r3, r0
 801d444:	141b      	asrs	r3, r3, #16
 801d446:	f53f af16 	bmi.w	801d276 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d44a:	3a01      	subs	r2, #1
 801d44c:	4293      	cmp	r3, r2
 801d44e:	f6bf af12 	bge.w	801d276 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d454:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801d458:	1cdf      	adds	r7, r3, #3
 801d45a:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801d45e:	f1b9 0f00 	cmp.w	r9, #0
 801d462:	dc73      	bgt.n	801d54c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801d464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d466:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d468:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d46c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d470:	441a      	add	r2, r3
 801d472:	920a      	str	r2, [sp, #40]	@ 0x28
 801d474:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d476:	2b00      	cmp	r3, #0
 801d478:	f340 8129 	ble.w	801d6ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801d47c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d480:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d482:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d486:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d48a:	eef0 6a62 	vmov.f32	s13, s5
 801d48e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d492:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d496:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d49a:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801d49e:	eef0 6a43 	vmov.f32	s13, s6
 801d4a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4a6:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801d4aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d4b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d4ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d4be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d4c2:	ee12 2a90 	vmov	r2, s5
 801d4c6:	eef0 2a47 	vmov.f32	s5, s14
 801d4ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4ce:	ee13 2a10 	vmov	r2, s6
 801d4d2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d4d4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d4d6:	eeb0 3a67 	vmov.f32	s6, s15
 801d4da:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4de:	9320      	str	r3, [sp, #128]	@ 0x80
 801d4e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d4e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d4e4:	3b01      	subs	r3, #1
 801d4e6:	930d      	str	r3, [sp, #52]	@ 0x34
 801d4e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d4ea:	bf08      	it	eq
 801d4ec:	4613      	moveq	r3, r2
 801d4ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801d4f0:	e696      	b.n	801d220 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d4f2:	b149      	cbz	r1, 801d508 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d4f4:	5caa      	ldrb	r2, [r5, r2]
 801d4f6:	4670      	mov	r0, lr
 801d4f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d4fc:	4422      	add	r2, r4
 801d4fe:	4677      	mov	r7, lr
 801d500:	e6fb      	b.n	801d2fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d502:	4670      	mov	r0, lr
 801d504:	4672      	mov	r2, lr
 801d506:	e6f8      	b.n	801d2fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d508:	4670      	mov	r0, lr
 801d50a:	4672      	mov	r2, lr
 801d50c:	e7f7      	b.n	801d4fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d50e:	f110 0c01 	adds.w	ip, r0, #1
 801d512:	f53f af6a 	bmi.w	801d3ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d516:	4562      	cmp	r2, ip
 801d518:	f6ff af67 	blt.w	801d3ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d51c:	f115 0c01 	adds.w	ip, r5, #1
 801d520:	f53f af63 	bmi.w	801d3ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d524:	4567      	cmp	r7, ip
 801d526:	f6ff af60 	blt.w	801d3ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d52c:	b23f      	sxth	r7, r7
 801d52e:	b212      	sxth	r2, r2
 801d530:	9002      	str	r0, [sp, #8]
 801d532:	9701      	str	r7, [sp, #4]
 801d534:	9200      	str	r2, [sp, #0]
 801d536:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d538:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d53a:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801d53e:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801d542:	4623      	mov	r3, r4
 801d544:	4631      	mov	r1, r6
 801d546:	f7ff fd69 	bl	801d01c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801d54a:	e74e      	b.n	801d3ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d54c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d54e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d550:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d554:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d556:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d558:	1400      	asrs	r0, r0, #16
 801d55a:	142d      	asrs	r5, r5, #16
 801d55c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d55e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d562:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d566:	fb02 5000 	mla	r0, r2, r0, r5
 801d56a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d56c:	f815 e000 	ldrb.w	lr, [r5, r0]
 801d570:	eb05 0c00 	add.w	ip, r5, r0
 801d574:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d578:	eb04 060e 	add.w	r6, r4, lr
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	f000 8097 	beq.w	801d6b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801d582:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d58a:	4425      	add	r5, r4
 801d58c:	2900      	cmp	r1, #0
 801d58e:	f000 8098 	beq.w	801d6c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801d592:	eb0c 0002 	add.w	r0, ip, r2
 801d596:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d59a:	7840      	ldrb	r0, [r0, #1]
 801d59c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d5a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d5a4:	4422      	add	r2, r4
 801d5a6:	4420      	add	r0, r4
 801d5a8:	b29b      	uxth	r3, r3
 801d5aa:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801d5ae:	b289      	uxth	r1, r1
 801d5b0:	f895 e000 	ldrb.w	lr, [r5]
 801d5b4:	3703      	adds	r7, #3
 801d5b6:	f109 39ff 	add.w	r9, r9, #4294967295
 801d5ba:	fb03 f801 	mul.w	r8, r3, r1
 801d5be:	011b      	lsls	r3, r3, #4
 801d5c0:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d5c4:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801d5c8:	eba3 0308 	sub.w	r3, r3, r8
 801d5cc:	b289      	uxth	r1, r1
 801d5ce:	b29b      	uxth	r3, r3
 801d5d0:	ebac 0c01 	sub.w	ip, ip, r1
 801d5d4:	fb03 fe0e 	mul.w	lr, r3, lr
 801d5d8:	fa1f fc8c 	uxth.w	ip, ip
 801d5dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d5e0:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d5e4:	f892 b000 	ldrb.w	fp, [r2]
 801d5e8:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d5ec:	f890 b000 	ldrb.w	fp, [r0]
 801d5f0:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d5f4:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801d5f8:	fb1b fb03 	smulbb	fp, fp, r3
 801d5fc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d602:	fb0e be0a 	mla	lr, lr, sl, fp
 801d606:	fa1f fe8e 	uxth.w	lr, lr
 801d60a:	f10e 0b01 	add.w	fp, lr, #1
 801d60e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d612:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d616:	f807 ec06 	strb.w	lr, [r7, #-6]
 801d61a:	f895 e001 	ldrb.w	lr, [r5, #1]
 801d61e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d622:	fb03 fe0e 	mul.w	lr, r3, lr
 801d626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d628:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d62c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d630:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d634:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d638:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d63c:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801d640:	fb1b fb03 	smulbb	fp, fp, r3
 801d644:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d64a:	fb0e be0a 	mla	lr, lr, sl, fp
 801d64e:	fa1f fe8e 	uxth.w	lr, lr
 801d652:	f10e 0b01 	add.w	fp, lr, #1
 801d656:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d65a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d65e:	f807 ec05 	strb.w	lr, [r7, #-5]
 801d662:	78ad      	ldrb	r5, [r5, #2]
 801d664:	78b6      	ldrb	r6, [r6, #2]
 801d666:	436b      	muls	r3, r5
 801d668:	7895      	ldrb	r5, [r2, #2]
 801d66a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d66c:	fb0c 3306 	mla	r3, ip, r6, r3
 801d670:	fb01 3305 	mla	r3, r1, r5, r3
 801d674:	7885      	ldrb	r5, [r0, #2]
 801d676:	fb08 3805 	mla	r8, r8, r5, r3
 801d67a:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801d67e:	fb13 f302 	smulbb	r3, r3, r2
 801d682:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d686:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d688:	fb08 380a 	mla	r8, r8, sl, r3
 801d68c:	fa1f f888 	uxth.w	r8, r8
 801d690:	f108 0301 	add.w	r3, r8, #1
 801d694:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801d698:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d69a:	4413      	add	r3, r2
 801d69c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d69e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d6a2:	931d      	str	r3, [sp, #116]	@ 0x74
 801d6a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d6a6:	f807 8c04 	strb.w	r8, [r7, #-4]
 801d6aa:	4413      	add	r3, r2
 801d6ac:	931e      	str	r3, [sp, #120]	@ 0x78
 801d6ae:	e6d6      	b.n	801d45e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d6b0:	b151      	cbz	r1, 801d6c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801d6b2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d6b6:	4630      	mov	r0, r6
 801d6b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d6bc:	4422      	add	r2, r4
 801d6be:	4635      	mov	r5, r6
 801d6c0:	e772      	b.n	801d5a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d6c2:	4630      	mov	r0, r6
 801d6c4:	4632      	mov	r2, r6
 801d6c6:	e76f      	b.n	801d5a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d6c8:	4630      	mov	r0, r6
 801d6ca:	4632      	mov	r2, r6
 801d6cc:	e7f7      	b.n	801d6be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d6ce:	b013      	add	sp, #76	@ 0x4c
 801d6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801d6d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d6d8:	784c      	ldrb	r4, [r1, #1]
 801d6da:	f891 a002 	ldrb.w	sl, [r1, #2]
 801d6de:	0224      	lsls	r4, r4, #8
 801d6e0:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801d6e4:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801d6e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d6ec:	f891 a000 	ldrb.w	sl, [r1]
 801d6f0:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801d6f4:	ea44 040a 	orr.w	r4, r4, sl
 801d6f8:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801d6fc:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801d700:	9401      	str	r4, [sp, #4]
 801d702:	fb05 c70e 	mla	r7, r5, lr, ip
 801d706:	2d00      	cmp	r5, #0
 801d708:	eb02 0807 	add.w	r8, r2, r7
 801d70c:	db72      	blt.n	801d7f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d70e:	45a9      	cmp	r9, r5
 801d710:	dd70      	ble.n	801d7f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d712:	f1bc 0f00 	cmp.w	ip, #0
 801d716:	db6b      	blt.n	801d7f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d718:	45e6      	cmp	lr, ip
 801d71a:	dd69      	ble.n	801d7f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d71c:	5dd7      	ldrb	r7, [r2, r7]
 801d71e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d722:	441f      	add	r7, r3
 801d724:	f11c 0201 	adds.w	r2, ip, #1
 801d728:	d467      	bmi.n	801d7fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d72a:	4596      	cmp	lr, r2
 801d72c:	dd65      	ble.n	801d7fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d72e:	2800      	cmp	r0, #0
 801d730:	d063      	beq.n	801d7fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d732:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d736:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d73a:	441c      	add	r4, r3
 801d73c:	3501      	adds	r5, #1
 801d73e:	d460      	bmi.n	801d802 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d740:	45a9      	cmp	r9, r5
 801d742:	dd5e      	ble.n	801d802 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d744:	2e00      	cmp	r6, #0
 801d746:	d05c      	beq.n	801d802 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d748:	f1bc 0f00 	cmp.w	ip, #0
 801d74c:	db57      	blt.n	801d7fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d74e:	45e6      	cmp	lr, ip
 801d750:	dd55      	ble.n	801d7fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d752:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d75a:	441d      	add	r5, r3
 801d75c:	f11c 0201 	adds.w	r2, ip, #1
 801d760:	d452      	bmi.n	801d808 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d762:	4596      	cmp	lr, r2
 801d764:	dd50      	ble.n	801d808 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d766:	2800      	cmp	r0, #0
 801d768:	d04e      	beq.n	801d808 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d76a:	44c6      	add	lr, r8
 801d76c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d770:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d774:	4413      	add	r3, r2
 801d776:	b280      	uxth	r0, r0
 801d778:	f897 8000 	ldrb.w	r8, [r7]
 801d77c:	b2b2      	uxth	r2, r6
 801d77e:	fb00 f602 	mul.w	r6, r0, r2
 801d782:	0100      	lsls	r0, r0, #4
 801d784:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d788:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801d78c:	1b80      	subs	r0, r0, r6
 801d78e:	fa1f fc82 	uxth.w	ip, r2
 801d792:	b282      	uxth	r2, r0
 801d794:	7820      	ldrb	r0, [r4, #0]
 801d796:	ebae 0e0c 	sub.w	lr, lr, ip
 801d79a:	4350      	muls	r0, r2
 801d79c:	fa1f fe8e 	uxth.w	lr, lr
 801d7a0:	fb0e 0808 	mla	r8, lr, r8, r0
 801d7a4:	7828      	ldrb	r0, [r5, #0]
 801d7a6:	fb0c 8800 	mla	r8, ip, r0, r8
 801d7aa:	7818      	ldrb	r0, [r3, #0]
 801d7ac:	fb06 8000 	mla	r0, r6, r0, r8
 801d7b0:	1200      	asrs	r0, r0, #8
 801d7b2:	7008      	strb	r0, [r1, #0]
 801d7b4:	7860      	ldrb	r0, [r4, #1]
 801d7b6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d7ba:	4350      	muls	r0, r2
 801d7bc:	fb0e 0808 	mla	r8, lr, r8, r0
 801d7c0:	7868      	ldrb	r0, [r5, #1]
 801d7c2:	fb0c 8800 	mla	r8, ip, r0, r8
 801d7c6:	7858      	ldrb	r0, [r3, #1]
 801d7c8:	fb06 8000 	mla	r0, r6, r0, r8
 801d7cc:	1200      	asrs	r0, r0, #8
 801d7ce:	7048      	strb	r0, [r1, #1]
 801d7d0:	78a0      	ldrb	r0, [r4, #2]
 801d7d2:	78bf      	ldrb	r7, [r7, #2]
 801d7d4:	4350      	muls	r0, r2
 801d7d6:	78aa      	ldrb	r2, [r5, #2]
 801d7d8:	fb0e 0007 	mla	r0, lr, r7, r0
 801d7dc:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d7e0:	789a      	ldrb	r2, [r3, #2]
 801d7e2:	fb06 c202 	mla	r2, r6, r2, ip
 801d7e6:	1212      	asrs	r2, r2, #8
 801d7e8:	708a      	strb	r2, [r1, #2]
 801d7ea:	b002      	add	sp, #8
 801d7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7f0:	af01      	add	r7, sp, #4
 801d7f2:	e797      	b.n	801d724 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801d7f4:	ac01      	add	r4, sp, #4
 801d7f6:	4627      	mov	r7, r4
 801d7f8:	e7a0      	b.n	801d73c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d7fa:	ac01      	add	r4, sp, #4
 801d7fc:	e79e      	b.n	801d73c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d7fe:	ad01      	add	r5, sp, #4
 801d800:	e7ac      	b.n	801d75c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801d802:	ab01      	add	r3, sp, #4
 801d804:	461d      	mov	r5, r3
 801d806:	e7b6      	b.n	801d776 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801d808:	ab01      	add	r3, sp, #4
 801d80a:	e7b4      	b.n	801d776 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801d80c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d810:	b08d      	sub	sp, #52	@ 0x34
 801d812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d816:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801d81a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d81c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d81e:	9306      	str	r3, [sp, #24]
 801d820:	6850      	ldr	r0, [r2, #4]
 801d822:	6812      	ldr	r2, [r2, #0]
 801d824:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d826:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801d82a:	fb00 1303 	mla	r3, r0, r3, r1
 801d82e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d832:	18d3      	adds	r3, r2, r3
 801d834:	9307      	str	r3, [sp, #28]
 801d836:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	9308      	str	r3, [sp, #32]
 801d83c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d83e:	685d      	ldr	r5, [r3, #4]
 801d840:	3504      	adds	r5, #4
 801d842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d844:	2b00      	cmp	r3, #0
 801d846:	dc03      	bgt.n	801d850 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	f340 81e6 	ble.w	801dc1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d850:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d852:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d856:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d85a:	1e48      	subs	r0, r1, #1
 801d85c:	1e56      	subs	r6, r2, #1
 801d85e:	9b06      	ldr	r3, [sp, #24]
 801d860:	2b00      	cmp	r3, #0
 801d862:	f340 80bd 	ble.w	801d9e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d866:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d868:	1427      	asrs	r7, r4, #16
 801d86a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d86e:	d406      	bmi.n	801d87e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d870:	4287      	cmp	r7, r0
 801d872:	da04      	bge.n	801d87e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d874:	2b00      	cmp	r3, #0
 801d876:	db02      	blt.n	801d87e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d878:	42b3      	cmp	r3, r6
 801d87a:	f2c0 80b2 	blt.w	801d9e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801d87e:	3701      	adds	r7, #1
 801d880:	f100 80a1 	bmi.w	801d9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d884:	42b9      	cmp	r1, r7
 801d886:	f2c0 809e 	blt.w	801d9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d88a:	3301      	adds	r3, #1
 801d88c:	f100 809b 	bmi.w	801d9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d890:	429a      	cmp	r2, r3
 801d892:	f2c0 8098 	blt.w	801d9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d896:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801d89a:	f1bb 0f00 	cmp.w	fp, #0
 801d89e:	f340 80bf 	ble.w	801da20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d8a2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d8a4:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d8a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d8a8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d8ac:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801d8b0:	1420      	asrs	r0, r4, #16
 801d8b2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d8b4:	ea4f 4723 	mov.w	r7, r3, asr #16
 801d8b8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d8bc:	6892      	ldr	r2, [r2, #8]
 801d8be:	f100 8103 	bmi.w	801dac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d8c2:	f102 3eff 	add.w	lr, r2, #4294967295
 801d8c6:	4570      	cmp	r0, lr
 801d8c8:	f280 80fe 	bge.w	801dac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d8cc:	2f00      	cmp	r7, #0
 801d8ce:	f2c0 80fb 	blt.w	801dac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d8d2:	f10c 3eff 	add.w	lr, ip, #4294967295
 801d8d6:	4577      	cmp	r7, lr
 801d8d8:	f280 80f6 	bge.w	801dac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d8dc:	b212      	sxth	r2, r2
 801d8de:	fb07 0002 	mla	r0, r7, r2, r0
 801d8e2:	9f08      	ldr	r7, [sp, #32]
 801d8e4:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d8e8:	eb07 0e00 	add.w	lr, r7, r0
 801d8ec:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d8f0:	eb05 0c08 	add.w	ip, r5, r8
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	f000 80d8 	beq.w	801daaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d8fa:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801d8fe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d902:	442f      	add	r7, r5
 801d904:	2900      	cmp	r1, #0
 801d906:	f000 80d9 	beq.w	801dabc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d90a:	eb0e 0002 	add.w	r0, lr, r2
 801d90e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d912:	7840      	ldrb	r0, [r0, #1]
 801d914:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d918:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d91c:	442a      	add	r2, r5
 801d91e:	4428      	add	r0, r5
 801d920:	b29b      	uxth	r3, r3
 801d922:	f815 a008 	ldrb.w	sl, [r5, r8]
 801d926:	b289      	uxth	r1, r1
 801d928:	f897 8000 	ldrb.w	r8, [r7]
 801d92c:	fb03 f901 	mul.w	r9, r3, r1
 801d930:	011b      	lsls	r3, r3, #4
 801d932:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d936:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801d93a:	eba3 0309 	sub.w	r3, r3, r9
 801d93e:	b289      	uxth	r1, r1
 801d940:	b29b      	uxth	r3, r3
 801d942:	ebae 0e01 	sub.w	lr, lr, r1
 801d946:	fb03 f808 	mul.w	r8, r3, r8
 801d94a:	fa1f fe8e 	uxth.w	lr, lr
 801d94e:	fb0e 880a 	mla	r8, lr, sl, r8
 801d952:	f892 a000 	ldrb.w	sl, [r2]
 801d956:	fb01 880a 	mla	r8, r1, sl, r8
 801d95a:	f890 a000 	ldrb.w	sl, [r0]
 801d95e:	fb09 880a 	mla	r8, r9, sl, r8
 801d962:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d966:	f886 8000 	strb.w	r8, [r6]
 801d96a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d96e:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d972:	fb03 f808 	mul.w	r8, r3, r8
 801d976:	fb0e 880a 	mla	r8, lr, sl, r8
 801d97a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d97e:	fb01 880a 	mla	r8, r1, sl, r8
 801d982:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d986:	fb09 880a 	mla	r8, r9, sl, r8
 801d98a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d98e:	f886 8001 	strb.w	r8, [r6, #1]
 801d992:	78bf      	ldrb	r7, [r7, #2]
 801d994:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d998:	437b      	muls	r3, r7
 801d99a:	7892      	ldrb	r2, [r2, #2]
 801d99c:	fb0e 330c 	mla	r3, lr, ip, r3
 801d9a0:	fb01 3102 	mla	r1, r1, r2, r3
 801d9a4:	7882      	ldrb	r2, [r0, #2]
 801d9a6:	fb09 1902 	mla	r9, r9, r2, r1
 801d9aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d9ae:	f886 9002 	strb.w	r9, [r6, #2]
 801d9b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d9b4:	3603      	adds	r6, #3
 801d9b6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d9b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d9bc:	441c      	add	r4, r3
 801d9be:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d9c0:	4413      	add	r3, r2
 801d9c2:	9318      	str	r3, [sp, #96]	@ 0x60
 801d9c4:	e769      	b.n	801d89a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d9c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d9c8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801d9ca:	441c      	add	r4, r3
 801d9cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d9ce:	443b      	add	r3, r7
 801d9d0:	9318      	str	r3, [sp, #96]	@ 0x60
 801d9d2:	9b06      	ldr	r3, [sp, #24]
 801d9d4:	3b01      	subs	r3, #1
 801d9d6:	9306      	str	r3, [sp, #24]
 801d9d8:	9b07      	ldr	r3, [sp, #28]
 801d9da:	3303      	adds	r3, #3
 801d9dc:	9307      	str	r3, [sp, #28]
 801d9de:	e73e      	b.n	801d85e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d9e0:	d026      	beq.n	801da30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d9e2:	9b06      	ldr	r3, [sp, #24]
 801d9e4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d9e6:	3b01      	subs	r3, #1
 801d9e8:	fb00 4003 	mla	r0, r0, r3, r4
 801d9ec:	1400      	asrs	r0, r0, #16
 801d9ee:	f53f af52 	bmi.w	801d896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d9f2:	3901      	subs	r1, #1
 801d9f4:	4288      	cmp	r0, r1
 801d9f6:	f6bf af4e 	bge.w	801d896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d9fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d9fc:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d9fe:	fb01 0303 	mla	r3, r1, r3, r0
 801da02:	141b      	asrs	r3, r3, #16
 801da04:	f53f af47 	bmi.w	801d896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801da08:	3a01      	subs	r2, #1
 801da0a:	4293      	cmp	r3, r2
 801da0c:	f6bf af43 	bge.w	801d896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801da10:	9b07      	ldr	r3, [sp, #28]
 801da12:	f8dd a018 	ldr.w	sl, [sp, #24]
 801da16:	f103 0803 	add.w	r8, r3, #3
 801da1a:	f1ba 0f00 	cmp.w	sl, #0
 801da1e:	dc71      	bgt.n	801db04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801da20:	9b06      	ldr	r3, [sp, #24]
 801da22:	9a07      	ldr	r2, [sp, #28]
 801da24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da2c:	441a      	add	r2, r3
 801da2e:	9207      	str	r2, [sp, #28]
 801da30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da32:	2b00      	cmp	r3, #0
 801da34:	f340 80f2 	ble.w	801dc1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801da38:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801da3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da42:	eeb0 6a62 	vmov.f32	s12, s5
 801da46:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801da4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801da4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801da52:	ee16 4a10 	vmov	r4, s12
 801da56:	eeb0 6a43 	vmov.f32	s12, s6
 801da5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801da5e:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801da62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801da66:	ee61 7a27 	vmul.f32	s15, s2, s15
 801da6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801da6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801da72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801da76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801da7a:	ee12 2a90 	vmov	r2, s5
 801da7e:	eef0 2a47 	vmov.f32	s5, s14
 801da82:	fb92 f3f3 	sdiv	r3, r2, r3
 801da86:	ee13 2a10 	vmov	r2, s6
 801da8a:	9319      	str	r3, [sp, #100]	@ 0x64
 801da8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801da8e:	eeb0 3a67 	vmov.f32	s6, s15
 801da92:	fb92 f3f3 	sdiv	r3, r2, r3
 801da96:	931a      	str	r3, [sp, #104]	@ 0x68
 801da98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801da9c:	3b01      	subs	r3, #1
 801da9e:	9309      	str	r3, [sp, #36]	@ 0x24
 801daa0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801daa2:	bf08      	it	eq
 801daa4:	4613      	moveq	r3, r2
 801daa6:	9306      	str	r3, [sp, #24]
 801daa8:	e6cb      	b.n	801d842 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801daaa:	b151      	cbz	r1, 801dac2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801daac:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801dab0:	4660      	mov	r0, ip
 801dab2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dab6:	442a      	add	r2, r5
 801dab8:	4667      	mov	r7, ip
 801daba:	e731      	b.n	801d920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801dabc:	4660      	mov	r0, ip
 801dabe:	4662      	mov	r2, ip
 801dac0:	e72e      	b.n	801d920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801dac2:	4660      	mov	r0, ip
 801dac4:	4662      	mov	r2, ip
 801dac6:	e7f7      	b.n	801dab8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801dac8:	f110 0e01 	adds.w	lr, r0, #1
 801dacc:	f53f af71 	bmi.w	801d9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801dad0:	4572      	cmp	r2, lr
 801dad2:	f6ff af6e 	blt.w	801d9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801dad6:	f117 0e01 	adds.w	lr, r7, #1
 801dada:	f53f af6a 	bmi.w	801d9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801dade:	45f4      	cmp	ip, lr
 801dae0:	f6ff af67 	blt.w	801d9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801dae4:	b212      	sxth	r2, r2
 801dae6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801daea:	fa0f f38c 	sxth.w	r3, ip
 801daee:	9200      	str	r2, [sp, #0]
 801daf0:	4631      	mov	r1, r6
 801daf2:	9a08      	ldr	r2, [sp, #32]
 801daf4:	9301      	str	r3, [sp, #4]
 801daf6:	462b      	mov	r3, r5
 801daf8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801dafc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801dafe:	f7ff fde9 	bl	801d6d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801db02:	e756      	b.n	801d9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801db04:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801db06:	1426      	asrs	r6, r4, #16
 801db08:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801db0a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801db0e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801db12:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801db14:	1400      	asrs	r0, r0, #16
 801db16:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801db1a:	fb02 6000 	mla	r0, r2, r0, r6
 801db1e:	9e08      	ldr	r6, [sp, #32]
 801db20:	f816 e000 	ldrb.w	lr, [r6, r0]
 801db24:	eb06 0c00 	add.w	ip, r6, r0
 801db28:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801db2c:	eb05 070e 	add.w	r7, r5, lr
 801db30:	2b00      	cmp	r3, #0
 801db32:	d064      	beq.n	801dbfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801db34:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801db38:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db3c:	442e      	add	r6, r5
 801db3e:	2900      	cmp	r1, #0
 801db40:	d066      	beq.n	801dc10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801db42:	eb0c 0002 	add.w	r0, ip, r2
 801db46:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801db4a:	7840      	ldrb	r0, [r0, #1]
 801db4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801db54:	442a      	add	r2, r5
 801db56:	4428      	add	r0, r5
 801db58:	b29b      	uxth	r3, r3
 801db5a:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801db5e:	b289      	uxth	r1, r1
 801db60:	f896 e000 	ldrb.w	lr, [r6]
 801db64:	f108 0803 	add.w	r8, r8, #3
 801db68:	f10a 3aff 	add.w	sl, sl, #4294967295
 801db6c:	fb03 f901 	mul.w	r9, r3, r1
 801db70:	011b      	lsls	r3, r3, #4
 801db72:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801db76:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801db7a:	eba3 0309 	sub.w	r3, r3, r9
 801db7e:	b289      	uxth	r1, r1
 801db80:	b29b      	uxth	r3, r3
 801db82:	ebac 0c01 	sub.w	ip, ip, r1
 801db86:	fb03 fe0e 	mul.w	lr, r3, lr
 801db8a:	fa1f fc8c 	uxth.w	ip, ip
 801db8e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801db92:	f892 b000 	ldrb.w	fp, [r2]
 801db96:	fb01 ee0b 	mla	lr, r1, fp, lr
 801db9a:	f890 b000 	ldrb.w	fp, [r0]
 801db9e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801dba2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801dba6:	f808 ec06 	strb.w	lr, [r8, #-6]
 801dbaa:	f896 e001 	ldrb.w	lr, [r6, #1]
 801dbae:	f897 b001 	ldrb.w	fp, [r7, #1]
 801dbb2:	fb03 fe0e 	mul.w	lr, r3, lr
 801dbb6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801dbba:	f892 b001 	ldrb.w	fp, [r2, #1]
 801dbbe:	fb01 ee0b 	mla	lr, r1, fp, lr
 801dbc2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801dbc6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801dbca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801dbce:	f808 ec05 	strb.w	lr, [r8, #-5]
 801dbd2:	78b6      	ldrb	r6, [r6, #2]
 801dbd4:	78bf      	ldrb	r7, [r7, #2]
 801dbd6:	4373      	muls	r3, r6
 801dbd8:	7896      	ldrb	r6, [r2, #2]
 801dbda:	7882      	ldrb	r2, [r0, #2]
 801dbdc:	fb0c 3307 	mla	r3, ip, r7, r3
 801dbe0:	fb01 3306 	mla	r3, r1, r6, r3
 801dbe4:	fb09 3902 	mla	r9, r9, r2, r3
 801dbe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dbea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dbec:	441c      	add	r4, r3
 801dbee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dbf0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbf4:	4413      	add	r3, r2
 801dbf6:	f808 9c04 	strb.w	r9, [r8, #-4]
 801dbfa:	9318      	str	r3, [sp, #96]	@ 0x60
 801dbfc:	e70d      	b.n	801da1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801dbfe:	b151      	cbz	r1, 801dc16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801dc00:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801dc04:	4638      	mov	r0, r7
 801dc06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dc0a:	442a      	add	r2, r5
 801dc0c:	463e      	mov	r6, r7
 801dc0e:	e7a3      	b.n	801db58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801dc10:	4638      	mov	r0, r7
 801dc12:	463a      	mov	r2, r7
 801dc14:	e7a0      	b.n	801db58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801dc16:	4638      	mov	r0, r7
 801dc18:	463a      	mov	r2, r7
 801dc1a:	e7f7      	b.n	801dc0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801dc1c:	b00d      	add	sp, #52	@ 0x34
 801dc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc22 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801dc22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc26:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801dc2a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801dc2e:	2d00      	cmp	r5, #0
 801dc30:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801dc34:	fb05 700c 	mla	r0, r5, ip, r7
 801dc38:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801dc3c:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801dc40:	eb02 0800 	add.w	r8, r2, r0
 801dc44:	f2c0 8118 	blt.w	801de78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801dc48:	45a9      	cmp	r9, r5
 801dc4a:	f340 8115 	ble.w	801de78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801dc4e:	2f00      	cmp	r7, #0
 801dc50:	f2c0 8110 	blt.w	801de74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801dc54:	45bc      	cmp	ip, r7
 801dc56:	f340 810d 	ble.w	801de74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801dc5a:	5c12      	ldrb	r2, [r2, r0]
 801dc5c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801dc60:	1c7a      	adds	r2, r7, #1
 801dc62:	f100 810c 	bmi.w	801de7e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801dc66:	4594      	cmp	ip, r2
 801dc68:	f340 8109 	ble.w	801de7e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801dc6c:	2c00      	cmp	r4, #0
 801dc6e:	f000 8108 	beq.w	801de82 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801dc72:	f898 2001 	ldrb.w	r2, [r8, #1]
 801dc76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801dc7a:	3501      	adds	r5, #1
 801dc7c:	f100 8105 	bmi.w	801de8a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801dc80:	45a9      	cmp	r9, r5
 801dc82:	f340 8102 	ble.w	801de8a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801dc86:	f1be 0f00 	cmp.w	lr, #0
 801dc8a:	f000 8101 	beq.w	801de90 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801dc8e:	2f00      	cmp	r7, #0
 801dc90:	f2c0 80f9 	blt.w	801de86 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801dc94:	45bc      	cmp	ip, r7
 801dc96:	f340 80f6 	ble.w	801de86 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801dc9a:	f818 200c 	ldrb.w	r2, [r8, ip]
 801dc9e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801dca2:	3701      	adds	r7, #1
 801dca4:	f100 80f7 	bmi.w	801de96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801dca8:	45bc      	cmp	ip, r7
 801dcaa:	f340 80f4 	ble.w	801de96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801dcae:	2c00      	cmp	r4, #0
 801dcb0:	f000 80f3 	beq.w	801de9a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801dcb4:	44c4      	add	ip, r8
 801dcb6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801dcba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801dcbe:	fa1f fc84 	uxth.w	ip, r4
 801dcc2:	fa1f f48e 	uxth.w	r4, lr
 801dcc6:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801dcca:	fb04 fe0c 	mul.w	lr, r4, ip
 801dcce:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801dcd2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801dcd6:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801dcda:	ebac 070e 	sub.w	r7, ip, lr
 801dcde:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801dce2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801dce6:	b2a4      	uxth	r4, r4
 801dce8:	b2bf      	uxth	r7, r7
 801dcea:	1b1b      	subs	r3, r3, r4
 801dcec:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801dcf0:	fb07 fc0a 	mul.w	ip, r7, sl
 801dcf4:	b29b      	uxth	r3, r3
 801dcf6:	fb03 cc0b 	mla	ip, r3, fp, ip
 801dcfa:	9300      	str	r3, [sp, #0]
 801dcfc:	fb04 cc09 	mla	ip, r4, r9, ip
 801dd00:	fb0e cc08 	mla	ip, lr, r8, ip
 801dd04:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801dd08:	9301      	str	r3, [sp, #4]
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	f000 80af 	beq.w	801de6e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801dd10:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801dd14:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801dd18:	fb0b fc0c 	mul.w	ip, fp, ip
 801dd1c:	fb0b f606 	mul.w	r6, fp, r6
 801dd20:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801dd24:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801dd28:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801dd2c:	44dc      	add	ip, fp
 801dd2e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801dd32:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801dd36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd3a:	fb0a fb0b 	mul.w	fp, sl, fp
 801dd3e:	fb0a fa00 	mul.w	sl, sl, r0
 801dd42:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801dd46:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801dd4a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801dd4e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801dd52:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801dd56:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd5a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801dd5e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dd62:	0a36      	lsrs	r6, r6, #8
 801dd64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd68:	44dc      	add	ip, fp
 801dd6a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801dd6e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801dd72:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801dd76:	fb09 fb0b 	mul.w	fp, r9, fp
 801dd7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd7e:	fb09 f905 	mul.w	r9, r9, r5
 801dd82:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801dd86:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dd8a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801dd8e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd92:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801dd96:	fb0c fc07 	mul.w	ip, ip, r7
 801dd9a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801dd9e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801dda2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801dda6:	4458      	add	r0, fp
 801dda8:	fb08 f505 	mul.w	r5, r8, r5
 801ddac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ddb0:	fb08 f802 	mul.w	r8, r8, r2
 801ddb4:	0a00      	lsrs	r0, r0, #8
 801ddb6:	0a2a      	lsrs	r2, r5, #8
 801ddb8:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801ddbc:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ddc0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ddc4:	4415      	add	r5, r2
 801ddc6:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801ddca:	0a2d      	lsrs	r5, r5, #8
 801ddcc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ddd0:	9a00      	ldr	r2, [sp, #0]
 801ddd2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801ddd6:	fb03 cc02 	mla	ip, r3, r2, ip
 801ddda:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ddde:	9b01      	ldr	r3, [sp, #4]
 801dde0:	fb05 c50e 	mla	r5, r5, lr, ip
 801dde4:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801dde8:	fb00 5004 	mla	r0, r0, r4, r5
 801ddec:	0a00      	lsrs	r0, r0, #8
 801ddee:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801ddf2:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801ddf6:	4378      	muls	r0, r7
 801ddf8:	fb02 0006 	mla	r0, r2, r6, r0
 801ddfc:	fb0e 0e08 	mla	lr, lr, r8, r0
 801de00:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801de04:	fb04 e000 	mla	r0, r4, r0, lr
 801de08:	0a00      	lsrs	r0, r0, #8
 801de0a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801de0e:	4328      	orrs	r0, r5
 801de10:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801de14:	b2ad      	uxth	r5, r5
 801de16:	b2c4      	uxtb	r4, r0
 801de18:	436b      	muls	r3, r5
 801de1a:	fb14 f405 	smulbb	r4, r4, r5
 801de1e:	1c5a      	adds	r2, r3, #1
 801de20:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801de24:	780b      	ldrb	r3, [r1, #0]
 801de26:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801de2a:	b2d2      	uxtb	r2, r2
 801de2c:	fb03 4302 	mla	r3, r3, r2, r4
 801de30:	b29b      	uxth	r3, r3
 801de32:	1c5c      	adds	r4, r3, #1
 801de34:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801de38:	784c      	ldrb	r4, [r1, #1]
 801de3a:	fb14 f402 	smulbb	r4, r4, r2
 801de3e:	121b      	asrs	r3, r3, #8
 801de40:	700b      	strb	r3, [r1, #0]
 801de42:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801de46:	fb03 4305 	mla	r3, r3, r5, r4
 801de4a:	b29b      	uxth	r3, r3
 801de4c:	1c5c      	adds	r4, r3, #1
 801de4e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801de52:	0c04      	lsrs	r4, r0, #16
 801de54:	7888      	ldrb	r0, [r1, #2]
 801de56:	121b      	asrs	r3, r3, #8
 801de58:	fb10 f002 	smulbb	r0, r0, r2
 801de5c:	704b      	strb	r3, [r1, #1]
 801de5e:	fb04 0005 	mla	r0, r4, r5, r0
 801de62:	b280      	uxth	r0, r0
 801de64:	1c43      	adds	r3, r0, #1
 801de66:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801de6a:	1200      	asrs	r0, r0, #8
 801de6c:	7088      	strb	r0, [r1, #2]
 801de6e:	b003      	add	sp, #12
 801de70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de74:	2600      	movs	r6, #0
 801de76:	e6f3      	b.n	801dc60 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801de78:	2000      	movs	r0, #0
 801de7a:	4606      	mov	r6, r0
 801de7c:	e6fd      	b.n	801dc7a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801de7e:	2000      	movs	r0, #0
 801de80:	e6fb      	b.n	801dc7a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801de82:	4620      	mov	r0, r4
 801de84:	e6f9      	b.n	801dc7a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801de86:	2500      	movs	r5, #0
 801de88:	e70b      	b.n	801dca2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801de8a:	2200      	movs	r2, #0
 801de8c:	4615      	mov	r5, r2
 801de8e:	e716      	b.n	801dcbe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801de90:	4672      	mov	r2, lr
 801de92:	4675      	mov	r5, lr
 801de94:	e713      	b.n	801dcbe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801de96:	2200      	movs	r2, #0
 801de98:	e711      	b.n	801dcbe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801de9a:	4622      	mov	r2, r4
 801de9c:	e70f      	b.n	801dcbe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801de9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dea2:	b09f      	sub	sp, #124	@ 0x7c
 801dea4:	921b      	str	r2, [sp, #108]	@ 0x6c
 801dea6:	9309      	str	r3, [sp, #36]	@ 0x24
 801dea8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801deaa:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801deae:	901d      	str	r0, [sp, #116]	@ 0x74
 801deb0:	931c      	str	r3, [sp, #112]	@ 0x70
 801deb2:	6850      	ldr	r0, [r2, #4]
 801deb4:	9119      	str	r1, [sp, #100]	@ 0x64
 801deb6:	6812      	ldr	r2, [r2, #0]
 801deb8:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801deba:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801debe:	fb00 1303 	mla	r3, r0, r3, r1
 801dec2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dec6:	18d3      	adds	r3, r2, r3
 801dec8:	930c      	str	r3, [sp, #48]	@ 0x30
 801deca:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	9312      	str	r3, [sp, #72]	@ 0x48
 801ded0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ded2:	685e      	ldr	r6, [r3, #4]
 801ded4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801ded8:	3604      	adds	r6, #4
 801deda:	930d      	str	r3, [sp, #52]	@ 0x34
 801dedc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dede:	2b00      	cmp	r3, #0
 801dee0:	dc03      	bgt.n	801deea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801dee2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dee4:	2b00      	cmp	r3, #0
 801dee6:	f340 8378 	ble.w	801e5da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801deea:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801deec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801def0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801def4:	1e48      	subs	r0, r1, #1
 801def6:	1e57      	subs	r7, r2, #1
 801def8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801defa:	2b00      	cmp	r3, #0
 801defc:	f340 818c 	ble.w	801e218 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801df00:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801df02:	142b      	asrs	r3, r5, #16
 801df04:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801df08:	d406      	bmi.n	801df18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801df0a:	4584      	cmp	ip, r0
 801df0c:	da04      	bge.n	801df18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801df0e:	2b00      	cmp	r3, #0
 801df10:	db02      	blt.n	801df18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801df12:	42bb      	cmp	r3, r7
 801df14:	f2c0 8181 	blt.w	801e21a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801df18:	f11c 0c01 	adds.w	ip, ip, #1
 801df1c:	f100 816f 	bmi.w	801e1fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801df20:	4561      	cmp	r1, ip
 801df22:	f2c0 816c 	blt.w	801e1fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801df26:	3301      	adds	r3, #1
 801df28:	f100 8169 	bmi.w	801e1fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801df2c:	429a      	cmp	r2, r3
 801df2e:	f2c0 8166 	blt.w	801e1fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801df32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df34:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801df36:	931a      	str	r3, [sp, #104]	@ 0x68
 801df38:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	f340 818c 	ble.w	801e258 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801df40:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801df42:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801df46:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801df4a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801df4e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801df50:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801df54:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801df56:	141b      	asrs	r3, r3, #16
 801df58:	f100 81d0 	bmi.w	801e2fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801df5c:	f100 38ff 	add.w	r8, r0, #4294967295
 801df60:	4543      	cmp	r3, r8
 801df62:	f280 81cb 	bge.w	801e2fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801df66:	f1bc 0f00 	cmp.w	ip, #0
 801df6a:	f2c0 81c7 	blt.w	801e2fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801df6e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801df72:	45c4      	cmp	ip, r8
 801df74:	f280 81c2 	bge.w	801e2fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801df78:	b200      	sxth	r0, r0
 801df7a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801df7c:	fb0c 3300 	mla	r3, ip, r0, r3
 801df80:	eb04 0803 	add.w	r8, r4, r3
 801df84:	5ce3      	ldrb	r3, [r4, r3]
 801df86:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801df8a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801df8e:	2a00      	cmp	r2, #0
 801df90:	f000 81a9 	beq.w	801e2e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801df94:	f898 c001 	ldrb.w	ip, [r8, #1]
 801df98:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801df9c:	940e      	str	r4, [sp, #56]	@ 0x38
 801df9e:	0e24      	lsrs	r4, r4, #24
 801dfa0:	9415      	str	r4, [sp, #84]	@ 0x54
 801dfa2:	b179      	cbz	r1, 801dfc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dfa4:	eb08 0c00 	add.w	ip, r8, r0
 801dfa8:	f818 0000 	ldrb.w	r0, [r8, r0]
 801dfac:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dfb0:	900a      	str	r0, [sp, #40]	@ 0x28
 801dfb2:	0e00      	lsrs	r0, r0, #24
 801dfb4:	9013      	str	r0, [sp, #76]	@ 0x4c
 801dfb6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801dfba:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dfbe:	900f      	str	r0, [sp, #60]	@ 0x3c
 801dfc0:	0e00      	lsrs	r0, r0, #24
 801dfc2:	9016      	str	r0, [sp, #88]	@ 0x58
 801dfc4:	b292      	uxth	r2, r2
 801dfc6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dfc8:	b289      	uxth	r1, r1
 801dfca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dfcc:	fb02 f901 	mul.w	r9, r2, r1
 801dfd0:	0112      	lsls	r2, r2, #4
 801dfd2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dfd6:	eba2 0809 	sub.w	r8, r2, r9
 801dfda:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801dfde:	b289      	uxth	r1, r1
 801dfe0:	fa1f f888 	uxth.w	r8, r8
 801dfe4:	1a52      	subs	r2, r2, r1
 801dfe6:	fb08 f000 	mul.w	r0, r8, r0
 801dfea:	b292      	uxth	r2, r2
 801dfec:	fb02 000e 	mla	r0, r2, lr, r0
 801dff0:	fb01 0004 	mla	r0, r1, r4, r0
 801dff4:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dff6:	fb09 0004 	mla	r0, r9, r4, r0
 801dffa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dffe:	2800      	cmp	r0, #0
 801e000:	f000 80f2 	beq.w	801e1e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e004:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e008:	d01b      	beq.n	801e042 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e00a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e00e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e012:	fb0e fa0a 	mul.w	sl, lr, sl
 801e016:	fb0e fe03 	mul.w	lr, lr, r3
 801e01a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e01e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e022:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e026:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e02a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e02e:	4453      	add	r3, sl
 801e030:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e034:	0a1b      	lsrs	r3, r3, #8
 801e036:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e03a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e03e:	ea43 030c 	orr.w	r3, r3, ip
 801e042:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e044:	2cff      	cmp	r4, #255	@ 0xff
 801e046:	d021      	beq.n	801e08c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e048:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e04a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e04e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e050:	fb04 fb0b 	mul.w	fp, r4, fp
 801e054:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e056:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e05a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e05c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e060:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e064:	fb04 fa0a 	mul.w	sl, r4, sl
 801e068:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e06c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e070:	44de      	add	lr, fp
 801e072:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e076:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e07a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e07e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e082:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e086:	ea4e 040a 	orr.w	r4, lr, sl
 801e08a:	940e      	str	r4, [sp, #56]	@ 0x38
 801e08c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e08e:	2cff      	cmp	r4, #255	@ 0xff
 801e090:	d021      	beq.n	801e0d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801e092:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e094:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e098:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e09a:	fb04 fb0b 	mul.w	fp, r4, fp
 801e09e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e0a0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0a4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e0a6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e0aa:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e0ae:	fb04 fa0a 	mul.w	sl, r4, sl
 801e0b2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e0b6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e0ba:	44de      	add	lr, fp
 801e0bc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e0c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e0c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0c8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e0cc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e0d0:	ea4e 040a 	orr.w	r4, lr, sl
 801e0d4:	940a      	str	r4, [sp, #40]	@ 0x28
 801e0d6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e0d8:	2cff      	cmp	r4, #255	@ 0xff
 801e0da:	d021      	beq.n	801e120 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801e0dc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e0de:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e0e2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e0e4:	fb04 fb0b 	mul.w	fp, r4, fp
 801e0e8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e0ea:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0ee:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e0f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e0f4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e0f8:	fb04 fa0a 	mul.w	sl, r4, sl
 801e0fc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e100:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e104:	44de      	add	lr, fp
 801e106:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e10a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e10e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e112:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e116:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e11a:	ea4e 040a 	orr.w	r4, lr, sl
 801e11e:	940f      	str	r4, [sp, #60]	@ 0x3c
 801e120:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e122:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e126:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e12a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e12e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e130:	fb08 fc0c 	mul.w	ip, r8, ip
 801e134:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e138:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e13c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e13e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e142:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e146:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e148:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e14c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e150:	fb08 f80e 	mul.w	r8, r8, lr
 801e154:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e158:	fb02 8303 	mla	r3, r2, r3, r8
 801e15c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e15e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e162:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e166:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e168:	fb01 330a 	mla	r3, r1, sl, r3
 801e16c:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801e170:	fb09 3901 	mla	r9, r9, r1, r3
 801e174:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e176:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e178:	4343      	muls	r3, r0
 801e17a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e17e:	1c58      	adds	r0, r3, #1
 801e180:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e184:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e188:	ea4c 0c09 	orr.w	ip, ip, r9
 801e18c:	783b      	ldrb	r3, [r7, #0]
 801e18e:	fa5f f28c 	uxtb.w	r2, ip
 801e192:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e196:	fb12 f201 	smulbb	r2, r2, r1
 801e19a:	b2c0      	uxtb	r0, r0
 801e19c:	fb03 2300 	mla	r3, r3, r0, r2
 801e1a0:	b29b      	uxth	r3, r3
 801e1a2:	1c5a      	adds	r2, r3, #1
 801e1a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e1a8:	787a      	ldrb	r2, [r7, #1]
 801e1aa:	fb12 f200 	smulbb	r2, r2, r0
 801e1ae:	121b      	asrs	r3, r3, #8
 801e1b0:	703b      	strb	r3, [r7, #0]
 801e1b2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e1b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e1ba:	fb03 2301 	mla	r3, r3, r1, r2
 801e1be:	b29b      	uxth	r3, r3
 801e1c0:	1c5a      	adds	r2, r3, #1
 801e1c2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e1c6:	121b      	asrs	r3, r3, #8
 801e1c8:	707b      	strb	r3, [r7, #1]
 801e1ca:	78bb      	ldrb	r3, [r7, #2]
 801e1cc:	fb13 f000 	smulbb	r0, r3, r0
 801e1d0:	fb0c 0c01 	mla	ip, ip, r1, r0
 801e1d4:	fa1f fc8c 	uxth.w	ip, ip
 801e1d8:	f10c 0301 	add.w	r3, ip, #1
 801e1dc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e1e0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e1e4:	f887 c002 	strb.w	ip, [r7, #2]
 801e1e8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e1ea:	3703      	adds	r7, #3
 801e1ec:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e1ee:	441a      	add	r2, r3
 801e1f0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e1f2:	441d      	add	r5, r3
 801e1f4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801e1f6:	9229      	str	r2, [sp, #164]	@ 0xa4
 801e1f8:	3b01      	subs	r3, #1
 801e1fa:	931a      	str	r3, [sp, #104]	@ 0x68
 801e1fc:	e69c      	b.n	801df38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e1fe:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e200:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801e202:	441c      	add	r4, r3
 801e204:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e206:	441d      	add	r5, r3
 801e208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e20a:	9429      	str	r4, [sp, #164]	@ 0xa4
 801e20c:	3b01      	subs	r3, #1
 801e20e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e210:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e212:	3303      	adds	r3, #3
 801e214:	930c      	str	r3, [sp, #48]	@ 0x30
 801e216:	e66f      	b.n	801def8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e218:	d026      	beq.n	801e268 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801e21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e21c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801e21e:	3b01      	subs	r3, #1
 801e220:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801e222:	fb00 4003 	mla	r0, r0, r3, r4
 801e226:	1400      	asrs	r0, r0, #16
 801e228:	f53f ae83 	bmi.w	801df32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e22c:	3901      	subs	r1, #1
 801e22e:	4288      	cmp	r0, r1
 801e230:	f6bf ae7f 	bge.w	801df32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e234:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801e236:	fb01 5303 	mla	r3, r1, r3, r5
 801e23a:	141b      	asrs	r3, r3, #16
 801e23c:	f53f ae79 	bmi.w	801df32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e240:	3a01      	subs	r2, #1
 801e242:	4293      	cmp	r3, r2
 801e244:	f6bf ae75 	bge.w	801df32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e24a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801e24e:	f103 0e03 	add.w	lr, r3, #3
 801e252:	f1bb 0f00 	cmp.w	fp, #0
 801e256:	dc71      	bgt.n	801e33c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e25a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e25e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e260:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e264:	4423      	add	r3, r4
 801e266:	930c      	str	r3, [sp, #48]	@ 0x30
 801e268:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	f340 81b5 	ble.w	801e5da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801e270:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e274:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e276:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e27a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e27e:	eef0 6a62 	vmov.f32	s13, s5
 801e282:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e286:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e28a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e28e:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801e292:	eef0 6a43 	vmov.f32	s13, s6
 801e296:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e29a:	ee16 5a90 	vmov	r5, s13
 801e29e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e2a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e2aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e2ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e2b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e2b6:	ee12 2a90 	vmov	r2, s5
 801e2ba:	eef0 2a47 	vmov.f32	s5, s14
 801e2be:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2c2:	ee13 2a10 	vmov	r2, s6
 801e2c6:	932b      	str	r3, [sp, #172]	@ 0xac
 801e2c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e2ca:	eeb0 3a67 	vmov.f32	s6, s15
 801e2ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2d2:	932c      	str	r3, [sp, #176]	@ 0xb0
 801e2d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e2d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e2d8:	3b01      	subs	r3, #1
 801e2da:	9319      	str	r3, [sp, #100]	@ 0x64
 801e2dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e2de:	bf08      	it	eq
 801e2e0:	4613      	moveq	r3, r2
 801e2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2e4:	e5fa      	b.n	801dedc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e2e6:	2900      	cmp	r1, #0
 801e2e8:	f43f ae6c 	beq.w	801dfc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e2ec:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e2f0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e2f4:	900a      	str	r0, [sp, #40]	@ 0x28
 801e2f6:	0e00      	lsrs	r0, r0, #24
 801e2f8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e2fa:	e663      	b.n	801dfc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e2fc:	f113 0801 	adds.w	r8, r3, #1
 801e300:	f53f af72 	bmi.w	801e1e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e304:	4540      	cmp	r0, r8
 801e306:	f6ff af6f 	blt.w	801e1e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e30a:	f11c 0801 	adds.w	r8, ip, #1
 801e30e:	f53f af6b 	bmi.w	801e1e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e312:	45c6      	cmp	lr, r8
 801e314:	f6ff af68 	blt.w	801e1e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e318:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801e31a:	b200      	sxth	r0, r0
 801e31c:	9302      	str	r3, [sp, #8]
 801e31e:	fa0f f38e 	sxth.w	r3, lr
 801e322:	9000      	str	r0, [sp, #0]
 801e324:	9301      	str	r3, [sp, #4]
 801e326:	4633      	mov	r3, r6
 801e328:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e32a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e32e:	e9cd c203 	strd	ip, r2, [sp, #12]
 801e332:	4639      	mov	r1, r7
 801e334:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e336:	f7ff fc74 	bl	801dc22 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801e33a:	e755      	b.n	801e1e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e33c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e33e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e342:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801e344:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e348:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e34a:	1427      	asrs	r7, r4, #16
 801e34c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e34e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e352:	142b      	asrs	r3, r5, #16
 801e354:	fb01 7303 	mla	r3, r1, r3, r7
 801e358:	18e7      	adds	r7, r4, r3
 801e35a:	5ce3      	ldrb	r3, [r4, r3]
 801e35c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e360:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e364:	2a00      	cmp	r2, #0
 801e366:	f000 812e 	beq.w	801e5c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801e36a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e36e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801e372:	9410      	str	r4, [sp, #64]	@ 0x40
 801e374:	0e24      	lsrs	r4, r4, #24
 801e376:	9417      	str	r4, [sp, #92]	@ 0x5c
 801e378:	b170      	cbz	r0, 801e398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e37a:	eb07 0801 	add.w	r8, r7, r1
 801e37e:	5c79      	ldrb	r1, [r7, r1]
 801e380:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e384:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e386:	0e09      	lsrs	r1, r1, #24
 801e388:	9114      	str	r1, [sp, #80]	@ 0x50
 801e38a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e38e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e392:	9111      	str	r1, [sp, #68]	@ 0x44
 801e394:	0e09      	lsrs	r1, r1, #24
 801e396:	9118      	str	r1, [sp, #96]	@ 0x60
 801e398:	b292      	uxth	r2, r2
 801e39a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e39c:	b280      	uxth	r0, r0
 801e39e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e3a0:	fb02 f900 	mul.w	r9, r2, r0
 801e3a4:	0112      	lsls	r2, r2, #4
 801e3a6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e3aa:	eba2 0809 	sub.w	r8, r2, r9
 801e3ae:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e3b2:	b280      	uxth	r0, r0
 801e3b4:	fa1f f888 	uxth.w	r8, r8
 801e3b8:	1a12      	subs	r2, r2, r0
 801e3ba:	fb08 f101 	mul.w	r1, r8, r1
 801e3be:	b292      	uxth	r2, r2
 801e3c0:	fb02 110c 	mla	r1, r2, ip, r1
 801e3c4:	fb00 1104 	mla	r1, r0, r4, r1
 801e3c8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e3ca:	fb09 1104 	mla	r1, r9, r4, r1
 801e3ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e3d2:	2900      	cmp	r1, #0
 801e3d4:	f000 80ec 	beq.w	801e5b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801e3d8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e3dc:	d019      	beq.n	801e412 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801e3de:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e3e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e3e6:	fb0c fa0a 	mul.w	sl, ip, sl
 801e3ea:	fb0c fc03 	mul.w	ip, ip, r3
 801e3ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e3f2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e3f6:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e3fa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e3fe:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e402:	4453      	add	r3, sl
 801e404:	0a3f      	lsrs	r7, r7, #8
 801e406:	0a1b      	lsrs	r3, r3, #8
 801e408:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e40c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e410:	433b      	orrs	r3, r7
 801e412:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e414:	2cff      	cmp	r4, #255	@ 0xff
 801e416:	d020      	beq.n	801e45a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801e418:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e41a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e41e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e420:	4367      	muls	r7, r4
 801e422:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e424:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e428:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e42c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e42e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e432:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e436:	fb04 fa0a 	mul.w	sl, r4, sl
 801e43a:	44bc      	add	ip, r7
 801e43c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e440:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e444:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e448:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e44c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e450:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e454:	ea4c 040a 	orr.w	r4, ip, sl
 801e458:	9410      	str	r4, [sp, #64]	@ 0x40
 801e45a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e45c:	2cff      	cmp	r4, #255	@ 0xff
 801e45e:	d020      	beq.n	801e4a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801e460:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e462:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e466:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e468:	4367      	muls	r7, r4
 801e46a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e46c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e470:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e474:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e476:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e47a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e47e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e482:	44bc      	add	ip, r7
 801e484:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e488:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e48c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e490:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e494:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e498:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e49c:	ea4c 040a 	orr.w	r4, ip, sl
 801e4a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e4a2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e4a4:	2cff      	cmp	r4, #255	@ 0xff
 801e4a6:	d020      	beq.n	801e4ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801e4a8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e4aa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e4ae:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e4b0:	4367      	muls	r7, r4
 801e4b2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e4b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e4b8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e4bc:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e4be:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e4c2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e4c6:	fb04 fa0a 	mul.w	sl, r4, sl
 801e4ca:	44bc      	add	ip, r7
 801e4cc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e4d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e4d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e4d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e4dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e4e0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e4e4:	ea4c 040a 	orr.w	r4, ip, sl
 801e4e8:	9411      	str	r4, [sp, #68]	@ 0x44
 801e4ea:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e4ec:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e4f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e4f4:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e4f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e4fa:	fb08 f707 	mul.w	r7, r8, r7
 801e4fe:	fb02 770c 	mla	r7, r2, ip, r7
 801e502:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e506:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e508:	fb00 770c 	mla	r7, r0, ip, r7
 801e50c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e510:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e512:	fb09 770c 	mla	r7, r9, ip, r7
 801e516:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e51a:	fb08 f80c 	mul.w	r8, r8, ip
 801e51e:	0a3f      	lsrs	r7, r7, #8
 801e520:	fb02 8303 	mla	r3, r2, r3, r8
 801e524:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e526:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e52a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e52e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e530:	fb00 330a 	mla	r3, r0, sl, r3
 801e534:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801e538:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e53a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e53e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e540:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e544:	434b      	muls	r3, r1
 801e546:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e54a:	1c59      	adds	r1, r3, #1
 801e54c:	ea47 070c 	orr.w	r7, r7, ip
 801e550:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e554:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e558:	b2fa      	uxtb	r2, r7
 801e55a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e55e:	fb12 f200 	smulbb	r2, r2, r0
 801e562:	b2c9      	uxtb	r1, r1
 801e564:	fb03 2301 	mla	r3, r3, r1, r2
 801e568:	b29b      	uxth	r3, r3
 801e56a:	1c5a      	adds	r2, r3, #1
 801e56c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e570:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e574:	fb12 f201 	smulbb	r2, r2, r1
 801e578:	121b      	asrs	r3, r3, #8
 801e57a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e57e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801e582:	0c3f      	lsrs	r7, r7, #16
 801e584:	fb03 2300 	mla	r3, r3, r0, r2
 801e588:	b29b      	uxth	r3, r3
 801e58a:	1c5a      	adds	r2, r3, #1
 801e58c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e590:	121b      	asrs	r3, r3, #8
 801e592:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e596:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e59a:	fb13 f101 	smulbb	r1, r3, r1
 801e59e:	fb07 1700 	mla	r7, r7, r0, r1
 801e5a2:	b2bf      	uxth	r7, r7
 801e5a4:	1c7b      	adds	r3, r7, #1
 801e5a6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e5aa:	123f      	asrs	r7, r7, #8
 801e5ac:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e5b0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e5b2:	f10e 0e03 	add.w	lr, lr, #3
 801e5b6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e5b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e5bc:	441a      	add	r2, r3
 801e5be:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e5c0:	9229      	str	r2, [sp, #164]	@ 0xa4
 801e5c2:	441d      	add	r5, r3
 801e5c4:	e645      	b.n	801e252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801e5c6:	2800      	cmp	r0, #0
 801e5c8:	f43f aee6 	beq.w	801e398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e5cc:	5c79      	ldrb	r1, [r7, r1]
 801e5ce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e5d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e5d4:	0e09      	lsrs	r1, r1, #24
 801e5d6:	9114      	str	r1, [sp, #80]	@ 0x50
 801e5d8:	e6de      	b.n	801e398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e5da:	b01f      	add	sp, #124	@ 0x7c
 801e5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5e0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801e5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5e4:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801e5e8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801e5ec:	2d00      	cmp	r5, #0
 801e5ee:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801e5f2:	fb05 700e 	mla	r0, r5, lr, r7
 801e5f6:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801e5fa:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801e5fe:	eb02 0800 	add.w	r8, r2, r0
 801e602:	f2c0 8105 	blt.w	801e810 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e606:	45a9      	cmp	r9, r5
 801e608:	f340 8102 	ble.w	801e810 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e60c:	2f00      	cmp	r7, #0
 801e60e:	f2c0 80fd 	blt.w	801e80c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e612:	45be      	cmp	lr, r7
 801e614:	f340 80fa 	ble.w	801e80c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e618:	5c12      	ldrb	r2, [r2, r0]
 801e61a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e61e:	1c7a      	adds	r2, r7, #1
 801e620:	f100 80f9 	bmi.w	801e816 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e624:	4596      	cmp	lr, r2
 801e626:	f340 80f6 	ble.w	801e816 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e62a:	2c00      	cmp	r4, #0
 801e62c:	f000 80f5 	beq.w	801e81a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801e630:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e634:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e638:	3501      	adds	r5, #1
 801e63a:	f100 80f2 	bmi.w	801e822 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e63e:	45a9      	cmp	r9, r5
 801e640:	f340 80ef 	ble.w	801e822 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e644:	f1bc 0f00 	cmp.w	ip, #0
 801e648:	f000 80ee 	beq.w	801e828 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801e64c:	2f00      	cmp	r7, #0
 801e64e:	f2c0 80e6 	blt.w	801e81e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e652:	45be      	cmp	lr, r7
 801e654:	f340 80e3 	ble.w	801e81e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e658:	f818 200e 	ldrb.w	r2, [r8, lr]
 801e65c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e660:	3701      	adds	r7, #1
 801e662:	f100 80e4 	bmi.w	801e82e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e666:	45be      	cmp	lr, r7
 801e668:	f340 80e1 	ble.w	801e82e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e66c:	2c00      	cmp	r4, #0
 801e66e:	f000 80e0 	beq.w	801e832 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801e672:	44c6      	add	lr, r8
 801e674:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e678:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e67c:	b2a3      	uxth	r3, r4
 801e67e:	fa1f fc8c 	uxth.w	ip, ip
 801e682:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e686:	fb0c fe03 	mul.w	lr, ip, r3
 801e68a:	011b      	lsls	r3, r3, #4
 801e68c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e690:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801e694:	eba3 070e 	sub.w	r7, r3, lr
 801e698:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801e69c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e6a0:	fa1f f48c 	uxth.w	r4, ip
 801e6a4:	b2bf      	uxth	r7, r7
 801e6a6:	1b1b      	subs	r3, r3, r4
 801e6a8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e6ac:	fb07 fc0a 	mul.w	ip, r7, sl
 801e6b0:	b29b      	uxth	r3, r3
 801e6b2:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e6b6:	9300      	str	r3, [sp, #0]
 801e6b8:	fb04 cc09 	mla	ip, r4, r9, ip
 801e6bc:	fb0e cc08 	mla	ip, lr, r8, ip
 801e6c0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e6c4:	9301      	str	r3, [sp, #4]
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	f000 809d 	beq.w	801e806 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801e6cc:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801e6d0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e6d4:	fb0b fc0c 	mul.w	ip, fp, ip
 801e6d8:	fb0b f606 	mul.w	r6, fp, r6
 801e6dc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e6e0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e6e4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801e6e8:	44dc      	add	ip, fp
 801e6ea:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801e6ee:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e6f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6f6:	fb0a fb0b 	mul.w	fp, sl, fp
 801e6fa:	fb0a fa00 	mul.w	sl, sl, r0
 801e6fe:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801e702:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801e706:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801e70a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e70e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e712:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e716:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801e71a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e71e:	0a36      	lsrs	r6, r6, #8
 801e720:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e724:	44dc      	add	ip, fp
 801e726:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801e72a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801e72e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e732:	fb09 fb0b 	mul.w	fp, r9, fp
 801e736:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e73a:	fb09 f905 	mul.w	r9, r9, r5
 801e73e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801e742:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e746:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801e74a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e74e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e752:	fb0c fc07 	mul.w	ip, ip, r7
 801e756:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801e75a:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801e75e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e762:	4458      	add	r0, fp
 801e764:	fb08 f505 	mul.w	r5, r8, r5
 801e768:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e76c:	fb08 f802 	mul.w	r8, r8, r2
 801e770:	0a00      	lsrs	r0, r0, #8
 801e772:	0a2a      	lsrs	r2, r5, #8
 801e774:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801e778:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e77c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e780:	4415      	add	r5, r2
 801e782:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801e786:	0a2d      	lsrs	r5, r5, #8
 801e788:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e78c:	9a00      	ldr	r2, [sp, #0]
 801e78e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e792:	fb03 cc02 	mla	ip, r3, r2, ip
 801e796:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e79a:	9b01      	ldr	r3, [sp, #4]
 801e79c:	fb05 c50e 	mla	r5, r5, lr, ip
 801e7a0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801e7a4:	43db      	mvns	r3, r3
 801e7a6:	fb00 5004 	mla	r0, r0, r4, r5
 801e7aa:	b2db      	uxtb	r3, r3
 801e7ac:	0a00      	lsrs	r0, r0, #8
 801e7ae:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801e7b2:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801e7b6:	4378      	muls	r0, r7
 801e7b8:	fb02 0006 	mla	r0, r2, r6, r0
 801e7bc:	780a      	ldrb	r2, [r1, #0]
 801e7be:	fb0e 0e08 	mla	lr, lr, r8, r0
 801e7c2:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801e7c6:	fb04 e000 	mla	r0, r4, r0, lr
 801e7ca:	fb02 f403 	mul.w	r4, r2, r3
 801e7ce:	0a00      	lsrs	r0, r0, #8
 801e7d0:	1c62      	adds	r2, r4, #1
 801e7d2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e7d6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e7da:	4328      	orrs	r0, r5
 801e7dc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e7e0:	700a      	strb	r2, [r1, #0]
 801e7e2:	784a      	ldrb	r2, [r1, #1]
 801e7e4:	435a      	muls	r2, r3
 801e7e6:	1c54      	adds	r4, r2, #1
 801e7e8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e7ec:	0a02      	lsrs	r2, r0, #8
 801e7ee:	0c00      	lsrs	r0, r0, #16
 801e7f0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e7f4:	704a      	strb	r2, [r1, #1]
 801e7f6:	788a      	ldrb	r2, [r1, #2]
 801e7f8:	4353      	muls	r3, r2
 801e7fa:	1c5a      	adds	r2, r3, #1
 801e7fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e800:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e804:	7088      	strb	r0, [r1, #2]
 801e806:	b003      	add	sp, #12
 801e808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e80c:	2600      	movs	r6, #0
 801e80e:	e706      	b.n	801e61e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801e810:	2000      	movs	r0, #0
 801e812:	4606      	mov	r6, r0
 801e814:	e710      	b.n	801e638 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e816:	2000      	movs	r0, #0
 801e818:	e70e      	b.n	801e638 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e81a:	4620      	mov	r0, r4
 801e81c:	e70c      	b.n	801e638 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e81e:	2500      	movs	r5, #0
 801e820:	e71e      	b.n	801e660 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801e822:	2200      	movs	r2, #0
 801e824:	4615      	mov	r5, r2
 801e826:	e729      	b.n	801e67c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e828:	4662      	mov	r2, ip
 801e82a:	4665      	mov	r5, ip
 801e82c:	e726      	b.n	801e67c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e82e:	2200      	movs	r2, #0
 801e830:	e724      	b.n	801e67c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e832:	4622      	mov	r2, r4
 801e834:	e722      	b.n	801e67c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801e836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e83a:	b09b      	sub	sp, #108	@ 0x6c
 801e83c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e840:	9218      	str	r2, [sp, #96]	@ 0x60
 801e842:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e844:	9019      	str	r0, [sp, #100]	@ 0x64
 801e846:	9116      	str	r1, [sp, #88]	@ 0x58
 801e848:	6850      	ldr	r0, [r2, #4]
 801e84a:	9307      	str	r3, [sp, #28]
 801e84c:	6812      	ldr	r2, [r2, #0]
 801e84e:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801e850:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801e854:	fb00 1303 	mla	r3, r0, r3, r1
 801e858:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e85c:	18d3      	adds	r3, r2, r3
 801e85e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e860:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e866:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e868:	685e      	ldr	r6, [r3, #4]
 801e86a:	3604      	adds	r6, #4
 801e86c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e86e:	2b00      	cmp	r3, #0
 801e870:	dc03      	bgt.n	801e87a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e872:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e874:	2b00      	cmp	r3, #0
 801e876:	f340 834f 	ble.w	801ef18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e87a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e87c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e880:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e884:	1e48      	subs	r0, r1, #1
 801e886:	1e57      	subs	r7, r2, #1
 801e888:	9b07      	ldr	r3, [sp, #28]
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	f340 8178 	ble.w	801eb80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e890:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e892:	142b      	asrs	r3, r5, #16
 801e894:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e898:	d406      	bmi.n	801e8a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e89a:	4584      	cmp	ip, r0
 801e89c:	da04      	bge.n	801e8a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	db02      	blt.n	801e8a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e8a2:	42bb      	cmp	r3, r7
 801e8a4:	f2c0 816d 	blt.w	801eb82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e8a8:	f11c 0c01 	adds.w	ip, ip, #1
 801e8ac:	f100 815b 	bmi.w	801eb66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e8b0:	4561      	cmp	r1, ip
 801e8b2:	f2c0 8158 	blt.w	801eb66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e8b6:	3301      	adds	r3, #1
 801e8b8:	f100 8155 	bmi.w	801eb66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e8bc:	429a      	cmp	r2, r3
 801e8be:	f2c0 8152 	blt.w	801eb66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e8c2:	9b07      	ldr	r3, [sp, #28]
 801e8c4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e8c6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e8c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e8ca:	2b00      	cmp	r3, #0
 801e8cc:	f340 8178 	ble.w	801ebc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e8d0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e8d2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e8d6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e8da:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e8de:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e8e0:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e8e4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e8e6:	141b      	asrs	r3, r3, #16
 801e8e8:	f100 81ba 	bmi.w	801ec60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e8ec:	f101 38ff 	add.w	r8, r1, #4294967295
 801e8f0:	4543      	cmp	r3, r8
 801e8f2:	f280 81b5 	bge.w	801ec60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e8f6:	f1bc 0f00 	cmp.w	ip, #0
 801e8fa:	f2c0 81b1 	blt.w	801ec60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e8fe:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e902:	45c4      	cmp	ip, r8
 801e904:	f280 81ac 	bge.w	801ec60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e908:	b209      	sxth	r1, r1
 801e90a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e90c:	fb0c 3301 	mla	r3, ip, r1, r3
 801e910:	eb04 0803 	add.w	r8, r4, r3
 801e914:	5ce3      	ldrb	r3, [r4, r3]
 801e916:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e91a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e91e:	2a00      	cmp	r2, #0
 801e920:	f000 8193 	beq.w	801ec4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801e924:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e928:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e92c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e92e:	0e24      	lsrs	r4, r4, #24
 801e930:	9412      	str	r4, [sp, #72]	@ 0x48
 801e932:	b178      	cbz	r0, 801e954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e934:	eb08 0c01 	add.w	ip, r8, r1
 801e938:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e93c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e940:	9108      	str	r1, [sp, #32]
 801e942:	0e09      	lsrs	r1, r1, #24
 801e944:	9110      	str	r1, [sp, #64]	@ 0x40
 801e946:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e94a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e94e:	910c      	str	r1, [sp, #48]	@ 0x30
 801e950:	0e09      	lsrs	r1, r1, #24
 801e952:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e954:	b292      	uxth	r2, r2
 801e956:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e958:	b280      	uxth	r0, r0
 801e95a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e95c:	fb02 f900 	mul.w	r9, r2, r0
 801e960:	0112      	lsls	r2, r2, #4
 801e962:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e966:	eba2 0809 	sub.w	r8, r2, r9
 801e96a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e96e:	b280      	uxth	r0, r0
 801e970:	fa1f f888 	uxth.w	r8, r8
 801e974:	1a12      	subs	r2, r2, r0
 801e976:	fb08 f101 	mul.w	r1, r8, r1
 801e97a:	b292      	uxth	r2, r2
 801e97c:	fb02 110e 	mla	r1, r2, lr, r1
 801e980:	fb00 1104 	mla	r1, r0, r4, r1
 801e984:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e986:	fb09 1104 	mla	r1, r9, r4, r1
 801e98a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e98e:	2900      	cmp	r1, #0
 801e990:	f000 80de 	beq.w	801eb50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e994:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e998:	d01b      	beq.n	801e9d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801e99a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e99e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e9a2:	fb0e fa0a 	mul.w	sl, lr, sl
 801e9a6:	fb0e fe03 	mul.w	lr, lr, r3
 801e9aa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e9ae:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e9b2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e9b6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e9ba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e9be:	4453      	add	r3, sl
 801e9c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9c4:	0a1b      	lsrs	r3, r3, #8
 801e9c6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e9ca:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e9ce:	ea43 030c 	orr.w	r3, r3, ip
 801e9d2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e9d4:	2cff      	cmp	r4, #255	@ 0xff
 801e9d6:	d021      	beq.n	801ea1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e9d8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e9da:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e9de:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e9e0:	fb04 fb0b 	mul.w	fp, r4, fp
 801e9e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e9e6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e9ea:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e9ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e9f0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e9f4:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e9fc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ea00:	44de      	add	lr, fp
 801ea02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea0e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ea12:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea16:	ea4e 040a 	orr.w	r4, lr, sl
 801ea1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ea1c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ea1e:	2cff      	cmp	r4, #255	@ 0xff
 801ea20:	d021      	beq.n	801ea66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ea22:	9c08      	ldr	r4, [sp, #32]
 801ea24:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ea28:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ea2a:	fb04 fb0b 	mul.w	fp, r4, fp
 801ea2e:	9c08      	ldr	r4, [sp, #32]
 801ea30:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ea34:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ea36:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea3a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ea3e:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea42:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ea46:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ea4a:	44de      	add	lr, fp
 801ea4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea58:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ea5c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea60:	ea4e 040a 	orr.w	r4, lr, sl
 801ea64:	9408      	str	r4, [sp, #32]
 801ea66:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ea68:	2cff      	cmp	r4, #255	@ 0xff
 801ea6a:	d021      	beq.n	801eab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ea6c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ea6e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ea72:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ea74:	fb04 fb0b 	mul.w	fp, r4, fp
 801ea78:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ea7a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ea7e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ea80:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea84:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ea88:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea8c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ea90:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ea94:	44de      	add	lr, fp
 801ea96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eaa2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eaa6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eaaa:	ea4e 040a 	orr.w	r4, lr, sl
 801eaae:	940c      	str	r4, [sp, #48]	@ 0x30
 801eab0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eab2:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801eab6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801eaba:	43c9      	mvns	r1, r1
 801eabc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eac0:	9c08      	ldr	r4, [sp, #32]
 801eac2:	b2c9      	uxtb	r1, r1
 801eac4:	fb08 fc0c 	mul.w	ip, r8, ip
 801eac8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801eacc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ead0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ead2:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ead6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801eada:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eadc:	fb09 cc0e 	mla	ip, r9, lr, ip
 801eae0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801eae4:	fb08 f80e 	mul.w	r8, r8, lr
 801eae8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eaec:	fb02 8303 	mla	r3, r2, r3, r8
 801eaf0:	9a08      	ldr	r2, [sp, #32]
 801eaf2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eaf6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801eafa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eafc:	fb00 330a 	mla	r3, r0, sl, r3
 801eb00:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801eb04:	fb09 3900 	mla	r9, r9, r0, r3
 801eb08:	783b      	ldrb	r3, [r7, #0]
 801eb0a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eb0e:	fb03 f201 	mul.w	r2, r3, r1
 801eb12:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801eb16:	1c53      	adds	r3, r2, #1
 801eb18:	ea4c 0c09 	orr.w	ip, ip, r9
 801eb1c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eb20:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801eb24:	703b      	strb	r3, [r7, #0]
 801eb26:	787b      	ldrb	r3, [r7, #1]
 801eb28:	434b      	muls	r3, r1
 801eb2a:	1c5a      	adds	r2, r3, #1
 801eb2c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801eb30:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801eb34:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801eb38:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eb3c:	707b      	strb	r3, [r7, #1]
 801eb3e:	78bb      	ldrb	r3, [r7, #2]
 801eb40:	4359      	muls	r1, r3
 801eb42:	1c4b      	adds	r3, r1, #1
 801eb44:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801eb48:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801eb4c:	f887 c002 	strb.w	ip, [r7, #2]
 801eb50:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801eb52:	3703      	adds	r7, #3
 801eb54:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801eb56:	441a      	add	r2, r3
 801eb58:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eb5a:	441d      	add	r5, r3
 801eb5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801eb5e:	9225      	str	r2, [sp, #148]	@ 0x94
 801eb60:	3b01      	subs	r3, #1
 801eb62:	9317      	str	r3, [sp, #92]	@ 0x5c
 801eb64:	e6b0      	b.n	801e8c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801eb66:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801eb68:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801eb6a:	441c      	add	r4, r3
 801eb6c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eb6e:	441d      	add	r5, r3
 801eb70:	9b07      	ldr	r3, [sp, #28]
 801eb72:	9425      	str	r4, [sp, #148]	@ 0x94
 801eb74:	3b01      	subs	r3, #1
 801eb76:	9307      	str	r3, [sp, #28]
 801eb78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb7a:	3303      	adds	r3, #3
 801eb7c:	930a      	str	r3, [sp, #40]	@ 0x28
 801eb7e:	e683      	b.n	801e888 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801eb80:	d026      	beq.n	801ebd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801eb82:	9b07      	ldr	r3, [sp, #28]
 801eb84:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801eb86:	3b01      	subs	r3, #1
 801eb88:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801eb8a:	fb00 4003 	mla	r0, r0, r3, r4
 801eb8e:	1400      	asrs	r0, r0, #16
 801eb90:	f53f ae97 	bmi.w	801e8c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801eb94:	3901      	subs	r1, #1
 801eb96:	4288      	cmp	r0, r1
 801eb98:	f6bf ae93 	bge.w	801e8c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801eb9c:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801eb9e:	fb01 5303 	mla	r3, r1, r3, r5
 801eba2:	141b      	asrs	r3, r3, #16
 801eba4:	f53f ae8d 	bmi.w	801e8c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801eba8:	3a01      	subs	r2, #1
 801ebaa:	4293      	cmp	r3, r2
 801ebac:	f6bf ae89 	bge.w	801e8c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ebb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ebb2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ebb6:	f103 0e03 	add.w	lr, r3, #3
 801ebba:	f1bb 0f00 	cmp.w	fp, #0
 801ebbe:	dc6d      	bgt.n	801ec9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801ebc0:	9b07      	ldr	r3, [sp, #28]
 801ebc2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ebc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ebc8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ebcc:	4423      	add	r3, r4
 801ebce:	930a      	str	r3, [sp, #40]	@ 0x28
 801ebd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	f340 81a0 	ble.w	801ef18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801ebd8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebdc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ebde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebe2:	eeb0 6a62 	vmov.f32	s12, s5
 801ebe6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ebea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebf2:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801ebf6:	eeb0 6a43 	vmov.f32	s12, s6
 801ebfa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebfe:	ee16 5a10 	vmov	r5, s12
 801ec02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ec06:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ec0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ec12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ec16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec1a:	ee12 2a90 	vmov	r2, s5
 801ec1e:	eef0 2a47 	vmov.f32	s5, s14
 801ec22:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec26:	ee13 2a10 	vmov	r2, s6
 801ec2a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ec2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec2e:	eeb0 3a67 	vmov.f32	s6, s15
 801ec32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec36:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ec38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ec3a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ec3c:	3b01      	subs	r3, #1
 801ec3e:	9316      	str	r3, [sp, #88]	@ 0x58
 801ec40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec42:	bf08      	it	eq
 801ec44:	4613      	moveq	r3, r2
 801ec46:	9307      	str	r3, [sp, #28]
 801ec48:	e610      	b.n	801e86c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ec4a:	2800      	cmp	r0, #0
 801ec4c:	f43f ae82 	beq.w	801e954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ec50:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ec54:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ec58:	9108      	str	r1, [sp, #32]
 801ec5a:	0e09      	lsrs	r1, r1, #24
 801ec5c:	9110      	str	r1, [sp, #64]	@ 0x40
 801ec5e:	e679      	b.n	801e954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ec60:	f113 0801 	adds.w	r8, r3, #1
 801ec64:	f53f af74 	bmi.w	801eb50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ec68:	4541      	cmp	r1, r8
 801ec6a:	f6ff af71 	blt.w	801eb50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ec6e:	f11c 0801 	adds.w	r8, ip, #1
 801ec72:	f53f af6d 	bmi.w	801eb50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ec76:	45c6      	cmp	lr, r8
 801ec78:	f6ff af6a 	blt.w	801eb50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ec7c:	b209      	sxth	r1, r1
 801ec7e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ec82:	fa0f f38e 	sxth.w	r3, lr
 801ec86:	9100      	str	r1, [sp, #0]
 801ec88:	4639      	mov	r1, r7
 801ec8a:	9301      	str	r3, [sp, #4]
 801ec8c:	4633      	mov	r3, r6
 801ec8e:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801ec92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ec94:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ec96:	f7ff fca3 	bl	801e5e0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801ec9a:	e759      	b.n	801eb50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ec9c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ec9e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801eca2:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801eca4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801eca8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ecaa:	1427      	asrs	r7, r4, #16
 801ecac:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ecae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ecb2:	142b      	asrs	r3, r5, #16
 801ecb4:	fb01 7303 	mla	r3, r1, r3, r7
 801ecb8:	18e7      	adds	r7, r4, r3
 801ecba:	5ce3      	ldrb	r3, [r4, r3]
 801ecbc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ecc0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ecc4:	2a00      	cmp	r2, #0
 801ecc6:	f000 811d 	beq.w	801ef04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801ecca:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ecce:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801ecd2:	940d      	str	r4, [sp, #52]	@ 0x34
 801ecd4:	0e24      	lsrs	r4, r4, #24
 801ecd6:	9414      	str	r4, [sp, #80]	@ 0x50
 801ecd8:	b170      	cbz	r0, 801ecf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ecda:	eb07 0801 	add.w	r8, r7, r1
 801ecde:	5c79      	ldrb	r1, [r7, r1]
 801ece0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ece4:	9109      	str	r1, [sp, #36]	@ 0x24
 801ece6:	0e09      	lsrs	r1, r1, #24
 801ece8:	9111      	str	r1, [sp, #68]	@ 0x44
 801ecea:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ecee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ecf2:	910e      	str	r1, [sp, #56]	@ 0x38
 801ecf4:	0e09      	lsrs	r1, r1, #24
 801ecf6:	9115      	str	r1, [sp, #84]	@ 0x54
 801ecf8:	b292      	uxth	r2, r2
 801ecfa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ecfc:	b280      	uxth	r0, r0
 801ecfe:	fb02 f900 	mul.w	r9, r2, r0
 801ed02:	0112      	lsls	r2, r2, #4
 801ed04:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ed08:	eba2 0809 	sub.w	r8, r2, r9
 801ed0c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801ed10:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ed12:	b280      	uxth	r0, r0
 801ed14:	fa1f f888 	uxth.w	r8, r8
 801ed18:	1a09      	subs	r1, r1, r0
 801ed1a:	fb08 f202 	mul.w	r2, r8, r2
 801ed1e:	b289      	uxth	r1, r1
 801ed20:	fb01 220c 	mla	r2, r1, ip, r2
 801ed24:	fb00 2204 	mla	r2, r0, r4, r2
 801ed28:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ed2a:	fb09 2204 	mla	r2, r9, r4, r2
 801ed2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ed32:	2a00      	cmp	r2, #0
 801ed34:	f000 80db 	beq.w	801eeee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801ed38:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801ed3c:	d019      	beq.n	801ed72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801ed3e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801ed42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ed46:	fb0c fa0a 	mul.w	sl, ip, sl
 801ed4a:	fb0c fc03 	mul.w	ip, ip, r3
 801ed4e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ed52:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ed56:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801ed5a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ed5e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ed62:	4453      	add	r3, sl
 801ed64:	0a3f      	lsrs	r7, r7, #8
 801ed66:	0a1b      	lsrs	r3, r3, #8
 801ed68:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801ed6c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ed70:	433b      	orrs	r3, r7
 801ed72:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ed74:	2cff      	cmp	r4, #255	@ 0xff
 801ed76:	d020      	beq.n	801edba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801ed78:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ed7a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ed7e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ed80:	4367      	muls	r7, r4
 801ed82:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ed84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ed88:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ed8c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ed8e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ed92:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ed96:	fb04 fa0a 	mul.w	sl, r4, sl
 801ed9a:	44bc      	add	ip, r7
 801ed9c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801eda0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eda4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eda8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801edac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edb0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801edb4:	ea4c 040a 	orr.w	r4, ip, sl
 801edb8:	940d      	str	r4, [sp, #52]	@ 0x34
 801edba:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801edbc:	2cff      	cmp	r4, #255	@ 0xff
 801edbe:	d020      	beq.n	801ee02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801edc0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801edc2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801edc6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801edc8:	4367      	muls	r7, r4
 801edca:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801edcc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801edd0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801edd4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801edd6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801edda:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801edde:	fb04 fa0a 	mul.w	sl, r4, sl
 801ede2:	44bc      	add	ip, r7
 801ede4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ede8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801edf0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801edf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edf8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801edfc:	ea4c 040a 	orr.w	r4, ip, sl
 801ee00:	9409      	str	r4, [sp, #36]	@ 0x24
 801ee02:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ee04:	2cff      	cmp	r4, #255	@ 0xff
 801ee06:	d020      	beq.n	801ee4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801ee08:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ee0a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ee0e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ee10:	4367      	muls	r7, r4
 801ee12:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ee14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee18:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ee1c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ee1e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ee22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ee26:	fb04 fa0a 	mul.w	sl, r4, sl
 801ee2a:	44bc      	add	ip, r7
 801ee2c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ee30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ee3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee40:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ee44:	ea4c 040a 	orr.w	r4, ip, sl
 801ee48:	940e      	str	r4, [sp, #56]	@ 0x38
 801ee4a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ee4c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801ee50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ee54:	43d2      	mvns	r2, r2
 801ee56:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ee5a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ee5c:	b2d2      	uxtb	r2, r2
 801ee5e:	fb08 f707 	mul.w	r7, r8, r7
 801ee62:	fb01 770c 	mla	r7, r1, ip, r7
 801ee66:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ee6a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ee6c:	fb00 770c 	mla	r7, r0, ip, r7
 801ee70:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ee74:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ee76:	fb09 770c 	mla	r7, r9, ip, r7
 801ee7a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ee7e:	fb08 f80c 	mul.w	r8, r8, ip
 801ee82:	0a3f      	lsrs	r7, r7, #8
 801ee84:	fb01 8303 	mla	r3, r1, r3, r8
 801ee88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ee8a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ee8e:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801ee92:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ee94:	fb00 330a 	mla	r3, r0, sl, r3
 801ee98:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801ee9c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801eea0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801eea4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eea8:	fb03 f102 	mul.w	r1, r3, r2
 801eeac:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801eeb0:	1c4b      	adds	r3, r1, #1
 801eeb2:	ea47 070c 	orr.w	r7, r7, ip
 801eeb6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eeba:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801eebe:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801eec2:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801eec6:	4353      	muls	r3, r2
 801eec8:	1c59      	adds	r1, r3, #1
 801eeca:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801eece:	0a3b      	lsrs	r3, r7, #8
 801eed0:	0c3f      	lsrs	r7, r7, #16
 801eed2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eed6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801eeda:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801eede:	435a      	muls	r2, r3
 801eee0:	1c53      	adds	r3, r2, #1
 801eee2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801eee6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801eeea:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801eeee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801eef0:	f10e 0e03 	add.w	lr, lr, #3
 801eef4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801eef6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eefa:	441a      	add	r2, r3
 801eefc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eefe:	9225      	str	r2, [sp, #148]	@ 0x94
 801ef00:	441d      	add	r5, r3
 801ef02:	e65a      	b.n	801ebba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ef04:	2800      	cmp	r0, #0
 801ef06:	f43f aef7 	beq.w	801ecf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ef0a:	5c79      	ldrb	r1, [r7, r1]
 801ef0c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ef10:	9109      	str	r1, [sp, #36]	@ 0x24
 801ef12:	0e09      	lsrs	r1, r1, #24
 801ef14:	9111      	str	r1, [sp, #68]	@ 0x44
 801ef16:	e6ef      	b.n	801ecf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ef18:	b01b      	add	sp, #108	@ 0x6c
 801ef1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef1e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801ef1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef22:	b08d      	sub	sp, #52	@ 0x34
 801ef24:	468b      	mov	fp, r1
 801ef26:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801ef2a:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801ef2e:	fb0c 5703 	mla	r7, ip, r3, r5
 801ef32:	f1bc 0f00 	cmp.w	ip, #0
 801ef36:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ef38:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ef3c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801ef40:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801ef44:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801ef48:	eb02 0607 	add.w	r6, r2, r7
 801ef4c:	f89b 4000 	ldrb.w	r4, [fp]
 801ef50:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801ef54:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801ef58:	f2c0 80c1 	blt.w	801f0de <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ef5c:	45e6      	cmp	lr, ip
 801ef5e:	f340 80be 	ble.w	801f0de <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ef62:	2d00      	cmp	r5, #0
 801ef64:	f2c0 80b7 	blt.w	801f0d6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ef68:	42ab      	cmp	r3, r5
 801ef6a:	f340 80b4 	ble.w	801f0d6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ef6e:	5dd2      	ldrb	r2, [r2, r7]
 801ef70:	9205      	str	r2, [sp, #20]
 801ef72:	7872      	ldrb	r2, [r6, #1]
 801ef74:	9206      	str	r2, [sp, #24]
 801ef76:	78b2      	ldrb	r2, [r6, #2]
 801ef78:	9207      	str	r2, [sp, #28]
 801ef7a:	1c6a      	adds	r2, r5, #1
 801ef7c:	f100 80b6 	bmi.w	801f0ec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ef80:	4293      	cmp	r3, r2
 801ef82:	f340 80b3 	ble.w	801f0ec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ef86:	f1b8 0f00 	cmp.w	r8, #0
 801ef8a:	f000 80af 	beq.w	801f0ec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ef8e:	78f2      	ldrb	r2, [r6, #3]
 801ef90:	9201      	str	r2, [sp, #4]
 801ef92:	7932      	ldrb	r2, [r6, #4]
 801ef94:	9202      	str	r2, [sp, #8]
 801ef96:	7972      	ldrb	r2, [r6, #5]
 801ef98:	9203      	str	r2, [sp, #12]
 801ef9a:	f11c 0c01 	adds.w	ip, ip, #1
 801ef9e:	f100 80ad 	bmi.w	801f0fc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801efa2:	45e6      	cmp	lr, ip
 801efa4:	f340 80aa 	ble.w	801f0fc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801efa8:	f1ba 0f00 	cmp.w	sl, #0
 801efac:	f000 80a6 	beq.w	801f0fc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801efb0:	2d00      	cmp	r5, #0
 801efb2:	f2c0 809f 	blt.w	801f0f4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801efb6:	42ab      	cmp	r3, r5
 801efb8:	f340 809c 	ble.w	801f0f4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801efbc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801efc0:	f816 9002 	ldrb.w	r9, [r6, r2]
 801efc4:	2203      	movs	r2, #3
 801efc6:	fb03 6c02 	mla	ip, r3, r2, r6
 801efca:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801efce:	f89c e002 	ldrb.w	lr, [ip, #2]
 801efd2:	9704      	str	r7, [sp, #16]
 801efd4:	3501      	adds	r5, #1
 801efd6:	f100 8098 	bmi.w	801f10a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801efda:	42ab      	cmp	r3, r5
 801efdc:	f340 8095 	ble.w	801f10a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801efe0:	f1b8 0f00 	cmp.w	r8, #0
 801efe4:	f000 8091 	beq.w	801f10a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801efe8:	f04f 0c03 	mov.w	ip, #3
 801efec:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801eff0:	5cb5      	ldrb	r5, [r6, r2]
 801eff2:	fb03 620c 	mla	r2, r3, ip, r6
 801eff6:	fb03 630c 	mla	r3, r3, ip, r6
 801effa:	7912      	ldrb	r2, [r2, #4]
 801effc:	795e      	ldrb	r6, [r3, #5]
 801effe:	fa1f f388 	uxth.w	r3, r8
 801f002:	fa1f fc8a 	uxth.w	ip, sl
 801f006:	fb03 f70c 	mul.w	r7, r3, ip
 801f00a:	011b      	lsls	r3, r3, #4
 801f00c:	9708      	str	r7, [sp, #32]
 801f00e:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801f012:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801f016:	1bdb      	subs	r3, r3, r7
 801f018:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801f01c:	fa1f fc8c 	uxth.w	ip, ip
 801f020:	b29b      	uxth	r3, r3
 801f022:	9709      	str	r7, [sp, #36]	@ 0x24
 801f024:	ebaa 0a0c 	sub.w	sl, sl, ip
 801f028:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f02a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f02c:	fa1f fa8a 	uxth.w	sl, sl
 801f030:	ea6f 0807 	mvn.w	r8, r7
 801f034:	9f01      	ldr	r7, [sp, #4]
 801f036:	435f      	muls	r7, r3
 801f038:	9b05      	ldr	r3, [sp, #20]
 801f03a:	fa5f f888 	uxtb.w	r8, r8
 801f03e:	fb0a 7703 	mla	r7, sl, r3, r7
 801f042:	9b08      	ldr	r3, [sp, #32]
 801f044:	fb14 f408 	smulbb	r4, r4, r8
 801f048:	fb0c 7709 	mla	r7, ip, r9, r7
 801f04c:	fb10 f008 	smulbb	r0, r0, r8
 801f050:	fb11 f108 	smulbb	r1, r1, r8
 801f054:	fb03 7705 	mla	r7, r3, r5, r7
 801f058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f05a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f05e:	fb07 4703 	mla	r7, r7, r3, r4
 801f062:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f064:	b2bf      	uxth	r7, r7
 801f066:	1c7c      	adds	r4, r7, #1
 801f068:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801f06c:	1224      	asrs	r4, r4, #8
 801f06e:	f88b 4000 	strb.w	r4, [fp]
 801f072:	9c02      	ldr	r4, [sp, #8]
 801f074:	435c      	muls	r4, r3
 801f076:	9b06      	ldr	r3, [sp, #24]
 801f078:	fb0a 4403 	mla	r4, sl, r3, r4
 801f07c:	9b04      	ldr	r3, [sp, #16]
 801f07e:	fb0c 4403 	mla	r4, ip, r3, r4
 801f082:	9b08      	ldr	r3, [sp, #32]
 801f084:	fb03 4402 	mla	r4, r3, r2, r4
 801f088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f08a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f08c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f090:	fb04 0403 	mla	r4, r4, r3, r0
 801f094:	9b03      	ldr	r3, [sp, #12]
 801f096:	435a      	muls	r2, r3
 801f098:	b2a4      	uxth	r4, r4
 801f09a:	4613      	mov	r3, r2
 801f09c:	9a07      	ldr	r2, [sp, #28]
 801f09e:	1c60      	adds	r0, r4, #1
 801f0a0:	fb0a 3a02 	mla	sl, sl, r2, r3
 801f0a4:	9b08      	ldr	r3, [sp, #32]
 801f0a6:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801f0aa:	fb0c ac0e 	mla	ip, ip, lr, sl
 801f0ae:	1224      	asrs	r4, r4, #8
 801f0b0:	fb03 c606 	mla	r6, r3, r6, ip
 801f0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0b6:	f88b 4001 	strb.w	r4, [fp, #1]
 801f0ba:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f0be:	fb06 1103 	mla	r1, r6, r3, r1
 801f0c2:	b289      	uxth	r1, r1
 801f0c4:	1c4e      	adds	r6, r1, #1
 801f0c6:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801f0ca:	1209      	asrs	r1, r1, #8
 801f0cc:	f88b 1002 	strb.w	r1, [fp, #2]
 801f0d0:	b00d      	add	sp, #52	@ 0x34
 801f0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f0da:	9405      	str	r4, [sp, #20]
 801f0dc:	e74d      	b.n	801ef7a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801f0de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0e2:	9401      	str	r4, [sp, #4]
 801f0e4:	9405      	str	r4, [sp, #20]
 801f0e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f0ea:	e756      	b.n	801ef9a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801f0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0f0:	9401      	str	r4, [sp, #4]
 801f0f2:	e752      	b.n	801ef9a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801f0f4:	468e      	mov	lr, r1
 801f0f6:	9004      	str	r0, [sp, #16]
 801f0f8:	46a1      	mov	r9, r4
 801f0fa:	e76b      	b.n	801efd4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801f0fc:	460e      	mov	r6, r1
 801f0fe:	4602      	mov	r2, r0
 801f100:	4625      	mov	r5, r4
 801f102:	468e      	mov	lr, r1
 801f104:	9004      	str	r0, [sp, #16]
 801f106:	46a1      	mov	r9, r4
 801f108:	e779      	b.n	801effe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801f10a:	460e      	mov	r6, r1
 801f10c:	4602      	mov	r2, r0
 801f10e:	4625      	mov	r5, r4
 801f110:	e775      	b.n	801effe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801f112 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f116:	b09f      	sub	sp, #124	@ 0x7c
 801f118:	920e      	str	r2, [sp, #56]	@ 0x38
 801f11a:	9307      	str	r3, [sp, #28]
 801f11c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801f11e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801f122:	901d      	str	r0, [sp, #116]	@ 0x74
 801f124:	930c      	str	r3, [sp, #48]	@ 0x30
 801f126:	6850      	ldr	r0, [r2, #4]
 801f128:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f12a:	6812      	ldr	r2, [r2, #0]
 801f12c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801f130:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801f134:	fb00 1303 	mla	r3, r0, r3, r1
 801f138:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f13c:	18d3      	adds	r3, r2, r3
 801f13e:	9308      	str	r3, [sp, #32]
 801f140:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f142:	681b      	ldr	r3, [r3, #0]
 801f144:	930a      	str	r3, [sp, #40]	@ 0x28
 801f146:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f148:	43db      	mvns	r3, r3
 801f14a:	b2db      	uxtb	r3, r3
 801f14c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f14e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f150:	2b00      	cmp	r3, #0
 801f152:	dc03      	bgt.n	801f15c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f156:	2b00      	cmp	r3, #0
 801f158:	f340 81f5 	ble.w	801f546 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801f15c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f15e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f162:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f166:	1e48      	subs	r0, r1, #1
 801f168:	1e54      	subs	r4, r2, #1
 801f16a:	9b07      	ldr	r3, [sp, #28]
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	f340 80d5 	ble.w	801f31c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801f172:	ea5f 452a 	movs.w	r5, sl, asr #16
 801f176:	ea4f 4328 	mov.w	r3, r8, asr #16
 801f17a:	d406      	bmi.n	801f18a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f17c:	4285      	cmp	r5, r0
 801f17e:	da04      	bge.n	801f18a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f180:	2b00      	cmp	r3, #0
 801f182:	db02      	blt.n	801f18a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f184:	42a3      	cmp	r3, r4
 801f186:	f2c0 80ca 	blt.w	801f31e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801f18a:	3501      	adds	r5, #1
 801f18c:	f100 80bb 	bmi.w	801f306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801f190:	42a9      	cmp	r1, r5
 801f192:	f2c0 80b8 	blt.w	801f306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801f196:	3301      	adds	r3, #1
 801f198:	f100 80b5 	bmi.w	801f306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801f19c:	429a      	cmp	r2, r3
 801f19e:	f2c0 80b2 	blt.w	801f306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801f1a2:	9b07      	ldr	r3, [sp, #28]
 801f1a4:	9d08      	ldr	r5, [sp, #32]
 801f1a6:	930d      	str	r3, [sp, #52]	@ 0x34
 801f1a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	f340 80d6 	ble.w	801f35c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801f1b0:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801f1b2:	ea4f 4428 	mov.w	r4, r8, asr #16
 801f1b6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f1b8:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801f1bc:	68c6      	ldr	r6, [r0, #12]
 801f1be:	ea5f 402a 	movs.w	r0, sl, asr #16
 801f1c2:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801f1c6:	689b      	ldr	r3, [r3, #8]
 801f1c8:	f100 810f 	bmi.w	801f3ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f1cc:	1e5f      	subs	r7, r3, #1
 801f1ce:	42b8      	cmp	r0, r7
 801f1d0:	f280 810b 	bge.w	801f3ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f1d4:	2c00      	cmp	r4, #0
 801f1d6:	f2c0 8108 	blt.w	801f3ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f1da:	1e77      	subs	r7, r6, #1
 801f1dc:	42bc      	cmp	r4, r7
 801f1de:	f280 8104 	bge.w	801f3ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f1e2:	b21b      	sxth	r3, r3
 801f1e4:	fb04 0003 	mla	r0, r4, r3, r0
 801f1e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f1ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f1ee:	1826      	adds	r6, r4, r0
 801f1f0:	5c24      	ldrb	r4, [r4, r0]
 801f1f2:	78b7      	ldrb	r7, [r6, #2]
 801f1f4:	7870      	ldrb	r0, [r6, #1]
 801f1f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f1f8:	7977      	ldrb	r7, [r6, #5]
 801f1fa:	f896 e003 	ldrb.w	lr, [r6, #3]
 801f1fe:	f896 c004 	ldrb.w	ip, [r6, #4]
 801f202:	9710      	str	r7, [sp, #64]	@ 0x40
 801f204:	b1c9      	cbz	r1, 801f23a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f206:	f04f 0b03 	mov.w	fp, #3
 801f20a:	f06f 0904 	mvn.w	r9, #4
 801f20e:	3605      	adds	r6, #5
 801f210:	fb13 930b 	smlabb	r3, r3, fp, r9
 801f214:	eb06 0b03 	add.w	fp, r6, r3
 801f218:	5cf3      	ldrb	r3, [r6, r3]
 801f21a:	9311      	str	r3, [sp, #68]	@ 0x44
 801f21c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801f220:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f222:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801f226:	9315      	str	r3, [sp, #84]	@ 0x54
 801f228:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801f22c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f22e:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801f232:	9314      	str	r3, [sp, #80]	@ 0x50
 801f234:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801f238:	9316      	str	r3, [sp, #88]	@ 0x58
 801f23a:	b292      	uxth	r2, r2
 801f23c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801f23e:	b289      	uxth	r1, r1
 801f240:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801f244:	fb02 f601 	mul.w	r6, r2, r1
 801f248:	0112      	lsls	r2, r2, #4
 801f24a:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801f24e:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801f252:	1b92      	subs	r2, r2, r6
 801f254:	b289      	uxth	r1, r1
 801f256:	b292      	uxth	r2, r2
 801f258:	eba9 0901 	sub.w	r9, r9, r1
 801f25c:	fb02 fe0e 	mul.w	lr, r2, lr
 801f260:	fa1f f989 	uxth.w	r9, r9
 801f264:	fb02 fc0c 	mul.w	ip, r2, ip
 801f268:	fb09 e404 	mla	r4, r9, r4, lr
 801f26c:	f895 e000 	ldrb.w	lr, [r5]
 801f270:	fb09 c000 	mla	r0, r9, r0, ip
 801f274:	fb01 4407 	mla	r4, r1, r7, r4
 801f278:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f27a:	fb06 4407 	mla	r4, r6, r7, r4
 801f27e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f280:	fb1e fe07 	smulbb	lr, lr, r7
 801f284:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f288:	fb04 e403 	mla	r4, r4, r3, lr
 801f28c:	b2a4      	uxth	r4, r4
 801f28e:	f104 0e01 	add.w	lr, r4, #1
 801f292:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801f296:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f298:	fb01 0004 	mla	r0, r1, r4, r0
 801f29c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f29e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f2a2:	fb06 0004 	mla	r0, r6, r4, r0
 801f2a6:	786c      	ldrb	r4, [r5, #1]
 801f2a8:	f885 e000 	strb.w	lr, [r5]
 801f2ac:	fb14 f407 	smulbb	r4, r4, r7
 801f2b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f2b4:	fb00 4003 	mla	r0, r0, r3, r4
 801f2b8:	b280      	uxth	r0, r0
 801f2ba:	1c44      	adds	r4, r0, #1
 801f2bc:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801f2c0:	1200      	asrs	r0, r0, #8
 801f2c2:	7068      	strb	r0, [r5, #1]
 801f2c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f2c6:	4342      	muls	r2, r0
 801f2c8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f2ca:	fb09 2200 	mla	r2, r9, r0, r2
 801f2ce:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f2d0:	fb01 2100 	mla	r1, r1, r0, r2
 801f2d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f2d6:	fb06 1602 	mla	r6, r6, r2, r1
 801f2da:	78a9      	ldrb	r1, [r5, #2]
 801f2dc:	fb11 f107 	smulbb	r1, r1, r7
 801f2e0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f2e4:	fb06 1303 	mla	r3, r6, r3, r1
 801f2e8:	b29b      	uxth	r3, r3
 801f2ea:	1c5e      	adds	r6, r3, #1
 801f2ec:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801f2f0:	121b      	asrs	r3, r3, #8
 801f2f2:	70ab      	strb	r3, [r5, #2]
 801f2f4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f2f6:	3503      	adds	r5, #3
 801f2f8:	449a      	add	sl, r3
 801f2fa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f2fc:	4498      	add	r8, r3
 801f2fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f300:	3b01      	subs	r3, #1
 801f302:	930d      	str	r3, [sp, #52]	@ 0x34
 801f304:	e750      	b.n	801f1a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f306:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f308:	449a      	add	sl, r3
 801f30a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f30c:	4498      	add	r8, r3
 801f30e:	9b07      	ldr	r3, [sp, #28]
 801f310:	3b01      	subs	r3, #1
 801f312:	9307      	str	r3, [sp, #28]
 801f314:	9b08      	ldr	r3, [sp, #32]
 801f316:	3303      	adds	r3, #3
 801f318:	9308      	str	r3, [sp, #32]
 801f31a:	e726      	b.n	801f16a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f31c:	d026      	beq.n	801f36c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801f31e:	9b07      	ldr	r3, [sp, #28]
 801f320:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801f322:	3b01      	subs	r3, #1
 801f324:	fb00 a003 	mla	r0, r0, r3, sl
 801f328:	1400      	asrs	r0, r0, #16
 801f32a:	f53f af3a 	bmi.w	801f1a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f32e:	3901      	subs	r1, #1
 801f330:	4288      	cmp	r0, r1
 801f332:	f6bf af36 	bge.w	801f1a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f336:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801f338:	fb01 8303 	mla	r3, r1, r3, r8
 801f33c:	141b      	asrs	r3, r3, #16
 801f33e:	f53f af30 	bmi.w	801f1a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f342:	3a01      	subs	r2, #1
 801f344:	4293      	cmp	r3, r2
 801f346:	f6bf af2c 	bge.w	801f1a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f34a:	9b08      	ldr	r3, [sp, #32]
 801f34c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801f350:	1cdd      	adds	r5, r3, #3
 801f352:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801f356:	f1bc 0f00 	cmp.w	ip, #0
 801f35a:	dc5f      	bgt.n	801f41c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801f35c:	9b07      	ldr	r3, [sp, #28]
 801f35e:	9a08      	ldr	r2, [sp, #32]
 801f360:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f364:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f368:	441a      	add	r2, r3
 801f36a:	9208      	str	r2, [sp, #32]
 801f36c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f36e:	2b00      	cmp	r3, #0
 801f370:	f340 80e9 	ble.w	801f546 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801f374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f378:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f37a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f37e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f382:	eef0 6a62 	vmov.f32	s13, s5
 801f386:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f38a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f38e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f392:	ee16 aa90 	vmov	sl, s13
 801f396:	eef0 6a43 	vmov.f32	s13, s6
 801f39a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f39e:	ee16 8a90 	vmov	r8, s13
 801f3a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3ba:	ee12 2a90 	vmov	r2, s5
 801f3be:	eef0 2a47 	vmov.f32	s5, s14
 801f3c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3c6:	ee13 2a10 	vmov	r2, s6
 801f3ca:	932b      	str	r3, [sp, #172]	@ 0xac
 801f3cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f3ce:	eeb0 3a67 	vmov.f32	s6, s15
 801f3d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3d6:	932c      	str	r3, [sp, #176]	@ 0xb0
 801f3d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f3da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f3dc:	3b01      	subs	r3, #1
 801f3de:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f3e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f3e2:	bf08      	it	eq
 801f3e4:	4613      	moveq	r3, r2
 801f3e6:	9307      	str	r3, [sp, #28]
 801f3e8:	e6b1      	b.n	801f14e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f3ea:	1c47      	adds	r7, r0, #1
 801f3ec:	d482      	bmi.n	801f2f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f3ee:	42bb      	cmp	r3, r7
 801f3f0:	db80      	blt.n	801f2f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f3f2:	1c67      	adds	r7, r4, #1
 801f3f4:	f53f af7e 	bmi.w	801f2f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f3f8:	42be      	cmp	r6, r7
 801f3fa:	f6ff af7b 	blt.w	801f2f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f3fe:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f400:	b236      	sxth	r6, r6
 801f402:	9001      	str	r0, [sp, #4]
 801f404:	b21b      	sxth	r3, r3
 801f406:	9600      	str	r6, [sp, #0]
 801f408:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f40a:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801f40e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801f412:	4629      	mov	r1, r5
 801f414:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f416:	f7ff fd82 	bl	801ef1e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801f41a:	e76b      	b.n	801f2f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f41c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801f41e:	ea4f 402a 	mov.w	r0, sl, asr #16
 801f422:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801f426:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801f42a:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801f42e:	ea4f 4128 	mov.w	r1, r8, asr #16
 801f432:	fb07 0101 	mla	r1, r7, r1, r0
 801f436:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f438:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f43c:	1844      	adds	r4, r0, r1
 801f43e:	5c40      	ldrb	r0, [r0, r1]
 801f440:	78a6      	ldrb	r6, [r4, #2]
 801f442:	7861      	ldrb	r1, [r4, #1]
 801f444:	960f      	str	r6, [sp, #60]	@ 0x3c
 801f446:	78e6      	ldrb	r6, [r4, #3]
 801f448:	910d      	str	r1, [sp, #52]	@ 0x34
 801f44a:	9610      	str	r6, [sp, #64]	@ 0x40
 801f44c:	f894 9004 	ldrb.w	r9, [r4, #4]
 801f450:	f894 b005 	ldrb.w	fp, [r4, #5]
 801f454:	b192      	cbz	r2, 801f47c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801f456:	f06f 0604 	mvn.w	r6, #4
 801f45a:	2103      	movs	r1, #3
 801f45c:	3405      	adds	r4, #5
 801f45e:	fb17 6701 	smlabb	r7, r7, r1, r6
 801f462:	19e6      	adds	r6, r4, r7
 801f464:	5de4      	ldrb	r4, [r4, r7]
 801f466:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f468:	7874      	ldrb	r4, [r6, #1]
 801f46a:	9419      	str	r4, [sp, #100]	@ 0x64
 801f46c:	78b4      	ldrb	r4, [r6, #2]
 801f46e:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f470:	78f4      	ldrb	r4, [r6, #3]
 801f472:	9418      	str	r4, [sp, #96]	@ 0x60
 801f474:	7934      	ldrb	r4, [r6, #4]
 801f476:	941a      	str	r4, [sp, #104]	@ 0x68
 801f478:	7974      	ldrb	r4, [r6, #5]
 801f47a:	941c      	str	r4, [sp, #112]	@ 0x70
 801f47c:	b29b      	uxth	r3, r3
 801f47e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f480:	b292      	uxth	r2, r2
 801f482:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f484:	3503      	adds	r5, #3
 801f486:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f48a:	fb03 f402 	mul.w	r4, r3, r2
 801f48e:	011b      	lsls	r3, r3, #4
 801f490:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801f494:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801f498:	1b1b      	subs	r3, r3, r4
 801f49a:	b292      	uxth	r2, r2
 801f49c:	b29b      	uxth	r3, r3
 801f49e:	1ab6      	subs	r6, r6, r2
 801f4a0:	435f      	muls	r7, r3
 801f4a2:	b2b6      	uxth	r6, r6
 801f4a4:	fb03 f909 	mul.w	r9, r3, r9
 801f4a8:	fb03 fb0b 	mul.w	fp, r3, fp
 801f4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f4ae:	fb06 7000 	mla	r0, r6, r0, r7
 801f4b2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801f4b4:	fb06 bb03 	mla	fp, r6, r3, fp
 801f4b8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f4ba:	fb02 0007 	mla	r0, r2, r7, r0
 801f4be:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801f4c0:	fb02 bb03 	mla	fp, r2, r3, fp
 801f4c4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f4c6:	fb04 0007 	mla	r0, r4, r7, r0
 801f4ca:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801f4ce:	fb17 f701 	smulbb	r7, r7, r1
 801f4d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f4d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f4d8:	fb00 700e 	mla	r0, r0, lr, r7
 801f4dc:	fb06 9101 	mla	r1, r6, r1, r9
 801f4e0:	b280      	uxth	r0, r0
 801f4e2:	1c47      	adds	r7, r0, #1
 801f4e4:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801f4e8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f4ea:	1200      	asrs	r0, r0, #8
 801f4ec:	f805 0c06 	strb.w	r0, [r5, #-6]
 801f4f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f4f2:	fb02 1100 	mla	r1, r2, r0, r1
 801f4f6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801f4f8:	fb04 1100 	mla	r1, r4, r0, r1
 801f4fc:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801f500:	fb04 b403 	mla	r4, r4, r3, fp
 801f504:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801f508:	fb10 f007 	smulbb	r0, r0, r7
 801f50c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f510:	fb13 f307 	smulbb	r3, r3, r7
 801f514:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f518:	fb01 010e 	mla	r1, r1, lr, r0
 801f51c:	fb04 340e 	mla	r4, r4, lr, r3
 801f520:	b289      	uxth	r1, r1
 801f522:	b2a4      	uxth	r4, r4
 801f524:	1c48      	adds	r0, r1, #1
 801f526:	1c63      	adds	r3, r4, #1
 801f528:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801f52c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801f530:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f532:	1209      	asrs	r1, r1, #8
 801f534:	1224      	asrs	r4, r4, #8
 801f536:	449a      	add	sl, r3
 801f538:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f53a:	f805 1c05 	strb.w	r1, [r5, #-5]
 801f53e:	f805 4c04 	strb.w	r4, [r5, #-4]
 801f542:	4498      	add	r8, r3
 801f544:	e707      	b.n	801f356 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f546:	b01f      	add	sp, #124	@ 0x7c
 801f548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f54c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801f54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f550:	b087      	sub	sp, #28
 801f552:	780d      	ldrb	r5, [r1, #0]
 801f554:	784c      	ldrb	r4, [r1, #1]
 801f556:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801f55a:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801f55e:	9004      	str	r0, [sp, #16]
 801f560:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801f564:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801f568:	9005      	str	r0, [sp, #20]
 801f56a:	fb06 bc03 	mla	ip, r6, r3, fp
 801f56e:	2e00      	cmp	r6, #0
 801f570:	7888      	ldrb	r0, [r1, #2]
 801f572:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f576:	eb02 090c 	add.w	r9, r2, ip
 801f57a:	f2c0 8084 	blt.w	801f686 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f57e:	42b7      	cmp	r7, r6
 801f580:	f340 8081 	ble.w	801f686 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f584:	f1bb 0f00 	cmp.w	fp, #0
 801f588:	db79      	blt.n	801f67e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f58a:	455b      	cmp	r3, fp
 801f58c:	dd77      	ble.n	801f67e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f58e:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f592:	9201      	str	r2, [sp, #4]
 801f594:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f598:	9202      	str	r2, [sp, #8]
 801f59a:	f899 2002 	ldrb.w	r2, [r9, #2]
 801f59e:	9203      	str	r2, [sp, #12]
 801f5a0:	f11b 0201 	adds.w	r2, fp, #1
 801f5a4:	d476      	bmi.n	801f694 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f5a6:	4293      	cmp	r3, r2
 801f5a8:	dd74      	ble.n	801f694 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f5aa:	9a04      	ldr	r2, [sp, #16]
 801f5ac:	2a00      	cmp	r2, #0
 801f5ae:	d071      	beq.n	801f694 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f5b0:	f899 8003 	ldrb.w	r8, [r9, #3]
 801f5b4:	f899 c004 	ldrb.w	ip, [r9, #4]
 801f5b8:	f899 a005 	ldrb.w	sl, [r9, #5]
 801f5bc:	3601      	adds	r6, #1
 801f5be:	d471      	bmi.n	801f6a4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f5c0:	42b7      	cmp	r7, r6
 801f5c2:	dd6f      	ble.n	801f6a4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f5c4:	9a05      	ldr	r2, [sp, #20]
 801f5c6:	2a00      	cmp	r2, #0
 801f5c8:	d06c      	beq.n	801f6a4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f5ca:	f1bb 0f00 	cmp.w	fp, #0
 801f5ce:	db65      	blt.n	801f69c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f5d0:	455b      	cmp	r3, fp
 801f5d2:	dd63      	ble.n	801f69c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f5d4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f5d8:	f819 e002 	ldrb.w	lr, [r9, r2]
 801f5dc:	2203      	movs	r2, #3
 801f5de:	fb03 9602 	mla	r6, r3, r2, r9
 801f5e2:	7877      	ldrb	r7, [r6, #1]
 801f5e4:	78b6      	ldrb	r6, [r6, #2]
 801f5e6:	f11b 0b01 	adds.w	fp, fp, #1
 801f5ea:	d40c      	bmi.n	801f606 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f5ec:	455b      	cmp	r3, fp
 801f5ee:	dd0a      	ble.n	801f606 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f5f0:	9a04      	ldr	r2, [sp, #16]
 801f5f2:	b142      	cbz	r2, 801f606 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f5f4:	2203      	movs	r2, #3
 801f5f6:	fb13 2002 	smlabb	r0, r3, r2, r2
 801f5fa:	f819 5000 	ldrb.w	r5, [r9, r0]
 801f5fe:	fb03 9002 	mla	r0, r3, r2, r9
 801f602:	7904      	ldrb	r4, [r0, #4]
 801f604:	7940      	ldrb	r0, [r0, #5]
 801f606:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f60a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f60e:	fb03 fb02 	mul.w	fp, r3, r2
 801f612:	011b      	lsls	r3, r3, #4
 801f614:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801f618:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801f61c:	eba3 030b 	sub.w	r3, r3, fp
 801f620:	b292      	uxth	r2, r2
 801f622:	b29b      	uxth	r3, r3
 801f624:	eba9 0902 	sub.w	r9, r9, r2
 801f628:	9304      	str	r3, [sp, #16]
 801f62a:	fa1f f989 	uxth.w	r9, r9
 801f62e:	fb03 f808 	mul.w	r8, r3, r8
 801f632:	9b01      	ldr	r3, [sp, #4]
 801f634:	fb09 8803 	mla	r8, r9, r3, r8
 801f638:	9b04      	ldr	r3, [sp, #16]
 801f63a:	fb03 fc0c 	mul.w	ip, r3, ip
 801f63e:	9b02      	ldr	r3, [sp, #8]
 801f640:	fb02 880e 	mla	r8, r2, lr, r8
 801f644:	fb09 cc03 	mla	ip, r9, r3, ip
 801f648:	9b04      	ldr	r3, [sp, #16]
 801f64a:	fb0b 8805 	mla	r8, fp, r5, r8
 801f64e:	fb02 c707 	mla	r7, r2, r7, ip
 801f652:	fb03 f30a 	mul.w	r3, r3, sl
 801f656:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f65a:	fb0b 7404 	mla	r4, fp, r4, r7
 801f65e:	f881 8000 	strb.w	r8, [r1]
 801f662:	1224      	asrs	r4, r4, #8
 801f664:	704c      	strb	r4, [r1, #1]
 801f666:	9c03      	ldr	r4, [sp, #12]
 801f668:	fb09 3904 	mla	r9, r9, r4, r3
 801f66c:	fb02 9206 	mla	r2, r2, r6, r9
 801f670:	fb0b 2000 	mla	r0, fp, r0, r2
 801f674:	1200      	asrs	r0, r0, #8
 801f676:	7088      	strb	r0, [r1, #2]
 801f678:	b007      	add	sp, #28
 801f67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f67e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f682:	9501      	str	r5, [sp, #4]
 801f684:	e78c      	b.n	801f5a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801f686:	4682      	mov	sl, r0
 801f688:	46a4      	mov	ip, r4
 801f68a:	46a8      	mov	r8, r5
 801f68c:	9501      	str	r5, [sp, #4]
 801f68e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f692:	e793      	b.n	801f5bc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f694:	4682      	mov	sl, r0
 801f696:	46a4      	mov	ip, r4
 801f698:	46a8      	mov	r8, r5
 801f69a:	e78f      	b.n	801f5bc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f69c:	4606      	mov	r6, r0
 801f69e:	4627      	mov	r7, r4
 801f6a0:	46ae      	mov	lr, r5
 801f6a2:	e7a0      	b.n	801f5e6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801f6a4:	4606      	mov	r6, r0
 801f6a6:	4627      	mov	r7, r4
 801f6a8:	46ae      	mov	lr, r5
 801f6aa:	e7ac      	b.n	801f606 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801f6ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6b0:	b09b      	sub	sp, #108	@ 0x6c
 801f6b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f6b4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801f6b6:	9019      	str	r0, [sp, #100]	@ 0x64
 801f6b8:	9109      	str	r1, [sp, #36]	@ 0x24
 801f6ba:	6850      	ldr	r0, [r2, #4]
 801f6bc:	9306      	str	r3, [sp, #24]
 801f6be:	6812      	ldr	r2, [r2, #0]
 801f6c0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801f6c4:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801f6c8:	fb00 1303 	mla	r3, r0, r3, r1
 801f6cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f6d0:	18d3      	adds	r3, r2, r3
 801f6d2:	9307      	str	r3, [sp, #28]
 801f6d4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f6d6:	681b      	ldr	r3, [r3, #0]
 801f6d8:	9308      	str	r3, [sp, #32]
 801f6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	dc03      	bgt.n	801f6e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f6e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	f340 81ab 	ble.w	801fa3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f6e8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f6ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f6ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f6f2:	1e48      	subs	r0, r1, #1
 801f6f4:	1e55      	subs	r5, r2, #1
 801f6f6:	9b06      	ldr	r3, [sp, #24]
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	f340 80b1 	ble.w	801f860 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f6fe:	ea5f 462b 	movs.w	r6, fp, asr #16
 801f702:	ea4f 4324 	mov.w	r3, r4, asr #16
 801f706:	d406      	bmi.n	801f716 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f708:	4286      	cmp	r6, r0
 801f70a:	da04      	bge.n	801f716 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	db02      	blt.n	801f716 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f710:	42ab      	cmp	r3, r5
 801f712:	f2c0 80a6 	blt.w	801f862 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f716:	3601      	adds	r6, #1
 801f718:	f100 8097 	bmi.w	801f84a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f71c:	42b1      	cmp	r1, r6
 801f71e:	f2c0 8094 	blt.w	801f84a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f722:	3301      	adds	r3, #1
 801f724:	f100 8091 	bmi.w	801f84a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f728:	429a      	cmp	r2, r3
 801f72a:	f2c0 808e 	blt.w	801f84a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f72e:	9b06      	ldr	r3, [sp, #24]
 801f730:	9e07      	ldr	r6, [sp, #28]
 801f732:	930a      	str	r3, [sp, #40]	@ 0x28
 801f734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f736:	2b00      	cmp	r3, #0
 801f738:	f340 80b0 	ble.w	801f89c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f73c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801f73e:	1425      	asrs	r5, r4, #16
 801f740:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f742:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801f746:	68c7      	ldr	r7, [r0, #12]
 801f748:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f74c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f750:	689b      	ldr	r3, [r3, #8]
 801f752:	f100 80ea 	bmi.w	801f92a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f756:	f103 3cff 	add.w	ip, r3, #4294967295
 801f75a:	4560      	cmp	r0, ip
 801f75c:	f280 80e5 	bge.w	801f92a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f760:	2d00      	cmp	r5, #0
 801f762:	f2c0 80e2 	blt.w	801f92a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f766:	f107 3cff 	add.w	ip, r7, #4294967295
 801f76a:	4565      	cmp	r5, ip
 801f76c:	f280 80dd 	bge.w	801f92a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f770:	b21b      	sxth	r3, r3
 801f772:	fb05 0003 	mla	r0, r5, r3, r0
 801f776:	9d08      	ldr	r5, [sp, #32]
 801f778:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f77c:	182f      	adds	r7, r5, r0
 801f77e:	5c2d      	ldrb	r5, [r5, r0]
 801f780:	7878      	ldrb	r0, [r7, #1]
 801f782:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f786:	900c      	str	r0, [sp, #48]	@ 0x30
 801f788:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f78c:	f897 8004 	ldrb.w	r8, [r7, #4]
 801f790:	f897 a005 	ldrb.w	sl, [r7, #5]
 801f794:	b1c9      	cbz	r1, 801f7ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f796:	f04f 0c03 	mov.w	ip, #3
 801f79a:	f06f 0004 	mvn.w	r0, #4
 801f79e:	3705      	adds	r7, #5
 801f7a0:	fb13 030c 	smlabb	r3, r3, ip, r0
 801f7a4:	eb07 0c03 	add.w	ip, r7, r3
 801f7a8:	5cfb      	ldrb	r3, [r7, r3]
 801f7aa:	930d      	str	r3, [sp, #52]	@ 0x34
 801f7ac:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f7b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f7b2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f7b6:	9311      	str	r3, [sp, #68]	@ 0x44
 801f7b8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801f7bc:	930e      	str	r3, [sp, #56]	@ 0x38
 801f7be:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801f7c2:	9310      	str	r3, [sp, #64]	@ 0x40
 801f7c4:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801f7c8:	9312      	str	r3, [sp, #72]	@ 0x48
 801f7ca:	b292      	uxth	r2, r2
 801f7cc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f7ce:	b289      	uxth	r1, r1
 801f7d0:	fb02 f301 	mul.w	r3, r2, r1
 801f7d4:	0112      	lsls	r2, r2, #4
 801f7d6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801f7da:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801f7de:	1ad2      	subs	r2, r2, r3
 801f7e0:	b289      	uxth	r1, r1
 801f7e2:	b292      	uxth	r2, r2
 801f7e4:	1a7f      	subs	r7, r7, r1
 801f7e6:	fb02 f909 	mul.w	r9, r2, r9
 801f7ea:	b2bf      	uxth	r7, r7
 801f7ec:	fb02 f808 	mul.w	r8, r2, r8
 801f7f0:	fb02 fa0a 	mul.w	sl, r2, sl
 801f7f4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f7f6:	fb07 9905 	mla	r9, r7, r5, r9
 801f7fa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f7fc:	fb07 8800 	mla	r8, r7, r0, r8
 801f800:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f802:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f806:	fb01 9905 	mla	r9, r1, r5, r9
 801f80a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801f80c:	fb01 8800 	mla	r8, r1, r0, r8
 801f810:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f812:	fb01 a102 	mla	r1, r1, r2, sl
 801f816:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f818:	fb03 9905 	mla	r9, r3, r5, r9
 801f81c:	fb03 8800 	mla	r8, r3, r0, r8
 801f820:	fb03 1302 	mla	r3, r3, r2, r1
 801f824:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f828:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f82c:	121b      	asrs	r3, r3, #8
 801f82e:	f886 9000 	strb.w	r9, [r6]
 801f832:	f886 8001 	strb.w	r8, [r6, #1]
 801f836:	70b3      	strb	r3, [r6, #2]
 801f838:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f83a:	3603      	adds	r6, #3
 801f83c:	449b      	add	fp, r3
 801f83e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f840:	441c      	add	r4, r3
 801f842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f844:	3b01      	subs	r3, #1
 801f846:	930a      	str	r3, [sp, #40]	@ 0x28
 801f848:	e774      	b.n	801f734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f84a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f84c:	449b      	add	fp, r3
 801f84e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f850:	441c      	add	r4, r3
 801f852:	9b06      	ldr	r3, [sp, #24]
 801f854:	3b01      	subs	r3, #1
 801f856:	9306      	str	r3, [sp, #24]
 801f858:	9b07      	ldr	r3, [sp, #28]
 801f85a:	3303      	adds	r3, #3
 801f85c:	9307      	str	r3, [sp, #28]
 801f85e:	e74a      	b.n	801f6f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f860:	d024      	beq.n	801f8ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f862:	9b06      	ldr	r3, [sp, #24]
 801f864:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801f866:	3b01      	subs	r3, #1
 801f868:	fb00 b003 	mla	r0, r0, r3, fp
 801f86c:	1400      	asrs	r0, r0, #16
 801f86e:	f53f af5e 	bmi.w	801f72e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f872:	3901      	subs	r1, #1
 801f874:	4288      	cmp	r0, r1
 801f876:	f6bf af5a 	bge.w	801f72e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f87a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f87c:	fb01 4303 	mla	r3, r1, r3, r4
 801f880:	141b      	asrs	r3, r3, #16
 801f882:	f53f af54 	bmi.w	801f72e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f886:	3a01      	subs	r2, #1
 801f888:	4293      	cmp	r3, r2
 801f88a:	f6bf af50 	bge.w	801f72e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f88e:	9b07      	ldr	r3, [sp, #28]
 801f890:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f894:	1cde      	adds	r6, r3, #3
 801f896:	f1be 0f00 	cmp.w	lr, #0
 801f89a:	dc5f      	bgt.n	801f95c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f89c:	9b06      	ldr	r3, [sp, #24]
 801f89e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f8a2:	9b07      	ldr	r3, [sp, #28]
 801f8a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f8a8:	4423      	add	r3, r4
 801f8aa:	9307      	str	r3, [sp, #28]
 801f8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	f340 80c5 	ble.w	801fa3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f8b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f8b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f8ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8c2:	eef0 6a62 	vmov.f32	s13, s5
 801f8c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f8ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f8ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8d2:	ee16 ba90 	vmov	fp, s13
 801f8d6:	eef0 6a43 	vmov.f32	s13, s6
 801f8da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8de:	ee16 4a90 	vmov	r4, s13
 801f8e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f8e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f8ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f8ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f8f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f8f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f8fa:	ee12 2a90 	vmov	r2, s5
 801f8fe:	eef0 2a47 	vmov.f32	s5, s14
 801f902:	fb92 f3f3 	sdiv	r3, r2, r3
 801f906:	ee13 2a10 	vmov	r2, s6
 801f90a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f90c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f90e:	eeb0 3a67 	vmov.f32	s6, s15
 801f912:	fb92 f3f3 	sdiv	r3, r2, r3
 801f916:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f91a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f91c:	3b01      	subs	r3, #1
 801f91e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f920:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f922:	bf08      	it	eq
 801f924:	4613      	moveq	r3, r2
 801f926:	9306      	str	r3, [sp, #24]
 801f928:	e6d7      	b.n	801f6da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f92a:	f110 0c01 	adds.w	ip, r0, #1
 801f92e:	d483      	bmi.n	801f838 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f930:	4563      	cmp	r3, ip
 801f932:	db81      	blt.n	801f838 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f934:	f115 0c01 	adds.w	ip, r5, #1
 801f938:	f53f af7e 	bmi.w	801f838 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f93c:	4567      	cmp	r7, ip
 801f93e:	f6ff af7b 	blt.w	801f838 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f942:	b23f      	sxth	r7, r7
 801f944:	b21b      	sxth	r3, r3
 801f946:	9700      	str	r7, [sp, #0]
 801f948:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801f94c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801f950:	9a08      	ldr	r2, [sp, #32]
 801f952:	4631      	mov	r1, r6
 801f954:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f956:	f7ff fdf9 	bl	801f54c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f95a:	e76d      	b.n	801f838 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f95c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801f95e:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f962:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f966:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f96a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f96e:	1421      	asrs	r1, r4, #16
 801f970:	930a      	str	r3, [sp, #40]	@ 0x28
 801f972:	fb0c 0101 	mla	r1, ip, r1, r0
 801f976:	9808      	ldr	r0, [sp, #32]
 801f978:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f97c:	1845      	adds	r5, r0, r1
 801f97e:	5c40      	ldrb	r0, [r0, r1]
 801f980:	796f      	ldrb	r7, [r5, #5]
 801f982:	7869      	ldrb	r1, [r5, #1]
 801f984:	f895 8002 	ldrb.w	r8, [r5, #2]
 801f988:	f895 a003 	ldrb.w	sl, [r5, #3]
 801f98c:	f895 9004 	ldrb.w	r9, [r5, #4]
 801f990:	970c      	str	r7, [sp, #48]	@ 0x30
 801f992:	b1a2      	cbz	r2, 801f9be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801f994:	2703      	movs	r7, #3
 801f996:	f06f 0304 	mvn.w	r3, #4
 801f99a:	3505      	adds	r5, #5
 801f99c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801f9a0:	eb05 070c 	add.w	r7, r5, ip
 801f9a4:	f815 500c 	ldrb.w	r5, [r5, ip]
 801f9a8:	9513      	str	r5, [sp, #76]	@ 0x4c
 801f9aa:	787d      	ldrb	r5, [r7, #1]
 801f9ac:	9515      	str	r5, [sp, #84]	@ 0x54
 801f9ae:	78bd      	ldrb	r5, [r7, #2]
 801f9b0:	9517      	str	r5, [sp, #92]	@ 0x5c
 801f9b2:	78fd      	ldrb	r5, [r7, #3]
 801f9b4:	9514      	str	r5, [sp, #80]	@ 0x50
 801f9b6:	793d      	ldrb	r5, [r7, #4]
 801f9b8:	9516      	str	r5, [sp, #88]	@ 0x58
 801f9ba:	797d      	ldrb	r5, [r7, #5]
 801f9bc:	9518      	str	r5, [sp, #96]	@ 0x60
 801f9be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f9c2:	b292      	uxth	r2, r2
 801f9c4:	3603      	adds	r6, #3
 801f9c6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f9ca:	fb03 f502 	mul.w	r5, r3, r2
 801f9ce:	011b      	lsls	r3, r3, #4
 801f9d0:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801f9d4:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801f9d8:	1b5b      	subs	r3, r3, r5
 801f9da:	b292      	uxth	r2, r2
 801f9dc:	b29b      	uxth	r3, r3
 801f9de:	1abf      	subs	r7, r7, r2
 801f9e0:	fb03 f909 	mul.w	r9, r3, r9
 801f9e4:	b2bf      	uxth	r7, r7
 801f9e6:	fb03 fa0a 	mul.w	sl, r3, sl
 801f9ea:	fb07 9901 	mla	r9, r7, r1, r9
 801f9ee:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801f9f0:	fb07 aa00 	mla	sl, r7, r0, sl
 801f9f4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f9f6:	fb02 9901 	mla	r9, r2, r1, r9
 801f9fa:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f9fc:	fb02 aa00 	mla	sl, r2, r0, sl
 801fa00:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801fa02:	fb05 9901 	mla	r9, r5, r1, r9
 801fa06:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801fa08:	fb05 aa00 	mla	sl, r5, r0, sl
 801fa0c:	434b      	muls	r3, r1
 801fa0e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801fa10:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fa14:	fb07 3308 	mla	r3, r7, r8, r3
 801fa18:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa1c:	f806 ac06 	strb.w	sl, [r6, #-6]
 801fa20:	fb02 3201 	mla	r2, r2, r1, r3
 801fa24:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fa26:	f806 9c05 	strb.w	r9, [r6, #-5]
 801fa2a:	fb05 2503 	mla	r5, r5, r3, r2
 801fa2e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fa30:	122d      	asrs	r5, r5, #8
 801fa32:	449b      	add	fp, r3
 801fa34:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fa36:	f806 5c04 	strb.w	r5, [r6, #-4]
 801fa3a:	441c      	add	r4, r3
 801fa3c:	e72b      	b.n	801f896 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fa3e:	b01b      	add	sp, #108	@ 0x6c
 801fa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801fa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa48:	b087      	sub	sp, #28
 801fa4a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801fa4e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801fa52:	fb05 7003 	mla	r0, r5, r3, r7
 801fa56:	2d00      	cmp	r5, #0
 801fa58:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801fa5c:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801fa60:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801fa64:	f2c0 811f 	blt.w	801fca6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801fa68:	45a8      	cmp	r8, r5
 801fa6a:	f340 811c 	ble.w	801fca6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801fa6e:	2f00      	cmp	r7, #0
 801fa70:	f2c0 8117 	blt.w	801fca2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801fa74:	42bb      	cmp	r3, r7
 801fa76:	f340 8114 	ble.w	801fca2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801fa7a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801fa7e:	1c7a      	adds	r2, r7, #1
 801fa80:	f100 8114 	bmi.w	801fcac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801fa84:	4293      	cmp	r3, r2
 801fa86:	f340 8111 	ble.w	801fcac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801fa8a:	2c00      	cmp	r4, #0
 801fa8c:	f000 8110 	beq.w	801fcb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801fa90:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801fa94:	3501      	adds	r5, #1
 801fa96:	f100 810f 	bmi.w	801fcb8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801fa9a:	45a8      	cmp	r8, r5
 801fa9c:	f340 810c 	ble.w	801fcb8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801faa0:	f1be 0f00 	cmp.w	lr, #0
 801faa4:	f000 810b 	beq.w	801fcbe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801faa8:	2f00      	cmp	r7, #0
 801faaa:	f2c0 8103 	blt.w	801fcb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801faae:	42bb      	cmp	r3, r7
 801fab0:	f340 8100 	ble.w	801fcb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801fab4:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801fab8:	3701      	adds	r7, #1
 801faba:	f100 8103 	bmi.w	801fcc4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801fabe:	42bb      	cmp	r3, r7
 801fac0:	f340 8100 	ble.w	801fcc4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801fac4:	2c00      	cmp	r4, #0
 801fac6:	f000 80ff 	beq.w	801fcc8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801faca:	3301      	adds	r3, #1
 801facc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801fad0:	fa1f fc84 	uxth.w	ip, r4
 801fad4:	fa1f fe8e 	uxth.w	lr, lr
 801fad8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fadc:	fb0c f90e 	mul.w	r9, ip, lr
 801fae0:	0e13      	lsrs	r3, r2, #24
 801fae2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fae6:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801faea:	9302      	str	r3, [sp, #8]
 801faec:	ebac 0709 	sub.w	r7, ip, r9
 801faf0:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801faf4:	fa1f f48e 	uxth.w	r4, lr
 801faf8:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801fafc:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801fb00:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801fb04:	fb0a fe0e 	mul.w	lr, sl, lr
 801fb08:	1b1b      	subs	r3, r3, r4
 801fb0a:	fb0a f606 	mul.w	r6, sl, r6
 801fb0e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801fb12:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fb16:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801fb1a:	b29b      	uxth	r3, r3
 801fb1c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fb20:	b2bf      	uxth	r7, r7
 801fb22:	9301      	str	r3, [sp, #4]
 801fb24:	44e6      	add	lr, ip
 801fb26:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801fb2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb2e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fb32:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801fb36:	9303      	str	r3, [sp, #12]
 801fb38:	0a33      	lsrs	r3, r6, #8
 801fb3a:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801fb3e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801fb42:	9304      	str	r3, [sp, #16]
 801fb44:	fb0b f606 	mul.w	r6, fp, r6
 801fb48:	fb0b f000 	mul.w	r0, fp, r0
 801fb4c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801fb50:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801fb54:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb58:	44b6      	add	lr, r6
 801fb5a:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801fb5e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801fb62:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801fb66:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801fb6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb6e:	fb08 f606 	mul.w	r6, r8, r6
 801fb72:	0a03      	lsrs	r3, r0, #8
 801fb74:	fb08 f505 	mul.w	r5, r8, r5
 801fb78:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb7c:	0a30      	lsrs	r0, r6, #8
 801fb7e:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801fb82:	9305      	str	r3, [sp, #20]
 801fb84:	0e13      	lsrs	r3, r2, #24
 801fb86:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fb8a:	fb0e fe07 	mul.w	lr, lr, r7
 801fb8e:	4430      	add	r0, r6
 801fb90:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801fb94:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fb98:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801fb9c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fba0:	0a00      	lsrs	r0, r0, #8
 801fba2:	435e      	muls	r6, r3
 801fba4:	0a2d      	lsrs	r5, r5, #8
 801fba6:	435a      	muls	r2, r3
 801fba8:	9b03      	ldr	r3, [sp, #12]
 801fbaa:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801fbae:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801fbb2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fbb6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fbba:	44b4      	add	ip, r6
 801fbbc:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801fbc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbc4:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801fbc8:	9e01      	ldr	r6, [sp, #4]
 801fbca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fbce:	fb03 ee06 	mla	lr, r3, r6, lr
 801fbd2:	9b04      	ldr	r3, [sp, #16]
 801fbd4:	0a12      	lsrs	r2, r2, #8
 801fbd6:	fb0c ee09 	mla	lr, ip, r9, lr
 801fbda:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801fbde:	9b05      	ldr	r3, [sp, #20]
 801fbe0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fbe4:	fb00 ee04 	mla	lr, r0, r4, lr
 801fbe8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fbec:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801fbf0:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801fbf4:	9b01      	ldr	r3, [sp, #4]
 801fbf6:	fb07 fe0e 	mul.w	lr, r7, lr
 801fbfa:	fb07 f70b 	mul.w	r7, r7, fp
 801fbfe:	fb03 ee06 	mla	lr, r3, r6, lr
 801fc02:	fb03 730a 	mla	r3, r3, sl, r7
 801fc06:	fb09 e202 	mla	r2, r9, r2, lr
 801fc0a:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801fc0e:	fb04 2e0e 	mla	lr, r4, lr, r2
 801fc12:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801fc16:	fb04 3408 	mla	r4, r4, r8, r3
 801fc1a:	9b02      	ldr	r3, [sp, #8]
 801fc1c:	b292      	uxth	r2, r2
 801fc1e:	fb09 4903 	mla	r9, r9, r3, r4
 801fc22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc26:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801fc2a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801fc2e:	fb09 f902 	mul.w	r9, r9, r2
 801fc32:	ea40 0e0e 	orr.w	lr, r0, lr
 801fc36:	f109 0301 	add.w	r3, r9, #1
 801fc3a:	fa5f f08e 	uxtb.w	r0, lr
 801fc3e:	fb10 f002 	smulbb	r0, r0, r2
 801fc42:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801fc46:	780b      	ldrb	r3, [r1, #0]
 801fc48:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801fc4c:	fa5f f989 	uxtb.w	r9, r9
 801fc50:	fb03 0309 	mla	r3, r3, r9, r0
 801fc54:	b29b      	uxth	r3, r3
 801fc56:	1c58      	adds	r0, r3, #1
 801fc58:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fc5c:	7848      	ldrb	r0, [r1, #1]
 801fc5e:	fb10 f009 	smulbb	r0, r0, r9
 801fc62:	121b      	asrs	r3, r3, #8
 801fc64:	700b      	strb	r3, [r1, #0]
 801fc66:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801fc6a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801fc6e:	fb03 0302 	mla	r3, r3, r2, r0
 801fc72:	b29b      	uxth	r3, r3
 801fc74:	1c58      	adds	r0, r3, #1
 801fc76:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fc7a:	121b      	asrs	r3, r3, #8
 801fc7c:	704b      	strb	r3, [r1, #1]
 801fc7e:	788b      	ldrb	r3, [r1, #2]
 801fc80:	fb13 f909 	smulbb	r9, r3, r9
 801fc84:	fb0e 9e02 	mla	lr, lr, r2, r9
 801fc88:	fa1f fe8e 	uxth.w	lr, lr
 801fc8c:	f10e 0301 	add.w	r3, lr, #1
 801fc90:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801fc94:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fc98:	f881 e002 	strb.w	lr, [r1, #2]
 801fc9c:	b007      	add	sp, #28
 801fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fca2:	2600      	movs	r6, #0
 801fca4:	e6eb      	b.n	801fa7e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801fca6:	2000      	movs	r0, #0
 801fca8:	4606      	mov	r6, r0
 801fcaa:	e6f3      	b.n	801fa94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801fcac:	2000      	movs	r0, #0
 801fcae:	e6f1      	b.n	801fa94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801fcb0:	4620      	mov	r0, r4
 801fcb2:	e6ef      	b.n	801fa94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801fcb4:	2500      	movs	r5, #0
 801fcb6:	e6ff      	b.n	801fab8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801fcb8:	2200      	movs	r2, #0
 801fcba:	4615      	mov	r5, r2
 801fcbc:	e708      	b.n	801fad0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801fcbe:	4672      	mov	r2, lr
 801fcc0:	4675      	mov	r5, lr
 801fcc2:	e705      	b.n	801fad0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801fcc4:	2200      	movs	r2, #0
 801fcc6:	e703      	b.n	801fad0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801fcc8:	4622      	mov	r2, r4
 801fcca:	e701      	b.n	801fad0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801fccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcd0:	b09d      	sub	sp, #116	@ 0x74
 801fcd2:	9219      	str	r2, [sp, #100]	@ 0x64
 801fcd4:	9307      	str	r3, [sp, #28]
 801fcd6:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801fcd8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801fcdc:	901b      	str	r0, [sp, #108]	@ 0x6c
 801fcde:	931a      	str	r3, [sp, #104]	@ 0x68
 801fce0:	6850      	ldr	r0, [r2, #4]
 801fce2:	9117      	str	r1, [sp, #92]	@ 0x5c
 801fce4:	6812      	ldr	r2, [r2, #0]
 801fce6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801fcea:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801fcee:	fb00 1303 	mla	r3, r0, r3, r1
 801fcf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fcf6:	18d3      	adds	r3, r2, r3
 801fcf8:	930a      	str	r3, [sp, #40]	@ 0x28
 801fcfa:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	9310      	str	r3, [sp, #64]	@ 0x40
 801fd00:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801fd04:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fd06:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	dc03      	bgt.n	801fd14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fd0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fd0e:	2b00      	cmp	r3, #0
 801fd10:	f340 8368 	ble.w	80203e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801fd14:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801fd16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fd1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fd1e:	1e48      	subs	r0, r1, #1
 801fd20:	1e57      	subs	r7, r2, #1
 801fd22:	9b07      	ldr	r3, [sp, #28]
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	f340 8187 	ble.w	8020038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801fd2a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801fd2e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fd32:	d406      	bmi.n	801fd42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fd34:	4584      	cmp	ip, r0
 801fd36:	da04      	bge.n	801fd42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	db02      	blt.n	801fd42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fd3c:	42bb      	cmp	r3, r7
 801fd3e:	f2c0 817c 	blt.w	802003a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fd42:	f11c 0c01 	adds.w	ip, ip, #1
 801fd46:	f100 816c 	bmi.w	8020022 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fd4a:	4561      	cmp	r1, ip
 801fd4c:	f2c0 8169 	blt.w	8020022 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fd50:	3301      	adds	r3, #1
 801fd52:	f100 8166 	bmi.w	8020022 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fd56:	429a      	cmp	r2, r3
 801fd58:	f2c0 8163 	blt.w	8020022 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fd5c:	9b07      	ldr	r3, [sp, #28]
 801fd5e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801fd60:	9318      	str	r3, [sp, #96]	@ 0x60
 801fd62:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	f340 8186 	ble.w	8020076 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801fd6a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801fd6c:	142a      	asrs	r2, r5, #16
 801fd6e:	ea4f 4026 	mov.w	r0, r6, asr #16
 801fd72:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fd76:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801fd7a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801fd7e:	f100 81cb 	bmi.w	8020118 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fd82:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fd86:	4542      	cmp	r2, r8
 801fd88:	f280 81c6 	bge.w	8020118 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fd8c:	2800      	cmp	r0, #0
 801fd8e:	f2c0 81c3 	blt.w	8020118 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fd92:	f103 38ff 	add.w	r8, r3, #4294967295
 801fd96:	4540      	cmp	r0, r8
 801fd98:	f280 81be 	bge.w	8020118 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fd9c:	fa0f f38e 	sxth.w	r3, lr
 801fda0:	fb00 2203 	mla	r2, r0, r3, r2
 801fda4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fda6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801fdaa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801fdae:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801fdb2:	2900      	cmp	r1, #0
 801fdb4:	f000 81a6 	beq.w	8020104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801fdb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fdbc:	900c      	str	r0, [sp, #48]	@ 0x30
 801fdbe:	0e00      	lsrs	r0, r0, #24
 801fdc0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801fdc2:	f1bc 0f00 	cmp.w	ip, #0
 801fdc6:	d00f      	beq.n	801fde8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fdc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801fdcc:	3b01      	subs	r3, #1
 801fdce:	009b      	lsls	r3, r3, #2
 801fdd0:	3304      	adds	r3, #4
 801fdd2:	eb08 0003 	add.w	r0, r8, r3
 801fdd6:	f858 3003 	ldr.w	r3, [r8, r3]
 801fdda:	9308      	str	r3, [sp, #32]
 801fddc:	0e1b      	lsrs	r3, r3, #24
 801fdde:	9311      	str	r3, [sp, #68]	@ 0x44
 801fde0:	6843      	ldr	r3, [r0, #4]
 801fde2:	930d      	str	r3, [sp, #52]	@ 0x34
 801fde4:	0e1b      	lsrs	r3, r3, #24
 801fde6:	9314      	str	r3, [sp, #80]	@ 0x50
 801fde8:	b289      	uxth	r1, r1
 801fdea:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fdec:	fa1f fc8c 	uxth.w	ip, ip
 801fdf0:	0108      	lsls	r0, r1, #4
 801fdf2:	fb01 f90c 	mul.w	r9, r1, ip
 801fdf6:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801fdfa:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801fdfe:	eba0 0809 	sub.w	r8, r0, r9
 801fe02:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fe04:	fa1f f18c 	uxth.w	r1, ip
 801fe08:	fa1f f888 	uxth.w	r8, r8
 801fe0c:	1a5b      	subs	r3, r3, r1
 801fe0e:	fb08 f000 	mul.w	r0, r8, r0
 801fe12:	b29b      	uxth	r3, r3
 801fe14:	fb03 000e 	mla	r0, r3, lr, r0
 801fe18:	fb01 0004 	mla	r0, r1, r4, r0
 801fe1c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fe1e:	fb09 0004 	mla	r0, r9, r4, r0
 801fe22:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fe26:	2800      	cmp	r0, #0
 801fe28:	f000 80f2 	beq.w	8020010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fe2c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801fe30:	d01b      	beq.n	801fe6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fe32:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801fe36:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fe3a:	fb0e fa0a 	mul.w	sl, lr, sl
 801fe3e:	fb0e fe02 	mul.w	lr, lr, r2
 801fe42:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fe46:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fe4a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801fe4e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801fe52:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fe56:	4452      	add	r2, sl
 801fe58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe5c:	0a12      	lsrs	r2, r2, #8
 801fe5e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801fe62:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801fe66:	ea42 020c 	orr.w	r2, r2, ip
 801fe6a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fe6c:	2cff      	cmp	r4, #255	@ 0xff
 801fe6e:	d021      	beq.n	801feb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fe70:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fe72:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fe76:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fe78:	fb04 fb0b 	mul.w	fp, r4, fp
 801fe7c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fe7e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fe82:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fe84:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fe88:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fe8c:	fb04 fa0a 	mul.w	sl, r4, sl
 801fe90:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fe94:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fe98:	44de      	add	lr, fp
 801fe9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fe9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fea2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fea6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801feaa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801feae:	ea4e 040a 	orr.w	r4, lr, sl
 801feb2:	940c      	str	r4, [sp, #48]	@ 0x30
 801feb4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801feb6:	2cff      	cmp	r4, #255	@ 0xff
 801feb8:	d021      	beq.n	801fefe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801feba:	9c08      	ldr	r4, [sp, #32]
 801febc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fec0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fec2:	fb04 fb0b 	mul.w	fp, r4, fp
 801fec6:	9c08      	ldr	r4, [sp, #32]
 801fec8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fecc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fece:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fed2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fed6:	fb04 fa0a 	mul.w	sl, r4, sl
 801feda:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fede:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fee2:	44de      	add	lr, fp
 801fee4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fee8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801feec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fef0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fef4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fef8:	ea4e 040a 	orr.w	r4, lr, sl
 801fefc:	9408      	str	r4, [sp, #32]
 801fefe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ff00:	2cff      	cmp	r4, #255	@ 0xff
 801ff02:	d021      	beq.n	801ff48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ff04:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ff06:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ff0a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ff0c:	fb04 fb0b 	mul.w	fp, r4, fp
 801ff10:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ff12:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ff16:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ff18:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ff1c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ff20:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff24:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ff28:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ff2c:	44de      	add	lr, fp
 801ff2e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ff32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff3a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ff3e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff42:	ea4e 040a 	orr.w	r4, lr, sl
 801ff46:	940d      	str	r4, [sp, #52]	@ 0x34
 801ff48:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ff4a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801ff4e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ff52:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ff56:	9c08      	ldr	r4, [sp, #32]
 801ff58:	fb08 fc0c 	mul.w	ip, r8, ip
 801ff5c:	fb03 cc0e 	mla	ip, r3, lr, ip
 801ff60:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ff64:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ff66:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ff6a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ff6e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ff70:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ff74:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801ff78:	fb08 f80e 	mul.w	r8, r8, lr
 801ff7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff80:	fb03 8202 	mla	r2, r3, r2, r8
 801ff84:	9b08      	ldr	r3, [sp, #32]
 801ff86:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff8a:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801ff8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ff90:	fb01 220a 	mla	r2, r1, sl, r2
 801ff94:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801ff98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ff9a:	fb09 2901 	mla	r9, r9, r1, r2
 801ff9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ffa0:	4343      	muls	r3, r0
 801ffa2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ffa6:	1c58      	adds	r0, r3, #1
 801ffa8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801ffac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ffb0:	783b      	ldrb	r3, [r7, #0]
 801ffb2:	ea4c 0c09 	orr.w	ip, ip, r9
 801ffb6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ffba:	fa5f f28c 	uxtb.w	r2, ip
 801ffbe:	b2c0      	uxtb	r0, r0
 801ffc0:	fb12 f201 	smulbb	r2, r2, r1
 801ffc4:	fb03 2300 	mla	r3, r3, r0, r2
 801ffc8:	b29b      	uxth	r3, r3
 801ffca:	1c5a      	adds	r2, r3, #1
 801ffcc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ffd0:	787a      	ldrb	r2, [r7, #1]
 801ffd2:	fb12 f200 	smulbb	r2, r2, r0
 801ffd6:	121b      	asrs	r3, r3, #8
 801ffd8:	703b      	strb	r3, [r7, #0]
 801ffda:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ffde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ffe2:	fb03 2301 	mla	r3, r3, r1, r2
 801ffe6:	b29b      	uxth	r3, r3
 801ffe8:	1c5a      	adds	r2, r3, #1
 801ffea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ffee:	121b      	asrs	r3, r3, #8
 801fff0:	707b      	strb	r3, [r7, #1]
 801fff2:	78bb      	ldrb	r3, [r7, #2]
 801fff4:	fb13 f000 	smulbb	r0, r3, r0
 801fff8:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fffc:	fa1f fc8c 	uxth.w	ip, ip
 8020000:	f10c 0301 	add.w	r3, ip, #1
 8020004:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020008:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802000c:	f887 c002 	strb.w	ip, [r7, #2]
 8020010:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020012:	3703      	adds	r7, #3
 8020014:	441d      	add	r5, r3
 8020016:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020018:	441e      	add	r6, r3
 802001a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802001c:	3b01      	subs	r3, #1
 802001e:	9318      	str	r3, [sp, #96]	@ 0x60
 8020020:	e69f      	b.n	801fd62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020022:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020024:	441d      	add	r5, r3
 8020026:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020028:	441e      	add	r6, r3
 802002a:	9b07      	ldr	r3, [sp, #28]
 802002c:	3b01      	subs	r3, #1
 802002e:	9307      	str	r3, [sp, #28]
 8020030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020032:	3303      	adds	r3, #3
 8020034:	930a      	str	r3, [sp, #40]	@ 0x28
 8020036:	e674      	b.n	801fd22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8020038:	d025      	beq.n	8020086 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802003a:	9b07      	ldr	r3, [sp, #28]
 802003c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802003e:	3b01      	subs	r3, #1
 8020040:	fb00 5003 	mla	r0, r0, r3, r5
 8020044:	1400      	asrs	r0, r0, #16
 8020046:	f53f ae89 	bmi.w	801fd5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802004a:	3901      	subs	r1, #1
 802004c:	4288      	cmp	r0, r1
 802004e:	f6bf ae85 	bge.w	801fd5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020052:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8020054:	fb01 6303 	mla	r3, r1, r3, r6
 8020058:	141b      	asrs	r3, r3, #16
 802005a:	f53f ae7f 	bmi.w	801fd5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802005e:	3a01      	subs	r2, #1
 8020060:	4293      	cmp	r3, r2
 8020062:	f6bf ae7b 	bge.w	801fd5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020068:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802006c:	f103 0e03 	add.w	lr, r3, #3
 8020070:	f1bb 0f00 	cmp.w	fp, #0
 8020074:	dc6e      	bgt.n	8020154 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8020076:	9b07      	ldr	r3, [sp, #28]
 8020078:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802007c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802007e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020082:	4423      	add	r3, r4
 8020084:	930a      	str	r3, [sp, #40]	@ 0x28
 8020086:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020088:	2b00      	cmp	r3, #0
 802008a:	f340 81ab 	ble.w	80203e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802008e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020092:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020094:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020098:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802009c:	eef0 6a62 	vmov.f32	s13, s5
 80200a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80200a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80200a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200ac:	ee16 5a90 	vmov	r5, s13
 80200b0:	eef0 6a43 	vmov.f32	s13, s6
 80200b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200b8:	ee16 6a90 	vmov	r6, s13
 80200bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80200c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80200c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80200c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80200cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80200d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80200d4:	ee12 2a90 	vmov	r2, s5
 80200d8:	eef0 2a47 	vmov.f32	s5, s14
 80200dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80200e0:	ee13 2a10 	vmov	r2, s6
 80200e4:	9329      	str	r3, [sp, #164]	@ 0xa4
 80200e6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80200e8:	eeb0 3a67 	vmov.f32	s6, s15
 80200ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80200f0:	932a      	str	r3, [sp, #168]	@ 0xa8
 80200f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80200f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80200f6:	3b01      	subs	r3, #1
 80200f8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80200fa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80200fc:	bf08      	it	eq
 80200fe:	4613      	moveq	r3, r2
 8020100:	9307      	str	r3, [sp, #28]
 8020102:	e600      	b.n	801fd06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020104:	f1bc 0f00 	cmp.w	ip, #0
 8020108:	f43f ae6e 	beq.w	801fde8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802010c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8020110:	9308      	str	r3, [sp, #32]
 8020112:	0e1b      	lsrs	r3, r3, #24
 8020114:	9311      	str	r3, [sp, #68]	@ 0x44
 8020116:	e667      	b.n	801fde8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020118:	f112 0801 	adds.w	r8, r2, #1
 802011c:	f53f af78 	bmi.w	8020010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020120:	45c6      	cmp	lr, r8
 8020122:	f6ff af75 	blt.w	8020010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020126:	f110 0801 	adds.w	r8, r0, #1
 802012a:	f53f af71 	bmi.w	8020010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802012e:	4543      	cmp	r3, r8
 8020130:	f6ff af6e 	blt.w	8020010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020134:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8020136:	b21b      	sxth	r3, r3
 8020138:	9201      	str	r2, [sp, #4]
 802013a:	9300      	str	r3, [sp, #0]
 802013c:	fa0f f38e 	sxth.w	r3, lr
 8020140:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020146:	e9cd c404 	strd	ip, r4, [sp, #16]
 802014a:	4639      	mov	r1, r7
 802014c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802014e:	f7ff fc79 	bl	801fa44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8020152:	e75d      	b.n	8020010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020154:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8020156:	142f      	asrs	r7, r5, #16
 8020158:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802015a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802015e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8020162:	1433      	asrs	r3, r6, #16
 8020164:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020168:	fb02 7303 	mla	r3, r2, r3, r7
 802016c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8020170:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020174:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020178:	2900      	cmp	r1, #0
 802017a:	f000 812a 	beq.w	80203d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802017e:	687c      	ldr	r4, [r7, #4]
 8020180:	940e      	str	r4, [sp, #56]	@ 0x38
 8020182:	0e24      	lsrs	r4, r4, #24
 8020184:	9415      	str	r4, [sp, #84]	@ 0x54
 8020186:	b178      	cbz	r0, 80201a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020188:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 802018c:	3a01      	subs	r2, #1
 802018e:	0092      	lsls	r2, r2, #2
 8020190:	3204      	adds	r2, #4
 8020192:	eb07 0802 	add.w	r8, r7, r2
 8020196:	58ba      	ldr	r2, [r7, r2]
 8020198:	9209      	str	r2, [sp, #36]	@ 0x24
 802019a:	0e12      	lsrs	r2, r2, #24
 802019c:	9212      	str	r2, [sp, #72]	@ 0x48
 802019e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80201a2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80201a4:	0e12      	lsrs	r2, r2, #24
 80201a6:	9216      	str	r2, [sp, #88]	@ 0x58
 80201a8:	b289      	uxth	r1, r1
 80201aa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80201ac:	b280      	uxth	r0, r0
 80201ae:	fb01 f900 	mul.w	r9, r1, r0
 80201b2:	0109      	lsls	r1, r1, #4
 80201b4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80201b8:	eba1 0809 	sub.w	r8, r1, r9
 80201bc:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 80201c0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80201c2:	b280      	uxth	r0, r0
 80201c4:	fa1f f888 	uxth.w	r8, r8
 80201c8:	1a12      	subs	r2, r2, r0
 80201ca:	fb08 f101 	mul.w	r1, r8, r1
 80201ce:	b292      	uxth	r2, r2
 80201d0:	fb02 110c 	mla	r1, r2, ip, r1
 80201d4:	fb00 1104 	mla	r1, r0, r4, r1
 80201d8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80201da:	fb09 1104 	mla	r1, r9, r4, r1
 80201de:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80201e2:	2900      	cmp	r1, #0
 80201e4:	f000 80ec 	beq.w	80203c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80201e8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80201ec:	d019      	beq.n	8020222 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80201ee:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80201f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80201f6:	fb0c fa0a 	mul.w	sl, ip, sl
 80201fa:	fb0c fc03 	mul.w	ip, ip, r3
 80201fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020202:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020206:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802020a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802020e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020212:	4453      	add	r3, sl
 8020214:	0a3f      	lsrs	r7, r7, #8
 8020216:	0a1b      	lsrs	r3, r3, #8
 8020218:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802021c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020220:	433b      	orrs	r3, r7
 8020222:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020224:	2cff      	cmp	r4, #255	@ 0xff
 8020226:	d020      	beq.n	802026a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8020228:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802022a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802022e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020230:	4367      	muls	r7, r4
 8020232:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020234:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020238:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802023c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802023e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020242:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020246:	fb04 fa0a 	mul.w	sl, r4, sl
 802024a:	44bc      	add	ip, r7
 802024c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020250:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020254:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020258:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802025c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020260:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020264:	ea4c 040a 	orr.w	r4, ip, sl
 8020268:	940e      	str	r4, [sp, #56]	@ 0x38
 802026a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802026c:	2cff      	cmp	r4, #255	@ 0xff
 802026e:	d020      	beq.n	80202b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8020270:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020272:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020276:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020278:	4367      	muls	r7, r4
 802027a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802027c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020280:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020284:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020286:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802028a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802028e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020292:	44bc      	add	ip, r7
 8020294:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020298:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802029c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80202a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80202a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80202a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80202ac:	ea4c 040a 	orr.w	r4, ip, sl
 80202b0:	9409      	str	r4, [sp, #36]	@ 0x24
 80202b2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80202b4:	2cff      	cmp	r4, #255	@ 0xff
 80202b6:	d020      	beq.n	80202fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80202b8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80202ba:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80202be:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80202c0:	4367      	muls	r7, r4
 80202c2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80202c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80202c8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80202cc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80202ce:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80202d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80202d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80202da:	44bc      	add	ip, r7
 80202dc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80202e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80202e8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80202ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80202f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80202f4:	ea4c 040a 	orr.w	r4, ip, sl
 80202f8:	940f      	str	r4, [sp, #60]	@ 0x3c
 80202fa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80202fc:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020300:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020304:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020308:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802030a:	fb08 f707 	mul.w	r7, r8, r7
 802030e:	fb02 770c 	mla	r7, r2, ip, r7
 8020312:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020316:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020318:	fb00 770c 	mla	r7, r0, ip, r7
 802031c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020320:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020322:	fb09 770c 	mla	r7, r9, ip, r7
 8020326:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802032a:	fb08 f80c 	mul.w	r8, r8, ip
 802032e:	0a3f      	lsrs	r7, r7, #8
 8020330:	fb02 8303 	mla	r3, r2, r3, r8
 8020334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020336:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802033a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802033e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020340:	fb00 330a 	mla	r3, r0, sl, r3
 8020344:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8020348:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802034a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802034e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020350:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020354:	434b      	muls	r3, r1
 8020356:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802035a:	1c59      	adds	r1, r3, #1
 802035c:	ea47 070c 	orr.w	r7, r7, ip
 8020360:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020364:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020368:	b2fa      	uxtb	r2, r7
 802036a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802036e:	fb12 f200 	smulbb	r2, r2, r0
 8020372:	b2c9      	uxtb	r1, r1
 8020374:	fb03 2301 	mla	r3, r3, r1, r2
 8020378:	b29b      	uxth	r3, r3
 802037a:	1c5a      	adds	r2, r3, #1
 802037c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020380:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020384:	fb12 f201 	smulbb	r2, r2, r1
 8020388:	121b      	asrs	r3, r3, #8
 802038a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802038e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020392:	0c3f      	lsrs	r7, r7, #16
 8020394:	fb03 2300 	mla	r3, r3, r0, r2
 8020398:	b29b      	uxth	r3, r3
 802039a:	1c5a      	adds	r2, r3, #1
 802039c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80203a0:	121b      	asrs	r3, r3, #8
 80203a2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80203a6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80203aa:	fb13 f101 	smulbb	r1, r3, r1
 80203ae:	fb07 1700 	mla	r7, r7, r0, r1
 80203b2:	b2bf      	uxth	r7, r7
 80203b4:	1c79      	adds	r1, r7, #1
 80203b6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80203ba:	123f      	asrs	r7, r7, #8
 80203bc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80203c0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80203c2:	f10e 0e03 	add.w	lr, lr, #3
 80203c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80203ca:	441d      	add	r5, r3
 80203cc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80203ce:	441e      	add	r6, r3
 80203d0:	e64e      	b.n	8020070 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80203d2:	2800      	cmp	r0, #0
 80203d4:	f43f aee8 	beq.w	80201a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80203d8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80203dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80203de:	0e12      	lsrs	r2, r2, #24
 80203e0:	9212      	str	r2, [sp, #72]	@ 0x48
 80203e2:	e6e1      	b.n	80201a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80203e4:	b01d      	add	sp, #116	@ 0x74
 80203e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080203ea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80203ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203ee:	b087      	sub	sp, #28
 80203f0:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80203f4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80203f8:	fb05 7003 	mla	r0, r5, r3, r7
 80203fc:	2d00      	cmp	r5, #0
 80203fe:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8020402:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8020406:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802040a:	f2c0 810a 	blt.w	8020622 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 802040e:	45a8      	cmp	r8, r5
 8020410:	f340 8107 	ble.w	8020622 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020414:	2f00      	cmp	r7, #0
 8020416:	f2c0 8102 	blt.w	802061e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802041a:	42bb      	cmp	r3, r7
 802041c:	f340 80ff 	ble.w	802061e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8020420:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8020424:	1c7a      	adds	r2, r7, #1
 8020426:	f100 80ff 	bmi.w	8020628 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802042a:	4293      	cmp	r3, r2
 802042c:	f340 80fc 	ble.w	8020628 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8020430:	2c00      	cmp	r4, #0
 8020432:	f000 80fb 	beq.w	802062c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8020436:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802043a:	3501      	adds	r5, #1
 802043c:	f100 80fa 	bmi.w	8020634 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8020440:	45a8      	cmp	r8, r5
 8020442:	f340 80f7 	ble.w	8020634 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8020446:	f1be 0f00 	cmp.w	lr, #0
 802044a:	f000 80f6 	beq.w	802063a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802044e:	2f00      	cmp	r7, #0
 8020450:	f2c0 80ee 	blt.w	8020630 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8020454:	42bb      	cmp	r3, r7
 8020456:	f340 80eb 	ble.w	8020630 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802045a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802045e:	3701      	adds	r7, #1
 8020460:	f100 80ee 	bmi.w	8020640 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8020464:	42bb      	cmp	r3, r7
 8020466:	f340 80eb 	ble.w	8020640 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802046a:	2c00      	cmp	r4, #0
 802046c:	f000 80ea 	beq.w	8020644 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8020470:	3301      	adds	r3, #1
 8020472:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8020476:	fa1f fc84 	uxth.w	ip, r4
 802047a:	fa1f fe8e 	uxth.w	lr, lr
 802047e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020482:	fb0c f90e 	mul.w	r9, ip, lr
 8020486:	0e13      	lsrs	r3, r2, #24
 8020488:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802048c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8020490:	9302      	str	r3, [sp, #8]
 8020492:	ebac 0709 	sub.w	r7, ip, r9
 8020496:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802049a:	fa1f f48e 	uxth.w	r4, lr
 802049e:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80204a2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80204a6:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80204aa:	fb0a fe0e 	mul.w	lr, sl, lr
 80204ae:	1b1b      	subs	r3, r3, r4
 80204b0:	fb0a f606 	mul.w	r6, sl, r6
 80204b4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80204b8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80204bc:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80204c0:	b29b      	uxth	r3, r3
 80204c2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80204c6:	b2bf      	uxth	r7, r7
 80204c8:	9301      	str	r3, [sp, #4]
 80204ca:	44e6      	add	lr, ip
 80204cc:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80204d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204d4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80204d8:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80204dc:	9303      	str	r3, [sp, #12]
 80204de:	0a33      	lsrs	r3, r6, #8
 80204e0:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80204e4:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80204e8:	9304      	str	r3, [sp, #16]
 80204ea:	fb0b f606 	mul.w	r6, fp, r6
 80204ee:	fb0b f000 	mul.w	r0, fp, r0
 80204f2:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80204f6:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80204fa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204fe:	44b6      	add	lr, r6
 8020500:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8020504:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8020508:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 802050c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020510:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020514:	fb08 f606 	mul.w	r6, r8, r6
 8020518:	0a03      	lsrs	r3, r0, #8
 802051a:	fb08 f505 	mul.w	r5, r8, r5
 802051e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020522:	0a30      	lsrs	r0, r6, #8
 8020524:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8020528:	9305      	str	r3, [sp, #20]
 802052a:	0e13      	lsrs	r3, r2, #24
 802052c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020530:	fb0e fe07 	mul.w	lr, lr, r7
 8020534:	4430      	add	r0, r6
 8020536:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802053a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802053e:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8020542:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020546:	0a00      	lsrs	r0, r0, #8
 8020548:	435e      	muls	r6, r3
 802054a:	0a2d      	lsrs	r5, r5, #8
 802054c:	435a      	muls	r2, r3
 802054e:	9b03      	ldr	r3, [sp, #12]
 8020550:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8020554:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8020558:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802055c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020560:	44b4      	add	ip, r6
 8020562:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8020566:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802056a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802056e:	9e01      	ldr	r6, [sp, #4]
 8020570:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020574:	fb03 ee06 	mla	lr, r3, r6, lr
 8020578:	9b04      	ldr	r3, [sp, #16]
 802057a:	0a12      	lsrs	r2, r2, #8
 802057c:	fb0c ee09 	mla	lr, ip, r9, lr
 8020580:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8020584:	9b05      	ldr	r3, [sp, #20]
 8020586:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802058a:	fb00 ee04 	mla	lr, r0, r4, lr
 802058e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020592:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8020596:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 802059a:	9b01      	ldr	r3, [sp, #4]
 802059c:	fb07 fe0e 	mul.w	lr, r7, lr
 80205a0:	fb07 f70b 	mul.w	r7, r7, fp
 80205a4:	fb03 ee06 	mla	lr, r3, r6, lr
 80205a8:	fb03 730a 	mla	r3, r3, sl, r7
 80205ac:	fb09 e202 	mla	r2, r9, r2, lr
 80205b0:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80205b4:	fb04 2e0e 	mla	lr, r4, lr, r2
 80205b8:	fb04 3408 	mla	r4, r4, r8, r3
 80205bc:	9b02      	ldr	r3, [sp, #8]
 80205be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205c2:	fb09 4903 	mla	r9, r9, r3, r4
 80205c6:	780b      	ldrb	r3, [r1, #0]
 80205c8:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80205cc:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80205d0:	ea40 0e0e 	orr.w	lr, r0, lr
 80205d4:	fa5f f989 	uxtb.w	r9, r9
 80205d8:	fb03 f209 	mul.w	r2, r3, r9
 80205dc:	1c53      	adds	r3, r2, #1
 80205de:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80205e2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80205e6:	700b      	strb	r3, [r1, #0]
 80205e8:	784b      	ldrb	r3, [r1, #1]
 80205ea:	fb03 f309 	mul.w	r3, r3, r9
 80205ee:	1c5a      	adds	r2, r3, #1
 80205f0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80205f4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80205f8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80205fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020600:	704b      	strb	r3, [r1, #1]
 8020602:	788b      	ldrb	r3, [r1, #2]
 8020604:	fb03 f909 	mul.w	r9, r3, r9
 8020608:	f109 0301 	add.w	r3, r9, #1
 802060c:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8020610:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8020614:	f881 e002 	strb.w	lr, [r1, #2]
 8020618:	b007      	add	sp, #28
 802061a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802061e:	2600      	movs	r6, #0
 8020620:	e700      	b.n	8020424 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8020622:	2000      	movs	r0, #0
 8020624:	4606      	mov	r6, r0
 8020626:	e708      	b.n	802043a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020628:	2000      	movs	r0, #0
 802062a:	e706      	b.n	802043a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802062c:	4620      	mov	r0, r4
 802062e:	e704      	b.n	802043a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020630:	2500      	movs	r5, #0
 8020632:	e714      	b.n	802045e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8020634:	2200      	movs	r2, #0
 8020636:	4615      	mov	r5, r2
 8020638:	e71d      	b.n	8020476 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802063a:	4672      	mov	r2, lr
 802063c:	4675      	mov	r5, lr
 802063e:	e71a      	b.n	8020476 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020640:	2200      	movs	r2, #0
 8020642:	e718      	b.n	8020476 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020644:	4622      	mov	r2, r4
 8020646:	e716      	b.n	8020476 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08020648 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802064c:	b099      	sub	sp, #100	@ 0x64
 802064e:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8020652:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8020654:	9017      	str	r0, [sp, #92]	@ 0x5c
 8020656:	9306      	str	r3, [sp, #24]
 8020658:	6850      	ldr	r0, [r2, #4]
 802065a:	6812      	ldr	r2, [r2, #0]
 802065c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8020660:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8020664:	fb00 1303 	mla	r3, r0, r3, r1
 8020668:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802066c:	18d3      	adds	r3, r2, r3
 802066e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020670:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	930e      	str	r3, [sp, #56]	@ 0x38
 8020676:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020678:	2b00      	cmp	r3, #0
 802067a:	dc03      	bgt.n	8020684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802067c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802067e:	2b00      	cmp	r3, #0
 8020680:	f340 8360 	ble.w	8020d44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8020684:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020686:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802068a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802068e:	1e48      	subs	r0, r1, #1
 8020690:	1e57      	subs	r7, r2, #1
 8020692:	9b06      	ldr	r3, [sp, #24]
 8020694:	2b00      	cmp	r3, #0
 8020696:	f340 817b 	ble.w	8020990 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802069a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802069e:	ea4f 4326 	mov.w	r3, r6, asr #16
 80206a2:	d406      	bmi.n	80206b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80206a4:	4584      	cmp	ip, r0
 80206a6:	da04      	bge.n	80206b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	db02      	blt.n	80206b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80206ac:	42bb      	cmp	r3, r7
 80206ae:	f2c0 8170 	blt.w	8020992 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80206b2:	f11c 0c01 	adds.w	ip, ip, #1
 80206b6:	f100 8160 	bmi.w	802097a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80206ba:	4561      	cmp	r1, ip
 80206bc:	f2c0 815d 	blt.w	802097a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80206c0:	3301      	adds	r3, #1
 80206c2:	f100 815a 	bmi.w	802097a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80206c6:	429a      	cmp	r2, r3
 80206c8:	f2c0 8157 	blt.w	802097a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80206cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80206d0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80206d2:	f1b8 0f00 	cmp.w	r8, #0
 80206d6:	f340 8179 	ble.w	80209cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80206da:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80206dc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80206e0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80206e2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80206e6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80206ea:	142a      	asrs	r2, r5, #16
 80206ec:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80206f0:	689b      	ldr	r3, [r3, #8]
 80206f2:	f100 81be 	bmi.w	8020a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80206f6:	f103 39ff 	add.w	r9, r3, #4294967295
 80206fa:	454a      	cmp	r2, r9
 80206fc:	f280 81b9 	bge.w	8020a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020700:	f1bc 0f00 	cmp.w	ip, #0
 8020704:	f2c0 81b5 	blt.w	8020a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020708:	f10e 39ff 	add.w	r9, lr, #4294967295
 802070c:	45cc      	cmp	ip, r9
 802070e:	f280 81b0 	bge.w	8020a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020712:	b21b      	sxth	r3, r3
 8020714:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020716:	fb0c 2203 	mla	r2, ip, r3, r2
 802071a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802071e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020722:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020726:	2900      	cmp	r1, #0
 8020728:	f000 8197 	beq.w	8020a5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802072c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8020730:	940a      	str	r4, [sp, #40]	@ 0x28
 8020732:	0e24      	lsrs	r4, r4, #24
 8020734:	9411      	str	r4, [sp, #68]	@ 0x44
 8020736:	b180      	cbz	r0, 802075a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802073c:	3b01      	subs	r3, #1
 802073e:	009b      	lsls	r3, r3, #2
 8020740:	3304      	adds	r3, #4
 8020742:	eb09 0c03 	add.w	ip, r9, r3
 8020746:	f859 3003 	ldr.w	r3, [r9, r3]
 802074a:	9307      	str	r3, [sp, #28]
 802074c:	0e1b      	lsrs	r3, r3, #24
 802074e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020750:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020754:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020756:	0e1b      	lsrs	r3, r3, #24
 8020758:	9312      	str	r3, [sp, #72]	@ 0x48
 802075a:	b289      	uxth	r1, r1
 802075c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802075e:	b280      	uxth	r0, r0
 8020760:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020762:	fb01 fa00 	mul.w	sl, r1, r0
 8020766:	0109      	lsls	r1, r1, #4
 8020768:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802076c:	eba1 090a 	sub.w	r9, r1, sl
 8020770:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8020774:	b280      	uxth	r0, r0
 8020776:	fa1f f989 	uxth.w	r9, r9
 802077a:	1a09      	subs	r1, r1, r0
 802077c:	fb09 f303 	mul.w	r3, r9, r3
 8020780:	b289      	uxth	r1, r1
 8020782:	fb01 330e 	mla	r3, r1, lr, r3
 8020786:	fb00 3304 	mla	r3, r0, r4, r3
 802078a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802078c:	fb0a 3304 	mla	r3, sl, r4, r3
 8020790:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020794:	2b00      	cmp	r3, #0
 8020796:	f000 80e8 	beq.w	802096a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802079a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802079e:	d01b      	beq.n	80207d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80207a0:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 80207a4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80207a8:	fb0e fb0b 	mul.w	fp, lr, fp
 80207ac:	fb0e fe02 	mul.w	lr, lr, r2
 80207b0:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80207b4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80207b8:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80207bc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80207c0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80207c4:	445a      	add	r2, fp
 80207c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207ca:	0a12      	lsrs	r2, r2, #8
 80207cc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80207d0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80207d4:	ea42 020c 	orr.w	r2, r2, ip
 80207d8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80207da:	2cff      	cmp	r4, #255	@ 0xff
 80207dc:	d021      	beq.n	8020822 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80207de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80207e0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80207e4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80207e6:	fb04 fc0c 	mul.w	ip, r4, ip
 80207ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80207ec:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80207f0:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80207f4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80207f6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80207fa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80207fe:	fb04 fb0b 	mul.w	fp, r4, fp
 8020802:	44e6      	add	lr, ip
 8020804:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020808:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802080c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020810:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020814:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020818:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802081c:	ea4e 040b 	orr.w	r4, lr, fp
 8020820:	940a      	str	r4, [sp, #40]	@ 0x28
 8020822:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020824:	2cff      	cmp	r4, #255	@ 0xff
 8020826:	d021      	beq.n	802086c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020828:	9c07      	ldr	r4, [sp, #28]
 802082a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802082e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020830:	fb04 fc0c 	mul.w	ip, r4, ip
 8020834:	9c07      	ldr	r4, [sp, #28]
 8020836:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802083a:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802083e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020840:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020844:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020848:	fb04 fb0b 	mul.w	fp, r4, fp
 802084c:	44e6      	add	lr, ip
 802084e:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020852:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020856:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802085a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802085e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020862:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020866:	ea4e 040b 	orr.w	r4, lr, fp
 802086a:	9407      	str	r4, [sp, #28]
 802086c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802086e:	2cff      	cmp	r4, #255	@ 0xff
 8020870:	d021      	beq.n	80208b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020872:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020874:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020878:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802087a:	fb04 fc0c 	mul.w	ip, r4, ip
 802087e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020880:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020884:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020888:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802088a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802088e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020892:	fb04 fb0b 	mul.w	fp, r4, fp
 8020896:	44e6      	add	lr, ip
 8020898:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802089c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208a0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80208a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80208a8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80208ac:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80208b0:	ea4e 040b 	orr.w	r4, lr, fp
 80208b4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80208b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80208b8:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80208bc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80208c0:	2bff      	cmp	r3, #255	@ 0xff
 80208c2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80208c6:	9c07      	ldr	r4, [sp, #28]
 80208c8:	fb09 fc0c 	mul.w	ip, r9, ip
 80208cc:	fb01 cc0e 	mla	ip, r1, lr, ip
 80208d0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80208d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80208d6:	fb00 cc0e 	mla	ip, r0, lr, ip
 80208da:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80208de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80208e0:	fb0a cc0e 	mla	ip, sl, lr, ip
 80208e4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80208e8:	fb09 f90e 	mul.w	r9, r9, lr
 80208ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208f0:	fb01 9202 	mla	r2, r1, r2, r9
 80208f4:	9907      	ldr	r1, [sp, #28]
 80208f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80208fa:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 80208fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020900:	fb00 220b 	mla	r2, r0, fp, r2
 8020904:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8020908:	fb0a 2a00 	mla	sl, sl, r0, r2
 802090c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020910:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020914:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020918:	fa5f f08c 	uxtb.w	r0, ip
 802091c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020920:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020924:	f000 80a2 	beq.w	8020a6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020928:	43db      	mvns	r3, r3
 802092a:	783a      	ldrb	r2, [r7, #0]
 802092c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020930:	b2db      	uxtb	r3, r3
 8020932:	fb02 fe03 	mul.w	lr, r2, r3
 8020936:	fb0a fa03 	mul.w	sl, sl, r3
 802093a:	f10e 0201 	add.w	r2, lr, #1
 802093e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8020942:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020946:	703a      	strb	r2, [r7, #0]
 8020948:	787a      	ldrb	r2, [r7, #1]
 802094a:	fb02 f003 	mul.w	r0, r2, r3
 802094e:	f10a 0301 	add.w	r3, sl, #1
 8020952:	1c42      	adds	r2, r0, #1
 8020954:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020958:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802095c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020960:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020964:	707a      	strb	r2, [r7, #1]
 8020966:	f887 c002 	strb.w	ip, [r7, #2]
 802096a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802096c:	3703      	adds	r7, #3
 802096e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020972:	441d      	add	r5, r3
 8020974:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020976:	441e      	add	r6, r3
 8020978:	e6ab      	b.n	80206d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802097a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802097c:	441d      	add	r5, r3
 802097e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020980:	441e      	add	r6, r3
 8020982:	9b06      	ldr	r3, [sp, #24]
 8020984:	3b01      	subs	r3, #1
 8020986:	9306      	str	r3, [sp, #24]
 8020988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802098a:	3303      	adds	r3, #3
 802098c:	9309      	str	r3, [sp, #36]	@ 0x24
 802098e:	e680      	b.n	8020692 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020990:	d024      	beq.n	80209dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8020992:	9b06      	ldr	r3, [sp, #24]
 8020994:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8020996:	3b01      	subs	r3, #1
 8020998:	fb00 5003 	mla	r0, r0, r3, r5
 802099c:	1400      	asrs	r0, r0, #16
 802099e:	f53f ae95 	bmi.w	80206cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80209a2:	3901      	subs	r1, #1
 80209a4:	4288      	cmp	r0, r1
 80209a6:	f6bf ae91 	bge.w	80206cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80209aa:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80209ac:	fb01 6303 	mla	r3, r1, r3, r6
 80209b0:	141b      	asrs	r3, r3, #16
 80209b2:	f53f ae8b 	bmi.w	80206cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80209b6:	3a01      	subs	r2, #1
 80209b8:	4293      	cmp	r3, r2
 80209ba:	f6bf ae87 	bge.w	80206cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80209be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209c0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80209c4:	1cdf      	adds	r7, r3, #3
 80209c6:	f1bb 0f00 	cmp.w	fp, #0
 80209ca:	dc6e      	bgt.n	8020aaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80209cc:	9b06      	ldr	r3, [sp, #24]
 80209ce:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80209d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80209d8:	4423      	add	r3, r4
 80209da:	9309      	str	r3, [sp, #36]	@ 0x24
 80209dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80209de:	2b00      	cmp	r3, #0
 80209e0:	f340 81b0 	ble.w	8020d44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80209e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80209e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80209ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80209ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80209f2:	eef0 6a62 	vmov.f32	s13, s5
 80209f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80209fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a02:	ee16 5a90 	vmov	r5, s13
 8020a06:	eef0 6a43 	vmov.f32	s13, s6
 8020a0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a0e:	ee16 6a90 	vmov	r6, s13
 8020a12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a16:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a2a:	ee12 2a90 	vmov	r2, s5
 8020a2e:	eef0 2a47 	vmov.f32	s5, s14
 8020a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a36:	ee13 2a10 	vmov	r2, s6
 8020a3a:	9325      	str	r3, [sp, #148]	@ 0x94
 8020a3c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020a3e:	eeb0 3a67 	vmov.f32	s6, s15
 8020a42:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a46:	9326      	str	r3, [sp, #152]	@ 0x98
 8020a48:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020a4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020a4c:	3b01      	subs	r3, #1
 8020a4e:	9315      	str	r3, [sp, #84]	@ 0x54
 8020a50:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020a52:	bf08      	it	eq
 8020a54:	4613      	moveq	r3, r2
 8020a56:	9306      	str	r3, [sp, #24]
 8020a58:	e60d      	b.n	8020676 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020a5a:	2800      	cmp	r0, #0
 8020a5c:	f43f ae7d 	beq.w	802075a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020a60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8020a64:	9307      	str	r3, [sp, #28]
 8020a66:	0e1b      	lsrs	r3, r3, #24
 8020a68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020a6a:	e676      	b.n	802075a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020a6c:	7038      	strb	r0, [r7, #0]
 8020a6e:	7079      	strb	r1, [r7, #1]
 8020a70:	e779      	b.n	8020966 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020a72:	f112 0901 	adds.w	r9, r2, #1
 8020a76:	f53f af78 	bmi.w	802096a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020a7a:	454b      	cmp	r3, r9
 8020a7c:	f6ff af75 	blt.w	802096a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020a80:	f11c 0901 	adds.w	r9, ip, #1
 8020a84:	f53f af71 	bmi.w	802096a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020a88:	45ce      	cmp	lr, r9
 8020a8a:	f6ff af6e 	blt.w	802096a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020a8e:	b21b      	sxth	r3, r3
 8020a90:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8020a94:	fa0f f28e 	sxth.w	r2, lr
 8020a98:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8020a9c:	9200      	str	r2, [sp, #0]
 8020a9e:	4639      	mov	r1, r7
 8020aa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020aa2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8020aa4:	f7ff fca1 	bl	80203ea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8020aa8:	e75f      	b.n	802096a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020aaa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020aac:	1429      	asrs	r1, r5, #16
 8020aae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020ab0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020ab4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8020ab8:	1433      	asrs	r3, r6, #16
 8020aba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020abe:	fb0c 1303 	mla	r3, ip, r3, r1
 8020ac2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020ac4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020ac8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020acc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020ad0:	2a00      	cmp	r2, #0
 8020ad2:	f000 8129 	beq.w	8020d28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8020ad6:	684c      	ldr	r4, [r1, #4]
 8020ad8:	940c      	str	r4, [sp, #48]	@ 0x30
 8020ada:	0e24      	lsrs	r4, r4, #24
 8020adc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8020ade:	b198      	cbz	r0, 8020b08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020ae0:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8020ae4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020ae8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020aec:	f10c 0c04 	add.w	ip, ip, #4
 8020af0:	eb01 080c 	add.w	r8, r1, ip
 8020af4:	f851 100c 	ldr.w	r1, [r1, ip]
 8020af8:	9108      	str	r1, [sp, #32]
 8020afa:	0e09      	lsrs	r1, r1, #24
 8020afc:	9110      	str	r1, [sp, #64]	@ 0x40
 8020afe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020b02:	910d      	str	r1, [sp, #52]	@ 0x34
 8020b04:	0e09      	lsrs	r1, r1, #24
 8020b06:	9114      	str	r1, [sp, #80]	@ 0x50
 8020b08:	b292      	uxth	r2, r2
 8020b0a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020b0c:	b280      	uxth	r0, r0
 8020b0e:	fb02 f900 	mul.w	r9, r2, r0
 8020b12:	0112      	lsls	r2, r2, #4
 8020b14:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020b18:	eba2 0809 	sub.w	r8, r2, r9
 8020b1c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020b20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020b22:	b280      	uxth	r0, r0
 8020b24:	fa1f f888 	uxth.w	r8, r8
 8020b28:	1a09      	subs	r1, r1, r0
 8020b2a:	fb08 f202 	mul.w	r2, r8, r2
 8020b2e:	b289      	uxth	r1, r1
 8020b30:	fb01 220e 	mla	r2, r1, lr, r2
 8020b34:	fb00 2204 	mla	r2, r0, r4, r2
 8020b38:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020b3a:	fb09 2204 	mla	r2, r9, r4, r2
 8020b3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020b42:	2a00      	cmp	r2, #0
 8020b44:	f000 80e8 	beq.w	8020d18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8020b48:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020b4c:	d01b      	beq.n	8020b86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8020b4e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020b52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020b56:	fb0e fa0a 	mul.w	sl, lr, sl
 8020b5a:	fb0e fe03 	mul.w	lr, lr, r3
 8020b5e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020b62:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020b66:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020b6a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020b6e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020b72:	4453      	add	r3, sl
 8020b74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b78:	0a1b      	lsrs	r3, r3, #8
 8020b7a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020b7e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020b82:	ea43 030c 	orr.w	r3, r3, ip
 8020b86:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020b88:	2cff      	cmp	r4, #255	@ 0xff
 8020b8a:	d021      	beq.n	8020bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8020b8c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020b8e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020b92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020b94:	fb04 fc0c 	mul.w	ip, r4, ip
 8020b98:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020b9a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020b9e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020ba2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020ba4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020ba8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020bac:	fb04 fa0a 	mul.w	sl, r4, sl
 8020bb0:	44e6      	add	lr, ip
 8020bb2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020bb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020bba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020bbe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020bc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020bc6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020bca:	ea4e 040a 	orr.w	r4, lr, sl
 8020bce:	940c      	str	r4, [sp, #48]	@ 0x30
 8020bd0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020bd2:	2cff      	cmp	r4, #255	@ 0xff
 8020bd4:	d021      	beq.n	8020c1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8020bd6:	9c08      	ldr	r4, [sp, #32]
 8020bd8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020bdc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020bde:	fb04 fc0c 	mul.w	ip, r4, ip
 8020be2:	9c08      	ldr	r4, [sp, #32]
 8020be4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020be8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020bea:	fb04 fa0e 	mul.w	sl, r4, lr
 8020bee:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020bf2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020bf6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020bfa:	44e6      	add	lr, ip
 8020bfc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020c00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020c04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020c10:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020c14:	ea4e 040a 	orr.w	r4, lr, sl
 8020c18:	9408      	str	r4, [sp, #32]
 8020c1a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020c1c:	2cff      	cmp	r4, #255	@ 0xff
 8020c1e:	d021      	beq.n	8020c64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8020c20:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020c22:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020c26:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020c28:	fb04 fc0c 	mul.w	ip, r4, ip
 8020c2c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020c2e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020c32:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020c36:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020c38:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020c3c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020c40:	fb04 fa0a 	mul.w	sl, r4, sl
 8020c44:	44e6      	add	lr, ip
 8020c46:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020c4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020c52:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020c56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c5a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020c5e:	ea4e 040a 	orr.w	r4, lr, sl
 8020c62:	940d      	str	r4, [sp, #52]	@ 0x34
 8020c64:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020c66:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8020c6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020c6e:	2aff      	cmp	r2, #255	@ 0xff
 8020c70:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020c74:	9c08      	ldr	r4, [sp, #32]
 8020c76:	fb08 fc0c 	mul.w	ip, r8, ip
 8020c7a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020c7e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020c82:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020c84:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020c88:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020c8c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020c8e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020c92:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020c96:	fb08 f80e 	mul.w	r8, r8, lr
 8020c9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c9e:	fb01 8303 	mla	r3, r1, r3, r8
 8020ca2:	9908      	ldr	r1, [sp, #32]
 8020ca4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020ca8:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8020cac:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020cae:	fb00 330a 	mla	r3, r0, sl, r3
 8020cb2:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8020cb6:	fb09 3e0e 	mla	lr, r9, lr, r3
 8020cba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020cbe:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8020cc2:	ea4c 0c0e 	orr.w	ip, ip, lr
 8020cc6:	fa5f f08c 	uxtb.w	r0, ip
 8020cca:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020cce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020cd2:	d032      	beq.n	8020d3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8020cd4:	43d2      	mvns	r2, r2
 8020cd6:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8020cda:	b2d2      	uxtb	r2, r2
 8020cdc:	fb0e fe02 	mul.w	lr, lr, r2
 8020ce0:	f10e 0301 	add.w	r3, lr, #1
 8020ce4:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8020ce8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020cec:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8020cf0:	4350      	muls	r0, r2
 8020cf2:	f807 3c03 	strb.w	r3, [r7, #-3]
 8020cf6:	1c43      	adds	r3, r0, #1
 8020cf8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020cfc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020d00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8020d04:	4353      	muls	r3, r2
 8020d06:	f807 1c02 	strb.w	r1, [r7, #-2]
 8020d0a:	1c5a      	adds	r2, r3, #1
 8020d0c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020d10:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8020d14:	f807 cc01 	strb.w	ip, [r7, #-1]
 8020d18:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020d1a:	3703      	adds	r7, #3
 8020d1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020d20:	441d      	add	r5, r3
 8020d22:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020d24:	441e      	add	r6, r3
 8020d26:	e64e      	b.n	80209c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8020d28:	2800      	cmp	r0, #0
 8020d2a:	f43f aeed 	beq.w	8020b08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020d2e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8020d32:	9108      	str	r1, [sp, #32]
 8020d34:	0e09      	lsrs	r1, r1, #24
 8020d36:	9110      	str	r1, [sp, #64]	@ 0x40
 8020d38:	e6e6      	b.n	8020b08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020d3a:	f807 0c03 	strb.w	r0, [r7, #-3]
 8020d3e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8020d42:	e7e7      	b.n	8020d14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8020d44:	b019      	add	sp, #100	@ 0x64
 8020d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020d4c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8020d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d50:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8020d54:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8020d58:	2c00      	cmp	r4, #0
 8020d5a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8020d5e:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8020d62:	fb00 4e03 	mla	lr, r0, r3, r4
 8020d66:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8020d6a:	f2c0 80b8 	blt.w	8020ede <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020d6e:	45a1      	cmp	r9, r4
 8020d70:	f340 80b5 	ble.w	8020ede <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020d74:	2800      	cmp	r0, #0
 8020d76:	f2c0 80b2 	blt.w	8020ede <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020d7a:	4580      	cmp	r8, r0
 8020d7c:	f340 80af 	ble.w	8020ede <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020d80:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8020d84:	f01e 0f01 	tst.w	lr, #1
 8020d88:	5d56      	ldrb	r6, [r2, r5]
 8020d8a:	bf0c      	ite	eq
 8020d8c:	f006 060f 	andeq.w	r6, r6, #15
 8020d90:	1136      	asrne	r6, r6, #4
 8020d92:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020d96:	b2f6      	uxtb	r6, r6
 8020d98:	f114 0a01 	adds.w	sl, r4, #1
 8020d9c:	f100 80a1 	bmi.w	8020ee2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020da0:	45d1      	cmp	r9, sl
 8020da2:	f340 809e 	ble.w	8020ee2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020da6:	2800      	cmp	r0, #0
 8020da8:	f2c0 809b 	blt.w	8020ee2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020dac:	4580      	cmp	r8, r0
 8020dae:	f340 8098 	ble.w	8020ee2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020db2:	2f00      	cmp	r7, #0
 8020db4:	f000 8097 	beq.w	8020ee6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8020db8:	f10e 0b01 	add.w	fp, lr, #1
 8020dbc:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020dc0:	f01b 0f01 	tst.w	fp, #1
 8020dc4:	5d55      	ldrb	r5, [r2, r5]
 8020dc6:	bf0c      	ite	eq
 8020dc8:	f005 050f 	andeq.w	r5, r5, #15
 8020dcc:	112d      	asrne	r5, r5, #4
 8020dce:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020dd2:	b2ed      	uxtb	r5, r5
 8020dd4:	f1bc 0f00 	cmp.w	ip, #0
 8020dd8:	f000 8089 	beq.w	8020eee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8020ddc:	2c00      	cmp	r4, #0
 8020dde:	f100 0001 	add.w	r0, r0, #1
 8020de2:	f2c0 8082 	blt.w	8020eea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020de6:	45a1      	cmp	r9, r4
 8020de8:	dd7f      	ble.n	8020eea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020dea:	2800      	cmp	r0, #0
 8020dec:	db7d      	blt.n	8020eea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020dee:	4580      	cmp	r8, r0
 8020df0:	dd7b      	ble.n	8020eea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020df2:	eb03 0b0e 	add.w	fp, r3, lr
 8020df6:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020dfa:	f01b 0f01 	tst.w	fp, #1
 8020dfe:	5d14      	ldrb	r4, [r2, r4]
 8020e00:	bf0c      	ite	eq
 8020e02:	f004 040f 	andeq.w	r4, r4, #15
 8020e06:	1124      	asrne	r4, r4, #4
 8020e08:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020e0c:	b2e4      	uxtb	r4, r4
 8020e0e:	f1ba 0f00 	cmp.w	sl, #0
 8020e12:	db6f      	blt.n	8020ef4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020e14:	45d1      	cmp	r9, sl
 8020e16:	dd6d      	ble.n	8020ef4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020e18:	2800      	cmp	r0, #0
 8020e1a:	db6b      	blt.n	8020ef4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020e1c:	4580      	cmp	r8, r0
 8020e1e:	dd69      	ble.n	8020ef4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020e20:	2f00      	cmp	r7, #0
 8020e22:	d069      	beq.n	8020ef8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8020e24:	3301      	adds	r3, #1
 8020e26:	449e      	add	lr, r3
 8020e28:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020e2c:	f01e 0f01 	tst.w	lr, #1
 8020e30:	5cd0      	ldrb	r0, [r2, r3]
 8020e32:	bf0c      	ite	eq
 8020e34:	f000 000f 	andeq.w	r0, r0, #15
 8020e38:	1100      	asrne	r0, r0, #4
 8020e3a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020e3e:	b2c3      	uxtb	r3, r0
 8020e40:	b2ba      	uxth	r2, r7
 8020e42:	fa1f fc8c 	uxth.w	ip, ip
 8020e46:	fb02 f00c 	mul.w	r0, r2, ip
 8020e4a:	0112      	lsls	r2, r2, #4
 8020e4c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8020e50:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8020e54:	1a12      	subs	r2, r2, r0
 8020e56:	fa1f fc8c 	uxth.w	ip, ip
 8020e5a:	b292      	uxth	r2, r2
 8020e5c:	eba7 070c 	sub.w	r7, r7, ip
 8020e60:	436a      	muls	r2, r5
 8020e62:	b2bf      	uxth	r7, r7
 8020e64:	fb06 2207 	mla	r2, r6, r7, r2
 8020e68:	fb0c 2404 	mla	r4, ip, r4, r2
 8020e6c:	fb00 4303 	mla	r3, r0, r3, r4
 8020e70:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020e74:	b38b      	cbz	r3, 8020eda <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8020e76:	4a21      	ldr	r2, [pc, #132]	@ (8020efc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8020e78:	6814      	ldr	r4, [r2, #0]
 8020e7a:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8020e7e:	b2e5      	uxtb	r5, r4
 8020e80:	4353      	muls	r3, r2
 8020e82:	1c5a      	adds	r2, r3, #1
 8020e84:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020e88:	1212      	asrs	r2, r2, #8
 8020e8a:	b290      	uxth	r0, r2
 8020e8c:	43d2      	mvns	r2, r2
 8020e8e:	fb15 f500 	smulbb	r5, r5, r0
 8020e92:	b2d3      	uxtb	r3, r2
 8020e94:	780a      	ldrb	r2, [r1, #0]
 8020e96:	fb02 5203 	mla	r2, r2, r3, r5
 8020e9a:	b292      	uxth	r2, r2
 8020e9c:	1c55      	adds	r5, r2, #1
 8020e9e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020ea2:	784d      	ldrb	r5, [r1, #1]
 8020ea4:	fb15 f503 	smulbb	r5, r5, r3
 8020ea8:	1212      	asrs	r2, r2, #8
 8020eaa:	700a      	strb	r2, [r1, #0]
 8020eac:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020eb0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020eb4:	fb02 5200 	mla	r2, r2, r0, r5
 8020eb8:	b292      	uxth	r2, r2
 8020eba:	1c55      	adds	r5, r2, #1
 8020ebc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020ec0:	1212      	asrs	r2, r2, #8
 8020ec2:	704a      	strb	r2, [r1, #1]
 8020ec4:	788a      	ldrb	r2, [r1, #2]
 8020ec6:	fb12 f303 	smulbb	r3, r2, r3
 8020eca:	fb04 3300 	mla	r3, r4, r0, r3
 8020ece:	b29b      	uxth	r3, r3
 8020ed0:	1c5a      	adds	r2, r3, #1
 8020ed2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020ed6:	121b      	asrs	r3, r3, #8
 8020ed8:	708b      	strb	r3, [r1, #2]
 8020eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ede:	2600      	movs	r6, #0
 8020ee0:	e75a      	b.n	8020d98 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8020ee2:	2500      	movs	r5, #0
 8020ee4:	e776      	b.n	8020dd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020ee6:	463d      	mov	r5, r7
 8020ee8:	e774      	b.n	8020dd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020eea:	2400      	movs	r4, #0
 8020eec:	e78f      	b.n	8020e0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8020eee:	4663      	mov	r3, ip
 8020ef0:	4664      	mov	r4, ip
 8020ef2:	e7a5      	b.n	8020e40 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020ef4:	2300      	movs	r3, #0
 8020ef6:	e7a3      	b.n	8020e40 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020ef8:	463b      	mov	r3, r7
 8020efa:	e7a1      	b.n	8020e40 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020efc:	2402530c 	.word	0x2402530c

08020f00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f04:	b097      	sub	sp, #92	@ 0x5c
 8020f06:	9214      	str	r2, [sp, #80]	@ 0x50
 8020f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f0a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020f0c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020f10:	9015      	str	r0, [sp, #84]	@ 0x54
 8020f12:	910c      	str	r1, [sp, #48]	@ 0x30
 8020f14:	6850      	ldr	r0, [r2, #4]
 8020f16:	930e      	str	r3, [sp, #56]	@ 0x38
 8020f18:	6812      	ldr	r2, [r2, #0]
 8020f1a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8020f1e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8020f22:	fb00 1303 	mla	r3, r0, r3, r1
 8020f26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f2a:	eb02 0a03 	add.w	sl, r2, r3
 8020f2e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020f30:	689b      	ldr	r3, [r3, #8]
 8020f32:	3301      	adds	r3, #1
 8020f34:	f023 0301 	bic.w	r3, r3, #1
 8020f38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020f3a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020f3c:	681f      	ldr	r7, [r3, #0]
 8020f3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	dc03      	bgt.n	8020f4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020f44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	f340 8247 	ble.w	80213da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020f4c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020f4e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020f52:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020f56:	1e48      	subs	r0, r1, #1
 8020f58:	f102 3cff 	add.w	ip, r2, #4294967295
 8020f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f5e:	2b00      	cmp	r3, #0
 8020f60:	f340 80e5 	ble.w	802112e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020f64:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8020f68:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020f6c:	d406      	bmi.n	8020f7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020f6e:	4586      	cmp	lr, r0
 8020f70:	da04      	bge.n	8020f7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	db02      	blt.n	8020f7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020f76:	4563      	cmp	r3, ip
 8020f78:	f2c0 80da 	blt.w	8021130 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020f7c:	f11e 0e01 	adds.w	lr, lr, #1
 8020f80:	f100 80cb 	bmi.w	802111a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020f84:	4571      	cmp	r1, lr
 8020f86:	f2c0 80c8 	blt.w	802111a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020f8a:	3301      	adds	r3, #1
 8020f8c:	f100 80c5 	bmi.w	802111a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020f90:	429a      	cmp	r2, r3
 8020f92:	f2c0 80c2 	blt.w	802111a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f98:	46d0      	mov	r8, sl
 8020f9a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8020f9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020fa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	f340 80e3 	ble.w	802116e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020fa8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020faa:	1430      	asrs	r0, r6, #16
 8020fac:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020fb0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020fb4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020fb8:	142b      	asrs	r3, r5, #16
 8020fba:	f100 812e 	bmi.w	802121a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020fbe:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020fc2:	455b      	cmp	r3, fp
 8020fc4:	f280 8129 	bge.w	802121a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020fc8:	2800      	cmp	r0, #0
 8020fca:	f2c0 8126 	blt.w	802121a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020fce:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020fd2:	4558      	cmp	r0, fp
 8020fd4:	f280 8121 	bge.w	802121a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020fd8:	fb00 3309 	mla	r3, r0, r9, r3
 8020fdc:	0858      	lsrs	r0, r3, #1
 8020fde:	07dc      	lsls	r4, r3, #31
 8020fe0:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020fe4:	bf54      	ite	pl
 8020fe6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020fea:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020fee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020ff2:	fa5f fc8c 	uxtb.w	ip, ip
 8020ff6:	2a00      	cmp	r2, #0
 8020ff8:	f000 80fe 	beq.w	80211f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020ffc:	1c58      	adds	r0, r3, #1
 8020ffe:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021002:	07c0      	lsls	r0, r0, #31
 8021004:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021008:	bf54      	ite	pl
 802100a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802100e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021012:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021016:	fa5f f08e 	uxtb.w	r0, lr
 802101a:	9010      	str	r0, [sp, #64]	@ 0x40
 802101c:	b1d9      	cbz	r1, 8021056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802101e:	444b      	add	r3, r9
 8021020:	0858      	lsrs	r0, r3, #1
 8021022:	07dc      	lsls	r4, r3, #31
 8021024:	f103 0301 	add.w	r3, r3, #1
 8021028:	5c38      	ldrb	r0, [r7, r0]
 802102a:	bf54      	ite	pl
 802102c:	f000 000f 	andpl.w	r0, r0, #15
 8021030:	1100      	asrmi	r0, r0, #4
 8021032:	07dc      	lsls	r4, r3, #31
 8021034:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021038:	b2c0      	uxtb	r0, r0
 802103a:	900a      	str	r0, [sp, #40]	@ 0x28
 802103c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8021040:	f817 e000 	ldrb.w	lr, [r7, r0]
 8021044:	bf54      	ite	pl
 8021046:	f00e 030f 	andpl.w	r3, lr, #15
 802104a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802104e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021052:	b2db      	uxtb	r3, r3
 8021054:	9311      	str	r3, [sp, #68]	@ 0x44
 8021056:	b292      	uxth	r2, r2
 8021058:	b289      	uxth	r1, r1
 802105a:	0113      	lsls	r3, r2, #4
 802105c:	fb02 f001 	mul.w	r0, r2, r1
 8021060:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021062:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8021066:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802106a:	1a1b      	subs	r3, r3, r0
 802106c:	b289      	uxth	r1, r1
 802106e:	b29b      	uxth	r3, r3
 8021070:	ebae 0e01 	sub.w	lr, lr, r1
 8021074:	4353      	muls	r3, r2
 8021076:	fa1f fe8e 	uxth.w	lr, lr
 802107a:	fb0c 320e 	mla	r2, ip, lr, r3
 802107e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021080:	fb01 2203 	mla	r2, r1, r3, r2
 8021084:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021086:	fb00 2203 	mla	r2, r0, r3, r2
 802108a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802108e:	2a00      	cmp	r2, #0
 8021090:	d039      	beq.n	8021106 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021092:	4bc7      	ldr	r3, [pc, #796]	@ (80213b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021094:	6819      	ldr	r1, [r3, #0]
 8021096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021098:	fa5f fc81 	uxtb.w	ip, r1
 802109c:	435a      	muls	r2, r3
 802109e:	1c53      	adds	r3, r2, #1
 80210a0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80210a4:	1212      	asrs	r2, r2, #8
 80210a6:	b290      	uxth	r0, r2
 80210a8:	43d2      	mvns	r2, r2
 80210aa:	fb1c fc00 	smulbb	ip, ip, r0
 80210ae:	b2d3      	uxtb	r3, r2
 80210b0:	f898 2000 	ldrb.w	r2, [r8]
 80210b4:	fb02 c203 	mla	r2, r2, r3, ip
 80210b8:	b292      	uxth	r2, r2
 80210ba:	f102 0c01 	add.w	ip, r2, #1
 80210be:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80210c2:	f898 c001 	ldrb.w	ip, [r8, #1]
 80210c6:	fb1c fc03 	smulbb	ip, ip, r3
 80210ca:	1212      	asrs	r2, r2, #8
 80210cc:	f888 2000 	strb.w	r2, [r8]
 80210d0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80210d4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80210d8:	fb02 c200 	mla	r2, r2, r0, ip
 80210dc:	b292      	uxth	r2, r2
 80210de:	f102 0c01 	add.w	ip, r2, #1
 80210e2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80210e6:	1212      	asrs	r2, r2, #8
 80210e8:	f888 2001 	strb.w	r2, [r8, #1]
 80210ec:	f898 2002 	ldrb.w	r2, [r8, #2]
 80210f0:	fb12 f303 	smulbb	r3, r2, r3
 80210f4:	fb01 3300 	mla	r3, r1, r0, r3
 80210f8:	b29b      	uxth	r3, r3
 80210fa:	1c5a      	adds	r2, r3, #1
 80210fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021100:	121b      	asrs	r3, r3, #8
 8021102:	f888 3002 	strb.w	r3, [r8, #2]
 8021106:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8021108:	f108 0803 	add.w	r8, r8, #3
 802110c:	441d      	add	r5, r3
 802110e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021110:	441e      	add	r6, r3
 8021112:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021114:	3b01      	subs	r3, #1
 8021116:	930d      	str	r3, [sp, #52]	@ 0x34
 8021118:	e742      	b.n	8020fa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802111a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802111c:	f10a 0a03 	add.w	sl, sl, #3
 8021120:	441d      	add	r5, r3
 8021122:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021124:	441e      	add	r6, r3
 8021126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021128:	3b01      	subs	r3, #1
 802112a:	9309      	str	r3, [sp, #36]	@ 0x24
 802112c:	e716      	b.n	8020f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802112e:	d024      	beq.n	802117a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021132:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8021134:	3b01      	subs	r3, #1
 8021136:	fb00 5003 	mla	r0, r0, r3, r5
 802113a:	1400      	asrs	r0, r0, #16
 802113c:	f53f af2b 	bmi.w	8020f96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021140:	3901      	subs	r1, #1
 8021142:	4288      	cmp	r0, r1
 8021144:	f6bf af27 	bge.w	8020f96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021148:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802114a:	fb01 6303 	mla	r3, r1, r3, r6
 802114e:	141b      	asrs	r3, r3, #16
 8021150:	f53f af21 	bmi.w	8020f96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021154:	3a01      	subs	r2, #1
 8021156:	4293      	cmp	r3, r2
 8021158:	f6bf af1d 	bge.w	8020f96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802115c:	f10a 0e03 	add.w	lr, sl, #3
 8021160:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8021164:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8021168:	f1b8 0f00 	cmp.w	r8, #0
 802116c:	dc76      	bgt.n	802125c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 802116e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021170:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021174:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021178:	44a2      	add	sl, r4
 802117a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802117c:	2b00      	cmp	r3, #0
 802117e:	f340 812c 	ble.w	80213da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8021182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021186:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021188:	ee30 0a04 	vadd.f32	s0, s0, s8
 802118c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021190:	eef0 6a62 	vmov.f32	s13, s5
 8021194:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021198:	ee31 1a05 	vadd.f32	s2, s2, s10
 802119c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211a0:	ee16 5a90 	vmov	r5, s13
 80211a4:	eef0 6a43 	vmov.f32	s13, s6
 80211a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211ac:	ee16 6a90 	vmov	r6, s13
 80211b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80211b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80211b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80211bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80211c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80211c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80211c8:	ee12 2a90 	vmov	r2, s5
 80211cc:	eef0 2a47 	vmov.f32	s5, s14
 80211d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80211d4:	ee13 2a10 	vmov	r2, s6
 80211d8:	9323      	str	r3, [sp, #140]	@ 0x8c
 80211da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80211dc:	eeb0 3a67 	vmov.f32	s6, s15
 80211e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80211e4:	9324      	str	r3, [sp, #144]	@ 0x90
 80211e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80211e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80211ea:	3b01      	subs	r3, #1
 80211ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80211ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80211f0:	bf08      	it	eq
 80211f2:	4613      	moveq	r3, r2
 80211f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80211f6:	e6a2      	b.n	8020f3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80211f8:	2900      	cmp	r1, #0
 80211fa:	f43f af2c 	beq.w	8021056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80211fe:	eb09 0003 	add.w	r0, r9, r3
 8021202:	0843      	lsrs	r3, r0, #1
 8021204:	07c0      	lsls	r0, r0, #31
 8021206:	5cfb      	ldrb	r3, [r7, r3]
 8021208:	bf54      	ite	pl
 802120a:	f003 030f 	andpl.w	r3, r3, #15
 802120e:	111b      	asrmi	r3, r3, #4
 8021210:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021214:	b2db      	uxtb	r3, r3
 8021216:	930a      	str	r3, [sp, #40]	@ 0x28
 8021218:	e71d      	b.n	8021056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802121a:	f113 0b01 	adds.w	fp, r3, #1
 802121e:	f53f af72 	bmi.w	8021106 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021222:	45dc      	cmp	ip, fp
 8021224:	f6ff af6f 	blt.w	8021106 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021228:	f110 0b01 	adds.w	fp, r0, #1
 802122c:	f53f af6b 	bmi.w	8021106 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021230:	45de      	cmp	lr, fp
 8021232:	f6ff af68 	blt.w	8021106 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021236:	9302      	str	r3, [sp, #8]
 8021238:	fa0f f38e 	sxth.w	r3, lr
 802123c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802123e:	9301      	str	r3, [sp, #4]
 8021240:	fa0f f38c 	sxth.w	r3, ip
 8021244:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021248:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802124c:	9300      	str	r3, [sp, #0]
 802124e:	463a      	mov	r2, r7
 8021250:	464b      	mov	r3, r9
 8021252:	4641      	mov	r1, r8
 8021254:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021256:	f7ff fd79 	bl	8020d4c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802125a:	e754      	b.n	8021106 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802125c:	142a      	asrs	r2, r5, #16
 802125e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021262:	1433      	asrs	r3, r6, #16
 8021264:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021268:	fb09 2303 	mla	r3, r9, r3, r2
 802126c:	085a      	lsrs	r2, r3, #1
 802126e:	07dc      	lsls	r4, r3, #31
 8021270:	5cba      	ldrb	r2, [r7, r2]
 8021272:	bf54      	ite	pl
 8021274:	f002 020f 	andpl.w	r2, r2, #15
 8021278:	1112      	asrmi	r2, r2, #4
 802127a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802127e:	b2d2      	uxtb	r2, r2
 8021280:	2900      	cmp	r1, #0
 8021282:	f000 8097 	beq.w	80213b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021286:	f103 0b01 	add.w	fp, r3, #1
 802128a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802128e:	f01b 0f01 	tst.w	fp, #1
 8021292:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021296:	bf0c      	ite	eq
 8021298:	f00c 0c0f 	andeq.w	ip, ip, #15
 802129c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80212a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80212a4:	fa5f f48c 	uxtb.w	r4, ip
 80212a8:	9412      	str	r4, [sp, #72]	@ 0x48
 80212aa:	b300      	cbz	r0, 80212ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80212ac:	444b      	add	r3, r9
 80212ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80212b2:	07dc      	lsls	r4, r3, #31
 80212b4:	f103 0301 	add.w	r3, r3, #1
 80212b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80212bc:	bf54      	ite	pl
 80212be:	f00c 0c0f 	andpl.w	ip, ip, #15
 80212c2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80212c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80212ca:	fa5f f48c 	uxtb.w	r4, ip
 80212ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80212d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80212d4:	07dc      	lsls	r4, r3, #31
 80212d6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80212da:	bf54      	ite	pl
 80212dc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80212e0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80212e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80212e8:	fa5f f38c 	uxtb.w	r3, ip
 80212ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80212ee:	b289      	uxth	r1, r1
 80212f0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80212f2:	b280      	uxth	r0, r0
 80212f4:	fb01 f300 	mul.w	r3, r1, r0
 80212f8:	0109      	lsls	r1, r1, #4
 80212fa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80212fe:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8021302:	1ac9      	subs	r1, r1, r3
 8021304:	b280      	uxth	r0, r0
 8021306:	b289      	uxth	r1, r1
 8021308:	ebac 0c00 	sub.w	ip, ip, r0
 802130c:	4361      	muls	r1, r4
 802130e:	fa1f fc8c 	uxth.w	ip, ip
 8021312:	fb02 120c 	mla	r2, r2, ip, r1
 8021316:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021318:	fb00 2001 	mla	r0, r0, r1, r2
 802131c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802131e:	fb03 0302 	mla	r3, r3, r2, r0
 8021322:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021326:	2b00      	cmp	r3, #0
 8021328:	d039      	beq.n	802139e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802132a:	4a21      	ldr	r2, [pc, #132]	@ (80213b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802132c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8021330:	6810      	ldr	r0, [r2, #0]
 8021332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021334:	fa5f fc80 	uxtb.w	ip, r0
 8021338:	4353      	muls	r3, r2
 802133a:	1c5a      	adds	r2, r3, #1
 802133c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021340:	121b      	asrs	r3, r3, #8
 8021342:	b29a      	uxth	r2, r3
 8021344:	43db      	mvns	r3, r3
 8021346:	fb1c fc02 	smulbb	ip, ip, r2
 802134a:	b2db      	uxtb	r3, r3
 802134c:	fb01 c103 	mla	r1, r1, r3, ip
 8021350:	b289      	uxth	r1, r1
 8021352:	f101 0c01 	add.w	ip, r1, #1
 8021356:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802135a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802135e:	fb1c fc03 	smulbb	ip, ip, r3
 8021362:	1209      	asrs	r1, r1, #8
 8021364:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8021368:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802136c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8021370:	fb01 c102 	mla	r1, r1, r2, ip
 8021374:	b289      	uxth	r1, r1
 8021376:	f101 0c01 	add.w	ip, r1, #1
 802137a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802137e:	1209      	asrs	r1, r1, #8
 8021380:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021384:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8021388:	fb11 f303 	smulbb	r3, r1, r3
 802138c:	fb00 3002 	mla	r0, r0, r2, r3
 8021390:	b280      	uxth	r0, r0
 8021392:	1c42      	adds	r2, r0, #1
 8021394:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021398:	1200      	asrs	r0, r0, #8
 802139a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802139e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80213a0:	f10e 0e03 	add.w	lr, lr, #3
 80213a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80213a8:	441d      	add	r5, r3
 80213aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80213ac:	441e      	add	r6, r3
 80213ae:	e6db      	b.n	8021168 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80213b0:	2402530c 	.word	0x2402530c
 80213b4:	2800      	cmp	r0, #0
 80213b6:	d09a      	beq.n	80212ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80213b8:	444b      	add	r3, r9
 80213ba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80213be:	07db      	lsls	r3, r3, #31
 80213c0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80213c4:	bf54      	ite	pl
 80213c6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80213ca:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80213ce:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80213d2:	fa5f f38c 	uxtb.w	r3, ip
 80213d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80213d8:	e789      	b.n	80212ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80213da:	b017      	add	sp, #92	@ 0x5c
 80213dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080213e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80213e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213e4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 80213e8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80213ec:	2d00      	cmp	r5, #0
 80213ee:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80213f2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80213f6:	fb04 5e03 	mla	lr, r4, r3, r5
 80213fa:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80213fe:	f2c0 80b1 	blt.w	8021564 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021402:	45a9      	cmp	r9, r5
 8021404:	f340 80ae 	ble.w	8021564 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021408:	2c00      	cmp	r4, #0
 802140a:	f2c0 80ab 	blt.w	8021564 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802140e:	45a0      	cmp	r8, r4
 8021410:	f340 80a8 	ble.w	8021564 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021414:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8021418:	f01e 0f01 	tst.w	lr, #1
 802141c:	5d97      	ldrb	r7, [r2, r6]
 802141e:	bf0c      	ite	eq
 8021420:	f007 070f 	andeq.w	r7, r7, #15
 8021424:	113f      	asrne	r7, r7, #4
 8021426:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802142a:	b2ff      	uxtb	r7, r7
 802142c:	f115 0a01 	adds.w	sl, r5, #1
 8021430:	f100 809a 	bmi.w	8021568 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021434:	45d1      	cmp	r9, sl
 8021436:	f340 8097 	ble.w	8021568 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802143a:	2c00      	cmp	r4, #0
 802143c:	f2c0 8094 	blt.w	8021568 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021440:	45a0      	cmp	r8, r4
 8021442:	f340 8091 	ble.w	8021568 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021446:	2800      	cmp	r0, #0
 8021448:	f000 8090 	beq.w	802156c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 802144c:	f10e 0b01 	add.w	fp, lr, #1
 8021450:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8021454:	f01b 0f01 	tst.w	fp, #1
 8021458:	5d96      	ldrb	r6, [r2, r6]
 802145a:	bf0c      	ite	eq
 802145c:	f006 060f 	andeq.w	r6, r6, #15
 8021460:	1136      	asrne	r6, r6, #4
 8021462:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021466:	b2f6      	uxtb	r6, r6
 8021468:	f1bc 0f00 	cmp.w	ip, #0
 802146c:	f000 8082 	beq.w	8021574 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8021470:	2d00      	cmp	r5, #0
 8021472:	f104 0401 	add.w	r4, r4, #1
 8021476:	db7b      	blt.n	8021570 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021478:	45a9      	cmp	r9, r5
 802147a:	dd79      	ble.n	8021570 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802147c:	2c00      	cmp	r4, #0
 802147e:	db77      	blt.n	8021570 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021480:	45a0      	cmp	r8, r4
 8021482:	dd75      	ble.n	8021570 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021484:	eb03 0b0e 	add.w	fp, r3, lr
 8021488:	ea4f 055b 	mov.w	r5, fp, lsr #1
 802148c:	f01b 0f01 	tst.w	fp, #1
 8021490:	5d55      	ldrb	r5, [r2, r5]
 8021492:	bf0c      	ite	eq
 8021494:	f005 050f 	andeq.w	r5, r5, #15
 8021498:	112d      	asrne	r5, r5, #4
 802149a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802149e:	b2ed      	uxtb	r5, r5
 80214a0:	f1ba 0f00 	cmp.w	sl, #0
 80214a4:	db69      	blt.n	802157a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80214a6:	45d1      	cmp	r9, sl
 80214a8:	dd67      	ble.n	802157a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80214aa:	2c00      	cmp	r4, #0
 80214ac:	db65      	blt.n	802157a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80214ae:	45a0      	cmp	r8, r4
 80214b0:	dd63      	ble.n	802157a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80214b2:	2800      	cmp	r0, #0
 80214b4:	d063      	beq.n	802157e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80214b6:	3301      	adds	r3, #1
 80214b8:	449e      	add	lr, r3
 80214ba:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80214be:	f01e 0f01 	tst.w	lr, #1
 80214c2:	5cd4      	ldrb	r4, [r2, r3]
 80214c4:	bf0c      	ite	eq
 80214c6:	f004 040f 	andeq.w	r4, r4, #15
 80214ca:	1124      	asrne	r4, r4, #4
 80214cc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80214d0:	b2e3      	uxtb	r3, r4
 80214d2:	b282      	uxth	r2, r0
 80214d4:	fa1f fc8c 	uxth.w	ip, ip
 80214d8:	fb02 f40c 	mul.w	r4, r2, ip
 80214dc:	0112      	lsls	r2, r2, #4
 80214de:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80214e2:	fa1f f08c 	uxth.w	r0, ip
 80214e6:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 80214ea:	1b12      	subs	r2, r2, r4
 80214ec:	ebac 0c00 	sub.w	ip, ip, r0
 80214f0:	b292      	uxth	r2, r2
 80214f2:	fa1f fc8c 	uxth.w	ip, ip
 80214f6:	4372      	muls	r2, r6
 80214f8:	fb07 220c 	mla	r2, r7, ip, r2
 80214fc:	fb00 2005 	mla	r0, r0, r5, r2
 8021500:	fb04 0303 	mla	r3, r4, r3, r0
 8021504:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021508:	b353      	cbz	r3, 8021560 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802150a:	4a1e      	ldr	r2, [pc, #120]	@ (8021584 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 802150c:	7808      	ldrb	r0, [r1, #0]
 802150e:	6814      	ldr	r4, [r2, #0]
 8021510:	b29a      	uxth	r2, r3
 8021512:	43db      	mvns	r3, r3
 8021514:	b2e5      	uxtb	r5, r4
 8021516:	b2db      	uxtb	r3, r3
 8021518:	fb15 f502 	smulbb	r5, r5, r2
 802151c:	fb00 5003 	mla	r0, r0, r3, r5
 8021520:	b280      	uxth	r0, r0
 8021522:	1c45      	adds	r5, r0, #1
 8021524:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021528:	784d      	ldrb	r5, [r1, #1]
 802152a:	fb15 f503 	smulbb	r5, r5, r3
 802152e:	1200      	asrs	r0, r0, #8
 8021530:	7008      	strb	r0, [r1, #0]
 8021532:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8021536:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802153a:	fb00 5002 	mla	r0, r0, r2, r5
 802153e:	b280      	uxth	r0, r0
 8021540:	1c45      	adds	r5, r0, #1
 8021542:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021546:	1200      	asrs	r0, r0, #8
 8021548:	7048      	strb	r0, [r1, #1]
 802154a:	7888      	ldrb	r0, [r1, #2]
 802154c:	fb10 f303 	smulbb	r3, r0, r3
 8021550:	fb04 3202 	mla	r2, r4, r2, r3
 8021554:	b292      	uxth	r2, r2
 8021556:	1c53      	adds	r3, r2, #1
 8021558:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802155c:	1212      	asrs	r2, r2, #8
 802155e:	708a      	strb	r2, [r1, #2]
 8021560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021564:	2700      	movs	r7, #0
 8021566:	e761      	b.n	802142c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8021568:	2600      	movs	r6, #0
 802156a:	e77d      	b.n	8021468 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802156c:	4606      	mov	r6, r0
 802156e:	e77b      	b.n	8021468 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8021570:	2500      	movs	r5, #0
 8021572:	e795      	b.n	80214a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8021574:	4663      	mov	r3, ip
 8021576:	4665      	mov	r5, ip
 8021578:	e7ab      	b.n	80214d2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802157a:	2300      	movs	r3, #0
 802157c:	e7a9      	b.n	80214d2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802157e:	4603      	mov	r3, r0
 8021580:	e7a7      	b.n	80214d2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8021582:	bf00      	nop
 8021584:	2402530c 	.word	0x2402530c

08021588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802158c:	b093      	sub	sp, #76	@ 0x4c
 802158e:	461c      	mov	r4, r3
 8021590:	920c      	str	r2, [sp, #48]	@ 0x30
 8021592:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021594:	9011      	str	r0, [sp, #68]	@ 0x44
 8021596:	9107      	str	r1, [sp, #28]
 8021598:	6850      	ldr	r0, [r2, #4]
 802159a:	6812      	ldr	r2, [r2, #0]
 802159c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80215a0:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80215a4:	fb00 1303 	mla	r3, r0, r3, r1
 80215a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80215ac:	eb02 0b03 	add.w	fp, r2, r3
 80215b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215b2:	689b      	ldr	r3, [r3, #8]
 80215b4:	3301      	adds	r3, #1
 80215b6:	f023 0301 	bic.w	r3, r3, #1
 80215ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80215bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215be:	f8d3 8000 	ldr.w	r8, [r3]
 80215c2:	9b07      	ldr	r3, [sp, #28]
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	dc03      	bgt.n	80215d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80215c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	f340 822b 	ble.w	8021a26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80215d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80215d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80215da:	1e48      	subs	r0, r1, #1
 80215dc:	1e57      	subs	r7, r2, #1
 80215de:	2c00      	cmp	r4, #0
 80215e0:	f340 80d7 	ble.w	8021792 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80215e4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80215e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80215ec:	d406      	bmi.n	80215fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80215ee:	4584      	cmp	ip, r0
 80215f0:	da04      	bge.n	80215fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	db02      	blt.n	80215fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80215f6:	42bb      	cmp	r3, r7
 80215f8:	f2c0 80cc 	blt.w	8021794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80215fc:	f11c 0c01 	adds.w	ip, ip, #1
 8021600:	f100 80bf 	bmi.w	8021782 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021604:	4561      	cmp	r1, ip
 8021606:	f2c0 80bc 	blt.w	8021782 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802160a:	3301      	adds	r3, #1
 802160c:	f100 80b9 	bmi.w	8021782 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021610:	429a      	cmp	r2, r3
 8021612:	f2c0 80b6 	blt.w	8021782 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021616:	46a2      	mov	sl, r4
 8021618:	465f      	mov	r7, fp
 802161a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802161e:	f1ba 0f00 	cmp.w	sl, #0
 8021622:	f340 80d4 	ble.w	80217ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8021626:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802162a:	1430      	asrs	r0, r6, #16
 802162c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021630:	9308      	str	r3, [sp, #32]
 8021632:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021634:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021638:	142b      	asrs	r3, r5, #16
 802163a:	f100 8124 	bmi.w	8021886 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802163e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8021642:	4293      	cmp	r3, r2
 8021644:	f280 811f 	bge.w	8021886 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021648:	2800      	cmp	r0, #0
 802164a:	f2c0 811c 	blt.w	8021886 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802164e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8021652:	4290      	cmp	r0, r2
 8021654:	f280 8117 	bge.w	8021886 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021658:	fb00 3309 	mla	r3, r0, r9, r3
 802165c:	0858      	lsrs	r0, r3, #1
 802165e:	07da      	lsls	r2, r3, #31
 8021660:	9a08      	ldr	r2, [sp, #32]
 8021662:	f818 c000 	ldrb.w	ip, [r8, r0]
 8021666:	bf54      	ite	pl
 8021668:	f00c 0c0f 	andpl.w	ip, ip, #15
 802166c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021670:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021674:	fa5f fc8c 	uxtb.w	ip, ip
 8021678:	2a00      	cmp	r2, #0
 802167a:	f000 80ed 	beq.w	8021858 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802167e:	1c58      	adds	r0, r3, #1
 8021680:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021684:	07c0      	lsls	r0, r0, #31
 8021686:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802168a:	bf54      	ite	pl
 802168c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021690:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021694:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021698:	fa5f fe8e 	uxtb.w	lr, lr
 802169c:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 80216a0:	b1c9      	cbz	r1, 80216d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80216a2:	444b      	add	r3, r9
 80216a4:	0858      	lsrs	r0, r3, #1
 80216a6:	07da      	lsls	r2, r3, #31
 80216a8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80216ac:	bf54      	ite	pl
 80216ae:	f000 000f 	andpl.w	r0, r0, #15
 80216b2:	1100      	asrmi	r0, r0, #4
 80216b4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80216b8:	b2c0      	uxtb	r0, r0
 80216ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80216bc:	1c58      	adds	r0, r3, #1
 80216be:	0843      	lsrs	r3, r0, #1
 80216c0:	07c2      	lsls	r2, r0, #31
 80216c2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80216c6:	bf54      	ite	pl
 80216c8:	f003 030f 	andpl.w	r3, r3, #15
 80216cc:	111b      	asrmi	r3, r3, #4
 80216ce:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80216d2:	b2db      	uxtb	r3, r3
 80216d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80216d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80216da:	b289      	uxth	r1, r1
 80216dc:	fb02 f301 	mul.w	r3, r2, r1
 80216e0:	0112      	lsls	r2, r2, #4
 80216e2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80216e6:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80216ea:	1ad2      	subs	r2, r2, r3
 80216ec:	b289      	uxth	r1, r1
 80216ee:	b292      	uxth	r2, r2
 80216f0:	1a40      	subs	r0, r0, r1
 80216f2:	fa1f fe80 	uxth.w	lr, r0
 80216f6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80216f8:	4342      	muls	r2, r0
 80216fa:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80216fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021700:	fb01 c102 	mla	r1, r1, r2, ip
 8021704:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021706:	fb03 1302 	mla	r3, r3, r2, r1
 802170a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802170e:	b383      	cbz	r3, 8021772 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021710:	4ac6      	ldr	r2, [pc, #792]	@ (8021a2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8021712:	2bff      	cmp	r3, #255	@ 0xff
 8021714:	6812      	ldr	r2, [r2, #0]
 8021716:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802171a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802171e:	b2d2      	uxtb	r2, r2
 8021720:	f000 80ac 	beq.w	802187c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021724:	b299      	uxth	r1, r3
 8021726:	43db      	mvns	r3, r3
 8021728:	f897 c000 	ldrb.w	ip, [r7]
 802172c:	fb12 f201 	smulbb	r2, r2, r1
 8021730:	b2db      	uxtb	r3, r3
 8021732:	fb10 f001 	smulbb	r0, r0, r1
 8021736:	fb0c 2203 	mla	r2, ip, r3, r2
 802173a:	fb1e f101 	smulbb	r1, lr, r1
 802173e:	b292      	uxth	r2, r2
 8021740:	f102 0c01 	add.w	ip, r2, #1
 8021744:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021748:	1212      	asrs	r2, r2, #8
 802174a:	703a      	strb	r2, [r7, #0]
 802174c:	787a      	ldrb	r2, [r7, #1]
 802174e:	fb02 0003 	mla	r0, r2, r3, r0
 8021752:	b280      	uxth	r0, r0
 8021754:	1c42      	adds	r2, r0, #1
 8021756:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802175a:	78ba      	ldrb	r2, [r7, #2]
 802175c:	fb02 1303 	mla	r3, r2, r3, r1
 8021760:	1200      	asrs	r0, r0, #8
 8021762:	b29b      	uxth	r3, r3
 8021764:	7078      	strb	r0, [r7, #1]
 8021766:	f103 0e01 	add.w	lr, r3, #1
 802176a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802176e:	121b      	asrs	r3, r3, #8
 8021770:	70bb      	strb	r3, [r7, #2]
 8021772:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021774:	3703      	adds	r7, #3
 8021776:	f10a 3aff 	add.w	sl, sl, #4294967295
 802177a:	441d      	add	r5, r3
 802177c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802177e:	441e      	add	r6, r3
 8021780:	e74d      	b.n	802161e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021782:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021784:	3c01      	subs	r4, #1
 8021786:	f10b 0b03 	add.w	fp, fp, #3
 802178a:	441d      	add	r5, r3
 802178c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802178e:	441e      	add	r6, r3
 8021790:	e725      	b.n	80215de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021792:	d021      	beq.n	80217d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021794:	1e63      	subs	r3, r4, #1
 8021796:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8021798:	fb00 5003 	mla	r0, r0, r3, r5
 802179c:	1400      	asrs	r0, r0, #16
 802179e:	f53f af3a 	bmi.w	8021616 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80217a2:	3901      	subs	r1, #1
 80217a4:	4288      	cmp	r0, r1
 80217a6:	f6bf af36 	bge.w	8021616 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80217aa:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80217ac:	fb01 6303 	mla	r3, r1, r3, r6
 80217b0:	141b      	asrs	r3, r3, #16
 80217b2:	f53f af30 	bmi.w	8021616 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80217b6:	3a01      	subs	r2, #1
 80217b8:	4293      	cmp	r3, r2
 80217ba:	f6bf af2c 	bge.w	8021616 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80217be:	f10b 0c03 	add.w	ip, fp, #3
 80217c2:	46a6      	mov	lr, r4
 80217c4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80217c8:	f1be 0f00 	cmp.w	lr, #0
 80217cc:	dc79      	bgt.n	80218c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80217ce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80217d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80217d6:	44a3      	add	fp, r4
 80217d8:	9b07      	ldr	r3, [sp, #28]
 80217da:	2b00      	cmp	r3, #0
 80217dc:	f340 8123 	ble.w	8021a26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80217e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80217e4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80217e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80217ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80217ee:	eef0 6a62 	vmov.f32	s13, s5
 80217f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80217f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80217fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217fe:	ee16 5a90 	vmov	r5, s13
 8021802:	eef0 6a43 	vmov.f32	s13, s6
 8021806:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802180a:	ee16 6a90 	vmov	r6, s13
 802180e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021812:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021816:	ee77 2a62 	vsub.f32	s5, s14, s5
 802181a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802181e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021822:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021826:	ee12 2a90 	vmov	r2, s5
 802182a:	eef0 2a47 	vmov.f32	s5, s14
 802182e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021832:	ee13 2a10 	vmov	r2, s6
 8021836:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021838:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802183a:	eeb0 3a67 	vmov.f32	s6, s15
 802183e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021842:	9320      	str	r3, [sp, #128]	@ 0x80
 8021844:	9b07      	ldr	r3, [sp, #28]
 8021846:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021848:	3b01      	subs	r3, #1
 802184a:	9307      	str	r3, [sp, #28]
 802184c:	bf08      	it	eq
 802184e:	4614      	moveq	r4, r2
 8021850:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021852:	bf18      	it	ne
 8021854:	461c      	movne	r4, r3
 8021856:	e6b4      	b.n	80215c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021858:	2900      	cmp	r1, #0
 802185a:	f43f af3c 	beq.w	80216d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802185e:	eb09 0003 	add.w	r0, r9, r3
 8021862:	0843      	lsrs	r3, r0, #1
 8021864:	07c0      	lsls	r0, r0, #31
 8021866:	f818 3003 	ldrb.w	r3, [r8, r3]
 802186a:	bf54      	ite	pl
 802186c:	f003 030f 	andpl.w	r3, r3, #15
 8021870:	111b      	asrmi	r3, r3, #4
 8021872:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021876:	b2db      	uxtb	r3, r3
 8021878:	930a      	str	r3, [sp, #40]	@ 0x28
 802187a:	e72c      	b.n	80216d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802187c:	703a      	strb	r2, [r7, #0]
 802187e:	7078      	strb	r0, [r7, #1]
 8021880:	f887 e002 	strb.w	lr, [r7, #2]
 8021884:	e775      	b.n	8021772 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021886:	1c5a      	adds	r2, r3, #1
 8021888:	f53f af73 	bmi.w	8021772 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802188c:	4594      	cmp	ip, r2
 802188e:	f6ff af70 	blt.w	8021772 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021892:	1c42      	adds	r2, r0, #1
 8021894:	f53f af6d 	bmi.w	8021772 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021898:	4596      	cmp	lr, r2
 802189a:	f6ff af6a 	blt.w	8021772 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802189e:	9302      	str	r3, [sp, #8]
 80218a0:	fa0f f38e 	sxth.w	r3, lr
 80218a4:	9a08      	ldr	r2, [sp, #32]
 80218a6:	9301      	str	r3, [sp, #4]
 80218a8:	fa0f f38c 	sxth.w	r3, ip
 80218ac:	9105      	str	r1, [sp, #20]
 80218ae:	4639      	mov	r1, r7
 80218b0:	9300      	str	r3, [sp, #0]
 80218b2:	464b      	mov	r3, r9
 80218b4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80218b8:	4642      	mov	r2, r8
 80218ba:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80218bc:	f7ff fd90 	bl	80213e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80218c0:	e757      	b.n	8021772 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80218c2:	142a      	asrs	r2, r5, #16
 80218c4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80218c8:	1433      	asrs	r3, r6, #16
 80218ca:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80218ce:	fb09 2303 	mla	r3, r9, r3, r2
 80218d2:	085a      	lsrs	r2, r3, #1
 80218d4:	07d9      	lsls	r1, r3, #31
 80218d6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80218da:	bf54      	ite	pl
 80218dc:	f002 020f 	andpl.w	r2, r2, #15
 80218e0:	1112      	asrmi	r2, r2, #4
 80218e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80218e6:	b2d2      	uxtb	r2, r2
 80218e8:	2800      	cmp	r0, #0
 80218ea:	f000 8085 	beq.w	80219f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80218ee:	f103 0a01 	add.w	sl, r3, #1
 80218f2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80218f6:	f01a 0f01 	tst.w	sl, #1
 80218fa:	f818 1001 	ldrb.w	r1, [r8, r1]
 80218fe:	bf0c      	ite	eq
 8021900:	f001 010f 	andeq.w	r1, r1, #15
 8021904:	1109      	asrne	r1, r1, #4
 8021906:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802190a:	b2c9      	uxtb	r1, r1
 802190c:	910f      	str	r1, [sp, #60]	@ 0x3c
 802190e:	b1df      	cbz	r7, 8021948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021910:	444b      	add	r3, r9
 8021912:	0859      	lsrs	r1, r3, #1
 8021914:	f013 0f01 	tst.w	r3, #1
 8021918:	f103 0301 	add.w	r3, r3, #1
 802191c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021920:	bf0c      	ite	eq
 8021922:	f001 010f 	andeq.w	r1, r1, #15
 8021926:	1109      	asrne	r1, r1, #4
 8021928:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802192c:	b2c9      	uxtb	r1, r1
 802192e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021930:	0859      	lsrs	r1, r3, #1
 8021932:	07db      	lsls	r3, r3, #31
 8021934:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021938:	bf54      	ite	pl
 802193a:	f001 010f 	andpl.w	r1, r1, #15
 802193e:	1109      	asrmi	r1, r1, #4
 8021940:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021944:	b2c9      	uxtb	r1, r1
 8021946:	9110      	str	r1, [sp, #64]	@ 0x40
 8021948:	b280      	uxth	r0, r0
 802194a:	b2bf      	uxth	r7, r7
 802194c:	fb00 f307 	mul.w	r3, r0, r7
 8021950:	0100      	lsls	r0, r0, #4
 8021952:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8021956:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802195a:	1ac0      	subs	r0, r0, r3
 802195c:	b2bf      	uxth	r7, r7
 802195e:	b280      	uxth	r0, r0
 8021960:	1bc9      	subs	r1, r1, r7
 8021962:	fa1f fa81 	uxth.w	sl, r1
 8021966:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021968:	4348      	muls	r0, r1
 802196a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802196c:	fb02 020a 	mla	r2, r2, sl, r0
 8021970:	fb07 2701 	mla	r7, r7, r1, r2
 8021974:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021976:	fb03 7302 	mla	r3, r3, r2, r7
 802197a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802197e:	b393      	cbz	r3, 80219e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021980:	4a2a      	ldr	r2, [pc, #168]	@ (8021a2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8021982:	2bff      	cmp	r3, #255	@ 0xff
 8021984:	6811      	ldr	r1, [r2, #0]
 8021986:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802198a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802198e:	b2c9      	uxtb	r1, r1
 8021990:	d042      	beq.n	8021a18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021992:	b298      	uxth	r0, r3
 8021994:	43db      	mvns	r3, r3
 8021996:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802199a:	fb11 f100 	smulbb	r1, r1, r0
 802199e:	b2db      	uxtb	r3, r3
 80219a0:	fb17 f700 	smulbb	r7, r7, r0
 80219a4:	fb02 1103 	mla	r1, r2, r3, r1
 80219a8:	fb1a f000 	smulbb	r0, sl, r0
 80219ac:	b289      	uxth	r1, r1
 80219ae:	1c4a      	adds	r2, r1, #1
 80219b0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80219b4:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80219b8:	fb02 7703 	mla	r7, r2, r3, r7
 80219bc:	1209      	asrs	r1, r1, #8
 80219be:	b2bf      	uxth	r7, r7
 80219c0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80219c4:	1c7a      	adds	r2, r7, #1
 80219c6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80219ca:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80219ce:	fb02 0303 	mla	r3, r2, r3, r0
 80219d2:	123f      	asrs	r7, r7, #8
 80219d4:	b29b      	uxth	r3, r3
 80219d6:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80219da:	1c5a      	adds	r2, r3, #1
 80219dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80219e0:	121b      	asrs	r3, r3, #8
 80219e2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80219e6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80219e8:	f10c 0c03 	add.w	ip, ip, #3
 80219ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 80219f0:	441d      	add	r5, r3
 80219f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80219f4:	441e      	add	r6, r3
 80219f6:	e6e7      	b.n	80217c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80219f8:	2f00      	cmp	r7, #0
 80219fa:	d0a5      	beq.n	8021948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80219fc:	444b      	add	r3, r9
 80219fe:	0859      	lsrs	r1, r3, #1
 8021a00:	07db      	lsls	r3, r3, #31
 8021a02:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021a06:	bf54      	ite	pl
 8021a08:	f001 010f 	andpl.w	r1, r1, #15
 8021a0c:	1109      	asrmi	r1, r1, #4
 8021a0e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021a12:	b2c9      	uxtb	r1, r1
 8021a14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021a16:	e797      	b.n	8021948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021a18:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021a1c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021a20:	f80c ac01 	strb.w	sl, [ip, #-1]
 8021a24:	e7df      	b.n	80219e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021a26:	b013      	add	sp, #76	@ 0x4c
 8021a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a2c:	2402530c 	.word	0x2402530c

08021a30 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8021a30:	b530      	push	{r4, r5, lr}
 8021a32:	b29d      	uxth	r5, r3
 8021a34:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8021a38:	780c      	ldrb	r4, [r1, #0]
 8021a3a:	b298      	uxth	r0, r3
 8021a3c:	7813      	ldrb	r3, [r2, #0]
 8021a3e:	fb14 f405 	smulbb	r4, r4, r5
 8021a42:	fb13 f300 	smulbb	r3, r3, r0
 8021a46:	441c      	add	r4, r3
 8021a48:	b2a4      	uxth	r4, r4
 8021a4a:	1c63      	adds	r3, r4, #1
 8021a4c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021a50:	7853      	ldrb	r3, [r2, #1]
 8021a52:	fb13 f300 	smulbb	r3, r3, r0
 8021a56:	1224      	asrs	r4, r4, #8
 8021a58:	7014      	strb	r4, [r2, #0]
 8021a5a:	784c      	ldrb	r4, [r1, #1]
 8021a5c:	fb14 f405 	smulbb	r4, r4, r5
 8021a60:	441c      	add	r4, r3
 8021a62:	b2a4      	uxth	r4, r4
 8021a64:	1c63      	adds	r3, r4, #1
 8021a66:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021a6a:	1224      	asrs	r4, r4, #8
 8021a6c:	7054      	strb	r4, [r2, #1]
 8021a6e:	788b      	ldrb	r3, [r1, #2]
 8021a70:	7891      	ldrb	r1, [r2, #2]
 8021a72:	fb13 f305 	smulbb	r3, r3, r5
 8021a76:	fb11 f000 	smulbb	r0, r1, r0
 8021a7a:	4403      	add	r3, r0
 8021a7c:	b29b      	uxth	r3, r3
 8021a7e:	1c59      	adds	r1, r3, #1
 8021a80:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021a84:	121b      	asrs	r3, r3, #8
 8021a86:	7093      	strb	r3, [r2, #2]
 8021a88:	bd30      	pop	{r4, r5, pc}
	...

08021a8c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a90:	461c      	mov	r4, r3
 8021a92:	b08b      	sub	sp, #44	@ 0x2c
 8021a94:	460e      	mov	r6, r1
 8021a96:	4615      	mov	r5, r2
 8021a98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021a9a:	4682      	mov	sl, r0
 8021a9c:	6861      	ldr	r1, [r4, #4]
 8021a9e:	aa06      	add	r2, sp, #24
 8021aa0:	6820      	ldr	r0, [r4, #0]
 8021aa2:	2702      	movs	r7, #2
 8021aa4:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8021aa8:	3504      	adds	r5, #4
 8021aaa:	c203      	stmia	r2!, {r0, r1}
 8021aac:	6818      	ldr	r0, [r3, #0]
 8021aae:	aa08      	add	r2, sp, #32
 8021ab0:	6859      	ldr	r1, [r3, #4]
 8021ab2:	c203      	stmia	r2!, {r0, r1}
 8021ab4:	a806      	add	r0, sp, #24
 8021ab6:	f7f2 f9d9 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021aba:	4621      	mov	r1, r4
 8021abc:	a808      	add	r0, sp, #32
 8021abe:	f7f2 f9fd 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ac2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021ac6:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8021aca:	f002 0301 	and.w	r3, r2, #1
 8021ace:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8021ad2:	9302      	str	r3, [sp, #8]
 8021ad4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021ad8:	f003 0101 	and.w	r1, r3, #1
 8021adc:	9101      	str	r1, [sp, #4]
 8021ade:	9801      	ldr	r0, [sp, #4]
 8021ae0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8021ae4:	4403      	add	r3, r0
 8021ae6:	fb01 2303 	mla	r3, r1, r3, r2
 8021aea:	fb93 f3f7 	sdiv	r3, r3, r7
 8021aee:	441e      	add	r6, r3
 8021af0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8021af4:	441a      	add	r2, r3
 8021af6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8021afa:	4419      	add	r1, r3
 8021afc:	4b70      	ldr	r3, [pc, #448]	@ (8021cc0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8021afe:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021b02:	6818      	ldr	r0, [r3, #0]
 8021b04:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8021b08:	6803      	ldr	r3, [r0, #0]
 8021b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021b0c:	4798      	blx	r3
 8021b0e:	4a6d      	ldr	r2, [pc, #436]	@ (8021cc4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8021b10:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021b14:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021b18:	8813      	ldrh	r3, [r2, #0]
 8021b1a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8021b1e:	fb03 1404 	mla	r4, r3, r4, r1
 8021b22:	4611      	mov	r1, r2
 8021b24:	fb0b f303 	mul.w	r3, fp, r3
 8021b28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021b2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b30:	4404      	add	r4, r0
 8021b32:	4423      	add	r3, r4
 8021b34:	d073      	beq.n	8021c1e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8021b36:	9705      	str	r7, [sp, #20]
 8021b38:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8021b3c:	9b03      	ldr	r3, [sp, #12]
 8021b3e:	429c      	cmp	r4, r3
 8021b40:	f080 80b5 	bcs.w	8021cae <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8021b44:	9b02      	ldr	r3, [sp, #8]
 8021b46:	b35b      	cbz	r3, 8021ba0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8021b48:	7831      	ldrb	r1, [r6, #0]
 8021b4a:	4622      	mov	r2, r4
 8021b4c:	1c77      	adds	r7, r6, #1
 8021b4e:	3403      	adds	r4, #3
 8021b50:	f001 010f 	and.w	r1, r1, #15
 8021b54:	f108 3bff 	add.w	fp, r8, #4294967295
 8021b58:	464b      	mov	r3, r9
 8021b5a:	4650      	mov	r0, sl
 8021b5c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021b60:	4429      	add	r1, r5
 8021b62:	f7ff ff65 	bl	8021a30 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021b66:	f1bb 0f01 	cmp.w	fp, #1
 8021b6a:	dd1c      	ble.n	8021ba6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8021b6c:	7839      	ldrb	r1, [r7, #0]
 8021b6e:	4622      	mov	r2, r4
 8021b70:	464b      	mov	r3, r9
 8021b72:	4650      	mov	r0, sl
 8021b74:	0909      	lsrs	r1, r1, #4
 8021b76:	f1ab 0b02 	sub.w	fp, fp, #2
 8021b7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021b7e:	4429      	add	r1, r5
 8021b80:	f7ff ff56 	bl	8021a30 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021b84:	f817 1b01 	ldrb.w	r1, [r7], #1
 8021b88:	1ce2      	adds	r2, r4, #3
 8021b8a:	464b      	mov	r3, r9
 8021b8c:	f001 010f 	and.w	r1, r1, #15
 8021b90:	4650      	mov	r0, sl
 8021b92:	3406      	adds	r4, #6
 8021b94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021b98:	4429      	add	r1, r5
 8021b9a:	f7ff ff49 	bl	8021a30 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021b9e:	e7e2      	b.n	8021b66 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8021ba0:	4637      	mov	r7, r6
 8021ba2:	46c3      	mov	fp, r8
 8021ba4:	e7df      	b.n	8021b66 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8021ba6:	d10a      	bne.n	8021bbe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8021ba8:	7839      	ldrb	r1, [r7, #0]
 8021baa:	4622      	mov	r2, r4
 8021bac:	3403      	adds	r4, #3
 8021bae:	464b      	mov	r3, r9
 8021bb0:	0909      	lsrs	r1, r1, #4
 8021bb2:	4650      	mov	r0, sl
 8021bb4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021bb8:	4429      	add	r1, r5
 8021bba:	f7ff ff39 	bl	8021a30 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021bbe:	9b04      	ldr	r3, [sp, #16]
 8021bc0:	9a01      	ldr	r2, [sp, #4]
 8021bc2:	881b      	ldrh	r3, [r3, #0]
 8021bc4:	eba3 0308 	sub.w	r3, r3, r8
 8021bc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021bcc:	441c      	add	r4, r3
 8021bce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021bd2:	4413      	add	r3, r2
 8021bd4:	9a05      	ldr	r2, [sp, #20]
 8021bd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8021bda:	441e      	add	r6, r3
 8021bdc:	e7ae      	b.n	8021b3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8021bde:	4632      	mov	r2, r6
 8021be0:	46c4      	mov	ip, r8
 8021be2:	e037      	b.n	8021c54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8021be4:	d10e      	bne.n	8021c04 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8021be6:	7812      	ldrb	r2, [r2, #0]
 8021be8:	3003      	adds	r0, #3
 8021bea:	0912      	lsrs	r2, r2, #4
 8021bec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021bf0:	18ac      	adds	r4, r5, r2
 8021bf2:	5caa      	ldrb	r2, [r5, r2]
 8021bf4:	f800 2c03 	strb.w	r2, [r0, #-3]
 8021bf8:	7862      	ldrb	r2, [r4, #1]
 8021bfa:	f800 2c02 	strb.w	r2, [r0, #-2]
 8021bfe:	78a2      	ldrb	r2, [r4, #2]
 8021c00:	f800 2c01 	strb.w	r2, [r0, #-1]
 8021c04:	880c      	ldrh	r4, [r1, #0]
 8021c06:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8021c0a:	eba4 0408 	sub.w	r4, r4, r8
 8021c0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021c12:	4404      	add	r4, r0
 8021c14:	9801      	ldr	r0, [sp, #4]
 8021c16:	4402      	add	r2, r0
 8021c18:	fb92 f2f7 	sdiv	r2, r2, r7
 8021c1c:	4416      	add	r6, r2
 8021c1e:	429c      	cmp	r4, r3
 8021c20:	d245      	bcs.n	8021cae <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8021c22:	9a02      	ldr	r2, [sp, #8]
 8021c24:	2a00      	cmp	r2, #0
 8021c26:	d0da      	beq.n	8021bde <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8021c28:	7830      	ldrb	r0, [r6, #0]
 8021c2a:	1c72      	adds	r2, r6, #1
 8021c2c:	3403      	adds	r4, #3
 8021c2e:	f000 000f 	and.w	r0, r0, #15
 8021c32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c36:	eb05 0c00 	add.w	ip, r5, r0
 8021c3a:	5c28      	ldrb	r0, [r5, r0]
 8021c3c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8021c40:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021c44:	f804 0c02 	strb.w	r0, [r4, #-2]
 8021c48:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8021c4c:	f108 3cff 	add.w	ip, r8, #4294967295
 8021c50:	f804 0c01 	strb.w	r0, [r4, #-1]
 8021c54:	f1bc 0f01 	cmp.w	ip, #1
 8021c58:	4620      	mov	r0, r4
 8021c5a:	f104 0406 	add.w	r4, r4, #6
 8021c5e:	ddc1      	ble.n	8021be4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8021c60:	7810      	ldrb	r0, [r2, #0]
 8021c62:	f1ac 0c02 	sub.w	ip, ip, #2
 8021c66:	0900      	lsrs	r0, r0, #4
 8021c68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c6c:	eb05 0e00 	add.w	lr, r5, r0
 8021c70:	5c28      	ldrb	r0, [r5, r0]
 8021c72:	f804 0c06 	strb.w	r0, [r4, #-6]
 8021c76:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021c7a:	f804 0c05 	strb.w	r0, [r4, #-5]
 8021c7e:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8021c82:	f804 0c04 	strb.w	r0, [r4, #-4]
 8021c86:	f812 0b01 	ldrb.w	r0, [r2], #1
 8021c8a:	f000 000f 	and.w	r0, r0, #15
 8021c8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c92:	eb05 0e00 	add.w	lr, r5, r0
 8021c96:	5c28      	ldrb	r0, [r5, r0]
 8021c98:	f804 0c03 	strb.w	r0, [r4, #-3]
 8021c9c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021ca0:	f804 0c02 	strb.w	r0, [r4, #-2]
 8021ca4:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8021ca8:	f804 0c01 	strb.w	r0, [r4, #-1]
 8021cac:	e7d2      	b.n	8021c54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8021cae:	4b04      	ldr	r3, [pc, #16]	@ (8021cc0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8021cb0:	6818      	ldr	r0, [r3, #0]
 8021cb2:	6803      	ldr	r3, [r0, #0]
 8021cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021cb6:	4798      	blx	r3
 8021cb8:	b00b      	add	sp, #44	@ 0x2c
 8021cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cbe:	bf00      	nop
 8021cc0:	240252fc 	.word	0x240252fc
 8021cc4:	240252f6 	.word	0x240252f6

08021cc8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8021cc8:	b530      	push	{r4, r5, lr}
 8021cca:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8021cce:	780d      	ldrb	r5, [r1, #0]
 8021cd0:	28ff      	cmp	r0, #255	@ 0xff
 8021cd2:	d107      	bne.n	8021ce4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8021cd4:	2bff      	cmp	r3, #255	@ 0xff
 8021cd6:	d105      	bne.n	8021ce4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8021cd8:	7015      	strb	r5, [r2, #0]
 8021cda:	784b      	ldrb	r3, [r1, #1]
 8021cdc:	7053      	strb	r3, [r2, #1]
 8021cde:	788b      	ldrb	r3, [r1, #2]
 8021ce0:	7093      	strb	r3, [r2, #2]
 8021ce2:	bd30      	pop	{r4, r5, pc}
 8021ce4:	fb10 f003 	smulbb	r0, r0, r3
 8021ce8:	b283      	uxth	r3, r0
 8021cea:	1c58      	adds	r0, r3, #1
 8021cec:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021cf0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021cf4:	b284      	uxth	r4, r0
 8021cf6:	43c0      	mvns	r0, r0
 8021cf8:	fb15 f504 	smulbb	r5, r5, r4
 8021cfc:	b2c3      	uxtb	r3, r0
 8021cfe:	7810      	ldrb	r0, [r2, #0]
 8021d00:	fb00 5003 	mla	r0, r0, r3, r5
 8021d04:	b280      	uxth	r0, r0
 8021d06:	1c45      	adds	r5, r0, #1
 8021d08:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021d0c:	7855      	ldrb	r5, [r2, #1]
 8021d0e:	fb15 f503 	smulbb	r5, r5, r3
 8021d12:	1200      	asrs	r0, r0, #8
 8021d14:	7010      	strb	r0, [r2, #0]
 8021d16:	7848      	ldrb	r0, [r1, #1]
 8021d18:	fb00 5004 	mla	r0, r0, r4, r5
 8021d1c:	b280      	uxth	r0, r0
 8021d1e:	1c45      	adds	r5, r0, #1
 8021d20:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021d24:	1200      	asrs	r0, r0, #8
 8021d26:	7050      	strb	r0, [r2, #1]
 8021d28:	7888      	ldrb	r0, [r1, #2]
 8021d2a:	7891      	ldrb	r1, [r2, #2]
 8021d2c:	fb11 f303 	smulbb	r3, r1, r3
 8021d30:	fb00 3304 	mla	r3, r0, r4, r3
 8021d34:	b29b      	uxth	r3, r3
 8021d36:	1c59      	adds	r1, r3, #1
 8021d38:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021d3c:	121b      	asrs	r3, r3, #8
 8021d3e:	e7cf      	b.n	8021ce0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08021d40 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d44:	461d      	mov	r5, r3
 8021d46:	b08f      	sub	sp, #60	@ 0x3c
 8021d48:	460c      	mov	r4, r1
 8021d4a:	4616      	mov	r6, r2
 8021d4c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021d4e:	4680      	mov	r8, r0
 8021d50:	6869      	ldr	r1, [r5, #4]
 8021d52:	aa0a      	add	r2, sp, #40	@ 0x28
 8021d54:	6828      	ldr	r0, [r5, #0]
 8021d56:	3604      	adds	r6, #4
 8021d58:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8021d5c:	4f57      	ldr	r7, [pc, #348]	@ (8021ebc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8021d5e:	c203      	stmia	r2!, {r0, r1}
 8021d60:	6818      	ldr	r0, [r3, #0]
 8021d62:	aa0c      	add	r2, sp, #48	@ 0x30
 8021d64:	6859      	ldr	r1, [r3, #4]
 8021d66:	c203      	stmia	r2!, {r0, r1}
 8021d68:	a80a      	add	r0, sp, #40	@ 0x28
 8021d6a:	f7f2 f87f 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021d6e:	4629      	mov	r1, r5
 8021d70:	a80c      	add	r0, sp, #48	@ 0x30
 8021d72:	2502      	movs	r5, #2
 8021d74:	f7f2 f8a2 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021d78:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021d7c:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8021d80:	f002 0301 	and.w	r3, r2, #1
 8021d84:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8021d88:	9304      	str	r3, [sp, #16]
 8021d8a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021d8e:	f003 0101 	and.w	r1, r3, #1
 8021d92:	9103      	str	r1, [sp, #12]
 8021d94:	9803      	ldr	r0, [sp, #12]
 8021d96:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8021d9a:	4403      	add	r3, r0
 8021d9c:	6838      	ldr	r0, [r7, #0]
 8021d9e:	fb01 2303 	mla	r3, r1, r3, r2
 8021da2:	fb93 f3f5 	sdiv	r3, r3, r5
 8021da6:	18e5      	adds	r5, r4, r3
 8021da8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021dac:	441a      	add	r2, r3
 8021dae:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021db2:	4419      	add	r1, r3
 8021db4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8021db8:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8021dbc:	6803      	ldr	r3, [r0, #0]
 8021dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021dc0:	4798      	blx	r3
 8021dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8021ec0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8021dc4:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8021dc8:	8813      	ldrh	r3, [r2, #0]
 8021dca:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8021dce:	9207      	str	r2, [sp, #28]
 8021dd0:	fb03 1404 	mla	r4, r3, r4, r1
 8021dd4:	fb0a f303 	mul.w	r3, sl, r3
 8021dd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021ddc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021de0:	4404      	add	r4, r0
 8021de2:	18e3      	adds	r3, r4, r3
 8021de4:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8021de8:	9b05      	ldr	r3, [sp, #20]
 8021dea:	429c      	cmp	r4, r3
 8021dec:	d25d      	bcs.n	8021eaa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8021dee:	9b04      	ldr	r3, [sp, #16]
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	d037      	beq.n	8021e64 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8021df4:	782b      	ldrb	r3, [r5, #0]
 8021df6:	1c6f      	adds	r7, r5, #1
 8021df8:	f003 030f 	and.w	r3, r3, #15
 8021dfc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e02:	0e1b      	lsrs	r3, r3, #24
 8021e04:	d006      	beq.n	8021e14 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8021e06:	9300      	str	r3, [sp, #0]
 8021e08:	4622      	mov	r2, r4
 8021e0a:	464b      	mov	r3, r9
 8021e0c:	a909      	add	r1, sp, #36	@ 0x24
 8021e0e:	4640      	mov	r0, r8
 8021e10:	f7ff ff5a 	bl	8021cc8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021e14:	3403      	adds	r4, #3
 8021e16:	f10b 3aff 	add.w	sl, fp, #4294967295
 8021e1a:	f1ba 0f01 	cmp.w	sl, #1
 8021e1e:	dd24      	ble.n	8021e6a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8021e20:	783b      	ldrb	r3, [r7, #0]
 8021e22:	091b      	lsrs	r3, r3, #4
 8021e24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021e28:	9308      	str	r3, [sp, #32]
 8021e2a:	0e1b      	lsrs	r3, r3, #24
 8021e2c:	d006      	beq.n	8021e3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8021e2e:	9300      	str	r3, [sp, #0]
 8021e30:	4622      	mov	r2, r4
 8021e32:	464b      	mov	r3, r9
 8021e34:	a908      	add	r1, sp, #32
 8021e36:	4640      	mov	r0, r8
 8021e38:	f7ff ff46 	bl	8021cc8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021e3c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8021e40:	f003 030f 	and.w	r3, r3, #15
 8021e44:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e4a:	0e1b      	lsrs	r3, r3, #24
 8021e4c:	d006      	beq.n	8021e5c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8021e4e:	9300      	str	r3, [sp, #0]
 8021e50:	1ce2      	adds	r2, r4, #3
 8021e52:	464b      	mov	r3, r9
 8021e54:	a909      	add	r1, sp, #36	@ 0x24
 8021e56:	4640      	mov	r0, r8
 8021e58:	f7ff ff36 	bl	8021cc8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021e5c:	3406      	adds	r4, #6
 8021e5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8021e62:	e7da      	b.n	8021e1a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8021e64:	462f      	mov	r7, r5
 8021e66:	46da      	mov	sl, fp
 8021e68:	e7d7      	b.n	8021e1a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8021e6a:	d10e      	bne.n	8021e8a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8021e6c:	783b      	ldrb	r3, [r7, #0]
 8021e6e:	091b      	lsrs	r3, r3, #4
 8021e70:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e76:	0e1b      	lsrs	r3, r3, #24
 8021e78:	d006      	beq.n	8021e88 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8021e7a:	9300      	str	r3, [sp, #0]
 8021e7c:	4622      	mov	r2, r4
 8021e7e:	464b      	mov	r3, r9
 8021e80:	a909      	add	r1, sp, #36	@ 0x24
 8021e82:	4640      	mov	r0, r8
 8021e84:	f7ff ff20 	bl	8021cc8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021e88:	3403      	adds	r4, #3
 8021e8a:	9b07      	ldr	r3, [sp, #28]
 8021e8c:	9a03      	ldr	r2, [sp, #12]
 8021e8e:	881b      	ldrh	r3, [r3, #0]
 8021e90:	eba3 030b 	sub.w	r3, r3, fp
 8021e94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e98:	441c      	add	r4, r3
 8021e9a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021e9e:	4413      	add	r3, r2
 8021ea0:	2202      	movs	r2, #2
 8021ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8021ea6:	441d      	add	r5, r3
 8021ea8:	e79e      	b.n	8021de8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8021eaa:	9b06      	ldr	r3, [sp, #24]
 8021eac:	6818      	ldr	r0, [r3, #0]
 8021eae:	6803      	ldr	r3, [r0, #0]
 8021eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021eb2:	4798      	blx	r3
 8021eb4:	b00f      	add	sp, #60	@ 0x3c
 8021eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eba:	bf00      	nop
 8021ebc:	240252fc 	.word	0x240252fc
 8021ec0:	240252f6 	.word	0x240252f6

08021ec4 <CRC_Lock>:
 8021ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8021f7c <CRC_Lock+0xb8>)
 8021ec6:	b530      	push	{r4, r5, lr}
 8021ec8:	6813      	ldr	r3, [r2, #0]
 8021eca:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8021ece:	f023 0301 	bic.w	r3, r3, #1
 8021ed2:	6013      	str	r3, [r2, #0]
 8021ed4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8021ed8:	4b29      	ldr	r3, [pc, #164]	@ (8021f80 <CRC_Lock+0xbc>)
 8021eda:	681c      	ldr	r4, [r3, #0]
 8021edc:	4014      	ands	r4, r2
 8021ede:	42ac      	cmp	r4, r5
 8021ee0:	d005      	beq.n	8021eee <CRC_Lock+0x2a>
 8021ee2:	681c      	ldr	r4, [r3, #0]
 8021ee4:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8021ee8:	4014      	ands	r4, r2
 8021eea:	42ac      	cmp	r4, r5
 8021eec:	d125      	bne.n	8021f3a <CRC_Lock+0x76>
 8021eee:	4b25      	ldr	r3, [pc, #148]	@ (8021f84 <CRC_Lock+0xc0>)
 8021ef0:	681b      	ldr	r3, [r3, #0]
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	d139      	bne.n	8021f6a <CRC_Lock+0xa6>
 8021ef6:	4b24      	ldr	r3, [pc, #144]	@ (8021f88 <CRC_Lock+0xc4>)
 8021ef8:	681a      	ldr	r2, [r3, #0]
 8021efa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021efe:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8021f02:	d00d      	beq.n	8021f20 <CRC_Lock+0x5c>
 8021f04:	681a      	ldr	r2, [r3, #0]
 8021f06:	f240 4483 	movw	r4, #1155	@ 0x483
 8021f0a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021f0e:	42a2      	cmp	r2, r4
 8021f10:	d006      	beq.n	8021f20 <CRC_Lock+0x5c>
 8021f12:	681b      	ldr	r3, [r3, #0]
 8021f14:	f240 4285 	movw	r2, #1157	@ 0x485
 8021f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021f1c:	4293      	cmp	r3, r2
 8021f1e:	d124      	bne.n	8021f6a <CRC_Lock+0xa6>
 8021f20:	4b1a      	ldr	r3, [pc, #104]	@ (8021f8c <CRC_Lock+0xc8>)
 8021f22:	2201      	movs	r2, #1
 8021f24:	601a      	str	r2, [r3, #0]
 8021f26:	681a      	ldr	r2, [r3, #0]
 8021f28:	2a00      	cmp	r2, #0
 8021f2a:	d1fc      	bne.n	8021f26 <CRC_Lock+0x62>
 8021f2c:	4b18      	ldr	r3, [pc, #96]	@ (8021f90 <CRC_Lock+0xcc>)
 8021f2e:	6018      	str	r0, [r3, #0]
 8021f30:	6818      	ldr	r0, [r3, #0]
 8021f32:	1a43      	subs	r3, r0, r1
 8021f34:	4258      	negs	r0, r3
 8021f36:	4158      	adcs	r0, r3
 8021f38:	e00e      	b.n	8021f58 <CRC_Lock+0x94>
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	4013      	ands	r3, r2
 8021f3e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8021f42:	4293      	cmp	r3, r2
 8021f44:	d111      	bne.n	8021f6a <CRC_Lock+0xa6>
 8021f46:	4b13      	ldr	r3, [pc, #76]	@ (8021f94 <CRC_Lock+0xd0>)
 8021f48:	f240 4286 	movw	r2, #1158	@ 0x486
 8021f4c:	681b      	ldr	r3, [r3, #0]
 8021f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021f52:	4293      	cmp	r3, r2
 8021f54:	d001      	beq.n	8021f5a <CRC_Lock+0x96>
 8021f56:	2000      	movs	r0, #0
 8021f58:	bd30      	pop	{r4, r5, pc}
 8021f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8021f98 <CRC_Lock+0xd4>)
 8021f5c:	2201      	movs	r2, #1
 8021f5e:	601a      	str	r2, [r3, #0]
 8021f60:	681a      	ldr	r2, [r3, #0]
 8021f62:	2a00      	cmp	r2, #0
 8021f64:	d1fc      	bne.n	8021f60 <CRC_Lock+0x9c>
 8021f66:	4b0d      	ldr	r3, [pc, #52]	@ (8021f9c <CRC_Lock+0xd8>)
 8021f68:	e7e1      	b.n	8021f2e <CRC_Lock+0x6a>
 8021f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8021fa0 <CRC_Lock+0xdc>)
 8021f6c:	2201      	movs	r2, #1
 8021f6e:	601a      	str	r2, [r3, #0]
 8021f70:	681a      	ldr	r2, [r3, #0]
 8021f72:	2a00      	cmp	r2, #0
 8021f74:	d1fc      	bne.n	8021f70 <CRC_Lock+0xac>
 8021f76:	4b0b      	ldr	r3, [pc, #44]	@ (8021fa4 <CRC_Lock+0xe0>)
 8021f78:	e7d9      	b.n	8021f2e <CRC_Lock+0x6a>
 8021f7a:	bf00      	nop
 8021f7c:	e0002000 	.word	0xe0002000
 8021f80:	e000ed00 	.word	0xe000ed00
 8021f84:	e0042000 	.word	0xe0042000
 8021f88:	5c001000 	.word	0x5c001000
 8021f8c:	58024c08 	.word	0x58024c08
 8021f90:	58024c00 	.word	0x58024c00
 8021f94:	46008ff0 	.word	0x46008ff0
 8021f98:	46024c08 	.word	0x46024c08
 8021f9c:	46024c00 	.word	0x46024c00
 8021fa0:	40023008 	.word	0x40023008
 8021fa4:	40023000 	.word	0x40023000

08021fa8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021fa8:	6101      	str	r1, [r0, #16]
 8021faa:	4770      	bx	lr

08021fac <_ZN8touchgfx8Gestures4tickEv>:
 8021fac:	7b83      	ldrb	r3, [r0, #14]
 8021fae:	b14b      	cbz	r3, 8021fc4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021fb0:	8903      	ldrh	r3, [r0, #8]
 8021fb2:	3301      	adds	r3, #1
 8021fb4:	b29b      	uxth	r3, r3
 8021fb6:	2b07      	cmp	r3, #7
 8021fb8:	8103      	strh	r3, [r0, #8]
 8021fba:	bf81      	itttt	hi
 8021fbc:	2300      	movhi	r3, #0
 8021fbe:	8143      	strhhi	r3, [r0, #10]
 8021fc0:	8183      	strhhi	r3, [r0, #12]
 8021fc2:	7383      	strbhi	r3, [r0, #14]
 8021fc4:	4770      	bx	lr
	...

08021fc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021fc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021fcc:	4698      	mov	r8, r3
 8021fce:	8883      	ldrh	r3, [r0, #4]
 8021fd0:	4604      	mov	r4, r0
 8021fd2:	4617      	mov	r7, r2
 8021fd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021fd8:	eba8 0303 	sub.w	r3, r8, r3
 8021fdc:	4a19      	ldr	r2, [pc, #100]	@ (8022044 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8021fde:	460e      	mov	r6, r1
 8021fe0:	b21b      	sxth	r3, r3
 8021fe2:	88c1      	ldrh	r1, [r0, #6]
 8021fe4:	9200      	str	r2, [sp, #0]
 8021fe6:	2000      	movs	r0, #0
 8021fe8:	2b00      	cmp	r3, #0
 8021fea:	8aa2      	ldrh	r2, [r4, #20]
 8021fec:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8021ff0:	bfb8      	it	lt
 8021ff2:	425b      	neglt	r3, r3
 8021ff4:	f88d 0004 	strb.w	r0, [sp, #4]
 8021ff8:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021ffc:	b21b      	sxth	r3, r3
 8021ffe:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022002:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022006:	4293      	cmp	r3, r2
 8022008:	dc07      	bgt.n	802201a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802200a:	1a69      	subs	r1, r5, r1
 802200c:	b209      	sxth	r1, r1
 802200e:	2900      	cmp	r1, #0
 8022010:	bfb8      	it	lt
 8022012:	4249      	neglt	r1, r1
 8022014:	b209      	sxth	r1, r1
 8022016:	428a      	cmp	r2, r1
 8022018:	da10      	bge.n	802203c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802201a:	6920      	ldr	r0, [r4, #16]
 802201c:	4669      	mov	r1, sp
 802201e:	eba8 0606 	sub.w	r6, r8, r6
 8022022:	1bef      	subs	r7, r5, r7
 8022024:	6803      	ldr	r3, [r0, #0]
 8022026:	685b      	ldr	r3, [r3, #4]
 8022028:	4798      	blx	r3
 802202a:	2300      	movs	r3, #0
 802202c:	2001      	movs	r0, #1
 802202e:	8166      	strh	r6, [r4, #10]
 8022030:	8123      	strh	r3, [r4, #8]
 8022032:	81a7      	strh	r7, [r4, #12]
 8022034:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022038:	80e5      	strh	r5, [r4, #6]
 802203a:	73a0      	strb	r0, [r4, #14]
 802203c:	b004      	add	sp, #16
 802203e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022042:	bf00      	nop
 8022044:	0802796c 	.word	0x0802796c

08022048 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022048:	b5f0      	push	{r4, r5, r6, r7, lr}
 802204a:	461e      	mov	r6, r3
 802204c:	1e4b      	subs	r3, r1, #1
 802204e:	b085      	sub	sp, #20
 8022050:	4604      	mov	r4, r0
 8022052:	2b01      	cmp	r3, #1
 8022054:	460d      	mov	r5, r1
 8022056:	4617      	mov	r7, r2
 8022058:	d84b      	bhi.n	80220f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802205a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802205e:	1cd3      	adds	r3, r2, #3
 8022060:	b29b      	uxth	r3, r3
 8022062:	2b06      	cmp	r3, #6
 8022064:	d916      	bls.n	8022094 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022066:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8022108 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802206a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802206e:	f8cd c004 	str.w	ip, [sp, #4]
 8022072:	f04f 0c00 	mov.w	ip, #0
 8022076:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802207a:	6900      	ldr	r0, [r0, #16]
 802207c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022080:	a901      	add	r1, sp, #4
 8022082:	f88d c008 	strb.w	ip, [sp, #8]
 8022086:	f8ad 200a 	strh.w	r2, [sp, #10]
 802208a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802208e:	6803      	ldr	r3, [r0, #0]
 8022090:	689b      	ldr	r3, [r3, #8]
 8022092:	4798      	blx	r3
 8022094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022098:	1cd3      	adds	r3, r2, #3
 802209a:	b29b      	uxth	r3, r3
 802209c:	2b06      	cmp	r3, #6
 802209e:	d916      	bls.n	80220ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80220a0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8022108 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80220a4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80220a8:	f8cd c004 	str.w	ip, [sp, #4]
 80220ac:	f04f 0c01 	mov.w	ip, #1
 80220b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80220b4:	6920      	ldr	r0, [r4, #16]
 80220b6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80220ba:	a901      	add	r1, sp, #4
 80220bc:	f88d c008 	strb.w	ip, [sp, #8]
 80220c0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80220c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80220c8:	6803      	ldr	r3, [r0, #0]
 80220ca:	689b      	ldr	r3, [r3, #8]
 80220cc:	4798      	blx	r3
 80220ce:	4b0d      	ldr	r3, [pc, #52]	@ (8022104 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80220d0:	a901      	add	r1, sp, #4
 80220d2:	6920      	ldr	r0, [r4, #16]
 80220d4:	9301      	str	r3, [sp, #4]
 80220d6:	2300      	movs	r3, #0
 80220d8:	f88d 5008 	strb.w	r5, [sp, #8]
 80220dc:	f8ad 700a 	strh.w	r7, [sp, #10]
 80220e0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80220e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80220e8:	6803      	ldr	r3, [r0, #0]
 80220ea:	681b      	ldr	r3, [r3, #0]
 80220ec:	4798      	blx	r3
 80220ee:	b005      	add	sp, #20
 80220f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220f2:	2900      	cmp	r1, #0
 80220f4:	d1eb      	bne.n	80220ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80220f6:	80a2      	strh	r2, [r4, #4]
 80220f8:	80c6      	strh	r6, [r0, #6]
 80220fa:	60a1      	str	r1, [r4, #8]
 80220fc:	81a1      	strh	r1, [r4, #12]
 80220fe:	73a1      	strb	r1, [r4, #14]
 8022100:	e7e5      	b.n	80220ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022102:	bf00      	nop
 8022104:	08027958 	.word	0x08027958
 8022108:	08027980 	.word	0x08027980

0802210c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802210c:	10c9      	asrs	r1, r1, #3
 802210e:	2900      	cmp	r1, #0
 8022110:	bfb8      	it	lt
 8022112:	4249      	neglt	r1, r1
 8022114:	2801      	cmp	r0, #1
 8022116:	d108      	bne.n	802212a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8022118:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802211c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8022120:	4601      	mov	r1, r0
 8022122:	dd02      	ble.n	802212a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8022124:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8022128:	4770      	bx	lr
 802212a:	29ff      	cmp	r1, #255	@ 0xff
 802212c:	bfa8      	it	ge
 802212e:	21ff      	movge	r1, #255	@ 0xff
 8022130:	4608      	mov	r0, r1
 8022132:	4770      	bx	lr

08022134 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8022134:	b410      	push	{r4}
 8022136:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802213a:	429c      	cmp	r4, r3
 802213c:	d803      	bhi.n	8022146 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802213e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022142:	f7f0 b99d 	b.w	8012480 <_ZN8touchgfx7Outline6lineToEii>
 8022146:	f85d 4b04 	ldr.w	r4, [sp], #4
 802214a:	4770      	bx	lr

0802214c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022150:	b08b      	sub	sp, #44	@ 0x2c
 8022152:	4606      	mov	r6, r0
 8022154:	468a      	mov	sl, r1
 8022156:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802215a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802215e:	9308      	str	r3, [sp, #32]
 8022160:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8022164:	9309      	str	r3, [sp, #36]	@ 0x24
 8022166:	f7f0 faf6 	bl	8012756 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802216a:	68b5      	ldr	r5, [r6, #8]
 802216c:	4604      	mov	r4, r0
 802216e:	2d00      	cmp	r5, #0
 8022170:	d044      	beq.n	80221fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8022172:	6873      	ldr	r3, [r6, #4]
 8022174:	42ab      	cmp	r3, r5
 8022176:	d33d      	bcc.n	80221f4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8022178:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802217c:	f04f 0800 	mov.w	r8, #0
 8022180:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8022184:	eb02 0b03 	add.w	fp, r2, r3
 8022188:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802218c:	fb02 1203 	mla	r2, r2, r3, r1
 8022190:	9205      	str	r2, [sp, #20]
 8022192:	1e6a      	subs	r2, r5, #1
 8022194:	9204      	str	r2, [sp, #16]
 8022196:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802219a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802219e:	454b      	cmp	r3, r9
 80221a0:	463a      	mov	r2, r7
 80221a2:	d008      	beq.n	80221b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80221a4:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80221a8:	eb03 0b09 	add.w	fp, r3, r9
 80221ac:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80221b0:	fb03 1309 	mla	r3, r3, r9, r1
 80221b4:	9305      	str	r3, [sp, #20]
 80221b6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80221ba:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80221be:	4498      	add	r8, r3
 80221c0:	9b04      	ldr	r3, [sp, #16]
 80221c2:	3b01      	subs	r3, #1
 80221c4:	9304      	str	r3, [sp, #16]
 80221c6:	9b04      	ldr	r3, [sp, #16]
 80221c8:	3301      	adds	r3, #1
 80221ca:	d015      	beq.n	80221f8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80221cc:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80221d0:	42bb      	cmp	r3, r7
 80221d2:	d117      	bne.n	8022204 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80221d4:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80221d8:	9b04      	ldr	r3, [sp, #16]
 80221da:	4548      	cmp	r0, r9
 80221dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80221e0:	d17d      	bne.n	80222de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80221e2:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80221e6:	4401      	add	r1, r0
 80221e8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80221ec:	4480      	add	r8, r0
 80221ee:	e7e9      	b.n	80221c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80221f0:	461f      	mov	r7, r3
 80221f2:	e042      	b.n	802227a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80221f4:	2000      	movs	r0, #0
 80221f6:	e002      	b.n	80221fe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80221f8:	2900      	cmp	r1, #0
 80221fa:	d16d      	bne.n	80222d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80221fc:	2001      	movs	r0, #1
 80221fe:	b00b      	add	sp, #44	@ 0x2c
 8022200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022204:	b379      	cbz	r1, 8022266 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8022206:	2f00      	cmp	r7, #0
 8022208:	db29      	blt.n	802225e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802220a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802220e:	42bb      	cmp	r3, r7
 8022210:	dd25      	ble.n	802225e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8022212:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8022216:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802221a:	f7ff ff77 	bl	802210c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802221e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022220:	fb10 f003 	smulbb	r0, r0, r3
 8022224:	b280      	uxth	r0, r0
 8022226:	1c41      	adds	r1, r0, #1
 8022228:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802222c:	1209      	asrs	r1, r1, #8
 802222e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8022232:	d014      	beq.n	802225e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8022234:	b2c9      	uxtb	r1, r1
 8022236:	9808      	ldr	r0, [sp, #32]
 8022238:	b2ba      	uxth	r2, r7
 802223a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802223c:	9102      	str	r1, [sp, #8]
 802223e:	2101      	movs	r1, #1
 8022240:	4413      	add	r3, r2
 8022242:	4402      	add	r2, r0
 8022244:	9101      	str	r1, [sp, #4]
 8022246:	fa0f f18b 	sxth.w	r1, fp
 802224a:	f8da 0000 	ldr.w	r0, [sl]
 802224e:	b21b      	sxth	r3, r3
 8022250:	9100      	str	r1, [sp, #0]
 8022252:	b212      	sxth	r2, r2
 8022254:	6941      	ldr	r1, [r0, #20]
 8022256:	4650      	mov	r0, sl
 8022258:	460d      	mov	r5, r1
 802225a:	9905      	ldr	r1, [sp, #20]
 802225c:	47a8      	blx	r5
 802225e:	9b04      	ldr	r3, [sp, #16]
 8022260:	1c7a      	adds	r2, r7, #1
 8022262:	3301      	adds	r3, #1
 8022264:	d0ca      	beq.n	80221fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8022266:	f9b4 7000 	ldrsh.w	r7, [r4]
 802226a:	1abb      	subs	r3, r7, r2
 802226c:	2b00      	cmp	r3, #0
 802226e:	dd31      	ble.n	80222d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8022270:	2a00      	cmp	r2, #0
 8022272:	dabd      	bge.n	80221f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8022274:	2f00      	cmp	r7, #0
 8022276:	dd2d      	ble.n	80222d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8022278:	2200      	movs	r2, #0
 802227a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802227e:	19d1      	adds	r1, r2, r7
 8022280:	4299      	cmp	r1, r3
 8022282:	db02      	blt.n	802228a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8022284:	1a9f      	subs	r7, r3, r2
 8022286:	2f00      	cmp	r7, #0
 8022288:	dd24      	ble.n	80222d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802228a:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802228e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8022292:	f7ff ff3b 	bl	802210c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8022296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022298:	fb10 f003 	smulbb	r0, r0, r3
 802229c:	b280      	uxth	r0, r0
 802229e:	1c41      	adds	r1, r0, #1
 80222a0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80222a4:	1209      	asrs	r1, r1, #8
 80222a6:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80222aa:	d013      	beq.n	80222d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80222ac:	b292      	uxth	r2, r2
 80222ae:	9808      	ldr	r0, [sp, #32]
 80222b0:	b2c9      	uxtb	r1, r1
 80222b2:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80222b4:	b23f      	sxth	r7, r7
 80222b6:	4413      	add	r3, r2
 80222b8:	9102      	str	r1, [sp, #8]
 80222ba:	4402      	add	r2, r0
 80222bc:	fa0f f18b 	sxth.w	r1, fp
 80222c0:	f8da 0000 	ldr.w	r0, [sl]
 80222c4:	b21b      	sxth	r3, r3
 80222c6:	9100      	str	r1, [sp, #0]
 80222c8:	b212      	sxth	r2, r2
 80222ca:	9701      	str	r7, [sp, #4]
 80222cc:	9905      	ldr	r1, [sp, #20]
 80222ce:	6947      	ldr	r7, [r0, #20]
 80222d0:	4650      	mov	r0, sl
 80222d2:	47b8      	blx	r7
 80222d4:	464b      	mov	r3, r9
 80222d6:	e75e      	b.n	8022196 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80222d8:	2f00      	cmp	r7, #0
 80222da:	da96      	bge.n	802220a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80222dc:	e78e      	b.n	80221fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80222de:	2900      	cmp	r1, #0
 80222e0:	d0f8      	beq.n	80222d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80222e2:	e790      	b.n	8022206 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080222e4 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 80222e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80222e8:	461e      	mov	r6, r3
 80222ea:	4b36      	ldr	r3, [pc, #216]	@ (80223c4 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 80222ec:	2500      	movs	r5, #0
 80222ee:	f100 0814 	add.w	r8, r0, #20
 80222f2:	4604      	mov	r4, r0
 80222f4:	4617      	mov	r7, r2
 80222f6:	e9c0 3100 	strd	r3, r1, [r0]
 80222fa:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80222fe:	8185      	strh	r5, [r0, #12]
 8022300:	8103      	strh	r3, [r0, #8]
 8022302:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8022306:	81c5      	strh	r5, [r0, #14]
 8022308:	7283      	strb	r3, [r0, #10]
 802230a:	8205      	strh	r5, [r0, #16]
 802230c:	8245      	strh	r5, [r0, #18]
 802230e:	4640      	mov	r0, r8
 8022310:	f7ef fbfc 	bl	8011b0c <_ZN8touchgfx7OutlineC1Ev>
 8022314:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8022318:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802231c:	466b      	mov	r3, sp
 802231e:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8022322:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8022326:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802232a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802232e:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8022332:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8022336:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802233a:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802233e:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8022342:	6830      	ldr	r0, [r6, #0]
 8022344:	6871      	ldr	r1, [r6, #4]
 8022346:	8872      	ldrh	r2, [r6, #2]
 8022348:	8835      	ldrh	r5, [r6, #0]
 802234a:	c303      	stmia	r3!, {r0, r1}
 802234c:	887b      	ldrh	r3, [r7, #2]
 802234e:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8022352:	4413      	add	r3, r2
 8022354:	883a      	ldrh	r2, [r7, #0]
 8022356:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802235a:	442a      	add	r2, r5
 802235c:	81e3      	strh	r3, [r4, #14]
 802235e:	8220      	strh	r0, [r4, #16]
 8022360:	4668      	mov	r0, sp
 8022362:	81a2      	strh	r2, [r4, #12]
 8022364:	8261      	strh	r1, [r4, #18]
 8022366:	4639      	mov	r1, r7
 8022368:	f7f1 fda8 	bl	8013ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802236c:	f104 000c 	add.w	r0, r4, #12
 8022370:	f7f1 fd7c 	bl	8013e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022374:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8022378:	f8bd 2000 	ldrh.w	r2, [sp]
 802237c:	4640      	mov	r0, r8
 802237e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8022382:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8022386:	f7ef fba5 	bl	8011ad4 <_ZN8touchgfx7Outline5resetEv>
 802238a:	f9bd 3000 	ldrsh.w	r3, [sp]
 802238e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8022392:	4620      	mov	r0, r4
 8022394:	015b      	lsls	r3, r3, #5
 8022396:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8022398:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802239c:	015b      	lsls	r3, r3, #5
 802239e:	6523      	str	r3, [r4, #80]	@ 0x50
 80223a0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80223a4:	015b      	lsls	r3, r3, #5
 80223a6:	6563      	str	r3, [r4, #84]	@ 0x54
 80223a8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80223ac:	015b      	lsls	r3, r3, #5
 80223ae:	65a3      	str	r3, [r4, #88]	@ 0x58
 80223b0:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80223b4:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80223b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80223bc:	b002      	add	sp, #8
 80223be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80223c2:	bf00      	nop
 80223c4:	08027c10 	.word	0x08027c10

080223c8 <_ZN8touchgfx6Canvas5closeEv>:
 80223c8:	b538      	push	{r3, r4, r5, lr}
 80223ca:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80223ce:	4604      	mov	r4, r0
 80223d0:	b193      	cbz	r3, 80223f8 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80223d2:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 80223d6:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 80223da:	4213      	tst	r3, r2
 80223dc:	d10c      	bne.n	80223f8 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80223de:	f100 0514 	add.w	r5, r0, #20
 80223e2:	b123      	cbz	r3, 80223ee <_ZN8touchgfx6Canvas5closeEv+0x26>
 80223e4:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 80223e8:	4628      	mov	r0, r5
 80223ea:	f7ff fea3 	bl	8022134 <_ZN8touchgfx10Rasterizer6lineToEii>
 80223ee:	4628      	mov	r0, r5
 80223f0:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 80223f4:	f7ff fe9e 	bl	8022134 <_ZN8touchgfx10Rasterizer6lineToEii>
 80223f8:	2300      	movs	r3, #0
 80223fa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80223fe:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8022402:	4298      	cmp	r0, r3
 8022404:	bf34      	ite	cc
 8022406:	2000      	movcc	r0, #0
 8022408:	2001      	movcs	r0, #1
 802240a:	bd38      	pop	{r3, r4, r5, pc}

0802240c <_ZN8touchgfx6Canvas6renderEh>:
 802240c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8022410:	7a85      	ldrb	r5, [r0, #10]
 8022412:	4604      	mov	r4, r0
 8022414:	4369      	muls	r1, r5
 8022416:	1c4d      	adds	r5, r1, #1
 8022418:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802241c:	122d      	asrs	r5, r5, #8
 802241e:	f000 8098 	beq.w	8022552 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8022422:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8022426:	2b00      	cmp	r3, #0
 8022428:	f000 8093 	beq.w	8022552 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802242c:	f7ff ffcc 	bl	80223c8 <_ZN8touchgfx6Canvas5closeEv>
 8022430:	4607      	mov	r7, r0
 8022432:	2800      	cmp	r0, #0
 8022434:	d045      	beq.n	80224c2 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8022436:	6860      	ldr	r0, [r4, #4]
 8022438:	4e47      	ldr	r6, [pc, #284]	@ (8022558 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802243a:	6803      	ldr	r3, [r0, #0]
 802243c:	6837      	ldr	r7, [r6, #0]
 802243e:	689b      	ldr	r3, [r3, #8]
 8022440:	4798      	blx	r3
 8022442:	4601      	mov	r1, r0
 8022444:	4638      	mov	r0, r7
 8022446:	f7ed fa1f 	bl	800f888 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802244a:	4607      	mov	r7, r0
 802244c:	f7e1 fdfa 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 8022450:	6803      	ldr	r3, [r0, #0]
 8022452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022454:	4798      	blx	r3
 8022456:	4680      	mov	r8, r0
 8022458:	f7e1 fdf4 	bl	8004044 <_ZN8touchgfx3HAL3lcdEv>
 802245c:	6803      	ldr	r3, [r0, #0]
 802245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022460:	4798      	blx	r3
 8022462:	280b      	cmp	r0, #11
 8022464:	d85a      	bhi.n	802251c <_ZN8touchgfx6Canvas6renderEh+0x110>
 8022466:	e8df f000 	tbb	[pc, r0]
 802246a:	5b50      	.short	0x5b50
 802246c:	3059066b 	.word	0x3059066b
 8022470:	64646440 	.word	0x64646440
 8022474:	6464      	.short	0x6464
 8022476:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802247a:	2208      	movs	r2, #8
 802247c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022480:	fb91 f2f2 	sdiv	r2, r1, r2
 8022484:	fb08 2303 	mla	r3, r8, r3, r2
 8022488:	441f      	add	r7, r3
 802248a:	424b      	negs	r3, r1
 802248c:	f001 0107 	and.w	r1, r1, #7
 8022490:	f003 0307 	and.w	r3, r3, #7
 8022494:	bf58      	it	pl
 8022496:	4259      	negpl	r1, r3
 8022498:	b2c9      	uxtb	r1, r1
 802249a:	b2ed      	uxtb	r5, r5
 802249c:	463a      	mov	r2, r7
 802249e:	fa0f f388 	sxth.w	r3, r8
 80224a2:	f104 0014 	add.w	r0, r4, #20
 80224a6:	e9cd 1500 	strd	r1, r5, [sp]
 80224aa:	6861      	ldr	r1, [r4, #4]
 80224ac:	f7ff fe4e 	bl	802214c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80224b0:	4607      	mov	r7, r0
 80224b2:	6860      	ldr	r0, [r4, #4]
 80224b4:	6803      	ldr	r3, [r0, #0]
 80224b6:	691b      	ldr	r3, [r3, #16]
 80224b8:	4798      	blx	r3
 80224ba:	6830      	ldr	r0, [r6, #0]
 80224bc:	6803      	ldr	r3, [r0, #0]
 80224be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224c0:	4798      	blx	r3
 80224c2:	4638      	mov	r0, r7
 80224c4:	b002      	add	sp, #8
 80224c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224ca:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80224ce:	2204      	movs	r2, #4
 80224d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80224d4:	fb91 f2f2 	sdiv	r2, r1, r2
 80224d8:	fb08 2303 	mla	r3, r8, r3, r2
 80224dc:	441f      	add	r7, r3
 80224de:	424b      	negs	r3, r1
 80224e0:	f001 0103 	and.w	r1, r1, #3
 80224e4:	f003 0303 	and.w	r3, r3, #3
 80224e8:	e7d4      	b.n	8022494 <_ZN8touchgfx6Canvas6renderEh+0x88>
 80224ea:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80224ee:	2202      	movs	r2, #2
 80224f0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80224f4:	2900      	cmp	r1, #0
 80224f6:	fb91 f2f2 	sdiv	r2, r1, r2
 80224fa:	f001 0101 	and.w	r1, r1, #1
 80224fe:	fb08 2303 	mla	r3, r8, r3, r2
 8022502:	bfb8      	it	lt
 8022504:	4249      	neglt	r1, r1
 8022506:	441f      	add	r7, r3
 8022508:	e7c6      	b.n	8022498 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802250a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802250e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022512:	fb08 f303 	mul.w	r3, r8, r3
 8022516:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802251a:	441f      	add	r7, r3
 802251c:	2100      	movs	r1, #0
 802251e:	e7bc      	b.n	802249a <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8022520:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022524:	2103      	movs	r1, #3
 8022526:	fb08 f203 	mul.w	r2, r8, r3
 802252a:	89a3      	ldrh	r3, [r4, #12]
 802252c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8022530:	e7f3      	b.n	802251a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022532:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022536:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802253a:	fb08 2303 	mla	r3, r8, r3, r2
 802253e:	e7ec      	b.n	802251a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022540:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022548:	fb08 f303 	mul.w	r3, r8, r3
 802254c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022550:	e7e3      	b.n	802251a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022552:	2701      	movs	r7, #1
 8022554:	e7b5      	b.n	80224c2 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8022556:	bf00      	nop
 8022558:	240252fc 	.word	0x240252fc

0802255c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802255c:	4b06      	ldr	r3, [pc, #24]	@ (8022578 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802255e:	b510      	push	{r4, lr}
 8022560:	781b      	ldrb	r3, [r3, #0]
 8022562:	2b01      	cmp	r3, #1
 8022564:	d107      	bne.n	8022576 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8022566:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802256a:	680b      	ldr	r3, [r1, #0]
 802256c:	6814      	ldr	r4, [r2, #0]
 802256e:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8022572:	6013      	str	r3, [r2, #0]
 8022574:	600c      	str	r4, [r1, #0]
 8022576:	bd10      	pop	{r4, pc}
 8022578:	240252f4 	.word	0x240252f4

0802257c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802257c:	b513      	push	{r0, r1, r4, lr}
 802257e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8022582:	4604      	mov	r4, r0
 8022584:	e9cd 2100 	strd	r2, r1, [sp]
 8022588:	b9a3      	cbnz	r3, 80225b4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802258a:	466a      	mov	r2, sp
 802258c:	a901      	add	r1, sp, #4
 802258e:	4620      	mov	r0, r4
 8022590:	f7ff ffe4 	bl	802255c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022594:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8022596:	9901      	ldr	r1, [sp, #4]
 8022598:	9a00      	ldr	r2, [sp, #0]
 802259a:	1ac9      	subs	r1, r1, r3
 802259c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802259e:	1ad2      	subs	r2, r2, r3
 80225a0:	9101      	str	r1, [sp, #4]
 80225a2:	2a00      	cmp	r2, #0
 80225a4:	9200      	str	r2, [sp, #0]
 80225a6:	da0b      	bge.n	80225c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80225a8:	2301      	movs	r3, #1
 80225aa:	2900      	cmp	r1, #0
 80225ac:	da0e      	bge.n	80225cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80225ae:	f043 0304 	orr.w	r3, r3, #4
 80225b2:	e013      	b.n	80225dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80225b4:	f7ff ff08 	bl	80223c8 <_ZN8touchgfx6Canvas5closeEv>
 80225b8:	2800      	cmp	r0, #0
 80225ba:	d1e6      	bne.n	802258a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80225bc:	b002      	add	sp, #8
 80225be:	bd10      	pop	{r4, pc}
 80225c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80225c2:	429a      	cmp	r2, r3
 80225c4:	bfac      	ite	ge
 80225c6:	2302      	movge	r3, #2
 80225c8:	2300      	movlt	r3, #0
 80225ca:	e7ee      	b.n	80225aa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80225cc:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80225ce:	4281      	cmp	r1, r0
 80225d0:	bfac      	ite	ge
 80225d2:	2008      	movge	r0, #8
 80225d4:	2000      	movlt	r0, #0
 80225d6:	4318      	orrs	r0, r3
 80225d8:	b2c3      	uxtb	r3, r0
 80225da:	b158      	cbz	r0, 80225f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80225dc:	2200      	movs	r2, #0
 80225de:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 80225e2:	9901      	ldr	r1, [sp, #4]
 80225e4:	9a00      	ldr	r2, [sp, #0]
 80225e6:	66e1      	str	r1, [r4, #108]	@ 0x6c
 80225e8:	6722      	str	r2, [r4, #112]	@ 0x70
 80225ea:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 80225ee:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 80225f2:	e7e3      	b.n	80225bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80225f4:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80225f8:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80225fc:	4298      	cmp	r0, r3
 80225fe:	d803      	bhi.n	8022608 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8022600:	f104 0014 	add.w	r0, r4, #20
 8022604:	f7ef ff56 	bl	80124b4 <_ZN8touchgfx7Outline6moveToEii>
 8022608:	2301      	movs	r3, #1
 802260a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802260e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8022612:	2300      	movs	r3, #0
 8022614:	e7e5      	b.n	80225e2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08022616 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8022616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022618:	ab02      	add	r3, sp, #8
 802261a:	4604      	mov	r4, r0
 802261c:	9101      	str	r1, [sp, #4]
 802261e:	a901      	add	r1, sp, #4
 8022620:	f843 2d08 	str.w	r2, [r3, #-8]!
 8022624:	461a      	mov	r2, r3
 8022626:	f7ff ff99 	bl	802255c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802262a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802262c:	9901      	ldr	r1, [sp, #4]
 802262e:	9a00      	ldr	r2, [sp, #0]
 8022630:	1ac9      	subs	r1, r1, r3
 8022632:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8022634:	1ad2      	subs	r2, r2, r3
 8022636:	9101      	str	r1, [sp, #4]
 8022638:	2a00      	cmp	r2, #0
 802263a:	9200      	str	r2, [sp, #0]
 802263c:	db1c      	blt.n	8022678 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802263e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022640:	429a      	cmp	r2, r3
 8022642:	bfac      	ite	ge
 8022644:	2002      	movge	r0, #2
 8022646:	2000      	movlt	r0, #0
 8022648:	2900      	cmp	r1, #0
 802264a:	db17      	blt.n	802267c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802264c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802264e:	4299      	cmp	r1, r3
 8022650:	bfac      	ite	ge
 8022652:	2308      	movge	r3, #8
 8022654:	2300      	movlt	r3, #0
 8022656:	4303      	orrs	r3, r0
 8022658:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802265c:	b2dd      	uxtb	r5, r3
 802265e:	b978      	cbnz	r0, 8022680 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8022660:	f104 0014 	add.w	r0, r4, #20
 8022664:	f7ff fd66 	bl	8022134 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022668:	9b01      	ldr	r3, [sp, #4]
 802266a:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802266e:	6623      	str	r3, [r4, #96]	@ 0x60
 8022670:	9b00      	ldr	r3, [sp, #0]
 8022672:	6663      	str	r3, [r4, #100]	@ 0x64
 8022674:	b002      	add	sp, #8
 8022676:	bd70      	pop	{r4, r5, r6, pc}
 8022678:	2001      	movs	r0, #1
 802267a:	e7e5      	b.n	8022648 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802267c:	2304      	movs	r3, #4
 802267e:	e7ea      	b.n	8022656 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8022680:	b113      	cbz	r3, 8022688 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8022682:	ea10 0305 	ands.w	r3, r0, r5
 8022686:	d11c      	bne.n	80226c2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8022688:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802268c:	f104 0614 	add.w	r6, r4, #20
 8022690:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8022694:	b98b      	cbnz	r3, 80226ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8022696:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802269a:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802269e:	4298      	cmp	r0, r3
 80226a0:	d802      	bhi.n	80226a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80226a2:	4630      	mov	r0, r6
 80226a4:	f7ef ff06 	bl	80124b4 <_ZN8touchgfx7Outline6moveToEii>
 80226a8:	2301      	movs	r3, #1
 80226aa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80226ae:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80226b2:	4630      	mov	r0, r6
 80226b4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80226b8:	e7d4      	b.n	8022664 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80226ba:	4630      	mov	r0, r6
 80226bc:	f7ff fd3a 	bl	8022134 <_ZN8touchgfx10Rasterizer6lineToEii>
 80226c0:	e7f7      	b.n	80226b2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80226c2:	461d      	mov	r5, r3
 80226c4:	e7d0      	b.n	8022668 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080226c8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 80226c8:	b538      	push	{r3, r4, r5, lr}
 80226ca:	ed2d 8b10 	vpush	{d8-d15}
 80226ce:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 80226d2:	4605      	mov	r5, r0
 80226d4:	eeb0 ca40 	vmov.f32	s24, s0
 80226d8:	460c      	mov	r4, r1
 80226da:	eef0 ca60 	vmov.f32	s25, s1
 80226de:	ed9f ba57 	vldr	s22, [pc, #348]	@ 802283c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 80226e2:	eeb0 da41 	vmov.f32	s26, s2
 80226e6:	eef0 da61 	vmov.f32	s27, s3
 80226ea:	eeb0 ea42 	vmov.f32	s28, s4
 80226ee:	eef0 ea62 	vmov.f32	s29, s5
 80226f2:	eef0 aa6b 	vmov.f32	s21, s23
 80226f6:	2c08      	cmp	r4, #8
 80226f8:	d86e      	bhi.n	80227d8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 80226fa:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 80226fe:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8022702:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8022706:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802270a:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802270e:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8022712:	ee7c faad 	vadd.f32	s31, s25, s27
 8022716:	eee6 7a07 	vfma.f32	s15, s12, s14
 802271a:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802271e:	ee3d aaae 	vadd.f32	s20, s27, s29
 8022722:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8022726:	ee6f faab 	vmul.f32	s31, s31, s23
 802272a:	ee69 9aab 	vmul.f32	s19, s19, s23
 802272e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022732:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8022736:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802273e:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8022742:	ee68 8aab 	vmul.f32	s17, s17, s23
 8022746:	bf48      	it	mi
 8022748:	eef1 7a67 	vnegmi.f32	s15, s15
 802274c:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8022750:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8022754:	eef4 7acb 	vcmpe.f32	s15, s22
 8022758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802275c:	dd3f      	ble.n	80227de <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802275e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8022762:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022766:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802276a:	ee27 7a06 	vmul.f32	s14, s14, s12
 802276e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022776:	d847      	bhi.n	8022808 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8022778:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 802277c:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8022780:	f000 fa57 	bl	8022c32 <atan2f>
 8022784:	eeb0 8a40 	vmov.f32	s16, s0
 8022788:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 802278c:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8022790:	f000 fa4f 	bl	8022c32 <atan2f>
 8022794:	ee38 0a40 	vsub.f32	s0, s16, s0
 8022798:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8022840 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 802279c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80227a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227a4:	bf48      	it	mi
 80227a6:	eeb1 0a40 	vnegmi.f32	s0, s0
 80227aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80227ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227b2:	bfa4      	itt	ge
 80227b4:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8022844 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 80227b8:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80227bc:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8022848 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 80227c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80227c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227c8:	d51e      	bpl.n	8022808 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80227ca:	eef0 0a49 	vmov.f32	s1, s18
 80227ce:	4628      	mov	r0, r5
 80227d0:	eeb0 0a68 	vmov.f32	s0, s17
 80227d4:	f7ed ff5e 	bl	8010694 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80227d8:	ecbd 8b10 	vpop	{d8-d15}
 80227dc:	bd38      	pop	{r3, r4, r5, pc}
 80227de:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 80227e2:	eeb0 7a68 	vmov.f32	s14, s17
 80227e6:	eef0 6a49 	vmov.f32	s13, s18
 80227ea:	eea7 7aea 	vfms.f32	s14, s15, s21
 80227ee:	ee7c 7aae 	vadd.f32	s15, s25, s29
 80227f2:	eee7 6aea 	vfms.f32	s13, s15, s21
 80227f6:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80227fa:	eee7 7a07 	vfma.f32	s15, s14, s14
 80227fe:	eef4 7ac6 	vcmpe.f32	s15, s12
 8022802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022806:	d9e0      	bls.n	80227ca <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8022808:	3401      	adds	r4, #1
 802280a:	eef0 0a6c 	vmov.f32	s1, s25
 802280e:	eeb0 0a4c 	vmov.f32	s0, s24
 8022812:	4628      	mov	r0, r5
 8022814:	4621      	mov	r1, r4
 8022816:	eef0 2a49 	vmov.f32	s5, s18
 802281a:	eeb0 2a68 	vmov.f32	s4, s17
 802281e:	eef0 1a6f 	vmov.f32	s3, s31
 8022822:	eeb0 1a4f 	vmov.f32	s2, s30
 8022826:	f7ff ff4f 	bl	80226c8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802282a:	eef0 da4a 	vmov.f32	s27, s20
 802282e:	eeb0 da69 	vmov.f32	s26, s19
 8022832:	eef0 ca49 	vmov.f32	s25, s18
 8022836:	eeb0 ca68 	vmov.f32	s24, s17
 802283a:	e75c      	b.n	80226f6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802283c:	2edbe6ff 	.word	0x2edbe6ff
 8022840:	40490fdb 	.word	0x40490fdb
 8022844:	40c90fdb 	.word	0x40c90fdb
 8022848:	3dcccccd 	.word	0x3dcccccd

0802284c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802284c:	b530      	push	{r4, r5, lr}
 802284e:	ed2d 8b10 	vpush	{d8-d15}
 8022852:	eef0 8a40 	vmov.f32	s17, s0
 8022856:	b085      	sub	sp, #20
 8022858:	eef0 9a60 	vmov.f32	s19, s1
 802285c:	4604      	mov	r4, r0
 802285e:	eef0 fa41 	vmov.f32	s31, s2
 8022862:	460d      	mov	r5, r1
 8022864:	eeb0 fa61 	vmov.f32	s30, s3
 8022868:	eef0 ba42 	vmov.f32	s23, s4
 802286c:	eeb0 ca62 	vmov.f32	s24, s5
 8022870:	eef0 aa43 	vmov.f32	s21, s6
 8022874:	eeb0 ba63 	vmov.f32	s22, s7
 8022878:	2d08      	cmp	r5, #8
 802287a:	f200 8113 	bhi.w	8022aa4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 802287e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8022882:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8022886:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802288a:	ee38 daaf 	vadd.f32	s26, s17, s31
 802288e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8022892:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8022896:	ee2d da27 	vmul.f32	s26, s26, s15
 802289a:	ed8d 6a01 	vstr	s12, [sp, #4]
 802289e:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80228a2:	ee6c caa7 	vmul.f32	s25, s25, s15
 80228a6:	eeb0 ea4d 	vmov.f32	s28, s26
 80228aa:	ee79 da8f 	vadd.f32	s27, s19, s30
 80228ae:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 80228b2:	eea6 eaa7 	vfma.f32	s28, s13, s15
 80228b6:	ee66 6a27 	vmul.f32	s13, s12, s15
 80228ba:	ee6d daa7 	vmul.f32	s27, s27, s15
 80228be:	edcd 6a03 	vstr	s13, [sp, #12]
 80228c2:	eef0 6a6c 	vmov.f32	s13, s25
 80228c6:	eef0 ea6d 	vmov.f32	s29, s27
 80228ca:	ee2e ea27 	vmul.f32	s28, s28, s15
 80228ce:	eee7 6a27 	vfma.f32	s13, s14, s15
 80228d2:	eee7 ea27 	vfma.f32	s29, s14, s15
 80228d6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80228da:	ee6e eaa7 	vmul.f32	s29, s29, s15
 80228de:	eef0 6a67 	vmov.f32	s13, s15
 80228e2:	ed8d 7a02 	vstr	s14, [sp, #8]
 80228e6:	ed9d 7a03 	vldr	s14, [sp, #12]
 80228ea:	ee3e 9a07 	vadd.f32	s18, s28, s14
 80228ee:	ed9d 7a02 	vldr	s14, [sp, #8]
 80228f2:	ee3e aa87 	vadd.f32	s20, s29, s14
 80228f6:	ee29 9a27 	vmul.f32	s18, s18, s15
 80228fa:	ee2a aa27 	vmul.f32	s20, s20, s15
 80228fe:	2d00      	cmp	r5, #0
 8022900:	f000 810b 	beq.w	8022b1a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022904:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8022908:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8022b60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802290c:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8022910:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8022914:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8022918:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802291c:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8022920:	eea6 7a27 	vfma.f32	s14, s12, s15
 8022924:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8022928:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802292c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8022930:	eea5 6a27 	vfma.f32	s12, s10, s15
 8022934:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8022938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802293c:	bf48      	it	mi
 802293e:	eeb1 7a47 	vnegmi.f32	s14, s14
 8022942:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8022946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802294a:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802294e:	bf48      	it	mi
 8022950:	eeb1 6a46 	vnegmi.f32	s12, s12
 8022954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022958:	f340 80a8 	ble.w	8022aac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 802295c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8022960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022964:	dd5a      	ble.n	8022a1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8022966:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802296a:	ee37 7a06 	vadd.f32	s14, s14, s12
 802296e:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8022972:	ee27 7a07 	vmul.f32	s14, s14, s14
 8022976:	ee65 7a85 	vmul.f32	s15, s11, s10
 802297a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022982:	f200 80ca 	bhi.w	8022b1a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022986:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802298a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802298e:	f000 f950 	bl	8022c32 <atan2f>
 8022992:	eeb0 8a40 	vmov.f32	s16, s0
 8022996:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802299a:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802299e:	f000 f948 	bl	8022c32 <atan2f>
 80229a2:	ee38 fa40 	vsub.f32	s30, s16, s0
 80229a6:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80229aa:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 80229ae:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 80229b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229b6:	bf48      	it	mi
 80229b8:	eeb1 fa4f 	vnegmi.f32	s30, s30
 80229bc:	f000 f939 	bl	8022c32 <atan2f>
 80229c0:	ee30 0a48 	vsub.f32	s0, s0, s16
 80229c4:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8022b64 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80229c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80229cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229d0:	eeb4 fae7 	vcmpe.f32	s30, s15
 80229d4:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8022b64 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80229d8:	bf48      	it	mi
 80229da:	eeb1 0a40 	vnegmi.f32	s0, s0
 80229de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80229e6:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8022b68 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80229ea:	bfa4      	itt	ge
 80229ec:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8022b6c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80229f0:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 80229f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229f8:	bfa4      	itt	ge
 80229fa:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8022b6c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80229fe:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8022a02:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8022a06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a0e:	f140 8084 	bpl.w	8022b1a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022a12:	eef0 0a4a 	vmov.f32	s1, s20
 8022a16:	eeb0 0a49 	vmov.f32	s0, s18
 8022a1a:	e040      	b.n	8022a9e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8022a1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022a20:	ee27 7a07 	vmul.f32	s14, s14, s14
 8022a24:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8022a28:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a34:	d871      	bhi.n	8022b1a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022a36:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022a3a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022a3e:	f000 f8f8 	bl	8022c32 <atan2f>
 8022a42:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8022a46:	eeb0 8a40 	vmov.f32	s16, s0
 8022a4a:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8022a4e:	f000 f8f0 	bl	8022c32 <atan2f>
 8022a52:	ee38 0a40 	vsub.f32	s0, s16, s0
 8022a56:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8022b64 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022a5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a62:	bf48      	it	mi
 8022a64:	eeb1 0a40 	vnegmi.f32	s0, s0
 8022a68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a70:	bfa4      	itt	ge
 8022a72:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8022b6c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8022a76:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8022a7a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8022b68 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8022a7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a86:	d548      	bpl.n	8022b1a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022a88:	eef0 0a4f 	vmov.f32	s1, s30
 8022a8c:	4620      	mov	r0, r4
 8022a8e:	eeb0 0a6f 	vmov.f32	s0, s31
 8022a92:	f7ed fdff 	bl	8010694 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8022a96:	eef0 0a4c 	vmov.f32	s1, s24
 8022a9a:	eeb0 0a6b 	vmov.f32	s0, s23
 8022a9e:	4620      	mov	r0, r4
 8022aa0:	f7ed fdf8 	bl	8010694 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8022aa4:	b005      	add	sp, #20
 8022aa6:	ecbd 8b10 	vpop	{d8-d15}
 8022aaa:	bd30      	pop	{r4, r5, pc}
 8022aac:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8022b60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8022ab0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8022ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ab8:	dd19      	ble.n	8022aee <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8022aba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022abe:	ee26 7a06 	vmul.f32	s14, s12, s12
 8022ac2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8022ac6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ad2:	d822      	bhi.n	8022b1a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022ad4:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8022ad8:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8022adc:	f000 f8a9 	bl	8022c32 <atan2f>
 8022ae0:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022ae4:	eeb0 8a40 	vmov.f32	s16, s0
 8022ae8:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022aec:	e7af      	b.n	8022a4e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8022aee:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8022af2:	eeb0 7a49 	vmov.f32	s14, s18
 8022af6:	eeb0 6a4a 	vmov.f32	s12, s20
 8022afa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8022afe:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8022b02:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8022b06:	ee66 7a06 	vmul.f32	s15, s12, s12
 8022b0a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8022b0e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8022b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b16:	f67f af7c 	bls.w	8022a12 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8022b1a:	3501      	adds	r5, #1
 8022b1c:	eef0 0a69 	vmov.f32	s1, s19
 8022b20:	eeb0 0a68 	vmov.f32	s0, s17
 8022b24:	4620      	mov	r0, r4
 8022b26:	4629      	mov	r1, r5
 8022b28:	eef0 3a4a 	vmov.f32	s7, s20
 8022b2c:	eeb0 3a49 	vmov.f32	s6, s18
 8022b30:	eef0 2a6e 	vmov.f32	s5, s29
 8022b34:	eeb0 2a4e 	vmov.f32	s4, s28
 8022b38:	eef0 1a6d 	vmov.f32	s3, s27
 8022b3c:	eeb0 1a4d 	vmov.f32	s2, s26
 8022b40:	f7ff fe84 	bl	802284c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8022b44:	eeb0 ca6c 	vmov.f32	s24, s25
 8022b48:	eddd ba01 	vldr	s23, [sp, #4]
 8022b4c:	eef0 9a4a 	vmov.f32	s19, s20
 8022b50:	ed9d fa02 	vldr	s30, [sp, #8]
 8022b54:	eef0 8a49 	vmov.f32	s17, s18
 8022b58:	eddd fa03 	vldr	s31, [sp, #12]
 8022b5c:	e68c      	b.n	8022878 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8022b5e:	bf00      	nop
 8022b60:	2edbe6ff 	.word	0x2edbe6ff
 8022b64:	40490fdb 	.word	0x40490fdb
 8022b68:	3dcccccd 	.word	0x3dcccccd
 8022b6c:	40c90fdb 	.word	0x40c90fdb

08022b70 <_ZN8touchgfx6CanvasD1Ev>:
 8022b70:	4b04      	ldr	r3, [pc, #16]	@ (8022b84 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8022b72:	b510      	push	{r4, lr}
 8022b74:	4604      	mov	r4, r0
 8022b76:	f840 3b14 	str.w	r3, [r0], #20
 8022b7a:	f7ee ffa3 	bl	8011ac4 <_ZN8touchgfx7OutlineD1Ev>
 8022b7e:	4620      	mov	r0, r4
 8022b80:	bd10      	pop	{r4, pc}
 8022b82:	bf00      	nop
 8022b84:	08027c10 	.word	0x08027c10

08022b88 <_ZN8touchgfx6CanvasD0Ev>:
 8022b88:	b510      	push	{r4, lr}
 8022b8a:	4604      	mov	r4, r0
 8022b8c:	f7ff fff0 	bl	8022b70 <_ZN8touchgfx6CanvasD1Ev>
 8022b90:	2174      	movs	r1, #116	@ 0x74
 8022b92:	4620      	mov	r0, r4
 8022b94:	f000 f826 	bl	8022be4 <_ZdlPvj>
 8022b98:	4620      	mov	r0, r4
 8022b9a:	bd10      	pop	{r4, pc}

08022b9c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8022b9c:	790b      	ldrb	r3, [r1, #4]
 8022b9e:	2b00      	cmp	r3, #0
 8022ba0:	bf0c      	ite	eq
 8022ba2:	2301      	moveq	r3, #1
 8022ba4:	2300      	movne	r3, #0
 8022ba6:	b570      	push	{r4, r5, r6, lr}
 8022ba8:	4604      	mov	r4, r0
 8022baa:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8022bae:	460e      	mov	r6, r1
 8022bb0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8022bb4:	d109      	bne.n	8022bca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8022bb6:	b14d      	cbz	r5, 8022bcc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8022bb8:	7933      	ldrb	r3, [r6, #4]
 8022bba:	2b01      	cmp	r3, #1
 8022bbc:	d10c      	bne.n	8022bd8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8022bbe:	6823      	ldr	r3, [r4, #0]
 8022bc0:	4620      	mov	r0, r4
 8022bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022bc8:	4718      	bx	r3
 8022bca:	b12d      	cbz	r5, 8022bd8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8022bcc:	6823      	ldr	r3, [r4, #0]
 8022bce:	4620      	mov	r0, r4
 8022bd0:	695b      	ldr	r3, [r3, #20]
 8022bd2:	4798      	blx	r3
 8022bd4:	2d00      	cmp	r5, #0
 8022bd6:	d1ef      	bne.n	8022bb8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8022bd8:	bd70      	pop	{r4, r5, r6, pc}

08022bda <__aeabi_atexit>:
 8022bda:	460b      	mov	r3, r1
 8022bdc:	4601      	mov	r1, r0
 8022bde:	4618      	mov	r0, r3
 8022be0:	f000 bc58 	b.w	8023494 <__cxa_atexit>

08022be4 <_ZdlPvj>:
 8022be4:	f000 b812 	b.w	8022c0c <_ZdlPv>

08022be8 <__cxa_guard_acquire>:
 8022be8:	6802      	ldr	r2, [r0, #0]
 8022bea:	07d2      	lsls	r2, r2, #31
 8022bec:	4603      	mov	r3, r0
 8022bee:	d405      	bmi.n	8022bfc <__cxa_guard_acquire+0x14>
 8022bf0:	7842      	ldrb	r2, [r0, #1]
 8022bf2:	b102      	cbz	r2, 8022bf6 <__cxa_guard_acquire+0xe>
 8022bf4:	deff      	udf	#255	@ 0xff
 8022bf6:	2001      	movs	r0, #1
 8022bf8:	7058      	strb	r0, [r3, #1]
 8022bfa:	4770      	bx	lr
 8022bfc:	2000      	movs	r0, #0
 8022bfe:	4770      	bx	lr

08022c00 <__cxa_guard_release>:
 8022c00:	2301      	movs	r3, #1
 8022c02:	6003      	str	r3, [r0, #0]
 8022c04:	4770      	bx	lr

08022c06 <__cxa_pure_virtual>:
 8022c06:	b508      	push	{r3, lr}
 8022c08:	f000 f80e 	bl	8022c28 <_ZSt9terminatev>

08022c0c <_ZdlPv>:
 8022c0c:	f000 bb8c 	b.w	8023328 <free>

08022c10 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022c10:	b508      	push	{r3, lr}
 8022c12:	4780      	blx	r0
 8022c14:	f000 fb55 	bl	80232c2 <abort>

08022c18 <_ZSt13get_terminatev>:
 8022c18:	4b02      	ldr	r3, [pc, #8]	@ (8022c24 <_ZSt13get_terminatev+0xc>)
 8022c1a:	6818      	ldr	r0, [r3, #0]
 8022c1c:	f3bf 8f5b 	dmb	ish
 8022c20:	4770      	bx	lr
 8022c22:	bf00      	nop
 8022c24:	240000d8 	.word	0x240000d8

08022c28 <_ZSt9terminatev>:
 8022c28:	b508      	push	{r3, lr}
 8022c2a:	f7ff fff5 	bl	8022c18 <_ZSt13get_terminatev>
 8022c2e:	f7ff ffef 	bl	8022c10 <_ZN10__cxxabiv111__terminateEPFvvE>

08022c32 <atan2f>:
 8022c32:	f000 b9cd 	b.w	8022fd0 <__ieee754_atan2f>
	...

08022c38 <sqrtf>:
 8022c38:	b508      	push	{r3, lr}
 8022c3a:	ed2d 8b02 	vpush	{d8}
 8022c3e:	eeb0 8a40 	vmov.f32	s16, s0
 8022c42:	f000 f9c2 	bl	8022fca <__ieee754_sqrtf>
 8022c46:	eeb4 8a48 	vcmp.f32	s16, s16
 8022c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c4e:	d60c      	bvs.n	8022c6a <sqrtf+0x32>
 8022c50:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8022c70 <sqrtf+0x38>
 8022c54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8022c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c5c:	d505      	bpl.n	8022c6a <sqrtf+0x32>
 8022c5e:	f000 fe87 	bl	8023970 <__errno>
 8022c62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8022c66:	2321      	movs	r3, #33	@ 0x21
 8022c68:	6003      	str	r3, [r0, #0]
 8022c6a:	ecbd 8b02 	vpop	{d8}
 8022c6e:	bd08      	pop	{r3, pc}
 8022c70:	00000000 	.word	0x00000000

08022c74 <sinf_poly>:
 8022c74:	07cb      	lsls	r3, r1, #31
 8022c76:	d412      	bmi.n	8022c9e <sinf_poly+0x2a>
 8022c78:	ee21 5b00 	vmul.f64	d5, d1, d0
 8022c7c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8022c80:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8022c84:	eea6 7b01 	vfma.f64	d7, d6, d1
 8022c88:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8022c8c:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022c90:	eea6 0b05 	vfma.f64	d0, d6, d5
 8022c94:	eea7 0b01 	vfma.f64	d0, d7, d1
 8022c98:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022c9c:	4770      	bx	lr
 8022c9e:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8022ca2:	ee21 5b01 	vmul.f64	d5, d1, d1
 8022ca6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8022caa:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8022cae:	eea1 7b06 	vfma.f64	d7, d1, d6
 8022cb2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8022cb6:	eea1 0b06 	vfma.f64	d0, d1, d6
 8022cba:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8022cbe:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022cc2:	eea5 0b06 	vfma.f64	d0, d5, d6
 8022cc6:	e7e5      	b.n	8022c94 <sinf_poly+0x20>

08022cc8 <sinf>:
 8022cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022cca:	ee10 4a10 	vmov	r4, s0
 8022cce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8022cd2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8022cd6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8022cda:	eef0 7a40 	vmov.f32	s15, s0
 8022cde:	d218      	bcs.n	8022d12 <sinf+0x4a>
 8022ce0:	ee26 1b06 	vmul.f64	d1, d6, d6
 8022ce4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8022ce8:	d20a      	bcs.n	8022d00 <sinf+0x38>
 8022cea:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8022cee:	d103      	bne.n	8022cf8 <sinf+0x30>
 8022cf0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8022cf4:	ed8d 1a01 	vstr	s2, [sp, #4]
 8022cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8022cfc:	b003      	add	sp, #12
 8022cfe:	bd30      	pop	{r4, r5, pc}
 8022d00:	483b      	ldr	r0, [pc, #236]	@ (8022df0 <sinf+0x128>)
 8022d02:	eeb0 0b46 	vmov.f64	d0, d6
 8022d06:	2100      	movs	r1, #0
 8022d08:	b003      	add	sp, #12
 8022d0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022d0e:	f7ff bfb1 	b.w	8022c74 <sinf_poly>
 8022d12:	f240 422e 	movw	r2, #1070	@ 0x42e
 8022d16:	4293      	cmp	r3, r2
 8022d18:	d824      	bhi.n	8022d64 <sinf+0x9c>
 8022d1a:	4b35      	ldr	r3, [pc, #212]	@ (8022df0 <sinf+0x128>)
 8022d1c:	ed93 7b08 	vldr	d7, [r3, #32]
 8022d20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022d24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8022d28:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022d2c:	ee17 1a90 	vmov	r1, s15
 8022d30:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8022d34:	1609      	asrs	r1, r1, #24
 8022d36:	ee07 1a90 	vmov	s15, r1
 8022d3a:	f001 0203 	and.w	r2, r1, #3
 8022d3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022d42:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8022d46:	ed92 0b00 	vldr	d0, [r2]
 8022d4a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8022d4e:	f011 0f02 	tst.w	r1, #2
 8022d52:	eea5 6b47 	vfms.f64	d6, d5, d7
 8022d56:	bf08      	it	eq
 8022d58:	4618      	moveq	r0, r3
 8022d5a:	ee26 1b06 	vmul.f64	d1, d6, d6
 8022d5e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8022d62:	e7d1      	b.n	8022d08 <sinf+0x40>
 8022d64:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8022d68:	d237      	bcs.n	8022dda <sinf+0x112>
 8022d6a:	4922      	ldr	r1, [pc, #136]	@ (8022df4 <sinf+0x12c>)
 8022d6c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8022d70:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8022d74:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8022d78:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8022d7c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8022d80:	6a10      	ldr	r0, [r2, #32]
 8022d82:	6912      	ldr	r2, [r2, #16]
 8022d84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8022d88:	40ab      	lsls	r3, r5
 8022d8a:	fba0 5003 	umull	r5, r0, r0, r3
 8022d8e:	4359      	muls	r1, r3
 8022d90:	fbe3 0102 	umlal	r0, r1, r3, r2
 8022d94:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8022d98:	0f9d      	lsrs	r5, r3, #30
 8022d9a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8022d9e:	1ac9      	subs	r1, r1, r3
 8022da0:	f7dd fc7c 	bl	800069c <__aeabi_l2d>
 8022da4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8022da8:	4b11      	ldr	r3, [pc, #68]	@ (8022df0 <sinf+0x128>)
 8022daa:	f004 0203 	and.w	r2, r4, #3
 8022dae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022db2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8022de8 <sinf+0x120>
 8022db6:	ed92 0b00 	vldr	d0, [r2]
 8022dba:	ec41 0b17 	vmov	d7, r0, r1
 8022dbe:	f014 0f02 	tst.w	r4, #2
 8022dc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022dc6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022dca:	4629      	mov	r1, r5
 8022dcc:	bf08      	it	eq
 8022dce:	4618      	moveq	r0, r3
 8022dd0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8022dd4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022dd8:	e796      	b.n	8022d08 <sinf+0x40>
 8022dda:	b003      	add	sp, #12
 8022ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022de0:	f000 b8e4 	b.w	8022fac <__math_invalidf>
 8022de4:	f3af 8000 	nop.w
 8022de8:	54442d18 	.word	0x54442d18
 8022dec:	3c1921fb 	.word	0x3c1921fb
 8022df0:	08027c80 	.word	0x08027c80
 8022df4:	08027c1c 	.word	0x08027c1c

08022df8 <sinf_poly>:
 8022df8:	07cb      	lsls	r3, r1, #31
 8022dfa:	d412      	bmi.n	8022e22 <sinf_poly+0x2a>
 8022dfc:	ee21 5b00 	vmul.f64	d5, d1, d0
 8022e00:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8022e04:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8022e08:	eea6 7b01 	vfma.f64	d7, d6, d1
 8022e0c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8022e10:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022e14:	eea6 0b05 	vfma.f64	d0, d6, d5
 8022e18:	eea7 0b01 	vfma.f64	d0, d7, d1
 8022e1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022e20:	4770      	bx	lr
 8022e22:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8022e26:	ee21 5b01 	vmul.f64	d5, d1, d1
 8022e2a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8022e2e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8022e32:	eea1 7b06 	vfma.f64	d7, d1, d6
 8022e36:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8022e3a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8022e3e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8022e42:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022e46:	eea5 0b06 	vfma.f64	d0, d5, d6
 8022e4a:	e7e5      	b.n	8022e18 <sinf_poly+0x20>
 8022e4c:	0000      	movs	r0, r0
	...

08022e50 <cosf>:
 8022e50:	b538      	push	{r3, r4, r5, lr}
 8022e52:	ee10 4a10 	vmov	r4, s0
 8022e56:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8022e5a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8022e5e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8022e62:	d21f      	bcs.n	8022ea4 <cosf+0x54>
 8022e64:	ee27 7b07 	vmul.f64	d7, d7, d7
 8022e68:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8022e6c:	f0c0 8082 	bcc.w	8022f74 <cosf+0x124>
 8022e70:	ee27 4b07 	vmul.f64	d4, d7, d7
 8022e74:	4b44      	ldr	r3, [pc, #272]	@ (8022f88 <cosf+0x138>)
 8022e76:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8022e7a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8022e7e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8022e82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022e86:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8022e8a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8022e8e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8022e92:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022e96:	eea4 0b05 	vfma.f64	d0, d4, d5
 8022e9a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8022e9e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022ea2:	bd38      	pop	{r3, r4, r5, pc}
 8022ea4:	f240 422e 	movw	r2, #1070	@ 0x42e
 8022ea8:	4293      	cmp	r3, r2
 8022eaa:	d829      	bhi.n	8022f00 <cosf+0xb0>
 8022eac:	4b36      	ldr	r3, [pc, #216]	@ (8022f88 <cosf+0x138>)
 8022eae:	ed93 6b08 	vldr	d6, [r3, #32]
 8022eb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8022eb6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8022eba:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022ebe:	ee16 1a90 	vmov	r1, s13
 8022ec2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8022ec6:	1609      	asrs	r1, r1, #24
 8022ec8:	ee06 1a90 	vmov	s13, r1
 8022ecc:	f001 0203 	and.w	r2, r1, #3
 8022ed0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022ed4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8022ed8:	ed92 0b00 	vldr	d0, [r2]
 8022edc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8022ee0:	f011 0f02 	tst.w	r1, #2
 8022ee4:	f081 0101 	eor.w	r1, r1, #1
 8022ee8:	eea5 7b46 	vfms.f64	d7, d5, d6
 8022eec:	bf08      	it	eq
 8022eee:	4618      	moveq	r0, r3
 8022ef0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8022ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022ef8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022efc:	f7ff bf7c 	b.w	8022df8 <sinf_poly>
 8022f00:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8022f04:	d232      	bcs.n	8022f6c <cosf+0x11c>
 8022f06:	4921      	ldr	r1, [pc, #132]	@ (8022f8c <cosf+0x13c>)
 8022f08:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8022f0c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8022f10:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8022f14:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8022f18:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8022f1c:	6a10      	ldr	r0, [r2, #32]
 8022f1e:	6912      	ldr	r2, [r2, #16]
 8022f20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8022f24:	40ab      	lsls	r3, r5
 8022f26:	fba0 5003 	umull	r5, r0, r0, r3
 8022f2a:	4359      	muls	r1, r3
 8022f2c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8022f30:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8022f34:	0f9d      	lsrs	r5, r3, #30
 8022f36:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8022f3a:	1ac9      	subs	r1, r1, r3
 8022f3c:	f7dd fbae 	bl	800069c <__aeabi_l2d>
 8022f40:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8022f44:	4b10      	ldr	r3, [pc, #64]	@ (8022f88 <cosf+0x138>)
 8022f46:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8022f80 <cosf+0x130>
 8022f4a:	ec41 0b17 	vmov	d7, r0, r1
 8022f4e:	f004 0203 	and.w	r2, r4, #3
 8022f52:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022f56:	ed92 0b00 	vldr	d0, [r2]
 8022f5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022f5e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022f62:	f014 0f02 	tst.w	r4, #2
 8022f66:	f085 0101 	eor.w	r1, r5, #1
 8022f6a:	e7bf      	b.n	8022eec <cosf+0x9c>
 8022f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f70:	f000 b81c 	b.w	8022fac <__math_invalidf>
 8022f74:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8022f78:	e793      	b.n	8022ea2 <cosf+0x52>
 8022f7a:	bf00      	nop
 8022f7c:	f3af 8000 	nop.w
 8022f80:	54442d18 	.word	0x54442d18
 8022f84:	3c1921fb 	.word	0x3c1921fb
 8022f88:	08027c80 	.word	0x08027c80
 8022f8c:	08027c1c 	.word	0x08027c1c

08022f90 <with_errnof>:
 8022f90:	b510      	push	{r4, lr}
 8022f92:	ed2d 8b02 	vpush	{d8}
 8022f96:	eeb0 8a40 	vmov.f32	s16, s0
 8022f9a:	4604      	mov	r4, r0
 8022f9c:	f000 fce8 	bl	8023970 <__errno>
 8022fa0:	eeb0 0a48 	vmov.f32	s0, s16
 8022fa4:	ecbd 8b02 	vpop	{d8}
 8022fa8:	6004      	str	r4, [r0, #0]
 8022faa:	bd10      	pop	{r4, pc}

08022fac <__math_invalidf>:
 8022fac:	eef0 7a40 	vmov.f32	s15, s0
 8022fb0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8022fb4:	eef4 7a67 	vcmp.f32	s15, s15
 8022fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fbc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8022fc0:	d602      	bvs.n	8022fc8 <__math_invalidf+0x1c>
 8022fc2:	2021      	movs	r0, #33	@ 0x21
 8022fc4:	f7ff bfe4 	b.w	8022f90 <with_errnof>
 8022fc8:	4770      	bx	lr

08022fca <__ieee754_sqrtf>:
 8022fca:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8022fce:	4770      	bx	lr

08022fd0 <__ieee754_atan2f>:
 8022fd0:	ee10 2a90 	vmov	r2, s1
 8022fd4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8022fd8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022fdc:	b510      	push	{r4, lr}
 8022fde:	eef0 7a40 	vmov.f32	s15, s0
 8022fe2:	d806      	bhi.n	8022ff2 <__ieee754_atan2f+0x22>
 8022fe4:	ee10 0a10 	vmov	r0, s0
 8022fe8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8022fec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022ff0:	d904      	bls.n	8022ffc <__ieee754_atan2f+0x2c>
 8022ff2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8022ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8022ffa:	bd10      	pop	{r4, pc}
 8022ffc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8023000:	d103      	bne.n	802300a <__ieee754_atan2f+0x3a>
 8023002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023006:	f000 b881 	b.w	802310c <atanf>
 802300a:	1794      	asrs	r4, r2, #30
 802300c:	f004 0402 	and.w	r4, r4, #2
 8023010:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8023014:	b93b      	cbnz	r3, 8023026 <__ieee754_atan2f+0x56>
 8023016:	2c02      	cmp	r4, #2
 8023018:	d05c      	beq.n	80230d4 <__ieee754_atan2f+0x104>
 802301a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80230e8 <__ieee754_atan2f+0x118>
 802301e:	2c03      	cmp	r4, #3
 8023020:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8023024:	e7e7      	b.n	8022ff6 <__ieee754_atan2f+0x26>
 8023026:	b939      	cbnz	r1, 8023038 <__ieee754_atan2f+0x68>
 8023028:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80230ec <__ieee754_atan2f+0x11c>
 802302c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80230f0 <__ieee754_atan2f+0x120>
 8023030:	2800      	cmp	r0, #0
 8023032:	fe67 7a27 	vselge.f32	s15, s14, s15
 8023036:	e7de      	b.n	8022ff6 <__ieee754_atan2f+0x26>
 8023038:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802303c:	d110      	bne.n	8023060 <__ieee754_atan2f+0x90>
 802303e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8023042:	f104 34ff 	add.w	r4, r4, #4294967295
 8023046:	d107      	bne.n	8023058 <__ieee754_atan2f+0x88>
 8023048:	2c02      	cmp	r4, #2
 802304a:	d846      	bhi.n	80230da <__ieee754_atan2f+0x10a>
 802304c:	4b29      	ldr	r3, [pc, #164]	@ (80230f4 <__ieee754_atan2f+0x124>)
 802304e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023052:	edd3 7a00 	vldr	s15, [r3]
 8023056:	e7ce      	b.n	8022ff6 <__ieee754_atan2f+0x26>
 8023058:	2c02      	cmp	r4, #2
 802305a:	d841      	bhi.n	80230e0 <__ieee754_atan2f+0x110>
 802305c:	4b26      	ldr	r3, [pc, #152]	@ (80230f8 <__ieee754_atan2f+0x128>)
 802305e:	e7f6      	b.n	802304e <__ieee754_atan2f+0x7e>
 8023060:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8023064:	d0e0      	beq.n	8023028 <__ieee754_atan2f+0x58>
 8023066:	1a5b      	subs	r3, r3, r1
 8023068:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802306c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8023070:	da1a      	bge.n	80230a8 <__ieee754_atan2f+0xd8>
 8023072:	2a00      	cmp	r2, #0
 8023074:	da01      	bge.n	802307a <__ieee754_atan2f+0xaa>
 8023076:	313c      	adds	r1, #60	@ 0x3c
 8023078:	db19      	blt.n	80230ae <__ieee754_atan2f+0xde>
 802307a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802307e:	f000 f919 	bl	80232b4 <fabsf>
 8023082:	f000 f843 	bl	802310c <atanf>
 8023086:	eef0 7a40 	vmov.f32	s15, s0
 802308a:	2c01      	cmp	r4, #1
 802308c:	d012      	beq.n	80230b4 <__ieee754_atan2f+0xe4>
 802308e:	2c02      	cmp	r4, #2
 8023090:	d017      	beq.n	80230c2 <__ieee754_atan2f+0xf2>
 8023092:	2c00      	cmp	r4, #0
 8023094:	d0af      	beq.n	8022ff6 <__ieee754_atan2f+0x26>
 8023096:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80230fc <__ieee754_atan2f+0x12c>
 802309a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802309e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8023100 <__ieee754_atan2f+0x130>
 80230a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80230a6:	e7a6      	b.n	8022ff6 <__ieee754_atan2f+0x26>
 80230a8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80230f0 <__ieee754_atan2f+0x120>
 80230ac:	e7ed      	b.n	802308a <__ieee754_atan2f+0xba>
 80230ae:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8023104 <__ieee754_atan2f+0x134>
 80230b2:	e7ea      	b.n	802308a <__ieee754_atan2f+0xba>
 80230b4:	ee17 3a90 	vmov	r3, s15
 80230b8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80230bc:	ee07 3a90 	vmov	s15, r3
 80230c0:	e799      	b.n	8022ff6 <__ieee754_atan2f+0x26>
 80230c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80230fc <__ieee754_atan2f+0x12c>
 80230c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80230ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8023100 <__ieee754_atan2f+0x130>
 80230ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80230d2:	e790      	b.n	8022ff6 <__ieee754_atan2f+0x26>
 80230d4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8023100 <__ieee754_atan2f+0x130>
 80230d8:	e78d      	b.n	8022ff6 <__ieee754_atan2f+0x26>
 80230da:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8023108 <__ieee754_atan2f+0x138>
 80230de:	e78a      	b.n	8022ff6 <__ieee754_atan2f+0x26>
 80230e0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8023104 <__ieee754_atan2f+0x134>
 80230e4:	e787      	b.n	8022ff6 <__ieee754_atan2f+0x26>
 80230e6:	bf00      	nop
 80230e8:	c0490fdb 	.word	0xc0490fdb
 80230ec:	bfc90fdb 	.word	0xbfc90fdb
 80230f0:	3fc90fdb 	.word	0x3fc90fdb
 80230f4:	08027d6c 	.word	0x08027d6c
 80230f8:	08027d60 	.word	0x08027d60
 80230fc:	33bbbd2e 	.word	0x33bbbd2e
 8023100:	40490fdb 	.word	0x40490fdb
 8023104:	00000000 	.word	0x00000000
 8023108:	3f490fdb 	.word	0x3f490fdb

0802310c <atanf>:
 802310c:	b538      	push	{r3, r4, r5, lr}
 802310e:	ee10 5a10 	vmov	r5, s0
 8023112:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8023116:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802311a:	eef0 7a40 	vmov.f32	s15, s0
 802311e:	d30f      	bcc.n	8023140 <atanf+0x34>
 8023120:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8023124:	d904      	bls.n	8023130 <atanf+0x24>
 8023126:	ee70 7a00 	vadd.f32	s15, s0, s0
 802312a:	eeb0 0a67 	vmov.f32	s0, s15
 802312e:	bd38      	pop	{r3, r4, r5, pc}
 8023130:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8023268 <atanf+0x15c>
 8023134:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802326c <atanf+0x160>
 8023138:	2d00      	cmp	r5, #0
 802313a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802313e:	e7f4      	b.n	802312a <atanf+0x1e>
 8023140:	4b4b      	ldr	r3, [pc, #300]	@ (8023270 <atanf+0x164>)
 8023142:	429c      	cmp	r4, r3
 8023144:	d810      	bhi.n	8023168 <atanf+0x5c>
 8023146:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802314a:	d20a      	bcs.n	8023162 <atanf+0x56>
 802314c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8023274 <atanf+0x168>
 8023150:	ee30 7a07 	vadd.f32	s14, s0, s14
 8023154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8023158:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023160:	dce3      	bgt.n	802312a <atanf+0x1e>
 8023162:	f04f 33ff 	mov.w	r3, #4294967295
 8023166:	e013      	b.n	8023190 <atanf+0x84>
 8023168:	f000 f8a4 	bl	80232b4 <fabsf>
 802316c:	4b42      	ldr	r3, [pc, #264]	@ (8023278 <atanf+0x16c>)
 802316e:	429c      	cmp	r4, r3
 8023170:	d84f      	bhi.n	8023212 <atanf+0x106>
 8023172:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8023176:	429c      	cmp	r4, r3
 8023178:	d841      	bhi.n	80231fe <atanf+0xf2>
 802317a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802317e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8023182:	eea0 7a27 	vfma.f32	s14, s0, s15
 8023186:	2300      	movs	r3, #0
 8023188:	ee30 0a27 	vadd.f32	s0, s0, s15
 802318c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023190:	1c5a      	adds	r2, r3, #1
 8023192:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8023196:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802327c <atanf+0x170>
 802319a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8023280 <atanf+0x174>
 802319e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8023284 <atanf+0x178>
 80231a2:	ee66 6a06 	vmul.f32	s13, s12, s12
 80231a6:	eee6 5a87 	vfma.f32	s11, s13, s14
 80231aa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8023288 <atanf+0x17c>
 80231ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80231b2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802328c <atanf+0x180>
 80231b6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80231ba:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8023290 <atanf+0x184>
 80231be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80231c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8023294 <atanf+0x188>
 80231c6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80231ca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8023298 <atanf+0x18c>
 80231ce:	eea6 5a87 	vfma.f32	s10, s13, s14
 80231d2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802329c <atanf+0x190>
 80231d6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80231da:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80232a0 <atanf+0x194>
 80231de:	eea7 5a26 	vfma.f32	s10, s14, s13
 80231e2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80232a4 <atanf+0x198>
 80231e6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80231ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 80231ee:	eea5 7a86 	vfma.f32	s14, s11, s12
 80231f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80231f6:	d121      	bne.n	802323c <atanf+0x130>
 80231f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80231fc:	e795      	b.n	802312a <atanf+0x1e>
 80231fe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8023202:	ee30 7a67 	vsub.f32	s14, s0, s15
 8023206:	ee30 0a27 	vadd.f32	s0, s0, s15
 802320a:	2301      	movs	r3, #1
 802320c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023210:	e7be      	b.n	8023190 <atanf+0x84>
 8023212:	4b25      	ldr	r3, [pc, #148]	@ (80232a8 <atanf+0x19c>)
 8023214:	429c      	cmp	r4, r3
 8023216:	d80b      	bhi.n	8023230 <atanf+0x124>
 8023218:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802321c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023220:	eea0 7a27 	vfma.f32	s14, s0, s15
 8023224:	2302      	movs	r3, #2
 8023226:	ee70 6a67 	vsub.f32	s13, s0, s15
 802322a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802322e:	e7af      	b.n	8023190 <atanf+0x84>
 8023230:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8023234:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023238:	2303      	movs	r3, #3
 802323a:	e7a9      	b.n	8023190 <atanf+0x84>
 802323c:	4a1b      	ldr	r2, [pc, #108]	@ (80232ac <atanf+0x1a0>)
 802323e:	491c      	ldr	r1, [pc, #112]	@ (80232b0 <atanf+0x1a4>)
 8023240:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8023244:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023248:	edd3 6a00 	vldr	s13, [r3]
 802324c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8023250:	2d00      	cmp	r5, #0
 8023252:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023256:	edd2 7a00 	vldr	s15, [r2]
 802325a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802325e:	bfb8      	it	lt
 8023260:	eef1 7a67 	vneglt.f32	s15, s15
 8023264:	e761      	b.n	802312a <atanf+0x1e>
 8023266:	bf00      	nop
 8023268:	bfc90fdb 	.word	0xbfc90fdb
 802326c:	3fc90fdb 	.word	0x3fc90fdb
 8023270:	3edfffff 	.word	0x3edfffff
 8023274:	7149f2ca 	.word	0x7149f2ca
 8023278:	3f97ffff 	.word	0x3f97ffff
 802327c:	3c8569d7 	.word	0x3c8569d7
 8023280:	3d4bda59 	.word	0x3d4bda59
 8023284:	bd6ef16b 	.word	0xbd6ef16b
 8023288:	3d886b35 	.word	0x3d886b35
 802328c:	3dba2e6e 	.word	0x3dba2e6e
 8023290:	3e124925 	.word	0x3e124925
 8023294:	3eaaaaab 	.word	0x3eaaaaab
 8023298:	bd15a221 	.word	0xbd15a221
 802329c:	bd9d8795 	.word	0xbd9d8795
 80232a0:	bde38e38 	.word	0xbde38e38
 80232a4:	be4ccccd 	.word	0xbe4ccccd
 80232a8:	401bffff 	.word	0x401bffff
 80232ac:	08027d88 	.word	0x08027d88
 80232b0:	08027d78 	.word	0x08027d78

080232b4 <fabsf>:
 80232b4:	ee10 3a10 	vmov	r3, s0
 80232b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80232bc:	ee00 3a10 	vmov	s0, r3
 80232c0:	4770      	bx	lr

080232c2 <abort>:
 80232c2:	b508      	push	{r3, lr}
 80232c4:	2006      	movs	r0, #6
 80232c6:	f000 fae1 	bl	802388c <raise>
 80232ca:	2001      	movs	r0, #1
 80232cc:	f7de f9d4 	bl	8001678 <_exit>

080232d0 <__assert_func>:
 80232d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80232d2:	4614      	mov	r4, r2
 80232d4:	461a      	mov	r2, r3
 80232d6:	4b09      	ldr	r3, [pc, #36]	@ (80232fc <__assert_func+0x2c>)
 80232d8:	681b      	ldr	r3, [r3, #0]
 80232da:	4605      	mov	r5, r0
 80232dc:	68d8      	ldr	r0, [r3, #12]
 80232de:	b14c      	cbz	r4, 80232f4 <__assert_func+0x24>
 80232e0:	4b07      	ldr	r3, [pc, #28]	@ (8023300 <__assert_func+0x30>)
 80232e2:	9100      	str	r1, [sp, #0]
 80232e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80232e8:	4906      	ldr	r1, [pc, #24]	@ (8023304 <__assert_func+0x34>)
 80232ea:	462b      	mov	r3, r5
 80232ec:	f000 f984 	bl	80235f8 <fiprintf>
 80232f0:	f7ff ffe7 	bl	80232c2 <abort>
 80232f4:	4b04      	ldr	r3, [pc, #16]	@ (8023308 <__assert_func+0x38>)
 80232f6:	461c      	mov	r4, r3
 80232f8:	e7f3      	b.n	80232e2 <__assert_func+0x12>
 80232fa:	bf00      	nop
 80232fc:	240000e8 	.word	0x240000e8
 8023300:	0802650a 	.word	0x0802650a
 8023304:	08026517 	.word	0x08026517
 8023308:	08026545 	.word	0x08026545

0802330c <atexit>:
 802330c:	2300      	movs	r3, #0
 802330e:	4601      	mov	r1, r0
 8023310:	461a      	mov	r2, r3
 8023312:	4618      	mov	r0, r3
 8023314:	f000 bb68 	b.w	80239e8 <__register_exitproc>

08023318 <malloc>:
 8023318:	4b02      	ldr	r3, [pc, #8]	@ (8023324 <malloc+0xc>)
 802331a:	4601      	mov	r1, r0
 802331c:	6818      	ldr	r0, [r3, #0]
 802331e:	f000 b82d 	b.w	802337c <_malloc_r>
 8023322:	bf00      	nop
 8023324:	240000e8 	.word	0x240000e8

08023328 <free>:
 8023328:	4b02      	ldr	r3, [pc, #8]	@ (8023334 <free+0xc>)
 802332a:	4601      	mov	r1, r0
 802332c:	6818      	ldr	r0, [r3, #0]
 802332e:	f000 bbb7 	b.w	8023aa0 <_free_r>
 8023332:	bf00      	nop
 8023334:	240000e8 	.word	0x240000e8

08023338 <sbrk_aligned>:
 8023338:	b570      	push	{r4, r5, r6, lr}
 802333a:	4e0f      	ldr	r6, [pc, #60]	@ (8023378 <sbrk_aligned+0x40>)
 802333c:	460c      	mov	r4, r1
 802333e:	6831      	ldr	r1, [r6, #0]
 8023340:	4605      	mov	r5, r0
 8023342:	b911      	cbnz	r1, 802334a <sbrk_aligned+0x12>
 8023344:	f000 faf2 	bl	802392c <_sbrk_r>
 8023348:	6030      	str	r0, [r6, #0]
 802334a:	4621      	mov	r1, r4
 802334c:	4628      	mov	r0, r5
 802334e:	f000 faed 	bl	802392c <_sbrk_r>
 8023352:	1c43      	adds	r3, r0, #1
 8023354:	d103      	bne.n	802335e <sbrk_aligned+0x26>
 8023356:	f04f 34ff 	mov.w	r4, #4294967295
 802335a:	4620      	mov	r0, r4
 802335c:	bd70      	pop	{r4, r5, r6, pc}
 802335e:	1cc4      	adds	r4, r0, #3
 8023360:	f024 0403 	bic.w	r4, r4, #3
 8023364:	42a0      	cmp	r0, r4
 8023366:	d0f8      	beq.n	802335a <sbrk_aligned+0x22>
 8023368:	1a21      	subs	r1, r4, r0
 802336a:	4628      	mov	r0, r5
 802336c:	f000 fade 	bl	802392c <_sbrk_r>
 8023370:	3001      	adds	r0, #1
 8023372:	d1f2      	bne.n	802335a <sbrk_aligned+0x22>
 8023374:	e7ef      	b.n	8023356 <sbrk_aligned+0x1e>
 8023376:	bf00      	nop
 8023378:	24025d38 	.word	0x24025d38

0802337c <_malloc_r>:
 802337c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023380:	1ccd      	adds	r5, r1, #3
 8023382:	f025 0503 	bic.w	r5, r5, #3
 8023386:	3508      	adds	r5, #8
 8023388:	2d0c      	cmp	r5, #12
 802338a:	bf38      	it	cc
 802338c:	250c      	movcc	r5, #12
 802338e:	2d00      	cmp	r5, #0
 8023390:	4606      	mov	r6, r0
 8023392:	db01      	blt.n	8023398 <_malloc_r+0x1c>
 8023394:	42a9      	cmp	r1, r5
 8023396:	d904      	bls.n	80233a2 <_malloc_r+0x26>
 8023398:	230c      	movs	r3, #12
 802339a:	6033      	str	r3, [r6, #0]
 802339c:	2000      	movs	r0, #0
 802339e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80233a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023478 <_malloc_r+0xfc>
 80233a6:	f000 f869 	bl	802347c <__malloc_lock>
 80233aa:	f8d8 3000 	ldr.w	r3, [r8]
 80233ae:	461c      	mov	r4, r3
 80233b0:	bb44      	cbnz	r4, 8023404 <_malloc_r+0x88>
 80233b2:	4629      	mov	r1, r5
 80233b4:	4630      	mov	r0, r6
 80233b6:	f7ff ffbf 	bl	8023338 <sbrk_aligned>
 80233ba:	1c43      	adds	r3, r0, #1
 80233bc:	4604      	mov	r4, r0
 80233be:	d158      	bne.n	8023472 <_malloc_r+0xf6>
 80233c0:	f8d8 4000 	ldr.w	r4, [r8]
 80233c4:	4627      	mov	r7, r4
 80233c6:	2f00      	cmp	r7, #0
 80233c8:	d143      	bne.n	8023452 <_malloc_r+0xd6>
 80233ca:	2c00      	cmp	r4, #0
 80233cc:	d04b      	beq.n	8023466 <_malloc_r+0xea>
 80233ce:	6823      	ldr	r3, [r4, #0]
 80233d0:	4639      	mov	r1, r7
 80233d2:	4630      	mov	r0, r6
 80233d4:	eb04 0903 	add.w	r9, r4, r3
 80233d8:	f000 faa8 	bl	802392c <_sbrk_r>
 80233dc:	4581      	cmp	r9, r0
 80233de:	d142      	bne.n	8023466 <_malloc_r+0xea>
 80233e0:	6821      	ldr	r1, [r4, #0]
 80233e2:	1a6d      	subs	r5, r5, r1
 80233e4:	4629      	mov	r1, r5
 80233e6:	4630      	mov	r0, r6
 80233e8:	f7ff ffa6 	bl	8023338 <sbrk_aligned>
 80233ec:	3001      	adds	r0, #1
 80233ee:	d03a      	beq.n	8023466 <_malloc_r+0xea>
 80233f0:	6823      	ldr	r3, [r4, #0]
 80233f2:	442b      	add	r3, r5
 80233f4:	6023      	str	r3, [r4, #0]
 80233f6:	f8d8 3000 	ldr.w	r3, [r8]
 80233fa:	685a      	ldr	r2, [r3, #4]
 80233fc:	bb62      	cbnz	r2, 8023458 <_malloc_r+0xdc>
 80233fe:	f8c8 7000 	str.w	r7, [r8]
 8023402:	e00f      	b.n	8023424 <_malloc_r+0xa8>
 8023404:	6822      	ldr	r2, [r4, #0]
 8023406:	1b52      	subs	r2, r2, r5
 8023408:	d420      	bmi.n	802344c <_malloc_r+0xd0>
 802340a:	2a0b      	cmp	r2, #11
 802340c:	d917      	bls.n	802343e <_malloc_r+0xc2>
 802340e:	1961      	adds	r1, r4, r5
 8023410:	42a3      	cmp	r3, r4
 8023412:	6025      	str	r5, [r4, #0]
 8023414:	bf18      	it	ne
 8023416:	6059      	strne	r1, [r3, #4]
 8023418:	6863      	ldr	r3, [r4, #4]
 802341a:	bf08      	it	eq
 802341c:	f8c8 1000 	streq.w	r1, [r8]
 8023420:	5162      	str	r2, [r4, r5]
 8023422:	604b      	str	r3, [r1, #4]
 8023424:	4630      	mov	r0, r6
 8023426:	f000 f82f 	bl	8023488 <__malloc_unlock>
 802342a:	f104 000b 	add.w	r0, r4, #11
 802342e:	1d23      	adds	r3, r4, #4
 8023430:	f020 0007 	bic.w	r0, r0, #7
 8023434:	1ac2      	subs	r2, r0, r3
 8023436:	bf1c      	itt	ne
 8023438:	1a1b      	subne	r3, r3, r0
 802343a:	50a3      	strne	r3, [r4, r2]
 802343c:	e7af      	b.n	802339e <_malloc_r+0x22>
 802343e:	6862      	ldr	r2, [r4, #4]
 8023440:	42a3      	cmp	r3, r4
 8023442:	bf0c      	ite	eq
 8023444:	f8c8 2000 	streq.w	r2, [r8]
 8023448:	605a      	strne	r2, [r3, #4]
 802344a:	e7eb      	b.n	8023424 <_malloc_r+0xa8>
 802344c:	4623      	mov	r3, r4
 802344e:	6864      	ldr	r4, [r4, #4]
 8023450:	e7ae      	b.n	80233b0 <_malloc_r+0x34>
 8023452:	463c      	mov	r4, r7
 8023454:	687f      	ldr	r7, [r7, #4]
 8023456:	e7b6      	b.n	80233c6 <_malloc_r+0x4a>
 8023458:	461a      	mov	r2, r3
 802345a:	685b      	ldr	r3, [r3, #4]
 802345c:	42a3      	cmp	r3, r4
 802345e:	d1fb      	bne.n	8023458 <_malloc_r+0xdc>
 8023460:	2300      	movs	r3, #0
 8023462:	6053      	str	r3, [r2, #4]
 8023464:	e7de      	b.n	8023424 <_malloc_r+0xa8>
 8023466:	230c      	movs	r3, #12
 8023468:	6033      	str	r3, [r6, #0]
 802346a:	4630      	mov	r0, r6
 802346c:	f000 f80c 	bl	8023488 <__malloc_unlock>
 8023470:	e794      	b.n	802339c <_malloc_r+0x20>
 8023472:	6005      	str	r5, [r0, #0]
 8023474:	e7d6      	b.n	8023424 <_malloc_r+0xa8>
 8023476:	bf00      	nop
 8023478:	24025d3c 	.word	0x24025d3c

0802347c <__malloc_lock>:
 802347c:	4801      	ldr	r0, [pc, #4]	@ (8023484 <__malloc_lock+0x8>)
 802347e:	f000 baa2 	b.w	80239c6 <__retarget_lock_acquire_recursive>
 8023482:	bf00      	nop
 8023484:	24025e80 	.word	0x24025e80

08023488 <__malloc_unlock>:
 8023488:	4801      	ldr	r0, [pc, #4]	@ (8023490 <__malloc_unlock+0x8>)
 802348a:	f000 ba9d 	b.w	80239c8 <__retarget_lock_release_recursive>
 802348e:	bf00      	nop
 8023490:	24025e80 	.word	0x24025e80

08023494 <__cxa_atexit>:
 8023494:	b510      	push	{r4, lr}
 8023496:	4604      	mov	r4, r0
 8023498:	4804      	ldr	r0, [pc, #16]	@ (80234ac <__cxa_atexit+0x18>)
 802349a:	4613      	mov	r3, r2
 802349c:	b120      	cbz	r0, 80234a8 <__cxa_atexit+0x14>
 802349e:	460a      	mov	r2, r1
 80234a0:	2002      	movs	r0, #2
 80234a2:	4621      	mov	r1, r4
 80234a4:	f000 faa0 	bl	80239e8 <__register_exitproc>
 80234a8:	bd10      	pop	{r4, pc}
 80234aa:	bf00      	nop
 80234ac:	080239e9 	.word	0x080239e9

080234b0 <std>:
 80234b0:	2300      	movs	r3, #0
 80234b2:	b510      	push	{r4, lr}
 80234b4:	4604      	mov	r4, r0
 80234b6:	e9c0 3300 	strd	r3, r3, [r0]
 80234ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80234be:	6083      	str	r3, [r0, #8]
 80234c0:	8181      	strh	r1, [r0, #12]
 80234c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80234c4:	81c2      	strh	r2, [r0, #14]
 80234c6:	6183      	str	r3, [r0, #24]
 80234c8:	4619      	mov	r1, r3
 80234ca:	2208      	movs	r2, #8
 80234cc:	305c      	adds	r0, #92	@ 0x5c
 80234ce:	f000 f99b 	bl	8023808 <memset>
 80234d2:	4b0d      	ldr	r3, [pc, #52]	@ (8023508 <std+0x58>)
 80234d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80234d6:	4b0d      	ldr	r3, [pc, #52]	@ (802350c <std+0x5c>)
 80234d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80234da:	4b0d      	ldr	r3, [pc, #52]	@ (8023510 <std+0x60>)
 80234dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80234de:	4b0d      	ldr	r3, [pc, #52]	@ (8023514 <std+0x64>)
 80234e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80234e2:	4b0d      	ldr	r3, [pc, #52]	@ (8023518 <std+0x68>)
 80234e4:	6224      	str	r4, [r4, #32]
 80234e6:	429c      	cmp	r4, r3
 80234e8:	d006      	beq.n	80234f8 <std+0x48>
 80234ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80234ee:	4294      	cmp	r4, r2
 80234f0:	d002      	beq.n	80234f8 <std+0x48>
 80234f2:	33d0      	adds	r3, #208	@ 0xd0
 80234f4:	429c      	cmp	r4, r3
 80234f6:	d105      	bne.n	8023504 <std+0x54>
 80234f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80234fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023500:	f000 ba60 	b.w	80239c4 <__retarget_lock_init_recursive>
 8023504:	bd10      	pop	{r4, pc}
 8023506:	bf00      	nop
 8023508:	08023659 	.word	0x08023659
 802350c:	0802367b 	.word	0x0802367b
 8023510:	080236b3 	.word	0x080236b3
 8023514:	080236d7 	.word	0x080236d7
 8023518:	24025d40 	.word	0x24025d40

0802351c <stdio_exit_handler>:
 802351c:	4a02      	ldr	r2, [pc, #8]	@ (8023528 <stdio_exit_handler+0xc>)
 802351e:	4903      	ldr	r1, [pc, #12]	@ (802352c <stdio_exit_handler+0x10>)
 8023520:	4803      	ldr	r0, [pc, #12]	@ (8023530 <stdio_exit_handler+0x14>)
 8023522:	f000 b87b 	b.w	802361c <_fwalk_sglue>
 8023526:	bf00      	nop
 8023528:	240000dc 	.word	0x240000dc
 802352c:	080241d9 	.word	0x080241d9
 8023530:	240000ec 	.word	0x240000ec

08023534 <cleanup_stdio>:
 8023534:	6841      	ldr	r1, [r0, #4]
 8023536:	4b0c      	ldr	r3, [pc, #48]	@ (8023568 <cleanup_stdio+0x34>)
 8023538:	4299      	cmp	r1, r3
 802353a:	b510      	push	{r4, lr}
 802353c:	4604      	mov	r4, r0
 802353e:	d001      	beq.n	8023544 <cleanup_stdio+0x10>
 8023540:	f000 fe4a 	bl	80241d8 <_fflush_r>
 8023544:	68a1      	ldr	r1, [r4, #8]
 8023546:	4b09      	ldr	r3, [pc, #36]	@ (802356c <cleanup_stdio+0x38>)
 8023548:	4299      	cmp	r1, r3
 802354a:	d002      	beq.n	8023552 <cleanup_stdio+0x1e>
 802354c:	4620      	mov	r0, r4
 802354e:	f000 fe43 	bl	80241d8 <_fflush_r>
 8023552:	68e1      	ldr	r1, [r4, #12]
 8023554:	4b06      	ldr	r3, [pc, #24]	@ (8023570 <cleanup_stdio+0x3c>)
 8023556:	4299      	cmp	r1, r3
 8023558:	d004      	beq.n	8023564 <cleanup_stdio+0x30>
 802355a:	4620      	mov	r0, r4
 802355c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023560:	f000 be3a 	b.w	80241d8 <_fflush_r>
 8023564:	bd10      	pop	{r4, pc}
 8023566:	bf00      	nop
 8023568:	24025d40 	.word	0x24025d40
 802356c:	24025da8 	.word	0x24025da8
 8023570:	24025e10 	.word	0x24025e10

08023574 <global_stdio_init.part.0>:
 8023574:	b510      	push	{r4, lr}
 8023576:	4b0b      	ldr	r3, [pc, #44]	@ (80235a4 <global_stdio_init.part.0+0x30>)
 8023578:	4c0b      	ldr	r4, [pc, #44]	@ (80235a8 <global_stdio_init.part.0+0x34>)
 802357a:	4a0c      	ldr	r2, [pc, #48]	@ (80235ac <global_stdio_init.part.0+0x38>)
 802357c:	601a      	str	r2, [r3, #0]
 802357e:	4620      	mov	r0, r4
 8023580:	2200      	movs	r2, #0
 8023582:	2104      	movs	r1, #4
 8023584:	f7ff ff94 	bl	80234b0 <std>
 8023588:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802358c:	2201      	movs	r2, #1
 802358e:	2109      	movs	r1, #9
 8023590:	f7ff ff8e 	bl	80234b0 <std>
 8023594:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023598:	2202      	movs	r2, #2
 802359a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802359e:	2112      	movs	r1, #18
 80235a0:	f7ff bf86 	b.w	80234b0 <std>
 80235a4:	24025e78 	.word	0x24025e78
 80235a8:	24025d40 	.word	0x24025d40
 80235ac:	0802351d 	.word	0x0802351d

080235b0 <__sfp_lock_acquire>:
 80235b0:	4801      	ldr	r0, [pc, #4]	@ (80235b8 <__sfp_lock_acquire+0x8>)
 80235b2:	f000 ba08 	b.w	80239c6 <__retarget_lock_acquire_recursive>
 80235b6:	bf00      	nop
 80235b8:	24025e82 	.word	0x24025e82

080235bc <__sfp_lock_release>:
 80235bc:	4801      	ldr	r0, [pc, #4]	@ (80235c4 <__sfp_lock_release+0x8>)
 80235be:	f000 ba03 	b.w	80239c8 <__retarget_lock_release_recursive>
 80235c2:	bf00      	nop
 80235c4:	24025e82 	.word	0x24025e82

080235c8 <__sinit>:
 80235c8:	b510      	push	{r4, lr}
 80235ca:	4604      	mov	r4, r0
 80235cc:	f7ff fff0 	bl	80235b0 <__sfp_lock_acquire>
 80235d0:	6a23      	ldr	r3, [r4, #32]
 80235d2:	b11b      	cbz	r3, 80235dc <__sinit+0x14>
 80235d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235d8:	f7ff bff0 	b.w	80235bc <__sfp_lock_release>
 80235dc:	4b04      	ldr	r3, [pc, #16]	@ (80235f0 <__sinit+0x28>)
 80235de:	6223      	str	r3, [r4, #32]
 80235e0:	4b04      	ldr	r3, [pc, #16]	@ (80235f4 <__sinit+0x2c>)
 80235e2:	681b      	ldr	r3, [r3, #0]
 80235e4:	2b00      	cmp	r3, #0
 80235e6:	d1f5      	bne.n	80235d4 <__sinit+0xc>
 80235e8:	f7ff ffc4 	bl	8023574 <global_stdio_init.part.0>
 80235ec:	e7f2      	b.n	80235d4 <__sinit+0xc>
 80235ee:	bf00      	nop
 80235f0:	08023535 	.word	0x08023535
 80235f4:	24025e78 	.word	0x24025e78

080235f8 <fiprintf>:
 80235f8:	b40e      	push	{r1, r2, r3}
 80235fa:	b503      	push	{r0, r1, lr}
 80235fc:	4601      	mov	r1, r0
 80235fe:	ab03      	add	r3, sp, #12
 8023600:	4805      	ldr	r0, [pc, #20]	@ (8023618 <fiprintf+0x20>)
 8023602:	f853 2b04 	ldr.w	r2, [r3], #4
 8023606:	6800      	ldr	r0, [r0, #0]
 8023608:	9301      	str	r3, [sp, #4]
 802360a:	f000 fabd 	bl	8023b88 <_vfiprintf_r>
 802360e:	b002      	add	sp, #8
 8023610:	f85d eb04 	ldr.w	lr, [sp], #4
 8023614:	b003      	add	sp, #12
 8023616:	4770      	bx	lr
 8023618:	240000e8 	.word	0x240000e8

0802361c <_fwalk_sglue>:
 802361c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023620:	4607      	mov	r7, r0
 8023622:	4688      	mov	r8, r1
 8023624:	4614      	mov	r4, r2
 8023626:	2600      	movs	r6, #0
 8023628:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802362c:	f1b9 0901 	subs.w	r9, r9, #1
 8023630:	d505      	bpl.n	802363e <_fwalk_sglue+0x22>
 8023632:	6824      	ldr	r4, [r4, #0]
 8023634:	2c00      	cmp	r4, #0
 8023636:	d1f7      	bne.n	8023628 <_fwalk_sglue+0xc>
 8023638:	4630      	mov	r0, r6
 802363a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802363e:	89ab      	ldrh	r3, [r5, #12]
 8023640:	2b01      	cmp	r3, #1
 8023642:	d907      	bls.n	8023654 <_fwalk_sglue+0x38>
 8023644:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023648:	3301      	adds	r3, #1
 802364a:	d003      	beq.n	8023654 <_fwalk_sglue+0x38>
 802364c:	4629      	mov	r1, r5
 802364e:	4638      	mov	r0, r7
 8023650:	47c0      	blx	r8
 8023652:	4306      	orrs	r6, r0
 8023654:	3568      	adds	r5, #104	@ 0x68
 8023656:	e7e9      	b.n	802362c <_fwalk_sglue+0x10>

08023658 <__sread>:
 8023658:	b510      	push	{r4, lr}
 802365a:	460c      	mov	r4, r1
 802365c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023660:	f000 f93e 	bl	80238e0 <_read_r>
 8023664:	2800      	cmp	r0, #0
 8023666:	bfab      	itete	ge
 8023668:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802366a:	89a3      	ldrhlt	r3, [r4, #12]
 802366c:	181b      	addge	r3, r3, r0
 802366e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023672:	bfac      	ite	ge
 8023674:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023676:	81a3      	strhlt	r3, [r4, #12]
 8023678:	bd10      	pop	{r4, pc}

0802367a <__swrite>:
 802367a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802367e:	461f      	mov	r7, r3
 8023680:	898b      	ldrh	r3, [r1, #12]
 8023682:	05db      	lsls	r3, r3, #23
 8023684:	4605      	mov	r5, r0
 8023686:	460c      	mov	r4, r1
 8023688:	4616      	mov	r6, r2
 802368a:	d505      	bpl.n	8023698 <__swrite+0x1e>
 802368c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023690:	2302      	movs	r3, #2
 8023692:	2200      	movs	r2, #0
 8023694:	f000 f912 	bl	80238bc <_lseek_r>
 8023698:	89a3      	ldrh	r3, [r4, #12]
 802369a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802369e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80236a2:	81a3      	strh	r3, [r4, #12]
 80236a4:	4632      	mov	r2, r6
 80236a6:	463b      	mov	r3, r7
 80236a8:	4628      	mov	r0, r5
 80236aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80236ae:	f000 b94d 	b.w	802394c <_write_r>

080236b2 <__sseek>:
 80236b2:	b510      	push	{r4, lr}
 80236b4:	460c      	mov	r4, r1
 80236b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236ba:	f000 f8ff 	bl	80238bc <_lseek_r>
 80236be:	1c43      	adds	r3, r0, #1
 80236c0:	89a3      	ldrh	r3, [r4, #12]
 80236c2:	bf15      	itete	ne
 80236c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80236c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80236ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80236ce:	81a3      	strheq	r3, [r4, #12]
 80236d0:	bf18      	it	ne
 80236d2:	81a3      	strhne	r3, [r4, #12]
 80236d4:	bd10      	pop	{r4, pc}

080236d6 <__sclose>:
 80236d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236da:	f000 b8df 	b.w	802389c <_close_r>

080236de <__swbuf_r>:
 80236de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80236e0:	460e      	mov	r6, r1
 80236e2:	4614      	mov	r4, r2
 80236e4:	4605      	mov	r5, r0
 80236e6:	b118      	cbz	r0, 80236f0 <__swbuf_r+0x12>
 80236e8:	6a03      	ldr	r3, [r0, #32]
 80236ea:	b90b      	cbnz	r3, 80236f0 <__swbuf_r+0x12>
 80236ec:	f7ff ff6c 	bl	80235c8 <__sinit>
 80236f0:	69a3      	ldr	r3, [r4, #24]
 80236f2:	60a3      	str	r3, [r4, #8]
 80236f4:	89a3      	ldrh	r3, [r4, #12]
 80236f6:	071a      	lsls	r2, r3, #28
 80236f8:	d501      	bpl.n	80236fe <__swbuf_r+0x20>
 80236fa:	6923      	ldr	r3, [r4, #16]
 80236fc:	b943      	cbnz	r3, 8023710 <__swbuf_r+0x32>
 80236fe:	4621      	mov	r1, r4
 8023700:	4628      	mov	r0, r5
 8023702:	f000 f82b 	bl	802375c <__swsetup_r>
 8023706:	b118      	cbz	r0, 8023710 <__swbuf_r+0x32>
 8023708:	f04f 37ff 	mov.w	r7, #4294967295
 802370c:	4638      	mov	r0, r7
 802370e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023710:	6823      	ldr	r3, [r4, #0]
 8023712:	6922      	ldr	r2, [r4, #16]
 8023714:	1a98      	subs	r0, r3, r2
 8023716:	6963      	ldr	r3, [r4, #20]
 8023718:	b2f6      	uxtb	r6, r6
 802371a:	4283      	cmp	r3, r0
 802371c:	4637      	mov	r7, r6
 802371e:	dc05      	bgt.n	802372c <__swbuf_r+0x4e>
 8023720:	4621      	mov	r1, r4
 8023722:	4628      	mov	r0, r5
 8023724:	f000 fd58 	bl	80241d8 <_fflush_r>
 8023728:	2800      	cmp	r0, #0
 802372a:	d1ed      	bne.n	8023708 <__swbuf_r+0x2a>
 802372c:	68a3      	ldr	r3, [r4, #8]
 802372e:	3b01      	subs	r3, #1
 8023730:	60a3      	str	r3, [r4, #8]
 8023732:	6823      	ldr	r3, [r4, #0]
 8023734:	1c5a      	adds	r2, r3, #1
 8023736:	6022      	str	r2, [r4, #0]
 8023738:	701e      	strb	r6, [r3, #0]
 802373a:	6962      	ldr	r2, [r4, #20]
 802373c:	1c43      	adds	r3, r0, #1
 802373e:	429a      	cmp	r2, r3
 8023740:	d004      	beq.n	802374c <__swbuf_r+0x6e>
 8023742:	89a3      	ldrh	r3, [r4, #12]
 8023744:	07db      	lsls	r3, r3, #31
 8023746:	d5e1      	bpl.n	802370c <__swbuf_r+0x2e>
 8023748:	2e0a      	cmp	r6, #10
 802374a:	d1df      	bne.n	802370c <__swbuf_r+0x2e>
 802374c:	4621      	mov	r1, r4
 802374e:	4628      	mov	r0, r5
 8023750:	f000 fd42 	bl	80241d8 <_fflush_r>
 8023754:	2800      	cmp	r0, #0
 8023756:	d0d9      	beq.n	802370c <__swbuf_r+0x2e>
 8023758:	e7d6      	b.n	8023708 <__swbuf_r+0x2a>
	...

0802375c <__swsetup_r>:
 802375c:	b538      	push	{r3, r4, r5, lr}
 802375e:	4b29      	ldr	r3, [pc, #164]	@ (8023804 <__swsetup_r+0xa8>)
 8023760:	4605      	mov	r5, r0
 8023762:	6818      	ldr	r0, [r3, #0]
 8023764:	460c      	mov	r4, r1
 8023766:	b118      	cbz	r0, 8023770 <__swsetup_r+0x14>
 8023768:	6a03      	ldr	r3, [r0, #32]
 802376a:	b90b      	cbnz	r3, 8023770 <__swsetup_r+0x14>
 802376c:	f7ff ff2c 	bl	80235c8 <__sinit>
 8023770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023774:	0719      	lsls	r1, r3, #28
 8023776:	d422      	bmi.n	80237be <__swsetup_r+0x62>
 8023778:	06da      	lsls	r2, r3, #27
 802377a:	d407      	bmi.n	802378c <__swsetup_r+0x30>
 802377c:	2209      	movs	r2, #9
 802377e:	602a      	str	r2, [r5, #0]
 8023780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023784:	81a3      	strh	r3, [r4, #12]
 8023786:	f04f 30ff 	mov.w	r0, #4294967295
 802378a:	e033      	b.n	80237f4 <__swsetup_r+0x98>
 802378c:	0758      	lsls	r0, r3, #29
 802378e:	d512      	bpl.n	80237b6 <__swsetup_r+0x5a>
 8023790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023792:	b141      	cbz	r1, 80237a6 <__swsetup_r+0x4a>
 8023794:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023798:	4299      	cmp	r1, r3
 802379a:	d002      	beq.n	80237a2 <__swsetup_r+0x46>
 802379c:	4628      	mov	r0, r5
 802379e:	f000 f97f 	bl	8023aa0 <_free_r>
 80237a2:	2300      	movs	r3, #0
 80237a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80237a6:	89a3      	ldrh	r3, [r4, #12]
 80237a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80237ac:	81a3      	strh	r3, [r4, #12]
 80237ae:	2300      	movs	r3, #0
 80237b0:	6063      	str	r3, [r4, #4]
 80237b2:	6923      	ldr	r3, [r4, #16]
 80237b4:	6023      	str	r3, [r4, #0]
 80237b6:	89a3      	ldrh	r3, [r4, #12]
 80237b8:	f043 0308 	orr.w	r3, r3, #8
 80237bc:	81a3      	strh	r3, [r4, #12]
 80237be:	6923      	ldr	r3, [r4, #16]
 80237c0:	b94b      	cbnz	r3, 80237d6 <__swsetup_r+0x7a>
 80237c2:	89a3      	ldrh	r3, [r4, #12]
 80237c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80237c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80237cc:	d003      	beq.n	80237d6 <__swsetup_r+0x7a>
 80237ce:	4621      	mov	r1, r4
 80237d0:	4628      	mov	r0, r5
 80237d2:	f000 fd4f 	bl	8024274 <__smakebuf_r>
 80237d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80237da:	f013 0201 	ands.w	r2, r3, #1
 80237de:	d00a      	beq.n	80237f6 <__swsetup_r+0x9a>
 80237e0:	2200      	movs	r2, #0
 80237e2:	60a2      	str	r2, [r4, #8]
 80237e4:	6962      	ldr	r2, [r4, #20]
 80237e6:	4252      	negs	r2, r2
 80237e8:	61a2      	str	r2, [r4, #24]
 80237ea:	6922      	ldr	r2, [r4, #16]
 80237ec:	b942      	cbnz	r2, 8023800 <__swsetup_r+0xa4>
 80237ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80237f2:	d1c5      	bne.n	8023780 <__swsetup_r+0x24>
 80237f4:	bd38      	pop	{r3, r4, r5, pc}
 80237f6:	0799      	lsls	r1, r3, #30
 80237f8:	bf58      	it	pl
 80237fa:	6962      	ldrpl	r2, [r4, #20]
 80237fc:	60a2      	str	r2, [r4, #8]
 80237fe:	e7f4      	b.n	80237ea <__swsetup_r+0x8e>
 8023800:	2000      	movs	r0, #0
 8023802:	e7f7      	b.n	80237f4 <__swsetup_r+0x98>
 8023804:	240000e8 	.word	0x240000e8

08023808 <memset>:
 8023808:	4402      	add	r2, r0
 802380a:	4603      	mov	r3, r0
 802380c:	4293      	cmp	r3, r2
 802380e:	d100      	bne.n	8023812 <memset+0xa>
 8023810:	4770      	bx	lr
 8023812:	f803 1b01 	strb.w	r1, [r3], #1
 8023816:	e7f9      	b.n	802380c <memset+0x4>

08023818 <strncmp>:
 8023818:	b510      	push	{r4, lr}
 802381a:	b16a      	cbz	r2, 8023838 <strncmp+0x20>
 802381c:	3901      	subs	r1, #1
 802381e:	1884      	adds	r4, r0, r2
 8023820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023824:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023828:	429a      	cmp	r2, r3
 802382a:	d103      	bne.n	8023834 <strncmp+0x1c>
 802382c:	42a0      	cmp	r0, r4
 802382e:	d001      	beq.n	8023834 <strncmp+0x1c>
 8023830:	2a00      	cmp	r2, #0
 8023832:	d1f5      	bne.n	8023820 <strncmp+0x8>
 8023834:	1ad0      	subs	r0, r2, r3
 8023836:	bd10      	pop	{r4, pc}
 8023838:	4610      	mov	r0, r2
 802383a:	e7fc      	b.n	8023836 <strncmp+0x1e>

0802383c <_raise_r>:
 802383c:	291f      	cmp	r1, #31
 802383e:	b538      	push	{r3, r4, r5, lr}
 8023840:	4605      	mov	r5, r0
 8023842:	460c      	mov	r4, r1
 8023844:	d904      	bls.n	8023850 <_raise_r+0x14>
 8023846:	2316      	movs	r3, #22
 8023848:	6003      	str	r3, [r0, #0]
 802384a:	f04f 30ff 	mov.w	r0, #4294967295
 802384e:	bd38      	pop	{r3, r4, r5, pc}
 8023850:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023852:	b112      	cbz	r2, 802385a <_raise_r+0x1e>
 8023854:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023858:	b94b      	cbnz	r3, 802386e <_raise_r+0x32>
 802385a:	4628      	mov	r0, r5
 802385c:	f000 f864 	bl	8023928 <_getpid_r>
 8023860:	4622      	mov	r2, r4
 8023862:	4601      	mov	r1, r0
 8023864:	4628      	mov	r0, r5
 8023866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802386a:	f000 b84b 	b.w	8023904 <_kill_r>
 802386e:	2b01      	cmp	r3, #1
 8023870:	d00a      	beq.n	8023888 <_raise_r+0x4c>
 8023872:	1c59      	adds	r1, r3, #1
 8023874:	d103      	bne.n	802387e <_raise_r+0x42>
 8023876:	2316      	movs	r3, #22
 8023878:	6003      	str	r3, [r0, #0]
 802387a:	2001      	movs	r0, #1
 802387c:	e7e7      	b.n	802384e <_raise_r+0x12>
 802387e:	2100      	movs	r1, #0
 8023880:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023884:	4620      	mov	r0, r4
 8023886:	4798      	blx	r3
 8023888:	2000      	movs	r0, #0
 802388a:	e7e0      	b.n	802384e <_raise_r+0x12>

0802388c <raise>:
 802388c:	4b02      	ldr	r3, [pc, #8]	@ (8023898 <raise+0xc>)
 802388e:	4601      	mov	r1, r0
 8023890:	6818      	ldr	r0, [r3, #0]
 8023892:	f7ff bfd3 	b.w	802383c <_raise_r>
 8023896:	bf00      	nop
 8023898:	240000e8 	.word	0x240000e8

0802389c <_close_r>:
 802389c:	b538      	push	{r3, r4, r5, lr}
 802389e:	4d06      	ldr	r5, [pc, #24]	@ (80238b8 <_close_r+0x1c>)
 80238a0:	2300      	movs	r3, #0
 80238a2:	4604      	mov	r4, r0
 80238a4:	4608      	mov	r0, r1
 80238a6:	602b      	str	r3, [r5, #0]
 80238a8:	f7dd ff08 	bl	80016bc <_close>
 80238ac:	1c43      	adds	r3, r0, #1
 80238ae:	d102      	bne.n	80238b6 <_close_r+0x1a>
 80238b0:	682b      	ldr	r3, [r5, #0]
 80238b2:	b103      	cbz	r3, 80238b6 <_close_r+0x1a>
 80238b4:	6023      	str	r3, [r4, #0]
 80238b6:	bd38      	pop	{r3, r4, r5, pc}
 80238b8:	24025e7c 	.word	0x24025e7c

080238bc <_lseek_r>:
 80238bc:	b538      	push	{r3, r4, r5, lr}
 80238be:	4d07      	ldr	r5, [pc, #28]	@ (80238dc <_lseek_r+0x20>)
 80238c0:	4604      	mov	r4, r0
 80238c2:	4608      	mov	r0, r1
 80238c4:	4611      	mov	r1, r2
 80238c6:	2200      	movs	r2, #0
 80238c8:	602a      	str	r2, [r5, #0]
 80238ca:	461a      	mov	r2, r3
 80238cc:	f7dd ff00 	bl	80016d0 <_lseek>
 80238d0:	1c43      	adds	r3, r0, #1
 80238d2:	d102      	bne.n	80238da <_lseek_r+0x1e>
 80238d4:	682b      	ldr	r3, [r5, #0]
 80238d6:	b103      	cbz	r3, 80238da <_lseek_r+0x1e>
 80238d8:	6023      	str	r3, [r4, #0]
 80238da:	bd38      	pop	{r3, r4, r5, pc}
 80238dc:	24025e7c 	.word	0x24025e7c

080238e0 <_read_r>:
 80238e0:	b538      	push	{r3, r4, r5, lr}
 80238e2:	4d07      	ldr	r5, [pc, #28]	@ (8023900 <_read_r+0x20>)
 80238e4:	4604      	mov	r4, r0
 80238e6:	4608      	mov	r0, r1
 80238e8:	4611      	mov	r1, r2
 80238ea:	2200      	movs	r2, #0
 80238ec:	602a      	str	r2, [r5, #0]
 80238ee:	461a      	mov	r2, r3
 80238f0:	f7dd fec8 	bl	8001684 <_read>
 80238f4:	1c43      	adds	r3, r0, #1
 80238f6:	d102      	bne.n	80238fe <_read_r+0x1e>
 80238f8:	682b      	ldr	r3, [r5, #0]
 80238fa:	b103      	cbz	r3, 80238fe <_read_r+0x1e>
 80238fc:	6023      	str	r3, [r4, #0]
 80238fe:	bd38      	pop	{r3, r4, r5, pc}
 8023900:	24025e7c 	.word	0x24025e7c

08023904 <_kill_r>:
 8023904:	b538      	push	{r3, r4, r5, lr}
 8023906:	4d07      	ldr	r5, [pc, #28]	@ (8023924 <_kill_r+0x20>)
 8023908:	2300      	movs	r3, #0
 802390a:	4604      	mov	r4, r0
 802390c:	4608      	mov	r0, r1
 802390e:	4611      	mov	r1, r2
 8023910:	602b      	str	r3, [r5, #0]
 8023912:	f7dd fea9 	bl	8001668 <_kill>
 8023916:	1c43      	adds	r3, r0, #1
 8023918:	d102      	bne.n	8023920 <_kill_r+0x1c>
 802391a:	682b      	ldr	r3, [r5, #0]
 802391c:	b103      	cbz	r3, 8023920 <_kill_r+0x1c>
 802391e:	6023      	str	r3, [r4, #0]
 8023920:	bd38      	pop	{r3, r4, r5, pc}
 8023922:	bf00      	nop
 8023924:	24025e7c 	.word	0x24025e7c

08023928 <_getpid_r>:
 8023928:	f7dd be9c 	b.w	8001664 <_getpid>

0802392c <_sbrk_r>:
 802392c:	b538      	push	{r3, r4, r5, lr}
 802392e:	4d06      	ldr	r5, [pc, #24]	@ (8023948 <_sbrk_r+0x1c>)
 8023930:	2300      	movs	r3, #0
 8023932:	4604      	mov	r4, r0
 8023934:	4608      	mov	r0, r1
 8023936:	602b      	str	r3, [r5, #0]
 8023938:	f7dd fecc 	bl	80016d4 <_sbrk>
 802393c:	1c43      	adds	r3, r0, #1
 802393e:	d102      	bne.n	8023946 <_sbrk_r+0x1a>
 8023940:	682b      	ldr	r3, [r5, #0]
 8023942:	b103      	cbz	r3, 8023946 <_sbrk_r+0x1a>
 8023944:	6023      	str	r3, [r4, #0]
 8023946:	bd38      	pop	{r3, r4, r5, pc}
 8023948:	24025e7c 	.word	0x24025e7c

0802394c <_write_r>:
 802394c:	b538      	push	{r3, r4, r5, lr}
 802394e:	4d07      	ldr	r5, [pc, #28]	@ (802396c <_write_r+0x20>)
 8023950:	4604      	mov	r4, r0
 8023952:	4608      	mov	r0, r1
 8023954:	4611      	mov	r1, r2
 8023956:	2200      	movs	r2, #0
 8023958:	602a      	str	r2, [r5, #0]
 802395a:	461a      	mov	r2, r3
 802395c:	f7dd fea0 	bl	80016a0 <_write>
 8023960:	1c43      	adds	r3, r0, #1
 8023962:	d102      	bne.n	802396a <_write_r+0x1e>
 8023964:	682b      	ldr	r3, [r5, #0]
 8023966:	b103      	cbz	r3, 802396a <_write_r+0x1e>
 8023968:	6023      	str	r3, [r4, #0]
 802396a:	bd38      	pop	{r3, r4, r5, pc}
 802396c:	24025e7c 	.word	0x24025e7c

08023970 <__errno>:
 8023970:	4b01      	ldr	r3, [pc, #4]	@ (8023978 <__errno+0x8>)
 8023972:	6818      	ldr	r0, [r3, #0]
 8023974:	4770      	bx	lr
 8023976:	bf00      	nop
 8023978:	240000e8 	.word	0x240000e8

0802397c <__libc_init_array>:
 802397c:	b570      	push	{r4, r5, r6, lr}
 802397e:	4d0d      	ldr	r5, [pc, #52]	@ (80239b4 <__libc_init_array+0x38>)
 8023980:	4c0d      	ldr	r4, [pc, #52]	@ (80239b8 <__libc_init_array+0x3c>)
 8023982:	1b64      	subs	r4, r4, r5
 8023984:	10a4      	asrs	r4, r4, #2
 8023986:	2600      	movs	r6, #0
 8023988:	42a6      	cmp	r6, r4
 802398a:	d109      	bne.n	80239a0 <__libc_init_array+0x24>
 802398c:	4d0b      	ldr	r5, [pc, #44]	@ (80239bc <__libc_init_array+0x40>)
 802398e:	4c0c      	ldr	r4, [pc, #48]	@ (80239c0 <__libc_init_array+0x44>)
 8023990:	f000 fcce 	bl	8024330 <_init>
 8023994:	1b64      	subs	r4, r4, r5
 8023996:	10a4      	asrs	r4, r4, #2
 8023998:	2600      	movs	r6, #0
 802399a:	42a6      	cmp	r6, r4
 802399c:	d105      	bne.n	80239aa <__libc_init_array+0x2e>
 802399e:	bd70      	pop	{r4, r5, r6, pc}
 80239a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80239a4:	4798      	blx	r3
 80239a6:	3601      	adds	r6, #1
 80239a8:	e7ee      	b.n	8023988 <__libc_init_array+0xc>
 80239aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80239ae:	4798      	blx	r3
 80239b0:	3601      	adds	r6, #1
 80239b2:	e7f2      	b.n	802399a <__libc_init_array+0x1e>
 80239b4:	0802f13c 	.word	0x0802f13c
 80239b8:	0802f13c 	.word	0x0802f13c
 80239bc:	0802f13c 	.word	0x0802f13c
 80239c0:	0802f158 	.word	0x0802f158

080239c4 <__retarget_lock_init_recursive>:
 80239c4:	4770      	bx	lr

080239c6 <__retarget_lock_acquire_recursive>:
 80239c6:	4770      	bx	lr

080239c8 <__retarget_lock_release_recursive>:
 80239c8:	4770      	bx	lr

080239ca <memcpy>:
 80239ca:	440a      	add	r2, r1
 80239cc:	4291      	cmp	r1, r2
 80239ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80239d2:	d100      	bne.n	80239d6 <memcpy+0xc>
 80239d4:	4770      	bx	lr
 80239d6:	b510      	push	{r4, lr}
 80239d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80239dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80239e0:	4291      	cmp	r1, r2
 80239e2:	d1f9      	bne.n	80239d8 <memcpy+0xe>
 80239e4:	bd10      	pop	{r4, pc}
	...

080239e8 <__register_exitproc>:
 80239e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80239ec:	4d27      	ldr	r5, [pc, #156]	@ (8023a8c <__register_exitproc+0xa4>)
 80239ee:	4607      	mov	r7, r0
 80239f0:	6828      	ldr	r0, [r5, #0]
 80239f2:	4691      	mov	r9, r2
 80239f4:	460e      	mov	r6, r1
 80239f6:	4698      	mov	r8, r3
 80239f8:	f7ff ffe5 	bl	80239c6 <__retarget_lock_acquire_recursive>
 80239fc:	4a24      	ldr	r2, [pc, #144]	@ (8023a90 <__register_exitproc+0xa8>)
 80239fe:	6814      	ldr	r4, [r2, #0]
 8023a00:	b93c      	cbnz	r4, 8023a12 <__register_exitproc+0x2a>
 8023a02:	4b24      	ldr	r3, [pc, #144]	@ (8023a94 <__register_exitproc+0xac>)
 8023a04:	6013      	str	r3, [r2, #0]
 8023a06:	4a24      	ldr	r2, [pc, #144]	@ (8023a98 <__register_exitproc+0xb0>)
 8023a08:	b112      	cbz	r2, 8023a10 <__register_exitproc+0x28>
 8023a0a:	6812      	ldr	r2, [r2, #0]
 8023a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8023a10:	4c20      	ldr	r4, [pc, #128]	@ (8023a94 <__register_exitproc+0xac>)
 8023a12:	6863      	ldr	r3, [r4, #4]
 8023a14:	2b1f      	cmp	r3, #31
 8023a16:	dd06      	ble.n	8023a26 <__register_exitproc+0x3e>
 8023a18:	6828      	ldr	r0, [r5, #0]
 8023a1a:	f7ff ffd5 	bl	80239c8 <__retarget_lock_release_recursive>
 8023a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8023a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023a26:	b32f      	cbz	r7, 8023a74 <__register_exitproc+0x8c>
 8023a28:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8023a2c:	b968      	cbnz	r0, 8023a4a <__register_exitproc+0x62>
 8023a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8023a9c <__register_exitproc+0xb4>)
 8023a30:	2b00      	cmp	r3, #0
 8023a32:	d0f1      	beq.n	8023a18 <__register_exitproc+0x30>
 8023a34:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8023a38:	f7ff fc6e 	bl	8023318 <malloc>
 8023a3c:	2800      	cmp	r0, #0
 8023a3e:	d0eb      	beq.n	8023a18 <__register_exitproc+0x30>
 8023a40:	2300      	movs	r3, #0
 8023a42:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8023a46:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8023a4a:	6863      	ldr	r3, [r4, #4]
 8023a4c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023a50:	2201      	movs	r2, #1
 8023a52:	409a      	lsls	r2, r3
 8023a54:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023a58:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8023a5c:	4313      	orrs	r3, r2
 8023a5e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8023a62:	2f02      	cmp	r7, #2
 8023a64:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8023a68:	bf02      	ittt	eq
 8023a6a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8023a6e:	4313      	orreq	r3, r2
 8023a70:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8023a74:	6863      	ldr	r3, [r4, #4]
 8023a76:	6828      	ldr	r0, [r5, #0]
 8023a78:	1c5a      	adds	r2, r3, #1
 8023a7a:	3302      	adds	r3, #2
 8023a7c:	6062      	str	r2, [r4, #4]
 8023a7e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8023a82:	f7ff ffa1 	bl	80239c8 <__retarget_lock_release_recursive>
 8023a86:	2000      	movs	r0, #0
 8023a88:	e7cb      	b.n	8023a22 <__register_exitproc+0x3a>
 8023a8a:	bf00      	nop
 8023a8c:	24000138 	.word	0x24000138
 8023a90:	24025f10 	.word	0x24025f10
 8023a94:	24025e84 	.word	0x24025e84
 8023a98:	08027d98 	.word	0x08027d98
 8023a9c:	08023319 	.word	0x08023319

08023aa0 <_free_r>:
 8023aa0:	b538      	push	{r3, r4, r5, lr}
 8023aa2:	4605      	mov	r5, r0
 8023aa4:	2900      	cmp	r1, #0
 8023aa6:	d041      	beq.n	8023b2c <_free_r+0x8c>
 8023aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023aac:	1f0c      	subs	r4, r1, #4
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	bfb8      	it	lt
 8023ab2:	18e4      	addlt	r4, r4, r3
 8023ab4:	f7ff fce2 	bl	802347c <__malloc_lock>
 8023ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8023b30 <_free_r+0x90>)
 8023aba:	6813      	ldr	r3, [r2, #0]
 8023abc:	b933      	cbnz	r3, 8023acc <_free_r+0x2c>
 8023abe:	6063      	str	r3, [r4, #4]
 8023ac0:	6014      	str	r4, [r2, #0]
 8023ac2:	4628      	mov	r0, r5
 8023ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023ac8:	f7ff bcde 	b.w	8023488 <__malloc_unlock>
 8023acc:	42a3      	cmp	r3, r4
 8023ace:	d908      	bls.n	8023ae2 <_free_r+0x42>
 8023ad0:	6820      	ldr	r0, [r4, #0]
 8023ad2:	1821      	adds	r1, r4, r0
 8023ad4:	428b      	cmp	r3, r1
 8023ad6:	bf01      	itttt	eq
 8023ad8:	6819      	ldreq	r1, [r3, #0]
 8023ada:	685b      	ldreq	r3, [r3, #4]
 8023adc:	1809      	addeq	r1, r1, r0
 8023ade:	6021      	streq	r1, [r4, #0]
 8023ae0:	e7ed      	b.n	8023abe <_free_r+0x1e>
 8023ae2:	461a      	mov	r2, r3
 8023ae4:	685b      	ldr	r3, [r3, #4]
 8023ae6:	b10b      	cbz	r3, 8023aec <_free_r+0x4c>
 8023ae8:	42a3      	cmp	r3, r4
 8023aea:	d9fa      	bls.n	8023ae2 <_free_r+0x42>
 8023aec:	6811      	ldr	r1, [r2, #0]
 8023aee:	1850      	adds	r0, r2, r1
 8023af0:	42a0      	cmp	r0, r4
 8023af2:	d10b      	bne.n	8023b0c <_free_r+0x6c>
 8023af4:	6820      	ldr	r0, [r4, #0]
 8023af6:	4401      	add	r1, r0
 8023af8:	1850      	adds	r0, r2, r1
 8023afa:	4283      	cmp	r3, r0
 8023afc:	6011      	str	r1, [r2, #0]
 8023afe:	d1e0      	bne.n	8023ac2 <_free_r+0x22>
 8023b00:	6818      	ldr	r0, [r3, #0]
 8023b02:	685b      	ldr	r3, [r3, #4]
 8023b04:	6053      	str	r3, [r2, #4]
 8023b06:	4408      	add	r0, r1
 8023b08:	6010      	str	r0, [r2, #0]
 8023b0a:	e7da      	b.n	8023ac2 <_free_r+0x22>
 8023b0c:	d902      	bls.n	8023b14 <_free_r+0x74>
 8023b0e:	230c      	movs	r3, #12
 8023b10:	602b      	str	r3, [r5, #0]
 8023b12:	e7d6      	b.n	8023ac2 <_free_r+0x22>
 8023b14:	6820      	ldr	r0, [r4, #0]
 8023b16:	1821      	adds	r1, r4, r0
 8023b18:	428b      	cmp	r3, r1
 8023b1a:	bf04      	itt	eq
 8023b1c:	6819      	ldreq	r1, [r3, #0]
 8023b1e:	685b      	ldreq	r3, [r3, #4]
 8023b20:	6063      	str	r3, [r4, #4]
 8023b22:	bf04      	itt	eq
 8023b24:	1809      	addeq	r1, r1, r0
 8023b26:	6021      	streq	r1, [r4, #0]
 8023b28:	6054      	str	r4, [r2, #4]
 8023b2a:	e7ca      	b.n	8023ac2 <_free_r+0x22>
 8023b2c:	bd38      	pop	{r3, r4, r5, pc}
 8023b2e:	bf00      	nop
 8023b30:	24025d3c 	.word	0x24025d3c

08023b34 <__sfputc_r>:
 8023b34:	6893      	ldr	r3, [r2, #8]
 8023b36:	3b01      	subs	r3, #1
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	b410      	push	{r4}
 8023b3c:	6093      	str	r3, [r2, #8]
 8023b3e:	da08      	bge.n	8023b52 <__sfputc_r+0x1e>
 8023b40:	6994      	ldr	r4, [r2, #24]
 8023b42:	42a3      	cmp	r3, r4
 8023b44:	db01      	blt.n	8023b4a <__sfputc_r+0x16>
 8023b46:	290a      	cmp	r1, #10
 8023b48:	d103      	bne.n	8023b52 <__sfputc_r+0x1e>
 8023b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023b4e:	f7ff bdc6 	b.w	80236de <__swbuf_r>
 8023b52:	6813      	ldr	r3, [r2, #0]
 8023b54:	1c58      	adds	r0, r3, #1
 8023b56:	6010      	str	r0, [r2, #0]
 8023b58:	7019      	strb	r1, [r3, #0]
 8023b5a:	4608      	mov	r0, r1
 8023b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023b60:	4770      	bx	lr

08023b62 <__sfputs_r>:
 8023b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b64:	4606      	mov	r6, r0
 8023b66:	460f      	mov	r7, r1
 8023b68:	4614      	mov	r4, r2
 8023b6a:	18d5      	adds	r5, r2, r3
 8023b6c:	42ac      	cmp	r4, r5
 8023b6e:	d101      	bne.n	8023b74 <__sfputs_r+0x12>
 8023b70:	2000      	movs	r0, #0
 8023b72:	e007      	b.n	8023b84 <__sfputs_r+0x22>
 8023b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023b78:	463a      	mov	r2, r7
 8023b7a:	4630      	mov	r0, r6
 8023b7c:	f7ff ffda 	bl	8023b34 <__sfputc_r>
 8023b80:	1c43      	adds	r3, r0, #1
 8023b82:	d1f3      	bne.n	8023b6c <__sfputs_r+0xa>
 8023b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023b88 <_vfiprintf_r>:
 8023b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b8c:	460d      	mov	r5, r1
 8023b8e:	b09d      	sub	sp, #116	@ 0x74
 8023b90:	4614      	mov	r4, r2
 8023b92:	4698      	mov	r8, r3
 8023b94:	4606      	mov	r6, r0
 8023b96:	b118      	cbz	r0, 8023ba0 <_vfiprintf_r+0x18>
 8023b98:	6a03      	ldr	r3, [r0, #32]
 8023b9a:	b90b      	cbnz	r3, 8023ba0 <_vfiprintf_r+0x18>
 8023b9c:	f7ff fd14 	bl	80235c8 <__sinit>
 8023ba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023ba2:	07d9      	lsls	r1, r3, #31
 8023ba4:	d405      	bmi.n	8023bb2 <_vfiprintf_r+0x2a>
 8023ba6:	89ab      	ldrh	r3, [r5, #12]
 8023ba8:	059a      	lsls	r2, r3, #22
 8023baa:	d402      	bmi.n	8023bb2 <_vfiprintf_r+0x2a>
 8023bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023bae:	f7ff ff0a 	bl	80239c6 <__retarget_lock_acquire_recursive>
 8023bb2:	89ab      	ldrh	r3, [r5, #12]
 8023bb4:	071b      	lsls	r3, r3, #28
 8023bb6:	d501      	bpl.n	8023bbc <_vfiprintf_r+0x34>
 8023bb8:	692b      	ldr	r3, [r5, #16]
 8023bba:	b99b      	cbnz	r3, 8023be4 <_vfiprintf_r+0x5c>
 8023bbc:	4629      	mov	r1, r5
 8023bbe:	4630      	mov	r0, r6
 8023bc0:	f7ff fdcc 	bl	802375c <__swsetup_r>
 8023bc4:	b170      	cbz	r0, 8023be4 <_vfiprintf_r+0x5c>
 8023bc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023bc8:	07dc      	lsls	r4, r3, #31
 8023bca:	d504      	bpl.n	8023bd6 <_vfiprintf_r+0x4e>
 8023bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8023bd0:	b01d      	add	sp, #116	@ 0x74
 8023bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bd6:	89ab      	ldrh	r3, [r5, #12]
 8023bd8:	0598      	lsls	r0, r3, #22
 8023bda:	d4f7      	bmi.n	8023bcc <_vfiprintf_r+0x44>
 8023bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023bde:	f7ff fef3 	bl	80239c8 <__retarget_lock_release_recursive>
 8023be2:	e7f3      	b.n	8023bcc <_vfiprintf_r+0x44>
 8023be4:	2300      	movs	r3, #0
 8023be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8023be8:	2320      	movs	r3, #32
 8023bea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8023bf2:	2330      	movs	r3, #48	@ 0x30
 8023bf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023da4 <_vfiprintf_r+0x21c>
 8023bf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023bfc:	f04f 0901 	mov.w	r9, #1
 8023c00:	4623      	mov	r3, r4
 8023c02:	469a      	mov	sl, r3
 8023c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023c08:	b10a      	cbz	r2, 8023c0e <_vfiprintf_r+0x86>
 8023c0a:	2a25      	cmp	r2, #37	@ 0x25
 8023c0c:	d1f9      	bne.n	8023c02 <_vfiprintf_r+0x7a>
 8023c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8023c12:	d00b      	beq.n	8023c2c <_vfiprintf_r+0xa4>
 8023c14:	465b      	mov	r3, fp
 8023c16:	4622      	mov	r2, r4
 8023c18:	4629      	mov	r1, r5
 8023c1a:	4630      	mov	r0, r6
 8023c1c:	f7ff ffa1 	bl	8023b62 <__sfputs_r>
 8023c20:	3001      	adds	r0, #1
 8023c22:	f000 80a7 	beq.w	8023d74 <_vfiprintf_r+0x1ec>
 8023c26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023c28:	445a      	add	r2, fp
 8023c2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8023c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8023c30:	2b00      	cmp	r3, #0
 8023c32:	f000 809f 	beq.w	8023d74 <_vfiprintf_r+0x1ec>
 8023c36:	2300      	movs	r3, #0
 8023c38:	f04f 32ff 	mov.w	r2, #4294967295
 8023c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023c40:	f10a 0a01 	add.w	sl, sl, #1
 8023c44:	9304      	str	r3, [sp, #16]
 8023c46:	9307      	str	r3, [sp, #28]
 8023c48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023c4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8023c4e:	4654      	mov	r4, sl
 8023c50:	2205      	movs	r2, #5
 8023c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023c56:	4853      	ldr	r0, [pc, #332]	@ (8023da4 <_vfiprintf_r+0x21c>)
 8023c58:	f7dc fb42 	bl	80002e0 <memchr>
 8023c5c:	9a04      	ldr	r2, [sp, #16]
 8023c5e:	b9d8      	cbnz	r0, 8023c98 <_vfiprintf_r+0x110>
 8023c60:	06d1      	lsls	r1, r2, #27
 8023c62:	bf44      	itt	mi
 8023c64:	2320      	movmi	r3, #32
 8023c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023c6a:	0713      	lsls	r3, r2, #28
 8023c6c:	bf44      	itt	mi
 8023c6e:	232b      	movmi	r3, #43	@ 0x2b
 8023c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023c74:	f89a 3000 	ldrb.w	r3, [sl]
 8023c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8023c7a:	d015      	beq.n	8023ca8 <_vfiprintf_r+0x120>
 8023c7c:	9a07      	ldr	r2, [sp, #28]
 8023c7e:	4654      	mov	r4, sl
 8023c80:	2000      	movs	r0, #0
 8023c82:	f04f 0c0a 	mov.w	ip, #10
 8023c86:	4621      	mov	r1, r4
 8023c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023c8c:	3b30      	subs	r3, #48	@ 0x30
 8023c8e:	2b09      	cmp	r3, #9
 8023c90:	d94b      	bls.n	8023d2a <_vfiprintf_r+0x1a2>
 8023c92:	b1b0      	cbz	r0, 8023cc2 <_vfiprintf_r+0x13a>
 8023c94:	9207      	str	r2, [sp, #28]
 8023c96:	e014      	b.n	8023cc2 <_vfiprintf_r+0x13a>
 8023c98:	eba0 0308 	sub.w	r3, r0, r8
 8023c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8023ca0:	4313      	orrs	r3, r2
 8023ca2:	9304      	str	r3, [sp, #16]
 8023ca4:	46a2      	mov	sl, r4
 8023ca6:	e7d2      	b.n	8023c4e <_vfiprintf_r+0xc6>
 8023ca8:	9b03      	ldr	r3, [sp, #12]
 8023caa:	1d19      	adds	r1, r3, #4
 8023cac:	681b      	ldr	r3, [r3, #0]
 8023cae:	9103      	str	r1, [sp, #12]
 8023cb0:	2b00      	cmp	r3, #0
 8023cb2:	bfbb      	ittet	lt
 8023cb4:	425b      	neglt	r3, r3
 8023cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8023cba:	9307      	strge	r3, [sp, #28]
 8023cbc:	9307      	strlt	r3, [sp, #28]
 8023cbe:	bfb8      	it	lt
 8023cc0:	9204      	strlt	r2, [sp, #16]
 8023cc2:	7823      	ldrb	r3, [r4, #0]
 8023cc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8023cc6:	d10a      	bne.n	8023cde <_vfiprintf_r+0x156>
 8023cc8:	7863      	ldrb	r3, [r4, #1]
 8023cca:	2b2a      	cmp	r3, #42	@ 0x2a
 8023ccc:	d132      	bne.n	8023d34 <_vfiprintf_r+0x1ac>
 8023cce:	9b03      	ldr	r3, [sp, #12]
 8023cd0:	1d1a      	adds	r2, r3, #4
 8023cd2:	681b      	ldr	r3, [r3, #0]
 8023cd4:	9203      	str	r2, [sp, #12]
 8023cd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023cda:	3402      	adds	r4, #2
 8023cdc:	9305      	str	r3, [sp, #20]
 8023cde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023db4 <_vfiprintf_r+0x22c>
 8023ce2:	7821      	ldrb	r1, [r4, #0]
 8023ce4:	2203      	movs	r2, #3
 8023ce6:	4650      	mov	r0, sl
 8023ce8:	f7dc fafa 	bl	80002e0 <memchr>
 8023cec:	b138      	cbz	r0, 8023cfe <_vfiprintf_r+0x176>
 8023cee:	9b04      	ldr	r3, [sp, #16]
 8023cf0:	eba0 000a 	sub.w	r0, r0, sl
 8023cf4:	2240      	movs	r2, #64	@ 0x40
 8023cf6:	4082      	lsls	r2, r0
 8023cf8:	4313      	orrs	r3, r2
 8023cfa:	3401      	adds	r4, #1
 8023cfc:	9304      	str	r3, [sp, #16]
 8023cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023d02:	4829      	ldr	r0, [pc, #164]	@ (8023da8 <_vfiprintf_r+0x220>)
 8023d04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023d08:	2206      	movs	r2, #6
 8023d0a:	f7dc fae9 	bl	80002e0 <memchr>
 8023d0e:	2800      	cmp	r0, #0
 8023d10:	d03f      	beq.n	8023d92 <_vfiprintf_r+0x20a>
 8023d12:	4b26      	ldr	r3, [pc, #152]	@ (8023dac <_vfiprintf_r+0x224>)
 8023d14:	bb1b      	cbnz	r3, 8023d5e <_vfiprintf_r+0x1d6>
 8023d16:	9b03      	ldr	r3, [sp, #12]
 8023d18:	3307      	adds	r3, #7
 8023d1a:	f023 0307 	bic.w	r3, r3, #7
 8023d1e:	3308      	adds	r3, #8
 8023d20:	9303      	str	r3, [sp, #12]
 8023d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d24:	443b      	add	r3, r7
 8023d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d28:	e76a      	b.n	8023c00 <_vfiprintf_r+0x78>
 8023d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8023d2e:	460c      	mov	r4, r1
 8023d30:	2001      	movs	r0, #1
 8023d32:	e7a8      	b.n	8023c86 <_vfiprintf_r+0xfe>
 8023d34:	2300      	movs	r3, #0
 8023d36:	3401      	adds	r4, #1
 8023d38:	9305      	str	r3, [sp, #20]
 8023d3a:	4619      	mov	r1, r3
 8023d3c:	f04f 0c0a 	mov.w	ip, #10
 8023d40:	4620      	mov	r0, r4
 8023d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023d46:	3a30      	subs	r2, #48	@ 0x30
 8023d48:	2a09      	cmp	r2, #9
 8023d4a:	d903      	bls.n	8023d54 <_vfiprintf_r+0x1cc>
 8023d4c:	2b00      	cmp	r3, #0
 8023d4e:	d0c6      	beq.n	8023cde <_vfiprintf_r+0x156>
 8023d50:	9105      	str	r1, [sp, #20]
 8023d52:	e7c4      	b.n	8023cde <_vfiprintf_r+0x156>
 8023d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8023d58:	4604      	mov	r4, r0
 8023d5a:	2301      	movs	r3, #1
 8023d5c:	e7f0      	b.n	8023d40 <_vfiprintf_r+0x1b8>
 8023d5e:	ab03      	add	r3, sp, #12
 8023d60:	9300      	str	r3, [sp, #0]
 8023d62:	462a      	mov	r2, r5
 8023d64:	4b12      	ldr	r3, [pc, #72]	@ (8023db0 <_vfiprintf_r+0x228>)
 8023d66:	a904      	add	r1, sp, #16
 8023d68:	4630      	mov	r0, r6
 8023d6a:	f3af 8000 	nop.w
 8023d6e:	4607      	mov	r7, r0
 8023d70:	1c78      	adds	r0, r7, #1
 8023d72:	d1d6      	bne.n	8023d22 <_vfiprintf_r+0x19a>
 8023d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023d76:	07d9      	lsls	r1, r3, #31
 8023d78:	d405      	bmi.n	8023d86 <_vfiprintf_r+0x1fe>
 8023d7a:	89ab      	ldrh	r3, [r5, #12]
 8023d7c:	059a      	lsls	r2, r3, #22
 8023d7e:	d402      	bmi.n	8023d86 <_vfiprintf_r+0x1fe>
 8023d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023d82:	f7ff fe21 	bl	80239c8 <__retarget_lock_release_recursive>
 8023d86:	89ab      	ldrh	r3, [r5, #12]
 8023d88:	065b      	lsls	r3, r3, #25
 8023d8a:	f53f af1f 	bmi.w	8023bcc <_vfiprintf_r+0x44>
 8023d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023d90:	e71e      	b.n	8023bd0 <_vfiprintf_r+0x48>
 8023d92:	ab03      	add	r3, sp, #12
 8023d94:	9300      	str	r3, [sp, #0]
 8023d96:	462a      	mov	r2, r5
 8023d98:	4b05      	ldr	r3, [pc, #20]	@ (8023db0 <_vfiprintf_r+0x228>)
 8023d9a:	a904      	add	r1, sp, #16
 8023d9c:	4630      	mov	r0, r6
 8023d9e:	f000 f879 	bl	8023e94 <_printf_i>
 8023da2:	e7e4      	b.n	8023d6e <_vfiprintf_r+0x1e6>
 8023da4:	08026546 	.word	0x08026546
 8023da8:	08026550 	.word	0x08026550
 8023dac:	00000000 	.word	0x00000000
 8023db0:	08023b63 	.word	0x08023b63
 8023db4:	0802654c 	.word	0x0802654c

08023db8 <_printf_common>:
 8023db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023dbc:	4616      	mov	r6, r2
 8023dbe:	4698      	mov	r8, r3
 8023dc0:	688a      	ldr	r2, [r1, #8]
 8023dc2:	690b      	ldr	r3, [r1, #16]
 8023dc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023dc8:	4293      	cmp	r3, r2
 8023dca:	bfb8      	it	lt
 8023dcc:	4613      	movlt	r3, r2
 8023dce:	6033      	str	r3, [r6, #0]
 8023dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023dd4:	4607      	mov	r7, r0
 8023dd6:	460c      	mov	r4, r1
 8023dd8:	b10a      	cbz	r2, 8023dde <_printf_common+0x26>
 8023dda:	3301      	adds	r3, #1
 8023ddc:	6033      	str	r3, [r6, #0]
 8023dde:	6823      	ldr	r3, [r4, #0]
 8023de0:	0699      	lsls	r1, r3, #26
 8023de2:	bf42      	ittt	mi
 8023de4:	6833      	ldrmi	r3, [r6, #0]
 8023de6:	3302      	addmi	r3, #2
 8023de8:	6033      	strmi	r3, [r6, #0]
 8023dea:	6825      	ldr	r5, [r4, #0]
 8023dec:	f015 0506 	ands.w	r5, r5, #6
 8023df0:	d106      	bne.n	8023e00 <_printf_common+0x48>
 8023df2:	f104 0a19 	add.w	sl, r4, #25
 8023df6:	68e3      	ldr	r3, [r4, #12]
 8023df8:	6832      	ldr	r2, [r6, #0]
 8023dfa:	1a9b      	subs	r3, r3, r2
 8023dfc:	42ab      	cmp	r3, r5
 8023dfe:	dc26      	bgt.n	8023e4e <_printf_common+0x96>
 8023e00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023e04:	6822      	ldr	r2, [r4, #0]
 8023e06:	3b00      	subs	r3, #0
 8023e08:	bf18      	it	ne
 8023e0a:	2301      	movne	r3, #1
 8023e0c:	0692      	lsls	r2, r2, #26
 8023e0e:	d42b      	bmi.n	8023e68 <_printf_common+0xb0>
 8023e10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023e14:	4641      	mov	r1, r8
 8023e16:	4638      	mov	r0, r7
 8023e18:	47c8      	blx	r9
 8023e1a:	3001      	adds	r0, #1
 8023e1c:	d01e      	beq.n	8023e5c <_printf_common+0xa4>
 8023e1e:	6823      	ldr	r3, [r4, #0]
 8023e20:	6922      	ldr	r2, [r4, #16]
 8023e22:	f003 0306 	and.w	r3, r3, #6
 8023e26:	2b04      	cmp	r3, #4
 8023e28:	bf02      	ittt	eq
 8023e2a:	68e5      	ldreq	r5, [r4, #12]
 8023e2c:	6833      	ldreq	r3, [r6, #0]
 8023e2e:	1aed      	subeq	r5, r5, r3
 8023e30:	68a3      	ldr	r3, [r4, #8]
 8023e32:	bf0c      	ite	eq
 8023e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023e38:	2500      	movne	r5, #0
 8023e3a:	4293      	cmp	r3, r2
 8023e3c:	bfc4      	itt	gt
 8023e3e:	1a9b      	subgt	r3, r3, r2
 8023e40:	18ed      	addgt	r5, r5, r3
 8023e42:	2600      	movs	r6, #0
 8023e44:	341a      	adds	r4, #26
 8023e46:	42b5      	cmp	r5, r6
 8023e48:	d11a      	bne.n	8023e80 <_printf_common+0xc8>
 8023e4a:	2000      	movs	r0, #0
 8023e4c:	e008      	b.n	8023e60 <_printf_common+0xa8>
 8023e4e:	2301      	movs	r3, #1
 8023e50:	4652      	mov	r2, sl
 8023e52:	4641      	mov	r1, r8
 8023e54:	4638      	mov	r0, r7
 8023e56:	47c8      	blx	r9
 8023e58:	3001      	adds	r0, #1
 8023e5a:	d103      	bne.n	8023e64 <_printf_common+0xac>
 8023e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8023e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023e64:	3501      	adds	r5, #1
 8023e66:	e7c6      	b.n	8023df6 <_printf_common+0x3e>
 8023e68:	18e1      	adds	r1, r4, r3
 8023e6a:	1c5a      	adds	r2, r3, #1
 8023e6c:	2030      	movs	r0, #48	@ 0x30
 8023e6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023e72:	4422      	add	r2, r4
 8023e74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023e78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023e7c:	3302      	adds	r3, #2
 8023e7e:	e7c7      	b.n	8023e10 <_printf_common+0x58>
 8023e80:	2301      	movs	r3, #1
 8023e82:	4622      	mov	r2, r4
 8023e84:	4641      	mov	r1, r8
 8023e86:	4638      	mov	r0, r7
 8023e88:	47c8      	blx	r9
 8023e8a:	3001      	adds	r0, #1
 8023e8c:	d0e6      	beq.n	8023e5c <_printf_common+0xa4>
 8023e8e:	3601      	adds	r6, #1
 8023e90:	e7d9      	b.n	8023e46 <_printf_common+0x8e>
	...

08023e94 <_printf_i>:
 8023e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023e98:	7e0f      	ldrb	r7, [r1, #24]
 8023e9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023e9c:	2f78      	cmp	r7, #120	@ 0x78
 8023e9e:	4691      	mov	r9, r2
 8023ea0:	4680      	mov	r8, r0
 8023ea2:	460c      	mov	r4, r1
 8023ea4:	469a      	mov	sl, r3
 8023ea6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023eaa:	d807      	bhi.n	8023ebc <_printf_i+0x28>
 8023eac:	2f62      	cmp	r7, #98	@ 0x62
 8023eae:	d80a      	bhi.n	8023ec6 <_printf_i+0x32>
 8023eb0:	2f00      	cmp	r7, #0
 8023eb2:	f000 80d1 	beq.w	8024058 <_printf_i+0x1c4>
 8023eb6:	2f58      	cmp	r7, #88	@ 0x58
 8023eb8:	f000 80b8 	beq.w	802402c <_printf_i+0x198>
 8023ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023ec0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023ec4:	e03a      	b.n	8023f3c <_printf_i+0xa8>
 8023ec6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023eca:	2b15      	cmp	r3, #21
 8023ecc:	d8f6      	bhi.n	8023ebc <_printf_i+0x28>
 8023ece:	a101      	add	r1, pc, #4	@ (adr r1, 8023ed4 <_printf_i+0x40>)
 8023ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023ed4:	08023f2d 	.word	0x08023f2d
 8023ed8:	08023f41 	.word	0x08023f41
 8023edc:	08023ebd 	.word	0x08023ebd
 8023ee0:	08023ebd 	.word	0x08023ebd
 8023ee4:	08023ebd 	.word	0x08023ebd
 8023ee8:	08023ebd 	.word	0x08023ebd
 8023eec:	08023f41 	.word	0x08023f41
 8023ef0:	08023ebd 	.word	0x08023ebd
 8023ef4:	08023ebd 	.word	0x08023ebd
 8023ef8:	08023ebd 	.word	0x08023ebd
 8023efc:	08023ebd 	.word	0x08023ebd
 8023f00:	0802403f 	.word	0x0802403f
 8023f04:	08023f6b 	.word	0x08023f6b
 8023f08:	08023ff9 	.word	0x08023ff9
 8023f0c:	08023ebd 	.word	0x08023ebd
 8023f10:	08023ebd 	.word	0x08023ebd
 8023f14:	08024061 	.word	0x08024061
 8023f18:	08023ebd 	.word	0x08023ebd
 8023f1c:	08023f6b 	.word	0x08023f6b
 8023f20:	08023ebd 	.word	0x08023ebd
 8023f24:	08023ebd 	.word	0x08023ebd
 8023f28:	08024001 	.word	0x08024001
 8023f2c:	6833      	ldr	r3, [r6, #0]
 8023f2e:	1d1a      	adds	r2, r3, #4
 8023f30:	681b      	ldr	r3, [r3, #0]
 8023f32:	6032      	str	r2, [r6, #0]
 8023f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023f38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023f3c:	2301      	movs	r3, #1
 8023f3e:	e09c      	b.n	802407a <_printf_i+0x1e6>
 8023f40:	6833      	ldr	r3, [r6, #0]
 8023f42:	6820      	ldr	r0, [r4, #0]
 8023f44:	1d19      	adds	r1, r3, #4
 8023f46:	6031      	str	r1, [r6, #0]
 8023f48:	0606      	lsls	r6, r0, #24
 8023f4a:	d501      	bpl.n	8023f50 <_printf_i+0xbc>
 8023f4c:	681d      	ldr	r5, [r3, #0]
 8023f4e:	e003      	b.n	8023f58 <_printf_i+0xc4>
 8023f50:	0645      	lsls	r5, r0, #25
 8023f52:	d5fb      	bpl.n	8023f4c <_printf_i+0xb8>
 8023f54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023f58:	2d00      	cmp	r5, #0
 8023f5a:	da03      	bge.n	8023f64 <_printf_i+0xd0>
 8023f5c:	232d      	movs	r3, #45	@ 0x2d
 8023f5e:	426d      	negs	r5, r5
 8023f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023f64:	4858      	ldr	r0, [pc, #352]	@ (80240c8 <_printf_i+0x234>)
 8023f66:	230a      	movs	r3, #10
 8023f68:	e011      	b.n	8023f8e <_printf_i+0xfa>
 8023f6a:	6821      	ldr	r1, [r4, #0]
 8023f6c:	6833      	ldr	r3, [r6, #0]
 8023f6e:	0608      	lsls	r0, r1, #24
 8023f70:	f853 5b04 	ldr.w	r5, [r3], #4
 8023f74:	d402      	bmi.n	8023f7c <_printf_i+0xe8>
 8023f76:	0649      	lsls	r1, r1, #25
 8023f78:	bf48      	it	mi
 8023f7a:	b2ad      	uxthmi	r5, r5
 8023f7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8023f7e:	4852      	ldr	r0, [pc, #328]	@ (80240c8 <_printf_i+0x234>)
 8023f80:	6033      	str	r3, [r6, #0]
 8023f82:	bf14      	ite	ne
 8023f84:	230a      	movne	r3, #10
 8023f86:	2308      	moveq	r3, #8
 8023f88:	2100      	movs	r1, #0
 8023f8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023f8e:	6866      	ldr	r6, [r4, #4]
 8023f90:	60a6      	str	r6, [r4, #8]
 8023f92:	2e00      	cmp	r6, #0
 8023f94:	db05      	blt.n	8023fa2 <_printf_i+0x10e>
 8023f96:	6821      	ldr	r1, [r4, #0]
 8023f98:	432e      	orrs	r6, r5
 8023f9a:	f021 0104 	bic.w	r1, r1, #4
 8023f9e:	6021      	str	r1, [r4, #0]
 8023fa0:	d04b      	beq.n	802403a <_printf_i+0x1a6>
 8023fa2:	4616      	mov	r6, r2
 8023fa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8023fa8:	fb03 5711 	mls	r7, r3, r1, r5
 8023fac:	5dc7      	ldrb	r7, [r0, r7]
 8023fae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023fb2:	462f      	mov	r7, r5
 8023fb4:	42bb      	cmp	r3, r7
 8023fb6:	460d      	mov	r5, r1
 8023fb8:	d9f4      	bls.n	8023fa4 <_printf_i+0x110>
 8023fba:	2b08      	cmp	r3, #8
 8023fbc:	d10b      	bne.n	8023fd6 <_printf_i+0x142>
 8023fbe:	6823      	ldr	r3, [r4, #0]
 8023fc0:	07df      	lsls	r7, r3, #31
 8023fc2:	d508      	bpl.n	8023fd6 <_printf_i+0x142>
 8023fc4:	6923      	ldr	r3, [r4, #16]
 8023fc6:	6861      	ldr	r1, [r4, #4]
 8023fc8:	4299      	cmp	r1, r3
 8023fca:	bfde      	ittt	le
 8023fcc:	2330      	movle	r3, #48	@ 0x30
 8023fce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023fd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023fd6:	1b92      	subs	r2, r2, r6
 8023fd8:	6122      	str	r2, [r4, #16]
 8023fda:	f8cd a000 	str.w	sl, [sp]
 8023fde:	464b      	mov	r3, r9
 8023fe0:	aa03      	add	r2, sp, #12
 8023fe2:	4621      	mov	r1, r4
 8023fe4:	4640      	mov	r0, r8
 8023fe6:	f7ff fee7 	bl	8023db8 <_printf_common>
 8023fea:	3001      	adds	r0, #1
 8023fec:	d14a      	bne.n	8024084 <_printf_i+0x1f0>
 8023fee:	f04f 30ff 	mov.w	r0, #4294967295
 8023ff2:	b004      	add	sp, #16
 8023ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ff8:	6823      	ldr	r3, [r4, #0]
 8023ffa:	f043 0320 	orr.w	r3, r3, #32
 8023ffe:	6023      	str	r3, [r4, #0]
 8024000:	4832      	ldr	r0, [pc, #200]	@ (80240cc <_printf_i+0x238>)
 8024002:	2778      	movs	r7, #120	@ 0x78
 8024004:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024008:	6823      	ldr	r3, [r4, #0]
 802400a:	6831      	ldr	r1, [r6, #0]
 802400c:	061f      	lsls	r7, r3, #24
 802400e:	f851 5b04 	ldr.w	r5, [r1], #4
 8024012:	d402      	bmi.n	802401a <_printf_i+0x186>
 8024014:	065f      	lsls	r7, r3, #25
 8024016:	bf48      	it	mi
 8024018:	b2ad      	uxthmi	r5, r5
 802401a:	6031      	str	r1, [r6, #0]
 802401c:	07d9      	lsls	r1, r3, #31
 802401e:	bf44      	itt	mi
 8024020:	f043 0320 	orrmi.w	r3, r3, #32
 8024024:	6023      	strmi	r3, [r4, #0]
 8024026:	b11d      	cbz	r5, 8024030 <_printf_i+0x19c>
 8024028:	2310      	movs	r3, #16
 802402a:	e7ad      	b.n	8023f88 <_printf_i+0xf4>
 802402c:	4826      	ldr	r0, [pc, #152]	@ (80240c8 <_printf_i+0x234>)
 802402e:	e7e9      	b.n	8024004 <_printf_i+0x170>
 8024030:	6823      	ldr	r3, [r4, #0]
 8024032:	f023 0320 	bic.w	r3, r3, #32
 8024036:	6023      	str	r3, [r4, #0]
 8024038:	e7f6      	b.n	8024028 <_printf_i+0x194>
 802403a:	4616      	mov	r6, r2
 802403c:	e7bd      	b.n	8023fba <_printf_i+0x126>
 802403e:	6833      	ldr	r3, [r6, #0]
 8024040:	6825      	ldr	r5, [r4, #0]
 8024042:	6961      	ldr	r1, [r4, #20]
 8024044:	1d18      	adds	r0, r3, #4
 8024046:	6030      	str	r0, [r6, #0]
 8024048:	062e      	lsls	r6, r5, #24
 802404a:	681b      	ldr	r3, [r3, #0]
 802404c:	d501      	bpl.n	8024052 <_printf_i+0x1be>
 802404e:	6019      	str	r1, [r3, #0]
 8024050:	e002      	b.n	8024058 <_printf_i+0x1c4>
 8024052:	0668      	lsls	r0, r5, #25
 8024054:	d5fb      	bpl.n	802404e <_printf_i+0x1ba>
 8024056:	8019      	strh	r1, [r3, #0]
 8024058:	2300      	movs	r3, #0
 802405a:	6123      	str	r3, [r4, #16]
 802405c:	4616      	mov	r6, r2
 802405e:	e7bc      	b.n	8023fda <_printf_i+0x146>
 8024060:	6833      	ldr	r3, [r6, #0]
 8024062:	1d1a      	adds	r2, r3, #4
 8024064:	6032      	str	r2, [r6, #0]
 8024066:	681e      	ldr	r6, [r3, #0]
 8024068:	6862      	ldr	r2, [r4, #4]
 802406a:	2100      	movs	r1, #0
 802406c:	4630      	mov	r0, r6
 802406e:	f7dc f937 	bl	80002e0 <memchr>
 8024072:	b108      	cbz	r0, 8024078 <_printf_i+0x1e4>
 8024074:	1b80      	subs	r0, r0, r6
 8024076:	6060      	str	r0, [r4, #4]
 8024078:	6863      	ldr	r3, [r4, #4]
 802407a:	6123      	str	r3, [r4, #16]
 802407c:	2300      	movs	r3, #0
 802407e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024082:	e7aa      	b.n	8023fda <_printf_i+0x146>
 8024084:	6923      	ldr	r3, [r4, #16]
 8024086:	4632      	mov	r2, r6
 8024088:	4649      	mov	r1, r9
 802408a:	4640      	mov	r0, r8
 802408c:	47d0      	blx	sl
 802408e:	3001      	adds	r0, #1
 8024090:	d0ad      	beq.n	8023fee <_printf_i+0x15a>
 8024092:	6823      	ldr	r3, [r4, #0]
 8024094:	079b      	lsls	r3, r3, #30
 8024096:	d413      	bmi.n	80240c0 <_printf_i+0x22c>
 8024098:	68e0      	ldr	r0, [r4, #12]
 802409a:	9b03      	ldr	r3, [sp, #12]
 802409c:	4298      	cmp	r0, r3
 802409e:	bfb8      	it	lt
 80240a0:	4618      	movlt	r0, r3
 80240a2:	e7a6      	b.n	8023ff2 <_printf_i+0x15e>
 80240a4:	2301      	movs	r3, #1
 80240a6:	4632      	mov	r2, r6
 80240a8:	4649      	mov	r1, r9
 80240aa:	4640      	mov	r0, r8
 80240ac:	47d0      	blx	sl
 80240ae:	3001      	adds	r0, #1
 80240b0:	d09d      	beq.n	8023fee <_printf_i+0x15a>
 80240b2:	3501      	adds	r5, #1
 80240b4:	68e3      	ldr	r3, [r4, #12]
 80240b6:	9903      	ldr	r1, [sp, #12]
 80240b8:	1a5b      	subs	r3, r3, r1
 80240ba:	42ab      	cmp	r3, r5
 80240bc:	dcf2      	bgt.n	80240a4 <_printf_i+0x210>
 80240be:	e7eb      	b.n	8024098 <_printf_i+0x204>
 80240c0:	2500      	movs	r5, #0
 80240c2:	f104 0619 	add.w	r6, r4, #25
 80240c6:	e7f5      	b.n	80240b4 <_printf_i+0x220>
 80240c8:	08026557 	.word	0x08026557
 80240cc:	08026568 	.word	0x08026568

080240d0 <__sflush_r>:
 80240d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80240d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80240d8:	0716      	lsls	r6, r2, #28
 80240da:	4605      	mov	r5, r0
 80240dc:	460c      	mov	r4, r1
 80240de:	d454      	bmi.n	802418a <__sflush_r+0xba>
 80240e0:	684b      	ldr	r3, [r1, #4]
 80240e2:	2b00      	cmp	r3, #0
 80240e4:	dc02      	bgt.n	80240ec <__sflush_r+0x1c>
 80240e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80240e8:	2b00      	cmp	r3, #0
 80240ea:	dd48      	ble.n	802417e <__sflush_r+0xae>
 80240ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80240ee:	2e00      	cmp	r6, #0
 80240f0:	d045      	beq.n	802417e <__sflush_r+0xae>
 80240f2:	2300      	movs	r3, #0
 80240f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80240f8:	682f      	ldr	r7, [r5, #0]
 80240fa:	6a21      	ldr	r1, [r4, #32]
 80240fc:	602b      	str	r3, [r5, #0]
 80240fe:	d030      	beq.n	8024162 <__sflush_r+0x92>
 8024100:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024102:	89a3      	ldrh	r3, [r4, #12]
 8024104:	0759      	lsls	r1, r3, #29
 8024106:	d505      	bpl.n	8024114 <__sflush_r+0x44>
 8024108:	6863      	ldr	r3, [r4, #4]
 802410a:	1ad2      	subs	r2, r2, r3
 802410c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802410e:	b10b      	cbz	r3, 8024114 <__sflush_r+0x44>
 8024110:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024112:	1ad2      	subs	r2, r2, r3
 8024114:	2300      	movs	r3, #0
 8024116:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024118:	6a21      	ldr	r1, [r4, #32]
 802411a:	4628      	mov	r0, r5
 802411c:	47b0      	blx	r6
 802411e:	1c43      	adds	r3, r0, #1
 8024120:	89a3      	ldrh	r3, [r4, #12]
 8024122:	d106      	bne.n	8024132 <__sflush_r+0x62>
 8024124:	6829      	ldr	r1, [r5, #0]
 8024126:	291d      	cmp	r1, #29
 8024128:	d82b      	bhi.n	8024182 <__sflush_r+0xb2>
 802412a:	4a2a      	ldr	r2, [pc, #168]	@ (80241d4 <__sflush_r+0x104>)
 802412c:	40ca      	lsrs	r2, r1
 802412e:	07d6      	lsls	r6, r2, #31
 8024130:	d527      	bpl.n	8024182 <__sflush_r+0xb2>
 8024132:	2200      	movs	r2, #0
 8024134:	6062      	str	r2, [r4, #4]
 8024136:	04d9      	lsls	r1, r3, #19
 8024138:	6922      	ldr	r2, [r4, #16]
 802413a:	6022      	str	r2, [r4, #0]
 802413c:	d504      	bpl.n	8024148 <__sflush_r+0x78>
 802413e:	1c42      	adds	r2, r0, #1
 8024140:	d101      	bne.n	8024146 <__sflush_r+0x76>
 8024142:	682b      	ldr	r3, [r5, #0]
 8024144:	b903      	cbnz	r3, 8024148 <__sflush_r+0x78>
 8024146:	6560      	str	r0, [r4, #84]	@ 0x54
 8024148:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802414a:	602f      	str	r7, [r5, #0]
 802414c:	b1b9      	cbz	r1, 802417e <__sflush_r+0xae>
 802414e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024152:	4299      	cmp	r1, r3
 8024154:	d002      	beq.n	802415c <__sflush_r+0x8c>
 8024156:	4628      	mov	r0, r5
 8024158:	f7ff fca2 	bl	8023aa0 <_free_r>
 802415c:	2300      	movs	r3, #0
 802415e:	6363      	str	r3, [r4, #52]	@ 0x34
 8024160:	e00d      	b.n	802417e <__sflush_r+0xae>
 8024162:	2301      	movs	r3, #1
 8024164:	4628      	mov	r0, r5
 8024166:	47b0      	blx	r6
 8024168:	4602      	mov	r2, r0
 802416a:	1c50      	adds	r0, r2, #1
 802416c:	d1c9      	bne.n	8024102 <__sflush_r+0x32>
 802416e:	682b      	ldr	r3, [r5, #0]
 8024170:	2b00      	cmp	r3, #0
 8024172:	d0c6      	beq.n	8024102 <__sflush_r+0x32>
 8024174:	2b1d      	cmp	r3, #29
 8024176:	d001      	beq.n	802417c <__sflush_r+0xac>
 8024178:	2b16      	cmp	r3, #22
 802417a:	d11e      	bne.n	80241ba <__sflush_r+0xea>
 802417c:	602f      	str	r7, [r5, #0]
 802417e:	2000      	movs	r0, #0
 8024180:	e022      	b.n	80241c8 <__sflush_r+0xf8>
 8024182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024186:	b21b      	sxth	r3, r3
 8024188:	e01b      	b.n	80241c2 <__sflush_r+0xf2>
 802418a:	690f      	ldr	r7, [r1, #16]
 802418c:	2f00      	cmp	r7, #0
 802418e:	d0f6      	beq.n	802417e <__sflush_r+0xae>
 8024190:	0793      	lsls	r3, r2, #30
 8024192:	680e      	ldr	r6, [r1, #0]
 8024194:	bf08      	it	eq
 8024196:	694b      	ldreq	r3, [r1, #20]
 8024198:	600f      	str	r7, [r1, #0]
 802419a:	bf18      	it	ne
 802419c:	2300      	movne	r3, #0
 802419e:	eba6 0807 	sub.w	r8, r6, r7
 80241a2:	608b      	str	r3, [r1, #8]
 80241a4:	f1b8 0f00 	cmp.w	r8, #0
 80241a8:	dde9      	ble.n	802417e <__sflush_r+0xae>
 80241aa:	6a21      	ldr	r1, [r4, #32]
 80241ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80241ae:	4643      	mov	r3, r8
 80241b0:	463a      	mov	r2, r7
 80241b2:	4628      	mov	r0, r5
 80241b4:	47b0      	blx	r6
 80241b6:	2800      	cmp	r0, #0
 80241b8:	dc08      	bgt.n	80241cc <__sflush_r+0xfc>
 80241ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80241be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80241c2:	81a3      	strh	r3, [r4, #12]
 80241c4:	f04f 30ff 	mov.w	r0, #4294967295
 80241c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241cc:	4407      	add	r7, r0
 80241ce:	eba8 0800 	sub.w	r8, r8, r0
 80241d2:	e7e7      	b.n	80241a4 <__sflush_r+0xd4>
 80241d4:	20400001 	.word	0x20400001

080241d8 <_fflush_r>:
 80241d8:	b538      	push	{r3, r4, r5, lr}
 80241da:	690b      	ldr	r3, [r1, #16]
 80241dc:	4605      	mov	r5, r0
 80241de:	460c      	mov	r4, r1
 80241e0:	b913      	cbnz	r3, 80241e8 <_fflush_r+0x10>
 80241e2:	2500      	movs	r5, #0
 80241e4:	4628      	mov	r0, r5
 80241e6:	bd38      	pop	{r3, r4, r5, pc}
 80241e8:	b118      	cbz	r0, 80241f2 <_fflush_r+0x1a>
 80241ea:	6a03      	ldr	r3, [r0, #32]
 80241ec:	b90b      	cbnz	r3, 80241f2 <_fflush_r+0x1a>
 80241ee:	f7ff f9eb 	bl	80235c8 <__sinit>
 80241f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	d0f3      	beq.n	80241e2 <_fflush_r+0xa>
 80241fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80241fc:	07d0      	lsls	r0, r2, #31
 80241fe:	d404      	bmi.n	802420a <_fflush_r+0x32>
 8024200:	0599      	lsls	r1, r3, #22
 8024202:	d402      	bmi.n	802420a <_fflush_r+0x32>
 8024204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024206:	f7ff fbde 	bl	80239c6 <__retarget_lock_acquire_recursive>
 802420a:	4628      	mov	r0, r5
 802420c:	4621      	mov	r1, r4
 802420e:	f7ff ff5f 	bl	80240d0 <__sflush_r>
 8024212:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024214:	07da      	lsls	r2, r3, #31
 8024216:	4605      	mov	r5, r0
 8024218:	d4e4      	bmi.n	80241e4 <_fflush_r+0xc>
 802421a:	89a3      	ldrh	r3, [r4, #12]
 802421c:	059b      	lsls	r3, r3, #22
 802421e:	d4e1      	bmi.n	80241e4 <_fflush_r+0xc>
 8024220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024222:	f7ff fbd1 	bl	80239c8 <__retarget_lock_release_recursive>
 8024226:	e7dd      	b.n	80241e4 <_fflush_r+0xc>

08024228 <__swhatbuf_r>:
 8024228:	b570      	push	{r4, r5, r6, lr}
 802422a:	460c      	mov	r4, r1
 802422c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024230:	2900      	cmp	r1, #0
 8024232:	b096      	sub	sp, #88	@ 0x58
 8024234:	4615      	mov	r5, r2
 8024236:	461e      	mov	r6, r3
 8024238:	da0d      	bge.n	8024256 <__swhatbuf_r+0x2e>
 802423a:	89a3      	ldrh	r3, [r4, #12]
 802423c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024240:	f04f 0100 	mov.w	r1, #0
 8024244:	bf14      	ite	ne
 8024246:	2340      	movne	r3, #64	@ 0x40
 8024248:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802424c:	2000      	movs	r0, #0
 802424e:	6031      	str	r1, [r6, #0]
 8024250:	602b      	str	r3, [r5, #0]
 8024252:	b016      	add	sp, #88	@ 0x58
 8024254:	bd70      	pop	{r4, r5, r6, pc}
 8024256:	466a      	mov	r2, sp
 8024258:	f000 f848 	bl	80242ec <_fstat_r>
 802425c:	2800      	cmp	r0, #0
 802425e:	dbec      	blt.n	802423a <__swhatbuf_r+0x12>
 8024260:	9901      	ldr	r1, [sp, #4]
 8024262:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024266:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802426a:	4259      	negs	r1, r3
 802426c:	4159      	adcs	r1, r3
 802426e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024272:	e7eb      	b.n	802424c <__swhatbuf_r+0x24>

08024274 <__smakebuf_r>:
 8024274:	898b      	ldrh	r3, [r1, #12]
 8024276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024278:	079d      	lsls	r5, r3, #30
 802427a:	4606      	mov	r6, r0
 802427c:	460c      	mov	r4, r1
 802427e:	d507      	bpl.n	8024290 <__smakebuf_r+0x1c>
 8024280:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024284:	6023      	str	r3, [r4, #0]
 8024286:	6123      	str	r3, [r4, #16]
 8024288:	2301      	movs	r3, #1
 802428a:	6163      	str	r3, [r4, #20]
 802428c:	b003      	add	sp, #12
 802428e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024290:	ab01      	add	r3, sp, #4
 8024292:	466a      	mov	r2, sp
 8024294:	f7ff ffc8 	bl	8024228 <__swhatbuf_r>
 8024298:	9f00      	ldr	r7, [sp, #0]
 802429a:	4605      	mov	r5, r0
 802429c:	4639      	mov	r1, r7
 802429e:	4630      	mov	r0, r6
 80242a0:	f7ff f86c 	bl	802337c <_malloc_r>
 80242a4:	b948      	cbnz	r0, 80242ba <__smakebuf_r+0x46>
 80242a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80242aa:	059a      	lsls	r2, r3, #22
 80242ac:	d4ee      	bmi.n	802428c <__smakebuf_r+0x18>
 80242ae:	f023 0303 	bic.w	r3, r3, #3
 80242b2:	f043 0302 	orr.w	r3, r3, #2
 80242b6:	81a3      	strh	r3, [r4, #12]
 80242b8:	e7e2      	b.n	8024280 <__smakebuf_r+0xc>
 80242ba:	89a3      	ldrh	r3, [r4, #12]
 80242bc:	6020      	str	r0, [r4, #0]
 80242be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80242c2:	81a3      	strh	r3, [r4, #12]
 80242c4:	9b01      	ldr	r3, [sp, #4]
 80242c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80242ca:	b15b      	cbz	r3, 80242e4 <__smakebuf_r+0x70>
 80242cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80242d0:	4630      	mov	r0, r6
 80242d2:	f000 f81d 	bl	8024310 <_isatty_r>
 80242d6:	b128      	cbz	r0, 80242e4 <__smakebuf_r+0x70>
 80242d8:	89a3      	ldrh	r3, [r4, #12]
 80242da:	f023 0303 	bic.w	r3, r3, #3
 80242de:	f043 0301 	orr.w	r3, r3, #1
 80242e2:	81a3      	strh	r3, [r4, #12]
 80242e4:	89a3      	ldrh	r3, [r4, #12]
 80242e6:	431d      	orrs	r5, r3
 80242e8:	81a5      	strh	r5, [r4, #12]
 80242ea:	e7cf      	b.n	802428c <__smakebuf_r+0x18>

080242ec <_fstat_r>:
 80242ec:	b538      	push	{r3, r4, r5, lr}
 80242ee:	4d07      	ldr	r5, [pc, #28]	@ (802430c <_fstat_r+0x20>)
 80242f0:	2300      	movs	r3, #0
 80242f2:	4604      	mov	r4, r0
 80242f4:	4608      	mov	r0, r1
 80242f6:	4611      	mov	r1, r2
 80242f8:	602b      	str	r3, [r5, #0]
 80242fa:	f7dd f9e2 	bl	80016c2 <_fstat>
 80242fe:	1c43      	adds	r3, r0, #1
 8024300:	d102      	bne.n	8024308 <_fstat_r+0x1c>
 8024302:	682b      	ldr	r3, [r5, #0]
 8024304:	b103      	cbz	r3, 8024308 <_fstat_r+0x1c>
 8024306:	6023      	str	r3, [r4, #0]
 8024308:	bd38      	pop	{r3, r4, r5, pc}
 802430a:	bf00      	nop
 802430c:	24025e7c 	.word	0x24025e7c

08024310 <_isatty_r>:
 8024310:	b538      	push	{r3, r4, r5, lr}
 8024312:	4d06      	ldr	r5, [pc, #24]	@ (802432c <_isatty_r+0x1c>)
 8024314:	2300      	movs	r3, #0
 8024316:	4604      	mov	r4, r0
 8024318:	4608      	mov	r0, r1
 802431a:	602b      	str	r3, [r5, #0]
 802431c:	f7dd f9d6 	bl	80016cc <_isatty>
 8024320:	1c43      	adds	r3, r0, #1
 8024322:	d102      	bne.n	802432a <_isatty_r+0x1a>
 8024324:	682b      	ldr	r3, [r5, #0]
 8024326:	b103      	cbz	r3, 802432a <_isatty_r+0x1a>
 8024328:	6023      	str	r3, [r4, #0]
 802432a:	bd38      	pop	{r3, r4, r5, pc}
 802432c:	24025e7c 	.word	0x24025e7c

08024330 <_init>:
 8024330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024332:	bf00      	nop
 8024334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024336:	bc08      	pop	{r3}
 8024338:	469e      	mov	lr, r3
 802433a:	4770      	bx	lr

0802433c <_fini>:
 802433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802433e:	bf00      	nop
 8024340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024342:	bc08      	pop	{r3}
 8024344:	469e      	mov	lr, r3
 8024346:	4770      	bx	lr
