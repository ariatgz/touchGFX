
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023ce8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003214  08023f88  08023f88  00024f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002162  0802719c  0802719c  0002819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  08029300  08029300  0002a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 001edf20  90000000  90000000  00035000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000030  901edf20  901edf20  00222f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080294b8  080294b8  00222f50  2**0
                  CONTENTS
  8 .ARM          00000008  080294b8  080294b8  0002a4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080294c0  080294c0  00222f50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  080294c0  080294c0  0002a4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080294dc  080294dc  0002a4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  080294e4  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_MCU_Data_OutBuffer1 00004b00  24000140  08029620  0002b140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_MCU_Data_OutBuffer0 00004b00  24004c40  0802e120  0002fc40  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 TouchGFX_ScratchbufferA 00000100  24009740  08032c20  00034740  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 TouchGFX_ScratchbufferB 00000100  24009840  08032d20  00034840  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0001c5d0  24009940  08032e20  00034940  2**2
                  ALLOC
 18 ._user_heap_stack 00002000  24025f10  08032e20  00034f10  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  00222f50  2**0
                  CONTENTS, READONLY
 20 BufferSection 00232800  d0000000  d0000000  00223000  2**2
                  ALLOC
 21 .debug_info   000cbfd5  00000000  00000000  00222f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00016a5a  00000000  00000000  002eef53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00003b30  00000000  00000000  003059b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00003f49  00000000  00000000  003094e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00054cb7  00000000  00000000  0030d429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0006809c  00000000  00000000  003620e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    001f45b5  00000000  00000000  003ca17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000c2  00000000  00000000  005be731  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000a840  00000000  00000000  005be7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 00024fe1  00000000  00000000  005c9034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 0000006e  00000000  00000000  005ee015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24009940 	.word	0x24009940
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023f70 	.word	0x08023f70

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24009944 	.word	0x24009944
 80002dc:	08023f70 	.word	0x08023f70

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00d bc56 	b.w	800dfac <vTaskSetApplicationTaskTag>
 8000700:	08002151 	.word	0x08002151

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f022 fe9b 	bl	8023448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f022 fe96 	bl	8023448 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f009 fa9f 	bl	8009c60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f009 fd66 	bl	800a254 <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f00a f8ec 	bl	800a984 <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f009 fff4 	bl	800a7a4 <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f022 fe36 	bl	8023448 <memset>
  HAL_MPU_Disable();
 80007dc:	f006 fc48 	bl	8007070 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f006 fc5b 	bl	80070ac <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f006 fc53 	bl	80070ac <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f006 fc45 	bl	80070ac <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f006 fc36 	bl	80070ac <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f006 fc2b 	bl	80070ac <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f006 fc1e 	bl	80070ac <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f006 fc0b 	bl	800708c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 8320 	beq.w	8000f46 <main+0x77e>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f009 fab7 	bl	8009e98 <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f005 f8ab 	bl	8005a98 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f005 f852 	bl	80059f0 <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f006 fc2e 	bl	80071c6 <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4641      	mov	r1, r8
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f007 fb08 	bl	8007f8c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f005 fd2f 	bl	80063e0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	462a      	mov	r2, r5
 8000984:	4641      	mov	r1, r8
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f007 fb00 	bl	8007f8c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f005 fd27 	bl	80063e0 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f022 fd56 	bl	8023448 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f022 fd51 	bl	8023448 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f022 fd4c 	bl	8023448 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f022 fd47 	bl	8023448 <memset>
  hdsi.Instance = DSI;
 80009ba:	4e51      	ldr	r6, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4630      	mov	r0, r6
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c6 3400 	strd	r3, r4, [r6]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c6 9502 	strd	r9, r5, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f006 fd44 	bl	8007460 <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4630      	mov	r0, r6
 80009f4:	f006 ffa0 	bl	8007938 <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4630      	mov	r0, r6
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 7313 	strd	r7, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f006 ff52 	bl	80078be <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f006 ff3a 	bl	800789c <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f007 f909 	bl	8007c4a <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f006 fcaa 	bl	800739a <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f006 fec8 	bl	8007834 <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f006 fe3d 	bl	8007750 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240099c8 	.word	0x240099c8
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24009c08 	.word	0x24009c08
 8000afc:	58021800 	.word	0x58021800
 8000b00:	24009bec 	.word	0x24009bec
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	4874      	ldr	r0, [pc, #464]	@ (8000cdc <main+0x514>)
 8000b0a:	f006 fe10 	bl	800772e <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d70      	ldr	r5, [pc, #448]	@ (8000ce0 <main+0x518>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f022 fc93 	bl	8023448 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c204 	ldr.w	ip, [pc, #516]	@ 8000d28 <main+0x560>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f008 fd73 	bl	800964c <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b70:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
  pLayerCfg.WindowY1 = 480;
 8000b74:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000b78:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000b7a:	f8ad 00b0 	strh.w	r0, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7e:	f88d 00b2 	strb.w	r0, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b82:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b84:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	e9cd 4127 	strd	r4, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b8e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  pLayerCfg.WindowX1 = 400;
 8000b92:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.ImageWidth = 400;
 8000b96:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f008 fe08 	bl	80097b6 <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	484a      	ldr	r0, [pc, #296]	@ (8000cdc <main+0x514>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f006 ff23 	bl	8007a04 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4949      	ldr	r1, [pc, #292]	@ (8000ce4 <main+0x51c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b49      	ldr	r3, [pc, #292]	@ (8000ce8 <main+0x520>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	484a      	ldr	r0, [pc, #296]	@ (8000cec <main+0x524>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf0 <main+0x528>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b49      	ldr	r3, [pc, #292]	@ (8000cf4 <main+0x52c>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f004 fd04 	bl	80055dc <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	4844      	ldr	r0, [pc, #272]	@ (8000cec <main+0x524>)
 8000bda:	f004 f96f 	bl	8004ebc <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	483d      	ldr	r0, [pc, #244]	@ (8000cdc <main+0x514>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f006 ff3f 	bl	8007a6a <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	483b      	ldr	r0, [pc, #236]	@ (8000cdc <main+0x514>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f006 fe15 	bl	8007834 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f008 fdfd 	bl	8009810 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	4837      	ldr	r0, [pc, #220]	@ (8000cf8 <main+0x530>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b35      	ldr	r3, [pc, #212]	@ (8000cfc <main+0x534>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f006 fa69 	bl	8007104 <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4831      	ldr	r0, [pc, #196]	@ (8000d00 <main+0x538>)
 8000c3a:	4b32      	ldr	r3, [pc, #200]	@ (8000d04 <main+0x53c>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f007 feff 	bl	8008a40 <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c48:	221c      	movs	r2, #28
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	a82d      	add	r0, sp, #180	@ 0xb4
  hadc3.Instance = ADC3;
 8000c4e:	4c2e      	ldr	r4, [pc, #184]	@ (8000d08 <main+0x540>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c50:	f022 fbfa 	bl	8023448 <memset>
  hadc3.Instance = ADC3;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <main+0x544>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c56:	2008      	movs	r0, #8
  hadc3.Init.NbrOfConversion = 1;
 8000c58:	2501      	movs	r5, #1
  hadc3.Instance = ADC3;
 8000c5a:	6023      	str	r3, [r4, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5c:	2300      	movs	r3, #0
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5e:	2604      	movs	r6, #4
  hadc3.Init.NbrOfConversion = 1;
 8000c60:	61a5      	str	r5, [r4, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c62:	82a3      	strh	r3, [r4, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c64:	6126      	str	r6, [r4, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c66:	7723      	strb	r3, [r4, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c68:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c6a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000c6e:	63e5      	str	r5, [r4, #60]	@ 0x3c
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c70:	e9c4 0302 	strd	r0, r3, [r4, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c74:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c76:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c7a:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c7e:	f006 f88b 	bl	8006d98 <HAL_ADC_Init>
 8000c82:	b108      	cbz	r0, 8000c88 <main+0x4c0>
 8000c84:	b672      	cpsid	i
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <main+0x4be>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c88:	2306      	movs	r3, #6
  sConfig.Offset = 0;
 8000c8a:	9032      	str	r0, [sp, #200]	@ 0xc8
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c8c:	f88d 00cd 	strb.w	r0, [sp, #205]	@ 0xcd
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c90:	a92d      	add	r1, sp, #180	@ 0xb4
  sConfig.Channel = ADC_CHANNEL_0;
 8000c92:	952d      	str	r5, [sp, #180]	@ 0xb4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c94:	e9cd 302e 	strd	r3, r0, [sp, #184]	@ 0xb8
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c98:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c9c:	4620      	mov	r0, r4
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9e:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ca2:	f005 fc57 	bl	8006554 <HAL_ADC_ConfigChannel>
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	b108      	cbz	r0, 8000cae <main+0x4e6>
 8000caa:	b672      	cpsid	i
  while (1)
 8000cac:	e7fe      	b.n	8000cac <main+0x4e4>
  MX_TouchGFX_Init();
 8000cae:	f000 fde1 	bl	8001874 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000cb2:	f000 fdde 	bl	8001872 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000cb6:	f00b fc1d 	bl	800c4f4 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000cba:	4a15      	ldr	r2, [pc, #84]	@ (8000d10 <main+0x548>)
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	4815      	ldr	r0, [pc, #84]	@ (8000d14 <main+0x54c>)
 8000cc0:	f00b fc44 	bl	800c54c <osThreadNew>
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <main+0x550>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000cc6:	4a15      	ldr	r2, [pc, #84]	@ (8000d1c <main+0x554>)
 8000cc8:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000cca:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000ccc:	4814      	ldr	r0, [pc, #80]	@ (8000d20 <main+0x558>)
 8000cce:	f00b fc3d 	bl	800c54c <osThreadNew>
 8000cd2:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <main+0x55c>)
 8000cd4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000cd6:	f00b fc1f 	bl	800c518 <osKernelStart>
  while (1)
 8000cda:	e7fe      	b.n	8000cda <main+0x512>
 8000cdc:	24009bec 	.word	0x24009bec
 8000ce0:	24009a14 	.word	0x24009a14
 8000ce4:	2400995c 	.word	0x2400995c
 8000ce8:	080059c1 	.word	0x080059c1
 8000cec:	2400996c 	.word	0x2400996c
 8000cf0:	08001e49 	.word	0x08001e49
 8000cf4:	08001e81 	.word	0x08001e81
 8000cf8:	24009c70 	.word	0x24009c70
 8000cfc:	58024c00 	.word	0x58024c00
 8000d00:	24009b94 	.word	0x24009b94
 8000d04:	52003000 	.word	0x52003000
 8000d08:	24009c94 	.word	0x24009c94
 8000d0c:	58026000 	.word	0x58026000
 8000d10:	08025eb0 	.word	0x08025eb0
 8000d14:	08001883 	.word	0x08001883
 8000d18:	24009990 	.word	0x24009990
 8000d1c:	08025e8c 	.word	0x08025e8c
 8000d20:	080039dd 	.word	0x080039dd
 8000d24:	2400998c 	.word	0x2400998c
 8000d28:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	2214      	movs	r2, #20
 8000d2e:	2100      	movs	r1, #0
 8000d30:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2600      	movs	r6, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f022 fb88 	bl	8023448 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000d46:	4891      	ldr	r0, [pc, #580]	@ (8000f8c <main+0x7c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2703      	movs	r7, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d50:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d54:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d58:	f44f 7980 	mov.w	r9, #256	@ 0x100
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000d5c:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d64:	9304      	str	r3, [sp, #16]
 8000d66:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	9305      	str	r3, [sp, #20]
 8000d7e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d88:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d94:	9306      	str	r3, [sp, #24]
 8000d96:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f003 0310 	and.w	r3, r3, #16
 8000dac:	9307      	str	r3, [sp, #28]
 8000dae:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dc4:	9308      	str	r3, [sp, #32]
 8000dc6:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dd4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000de0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000de4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000df4:	930a      	str	r3, [sp, #40]	@ 0x28
 8000df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000e04:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000e0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000e1c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	930c      	str	r3, [sp, #48]	@ 0x30
 8000e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e28:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000e34:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000e38:	f003 0320 	and.w	r3, r3, #32
 8000e3c:	930d      	str	r3, [sp, #52]	@ 0x34
 8000e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000e40:	f007 f8a4 	bl	8007f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2108      	movs	r1, #8
 8000e48:	4851      	ldr	r0, [pc, #324]	@ (8000f90 <main+0x7c8>)
 8000e4a:	f007 f89f 	bl	8007f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e54:	484f      	ldr	r0, [pc, #316]	@ (8000f94 <main+0x7cc>)
 8000e56:	f007 f899 	bl	8007f8c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e5e:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e60:	484a      	ldr	r0, [pc, #296]	@ (8000f8c <main+0x7c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e6a:	f006 ff05 	bl	8007c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e74:	4848      	ldr	r0, [pc, #288]	@ (8000f98 <main+0x7d0>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e76:	f8cd a0bc 	str.w	sl, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	e9cd 362d 	strd	r3, r6, [sp, #180]	@ 0xb4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f006 fefb 	bl	8007c78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e84:	4845      	ldr	r0, [pc, #276]	@ (8000f9c <main+0x7d4>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e86:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	e9cd 9a2d 	strd	r9, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f006 fef2 	bl	8007c78 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e94:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e96:	483e      	ldr	r0, [pc, #248]	@ (8000f90 <main+0x7c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	e9cd 572f 	strd	r5, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f006 feea 	bl	8007c78 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	a92d      	add	r1, sp, #180	@ 0xb4
 8000ea6:	483b      	ldr	r0, [pc, #236]	@ (8000f94 <main+0x7cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	e9cd 952d 	strd	r9, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f006 fee2 	bl	8007c78 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000eb4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000eb8:	4632      	mov	r2, r6
 8000eba:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000ebc:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000ebe:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000ec0:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000ec4:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000ec8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ecc:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000ece:	402b      	ands	r3, r5
 8000ed0:	9303      	str	r3, [sp, #12]
 8000ed2:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000ed4:	f006 f87a 	bl	8006fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000ed8:	207a      	movs	r0, #122	@ 0x7a
 8000eda:	f006 f8a9 	bl	8007030 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000ede:	4a30      	ldr	r2, [pc, #192]	@ (8000fa0 <main+0x7d8>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ee0:	4830      	ldr	r0, [pc, #192]	@ (8000fa4 <main+0x7dc>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ee2:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000ee4:	6813      	ldr	r3, [r2, #0]
 8000ee6:	f023 0301 	bic.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa8 <main+0x7e0>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ef2:	61c6      	str	r6, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ef4:	6286      	str	r6, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000ef6:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000ef8:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000efc:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000f00:	2320      	movs	r3, #32
 8000f02:	e9c0 9303 	strd	r9, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f06:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f0a:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f12:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f16:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000f18:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000f1c:	e9cd 392e 	strd	r3, r9, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000f20:	e9cd 3730 	strd	r3, r7, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f24:	f00b f832 	bl	800bf8c <HAL_SDRAM_Init>
 8000f28:	4606      	mov	r6, r0
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	f47f acef 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000f30:	f004 ff6c 	bl	8005e0c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000f34:	4630      	mov	r0, r6
 8000f36:	f004 ffb7 	bl	8005ea8 <BSP_SDRAM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f43f ace8 	beq.w	8000912 <main+0x14a>
 8000f42:	b672      	cpsid	i
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <main+0x77c>
  HAL_Init();
 8000f46:	f005 fa0b 	bl	8006360 <HAL_Init>
  SystemClock_Config();
 8000f4a:	f7ff fbdb 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f4e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f52:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f58:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000f5c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f68:	f007 f81e 	bl	8007fa8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f007 f828 	bl	8007fc4 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f74:	4c0d      	ldr	r4, [pc, #52]	@ (8000fac <main+0x7e4>)
timeout = 0xFFFF;
 8000f76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f7a:	6822      	ldr	r2, [r4, #0]
 8000f7c:	0412      	lsls	r2, r2, #16
 8000f7e:	f53f aed5 	bmi.w	8000d2c <main+0x564>
 8000f82:	3b01      	subs	r3, #1
 8000f84:	d2f9      	bcs.n	8000f7a <main+0x7b2>
 8000f86:	b672      	cpsid	i
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <main+0x7c0>
 8000f8a:	bf00      	nop
 8000f8c:	58022400 	.word	0x58022400
 8000f90:	58021800 	.word	0x58021800
 8000f94:	58021400 	.word	0x58021400
 8000f98:	58020800 	.word	0x58020800
 8000f9c:	58020000 	.word	0x58020000
 8000fa0:	52004000 	.word	0x52004000
 8000fa4:	24009994 	.word	0x24009994
 8000fa8:	52004140 	.word	0x52004140
 8000fac:	58024400 	.word	0x58024400

08000fb0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 8000fb0:	6802      	ldr	r2, [r0, #0]
 8000fb2:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d101      	bne.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000fb8:	f005 ba00 	b.w	80063bc <HAL_IncTick>
}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40001000 	.word	0x40001000

08000fc4 <Error_Handler>:
 8000fc4:	b672      	cpsid	i
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <Error_Handler+0x2>

08000fc8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <HAL_MspInit+0x2c>)
{
 8000fca:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fcc:	210f      	movs	r1, #15
 8000fce:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000fd6:	f042 0202 	orr.w	r2, r2, #2
 8000fda:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fde:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fec:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fee:	f005 bfed 	b.w	8006fcc <HAL_NVIC_SetPriority>
 8000ff2:	bf00      	nop
 8000ff4:	58024400 	.word	0x58024400

08000ff8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	b0b4      	sub	sp, #208	@ 0xd0
 8000ffc:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ffe:	22c8      	movs	r2, #200	@ 0xc8
 8001000:	2100      	movs	r1, #0
 8001002:	a802      	add	r0, sp, #8
 8001004:	f022 fa20 	bl	8023448 <memset>
  if(hadc->Instance==ADC3)
 8001008:	6822      	ldr	r2, [r4, #0]
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <HAL_ADC_MspInit+0x84>)
 800100c:	429a      	cmp	r2, r3
 800100e:	d133      	bne.n	8001078 <HAL_ADC_MspInit+0x80>

    /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001010:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001014:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL2.PLL2R = 2;
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001016:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001018:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 800101c:	2302      	movs	r3, #2
 800101e:	220c      	movs	r2, #12
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001020:	e9cd 3306 	strd	r3, r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001024:	e9cd 3204 	strd	r3, r2, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001028:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800102a:	22c0      	movs	r2, #192	@ 0xc0
 800102c:	2320      	movs	r3, #32
 800102e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001032:	f009 ff29 	bl	800ae88 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	b108      	cbz	r0, 800103c <HAL_ADC_MspInit+0x44>
    {
      Error_Handler();
 8001038:	f7ff ffc4 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800103c:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <HAL_ADC_MspInit+0x88>)

    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800103e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001042:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001046:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001048:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800104c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001050:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001054:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001060:	f042 0204 	orr.w	r2, r2, #4
 8001064:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001074:	f005 f9cc 	bl	8006410 <HAL_SYSCFG_AnalogSwitchConfig>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001078:	b034      	add	sp, #208	@ 0xd0
 800107a:	bd10      	pop	{r4, pc}
 800107c:	58026000 	.word	0x58026000
 8001080:	58024400 	.word	0x58024400

08001084 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001084:	6802      	ldr	r2, [r0, #0]
{
 8001086:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_CRC_MspInit+0x2c>)
 800108a:	429a      	cmp	r2, r3
 800108c:	d10d      	bne.n	80010aa <HAL_CRC_MspInit+0x26>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800108e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001092:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001096:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800109a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80010aa:	b002      	add	sp, #8
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	58024c00 	.word	0x58024c00

080010b4 <HAL_DMA2D_MspInit>:
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <HAL_DMA2D_MspInit+0x40>)
{
 80010b6:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80010b8:	6802      	ldr	r2, [r0, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d117      	bne.n	80010ee <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80010c0:	2107      	movs	r1, #7
 80010c2:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010c4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80010c8:	f042 0210 	orr.w	r2, r2, #16
 80010cc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80010d0:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80010de:	f005 ff75 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010e2:	205a      	movs	r0, #90	@ 0x5a

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80010e4:	b003      	add	sp, #12
 80010e6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010ea:	f005 bfa1 	b.w	8007030 <HAL_NVIC_EnableIRQ>
}
 80010ee:	b003      	add	sp, #12
 80010f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f4:	52001000 	.word	0x52001000
 80010f8:	58024400 	.word	0x58024400

080010fc <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80010fc:	b510      	push	{r4, lr}
 80010fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001100:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	2214      	movs	r2, #20
 8001104:	2100      	movs	r1, #0
 8001106:	a803      	add	r0, sp, #12
 8001108:	f022 f99e 	bl	8023448 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800110c:	22c8      	movs	r2, #200	@ 0xc8
 800110e:	2100      	movs	r1, #0
 8001110:	a808      	add	r0, sp, #32
 8001112:	f022 f999 	bl	8023448 <memset>
  if(hdsi->Instance==DSI)
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800111c:	d138      	bne.n	8001190 <HAL_DSI_MspInit+0x94>

    /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800111e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001122:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001124:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001126:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112a:	f009 fead 	bl	800ae88 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	b108      	cbz	r0, 8001134 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001130:	f7ff ff48 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001138:	a903      	add	r1, sp, #12
 800113a:	4817      	ldr	r0, [pc, #92]	@ (8001198 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 800113c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001140:	f042 0210 	orr.w	r2, r2, #16
 8001144:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001148:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800114c:	f002 0210 	and.w	r2, r2, #16
 8001150:	9201      	str	r2, [sp, #4]
 8001152:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001154:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800115c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001174:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800117a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800117c:	f006 fd7c 	bl	8007c78 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001180:	207b      	movs	r0, #123	@ 0x7b
 8001182:	4622      	mov	r2, r4
 8001184:	2107      	movs	r1, #7
 8001186:	f005 ff21 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800118a:	207b      	movs	r0, #123	@ 0x7b
 800118c:	f005 ff50 	bl	8007030 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 8001190:	b03a      	add	sp, #232	@ 0xe8
 8001192:	bd10      	pop	{r4, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	58022400 	.word	0x58022400

0800119c <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800119c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 800119e:	4b3c      	ldr	r3, [pc, #240]	@ (8001290 <HAL_JPEG_MspInit+0xf4>)
{
 80011a0:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80011a2:	6802      	ldr	r2, [r0, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d170      	bne.n	800128a <HAL_JPEG_MspInit+0xee>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80011a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001294 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80011aa:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80011ac:	4c3a      	ldr	r4, [pc, #232]	@ (8001298 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80011ae:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80011b2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80011b6:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 80012a4 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80011ba:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80011bc:	f042 0220 	orr.w	r2, r2, #32
 80011c0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80011c4:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80011c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011ca:	f003 0320 	and.w	r3, r3, #32
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80011d2:	2311      	movs	r3, #17
 80011d4:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80011de:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80011e2:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80011e4:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80011e6:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80011ea:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80011ee:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80011f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80011f6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80011fa:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80011fe:	f008 fb64 	bl	80098ca <HAL_MDMA_Init>
 8001202:	b108      	cbz	r0, 8001208 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8001204:	f7ff fede 	bl	8000fc4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001208:	2200      	movs	r2, #0
 800120a:	4823      	ldr	r0, [pc, #140]	@ (8001298 <HAL_JPEG_MspInit+0xfc>)
 800120c:	4611      	mov	r1, r2
 800120e:	f008 fbea 	bl	80099e6 <HAL_MDMA_ConfigPostRequestMask>
 8001212:	b108      	cbz	r0, 8001218 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001214:	f7ff fed6 	bl	8000fc4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001218:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800121a:	2313      	movs	r3, #19
 800121c:	4a1f      	ldr	r2, [pc, #124]	@ (800129c <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800121e:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001220:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001222:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 8001226:	4c1e      	ldr	r4, [pc, #120]	@ (80012a0 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001228:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	22c0      	movs	r2, #192	@ 0xc0
 8001230:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001234:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001236:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001238:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800123c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001240:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001244:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 8001248:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800124c:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 800124e:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001252:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001256:	f008 fb38 	bl	80098ca <HAL_MDMA_Init>
 800125a:	b108      	cbz	r0, 8001260 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 800125c:	f7ff feb2 	bl	8000fc4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001260:	2200      	movs	r2, #0
 8001262:	480f      	ldr	r0, [pc, #60]	@ (80012a0 <HAL_JPEG_MspInit+0x104>)
 8001264:	4611      	mov	r1, r2
 8001266:	f008 fbbe 	bl	80099e6 <HAL_MDMA_ConfigPostRequestMask>
 800126a:	b108      	cbz	r0, 8001270 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 800126c:	f7ff feaa 	bl	8000fc4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001270:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001278:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800127a:	f005 fea7 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800127e:	2079      	movs	r0, #121	@ 0x79

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001280:	b003      	add	sp, #12
 8001282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001286:	f005 bed3 	b.w	8007030 <HAL_NVIC_EnableIRQ>
}
 800128a:	b003      	add	sp, #12
 800128c:	bd30      	pop	{r4, r5, pc}
 800128e:	bf00      	nop
 8001290:	52003000 	.word	0x52003000
 8001294:	58024400 	.word	0x58024400
 8001298:	24009b28 	.word	0x24009b28
 800129c:	520001c0 	.word	0x520001c0
 80012a0:	24009abc 	.word	0x24009abc
 80012a4:	52000200 	.word	0x52000200

080012a8 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012a8:	b510      	push	{r4, lr}
 80012aa:	b0b4      	sub	sp, #208	@ 0xd0
 80012ac:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ae:	22c8      	movs	r2, #200	@ 0xc8
 80012b0:	2100      	movs	r1, #0
 80012b2:	a802      	add	r0, sp, #8
 80012b4:	f022 f8c8 	bl	8023448 <memset>
  if(hltdc->Instance==LTDC)
 80012b8:	6822      	ldr	r2, [r4, #0]
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <HAL_LTDC_MspInit+0x74>)
 80012bc:	429a      	cmp	r2, r3
 80012be:	d12b      	bne.n	8001318 <HAL_LTDC_MspInit+0x70>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012c4:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80012c6:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c8:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80012ce:	23a1      	movs	r3, #161	@ 0xa1
 80012d0:	2205      	movs	r2, #5
 80012d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80012d6:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80012d8:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80012dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012e0:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e4:	f009 fdd0 	bl	800ae88 <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	b108      	cbz	r0, 80012ee <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80012ea:	f7ff fe6b 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80012f0:	2058      	movs	r0, #88	@ 0x58
 80012f2:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012f4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80012f8:	f042 0208 	orr.w	r2, r2, #8
 80012fc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001300:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001302:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 800130e:	f005 fe5d 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001312:	2058      	movs	r0, #88	@ 0x58
 8001314:	f005 fe8c 	bl	8007030 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001318:	b034      	add	sp, #208	@ 0xd0
 800131a:	bd10      	pop	{r4, pc}
 800131c:	50001000 	.word	0x50001000
 8001320:	58024400 	.word	0x58024400

08001324 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	b0bf      	sub	sp, #252	@ 0xfc
 8001328:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	2214      	movs	r2, #20
 800132c:	2100      	movs	r1, #0
 800132e:	a807      	add	r0, sp, #28
 8001330:	f022 f88a 	bl	8023448 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001334:	22c8      	movs	r2, #200	@ 0xc8
 8001336:	2100      	movs	r1, #0
 8001338:	a80c      	add	r0, sp, #48	@ 0x30
 800133a:	f022 f885 	bl	8023448 <memset>
  if(hqspi->Instance==QUADSPI)
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <HAL_QSPI_MspInit+0x16c>)
 8001342:	429a      	cmp	r2, r3
 8001344:	f040 80a1 	bne.w	800148a <HAL_QSPI_MspInit+0x166>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001348:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800134c:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134e:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001350:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001354:	f009 fd98 	bl	800ae88 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	b108      	cbz	r0, 800135e <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800135a:	f7ff fe33 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800135e:	4b4d      	ldr	r3, [pc, #308]	@ (8001494 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001364:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001366:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136a:	a907      	add	r1, sp, #28
 800136c:	484a      	ldr	r0, [pc, #296]	@ (8001498 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800136e:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001370:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001374:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001378:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800137c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001380:	9201      	str	r2, [sp, #4]
 8001382:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001384:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800138c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001390:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001394:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001398:	9202      	str	r2, [sp, #8]
 800139a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800139c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013a0:	f042 0220 	orr.w	r2, r2, #32
 80013a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80013a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013ac:	f002 0220 	and.w	r2, r2, #32
 80013b0:	9203      	str	r2, [sp, #12]
 80013b2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80013c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013c4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80013c8:	9204      	str	r2, [sp, #16]
 80013ca:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013d0:	f042 0202 	orr.w	r2, r2, #2
 80013d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80013d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013dc:	f002 0202 	and.w	r2, r2, #2
 80013e0:	9205      	str	r2, [sp, #20]
 80013e2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013e8:	f042 0208 	orr.w	r2, r2, #8
 80013ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	9306      	str	r3, [sp, #24]
 80013fa:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001400:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001408:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800140a:	f006 fc35 	bl	8007c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800140e:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001410:	a907      	add	r1, sp, #28
 8001412:	4821      	ldr	r0, [pc, #132]	@ (8001498 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001414:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141e:	f006 fc2b 	bl	8007c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001422:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001424:	a907      	add	r1, sp, #28
 8001426:	481d      	ldr	r0, [pc, #116]	@ (800149c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001428:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001432:	f006 fc21 	bl	8007c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001436:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800143a:	a907      	add	r1, sp, #28
 800143c:	4817      	ldr	r0, [pc, #92]	@ (800149c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800143e:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001448:	f006 fc16 	bl	8007c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800144c:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144e:	a907      	add	r1, sp, #28
 8001450:	4813      	ldr	r0, [pc, #76]	@ (80014a0 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001452:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800145c:	f006 fc0c 	bl	8007c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001460:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	a907      	add	r1, sp, #28
 8001464:	480f      	ldr	r0, [pc, #60]	@ (80014a4 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001466:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f006 fc02 	bl	8007c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001474:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	a907      	add	r1, sp, #28
 800147a:	480b      	ldr	r0, [pc, #44]	@ (80014a8 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800147c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001486:	f006 fbf7 	bl	8007c78 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800148a:	b03f      	add	sp, #252	@ 0xfc
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148e:	bf00      	nop
 8001490:	52005000 	.word	0x52005000
 8001494:	58024400 	.word	0x58024400
 8001498:	58021800 	.word	0x58021800
 800149c:	58021400 	.word	0x58021400
 80014a0:	58021c00 	.word	0x58021c00
 80014a4:	58020400 	.word	0x58020400
 80014a8:	58020c00 	.word	0x58020c00

080014ac <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014b0:	2100      	movs	r1, #0
 80014b2:	2214      	movs	r2, #20
 80014b4:	a801      	add	r0, sp, #4
 80014b6:	f021 ffc7 	bl	8023448 <memset>
  if (FMC_Initialized) {
 80014ba:	4b3f      	ldr	r3, [pc, #252]	@ (80015b8 <HAL_SDRAM_MspInit+0x10c>)
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	2900      	cmp	r1, #0
 80014c0:	d177      	bne.n	80015b2 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80014c2:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80014c6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c8:	22c0      	movs	r2, #192	@ 0xc0
 80014ca:	f021 ffbd 	bl	8023448 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80014ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014d2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80014d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014da:	f009 fcd5 	bl	800ae88 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	b108      	cbz	r0, 80014e4 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80014e0:	f7ff fd70 	bl	8000fc4 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80014e4:	4b35      	ldr	r3, [pc, #212]	@ (80015bc <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2600      	movs	r6, #0
 80014ea:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80014ec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f0:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014f2:	a901      	add	r1, sp, #4
 80014f4:	4832      	ldr	r0, [pc, #200]	@ (80015c0 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80014f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80014fa:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80014fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001502:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001504:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001518:	f006 fbae 	bl	8007c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800151c:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	a901      	add	r1, sp, #4
 8001520:	4828      	ldr	r0, [pc, #160]	@ (80015c4 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001522:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f006 fba4 	bl	8007c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001530:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001534:	a901      	add	r1, sp, #4
 8001536:	4824      	ldr	r0, [pc, #144]	@ (80015c8 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001538:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001542:	f006 fb99 	bl	8007c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001546:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800154a:	a901      	add	r1, sp, #4
 800154c:	481f      	ldr	r0, [pc, #124]	@ (80015cc <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800154e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001558:	f006 fb8e 	bl	8007c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800155c:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001560:	a901      	add	r1, sp, #4
 8001562:	481b      	ldr	r0, [pc, #108]	@ (80015d0 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001564:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800156e:	f006 fb83 	bl	8007c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001572:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	a901      	add	r1, sp, #4
 8001578:	4816      	ldr	r0, [pc, #88]	@ (80015d4 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800157a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001584:	f006 fb78 	bl	8007c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001588:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158c:	a901      	add	r1, sp, #4
 800158e:	4812      	ldr	r0, [pc, #72]	@ (80015d8 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001590:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800159a:	f006 fb6d 	bl	8007c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800159e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	a901      	add	r1, sp, #4
 80015a2:	480e      	ldr	r0, [pc, #56]	@ (80015dc <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015a4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	f006 fb63 	bl	8007c78 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015b2:	b039      	add	sp, #228	@ 0xe4
 80015b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b6:	bf00      	nop
 80015b8:	24009cfc 	.word	0x24009cfc
 80015bc:	58024400 	.word	0x58024400
 80015c0:	58022000 	.word	0x58022000
 80015c4:	58020400 	.word	0x58020400
 80015c8:	58021000 	.word	0x58021000
 80015cc:	58021c00 	.word	0x58021c00
 80015d0:	58021800 	.word	0x58021800
 80015d4:	58020c00 	.word	0x58020c00
 80015d8:	58021400 	.word	0x58021400
 80015dc:	58020800 	.word	0x58020800

080015e0 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <HAL_SDRAM_MspDeInit+0x6c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80015e4:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80015e6:	bb82      	cbnz	r2, 800164a <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80015e8:	4a19      	ldr	r2, [pc, #100]	@ (8001650 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80015ea:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80015ec:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80015f0:	4818      	ldr	r0, [pc, #96]	@ (8001654 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80015f2:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80015f4:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80015f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001600:	f006 fc22 	bl	8007e48 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001604:	2160      	movs	r1, #96	@ 0x60
 8001606:	4814      	ldr	r0, [pc, #80]	@ (8001658 <HAL_SDRAM_MspDeInit+0x78>)
 8001608:	f006 fc1e 	bl	8007e48 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800160c:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001610:	4812      	ldr	r0, [pc, #72]	@ (800165c <HAL_SDRAM_MspDeInit+0x7c>)
 8001612:	f006 fc19 	bl	8007e48 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001616:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800161a:	4811      	ldr	r0, [pc, #68]	@ (8001660 <HAL_SDRAM_MspDeInit+0x80>)
 800161c:	f006 fc14 	bl	8007e48 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001620:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001624:	480f      	ldr	r0, [pc, #60]	@ (8001664 <HAL_SDRAM_MspDeInit+0x84>)
 8001626:	f006 fc0f 	bl	8007e48 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800162a:	f24c 7103 	movw	r1, #50947	@ 0xc703
 800162e:	480e      	ldr	r0, [pc, #56]	@ (8001668 <HAL_SDRAM_MspDeInit+0x88>)
 8001630:	f006 fc0a 	bl	8007e48 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001634:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <HAL_SDRAM_MspDeInit+0x8c>)
 800163a:	f006 fc05 	bl	8007e48 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800163e:	4621      	mov	r1, r4
 8001640:	480b      	ldr	r0, [pc, #44]	@ (8001670 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001646:	f006 bbff 	b.w	8007e48 <HAL_GPIO_DeInit>
}
 800164a:	bd10      	pop	{r4, pc}
 800164c:	24009cf8 	.word	0x24009cf8
 8001650:	58024400 	.word	0x58024400
 8001654:	58022000 	.word	0x58022000
 8001658:	58020400 	.word	0x58020400
 800165c:	58021000 	.word	0x58021000
 8001660:	58021c00 	.word	0x58021c00
 8001664:	58021800 	.word	0x58021800
 8001668:	58020c00 	.word	0x58020c00
 800166c:	58021400 	.word	0x58021400
 8001670:	58020800 	.word	0x58020800

08001674 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001674:	280f      	cmp	r0, #15
{
 8001676:	b510      	push	{r4, lr}
 8001678:	4604      	mov	r4, r0
 800167a:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167c:	d902      	bls.n	8001684 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800167e:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001680:	b00a      	add	sp, #40	@ 0x28
 8001682:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001684:	4601      	mov	r1, r0
 8001686:	2200      	movs	r2, #0
 8001688:	2036      	movs	r0, #54	@ 0x36
 800168a:	f005 fc9f 	bl	8006fcc <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800168e:	2036      	movs	r0, #54	@ 0x36
 8001690:	f005 fcce 	bl	8007030 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001694:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001696:	4669      	mov	r1, sp
 8001698:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800169a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 800169c:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <HAL_InitTick+0x88>)
 800169e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80016a2:	f042 0210 	orr.w	r2, r2, #16
 80016a6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80016aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016b6:	f009 fad1 	bl	800ac5c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016ba:	9b07      	ldr	r3, [sp, #28]
 80016bc:	b9c3      	cbnz	r3, 80016f0 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016be:	f009 faa9 	bl	800ac14 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80016c2:	4c0f      	ldr	r4, [pc, #60]	@ (8001700 <HAL_InitTick+0x8c>)
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_InitTick+0x90>)
 80016c6:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016c8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80016cc:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <HAL_InitTick+0x94>)
 80016d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80016d4:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80016d6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80016d8:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016da:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80016dc:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016e0:	f00a fe32 	bl	800c348 <HAL_TIM_Base_Init>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d1ca      	bne.n	800167e <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80016e8:	4620      	mov	r0, r4
 80016ea:	f00a fcf7 	bl	800c0dc <HAL_TIM_Base_Start_IT>
 80016ee:	e7c7      	b.n	8001680 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016f0:	f009 fa90 	bl	800ac14 <HAL_RCC_GetPCLK1Freq>
 80016f4:	0040      	lsls	r0, r0, #1
 80016f6:	e7e4      	b.n	80016c2 <HAL_InitTick+0x4e>
 80016f8:	24000074 	.word	0x24000074
 80016fc:	58024400 	.word	0x58024400
 8001700:	24009d00 	.word	0x24009d00
 8001704:	40001000 	.word	0x40001000
 8001708:	000f4240 	.word	0x000f4240

0800170c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler>

0800170e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler>

08001710 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler>

08001712 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler>

08001714 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler>

08001716 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	4770      	bx	lr

08001718 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001718:	4801      	ldr	r0, [pc, #4]	@ (8001720 <TIM6_DAC_IRQHandler+0x8>)
 800171a:	f00a bd21 	b.w	800c160 <HAL_TIM_IRQHandler>
 800171e:	bf00      	nop
 8001720:	24009d00 	.word	0x24009d00

08001724 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001724:	4801      	ldr	r0, [pc, #4]	@ (800172c <LTDC_IRQHandler+0x8>)
 8001726:	f007 bfe9 	b.w	80096fc <HAL_LTDC_IRQHandler>
 800172a:	bf00      	nop
 800172c:	24009a14 	.word	0x24009a14

08001730 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001730:	4801      	ldr	r0, [pc, #4]	@ (8001738 <DMA2D_IRQHandler+0x8>)
 8001732:	f005 bd87 	b.w	8007244 <HAL_DMA2D_IRQHandler>
 8001736:	bf00      	nop
 8001738:	24009c08 	.word	0x24009c08

0800173c <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800173c:	4801      	ldr	r0, [pc, #4]	@ (8001744 <JPEG_IRQHandler+0x8>)
 800173e:	f007 beb5 	b.w	80094ac <HAL_JPEG_IRQHandler>
 8001742:	bf00      	nop
 8001744:	24009b94 	.word	0x24009b94

08001748 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001748:	4804      	ldr	r0, [pc, #16]	@ (800175c <MDMA_IRQHandler+0x14>)
{
 800174a:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800174c:	f008 f9d0 	bl	8009af0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001750:	4803      	ldr	r0, [pc, #12]	@ (8001760 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001756:	f008 b9cb 	b.w	8009af0 <HAL_MDMA_IRQHandler>
 800175a:	bf00      	nop
 800175c:	24009abc 	.word	0x24009abc
 8001760:	24009b28 	.word	0x24009b28

08001764 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001764:	4801      	ldr	r0, [pc, #4]	@ (800176c <DSI_IRQHandler+0x8>)
 8001766:	f005 bf70 	b.w	800764a <HAL_DSI_IRQHandler>
 800176a:	bf00      	nop
 800176c:	24009bec 	.word	0x24009bec

08001770 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001770:	2001      	movs	r0, #1
 8001772:	4770      	bx	lr

08001774 <_kill>:

int _kill(int pid, int sig)
{
 8001774:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001776:	f021 ff1b 	bl	80235b0 <__errno>
 800177a:	2316      	movs	r3, #22
 800177c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800177e:	f04f 30ff 	mov.w	r0, #4294967295
 8001782:	bd08      	pop	{r3, pc}

08001784 <_exit>:

void _exit (int status)
{
 8001784:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001786:	f021 ff13 	bl	80235b0 <__errno>
 800178a:	2316      	movs	r3, #22
 800178c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800178e:	e7fe      	b.n	800178e <_exit+0xa>

08001790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	460d      	mov	r5, r1
 8001794:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	460e      	mov	r6, r1
 8001798:	1b73      	subs	r3, r6, r5
 800179a:	429c      	cmp	r4, r3
 800179c:	dc01      	bgt.n	80017a2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800179e:	4620      	mov	r0, r4
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80017a2:	f3af 8000 	nop.w
 80017a6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	e7f5      	b.n	8001798 <_read+0x8>

080017ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	460d      	mov	r5, r1
 80017b0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	460e      	mov	r6, r1
 80017b4:	1b73      	subs	r3, r6, r5
 80017b6:	429c      	cmp	r4, r3
 80017b8:	dc01      	bgt.n	80017be <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80017ba:	4620      	mov	r0, r4
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80017be:	f816 0b01 	ldrb.w	r0, [r6], #1
 80017c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	e7f5      	b.n	80017b4 <_write+0x8>

080017c8 <_close>:

int _close(int file)
{
	return -1;
}
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	4770      	bx	lr

080017ce <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80017ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80017d2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80017d4:	604b      	str	r3, [r1, #4]
}
 80017d6:	4770      	bx	lr

080017d8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80017d8:	2001      	movs	r0, #1
 80017da:	4770      	bx	lr

080017dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80017dc:	2000      	movs	r0, #0
 80017de:	4770      	bx	lr

080017e0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001810 <_sbrk+0x30>)
{
 80017e2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80017e4:	6811      	ldr	r1, [r2, #0]
{
 80017e6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80017e8:	b909      	cbnz	r1, 80017ee <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80017ea:	490a      	ldr	r1, [pc, #40]	@ (8001814 <_sbrk+0x34>)
 80017ec:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	6810      	ldr	r0, [r2, #0]
 80017f0:	4909      	ldr	r1, [pc, #36]	@ (8001818 <_sbrk+0x38>)
 80017f2:	4c0a      	ldr	r4, [pc, #40]	@ (800181c <_sbrk+0x3c>)
 80017f4:	4403      	add	r3, r0
 80017f6:	1b09      	subs	r1, r1, r4
 80017f8:	428b      	cmp	r3, r1
 80017fa:	d906      	bls.n	800180a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80017fc:	f021 fed8 	bl	80235b0 <__errno>
 8001800:	230c      	movs	r3, #12
 8001802:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001804:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001808:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800180a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800180c:	e7fc      	b.n	8001808 <_sbrk+0x28>
 800180e:	bf00      	nop
 8001810:	24009d4c 	.word	0x24009d4c
 8001814:	24025f10 	.word	0x24025f10
 8001818:	24080000 	.word	0x24080000
 800181c:	00001000 	.word	0x00001000

08001820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001858 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001824:	f004 fd2c 	bl	8006280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182a:	490d      	ldr	r1, [pc, #52]	@ (8001860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001840:	4c0a      	ldr	r4, [pc, #40]	@ (800186c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184e:	f021 feb5 	bl	80235bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001852:	f7fe ffb9 	bl	80007c8 <main>
  bx  lr
 8001856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001858:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800185c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001860:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001864:	080294e4 	.word	0x080294e4
  ldr r2, =_sbss
 8001868:	24009940 	.word	0x24009940
  ldr r4, =_ebss
 800186c:	24025f10 	.word	0x24025f10

08001870 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC3_IRQHandler>

08001872 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001872:	4770      	bx	lr

08001874 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001874:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001876:	f001 fd25 	bl	80032c4 <touchgfx_components_init>
    touchgfx_init();
}
 800187a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 800187e:	f001 bca9 	b.w	80031d4 <touchgfx_init>

08001882 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001882:	f001 bd21 	b.w	80032c8 <touchgfx_taskEntry>

08001886 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001886:	6840      	ldr	r0, [r0, #4]
    }
 8001888:	4770      	bx	lr

0800188a <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800188a:	6041      	str	r1, [r0, #4]
    }
 800188c:	4770      	bx	lr

0800188e <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800188e:	1a52      	subs	r2, r2, r1
 8001890:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001894:	fbb2 f0f3 	udiv	r0, r2, r3
 8001898:	4770      	bx	lr
	...

0800189c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 800189c:	4b02      	ldr	r3, [pc, #8]	@ (80018a8 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 800189e:	68c0      	ldr	r0, [r0, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80018a4:	4358      	muls	r0, r3
 80018a6:	4770      	bx	lr
 80018a8:	24009d50 	.word	0x24009d50

080018ac <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80018ac:	4770      	bx	lr
	...

080018b0 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80018b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b2:	4a1e      	ldr	r2, [pc, #120]	@ (800192c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80018b4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80018b8:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80018ba:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018ca:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80018d8:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80018dc:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018de:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80018e2:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80018e4:	2101      	movs	r1, #1
 80018e6:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80018e8:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	2210      	movs	r2, #16
 80018ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018f0:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80018f4:	fab2 f282 	clz	r2, r2
 80018f8:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80018fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001934 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	b983      	cbnz	r3, 8001922 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001900:	f009 f966 	bl	800abd0 <HAL_RCC_GetHCLKFreq>
 8001904:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001906:	f008 ff9b 	bl	800a840 <HAL_RCC_GetSysClockFreq>
 800190a:	fbb0 f0f4 	udiv	r0, r0, r4
 800190e:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001910:	4807      	ldr	r0, [pc, #28]	@ (8001930 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001912:	f00a fd19 	bl	800c348 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001916:	4806      	ldr	r0, [pc, #24]	@ (8001930 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001918:	b003      	add	sp, #12
 800191a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 800191e:	f00a bba3 	b.w	800c068 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001922:	f009 f977 	bl	800ac14 <HAL_RCC_GetPCLK1Freq>
 8001926:	0044      	lsls	r4, r0, #1
 8001928:	e7ed      	b.n	8001906 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800192a:	bf00      	nop
 800192c:	58024400 	.word	0x58024400
 8001930:	24009d50 	.word	0x24009d50
 8001934:	08026708 	.word	0x08026708

08001938 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001938:	b510      	push	{r4, lr}
 800193a:	4604      	mov	r4, r0
 800193c:	2110      	movs	r1, #16
 800193e:	f020 ff70 	bl	8022822 <_ZdlPvj>
 8001942:	4620      	mov	r0, r4
 8001944:	bd10      	pop	{r4, pc}

08001946 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001946:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001948:	6803      	ldr	r3, [r0, #0]
{
 800194a:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 800194c:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 800194e:	b131      	cbz	r1, 800195e <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001950:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001952:	4798      	blx	r3
 8001954:	6863      	ldr	r3, [r4, #4]
 8001956:	1b5b      	subs	r3, r3, r5
 8001958:	4403      	add	r3, r0
 800195a:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 800195c:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 800195e:	4798      	blx	r3
 8001960:	60a0      	str	r0, [r4, #8]
}
 8001962:	e7fb      	b.n	800195c <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001964 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001964:	4770      	bx	lr
	...

08001968 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 800196c:	460f      	mov	r7, r1
 800196e:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001970:	781d      	ldrb	r5, [r3, #0]
 8001972:	b915      	cbnz	r5, 800197a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001974:	2500      	movs	r5, #0
}
 8001976:	4628      	mov	r0, r5
 8001978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800197a:	4c07      	ldr	r4, [pc, #28]	@ (8001998 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 800197c:	2000      	movs	r0, #0
 800197e:	4621      	mov	r1, r4
 8001980:	f004 fc22 	bl	80061c8 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f4      	beq.n	8001974 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800198a:	6863      	ldr	r3, [r4, #4]
 800198c:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 800198e:	68a3      	ldr	r3, [r4, #8]
 8001990:	6033      	str	r3, [r6, #0]
            return true;
 8001992:	e7f0      	b.n	8001976 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001994:	24009dac 	.word	0x24009dac
 8001998:	24009d9c 	.word	0x24009d9c

0800199c <_ZN20STM32TouchControllerD0Ev>:
 800199c:	b510      	push	{r4, lr}
 800199e:	4604      	mov	r4, r0
 80019a0:	2104      	movs	r1, #4
 80019a2:	f020 ff3e 	bl	8022822 <_ZdlPvj>
 80019a6:	4620      	mov	r0, r4
 80019a8:	bd10      	pop	{r4, pc}
	...

080019ac <_ZN20STM32TouchController4initEv>:
{
 80019ac:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80019b0:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80019b4:	2000      	movs	r0, #0
    hTS->Width = 800;
 80019b6:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80019b8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80019bc:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80019c0:	230c      	movs	r3, #12
 80019c2:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80019c6:	f004 fb6f 	bl	80060a8 <BSP_TS_Init>
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <_ZN20STM32TouchController4initEv+0x40>)
 80019cc:	b910      	cbnz	r0, 80019d4 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
}
 80019d2:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1fb      	bne.n	80019d2 <_ZN20STM32TouchController4initEv+0x26>
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <_ZN20STM32TouchController4initEv+0x44>)
 80019dc:	212e      	movs	r1, #46	@ 0x2e
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <_ZN20STM32TouchController4initEv+0x48>)
 80019e0:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <_ZN20STM32TouchController4initEv+0x4c>)
 80019e2:	f021 fa95 	bl	8022f10 <__assert_func>
 80019e6:	bf00      	nop
 80019e8:	24009da8 	.word	0x24009da8
 80019ec:	24009dac 	.word	0x24009dac
 80019f0:	08023fdf 	.word	0x08023fdf
 80019f4:	08023ff2 	.word	0x08023ff2
 80019f8:	0802401c 	.word	0x0802401c

080019fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80019fc:	2803      	cmp	r0, #3
 80019fe:	d825      	bhi.n	8001a4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001a00:	e8df f000 	tbb	[pc, r0]
 8001a04:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	fab2 f282 	clz	r2, r2
 8001a12:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001a14:	480f      	ldr	r0, [pc, #60]	@ (8001a54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001a16:	f006 bab9 	b.w	8007f8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001a1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	fab2 f282 	clz	r2, r2
 8001a26:	0952      	lsrs	r2, r2, #5
 8001a28:	e7f4      	b.n	8001a14 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001a2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	0952      	lsrs	r2, r2, #5
 8001a38:	e7ec      	b.n	8001a14 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001a3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	fab2 f282 	clz	r2, r2
 8001a48:	0952      	lsrs	r2, r2, #5
 8001a4a:	e7e4      	b.n	8001a16 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	24009db0 	.word	0x24009db0
 8001a54:	58022400 	.word	0x58022400
 8001a58:	58021400 	.word	0x58021400

08001a5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001a5c:	2803      	cmp	r0, #3
 8001a5e:	d825      	bhi.n	8001aac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001a60:	e8df f000 	tbb	[pc, r0]
 8001a64:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	3a00      	subs	r2, #0
 8001a70:	bf18      	it	ne
 8001a72:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001a74:	480f      	ldr	r0, [pc, #60]	@ (8001ab4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001a76:	f006 ba89 	b.w	8007f8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001a7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	3a00      	subs	r2, #0
 8001a84:	bf18      	it	ne
 8001a86:	2201      	movne	r2, #1
 8001a88:	e7f4      	b.n	8001a74 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001a8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	3a00      	subs	r2, #0
 8001a94:	bf18      	it	ne
 8001a96:	2201      	movne	r2, #1
 8001a98:	e7ec      	b.n	8001a74 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001a9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	3a00      	subs	r2, #0
 8001aa6:	bf18      	it	ne
 8001aa8:	2201      	movne	r2, #1
 8001aaa:	e7e4      	b.n	8001a76 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	24009db0 	.word	0x24009db0
 8001ab4:	58022400 	.word	0x58022400
 8001ab8:	58021400 	.word	0x58021400

08001abc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001abc:	2803      	cmp	r0, #3
 8001abe:	d811      	bhi.n	8001ae4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001ac0:	e8df f000 	tbb	[pc, r0]
 8001ac4:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ac8:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001aca:	4807      	ldr	r0, [pc, #28]	@ (8001ae8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001acc:	f006 ba63 	b.w	8007f96 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad4:	e7f9      	b.n	8001aca <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001ad6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ada:	e7f6      	b.n	8001aca <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001adc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001ae2:	e7f3      	b.n	8001acc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	58022400 	.word	0x58022400
 8001aec:	58021400 	.word	0x58021400

08001af0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001af0:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001af2:	2803      	cmp	r0, #3
 8001af4:	d815      	bhi.n	8001b22 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001af6:	e8df f000 	tbb	[pc, r0]
 8001afa:	0a02      	.short	0x0a02
 8001afc:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001afe:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001b00:	4809      	ldr	r0, [pc, #36]	@ (8001b28 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001b02:	f006 fa3d 	bl	8007f80 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001b06:	1e43      	subs	r3, r0, #1
 8001b08:	4258      	negs	r0, r3
 8001b0a:	4158      	adcs	r0, r3
 8001b0c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b12:	e7f5      	b.n	8001b00 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001b14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b18:	e7f2      	b.n	8001b00 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001b1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b1e:	4803      	ldr	r0, [pc, #12]	@ (8001b2c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001b20:	e7ef      	b.n	8001b02 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001b22:	2000      	movs	r0, #0
 8001b24:	e7ef      	b.n	8001b06 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001b26:	bf00      	nop
 8001b28:	58022400 	.word	0x58022400
 8001b2c:	58021400 	.word	0x58021400

08001b30 <_ZN8touchgfx4GPIO4initEv>:
{
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	4d08      	ldr	r5, [pc, #32]	@ (8001b54 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001b34:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001b36:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001b38:	b2e0      	uxtb	r0, r4
 8001b3a:	f7ff ffd9 	bl	8001af0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001b3e:	b118      	cbz	r0, 8001b48 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001b44:	bf18      	it	ne
 8001b46:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001b48:	3401      	adds	r4, #1
 8001b4a:	3504      	adds	r5, #4
 8001b4c:	2c05      	cmp	r4, #5
 8001b4e:	d1f3      	bne.n	8001b38 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
 8001b52:	bf00      	nop
 8001b54:	24009db0 	.word	0x24009db0

08001b58 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001b58:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001b5a:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001b5e:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001b62:	4770      	bx	lr

08001b64 <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 8001b64:	4770      	bx	lr

08001b66 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001b66:	2000      	movs	r0, #0
 8001b68:	4770      	bx	lr
	...

08001b6c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001b6c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b6e:	3900      	subs	r1, #0
 8001b70:	4b02      	ldr	r3, [pc, #8]	@ (8001b7c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001b72:	bf18      	it	ne
 8001b74:	2101      	movne	r1, #1
 8001b76:	7019      	strb	r1, [r3, #0]
    }
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	240251ef 	.word	0x240251ef

08001b80 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 8001b80:	4770      	bx	lr

08001b82 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001b82:	2000      	movs	r0, #0
 8001b84:	4770      	bx	lr

08001b86 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001b86:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001b88:	b10b      	cbz	r3, 8001b8e <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	4718      	bx	r3
        }
    }
 8001b8e:	4770      	bx	lr

08001b90 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001b90:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b94:	4770      	bx	lr

08001b96 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001b96:	6840      	ldr	r0, [r0, #4]
 8001b98:	6803      	ldr	r3, [r0, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4718      	bx	r3

08001b9e <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 8001b9e:	4770      	bx	lr

08001ba0 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8001ba0:	4770      	bx	lr
	...

08001ba4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001ba4:	4b01      	ldr	r3, [pc, #4]	@ (8001bac <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	24009dd4 	.word	0x24009dd4

08001bb0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001bb0:	4770      	bx	lr

08001bb2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001bb2:	f001 bc86 	b.w	80034c2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001bb6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001bb6:	f001 bc17 	b.w	80033e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001bba <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001bba:	f001 bde7 	b.w	800378c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001bbe <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001bbe:	f001 bdd9 	b.w	8003774 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001bc4 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001bc4:	b510      	push	{r4, lr}
 8001bc6:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001bc8:	f001 fd9c 	bl	8003704 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001bcc:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001bd0:	b113      	cbz	r3, 8001bd8 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001bd2:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
    }
}
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	bf00      	nop
 8001bdc:	2400000c 	.word	0x2400000c

08001be0 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001be0:	f001 bc0a 	b.w	80033f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001be4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001be4:	b510      	push	{r4, lr}
 8001be6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001be8:	f00d feca 	bl	800f980 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 8001bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001bf8:	4718      	bx	r3

08001bfa <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001bfa:	b510      	push	{r4, lr}
 8001bfc:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001bfe:	f00d fa25 	bl	800f04c <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001c02:	6860      	ldr	r0, [r4, #4]
 8001c04:	6803      	ldr	r3, [r0, #0]
    }
 8001c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	4718      	bx	r3

08001c0e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001c0e:	f00d b8e5 	b.w	800eddc <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001c12 <_ZN11TouchGFXHALD0Ev>:
 8001c12:	b510      	push	{r4, lr}
 8001c14:	4604      	mov	r4, r0
 8001c16:	2184      	movs	r1, #132	@ 0x84
 8001c18:	f020 fe03 	bl	8022822 <_ZdlPvj>
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	bd10      	pop	{r4, pc}

08001c20 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001c20:	4b02      	ldr	r3, [pc, #8]	@ (8001c2c <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001c26:	f00d b915 	b.w	800ee54 <_ZN8touchgfx3HAL10beginFrameEv>
 8001c2a:	bf00      	nop
 8001c2c:	2400000c 	.word	0x2400000c

08001c30 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001c30:	b538      	push	{r3, r4, r5, lr}
 8001c32:	4604      	mov	r4, r0
    mcuInstr.init();
 8001c34:	4d06      	ldr	r5, [pc, #24]	@ (8001c50 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001c36:	f001 fc05 	bl	8003444 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001c3a:	2300      	movs	r3, #0
    mcuInstr.init();
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001c42:	f7ff fe35 	bl	80018b0 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001c46:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001c48:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001c4a:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001c4e:	bd38      	pop	{r3, r4, r5, pc}
 8001c50:	24009dc4 	.word	0x24009dc4

08001c54 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001c54:	6803      	ldr	r3, [r0, #0]
{
 8001c56:	4604      	mov	r4, r0
 8001c58:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c5e:	4798      	blx	r3
    enableInterrupts();
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	4620      	mov	r0, r4
 8001c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c66:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001c68:	f000 ff66 	bl	8002b38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	4620      	mov	r0, r4
 8001c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c72:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001c74:	2100      	movs	r1, #0
 8001c76:	2329      	movs	r3, #41	@ 0x29
 8001c78:	2215      	movs	r2, #21
 8001c7a:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001c7c:	9100      	str	r1, [sp, #0]
 8001c7e:	f005 fef4 	bl	8007a6a <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001c82:	f000 ff59 	bl	8002b38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	4620      	mov	r0, r4
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c8c:	4798      	blx	r3
    for (;;)
 8001c8e:	e7f8      	b.n	8001c82 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001c90:	24009bec 	.word	0x24009bec

08001c94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
        if (requestedOrientation != nativeDisplayOrientation)
 8001c94:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
            if (DISPLAY_ROTATION == rotate0)
 8001c98:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001c9a:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001c9c:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001ca0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001ca2:	428c      	cmp	r4, r1
 8001ca4:	d009      	beq.n	8001cba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001ca6:	b93a      	cbnz	r2, 8001cb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001ca8:	490a      	ldr	r1, [pc, #40]	@ (8001cd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001caa:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001cac:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001cae:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001cb0:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001cb2:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001cb4:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001cb6:	701a      	strb	r2, [r3, #0]
    }
 8001cb8:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d0fc      	beq.n	8001cb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001cbe:	4a06      	ldr	r2, [pc, #24]	@ (8001cd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001cc0:	4904      	ldr	r1, [pc, #16]	@ (8001cd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001cc2:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001cc4:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001cc6:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001cc8:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e7f3      	b.n	8001cb6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001cce:	bf00      	nop
 8001cd0:	240251e8 	.word	0x240251e8
 8001cd4:	240251e6 	.word	0x240251e6
 8001cd8:	240251e4 	.word	0x240251e4

08001cdc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001cdc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	428b      	cmp	r3, r1
 8001ce4:	d803      	bhi.n	8001cee <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d905      	bls.n	8001cfa <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001cf0:	21a3      	movs	r1, #163	@ 0xa3
 8001cf2:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001cf4:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001cf6:	f021 f90b 	bl	8022f10 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001cfc:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001d00:	801a      	strh	r2, [r3, #0]
    }
 8001d02:	bd08      	pop	{r3, pc}
 8001d04:	240251e4 	.word	0x240251e4
 8001d08:	240251e6 	.word	0x240251e6
 8001d0c:	0802406c 	.word	0x0802406c
 8001d10:	080240cf 	.word	0x080240cf
 8001d14:	08024112 	.word	0x08024112
 8001d18:	240251ea 	.word	0x240251ea
 8001d1c:	240251ec 	.word	0x240251ec

08001d20 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001d20:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001d22:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001d26:	b118      	cbz	r0, 8001d30 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001d28:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001d2a:	6803      	ldr	r3, [r0, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4718      	bx	r3
    }
 8001d30:	4770      	bx	lr
	...

08001d34 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001d34:	b570      	push	{r4, r5, r6, lr}
 8001d36:	460d      	mov	r5, r1
 8001d38:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001d3c:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001d3e:	b935      	cbnz	r5, 8001d4e <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001d42:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001d48:	480a      	ldr	r0, [pc, #40]	@ (8001d74 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001d4a:	f021 f8e1 	bl	8022f10 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001d4e:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001d52:	3a00      	subs	r2, #0
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001d56:	bf18      	it	ne
 8001d58:	2201      	movne	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001d5c:	6803      	ldr	r3, [r0, #0]
}
 8001d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d66:	4718      	bx	r3
 8001d68:	24009dd4 	.word	0x24009dd4
 8001d6c:	08024165 	.word	0x08024165
 8001d70:	0802419d 	.word	0x0802419d
 8001d74:	08024112 	.word	0x08024112
 8001d78:	240251ee 	.word	0x240251ee

08001d7c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001d7c:	b570      	push	{r4, r5, r6, lr}
          lcdRef(display),
 8001d7e:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001d82:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001d84:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001d8e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001d92:	2103      	movs	r1, #3
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001d94:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001d96:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8001d9a:	3520      	adds	r5, #32
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001d9c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001d9e:	8603      	strh	r3, [r0, #48]	@ 0x30
 8001da0:	b2ad      	uxth	r5, r5
          useAuxiliaryLCD(false),
 8001da2:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001da6:	6643      	str	r3, [r0, #100]	@ 0x64
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001da8:	42b5      	cmp	r5, r6
          updateMCULoad(0),
 8001daa:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          auxiliaryLCD(0),
 8001dae:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001db2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
          vSyncCompensationEnabled(false),
 8001db4:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001db8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xac>)
          buttonController(0),
 8001dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001dbe:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001dc2:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001dc6:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001dca:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001dce:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001dd2:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          cc_begin(0),
 8001dd6:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001dd8:	6782      	str	r2, [r0, #120]	@ 0x78
          isFrontPorchEntered(false),
 8001dda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dde:	f8a0 207c 	strh.w	r2, [r0, #124]	@ 0x7c
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8001de2:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8001de6:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001dea:	fbb2 f2f1 	udiv	r2, r2, r1
 8001dee:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
          maxBlockLines(20)
 8001df2:	f04f 0214 	mov.w	r2, #20
 8001df6:	f8a0 2082 	strh.w	r2, [r0, #130]	@ 0x82
        instance = this;
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb0>)
 8001dfc:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001e30 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb4>)
 8001e00:	8015      	strh	r5, [r2, #0]
 8001e02:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb8>)
 8001e04:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001e06:	bf28      	it	cs
 8001e08:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e38 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xbc>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001e0c:	bf38      	it	cc
 8001e0e:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001e10:	8016      	strh	r6, [r2, #0]
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001e14:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001e18:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001e1a:	4a09      	ldr	r2, [pc, #36]	@ (8001e40 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc4>)
 8001e1c:	7013      	strb	r3, [r2, #0]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc8>)
 8001e20:	6003      	str	r3, [r0, #0]
}
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	01000001 	.word	0x01000001
 8001e28:	01010000 	.word	0x01010000
 8001e2c:	240251f0 	.word	0x240251f0
 8001e30:	240251e4 	.word	0x240251e4
 8001e34:	240251ea 	.word	0x240251ea
 8001e38:	240251e6 	.word	0x240251e6
 8001e3c:	240251ec 	.word	0x240251ec
 8001e40:	240251e8 	.word	0x240251e8
 8001e44:	08025f1c 	.word	0x08025f1c

08001e48 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001e48:	2b01      	cmp	r3, #1
    {
 8001e4a:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001e4c:	d80e      	bhi.n	8001e6c <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	2215      	movs	r2, #21
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	4601      	mov	r1, r0
 8001e58:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <DSI_IO_Write+0x34>)
 8001e5a:	f005 fe06 	bl	8007a6a <HAL_DSI_ShortWrite>
 8001e5e:	b118      	cbz	r0, 8001e68 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001e60:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001e64:	b002      	add	sp, #8
 8001e66:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001e68:	2000      	movs	r0, #0
 8001e6a:	e7fb      	b.n	8001e64 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001e6c:	e9cd 1200 	strd	r1, r2, [sp]
 8001e70:	4601      	mov	r1, r0
 8001e72:	2239      	movs	r2, #57	@ 0x39
 8001e74:	4801      	ldr	r0, [pc, #4]	@ (8001e7c <DSI_IO_Write+0x34>)
 8001e76:	f005 fe09 	bl	8007a8c <HAL_DSI_LongWrite>
 8001e7a:	e7f0      	b.n	8001e5e <DSI_IO_Write+0x16>
 8001e7c:	24009bec 	.word	0x24009bec

08001e80 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001e82:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001e86:	2106      	movs	r1, #6
 8001e88:	9100      	str	r1, [sp, #0]
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <DSI_IO_Read+0x24>)
 8001e8e:	f005 fe5d 	bl	8007b4c <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001e92:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001e94:	bf14      	ite	ne
 8001e96:	f06f 0007 	mvnne.w	r0, #7
 8001e9a:	2000      	moveq	r0, #0
 8001e9c:	b005      	add	sp, #20
 8001e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ea2:	bf00      	nop
 8001ea4:	24009bec 	.word	0x24009bec

08001ea8 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001eaa:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001eae:	4c0b      	ldr	r4, [pc, #44]	@ (8001edc <LCD_ReqTear+0x34>)
 8001eb0:	2239      	movs	r2, #57	@ 0x39
 8001eb2:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001eb4:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001eb8:	ab03      	add	r3, sp, #12
 8001eba:	4620      	mov	r0, r4
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	2344      	movs	r3, #68	@ 0x44
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f005 fde2 	bl	8007a8c <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2335      	movs	r3, #53	@ 0x35
 8001ecc:	2215      	movs	r2, #21
 8001ece:	4620      	mov	r0, r4
 8001ed0:	9100      	str	r1, [sp, #0]
 8001ed2:	f005 fdca 	bl	8007a6a <HAL_DSI_ShortWrite>
    }
 8001ed6:	b004      	add	sp, #16
 8001ed8:	bd10      	pop	{r4, pc}
 8001eda:	bf00      	nop
 8001edc:	24009bec 	.word	0x24009bec

08001ee0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001ee0:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001ee2:	f7ff ffe1 	bl	8001ea8 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001ee8:	2202      	movs	r2, #2
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001ef6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001f02:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001f06:	f042 0202 	orr.w	r2, r2, #2
 8001f0a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001f0e:	2203      	movs	r2, #3
 8001f10:	4b02      	ldr	r3, [pc, #8]	@ (8001f1c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001f12:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f14:	bd08      	pop	{r3, pc}
 8001f16:	bf00      	nop
 8001f18:	24009bec 	.word	0x24009bec
 8001f1c:	50001000 	.word	0x50001000

08001f20 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001f20:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <LCD_ReqEnable+0x20>)
    {
 8001f22:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001f24:	7819      	ldrb	r1, [r3, #0]
 8001f26:	b939      	cbnz	r1, 8001f38 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001f28:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001f2a:	4806      	ldr	r0, [pc, #24]	@ (8001f44 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001f2c:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001f2e:	2329      	movs	r3, #41	@ 0x29
 8001f30:	2215      	movs	r2, #21
 8001f32:	9100      	str	r1, [sp, #0]
 8001f34:	f005 fd99 	bl	8007a6a <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001f38:	b003      	add	sp, #12
 8001f3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f3e:	bf00      	nop
 8001f40:	24009dc0 	.word	0x24009dc0
 8001f44:	24009bec 	.word	0x24009bec

08001f48 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001f4a:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	232a      	movs	r3, #42	@ 0x2a
 8001f50:	2239      	movs	r2, #57	@ 0x39
 8001f52:	2100      	movs	r1, #0
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2304      	movs	r3, #4
 8001f58:	4803      	ldr	r0, [pc, #12]	@ (8001f68 <LCD_SetUpdateRegionLeft+0x20>)
 8001f5a:	f005 fd97 	bl	8007a8c <HAL_DSI_LongWrite>
    }
 8001f5e:	b003      	add	sp, #12
 8001f60:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f64:	24000008 	.word	0x24000008
 8001f68:	24009bec 	.word	0x24009bec

08001f6c <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001f6e:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	232a      	movs	r3, #42	@ 0x2a
 8001f74:	2239      	movs	r2, #57	@ 0x39
 8001f76:	2100      	movs	r1, #0
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	4803      	ldr	r0, [pc, #12]	@ (8001f8c <LCD_SetUpdateRegionRight+0x20>)
 8001f7e:	f005 fd85 	bl	8007a8c <HAL_DSI_LongWrite>
    }
 8001f82:	b003      	add	sp, #12
 8001f84:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f88:	24000004 	.word	0x24000004
 8001f8c:	24009bec 	.word	0x24009bec

08001f90 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001f90:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001f92:	4d15      	ldr	r5, [pc, #84]	@ (8001fe8 <HAL_DSI_TearingEffectCallback+0x58>)
 8001f94:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff fd30 	bl	80019fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001f9c:	682b      	ldr	r3, [r5, #0]
        vSyncCnt++;
 8001f9e:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8001fa2:	3201      	adds	r2, #1
 8001fa4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001fae:	f000 fdb7 	bl	8002b20 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <HAL_DSI_TearingEffectCallback+0x5c>)
        lockDMAToPorch = enableLock;
 8001fb4:	682a      	ldr	r2, [r5, #0]
 8001fb6:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001fbe:	b173      	cbz	r3, 8001fde <HAL_DSI_TearingEffectCallback+0x4e>
 8001fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8001ff0 <HAL_DSI_TearingEffectCallback+0x60>)
 8001fc2:	782b      	ldrb	r3, [r5, #0]
 8001fc4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001fc8:	b94b      	cbnz	r3, 8001fde <HAL_DSI_TearingEffectCallback+0x4e>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_DSI_TearingEffectCallback+0x64>)
 8001fcc:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001fce:	f7ff ffbb 	bl	8001f48 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f005 fd39 	bl	8007a4a <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001fdc:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001fde:	2000      	movs	r0, #0
    }
 8001fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001fe4:	f7ff bd3a 	b.w	8001a5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001fe8:	240251f0 	.word	0x240251f0
 8001fec:	2400000c 	.word	0x2400000c
 8001ff0:	24009ddc 	.word	0x24009ddc
 8001ff4:	24009dd8 	.word	0x24009dd8

08001ff8 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ffc:	4e49      	ldr	r6, [pc, #292]	@ (8002124 <HAL_DSI_EndOfRefreshCallback+0x12c>)
    {
 8001ffe:	b085      	sub	sp, #20
 8002000:	4604      	mov	r4, r0
        if (displayRefreshing)
 8002002:	7833      	ldrb	r3, [r6, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 8089 	beq.w	800211c <HAL_DSI_EndOfRefreshCallback+0x124>
        {
            if (updateRegion == 0)
 800200a:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8002148 <HAL_DSI_EndOfRefreshCallback+0x150>
 800200e:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 800214c <HAL_DSI_EndOfRefreshCallback+0x154>
 8002012:	f8d9 5000 	ldr.w	r5, [r9]
 8002016:	4f44      	ldr	r7, [pc, #272]	@ (8002128 <HAL_DSI_EndOfRefreshCallback+0x130>)
 8002018:	2d00      	cmp	r5, #0
 800201a:	d13e      	bne.n	800209a <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 800201c:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 800201e:	4e43      	ldr	r6, [pc, #268]	@ (800212c <HAL_DSI_EndOfRefreshCallback+0x134>)
                HAL_Delay(1);
 8002020:	f004 f9de 	bl	80063e0 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	9500      	str	r5, [sp, #0]
 8002028:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800202c:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800202e:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002032:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002036:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800203a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800203e:	f002 0208 	and.w	r2, r2, #8
 8002042:	9200      	str	r2, [sp, #0]
 8002044:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002046:	f8d8 2000 	ldr.w	r2, [r8]
 800204a:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 800204e:	4838      	ldr	r0, [pc, #224]	@ (8002130 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002050:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8002052:	4e38      	ldr	r6, [pc, #224]	@ (8002134 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002054:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8002056:	4838      	ldr	r0, [pc, #224]	@ (8002138 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002058:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 800205c:	4837      	ldr	r0, [pc, #220]	@ (800213c <HAL_DSI_EndOfRefreshCallback+0x144>)
 800205e:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002062:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002064:	f041 0101 	orr.w	r1, r1, #1
 8002068:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800206a:	9501      	str	r5, [sp, #4]
 800206c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002070:	f042 0208 	orr.w	r2, r2, #8
 8002074:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8002084:	f7ff ff72 	bl	8001f6c <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8002088:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 800208a:	4620      	mov	r0, r4
                updateRegion = 1;
 800208c:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8002090:	b005      	add	sp, #20
 8002092:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8002096:	f005 bcd8 	b.w	8007a4a <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800209a:	6803      	ldr	r3, [r0, #0]
 800209c:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 800209e:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80020a0:	9502      	str	r5, [sp, #8]
 80020a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80020a6:	4c26      	ldr	r4, [pc, #152]	@ (8002140 <HAL_DSI_EndOfRefreshCallback+0x148>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80020a8:	f022 0208 	bic.w	r2, r2, #8
 80020ac:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80020b0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80020b4:	f002 0208 	and.w	r2, r2, #8
 80020b8:	9202      	str	r2, [sp, #8]
 80020ba:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80020bc:	f8d8 2000 	ldr.w	r2, [r8]
 80020c0:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80020c4:	481a      	ldr	r0, [pc, #104]	@ (8002130 <HAL_DSI_EndOfRefreshCallback+0x138>)
 80020c6:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80020c8:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80020cc:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80020ce:	481a      	ldr	r0, [pc, #104]	@ (8002138 <HAL_DSI_EndOfRefreshCallback+0x140>)
 80020d0:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80020d4:	4819      	ldr	r0, [pc, #100]	@ (800213c <HAL_DSI_EndOfRefreshCallback+0x144>)
 80020d6:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 80020da:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80020dc:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80020de:	f041 0101 	orr.w	r1, r1, #1
 80020e2:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80020e4:	9503      	str	r5, [sp, #12]
 80020e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80020ea:	f042 0208 	orr.w	r2, r2, #8
 80020ee:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80020f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 80020fe:	f7ff fcad 	bl	8001a5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8002102:	f7ff ff0d 	bl	8001f20 <LCD_ReqEnable>
        return instance;
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <HAL_DSI_EndOfRefreshCallback+0x14c>)
                displayRefreshing = false;
 8002108:	7035      	strb	r5, [r6, #0]
 800210a:	681c      	ldr	r4, [r3, #0]
                if (HAL::getInstance())
 800210c:	b134      	cbz	r4, 800211c <HAL_DSI_EndOfRefreshCallback+0x124>
        allowDMATransfers();
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	4620      	mov	r0, r4
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4798      	blx	r3
        isFrontPorchEntered = true;
 8002116:	2301      	movs	r3, #1
 8002118:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    }
 800211c:	b005      	add	sp, #20
 800211e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002122:	bf00      	nop
 8002124:	24009ddc 	.word	0x24009ddc
 8002128:	24009dd4 	.word	0x24009dd4
 800212c:	01b201e2 	.word	0x01b201e2
 8002130:	50001000 	.word	0x50001000
 8002134:	019201e3 	.word	0x019201e3
 8002138:	01920003 	.word	0x01920003
 800213c:	09c004b3 	.word	0x09c004b3
 8002140:	019201e2 	.word	0x019201e2
 8002144:	240251f0 	.word	0x240251f0
 8002148:	24009dd8 	.word	0x24009dd8
 800214c:	24009a14 	.word	0x24009a14

08002150 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002150:	4601      	mov	r1, r0
 8002152:	b508      	push	{r3, lr}
        return instance;
 8002154:	4b03      	ldr	r3, [pc, #12]	@ (8002164 <IdleTaskHook+0x14>)
 8002156:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002158:	b101      	cbz	r1, 800215c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800215a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800215c:	f00d fc2a 	bl	800f9b4 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002160:	2001      	movs	r0, #1
 8002162:	bd08      	pop	{r3, pc}
 8002164:	240251f0 	.word	0x240251f0

08002168 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800216a:	2200      	movs	r2, #0
 800216c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	4a02      	ldr	r2, [pc, #8]	@ (800217c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002172:	601a      	str	r2, [r3, #0]

}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	24009dc4 	.word	0x24009dc4
 800217c:	08025edc 	.word	0x08025edc

08002180 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002180:	6940      	ldr	r0, [r0, #20]
 8002182:	4770      	bx	lr

08002184 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002184:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002188:	4770      	bx	lr

0800218a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800218a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800218c:	b923      	cbnz	r3, 8002198 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800218e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002190:	3800      	subs	r0, #0
 8002192:	bf18      	it	ne
 8002194:	2001      	movne	r0, #1
 8002196:	4770      	bx	lr
 8002198:	2001      	movs	r0, #1
}
 800219a:	4770      	bx	lr

0800219c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800219c:	6880      	ldr	r0, [r0, #8]
 800219e:	4770      	bx	lr

080021a0 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80021a0:	4770      	bx	lr

080021a2 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80021a2:	3004      	adds	r0, #4
{
 80021a4:	b510      	push	{r4, lr}
 80021a6:	460c      	mov	r4, r1
    *data = videoInfo;
 80021a8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80021aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021ae:	bd10      	pop	{r4, pc}

080021b0 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80021b0:	4770      	bx	lr
	...

080021b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80021b4:	b508      	push	{r3, lr}
    assert(0);
 80021b6:	4a03      	ldr	r2, [pc, #12]	@ (80021c4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80021b8:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 80021bc:	4b02      	ldr	r3, [pc, #8]	@ (80021c8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80021be:	4803      	ldr	r0, [pc, #12]	@ (80021cc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80021c0:	f020 fea6 	bl	8022f10 <__assert_func>
 80021c4:	080241eb 	.word	0x080241eb
 80021c8:	08025c22 	.word	0x08025c22
 80021cc:	08024246 	.word	0x08024246

080021d0 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	4604      	mov	r4, r0
 80021d4:	2148      	movs	r1, #72	@ 0x48
 80021d6:	f020 fb24 	bl	8022822 <_ZdlPvj>
 80021da:	4620      	mov	r0, r4
 80021dc:	bd10      	pop	{r4, pc}
	...

080021e0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80021e0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80021e4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80021e6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80021e8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80021ea:	6003      	str	r3, [r0, #0]
 80021ec:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80021ee:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80021f2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80021f6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80021fa:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80021fe:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8002202:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 8002206:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800220a:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 800220e:	2001      	movs	r0, #1
 8002210:	f00a fa5a 	bl	800c6c8 <osSemaphoreNew>
 8002214:	4b02      	ldr	r3, [pc, #8]	@ (8002220 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 8002216:	6018      	str	r0, [r3, #0]
}
 8002218:	4620      	mov	r0, r4
 800221a:	bd10      	pop	{r4, pc}
 800221c:	08026008 	.word	0x08026008
 8002220:	24009dfc 	.word	0x24009dfc

08002224 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002224:	b410      	push	{r4}
 8002226:	460c      	mov	r4, r1
 8002228:	4611      	mov	r1, r2
 800222a:	461a      	mov	r2, r3
    if (reader != 0)
 800222c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800222e:	b13b      	cbz	r3, 8002240 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002230:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002232:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002234:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8002236:	4420      	add	r0, r4
}
 8002238:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 800223c:	f021 b90c 	b.w	8023458 <strncmp>
        src = (const char*)movieData + offset;
 8002240:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002242:	e7f8      	b.n	8002236 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002244 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002244:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002246:	b510      	push	{r4, lr}
    if (reader != 0)
 8002248:	b173      	cbz	r3, 8002268 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800224a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800224c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800224e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002250:	1853      	adds	r3, r2, r1
 8002252:	5c52      	ldrb	r2, [r2, r1]
 8002254:	7898      	ldrb	r0, [r3, #2]
 8002256:	785c      	ldrb	r4, [r3, #1]
 8002258:	0400      	lsls	r0, r0, #16
 800225a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800225e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002260:	78db      	ldrb	r3, [r3, #3]
 8002262:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002266:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002268:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800226a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800226c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800226e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002270:	7898      	ldrb	r0, [r3, #2]
 8002272:	0400      	lsls	r0, r0, #16
 8002274:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002278:	e7f1      	b.n	800225e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800227a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800227a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800227c:	b143      	cbz	r3, 8002290 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800227e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002280:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002282:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002284:	185a      	adds	r2, r3, r1
 8002286:	5c58      	ldrb	r0, [r3, r1]
 8002288:	7852      	ldrb	r2, [r2, #1]
 800228a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800228e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002290:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002292:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002294:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002296:	7853      	ldrb	r3, [r2, #1]
 8002298:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800229c:	4770      	bx	lr
	...

080022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	4604      	mov	r4, r0
    if (reader != 0)
 80022a4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 80022a6:	460d      	mov	r5, r1
 80022a8:	4616      	mov	r6, r2
    if (reader != 0)
 80022aa:	b1d8      	cbz	r0, 80022e4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80022ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d208      	bcs.n	80022c4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80022b2:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80022b4:	4a0d      	ldr	r2, [pc, #52]	@ (80022ec <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80022b6:	21a0      	movs	r1, #160	@ 0xa0
 80022b8:	480d      	ldr	r0, [pc, #52]	@ (80022f0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80022ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80022c0:	f020 fe26 	bl	8022f10 <__assert_func>
        reader->seek(offset);
 80022c4:	6803      	ldr	r3, [r0, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80022ca:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80022cc:	4632      	mov	r2, r6
 80022ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022d0:	6803      	ldr	r3, [r0, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	4798      	blx	r3
 80022d6:	b910      	cbnz	r0, 80022de <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80022d8:	230d      	movs	r3, #13
 80022da:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80022de:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80022e0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80022e2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80022e4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80022e6:	4408      	add	r0, r1
 80022e8:	e7fb      	b.n	80022e2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80022ea:	bf00      	nop
 80022ec:	080242b3 	.word	0x080242b3
 80022f0:	08024246 	.word	0x08024246
 80022f4:	080242a0 	.word	0x080242a0

080022f8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80022f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80022fc:	6943      	ldr	r3, [r0, #20]
{
 80022fe:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002300:	b92b      	cbnz	r3, 800230e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002304:	21e6      	movs	r1, #230	@ 0xe6
 8002306:	4a22      	ldr	r2, [pc, #136]	@ (8002390 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002308:	4822      	ldr	r0, [pc, #136]	@ (8002394 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800230a:	f020 fe01 	bl	8022f10 <__assert_func>
    readData(currentMovieOffset, 8);
 800230e:	2208      	movs	r2, #8
 8002310:	6981      	ldr	r1, [r0, #24]
 8002312:	f7ff ffc5 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002316:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002318:	f243 0630 	movw	r6, #12336	@ 0x3030
 800231c:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002320:	3104      	adds	r1, #4
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff ff8e 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002328:	69a3      	ldr	r3, [r4, #24]
 800232a:	4418      	add	r0, r3
 800232c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800232e:	f100 0208 	add.w	r2, r0, #8
 8002332:	429a      	cmp	r2, r3
 8002334:	d306      	bcc.n	8002344 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8002336:	2301      	movs	r3, #1
    return false;
 8002338:	2000      	movs	r0, #0
    frameNumber = 1;
 800233a:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 800233c:	6a23      	ldr	r3, [r4, #32]
 800233e:	61a3      	str	r3, [r4, #24]
}
 8002340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002344:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002346:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800234a:	2208      	movs	r2, #8
 800234c:	4620      	mov	r0, r4
        frameNumber++;
 800234e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002350:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002354:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002356:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002358:	f7ff ffa2 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800235c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002360:	4620      	mov	r0, r4
 8002362:	4649      	mov	r1, r9
 8002364:	f7ff ff89 	bl	800227a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002368:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800236c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff ff83 	bl	800227a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002374:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002378:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff ff62 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002380:	45b0      	cmp	r8, r6
 8002382:	d1d1      	bne.n	8002328 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002384:	42bd      	cmp	r5, r7
 8002386:	d1cf      	bne.n	8002328 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002388:	2001      	movs	r0, #1
 800238a:	e7d9      	b.n	8002340 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800238c:	080242f5 	.word	0x080242f5
 8002390:	0802433e 	.word	0x0802433e
 8002394:	08024246 	.word	0x08024246

08002398 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002398:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800239a:	6803      	ldr	r3, [r0, #0]
 800239c:	bf38      	it	cc
 800239e:	2101      	movcc	r1, #1
 80023a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80023a2:	b570      	push	{r4, r5, r6, lr}
 80023a4:	460d      	mov	r5, r1
 80023a6:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80023a8:	4798      	blx	r3
 80023aa:	42a8      	cmp	r0, r5
 80023ac:	d204      	bcs.n	80023b8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	4620      	mov	r0, r4
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	4798      	blx	r3
 80023b6:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80023b8:	1e6b      	subs	r3, r5, #1
 80023ba:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80023bc:	2210      	movs	r2, #16
 80023be:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80023c0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80023c4:	f106 0108 	add.w	r1, r6, #8
 80023c8:	f7ff ff6a 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80023cc:	f106 0110 	add.w	r1, r6, #16
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7ff ff37 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023d6:	6a23      	ldr	r3, [r4, #32]
 80023d8:	3b04      	subs	r3, #4
 80023da:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80023dc:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80023e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080023e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80023e4:	2100      	movs	r1, #0
    readData(0, 72);
 80023e6:	2248      	movs	r2, #72	@ 0x48
{
 80023e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ec:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80023ee:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80023f0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80023f4:	f7ff ff54 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80023f8:	69a6      	ldr	r6, [r4, #24]
 80023fa:	2304      	movs	r3, #4
 80023fc:	4a63      	ldr	r2, [pc, #396]	@ (800258c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80023fe:	4631      	mov	r1, r6
 8002400:	4620      	mov	r0, r4
 8002402:	f7ff ff0f 	bl	8002224 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002406:	b148      	cbz	r0, 800241c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8002408:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800240a:	4a61      	ldr	r2, [pc, #388]	@ (8002590 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800240c:	f44f 7197 	mov.w	r1, #302	@ 0x12e
        lastError = AVI_ERROR_NOT_RIFF;
 8002410:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002414:	4b5f      	ldr	r3, [pc, #380]	@ (8002594 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002416:	4860      	ldr	r0, [pc, #384]	@ (8002598 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002418:	f020 fd7a 	bl	8022f10 <__assert_func>
    currentMovieOffset += 8;
 800241c:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002420:	2304      	movs	r3, #4
 8002422:	4a5e      	ldr	r2, [pc, #376]	@ (800259c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002424:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002426:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002428:	f7ff fefc 	bl	8002224 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800242c:	b138      	cbz	r0, 800243e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800242e:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002430:	4a57      	ldr	r2, [pc, #348]	@ (8002590 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002432:	f44f 719b 	mov.w	r1, #310	@ 0x136
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002436:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800243a:	4b59      	ldr	r3, [pc, #356]	@ (80025a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800243c:	e7eb      	b.n	8002416 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800243e:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002442:	2304      	movs	r3, #4
 8002444:	4a57      	ldr	r2, [pc, #348]	@ (80025a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002446:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002448:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800244a:	f7ff feeb 	bl	8002224 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800244e:	4607      	mov	r7, r0
 8002450:	b138      	cbz	r0, 8002462 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002452:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002454:	4a4e      	ldr	r2, [pc, #312]	@ (8002590 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002456:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800245a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800245e:	4b52      	ldr	r3, [pc, #328]	@ (80025a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002460:	e7d9      	b.n	8002416 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002462:	f106 0110 	add.w	r1, r6, #16
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff feec 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800246c:	4605      	mov	r5, r0
 800246e:	b920      	cbnz	r0, 800247a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002470:	4b4e      	ldr	r3, [pc, #312]	@ (80025ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002472:	f240 1143 	movw	r1, #323	@ 0x143
 8002476:	4a46      	ldr	r2, [pc, #280]	@ (8002590 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002478:	e7cd      	b.n	8002416 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800247a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800247e:	2304      	movs	r3, #4
 8002480:	4a4b      	ldr	r2, [pc, #300]	@ (80025b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002482:	4620      	mov	r0, r4
 8002484:	4641      	mov	r1, r8
 8002486:	f7ff fecd 	bl	8002224 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800248a:	2800      	cmp	r0, #0
 800248c:	d049      	beq.n	8002522 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800248e:	2306      	movs	r3, #6
 8002490:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002494:	2304      	movs	r3, #4
 8002496:	4a47      	ldr	r2, [pc, #284]	@ (80025b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002498:	f106 0118 	add.w	r1, r6, #24
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff fec1 	bl	8002224 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d03f      	beq.n	8002526 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80024a6:	2307      	movs	r3, #7
 80024a8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80024ac:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80024ae:	4f42      	ldr	r7, [pc, #264]	@ (80025b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80024b0:	220c      	movs	r2, #12
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f7ff fef3 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80024ba:	f105 0608 	add.w	r6, r5, #8
 80024be:	2304      	movs	r3, #4
 80024c0:	463a      	mov	r2, r7
 80024c2:	4620      	mov	r0, r4
 80024c4:	4631      	mov	r1, r6
 80024c6:	f7ff fead 	bl	8002224 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80024ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d048      	beq.n	8002564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d148      	bne.n	8002568 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80024d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80024d8:	42ab      	cmp	r3, r5
 80024da:	d849      	bhi.n	8002570 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80024dc:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80024e0:	3504      	adds	r5, #4
 80024e2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80024e4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80024e6:	4629      	mov	r1, r5
 80024e8:	f7ff feac 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80024ec:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80024ee:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80024f0:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80024f2:	4620      	mov	r0, r4
 80024f4:	f7ff fea6 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80024f8:	4406      	add	r6, r0
    readData(listOffset, 4);
 80024fa:	2204      	movs	r2, #4
 80024fc:	4620      	mov	r0, r4
 80024fe:	4631      	mov	r1, r6
 8002500:	f7ff fece 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002504:	2304      	movs	r3, #4
 8002506:	4a2d      	ldr	r2, [pc, #180]	@ (80025bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002508:	4631      	mov	r1, r6
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff fe8a 	bl	8002224 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002510:	2800      	cmp	r0, #0
 8002512:	d138      	bne.n	8002586 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002514:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002516:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002518:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800251a:	69a3      	ldr	r3, [r4, #24]
 800251c:	6223      	str	r3, [r4, #32]
}
 800251e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002522:	2701      	movs	r7, #1
 8002524:	e7b6      	b.n	8002494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8002526:	2f00      	cmp	r7, #0
 8002528:	d0c0      	beq.n	80024ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800252a:	f106 0120 	add.w	r1, r6, #32
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff fe88 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002534:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002538:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800253c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002540:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002542:	4620      	mov	r0, r4
 8002544:	f7ff fe7e 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002548:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800254c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800254e:	4620      	mov	r0, r4
 8002550:	f7ff fe78 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002554:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002558:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800255a:	4620      	mov	r0, r4
 800255c:	f7ff fe72 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002560:	6120      	str	r0, [r4, #16]
 8002562:	e7a3      	b.n	80024ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0b9      	beq.n	80024dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002568:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800256a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800256e:	e7d6      	b.n	800251e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002570:	1d29      	adds	r1, r5, #4
 8002572:	4620      	mov	r0, r4
 8002574:	f7ff fe66 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002578:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800257a:	220c      	movs	r2, #12
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7ff fe8e 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002584:	e799      	b.n	80024ba <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002586:	230b      	movs	r3, #11
 8002588:	e7ef      	b.n	800256a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800258a:	bf00      	nop
 800258c:	08024371 	.word	0x08024371
 8002590:	0802438f 	.word	0x0802438f
 8002594:	08024376 	.word	0x08024376
 8002598:	08024246 	.word	0x08024246
 800259c:	080243bc 	.word	0x080243bc
 80025a0:	080243c1 	.word	0x080243c1
 80025a4:	080243d9 	.word	0x080243d9
 80025a8:	080243de 	.word	0x080243de
 80025ac:	080243f4 	.word	0x080243f4
 80025b0:	08024400 	.word	0x08024400
 80025b4:	08024405 	.word	0x08024405
 80025b8:	0802440a 	.word	0x0802440a
 80025bc:	0802440f 	.word	0x0802440f

080025c0 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80025c0:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80025c4:	2200      	movs	r2, #0
 80025c6:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80025c8:	f7ff bf0c 	b.w	80023e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080025cc <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80025cc:	b510      	push	{r4, lr}
    movieData = 0;
 80025ce:	2300      	movs	r3, #0
{
 80025d0:	4604      	mov	r4, r0
 80025d2:	4608      	mov	r0, r1
    movieData = 0;
 80025d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80025d6:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80025d8:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4798      	blx	r3
 80025de:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80025e0:	4620      	mov	r0, r4
}
 80025e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80025e6:	f7ff befd 	b.w	80023e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080025ec <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80025ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JPEG_output_is_paused = 0;
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <JPEG_Decode_DMA+0x50>)
 80025f0:	2400      	movs	r4, #0
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80025f2:	4d13      	ldr	r5, [pc, #76]	@ (8002640 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
 80025f4:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80025f6:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <JPEG_Decode_DMA+0x58>)
 80025f8:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80025fa:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <JPEG_Decode_DMA+0x5c>)
        JPEG_OUT_Write_BufferIndex = 0;
 80025fc:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80025fe:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <JPEG_Decode_DMA+0x60>)
 8002602:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <JPEG_Decode_DMA+0x64>)
 8002606:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <JPEG_Decode_DMA+0x68>)
 800260a:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <JPEG_Decode_DMA+0x6c>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800260e:	682a      	ldr	r2, [r5, #0]
 8002610:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002614:	701c      	strb	r4, [r3, #0]
 8002616:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002618:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800261c:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002620:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002624:	4a0d      	ldr	r2, [pc, #52]	@ (800265c <JPEG_Decode_DMA+0x70>)
 8002626:	68d2      	ldr	r2, [r2, #12]
 8002628:	436a      	muls	r2, r5
 800262a:	9200      	str	r2, [sp, #0]
 800262c:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f006 fbb3 	bl	8008d9c <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002636:	4620      	mov	r0, r4
 8002638:	b003      	add	sp, #12
 800263a:	bd30      	pop	{r4, r5, pc}
 800263c:	24009e14 	.word	0x24009e14
 8002640:	24009e04 	.word	0x24009e04
 8002644:	24009df8 	.word	0x24009df8
 8002648:	24009e24 	.word	0x24009e24
 800264c:	24009e1c 	.word	0x24009e1c
 8002650:	24009e20 	.word	0x24009e20
 8002654:	24009e00 	.word	0x24009e00
 8002658:	24000010 	.word	0x24000010
 800265c:	24009de0 	.word	0x24009de0

08002660 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002660:	684b      	ldr	r3, [r1, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d115      	bne.n	8002692 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8002666:	68cb      	ldr	r3, [r1, #12]
 8002668:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800266a:	bf1e      	ittt	ne
 800266c:	f023 030f 	bicne.w	r3, r3, #15
 8002670:	3310      	addne	r3, #16
 8002672:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002674:	688b      	ldr	r3, [r1, #8]
 8002676:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002678:	bf1e      	ittt	ne
 800267a:	f023 030f 	bicne.w	r3, r3, #15
 800267e:	3310      	addne	r3, #16
 8002680:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002682:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002684:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002686:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002688:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 800268a:	4353      	muls	r3, r2
 800268c:	4a0e      	ldr	r2, [pc, #56]	@ (80026c8 <HAL_JPEG_InfoReadyCallback+0x68>)
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002692:	2b02      	cmp	r3, #2
 8002694:	d10e      	bne.n	80026b4 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8002696:	68cb      	ldr	r3, [r1, #12]
 8002698:	071a      	lsls	r2, r3, #28
 800269a:	d003      	beq.n	80026a4 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800269c:	f023 030f 	bic.w	r3, r3, #15
 80026a0:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80026a2:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 80026a4:	688b      	ldr	r3, [r1, #8]
 80026a6:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80026a8:	bf1e      	ittt	ne
 80026aa:	f023 0307 	bicne.w	r3, r3, #7
 80026ae:	3308      	addne	r3, #8
 80026b0:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80026b2:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1fc      	bne.n	80026b2 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80026b8:	68cb      	ldr	r3, [r1, #12]
 80026ba:	0758      	lsls	r0, r3, #29
 80026bc:	d0f2      	beq.n	80026a4 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80026be:	f023 0307 	bic.w	r3, r3, #7
 80026c2:	3308      	adds	r3, #8
 80026c4:	e7ed      	b.n	80026a2 <HAL_JPEG_InfoReadyCallback+0x42>
 80026c6:	bf00      	nop
 80026c8:	24009e0c 	.word	0x24009e0c

080026cc <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80026cc:	4a0b      	ldr	r2, [pc, #44]	@ (80026fc <HAL_JPEG_GetDataCallback+0x30>)
 80026ce:	6813      	ldr	r3, [r2, #0]
 80026d0:	440b      	add	r3, r1
    {
 80026d2:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80026d4:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80026d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002700 <HAL_JPEG_GetDataCallback+0x34>)
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	4293      	cmp	r3, r2
 80026dc:	d20c      	bcs.n	80026f8 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80026de:	4c09      	ldr	r4, [pc, #36]	@ (8002704 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80026e0:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80026e2:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80026e4:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80026e8:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80026ea:	bf28      	it	cs
 80026ec:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80026f0:	6021      	str	r1, [r4, #0]
        }
    }
 80026f2:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80026f4:	f006 bbb4 	b.w	8008e60 <HAL_JPEG_ConfigInputBuffer>
    }
 80026f8:	bc30      	pop	{r4, r5}
 80026fa:	4770      	bx	lr
 80026fc:	24009e24 	.word	0x24009e24
 8002700:	24009e20 	.word	0x24009e20
 8002704:	24009e1c 	.word	0x24009e1c

08002708 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800270a:	4c20      	ldr	r4, [pc, #128]	@ (800278c <HAL_JPEG_DataReadyCallback+0x84>)
 800270c:	2101      	movs	r1, #1
 800270e:	4d20      	ldr	r5, [pc, #128]	@ (8002790 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002710:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002712:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002714:	4f1f      	ldr	r7, [pc, #124]	@ (8002794 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002720:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002722:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <HAL_JPEG_DataReadyCallback+0x90>)
 8002724:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002726:	6822      	ldr	r2, [r4, #0]
 8002728:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 800272c:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68f9      	ldr	r1, [r7, #12]
 8002732:	440a      	add	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d901      	bls.n	8002746 <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	5ceb      	ldrb	r3, [r5, r3]
 800274c:	b133      	cbz	r3, 800275c <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800274e:	2102      	movs	r1, #2
 8002750:	4630      	mov	r0, r6
 8002752:	f006 fb57 	bl	8008e04 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_JPEG_DataReadyCallback+0x94>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	4630      	mov	r0, r6
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002766:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800276a:	6869      	ldr	r1, [r5, #4]
 800276c:	435a      	muls	r2, r3
 800276e:	f006 fb7a 	bl	8008e66 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002772:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <HAL_JPEG_DataReadyCallback+0x98>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	7a1a      	ldrb	r2, [r3, #8]
 8002778:	b93a      	cbnz	r2, 800278a <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 800277a:	7a9b      	ldrb	r3, [r3, #10]
 800277c:	b92b      	cbnz	r3, 800278a <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002780:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002782:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002786:	f00a b815 	b.w	800c7b4 <osSemaphoreRelease>
    }
 800278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800278c:	24009e04 	.word	0x24009e04
 8002790:	24000010 	.word	0x24000010
 8002794:	24009de0 	.word	0x24009de0
 8002798:	24009e00 	.word	0x24009e00
 800279c:	24009e14 	.word	0x24009e14
 80027a0:	24009e08 	.word	0x24009e08
 80027a4:	24009dfc 	.word	0x24009dfc

080027a8 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 80027aa:	e7fe      	b.n	80027aa <HAL_JPEG_ErrorCallback+0x2>

080027ac <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 80027ac:	4b01      	ldr	r3, [pc, #4]	@ (80027b4 <HAL_JPEG_DecodeCpltCallback+0x8>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
    }
 80027b2:	4770      	bx	lr
 80027b4:	24009e18 	.word	0x24009e18

080027b8 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 80027b8:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80027ba:	4d16      	ldr	r5, [pc, #88]	@ (8002814 <JPEG_OutputHandler+0x5c>)
{
 80027bc:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80027be:	682b      	ldr	r3, [r5, #0]
 80027c0:	b113      	cbz	r3, 80027c8 <JPEG_OutputHandler+0x10>
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <JPEG_OutputHandler+0x60>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	bb1b      	cbnz	r3, 8002810 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 80027c8:	4b14      	ldr	r3, [pc, #80]	@ (800281c <JPEG_OutputHandler+0x64>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	7a03      	ldrb	r3, [r0, #8]
 80027ce:	b963      	cbnz	r3, 80027ea <JPEG_OutputHandler+0x32>
 80027d0:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <JPEG_OutputHandler+0x68>)
 80027d2:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <JPEG_OutputHandler+0x6c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	5cd3      	ldrb	r3, [r2, r3]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <JPEG_OutputHandler+0x32>
 80027de:	4b0e      	ldr	r3, [pc, #56]	@ (8002818 <JPEG_OutputHandler+0x60>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b913      	cbnz	r3, 80027ea <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80027e4:	6803      	ldr	r3, [r0, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80027ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002828 <JPEG_OutputHandler+0x70>)
 80027ec:	6813      	ldr	r3, [r2, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d10c      	bne.n	800280c <JPEG_OutputHandler+0x54>
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <JPEG_OutputHandler+0x74>)
 80027f4:	490b      	ldr	r1, [pc, #44]	@ (8002824 <JPEG_OutputHandler+0x6c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	b933      	cbnz	r3, 800280c <JPEG_OutputHandler+0x54>
 80027fe:	682b      	ldr	r3, [r5, #0]
 8002800:	b923      	cbnz	r3, 800280c <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002802:	2102      	movs	r1, #2
 8002804:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002806:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002808:	f006 fd59 	bl	80092be <HAL_JPEG_Resume>
        return 1;
 800280c:	2002      	movs	r0, #2
    }

    return 2;
}
 800280e:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002810:	2001      	movs	r0, #1
 8002812:	e7fc      	b.n	800280e <JPEG_OutputHandler+0x56>
 8002814:	24009e18 	.word	0x24009e18
 8002818:	24009df4 	.word	0x24009df4
 800281c:	24009e08 	.word	0x24009e08
 8002820:	24009df8 	.word	0x24009df8
 8002824:	24000010 	.word	0x24000010
 8002828:	24009e14 	.word	0x24009e14
 800282c:	24009e04 	.word	0x24009e04

08002830 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	4605      	mov	r5, r0
    if (length == 0)
 8002834:	2a00      	cmp	r2, #0
 8002836:	d037      	beq.n	80028a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002838:	2b00      	cmp	r3, #0
 800283a:	d035      	beq.n	80028a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 800283c:	481b      	ldr	r0, [pc, #108]	@ (80028ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 800283e:	2403      	movs	r4, #3
 8002840:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002842:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002844:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002846:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800284a:	bf18      	it	ne
 800284c:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002850:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002852:	bf18      	it	ne
 8002854:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002856:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002858:	0924      	lsrs	r4, r4, #4
 800285a:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800285c:	692c      	ldr	r4, [r5, #16]
 800285e:	f014 040f 	ands.w	r4, r4, #15
 8002862:	bf18      	it	ne
 8002864:	f1c4 0410 	rsbne	r4, r4, #16
 8002868:	6084      	str	r4, [r0, #8]
        FrameBufferAddress = outputBuffer;
 800286a:	4811      	ldr	r0, [pc, #68]	@ (80028b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800286c:	4c11      	ldr	r4, [pc, #68]	@ (80028b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
        FrameBufferAddress = outputBuffer;
 800286e:	6003      	str	r3, [r0, #0]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002870:	4811      	ldr	r0, [pc, #68]	@ (80028b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002872:	f7ff febb 	bl	80025ec <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 8002876:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002878:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800287a:	4d0f      	ldr	r5, [pc, #60]	@ (80028b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
        DMA2D_reference = dma;
 800287c:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800287e:	4628      	mov	r0, r5
 8002880:	f7ff ff9a 	bl	80027b8 <JPEG_OutputHandler>
 8002884:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d105      	bne.n	8002898 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
                SEM_WAIT(semDecodingDone);
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800288e:	f04f 31ff 	mov.w	r1, #4294967295
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	f009 ff62 	bl	800c75c <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d1ef      	bne.n	800287e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4e>
        Jpeg_HWDecodingEnd = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	4a08      	ldr	r2, [pc, #32]	@ (80028c4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x94>)
 80028a2:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 80028a4:	4a08      	ldr	r2, [pc, #32]	@ (80028c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x98>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bd70      	pop	{r4, r5, r6, pc}
 80028aa:	bf00      	nop
 80028ac:	24009de0 	.word	0x24009de0
 80028b0:	24009e28 	.word	0x24009e28
 80028b4:	24009e10 	.word	0x24009e10
 80028b8:	24009b94 	.word	0x24009b94
 80028bc:	24009e08 	.word	0x24009e08
 80028c0:	24009dfc 	.word	0x24009dfc
 80028c4:	24009e18 	.word	0x24009e18
 80028c8:	24009df4 	.word	0x24009df4

080028cc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80028cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d0:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80028d2:	6943      	ldr	r3, [r0, #20]
{
 80028d4:	b085      	sub	sp, #20
 80028d6:	4604      	mov	r4, r0
 80028d8:	460f      	mov	r7, r1
 80028da:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80028dc:	b92b      	cbnz	r3, 80028ea <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 80028de:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80028e0:	21b2      	movs	r1, #178	@ 0xb2
 80028e2:	4a29      	ldr	r2, [pc, #164]	@ (8002988 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80028e4:	4829      	ldr	r0, [pc, #164]	@ (800298c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80028e6:	f020 fb13 	bl	8022f10 <__assert_func>
    readData(currentMovieOffset, 8);
 80028ea:	2208      	movs	r2, #8
 80028ec:	6981      	ldr	r1, [r0, #24]
 80028ee:	f7ff fcd7 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80028f2:	69a6      	ldr	r6, [r4, #24]
 80028f4:	4620      	mov	r0, r4
 80028f6:	4631      	mov	r1, r6
 80028f8:	f7ff fcbf 	bl	800227a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80028fc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80028fe:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff fcba 	bl	800227a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002906:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002908:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800290a:	4620      	mov	r0, r4
 800290c:	f7ff fc9a 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002910:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002914:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002916:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002918:	180a      	adds	r2, r1, r0
 800291a:	429a      	cmp	r2, r3
 800291c:	d226      	bcs.n	800296c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800291e:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002922:	459b      	cmp	fp, r3
 8002924:	d117      	bne.n	8002956 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002926:	f246 3364 	movw	r3, #25444	@ 0x6364
 800292a:	459a      	cmp	sl, r3
 800292c:	d113      	bne.n	8002956 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800292e:	b190      	cbz	r0, 8002956 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002930:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002932:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002934:	4620      	mov	r0, r4
 8002936:	f7ff fcb3 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800293a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800293c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800293e:	462a      	mov	r2, r5
 8002940:	4620      	mov	r0, r4
 8002942:	f8cd 8000 	str.w	r8, [sp]
 8002946:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800294a:	463b      	mov	r3, r7
 800294c:	f7ff ff70 	bl	8002830 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002950:	6963      	ldr	r3, [r4, #20]
 8002952:	3301      	adds	r3, #1
 8002954:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002956:	69a3      	ldr	r3, [r4, #24]
 8002958:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800295a:	b905      	cbnz	r5, 800295e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 800295c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800295e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002960:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002962:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002966:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002968:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800296a:	d109      	bne.n	8002980 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 800296c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 800296e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002970:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002972:	6a23      	ldr	r3, [r4, #32]
 8002974:	61a3      	str	r3, [r4, #24]
}
 8002976:	f080 0001 	eor.w	r0, r0, #1
 800297a:	b005      	add	sp, #20
 800297c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002980:	2000      	movs	r0, #0
 8002982:	e7f8      	b.n	8002976 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002984:	080242f5 	.word	0x080242f5
 8002988:	08024414 	.word	0x08024414
 800298c:	08024246 	.word	0x08024246

08002990 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002994:	6981      	ldr	r1, [r0, #24]
{
 8002996:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002998:	2208      	movs	r2, #8
 800299a:	f7ff fc81 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800299e:	69a7      	ldr	r7, [r4, #24]
 80029a0:	4620      	mov	r0, r4
 80029a2:	1d39      	adds	r1, r7, #4
 80029a4:	f7ff fc4e 	bl	8002244 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80029a8:	f107 0108 	add.w	r1, r7, #8
 80029ac:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80029ae:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff fc75 	bl	80022a0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80029b6:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 80029b8:	b16e      	cbz	r6, 80029d6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80029ba:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80029bc:	4c07      	ldr	r4, [pc, #28]	@ (80029dc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 80029be:	4d08      	ldr	r5, [pc, #32]	@ (80029e0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80029c0:	4633      	mov	r3, r6
 80029c2:	4807      	ldr	r0, [pc, #28]	@ (80029e0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 80029c4:	f7ff fe12 	bl	80025ec <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80029c8:	4628      	mov	r0, r5
 80029ca:	f7ff fef5 	bl	80027b8 <JPEG_OutputHandler>
 80029ce:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f8      	beq.n	80029c8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 80029d6:	2001      	movs	r0, #1
 80029d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029da:	bf00      	nop
 80029dc:	24009e10 	.word	0x24009e10
 80029e0:	24009b94 	.word	0x24009b94

080029e4 <DMA2D_CopyBuffer>:
 * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
 * @param job: External job reference
 * @retval None
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 80029e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t yRef, refline;
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80029e6:	68c7      	ldr	r7, [r0, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80029e8:	2201      	movs	r2, #1
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80029ea:	4c15      	ldr	r4, [pc, #84]	@ (8002a40 <DMA2D_CopyBuffer+0x5c>)
 80029ec:	0139      	lsls	r1, r7, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80029ee:	4e15      	ldr	r6, [pc, #84]	@ (8002a44 <DMA2D_CopyBuffer+0x60>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	fbb1 f1f3 	udiv	r1, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 80029f6:	6863      	ldr	r3, [r4, #4]
 80029f8:	4359      	muls	r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80029fa:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <DMA2D_CopyBuffer+0x64>)
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 80029fe:	0109      	lsls	r1, r1, #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002a00:	68e2      	ldr	r2, [r4, #12]
 8002a02:	6836      	ldr	r6, [r6, #0]
    {
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002a04:	0515      	lsls	r5, r2, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002a06:	1ab6      	subs	r6, r6, r2
 8002a08:	42b7      	cmp	r7, r6
 8002a0a:	d315      	bcc.n	8002a38 <DMA2D_CopyBuffer+0x54>
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002a0c:	68a4      	ldr	r4, [r4, #8]
 8002a0e:	f1c4 0410 	rsb	r4, r4, #16
 8002a12:	432c      	orrs	r4, r5
 8002a14:	645c      	str	r4, [r3, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002a16:	4c0d      	ldr	r4, [pc, #52]	@ (8002a4c <DMA2D_CopyBuffer+0x68>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002a18:	f1c2 0232 	rsb	r2, r2, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002a1c:	6824      	ldr	r4, [r4, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002a1e:	0112      	lsls	r2, r2, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002a20:	4421      	add	r1, r4
 8002a22:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002a2a:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <DMA2D_CopyBuffer+0x6c>)
 8002a2c:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002a2e:	6842      	ldr	r2, [r0, #4]
 8002a30:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002a32:	4a08      	ldr	r2, [pc, #32]	@ (8002a54 <DMA2D_CopyBuffer+0x70>)
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002a38:	f045 0510 	orr.w	r5, r5, #16
 8002a3c:	645d      	str	r5, [r3, #68]	@ 0x44
 8002a3e:	e7ea      	b.n	8002a16 <DMA2D_CopyBuffer+0x32>
 8002a40:	24009de0 	.word	0x24009de0
 8002a44:	24009e0c 	.word	0x24009e0c
 8002a48:	52001000 	.word	0x52001000
 8002a4c:	24009e28 	.word	0x24009e28
 8002a50:	ff09000b 	.word	0xff09000b
 8002a54:	00012301 	.word	0x00012301

08002a58 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002a5e:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002a60:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002a62:	3101      	adds	r1, #1
 8002a64:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	2901      	cmp	r1, #1
 8002a6a:	d900      	bls.n	8002a6e <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002a6c:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002a6e:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <DMA2D_ExternalJobCompleted+0x38>)
 8002a70:	4a08      	ldr	r2, [pc, #32]	@ (8002a94 <DMA2D_ExternalJobCompleted+0x3c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68d2      	ldr	r2, [r2, #12]
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	68c2      	ldr	r2, [r0, #12]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <DMA2D_ExternalJobCompleted+0x40>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <DMA2D_ExternalJobCompleted+0x44>)
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	f009 be94 	b.w	800c7b4 <osSemaphoreRelease>
 8002a8c:	24009df8 	.word	0x24009df8
 8002a90:	24009e0c 	.word	0x24009e0c
 8002a94:	24009de0 	.word	0x24009de0
 8002a98:	24009df4 	.word	0x24009df4
 8002a9c:	24009dfc 	.word	0x24009dfc

08002aa0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	2200      	movs	r2, #0
{
 8002aa4:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002aa6:	4608      	mov	r0, r1
 8002aa8:	f009 fe0e 	bl	800c6c8 <osSemaphoreNew>
 8002aac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002aae:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002ab0:	b928      	cbnz	r0, 8002abe <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002ab4:	2128      	movs	r1, #40	@ 0x28
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002ab8:	480a      	ldr	r0, [pc, #40]	@ (8002ae4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002aba:	f020 fa29 	bl	8022f10 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f009 fe9f 	bl	800c806 <osMessageQueueNew>
 8002ac8:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002aca:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002acc:	b918      	cbnz	r0, 8002ad6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002ace:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002ad0:	212c      	movs	r1, #44	@ 0x2c
 8002ad2:	4a03      	ldr	r2, [pc, #12]	@ (8002ae0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002ad4:	e7f0      	b.n	8002ab8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002ad6:	bd08      	pop	{r3, pc}
 8002ad8:	24009e30 	.word	0x24009e30
 8002adc:	0802446f 	.word	0x0802446f
 8002ae0:	080244b8 	.word	0x080244b8
 8002ae4:	080244e7 	.word	0x080244e7
 8002ae8:	24009e2c 	.word	0x24009e2c
 8002aec:	08024537 	.word	0x08024537

08002af0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002af0:	4b02      	ldr	r3, [pc, #8]	@ (8002afc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002af2:	f04f 31ff 	mov.w	r1, #4294967295
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	f009 be30 	b.w	800c75c <osSemaphoreAcquire>
 8002afc:	24009e30 	.word	0x24009e30

08002b00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002b00:	4b01      	ldr	r3, [pc, #4]	@ (8002b08 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	f009 be56 	b.w	800c7b4 <osSemaphoreRelease>
 8002b08:	24009e30 	.word	0x24009e30

08002b0c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002b0c:	4b02      	ldr	r3, [pc, #8]	@ (8002b18 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002b0e:	2100      	movs	r1, #0
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	f009 be23 	b.w	800c75c <osSemaphoreAcquire>
 8002b16:	bf00      	nop
 8002b18:	24009e30 	.word	0x24009e30

08002b1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002b1c:	f7ff bff0 	b.w	8002b00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002b20 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002b20:	2300      	movs	r3, #0
 8002b22:	4803      	ldr	r0, [pc, #12]	@ (8002b30 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002b24:	4903      	ldr	r1, [pc, #12]	@ (8002b34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002b26:	461a      	mov	r2, r3
 8002b28:	6800      	ldr	r0, [r0, #0]
 8002b2a:	f009 bea7 	b.w	800c87c <osMessageQueuePut>
 8002b2e:	bf00      	nop
 8002b30:	24009e2c 	.word	0x24009e2c
 8002b34:	24000030 	.word	0x24000030

08002b38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002b38:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	4c07      	ldr	r4, [pc, #28]	@ (8002b5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002b3e:	a901      	add	r1, sp, #4
 8002b40:	461a      	mov	r2, r3
 8002b42:	6820      	ldr	r0, [r4, #0]
 8002b44:	f009 fecb 	bl	800c8de <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	a901      	add	r1, sp, #4
 8002b50:	6820      	ldr	r0, [r4, #0]
 8002b52:	f009 fec4 	bl	800c8de <osMessageQueueGet>
}
 8002b56:	b002      	add	sp, #8
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	bf00      	nop
 8002b5c:	24009e2c 	.word	0x24009e2c

08002b60 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002b60:	6803      	ldr	r3, [r0, #0]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b64:	4718      	bx	r3

08002b66 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002b66:	2001      	movs	r0, #1
 8002b68:	4770      	bx	lr

08002b6a <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002b6a:	e7fe      	b.n	8002b6a <DMA2D_XferErrorCallback>

08002b6c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002b6c:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002b70:	4770      	bx	lr
	...

08002b74 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002b74:	b510      	push	{r4, lr}
 8002b76:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002b80:	f009 fd60 	bl	800c644 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002b84:	6860      	ldr	r0, [r4, #4]
 8002b86:	6803      	ldr	r3, [r0, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4798      	blx	r3
 8002b8c:	b978      	cbnz	r0, 8002bae <_ZN8STM32DMA5startEv+0x3a>
 8002b8e:	7a63      	ldrb	r3, [r4, #9]
 8002b90:	b16b      	cbz	r3, 8002bae <_ZN8STM32DMA5startEv+0x3a>
 8002b92:	7a23      	ldrb	r3, [r4, #8]
 8002b94:	b95b      	cbnz	r3, 8002bae <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002b96:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002ba2:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002baa:	f009 bd6e 	b.w	800c68a <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002bae:	490b      	ldr	r1, [pc, #44]	@ (8002bdc <_ZN8STM32DMA5startEv+0x68>)
 8002bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002be0 <_ZN8STM32DMA5startEv+0x6c>)
 8002bb2:	680b      	ldr	r3, [r1, #0]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	5cd3      	ldrb	r3, [r2, r3]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d1f2      	bne.n	8002ba2 <_ZN8STM32DMA5startEv+0x2e>
 8002bbc:	7a20      	ldrb	r0, [r4, #8]
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d1ef      	bne.n	8002ba2 <_ZN8STM32DMA5startEv+0x2e>
 8002bc2:	7aa0      	ldrb	r0, [r4, #10]
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d1ec      	bne.n	8002ba2 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002bc8:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002bca:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002bce:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002bd2:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002bd4:	f7ff ff06 	bl	80029e4 <DMA2D_CopyBuffer>
    }
 8002bd8:	e7e3      	b.n	8002ba2 <_ZN8STM32DMA5startEv+0x2e>
 8002bda:	bf00      	nop
 8002bdc:	24009df8 	.word	0x24009df8
 8002be0:	24000010 	.word	0x24000010

08002be4 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bea:	6003      	str	r3, [r0, #0]
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <_ZN8STM32DMAD1Ev+0x1c>)
 8002bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002bf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bf6:	f3bf 8f6f 	isb	sy
}
 8002bfa:	4770      	bx	lr
 8002bfc:	0802604c 	.word	0x0802604c
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4604      	mov	r4, r0
}
 8002c08:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002c0c:	f7ff ffea 	bl	8002be4 <_ZN8STM32DMAD1Ev>
 8002c10:	4620      	mov	r0, r4
 8002c12:	f01f fe06 	bl	8022822 <_ZdlPvj>
 8002c16:	4620      	mov	r0, r4
 8002c18:	bd10      	pop	{r4, pc}
	...

08002c1c <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c1c:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002c1e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c20:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002c24:	f042 0210 	orr.w	r2, r2, #16
 8002c28:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002c2c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002c30:	f002 0210 	and.w	r2, r2, #16
 8002c34:	9201      	str	r2, [sp, #4]
 8002c36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002c38:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002c3a:	f042 0210 	orr.w	r2, r2, #16
 8002c3e:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002c40:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002c42:	f022 0210 	bic.w	r2, r2, #16
 8002c46:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002c48:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <_ZN8STM32DMA10initializeEv+0x48>)
 8002c4a:	4a07      	ldr	r2, [pc, #28]	@ (8002c68 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002c4c:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002c4e:	4a07      	ldr	r2, [pc, #28]	@ (8002c6c <_ZN8STM32DMA10initializeEv+0x50>)
 8002c50:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <_ZN8STM32DMA10initializeEv+0x54>)
 8002c54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c58:	609a      	str	r2, [r3, #8]
}
 8002c5a:	b002      	add	sp, #8
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
 8002c64:	24009c08 	.word	0x24009c08
 8002c68:	08002eb9 	.word	0x08002eb9
 8002c6c:	08002b6b 	.word	0x08002b6b
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002c74:	b508      	push	{r3, lr}
    switch (format)
 8002c76:	280a      	cmp	r0, #10
 8002c78:	d809      	bhi.n	8002c8e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002c7a:	e8df f000 	tbb	[pc, r0]
 8002c7e:	1006      	.short	0x1006
 8002c80:	0808080e 	.word	0x0808080e
 8002c84:	10101008 	.word	0x10101008
 8002c88:	10          	.byte	0x10
 8002c89:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002c8a:	2002      	movs	r0, #2
}
 8002c8c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002c90:	2191      	movs	r1, #145	@ 0x91
 8002c92:	4a05      	ldr	r2, [pc, #20]	@ (8002ca8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c94:	4805      	ldr	r0, [pc, #20]	@ (8002cac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c96:	f020 f93b 	bl	8022f10 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	e7f6      	b.n	8002c8c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c9e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002ca0:	e7f4      	b.n	8002c8c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002ca2:	bf00      	nop
 8002ca4:	08024579 	.word	0x08024579
 8002ca8:	08024594 	.word	0x08024594
 8002cac:	080245df 	.word	0x080245df

08002cb0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002cb0:	b538      	push	{r3, r4, r5, lr}
 8002cb2:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002cb4:	7f88      	ldrb	r0, [r1, #30]
 8002cb6:	f7ff ffdd 	bl	8002c74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002cba:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002cbc:	8aa5      	ldrh	r5, [r4, #20]
 8002cbe:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002cc0:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002cc2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cc6:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cca:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ccc:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cce:	1b52      	subs	r2, r2, r5
 8002cd0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002cd2:	6825      	ldr	r5, [r4, #0]
 8002cd4:	2d08      	cmp	r5, #8
 8002cd6:	d10e      	bne.n	8002cf6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cd8:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cda:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cdc:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002cde:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002ce0:	7f20      	ldrb	r0, [r4, #28]
 8002ce2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002ce6:	61da      	str	r2, [r3, #28]
        return color;
 8002ce8:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cea:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002cec:	4a07      	ldr	r2, [pc, #28]	@ (8002d0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cee:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cf0:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002cf2:	601a      	str	r2, [r3, #0]
    }
}
 8002cf4:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002cf6:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002cf8:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002cfa:	611a      	str	r2, [r3, #16]
 8002cfc:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002cfe:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002d00:	4a03      	ldr	r2, [pc, #12]	@ (8002d10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002d02:	e7f6      	b.n	8002cf2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002d04:	52001000 	.word	0x52001000
 8002d08:	00010009 	.word	0x00010009
 8002d0c:	00022301 	.word	0x00022301
 8002d10:	00032301 	.word	0x00032301

08002d14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002d14:	b508      	push	{r3, lr}
    switch (format)
 8002d16:	280b      	cmp	r0, #11
 8002d18:	d80b      	bhi.n	8002d32 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002d1a:	e8df f000 	tbb	[pc, r0]
 8002d1e:	1206      	.short	0x1206
 8002d20:	0a0a0a10 	.word	0x0a0a0a10
 8002d24:	0808080a 	.word	0x0808080a
 8002d28:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002d2a:	2002      	movs	r0, #2
}
 8002d2c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002d2e:	2005      	movs	r0, #5
        break;
 8002d30:	e7fc      	b.n	8002d2c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002d32:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002d34:	2170      	movs	r1, #112	@ 0x70
 8002d36:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002d38:	4805      	ldr	r0, [pc, #20]	@ (8002d50 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002d3a:	f020 f8e9 	bl	8022f10 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002d3e:	2000      	movs	r0, #0
 8002d40:	e7f4      	b.n	8002d2c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002d42:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002d44:	e7f2      	b.n	8002d2c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002d46:	bf00      	nop
 8002d48:	08024579 	.word	0x08024579
 8002d4c:	0802462d 	.word	0x0802462d
 8002d50:	080245df 	.word	0x080245df

08002d54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002d58:	7f4f      	ldrb	r7, [r1, #29]
{
 8002d5a:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002d5c:	4638      	mov	r0, r7
 8002d5e:	f7ff ffd9 	bl	8002d14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002d62:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002d66:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002d68:	4628      	mov	r0, r5
 8002d6a:	f7ff ffd3 	bl	8002d14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002d6e:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002d70:	4628      	mov	r0, r5
 8002d72:	f7ff ff7f 	bl	8002c74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d76:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002d7a:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002d7e:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d82:	4b45      	ldr	r3, [pc, #276]	@ (8002e98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d84:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002d86:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d88:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d8a:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002d8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002d8e:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002d92:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002d94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d98:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002d9e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002da2:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002da4:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002da6:	f8d9 4000 	ldr.w	r4, [r9]
 8002daa:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002dae:	2c80      	cmp	r4, #128	@ 0x80
 8002db0:	d022      	beq.n	8002df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002db2:	d80f      	bhi.n	8002dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002db4:	2c20      	cmp	r4, #32
 8002db6:	d066      	beq.n	8002e86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002db8:	2c40      	cmp	r4, #64	@ 0x40
 8002dba:	d064      	beq.n	8002e86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002dbc:	2c04      	cmp	r4, #4
 8002dbe:	d05c      	beq.n	8002e7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002dc0:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002dc4:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002dc6:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002dc8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002dcc:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002dce:	d060      	beq.n	8002e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002dd0:	4a32      	ldr	r2, [pc, #200]	@ (8002e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002dd2:	e03f      	b.n	8002e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002dd4:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002dd8:	d004      	beq.n	8002de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002dda:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002dde:	d1ef      	bne.n	8002dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002de0:	482f      	ldr	r0, [pc, #188]	@ (8002ea0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002de2:	e000      	b.n	8002de6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002de4:	482f      	ldr	r0, [pc, #188]	@ (8002ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002de6:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002dea:	61da      	str	r2, [r3, #28]
 8002dec:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002df0:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002df2:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002df4:	6159      	str	r1, [r3, #20]
 8002df6:	e02c      	b.n	8002e52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002df8:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002dfc:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002e00:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002e04:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e06:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e08:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002e0a:	1d21      	adds	r1, r4, #4
 8002e0c:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002e0e:	7821      	ldrb	r1, [r4, #0]
 8002e10:	b141      	cbz	r1, 8002e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002e12:	2901      	cmp	r1, #1
 8002e14:	d021      	beq.n	8002e5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002e16:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002e18:	f240 110b 	movw	r1, #267	@ 0x10b
 8002e1c:	4a23      	ldr	r2, [pc, #140]	@ (8002eac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002e1e:	4824      	ldr	r0, [pc, #144]	@ (8002eb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002e20:	f020 f876 	bl	8022f10 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	8861      	ldrh	r1, [r4, #2]
 8002e28:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002e2c:	3901      	subs	r1, #1
 8002e2e:	f022 0210 	bic.w	r2, r2, #16
 8002e32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e36:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002e38:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002e3a:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002e3c:	69d9      	ldr	r1, [r3, #28]
 8002e3e:	f041 0120 	orr.w	r1, r1, #32
 8002e42:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002e44:	69d9      	ldr	r1, [r3, #28]
 8002e46:	0689      	lsls	r1, r1, #26
 8002e48:	d4fc      	bmi.n	8002e44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	6099      	str	r1, [r3, #8]
            if (blend)
 8002e4e:	2a00      	cmp	r2, #0
 8002e50:	d0be      	beq.n	8002dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002e52:	4a18      	ldr	r2, [pc, #96]	@ (8002eb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002e5a:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002e5c:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002e5e:	8860      	ldrh	r0, [r4, #2]
 8002e60:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002e64:	bf18      	it	ne
 8002e66:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002e68:	3801      	subs	r0, #1
 8002e6a:	f021 0110 	bic.w	r1, r1, #16
 8002e6e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002e72:	f041 0110 	orr.w	r1, r1, #16
 8002e76:	61d9      	str	r1, [r3, #28]
                break;
 8002e78:	e7df      	b.n	8002e3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002e7a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002e7e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002e82:	61da      	str	r2, [r3, #28]
 8002e84:	e7b5      	b.n	8002df2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002e86:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002e8a:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002e8c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002e90:	e7f7      	b.n	8002e82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002e92:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002e96:	e7dd      	b.n	8002e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002e98:	52001000 	.word	0x52001000
 8002e9c:	00012301 	.word	0x00012301
 8002ea0:	00020009 	.word	0x00020009
 8002ea4:	0002000a 	.word	0x0002000a
 8002ea8:	08024677 	.word	0x08024677
 8002eac:	08024691 	.word	0x08024691
 8002eb0:	080245df 	.word	0x080245df
 8002eb4:	00022301 	.word	0x00022301

08002eb8 <DMA2D_XferCpltCallback>:
 8002eb8:	4b02      	ldr	r3, [pc, #8]	@ (8002ec4 <DMA2D_XferCpltCallback+0xc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002ebe:	6803      	ldr	r3, [r0, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4718      	bx	r3
 8002ec4:	240251f0 	.word	0x240251f0

08002ec8 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002ec8:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002ed0:	b9d3      	cbnz	r3, 8002f08 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002ed2:	6803      	ldr	r3, [r0, #0]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002ed8:	4919      	ldr	r1, [pc, #100]	@ (8002f40 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002eda:	4a1a      	ldr	r2, [pc, #104]	@ (8002f44 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002edc:	680b      	ldr	r3, [r1, #0]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	5cd3      	ldrb	r3, [r2, r3]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d12a      	bne.n	8002f3c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002ee6:	4818      	ldr	r0, [pc, #96]	@ (8002f48 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002ee8:	6800      	ldr	r0, [r0, #0]
 8002eea:	bb38      	cbnz	r0, 8002f3c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002eec:	7a20      	ldrb	r0, [r4, #8]
 8002eee:	bb28      	cbnz	r0, 8002f3c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002ef0:	7aa0      	ldrb	r0, [r4, #10]
 8002ef2:	bb18      	cbnz	r0, 8002f3c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ef4:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002ef6:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002efa:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002efc:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002f04:	f7ff bd6e 	b.w	80029e4 <DMA2D_CopyBuffer>
        if (isRunning)
 8002f08:	7a03      	ldrb	r3, [r0, #8]
 8002f0a:	b143      	cbz	r3, 8002f1e <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002f16:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002f1a:	f7ff fd9d 	bl	8002a58 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002f1e:	6860      	ldr	r0, [r4, #4]
 8002f20:	6803      	ldr	r3, [r0, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4798      	blx	r3
 8002f26:	b948      	cbnz	r0, 8002f3c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002f28:	7a63      	ldrb	r3, [r4, #9]
 8002f2a:	b13b      	cbz	r3, 8002f3c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002f2c:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002f2e:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002f32:	4620      	mov	r0, r4
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002f3a:	4718      	bx	r3
    }
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	bf00      	nop
 8002f40:	24009df8 	.word	0x24009df8
 8002f44:	24000010 	.word	0x24000010
 8002f48:	24009df4 	.word	0x24009df4

08002f4c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002f50:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <_ZN8STM32DMAC1Ev+0x40>)
 8002f52:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002f54:	2600      	movs	r6, #0
 8002f56:	4625      	mov	r5, r4
 8002f58:	2260      	movs	r2, #96	@ 0x60
 8002f5a:	6060      	str	r0, [r4, #4]
 8002f5c:	7226      	strb	r6, [r4, #8]
 8002f5e:	7266      	strb	r6, [r4, #9]
 8002f60:	f845 3b20 	str.w	r3, [r5], #32
 8002f64:	4629      	mov	r1, r5
 8002f66:	f00c fe67 	bl	800fc38 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002f6a:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002f6e:	60ee      	str	r6, [r5, #12]
 8002f70:	3524      	adds	r5, #36	@ 0x24
 8002f72:	429d      	cmp	r5, r3
 8002f74:	d1fb      	bne.n	8002f6e <_ZN8STM32DMAC1Ev+0x22>
 8002f76:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002f7a:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002f7c:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002f80:	f009 fb28 	bl	800c5d4 <osMutexNew>
 8002f84:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002f88:	4620      	mov	r0, r4
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
 8002f8c:	0802604c 	.word	0x0802604c

08002f90 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f90:	4b03      	ldr	r3, [pc, #12]	@ (8002fa0 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	07d2      	lsls	r2, r2, #31
 8002f96:	d4fc      	bmi.n	8002f92 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f98:	2223      	movs	r2, #35	@ 0x23
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	52001000 	.word	0x52001000

08002fa4 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd4 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002fa6:	6953      	ldr	r3, [r2, #20]
 8002fa8:	03db      	lsls	r3, r3, #15
 8002faa:	d511      	bpl.n	8002fd0 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002fac:	2900      	cmp	r1, #0
 8002fae:	dd0f      	ble.n	8002fd0 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002fb0:	f000 031f 	and.w	r3, r0, #31
 8002fb4:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002fb6:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002fba:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002fbc:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002fc0:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002fc2:	1a0b      	subs	r3, r1, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	dcf9      	bgt.n	8002fbc <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002fc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fcc:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002fd8:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002fda:	4c10      	ldr	r4, [pc, #64]	@ (800301c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002fdc:	6825      	ldr	r5, [r4, #0]
 8002fde:	07ed      	lsls	r5, r5, #31
 8002fe0:	d4fc      	bmi.n	8002fdc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002fe2:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002fe4:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002fe6:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002fe8:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002fea:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002fee:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ff2:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ff4:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002ff6:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002ff8:	d00c      	beq.n	8003014 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ffa:	4909      	ldr	r1, [pc, #36]	@ (8003020 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ffc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003000:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003002:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8003006:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003008:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800300a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 800300c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800300e:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003010:	6023      	str	r3, [r4, #0]
    }
}
 8003012:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003014:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003016:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003018:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800301a:	e7f9      	b.n	8003010 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 800301c:	52001000 	.word	0x52001000
 8003020:	00010009 	.word	0x00010009
 8003024:	00020001 	.word	0x00020001
 8003028:	00030001 	.word	0x00030001

0800302c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 800302c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800302e:	4c0e      	ldr	r4, [pc, #56]	@ (8003068 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003030:	6825      	ldr	r5, [r4, #0]
 8003032:	07ed      	lsls	r5, r5, #31
 8003034:	d4fc      	bmi.n	8003030 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003036:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003038:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 800303a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800303c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800303e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003042:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003046:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003048:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800304a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 800304c:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 800304e:	d007      	beq.n	8003060 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003050:	4a06      	ldr	r2, [pc, #24]	@ (800306c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8003052:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8003056:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003058:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800305a:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800305c:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 800305e:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8003062:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003064:	6025      	str	r5, [r4, #0]
}
 8003066:	e7fa      	b.n	800305e <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8003068:	52001000 	.word	0x52001000
 800306c:	00020001 	.word	0x00020001
 8003070:	ff020001 	.word	0xff020001

08003074 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8003074:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003076:	4c0b      	ldr	r4, [pc, #44]	@ (80030a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8003078:	6825      	ldr	r5, [r4, #0]
 800307a:	07ed      	lsls	r5, r5, #31
 800307c:	d4fc      	bmi.n	8003078 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800307e:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003080:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003082:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003084:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003086:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800308c:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800308e:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003090:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003092:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003094:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003096:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800309a:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800309c:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800309e:	6023      	str	r3, [r4, #0]
}
 80030a0:	bd30      	pop	{r4, r5, pc}
 80030a2:	bf00      	nop
 80030a4:	52001000 	.word	0x52001000
 80030a8:	00020001 	.word	0x00020001

080030ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80030ac:	2001      	movs	r0, #1
 80030ae:	4770      	bx	lr

080030b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80030b0:	200c      	movs	r0, #12
 80030b2:	4770      	bx	lr

080030b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80030b4:	230c      	movs	r3, #12
 80030b6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80030ba:	3008      	adds	r0, #8
 80030bc:	4770      	bx	lr

080030be <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80030be:	230c      	movs	r3, #12
 80030c0:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80030c4:	3008      	adds	r0, #8
 80030c6:	4770      	bx	lr

080030c8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80030c8:	2001      	movs	r0, #1
 80030ca:	4770      	bx	lr

080030cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80030cc:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 80030d0:	4770      	bx	lr

080030d2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80030d2:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 80030d6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80030da:	3008      	adds	r0, #8
 80030dc:	4770      	bx	lr

080030de <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80030de:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 80030e2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80030e6:	3008      	adds	r0, #8
 80030e8:	4770      	bx	lr

080030ea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80030ea:	2001      	movs	r0, #1
 80030ec:	4770      	bx	lr

080030ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80030ee:	2010      	movs	r0, #16
 80030f0:	4770      	bx	lr

080030f2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80030f2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80030f6:	3008      	adds	r0, #8
 80030f8:	4770      	bx	lr

080030fa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80030fa:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80030fe:	3008      	adds	r0, #8
 8003100:	4770      	bx	lr

08003102 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8003102:	4608      	mov	r0, r1
 8003104:	f000 be46 	b.w	8003d94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08003108 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003108:	4b03      	ldr	r3, [pc, #12]	@ (8003118 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800310a:	b510      	push	{r4, lr}
 800310c:	4604      	mov	r4, r0
 800310e:	6003      	str	r3, [r0, #0]
 8003110:	f00b fbbb 	bl	800e88a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003114:	4620      	mov	r0, r4
 8003116:	bd10      	pop	{r4, pc}
 8003118:	08026104 	.word	0x08026104

0800311c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800311c:	b510      	push	{r4, lr}
 800311e:	4604      	mov	r4, r0
 8003120:	f7ff fff2 	bl	8003108 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003124:	2114      	movs	r1, #20
 8003126:	4620      	mov	r0, r4
 8003128:	f01f fb7b 	bl	8022822 <_ZdlPvj>
 800312c:	4620      	mov	r0, r4
 800312e:	bd10      	pop	{r4, pc}

08003130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003130:	4b03      	ldr	r3, [pc, #12]	@ (8003140 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003132:	b510      	push	{r4, lr}
 8003134:	4604      	mov	r4, r0
 8003136:	6003      	str	r3, [r0, #0]
 8003138:	f00b fba7 	bl	800e88a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800313c:	4620      	mov	r0, r4
 800313e:	bd10      	pop	{r4, pc}
 8003140:	080260d0 	.word	0x080260d0

08003144 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003144:	b510      	push	{r4, lr}
 8003146:	4604      	mov	r4, r0
 8003148:	f7ff fff2 	bl	8003130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800314c:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8003150:	4620      	mov	r0, r4
 8003152:	f01f fb66 	bl	8022822 <_ZdlPvj>
 8003156:	4620      	mov	r0, r4
 8003158:	bd10      	pop	{r4, pc}
	...

0800315c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800315c:	4b03      	ldr	r3, [pc, #12]	@ (800316c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800315e:	b510      	push	{r4, lr}
 8003160:	4604      	mov	r4, r0
 8003162:	6003      	str	r3, [r0, #0]
 8003164:	f00b fb91 	bl	800e88a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003168:	4620      	mov	r0, r4
 800316a:	bd10      	pop	{r4, pc}
 800316c:	0802609c 	.word	0x0802609c

08003170 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003170:	b510      	push	{r4, lr}
 8003172:	4604      	mov	r4, r0
 8003174:	f7ff fff2 	bl	800315c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003178:	2118      	movs	r1, #24
 800317a:	4620      	mov	r0, r4
 800317c:	f01f fb51 	bl	8022822 <_ZdlPvj>
 8003180:	4620      	mov	r0, r4
 8003182:	bd10      	pop	{r4, pc}

08003184 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003184:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <_ZN12FrontendHeapD1Ev+0x24>)
 8003186:	b510      	push	{r4, lr}
 8003188:	4604      	mov	r4, r0
 800318a:	6003      	str	r3, [r0, #0]
 800318c:	f500 70bc 	add.w	r0, r0, #376	@ 0x178
 8003190:	f7ff ffba 	bl	8003108 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003194:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003198:	f7ff ffca 	bl	8003130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800319c:	f104 0014 	add.w	r0, r4, #20
 80031a0:	f7ff ffdc 	bl	800315c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031a4:	4620      	mov	r0, r4
 80031a6:	bd10      	pop	{r4, pc}
 80031a8:	08026138 	.word	0x08026138

080031ac <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80031ac:	b508      	push	{r3, lr}
 80031ae:	4802      	ldr	r0, [pc, #8]	@ (80031b8 <__tcf_0+0xc>)
 80031b0:	f7ff ffe8 	bl	8003184 <_ZN12FrontendHeapD1Ev>
 80031b4:	bd08      	pop	{r3, pc}
 80031b6:	bf00      	nop
 80031b8:	2400acf4 	.word	0x2400acf4

080031bc <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80031bc:	b510      	push	{r4, lr}
 80031be:	4604      	mov	r4, r0
 80031c0:	f7ff ffe0 	bl	8003184 <_ZN12FrontendHeapD1Ev>
 80031c4:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 80031c8:	4620      	mov	r0, r4
 80031ca:	f01f fb2a 	bl	8022822 <_ZdlPvj>
 80031ce:	4620      	mov	r0, r4
 80031d0:	bd10      	pop	{r4, pc}
	...

080031d4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80031d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80031d8:	f000 fc52 	bl	8003a80 <_ZN14BitmapDatabase11getInstanceEv>
 80031dc:	2400      	movs	r4, #0
 80031de:	4605      	mov	r5, r0
 80031e0:	f000 fc52 	bl	8003a88 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80031e4:	4623      	mov	r3, r4
 80031e6:	4601      	mov	r1, r0
 80031e8:	4622      	mov	r2, r4
 80031ea:	4628      	mov	r0, r5
 80031ec:	9400      	str	r4, [sp, #0]
 80031ee:	f014 fd41 	bl	8017c74 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80031f2:	4b27      	ldr	r3, [pc, #156]	@ (8003290 <touchgfx_init+0xbc>)
 80031f4:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80031f6:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80031f8:	4d27      	ldr	r5, [pc, #156]	@ (8003298 <touchgfx_init+0xc4>)
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f001 f944 	bl	8004488 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003200:	4b26      	ldr	r3, [pc, #152]	@ (800329c <touchgfx_init+0xc8>)
 8003202:	4a27      	ldr	r2, [pc, #156]	@ (80032a0 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003204:	4827      	ldr	r0, [pc, #156]	@ (80032a4 <touchgfx_init+0xd0>)
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	f014 fbe0 	bl	80179cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800320c:	682b      	ldr	r3, [r5, #0]
 800320e:	f3bf 8f5b 	dmb	ish
 8003212:	07db      	lsls	r3, r3, #31
 8003214:	d435      	bmi.n	8003282 <touchgfx_init+0xae>
 8003216:	4628      	mov	r0, r5
 8003218:	f01f fb05 	bl	8022826 <__cxa_guard_acquire>
 800321c:	b388      	cbz	r0, 8003282 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800321e:	4c22      	ldr	r4, [pc, #136]	@ (80032a8 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003220:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003222:	f504 76cc 	add.w	r6, r4, #408	@ 0x198
        : presenterStorage(pres),
 8003226:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800322a:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 800322e:	f504 77bc 	add.w	r7, r4, #376	@ 0x178
 8003232:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003234:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8003236:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800323a:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 800323c:	6126      	str	r6, [r4, #16]
 800323e:	f00b fb25 	bl	800e88c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003242:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <touchgfx_init+0xdc>)
 8003244:	4640      	mov	r0, r8
 8003246:	6163      	str	r3, [r4, #20]
 8003248:	f00b fb20 	bl	800e88c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800324c:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <touchgfx_init+0xe0>)
 800324e:	4638      	mov	r0, r7
 8003250:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003252:	f00b fb1b 	bl	800e88c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003256:	4b18      	ldr	r3, [pc, #96]	@ (80032b8 <touchgfx_init+0xe4>)
 8003258:	f504 70c6 	add.w	r0, r4, #396	@ 0x18c
 800325c:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
 8003260:	f001 f996 	bl	8004590 <_ZN5ModelC1Ev>
 8003264:	4622      	mov	r2, r4
 8003266:	f504 71c6 	add.w	r1, r4, #396	@ 0x18c
 800326a:	4630      	mov	r0, r6
 800326c:	f001 f986 	bl	800457c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003270:	4630      	mov	r0, r6
 8003272:	f000 fd8f 	bl	8003d94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8003276:	4811      	ldr	r0, [pc, #68]	@ (80032bc <touchgfx_init+0xe8>)
 8003278:	f01f fe68 	bl	8022f4c <atexit>
 800327c:	4628      	mov	r0, r5
 800327e:	f01f fade 	bl	802283e <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003282:	480f      	ldr	r0, [pc, #60]	@ (80032c0 <touchgfx_init+0xec>)
}
 8003284:	b002      	add	sp, #8
 8003286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800328a:	f7fe bcd1 	b.w	8001c30 <_ZN11TouchGFXHAL10initializeEv>
 800328e:	bf00      	nop
 8003290:	24025254 	.word	0x24025254
 8003294:	24009eb8 	.word	0x24009eb8
 8003298:	2400acf0 	.word	0x2400acf0
 800329c:	24009ed8 	.word	0x24009ed8
 80032a0:	24009ebc 	.word	0x24009ebc
 80032a4:	24000034 	.word	0x24000034
 80032a8:	2400acf4 	.word	0x2400acf4
 80032ac:	08026138 	.word	0x08026138
 80032b0:	0802609c 	.word	0x0802609c
 80032b4:	080260d0 	.word	0x080260d0
 80032b8:	08026104 	.word	0x08026104
 80032bc:	080031ad 	.word	0x080031ad
 80032c0:	24009e34 	.word	0x24009e34

080032c4 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80032c4:	4770      	bx	lr
	...

080032c8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80032c8:	4801      	ldr	r0, [pc, #4]	@ (80032d0 <touchgfx_taskEntry+0x8>)
 80032ca:	f7fe bcc3 	b.w	8001c54 <_ZN11TouchGFXHAL9taskEntryEv>
 80032ce:	bf00      	nop
 80032d0:	24009e34 	.word	0x24009e34

080032d4 <_GLOBAL__sub_I_touchgfx_init>:
}
 80032d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80032d6:	4c0e      	ldr	r4, [pc, #56]	@ (8003310 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80032d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80032da:	4e0f      	ldr	r6, [pc, #60]	@ (8003318 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80032dc:	4620      	mov	r0, r4
static LCD24bpp display;
 80032de:	4d0f      	ldr	r5, [pc, #60]	@ (800331c <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80032e0:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80032e2:	f7ff fe33 	bl	8002f4c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80032e6:	4628      	mov	r0, r5
 80032e8:	f018 fb2e 	bl	801b948 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80032ec:	480c      	ldr	r0, [pc, #48]	@ (8003320 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80032ee:	f012 f929 	bl	8015544 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80032f2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80032f6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80032fa:	4621      	mov	r1, r4
 80032fc:	4809      	ldr	r0, [pc, #36]	@ (8003324 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80032fe:	e9cd 3200 	strd	r3, r2, [sp]
 8003302:	4633      	mov	r3, r6
 8003304:	462a      	mov	r2, r5
 8003306:	f7fe fd39 	bl	8001d7c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800330a:	b002      	add	sp, #8
 800330c:	bd70      	pop	{r4, r5, r6, pc}
 800330e:	bf00      	nop
 8003310:	24009f44 	.word	0x24009f44
 8003314:	08025f04 	.word	0x08025f04
 8003318:	2400acec 	.word	0x2400acec
 800331c:	24009ed8 	.word	0x24009ed8
 8003320:	24009ebc 	.word	0x24009ebc
 8003324:	24009e34 	.word	0x24009e34

08003328 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003328:	4801      	ldr	r0, [pc, #4]	@ (8003330 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800332a:	f7ff bc5b 	b.w	8002be4 <_ZN8STM32DMAD1Ev>
 800332e:	bf00      	nop
 8003330:	24009f44 	.word	0x24009f44

08003334 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003334:	2000      	movs	r0, #0
 8003336:	4770      	bx	lr

08003338 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003338:	8081      	strh	r1, [r0, #4]
    }
 800333a:	4770      	bx	lr

0800333c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800333c:	80c1      	strh	r1, [r0, #6]
    }
 800333e:	4770      	bx	lr

08003340 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003340:	8101      	strh	r1, [r0, #8]
    }
 8003342:	4770      	bx	lr

08003344 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003344:	8141      	strh	r1, [r0, #10]
    }
 8003346:	4770      	bx	lr

08003348 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003348:	4770      	bx	lr

0800334a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800334a:	4770      	bx	lr

0800334c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800334c:	4770      	bx	lr

0800334e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800334e:	4770      	bx	lr

08003350 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003350:	4770      	bx	lr

08003352 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003352:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003354:	88c4      	ldrh	r4, [r0, #6]
 8003356:	6803      	ldr	r3, [r0, #0]
 8003358:	1b12      	subs	r2, r2, r4
 800335a:	8884      	ldrh	r4, [r0, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335e:	1b09      	subs	r1, r1, r4
 8003360:	b212      	sxth	r2, r2
    }
 8003362:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003366:	b209      	sxth	r1, r1
 8003368:	4718      	bx	r3

0800336a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800336a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800336e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
 8003374:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800337a:	6010      	str	r0, [r2, #0]
    }
 800337c:	4770      	bx	lr

0800337e <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800337e:	2000      	movs	r0, #0
 8003380:	4770      	bx	lr

08003382 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003382:	888b      	ldrh	r3, [r1, #4]
 8003384:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8003386:	2001      	movs	r0, #1
 8003388:	4770      	bx	lr

0800338a <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800338a:	4770      	bx	lr

0800338c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800338c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003390:	4770      	bx	lr

08003392 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003392:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003396:	4770      	bx	lr

08003398 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8003398:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800339a:	2200      	movs	r2, #0
        return rect.width;
 800339c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80033a0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80033a4:	8002      	strh	r2, [r0, #0]
 80033a6:	8042      	strh	r2, [r0, #2]
 80033a8:	8084      	strh	r4, [r0, #4]
 80033aa:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80033ac:	bd10      	pop	{r4, pc}

080033ae <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80033ae:	2200      	movs	r2, #0
 80033b0:	8002      	strh	r2, [r0, #0]
 80033b2:	8042      	strh	r2, [r0, #2]
 80033b4:	8082      	strh	r2, [r0, #4]
 80033b6:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80033b8:	4770      	bx	lr

080033ba <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80033ba:	7701      	strb	r1, [r0, #28]
    }
 80033bc:	4770      	bx	lr

080033be <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80033be:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80033c2:	4770      	bx	lr

080033c4 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80033c4:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80033c8:	4770      	bx	lr

080033ca <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80033ca:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80033ce:	4770      	bx	lr

080033d0 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80033d0:	2001      	movs	r0, #1
 80033d2:	4770      	bx	lr

080033d4 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80033d4:	3098      	adds	r0, #152	@ 0x98
 80033d6:	4770      	bx	lr

080033d8 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80033d8:	308c      	adds	r0, #140	@ 0x8c
 80033da:	4770      	bx	lr

080033dc <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80033dc:	3084      	adds	r0, #132	@ 0x84
 80033de:	4770      	bx	lr

080033e0 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80033e0:	4770      	bx	lr

080033e2 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80033e2:	4770      	bx	lr

080033e4 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80033e4:	4770      	bx	lr
	...

080033e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e8:	4b02      	ldr	r3, [pc, #8]	@ (80033f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80033ea:	2290      	movs	r2, #144	@ 0x90
 80033ec:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000e100 	.word	0xe000e100

080033f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80033f8:	4770      	bx	lr

080033fa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80033fa:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80033fc:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003400:	4770      	bx	lr

08003402 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003402:	4770      	bx	lr

08003404 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003404:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003408:	4611      	mov	r1, r2
 800340a:	6840      	ldr	r0, [r0, #4]
 800340c:	6803      	ldr	r3, [r0, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4718      	bx	r3

08003412 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003412:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003416:	4770      	bx	lr

08003418 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003418:	b510      	push	{r4, lr}
 800341a:	4604      	mov	r4, r0
 800341c:	2148      	movs	r1, #72	@ 0x48
 800341e:	f01f fa00 	bl	8022822 <_ZdlPvj>
 8003422:	4620      	mov	r0, r4
 8003424:	bd10      	pop	{r4, pc}

08003426 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003426:	b510      	push	{r4, lr}
 8003428:	4604      	mov	r4, r0
 800342a:	212c      	movs	r1, #44	@ 0x2c
 800342c:	f01f f9f9 	bl	8022822 <_ZdlPvj>
 8003430:	4620      	mov	r0, r4
 8003432:	bd10      	pop	{r4, pc}

08003434 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003434:	b510      	push	{r4, lr}
 8003436:	4604      	mov	r4, r0
 8003438:	21bc      	movs	r1, #188	@ 0xbc
 800343a:	f01f f9f2 	bl	8022822 <_ZdlPvj>
 800343e:	4620      	mov	r0, r4
 8003440:	bd10      	pop	{r4, pc}
	...

08003444 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	4604      	mov	r4, r0
    HAL::initialize();
 8003448:	f00b fd1d 	bl	800ee86 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8003450:	f010 fe0a 	bl	8014068 <_ZN8touchgfx11Application11getInstanceEv>
 8003454:	4601      	mov	r1, r0
 8003456:	4620      	mov	r0, r4
 8003458:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	4908      	ldr	r1, [pc, #32]	@ (8003480 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800345e:	4620      	mov	r0, r4
 8003460:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8003464:	2300      	movs	r3, #0
 8003466:	461a      	mov	r2, r3
 8003468:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800346a:	6863      	ldr	r3, [r4, #4]
 800346c:	4a05      	ldr	r2, [pc, #20]	@ (8003484 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800346e:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003472:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003474:	4a05      	ldr	r2, [pc, #20]	@ (800348c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800347a:	4a05      	ldr	r2, [pc, #20]	@ (8003490 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 800347c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	d0119400 	.word	0xd0119400
 8003484:	2400b0f0 	.word	0x2400b0f0
 8003488:	2400b0a8 	.word	0x2400b0a8
 800348c:	d0000000 	.word	0xd0000000
 8003490:	00119400 	.word	0x00119400

08003494 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4604      	mov	r4, r0
 8003498:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800349a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	f009 f8d0 	bl	800c644 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80034a4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80034a6:	f009 f8f0 	bl	800c68a <osMutexRelease>
        streams[handle].isActive = false;
 80034aa:	2324      	movs	r3, #36	@ 0x24
 80034ac:	fb03 4505 	mla	r5, r3, r5, r4
 80034b0:	2300      	movs	r3, #0
 80034b2:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80034b6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80034ba:	b90b      	cbnz	r3, 80034c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80034bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80034be:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80034c0:	bd38      	pop	{r3, r4, r5, pc}

080034c2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80034c2:	f00b bc91 	b.w	800ede8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080034c6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80034c6:	f00b be00 	b.w	800f0ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080034ca <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80034ca:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80034ce:	b112      	cbz	r2, 80034d6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80034d0:	6803      	ldr	r3, [r0, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	4718      	bx	r3
    }
 80034d6:	4770      	bx	lr

080034d8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80034d8:	4a12      	ldr	r2, [pc, #72]	@ (8003524 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80034da:	6953      	ldr	r3, [r2, #20]
 80034dc:	03db      	lsls	r3, r3, #15
{
 80034de:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80034e0:	d51e      	bpl.n	8003520 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80034e8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80034ec:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80034f0:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80034f4:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80034f8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80034fc:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80034fe:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003502:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003504:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003508:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800350a:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800350e:	d2f9      	bcs.n	8003504 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003510:	3b20      	subs	r3, #32
 8003512:	f113 0f20 	cmn.w	r3, #32
 8003516:	d1f2      	bne.n	80034fe <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003518:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800351c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003520:	bd70      	pop	{r4, r5, r6, pc}
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003528:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800352a:	b131      	cbz	r1, 800353a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800352e:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003532:	4a04      	ldr	r2, [pc, #16]	@ (8003544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003534:	4804      	ldr	r0, [pc, #16]	@ (8003548 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003536:	f01f fceb 	bl	8022f10 <__assert_func>
    }
 800353a:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800353e:	bd08      	pop	{r3, pc}
 8003540:	080246cf 	.word	0x080246cf
 8003544:	080246e3 	.word	0x080246e3
 8003548:	0802486d 	.word	0x0802486d

0800354c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 800354c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800354e:	b131      	cbz	r1, 800355e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003550:	4b06      	ldr	r3, [pc, #24]	@ (800356c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003552:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003556:	4a06      	ldr	r2, [pc, #24]	@ (8003570 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003558:	4806      	ldr	r0, [pc, #24]	@ (8003574 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800355a:	f01f fcd9 	bl	8022f10 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800355e:	6840      	ldr	r0, [r0, #4]
 8003560:	4611      	mov	r1, r2
 8003562:	6803      	ldr	r3, [r0, #0]
    }
 8003564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	4718      	bx	r3
 800356c:	080246cf 	.word	0x080246cf
 8003570:	080248b7 	.word	0x080248b7
 8003574:	0802486d 	.word	0x0802486d

08003578 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003578:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800357a:	b129      	cbz	r1, 8003588 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 800357e:	2179      	movs	r1, #121	@ 0x79
 8003580:	4a03      	ldr	r2, [pc, #12]	@ (8003590 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003582:	4804      	ldr	r0, [pc, #16]	@ (8003594 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003584:	f01f fcc4 	bl	8022f10 <__assert_func>
    }
 8003588:	68c0      	ldr	r0, [r0, #12]
 800358a:	bd08      	pop	{r3, pc}
 800358c:	080246cf 	.word	0x080246cf
 8003590:	08024a65 	.word	0x08024a65
 8003594:	0802486d 	.word	0x0802486d

08003598 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003598:	b510      	push	{r4, lr}
 800359a:	4604      	mov	r4, r0
        assert(handle < no_streams);
 800359c:	b129      	cbz	r1, 80035aa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800359e:	4b19      	ldr	r3, [pc, #100]	@ (8003604 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80035a0:	21a2      	movs	r1, #162	@ 0xa2
 80035a2:	4a19      	ldr	r2, [pc, #100]	@ (8003608 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80035a4:	4819      	ldr	r0, [pc, #100]	@ (800360c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80035a6:	f01f fcb3 	bl	8022f10 <__assert_func>
        switch (cmd)
 80035aa:	2a05      	cmp	r2, #5
 80035ac:	d815      	bhi.n	80035da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80035ae:	e8df f002 	tbb	[pc, r2]
 80035b2:	1103      	.short	0x1103
 80035b4:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80035b8:	6840      	ldr	r0, [r0, #4]
 80035ba:	6803      	ldr	r3, [r0, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	4798      	blx	r3
 80035c0:	b158      	cbz	r0, 80035da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80035c8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80035cc:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80035ce:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80035d2:	e002      	b.n	80035da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80035da:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80035dc:	6203      	str	r3, [r0, #32]
 80035de:	e7f5      	b.n	80035cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80035e0:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80035e8:	e7f0      	b.n	80035cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80035f0:	2301      	movs	r3, #1
 80035f2:	6203      	str	r3, [r0, #32]
            break;
 80035f4:	e7f1      	b.n	80035da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80035f6:	3b00      	subs	r3, #0
 80035f8:	bf18      	it	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003600:	e7eb      	b.n	80035da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003602:	bf00      	nop
 8003604:	080246cf 	.word	0x080246cf
 8003608:	08024c1a 	.word	0x08024c1a
 800360c:	0802486d 	.word	0x0802486d

08003610 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003610:	b510      	push	{r4, lr}
 8003612:	460c      	mov	r4, r1
 8003614:	4611      	mov	r1, r2
 8003616:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003618:	b12c      	cbz	r4, 8003626 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800361a:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 800361c:	2190      	movs	r1, #144	@ 0x90
 800361e:	4a06      	ldr	r2, [pc, #24]	@ (8003638 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003620:	4806      	ldr	r0, [pc, #24]	@ (800363c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003622:	f01f fc75 	bl	8022f10 <__assert_func>
        stream.frameNumber = 0;
 8003626:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003628:	6840      	ldr	r0, [r0, #4]
 800362a:	6803      	ldr	r3, [r0, #0]
    }
 800362c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4718      	bx	r3
 8003634:	080246cf 	.word	0x080246cf
 8003638:	08024dee 	.word	0x08024dee
 800363c:	0802486d 	.word	0x0802486d

08003640 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003640:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003642:	b129      	cbz	r1, 8003650 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003646:	2182      	movs	r1, #130	@ 0x82
 8003648:	4a05      	ldr	r2, [pc, #20]	@ (8003660 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800364a:	4806      	ldr	r0, [pc, #24]	@ (8003664 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 800364c:	f01f fc60 	bl	8022f10 <__assert_func>
        stream.tickCount = 0;
 8003650:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003654:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003658:	bd08      	pop	{r3, pc}
 800365a:	bf00      	nop
 800365c:	080246cf 	.word	0x080246cf
 8003660:	08024fc9 	.word	0x08024fc9
 8003664:	0802486d 	.word	0x0802486d

08003668 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003668:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 800366c:	b510      	push	{r4, lr}
 800366e:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003670:	b153      	cbz	r3, 8003688 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003672:	f04f 31ff 	mov.w	r1, #4294967295
 8003676:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003678:	f008 ffe4 	bl	800c644 <osMutexAcquire>
            firstDrawThisFrame = false;
 800367c:	2300      	movs	r3, #0
 800367e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003682:	2301      	movs	r3, #1
 8003684:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003688:	bd10      	pop	{r4, pc}

0800368a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800368a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800368e:	b11a      	cbz	r2, 8003698 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003690:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003694:	b102      	cbz	r2, 8003698 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003696:	6018      	str	r0, [r3, #0]
        }
    }
 8003698:	4770      	bx	lr
	...

0800369c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 800369c:	b510      	push	{r4, lr}
 800369e:	4604      	mov	r4, r0
 80036a0:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80036a2:	b129      	cbz	r1, 80036b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80036a4:	4b13      	ldr	r3, [pc, #76]	@ (80036f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80036a6:	21d0      	movs	r1, #208	@ 0xd0
 80036a8:	4a13      	ldr	r2, [pc, #76]	@ (80036f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80036aa:	4814      	ldr	r0, [pc, #80]	@ (80036fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80036ac:	f01f fc30 	bl	8022f10 <__assert_func>
        if (stream.isPlaying)
 80036b0:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80036b4:	b133      	cbz	r3, 80036c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80036b6:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80036be:	6963      	ldr	r3, [r4, #20]
 80036c0:	4413      	add	r3, r2
 80036c2:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80036c4:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80036c8:	b90b      	cbnz	r3, 80036ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80036ca:	2001      	movs	r0, #1
    }
 80036cc:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80036ce:	68a3      	ldr	r3, [r4, #8]
 80036d0:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80036d2:	6803      	ldr	r3, [r0, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80036d8:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80036da:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80036de:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d1f1      	bne.n	80036ca <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80036e6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ee      	bne.n	80036cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80036ee:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80036f2:	e7eb      	b.n	80036cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80036f4:	080246cf 	.word	0x080246cf
 80036f8:	08025185 	.word	0x08025185
 80036fc:	0802486d 	.word	0x0802486d
 8003700:	240251f0 	.word	0x240251f0

08003704 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003704:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003706:	4c1a      	ldr	r4, [pc, #104]	@ (8003770 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003708:	4605      	mov	r5, r0
    HAL::endFrame();
 800370a:	f00b fbaf 	bl	800ee6c <_ZN8touchgfx3HAL8endFrameEv>
 800370e:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003712:	b913      	cbnz	r3, 800371a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003714:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003718:	b1ab      	cbz	r3, 8003746 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800371a:	69e1      	ldr	r1, [r4, #28]
 800371c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003720:	4353      	muls	r3, r2
 8003722:	6922      	ldr	r2, [r4, #16]
 8003724:	434a      	muls	r2, r1
 8003726:	4293      	cmp	r3, r2
 8003728:	d30d      	bcc.n	8003746 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800372a:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800372e:	b138      	cbz	r0, 8003740 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003736:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003738:	bf98      	it	ls
 800373a:	f102 32ff 	addls.w	r2, r2, #4294967295
 800373e:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003740:	2301      	movs	r3, #1
 8003742:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003746:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003748:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 800374a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 800374e:	f009 f831 	bl	800c7b4 <osSemaphoreRelease>
        if (uiHasMutex)
 8003752:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003756:	b12b      	cbz	r3, 8003764 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003758:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800375a:	f008 ff96 	bl	800c68a <osMutexRelease>
            uiHasMutex = false;
 800375e:	2300      	movs	r3, #0
 8003760:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003764:	6868      	ldr	r0, [r5, #4]
 8003766:	6803      	ldr	r3, [r0, #0]
}
 8003768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	4718      	bx	r3
 8003770:	2400b0a8 	.word	0x2400b0a8

08003774 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003774:	4b04      	ldr	r3, [pc, #16]	@ (8003788 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003776:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800377a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800377e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003782:	f3bf 8f6f 	isb	sy
}
 8003786:	4770      	bx	lr
 8003788:	e000e100 	.word	0xe000e100

0800378c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378c:	4b02      	ldr	r3, [pc, #8]	@ (8003798 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800378e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000e100 	.word	0xe000e100

0800379c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80037a0:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 80037a4:	b9d8      	cbnz	r0, 80037de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 80037a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80037aa:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 80037ac:	2501      	movs	r5, #1
                streams[i] = Stream();
 80037ae:	60d8      	str	r0, [r3, #12]
 80037b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80037b2:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 80037b6:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80037b8:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 80037bc:	6158      	str	r0, [r3, #20]
 80037be:	6198      	str	r0, [r3, #24]
 80037c0:	61d8      	str	r0, [r3, #28]
 80037c2:	6218      	str	r0, [r3, #32]
 80037c4:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80037c6:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80037c8:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80037cc:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80037d0:	443c      	add	r4, r7
 80037d2:	42a2      	cmp	r2, r4
 80037d4:	d90a      	bls.n	80037ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80037d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80037d8:	2152      	movs	r1, #82	@ 0x52
 80037da:	4a0b      	ldr	r2, [pc, #44]	@ (8003808 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80037dc:	e003      	b.n	80037e6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80037e0:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80037e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80037e6:	480b      	ldr	r0, [pc, #44]	@ (8003814 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80037e8:	f01f fb92 	bl	8022f10 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80037ec:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80037ee:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80037f0:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80037f4:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80037f8:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80037fa:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80037fe:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003800:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003804:	080254dd 	.word	0x080254dd
 8003808:	08025518 	.word	0x08025518
 800380c:	08025326 	.word	0x08025326
 8003810:	08025356 	.word	0x08025356
 8003814:	0802486d 	.word	0x0802486d

08003818 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003818:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800381a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800381c:	4e12      	ldr	r6, [pc, #72]	@ (8003868 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800381e:	4604      	mov	r4, r0
 8003820:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003824:	6003      	str	r3, [r0, #0]
 8003826:	6833      	ldr	r3, [r6, #0]
 8003828:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800382c:	b10a      	cbz	r2, 8003832 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800382e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003830:	b900      	cbnz	r0, 8003834 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003832:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003834:	6803      	ldr	r3, [r0, #0]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	4798      	blx	r3
 800383a:	1e43      	subs	r3, r0, #1
 800383c:	425d      	negs	r5, r3
 800383e:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003840:	6833      	ldr	r3, [r6, #0]
 8003842:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003844:	b130      	cbz	r0, 8003854 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003846:	6803      	ldr	r3, [r0, #0]
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	4798      	blx	r3
 800384c:	2801      	cmp	r0, #1
 800384e:	bf08      	it	eq
 8003850:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003854:	b92d      	cbnz	r5, 8003862 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003856:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003858:	2127      	movs	r1, #39	@ 0x27
 800385a:	4a06      	ldr	r2, [pc, #24]	@ (8003874 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 800385c:	4806      	ldr	r0, [pc, #24]	@ (8003878 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 800385e:	f01f fb57 	bl	8022f10 <__assert_func>
    }
 8003862:	4620      	mov	r0, r4
 8003864:	bd70      	pop	{r4, r5, r6, pc}
 8003866:	bf00      	nop
 8003868:	240251f0 	.word	0x240251f0
 800386c:	0802614c 	.word	0x0802614c
 8003870:	080256bb 	.word	0x080256bb
 8003874:	08025719 	.word	0x08025719
 8003878:	08025752 	.word	0x08025752

0800387c <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 800387c:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 800387e:	4e25      	ldr	r6, [pc, #148]	@ (8003914 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003880:	6835      	ldr	r5, [r6, #0]
 8003882:	f3bf 8f5b 	dmb	ish
 8003886:	f015 0501 	ands.w	r5, r5, #1
 800388a:	d140      	bne.n	800390e <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
 800388c:	4630      	mov	r0, r6
 800388e:	f01e ffca 	bl	8022826 <__cxa_guard_acquire>
 8003892:	2800      	cmp	r0, #0
 8003894:	d03b      	beq.n	800390e <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
class CWRVectorRenderer : public VectorRenderer
 8003896:	4c20      	ldr	r4, [pc, #128]	@ (8003918 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003898:	4b20      	ldr	r3, [pc, #128]	@ (800391c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
 800389a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800389e:	6125      	str	r5, [r4, #16]
 80038a0:	84e5      	strh	r5, [r4, #38]	@ 0x26
 80038a2:	62a5      	str	r5, [r4, #40]	@ 0x28
 80038a4:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 80038a6:	e9c4 3500 	strd	r3, r5, [r4]
 80038aa:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80038ae:	f012 f92e 	bl	8015b0e <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 80038b2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038b6:	f00d fdff 	bl	80114b8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80038ba:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80038bc:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 80038be:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80038c0:	4b18      	ldr	r3, [pc, #96]	@ (8003924 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80038c2:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80038c6:	f7ff ffa7 	bl	8003818 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80038ca:	4b17      	ldr	r3, [pc, #92]	@ (8003928 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80038cc:	4817      	ldr	r0, [pc, #92]	@ (800392c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 80038ce:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80038d2:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80038d4:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80038d8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80038dc:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 80038e0:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80038e4:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80038e8:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 80038f2:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80038f6:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 80038fa:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 80038fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb4>)
 8003900:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003904:	f01f fb22 	bl	8022f4c <atexit>
 8003908:	4630      	mov	r0, r6
 800390a:	f01e ff98 	bl	802283e <__cxa_guard_release>
}
 800390e:	4802      	ldr	r0, [pc, #8]	@ (8003918 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003910:	bd70      	pop	{r4, r5, r6, pc}
 8003912:	bf00      	nop
 8003914:	2400afe8 	.word	0x2400afe8
 8003918:	2400afec 	.word	0x2400afec
 800391c:	08026a8c 	.word	0x08026a8c
 8003920:	0802616c 	.word	0x0802616c
 8003924:	080261e4 	.word	0x080261e4
 8003928:	08026ad8 	.word	0x08026ad8
 800392c:	080033e5 	.word	0x080033e5
 8003930:	08026b10 	.word	0x08026b10

08003934 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003938:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 800393a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800393c:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003946:	f008 ff09 	bl	800c75c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800394a:	f04f 31ff 	mov.w	r1, #4294967295
 800394e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003950:	f008 fe78 	bl	800c644 <osMutexAcquire>
                if (stream.doDecode)
 8003954:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003958:	b343      	cbz	r3, 80039ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 800395a:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 800395c:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003960:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003962:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003966:	f1b8 0f00 	cmp.w	r8, #0
 800396a:	d023      	beq.n	80039b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	4641      	mov	r1, r8
 8003970:	4628      	mov	r0, r5
 8003972:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800397e:	9700      	str	r7, [sp, #0]
 8003980:	4628      	mov	r0, r5
 8003982:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003986:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800398a:	68a1      	ldr	r1, [r4, #8]
 800398c:	47c0      	blx	r8
                    stream.frameCount++;
 800398e:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003990:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003994:	3301      	adds	r3, #1
 8003996:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003998:	b1f0      	cbz	r0, 80039d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	4628      	mov	r0, r5
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	4798      	blx	r3
 80039a2:	3801      	subs	r0, #1
                    stream.doDecode = false;
 80039a4:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80039a6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80039a8:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80039ac:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80039ae:	f008 fe6c 	bl	800c68a <osMutexRelease>
        while (1)
 80039b2:	e7c5      	b.n	8003940 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80039b4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	d0de      	beq.n	8003978 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80039ba:	4628      	mov	r0, r5
 80039bc:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 80039c0:	4798      	blx	r3
 80039c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80039c4:	4401      	add	r1, r0
 80039c6:	4628      	mov	r0, r5
 80039c8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80039ce:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80039d2:	4413      	add	r3, r2
 80039d4:	6123      	str	r3, [r4, #16]
 80039d6:	e7cf      	b.n	8003978 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80039d8:	2001      	movs	r0, #1
 80039da:	e7e3      	b.n	80039a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080039dc <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80039dc:	4801      	ldr	r0, [pc, #4]	@ (80039e4 <videoTaskFunc+0x8>)
{
 80039de:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80039e0:	f7ff ffa8 	bl	8003934 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80039e4:	2400b0a8 	.word	0x2400b0a8

080039e8 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80039e8:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80039ea:	4814      	ldr	r0, [pc, #80]	@ (8003a3c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80039ec:	2500      	movs	r5, #0
 80039ee:	f7fe fbf7 	bl	80021e0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80039f2:	4c13      	ldr	r4, [pc, #76]	@ (8003a40 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80039f4:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80039f6:	462a      	mov	r2, r5
 80039f8:	4629      	mov	r1, r5
 80039fa:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003a02:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003a04:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003a06:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003a08:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003a0c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003a10:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003a14:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003a18:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003a1c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003a20:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003a24:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003a28:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003a2c:	f008 fe4c 	bl	800c6c8 <osSemaphoreNew>
 8003a30:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003a32:	4628      	mov	r0, r5
 8003a34:	f008 fdce 	bl	800c5d4 <osMutexNew>
 8003a38:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
 8003a3c:	2400b0f0 	.word	0x2400b0f0
 8003a40:	2400b0a8 	.word	0x2400b0a8
 8003a44:	08026230 	.word	0x08026230

08003a48 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003a48:	4770      	bx	lr

08003a4a <_ZN23ApplicationFontProviderD0Ev>:
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	2104      	movs	r1, #4
 8003a50:	f01e fee7 	bl	8022822 <_ZdlPvj>
 8003a54:	4620      	mov	r0, r4
 8003a56:	bd10      	pop	{r4, pc}

08003a58 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003a58:	2901      	cmp	r1, #1
{
 8003a5a:	b508      	push	{r3, lr}
    switch (typography)
 8003a5c:	d006      	beq.n	8003a6c <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003a5e:	2902      	cmp	r1, #2
 8003a60:	d008      	beq.n	8003a74 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003a62:	b959      	cbnz	r1, 8003a7c <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003a64:	f000 fd5c 	bl	8004520 <_ZN17TypedTextDatabase8getFontsEv>
 8003a68:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003a6a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003a6c:	f000 fd58 	bl	8004520 <_ZN17TypedTextDatabase8getFontsEv>
 8003a70:	6840      	ldr	r0, [r0, #4]
 8003a72:	e7fa      	b.n	8003a6a <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003a74:	f000 fd54 	bl	8004520 <_ZN17TypedTextDatabase8getFontsEv>
 8003a78:	6880      	ldr	r0, [r0, #8]
 8003a7a:	e7f6      	b.n	8003a6a <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	e7f4      	b.n	8003a6a <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003a80 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003a80:	4800      	ldr	r0, [pc, #0]	@ (8003a84 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003a82:	4770      	bx	lr
 8003a84:	08026280 	.word	0x08026280

08003a88 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003a88:	2003      	movs	r0, #3
 8003a8a:	4770      	bx	lr

08003a8c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003a8c:	b513      	push	{r0, r1, r4, lr}
 8003a8e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003a90:	b151      	cbz	r1, 8003aa8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003a92:	6803      	ldr	r3, [r0, #0]
 8003a94:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003a96:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003a98:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003a9c:	689c      	ldr	r4, [r3, #8]
 8003a9e:	f10d 0303 	add.w	r3, sp, #3
 8003aa2:	47a0      	blx	r4
        return glyph;
    }
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd10      	pop	{r4, pc}
            return 0;
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	e7fb      	b.n	8003aa4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003aac <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003aac:	89c0      	ldrh	r0, [r0, #14]
 8003aae:	4770      	bx	lr

08003ab0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003ab0:	8a00      	ldrh	r0, [r0, #16]
 8003ab2:	4770      	bx	lr

08003ab4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003ab4:	88c0      	ldrh	r0, [r0, #6]
 8003ab6:	4770      	bx	lr

08003ab8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003ab8:	8880      	ldrh	r0, [r0, #4]
 8003aba:	4770      	bx	lr

08003abc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003abc:	7a80      	ldrb	r0, [r0, #10]
    }
 8003abe:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003ac2:	4770      	bx	lr

08003ac4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003ac4:	7a80      	ldrb	r0, [r0, #10]
    }
 8003ac6:	09c0      	lsrs	r0, r0, #7
 8003ac8:	4770      	bx	lr

08003aca <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003aca:	2000      	movs	r0, #0
 8003acc:	4770      	bx	lr
	...

08003ad0 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003ad0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003ad8 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	00000000 	.word	0x00000000

08003adc <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003adc:	4770      	bx	lr

08003ade <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	4604      	mov	r4, r0
    }
 8003ae2:	2108      	movs	r1, #8
 8003ae4:	f01e fe9d 	bl	8022822 <_ZdlPvj>
 8003ae8:	4620      	mov	r0, r4
 8003aea:	bd10      	pop	{r4, pc}

08003aec <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003aec:	4770      	bx	lr

08003aee <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003aee:	4770      	bx	lr

08003af0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003af0:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003af4:	6808      	ldr	r0, [r1, #0]
 8003af6:	6849      	ldr	r1, [r1, #4]
 8003af8:	c303      	stmia	r3!, {r0, r1}
    }
 8003afa:	4770      	bx	lr

08003afc <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003afc:	4770      	bx	lr

08003afe <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003afe:	4770      	bx	lr

08003b00 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003b00:	6041      	str	r1, [r0, #4]
    }
 8003b02:	4770      	bx	lr

08003b04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003b04:	4770      	bx	lr

08003b06 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003b06:	4770      	bx	lr

08003b08 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8003b08:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003b0a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003b0e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003b18:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003b1c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	08003bc9 	.word	0x08003bc9

08003b28 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	7203      	strb	r3, [r0, #8]
    }
 8003b2c:	4770      	bx	lr

08003b2e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003b2e:	4770      	bx	lr

08003b30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003b30:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003b32:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003b34:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003b36:	68c2      	ldr	r2, [r0, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	1054      	asrs	r4, r2, #1
 8003b3c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003b40:	07d2      	lsls	r2, r2, #31
 8003b42:	bf48      	it	mi
 8003b44:	590a      	ldrmi	r2, [r1, r4]
    }
 8003b46:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003b4a:	bf48      	it	mi
 8003b4c:	58d3      	ldrmi	r3, [r2, r3]
 8003b4e:	4718      	bx	r3

08003b50 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003b50:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003b52:	6840      	ldr	r0, [r0, #4]
 8003b54:	b130      	cbz	r0, 8003b64 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	b91a      	cbnz	r2, 8003b62 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003b5a:	68d8      	ldr	r0, [r3, #12]
 8003b5c:	f000 0001 	and.w	r0, r0, #1
 8003b60:	4770      	bx	lr
 8003b62:	2001      	movs	r0, #1
    }
 8003b64:	4770      	bx	lr

08003b66 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003b66:	b510      	push	{r4, lr}
 8003b68:	4604      	mov	r4, r0
 8003b6a:	210c      	movs	r1, #12
 8003b6c:	f01e fe59 	bl	8022822 <_ZdlPvj>
 8003b70:	4620      	mov	r0, r4
 8003b72:	bd10      	pop	{r4, pc}

08003b74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003b74:	b510      	push	{r4, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	2110      	movs	r1, #16
 8003b7a:	f01e fe52 	bl	8022822 <_ZdlPvj>
 8003b7e:	4620      	mov	r0, r4
 8003b80:	bd10      	pop	{r4, pc}

08003b82 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003b82:	b510      	push	{r4, lr}
 8003b84:	4604      	mov	r4, r0
 8003b86:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003b8a:	f01e fe4a 	bl	8022822 <_ZdlPvj>
 8003b8e:	4620      	mov	r0, r4
 8003b90:	bd10      	pop	{r4, pc}

08003b92 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003b92:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003b94:	f010 fa68 	bl	8014068 <_ZN8touchgfx11Application11getInstanceEv>
 8003b98:	6803      	ldr	r3, [r0, #0]
    }
 8003b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	4718      	bx	r3

08003ba2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003ba2:	b510      	push	{r4, lr}
 8003ba4:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003ba6:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003baa:	b158      	cbz	r0, 8003bc4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003bac:	6803      	ldr	r3, [r0, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4798      	blx	r3
 8003bb2:	b138      	cbz	r0, 8003bc4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003bb4:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003bb8:	6803      	ldr	r3, [r0, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003bc4:	bd10      	pop	{r4, pc}
	...

08003bc8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003bc8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003bcc:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003bd0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003bd2:	68b0      	ldr	r0, [r6, #8]
 8003bd4:	6803      	ldr	r3, [r0, #0]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4798      	blx	r3
 8003bda:	f5b0 7fa2 	cmp.w	r0, #324	@ 0x144
 8003bde:	d205      	bcs.n	8003bec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003be0:	4b44      	ldr	r3, [pc, #272]	@ (8003cf4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003be2:	21a3      	movs	r1, #163	@ 0xa3
 8003be4:	4a44      	ldr	r2, [pc, #272]	@ (8003cf8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003be6:	4845      	ldr	r0, [pc, #276]	@ (8003cfc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003be8:	f01f f992 	bl	8022f10 <__assert_func>
 8003bec:	6870      	ldr	r0, [r6, #4]
 8003bee:	6803      	ldr	r3, [r0, #0]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4798      	blx	r3
 8003bf4:	280f      	cmp	r0, #15
 8003bf6:	d803      	bhi.n	8003c00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003bf8:	4b41      	ldr	r3, [pc, #260]	@ (8003d00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003bfa:	21a4      	movs	r1, #164	@ 0xa4
 8003bfc:	4a3e      	ldr	r2, [pc, #248]	@ (8003cf8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003bfe:	e7f2      	b.n	8003be6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003c00:	68f0      	ldr	r0, [r6, #12]
 8003c02:	6803      	ldr	r3, [r0, #0]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4798      	blx	r3
 8003c08:	280b      	cmp	r0, #11
 8003c0a:	d803      	bhi.n	8003c14 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d04 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003c0e:	21a5      	movs	r1, #165	@ 0xa5
 8003c10:	4a39      	ldr	r2, [pc, #228]	@ (8003cf8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003c12:	e7e8      	b.n	8003be6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003c14:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003d0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003c18:	f010 fa26 	bl	8014068 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003c1c:	3004      	adds	r0, #4
 8003c1e:	f010 fa48 	bl	80140b2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003c22:	f8d9 0000 	ldr.w	r0, [r9]
 8003c26:	b110      	cbz	r0, 8003c2e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003c28:	6803      	ldr	r3, [r0, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4798      	blx	r3
    if (*currentTrans)
 8003c2e:	f8d9 0000 	ldr.w	r0, [r9]
 8003c32:	b110      	cbz	r0, 8003c3a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003c34:	6803      	ldr	r3, [r0, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4798      	blx	r3
    if (*currentScreen)
 8003c3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003c3e:	f8d8 0000 	ldr.w	r0, [r8]
 8003c42:	b110      	cbz	r0, 8003c4a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003c44:	6803      	ldr	r3, [r0, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	4798      	blx	r3
    if (*currentPresenter)
 8003c4a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003c4e:	b110      	cbz	r0, 8003c56 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003c50:	6803      	ldr	r3, [r0, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4798      	blx	r3
    if (*currentScreen)
 8003c56:	f8d8 0000 	ldr.w	r0, [r8]
 8003c5a:	b110      	cbz	r0, 8003c62 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003c5c:	6803      	ldr	r3, [r0, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4798      	blx	r3
    if (*currentPresenter)
 8003c62:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003c66:	b110      	cbz	r0, 8003c6e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003c68:	6803      	ldr	r3, [r0, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003c6e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003c70:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003c72:	f04f 0b00 	mov.w	fp, #0
 8003c76:	6803      	ldr	r3, [r0, #0]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	4798      	blx	r3
 8003c7c:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003c7e:	4604      	mov	r4, r0
 8003c80:	f8c0 b004 	str.w	fp, [r0, #4]
 8003c84:	f880 b008 	strb.w	fp, [r0, #8]
 8003c88:	4659      	mov	r1, fp
 8003c8a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003c8c:	68b0      	ldr	r0, [r6, #8]
 8003c8e:	6803      	ldr	r3, [r0, #0]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	4798      	blx	r3
 8003c94:	4605      	mov	r5, r0
 8003c96:	f000 fcf3 	bl	8004680 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003c9a:	6870      	ldr	r0, [r6, #4]
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	6803      	ldr	r3, [r0, #0]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	4798      	blx	r3
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	f000 fcc8 	bl	800463c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003cac:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003cae:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003cb2:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003cb4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003cb8:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003cbc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003cc0:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003cc2:	f8c6 a008 	str.w	sl, [r6, #8]
 8003cc6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003cc8:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003cca:	4798      	blx	r3
    newPresenter->activate();
 8003ccc:	6833      	ldr	r3, [r6, #0]
 8003cce:	4630      	mov	r0, r6
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f012 fb7c 	bl	80163d4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	4620      	mov	r0, r4
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	4798      	blx	r3
    newTransition->invalidate();
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	695b      	ldr	r3, [r3, #20]
}
 8003cea:	b001      	add	sp, #4
 8003cec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4718      	bx	r3
 8003cf2:	bf00      	nop
 8003cf4:	080257c2 	.word	0x080257c2
 8003cf8:	08025850 	.word	0x08025850
 8003cfc:	08025922 	.word	0x08025922
 8003d00:	08025977 	.word	0x08025977
 8003d04:	08025a1a 	.word	0x08025a1a
 8003d08:	08026340 	.word	0x08026340
 8003d0c:	24025238 	.word	0x24025238
 8003d10:	24025234 	.word	0x24025234

08003d14 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003d14:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003d1c:	b10a      	cbz	r2, 8003d22 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003d1e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003d20:	b900      	cbnz	r0, 8003d24 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003d22:	6898      	ldr	r0, [r3, #8]
    }
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	240251f0 	.word	0x240251f0

08003d2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	4617      	mov	r7, r2
 8003d30:	4604      	mov	r4, r0
 8003d32:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003d34:	f010 fa5e 	bl	80141f4 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003d38:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8003d3a:	2500      	movs	r5, #0
        instance = this;
 8003d3c:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003d3e:	4629      	mov	r1, r5
      model(m)
 8003d40:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003d42:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003d44:	4b11      	ldr	r3, [pc, #68]	@ (8003d8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8003d46:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8003d4a:	4b11      	ldr	r3, [pc, #68]	@ (8003d90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003d52:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003d54:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8003d58:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003d5a:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003d5e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 fb91 	bl	8004488 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003d66:	f7ff ffd5 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 8003d6a:	f018 feee 	bl	801cb4a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003d6e:	f7ff ffd1 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 8003d72:	f018 ff61 	bl	801cc38 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8003d76:	f7ff ffcd 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 8003d7a:	f018 ff69 	bl	801cc50 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8003d7e:	4620      	mov	r0, r4
 8003d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d82:	bf00      	nop
 8003d84:	24025244 	.word	0x24025244
 8003d88:	080262ec 	.word	0x080262ec
 8003d8c:	080262d4 	.word	0x080262d4
 8003d90:	240251f0 	.word	0x240251f0

08003d94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003d94:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003d96:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003d9a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003da4:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003da8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	08003bc9 	.word	0x08003bc9

08003db4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003db4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003db6:	4770      	bx	lr

08003db8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003db8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003dba:	4770      	bx	lr

08003dbc <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003dbc:	4770      	bx	lr

08003dbe <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
 8003dbe:	880b      	ldrh	r3, [r1, #0]
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003dc0:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 8003dc2:	b29b      	uxth	r3, r3
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003dc4:	0ad2      	lsrs	r2, r2, #11
{
 8003dc6:	b510      	push	{r4, lr}
    offset |= dataOffset[1] << 16;
 8003dc8:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003dca:	69c1      	ldr	r1, [r0, #28]
    offset |= dataOffset[1] << 16;
 8003dcc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    return pixels + offset;
 8003dd0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 8003dd4:	4418      	add	r0, r3
 8003dd6:	bd10      	pop	{r4, pc}

08003dd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003ddc:	b1ba      	cbz	r2, 8003e0e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003dde:	7b10      	ldrb	r0, [r2, #12]
 8003de0:	b168      	cbz	r0, 8003dfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003de2:	7b53      	ldrb	r3, [r2, #13]
 8003de4:	7ad2      	ldrb	r2, [r2, #11]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003dec:	431a      	orrs	r2, r3
 8003dee:	6a23      	ldr	r3, [r4, #32]
 8003df0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	428a      	cmp	r2, r1
 8003df8:	d102      	bne.n	8003e00 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003dfa:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003dfe:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003e00:	d805      	bhi.n	8003e0e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003e02:	3801      	subs	r0, #1
 8003e04:	3304      	adds	r3, #4
 8003e06:	b280      	uxth	r0, r0
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d1f3      	bne.n	8003df4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003e0c:	e7f7      	b.n	8003dfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003e0e:	2000      	movs	r0, #0
 8003e10:	e7f5      	b.n	8003dfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003e12 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e12:	b510      	push	{r4, lr}
 8003e14:	4604      	mov	r4, r0
 8003e16:	212c      	movs	r1, #44	@ 0x2c
 8003e18:	f01e fd03 	bl	8022822 <_ZdlPvj>
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	bd10      	pop	{r4, pc}

08003e20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003e20:	b530      	push	{r4, r5, lr}
 8003e22:	b08b      	sub	sp, #44	@ 0x2c
 8003e24:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003e26:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003e2a:	9508      	str	r5, [sp, #32]
 8003e2c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003e30:	9507      	str	r5, [sp, #28]
 8003e32:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003e36:	9506      	str	r5, [sp, #24]
 8003e38:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003e3c:	9505      	str	r5, [sp, #20]
 8003e3e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003e42:	9504      	str	r5, [sp, #16]
 8003e44:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003e48:	9503      	str	r5, [sp, #12]
 8003e4a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003e4e:	9502      	str	r5, [sp, #8]
 8003e50:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003e54:	9501      	str	r5, [sp, #4]
 8003e56:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003e5a:	9500      	str	r5, [sp, #0]
 8003e5c:	f011 ff14 	bl	8015c88 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003e60:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003e62:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003e64:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003e66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003e68:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003e6a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003e6c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003e6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003e70:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003e72:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003e74:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003e76:	b00b      	add	sp, #44	@ 0x2c
 8003e78:	bd30      	pop	{r4, r5, pc}
 8003e7a:	bf00      	nop
 8003e7c:	08026364 	.word	0x08026364

08003e80 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003e80:	4770      	bx	lr

08003e82 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003e82:	4770      	bx	lr

08003e84 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003e84:	4770      	bx	lr

08003e86 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003e86:	4770      	bx	lr

08003e88 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003e88:	4770      	bx	lr

08003e8a <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8003e8a:	b530      	push	{r4, r5, lr}
 8003e8c:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8003e8e:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8003e90:	4604      	mov	r4, r0
        rect.width = width;
 8003e92:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8003e94:	466d      	mov	r5, sp
 8003e96:	4601      	mov	r1, r0
 8003e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e9c:	343c      	adds	r4, #60	@ 0x3c
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	4798      	blx	r3
 8003ea2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003eaa:	b005      	add	sp, #20
 8003eac:	bd30      	pop	{r4, r5, pc}

08003eae <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8003eae:	b530      	push	{r4, r5, lr}
 8003eb0:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003eb2:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003eb4:	4604      	mov	r4, r0
        rect.height = height;
 8003eb6:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8003eb8:	466d      	mov	r5, sp
 8003eba:	4601      	mov	r1, r0
 8003ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ec0:	343c      	adds	r4, #60	@ 0x3c
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	4798      	blx	r3
 8003ec6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003ece:	b005      	add	sp, #20
 8003ed0:	bd30      	pop	{r4, r5, pc}

08003ed2 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	8002      	strh	r2, [r0, #0]
 8003ed6:	8042      	strh	r2, [r0, #2]
 8003ed8:	8082      	strh	r2, [r0, #4]
 8003eda:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003edc:	4770      	bx	lr

08003ede <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003ede:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8003ee2:	4770      	bx	lr

08003ee4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003ee4:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003ee6:	b570      	push	{r4, r5, r6, lr}
 8003ee8:	4604      	mov	r4, r0
        setX(x);
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003eec:	4615      	mov	r5, r2
        setX(x);
 8003eee:	4798      	blx	r3
        setBaselineY(baselineY);
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8003ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8003efc:	4718      	bx	r3

08003efe <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003efe:	2000      	movs	r0, #0
 8003f00:	4770      	bx	lr

08003f02 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003f02:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8003f04:	4770      	bx	lr

08003f06 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003f06:	4770      	bx	lr

08003f08 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003f08:	4770      	bx	lr

08003f0a <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003f0a:	4770      	bx	lr

08003f0c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	4604      	mov	r4, r0
 8003f10:	214c      	movs	r1, #76	@ 0x4c
 8003f12:	f01e fc86 	bl	8022822 <_ZdlPvj>
 8003f16:	4620      	mov	r0, r4
 8003f18:	bd10      	pop	{r4, pc}

08003f1a <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003f1a:	b510      	push	{r4, lr}
 8003f1c:	4604      	mov	r4, r0
}
 8003f1e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8003f22:	f01e fc7e 	bl	8022822 <_ZdlPvj>
 8003f26:	4620      	mov	r0, r4
 8003f28:	bd10      	pop	{r4, pc}

08003f2a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8003f2a:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003f2c:	f7ff facd 	bl	80034ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003f30:	bd08      	pop	{r3, pc}
	...

08003f34 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003f34:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003f36:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003f38:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8003f3a:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003f3c:	4b11      	ldr	r3, [pc, #68]	@ (8003f84 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003f3e:	b28d      	uxth	r5, r1
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	b92b      	cbnz	r3, 8003f50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003f44:	4b10      	ldr	r3, [pc, #64]	@ (8003f88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8003f46:	216c      	movs	r1, #108	@ 0x6c
 8003f48:	4a10      	ldr	r2, [pc, #64]	@ (8003f8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003f4a:	4811      	ldr	r0, [pc, #68]	@ (8003f90 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003f4c:	f01e ffe0 	bl	8022f10 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003f50:	4910      	ldr	r1, [pc, #64]	@ (8003f94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8003f52:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003f54:	8809      	ldrh	r1, [r1, #0]
 8003f56:	4291      	cmp	r1, r2
 8003f58:	d803      	bhi.n	8003f62 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f98 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003f5c:	216d      	movs	r1, #109	@ 0x6d
 8003f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8003f8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003f60:	e7f3      	b.n	8003f4a <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003f62:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003f6e:	6803      	ldr	r3, [r0, #0]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	4798      	blx	r3
 8003f74:	1a29      	subs	r1, r5, r0
 8003f76:	4633      	mov	r3, r6
 8003f78:	4620      	mov	r0, r4
 8003f7a:	b209      	sxth	r1, r1
    }
 8003f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003f80:	4718      	bx	r3
 8003f82:	bf00      	nop
 8003f84:	24025248 	.word	0x24025248
 8003f88:	08025abd 	.word	0x08025abd
 8003f8c:	08025aff 	.word	0x08025aff
 8003f90:	08025b3a 	.word	0x08025b3a
 8003f94:	2402524c 	.word	0x2402524c
 8003f98:	08025b8f 	.word	0x08025b8f
 8003f9c:	24025250 	.word	0x24025250

08003fa0 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8003fa6:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003fa8:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8003fac:	4770      	bx	lr

08003fae <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003fae:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	4604      	mov	r4, r0
        setX(x);
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003fb6:	4615      	mov	r5, r2
        setX(x);
 8003fb8:	4798      	blx	r3
        setY(y);
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003fc6:	4718      	bx	r3

08003fc8 <_ZN8touchgfx6WidgetC1Ev>:
 8003fc8:	2200      	movs	r2, #0
 8003fca:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003fce:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003fd2:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003fd6:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8003fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fde:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8003fe0:	4a01      	ldr	r2, [pc, #4]	@ (8003fe8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003fe2:	6002      	str	r2, [r0, #0]
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	080263cc 	.word	0x080263cc

08003fec <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4604      	mov	r4, r0
 8003ff0:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003ff2:	2226      	movs	r2, #38	@ 0x26
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	f01f fa27 	bl	8023448 <memset>
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f7ff ffe4 	bl	8003fc8 <_ZN8touchgfx6WidgetC1Ev>
 8004000:	4b06      	ldr	r3, [pc, #24]	@ (800401c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	882b      	ldrh	r3, [r5, #0]
 800400a:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800400c:	23ff      	movs	r3, #255	@ 0xff
 800400e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8004012:	f00d fc40 	bl	8011896 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004016:	4620      	mov	r0, r4
 8004018:	bd38      	pop	{r3, r4, r5, pc}
 800401a:	bf00      	nop
 800401c:	08026c10 	.word	0x08026c10

08004020 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004024:	4604      	mov	r4, r0
 8004026:	b087      	sub	sp, #28
        : presenter(0)
 8004028:	2500      	movs	r5, #0
 800402a:	f012 f827 	bl	801607c <_ZN8touchgfx6ScreenC1Ev>
 800402e:	4626      	mov	r6, r4
 8004030:	4b73      	ldr	r3, [pc, #460]	@ (8004200 <_ZN15Screen1ViewBaseC1Ev+0x1e0>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004032:	2226      	movs	r2, #38	@ 0x26
 8004034:	4629      	mov	r1, r5
 8004036:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8004038:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 800403c:	f846 3b40 	str.w	r3, [r6], #64
 8004040:	4630      	mov	r0, r6
 8004042:	f01f fa01 	bl	8023448 <memset>
 8004046:	4630      	mov	r0, r6
 8004048:	f7ff ffbe 	bl	8003fc8 <_ZN8touchgfx6WidgetC1Ev>
 800404c:	4b6d      	ldr	r3, [pc, #436]	@ (8004204 <_ZN15Screen1ViewBaseC1Ev+0x1e4>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800404e:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 8004052:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8004056:	6423      	str	r3, [r4, #64]	@ 0x40
 8004058:	23ff      	movs	r3, #255	@ 0xff
 800405a:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 800405e:	a904      	add	r1, sp, #16
 8004060:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8004064:	4658      	mov	r0, fp
        : color(col)
 8004066:	66a5      	str	r5, [r4, #104]	@ 0x68
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004068:	f104 07f0 	add.w	r7, r4, #240	@ 0xf0
 800406c:	f8ad 8010 	strh.w	r8, [sp, #16]
 8004070:	f7ff ffbc 	bl	8003fec <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004074:	a904      	add	r1, sp, #16
 8004076:	4650      	mov	r0, sl
 8004078:	f8ad 8010 	strh.w	r8, [sp, #16]
 800407c:	f7ff ffb6 	bl	8003fec <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004080:	a904      	add	r1, sp, #16
 8004082:	4648      	mov	r0, r9
 8004084:	f8ad 8010 	strh.w	r8, [sp, #16]
 8004088:	f7ff ffb0 	bl	8003fec <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800408c:	2226      	movs	r2, #38	@ 0x26
 800408e:	4629      	mov	r1, r5
 8004090:	4638      	mov	r0, r7
 8004092:	f01f f9d9 	bl	8023448 <memset>
 8004096:	4638      	mov	r0, r7
 8004098:	f7ff ff96 	bl	8003fc8 <_ZN8touchgfx6WidgetC1Ev>
        : typedTextId(id)
 800409c:	4b5a      	ldr	r3, [pc, #360]	@ (8004208 <_ZN15Screen1ViewBaseC1Ev+0x1e8>)
        setXY(x, y);
 800409e:	462a      	mov	r2, r5
 80040a0:	4630      	mov	r0, r6
 80040a2:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
 80040a6:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 80040aa:	4629      	mov	r1, r5
 80040ac:	f8a4 811c 	strh.w	r8, [r4, #284]	@ 0x11c
 80040b0:	f8c4 3124 	str.w	r3, [r4, #292]	@ 0x124
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80040b4:	f104 0804 	add.w	r8, r4, #4
        : TextAreaWithWildcardBase(), wc1(0)
 80040b8:	4b54      	ldr	r3, [pc, #336]	@ (800420c <_ZN15Screen1ViewBaseC1Ev+0x1ec>)
 80040ba:	f8c4 5120 	str.w	r5, [r4, #288]	@ 0x120
 80040be:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	f8a4 5128 	strh.w	r5, [r4, #296]	@ 0x128
 80040ca:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 80040ce:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
              text(0)
 80040d2:	e9c4 354c 	strd	r3, r5, [r4, #304]	@ 0x130
 80040d6:	f7ff ff6a 	bl	8003fae <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80040da:	4630      	mov	r0, r6
 80040dc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80040e0:	f7ff f92e 	bl	8003340 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80040e4:	4630      	mov	r0, r6
 80040e6:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80040ea:	f7ff f92b 	bl	8003344 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80040ee:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80040f2:	4631      	mov	r1, r6
 80040f4:	4640      	mov	r0, r8
 80040f6:	66a2      	str	r2, [r4, #104]	@ 0x68
 80040f8:	2601      	movs	r6, #1
 80040fa:	f00a fbdb 	bl	800e8b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-161, -80);
 80040fe:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 8004102:	f06f 01a0 	mvn.w	r1, #160	@ 0xa0
 8004106:	4658      	mov	r0, fp
 8004108:	f7ff ff51 	bl	8003fae <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_SHATTERED_RAIN_DARK_ID));
 800410c:	a904      	add	r1, sp, #16
 800410e:	4658      	mov	r0, fp
 8004110:	f8ad 5010 	strh.w	r5, [sp, #16]
 8004114:	f00d fbbf 	bl	8011896 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004118:	4659      	mov	r1, fp
 800411a:	4640      	mov	r0, r8
 800411c:	f00a fbca 	bl	800e8b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    LightOFF.setXY(325, 165);
 8004120:	22a5      	movs	r2, #165	@ 0xa5
 8004122:	f240 1145 	movw	r1, #325	@ 0x145
 8004126:	4650      	mov	r0, sl
 8004128:	f7ff ff41 	bl	8003fae <_ZN8touchgfx8Drawable5setXYEss>
 800412c:	2202      	movs	r2, #2
    LightOFF.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_LIGHTBULB_150_150_FFFFFF_SVG_ID));
 800412e:	a904      	add	r1, sp, #16
 8004130:	4650      	mov	r0, sl
 8004132:	f8ad 2010 	strh.w	r2, [sp, #16]
 8004136:	f00d fbae 	bl	8011896 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800413a:	4651      	mov	r1, sl
 800413c:	4640      	mov	r0, r8
 800413e:	f00a fbb9 	bl	800e8b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    LightON.setXY(325, 165);
 8004142:	22a5      	movs	r2, #165	@ 0xa5
 8004144:	4648      	mov	r0, r9
 8004146:	f240 1145 	movw	r1, #325	@ 0x145
 800414a:	f7ff ff30 	bl	8003fae <_ZN8touchgfx8Drawable5setXYEss>
    LightON.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_LIGHTBULB_150_150_FA0000_SVG_ID));
 800414e:	4648      	mov	r0, r9
 8004150:	a904      	add	r1, sp, #16
 8004152:	f8ad 6010 	strh.w	r6, [sp, #16]
 8004156:	f00d fb9e 	bl	8011896 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800415a:	4649      	mov	r1, r9
 800415c:	4640      	mov	r0, r8
        visible = vis;
 800415e:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 8004162:	f00a fba7 	bl	800e8b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(322, 105);
 8004166:	2269      	movs	r2, #105	@ 0x69
 8004168:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800416c:	4638      	mov	r0, r7
 800416e:	f7ff ff1e 	bl	8003fae <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004172:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8004176:	46e9      	mov	r9, sp
 8004178:	4639      	mov	r1, r7
        color = newColor;
 800417a:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
        boundingArea = calculateBoundingArea();
 800417e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
 8004182:	4648      	mov	r0, r9
        linespace = space;
 8004184:	f8a4 5124 	strh.w	r5, [r4, #292]	@ 0x124
        boundingArea = calculateBoundingArea();
 8004188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800418c:	4798      	blx	r3
 800418e:	f504 7396 	add.w	r3, r4, #300	@ 0x12c
 8004192:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8004196:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800419a:	4b1d      	ldr	r3, [pc, #116]	@ (8004210 <_ZN15Screen1ViewBaseC1Ev+0x1f0>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_KJ5A).getText());
 800419c:	f504 799e 	add.w	r9, r4, #316	@ 0x13c
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	b92b      	cbnz	r3, 80041b0 <_ZN15Screen1ViewBaseC1Ev+0x190>
 80041a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004214 <_ZN15Screen1ViewBaseC1Ev+0x1f4>)
 80041a6:	2160      	movs	r1, #96	@ 0x60
 80041a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004218 <_ZN15Screen1ViewBaseC1Ev+0x1f8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80041aa:	481c      	ldr	r0, [pc, #112]	@ (800421c <_ZN15Screen1ViewBaseC1Ev+0x1fc>)
 80041ac:	f01e feb0 	bl	8022f10 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80041b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004220 <_ZN15Screen1ViewBaseC1Ev+0x200>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b91b      	cbnz	r3, 80041be <_ZN15Screen1ViewBaseC1Ev+0x19e>
 80041b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004224 <_ZN15Screen1ViewBaseC1Ev+0x204>)
 80041b8:	2161      	movs	r1, #97	@ 0x61
 80041ba:	4a17      	ldr	r2, [pc, #92]	@ (8004218 <_ZN15Screen1ViewBaseC1Ev+0x1f8>)
 80041bc:	e7f5      	b.n	80041aa <_ZN15Screen1ViewBaseC1Ev+0x18a>
        return texts->getText(typedTextId);
 80041be:	4b1a      	ldr	r3, [pc, #104]	@ (8004228 <_ZN15Screen1ViewBaseC1Ev+0x208>)
 80041c0:	4629      	mov	r1, r5
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	f000 f99c 	bl	8004500 <_ZNK8touchgfx5Texts7getTextEt>
 80041c8:	4a18      	ldr	r2, [pc, #96]	@ (800422c <_ZN15Screen1ViewBaseC1Ev+0x20c>)
 80041ca:	4603      	mov	r3, r0
 80041cc:	2104      	movs	r1, #4
 80041ce:	4648      	mov	r0, r9
 80041d0:	f013 fbee 	bl	80179b0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.resizeToCurrentText();
 80041d4:	4638      	mov	r0, r7
        wc1 = value;
 80041d6:	f8c4 9138 	str.w	r9, [r4, #312]	@ 0x138
 80041da:	f00d fa75 	bl	80116c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 80041de:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <_ZN15Screen1ViewBaseC1Ev+0x1e8>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HKWC));
 80041e0:	a904      	add	r1, sp, #16
 80041e2:	4638      	mov	r0, r7
 80041e4:	9304      	str	r3, [sp, #16]
 80041e6:	f8ad 6014 	strh.w	r6, [sp, #20]
 80041ea:	f00d fa8d 	bl	8011708 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80041ee:	4640      	mov	r0, r8
 80041f0:	4639      	mov	r1, r7
 80041f2:	f00a fb5f 	bl	800e8b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80041f6:	4620      	mov	r0, r4
 80041f8:	b007      	add	sp, #28
 80041fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fe:	bf00      	nop
 8004200:	080264c4 	.word	0x080264c4
 8004204:	08026ba8 	.word	0x08026ba8
 8004208:	080262c4 	.word	0x080262c4
 800420c:	08026434 	.word	0x08026434
 8004210:	24025248 	.word	0x24025248
 8004214:	08025abd 	.word	0x08025abd
 8004218:	08025bcd 	.word	0x08025bcd
 800421c:	08025b3a 	.word	0x08025b3a
 8004220:	2402524c 	.word	0x2402524c
 8004224:	08025b8f 	.word	0x08025b8f
 8004228:	24025254 	.word	0x24025254
 800422c:	08025c18 	.word	0x08025c18

08004230 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004230:	4770      	bx	lr
	...

08004234 <_Z23getFont_verdana_10_4bppv>:
{
 8004234:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004236:	4d16      	ldr	r5, [pc, #88]	@ (8004290 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8004238:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800423a:	682c      	ldr	r4, [r5, #0]
 800423c:	f3bf 8f5b 	dmb	ish
 8004240:	f014 0401 	ands.w	r4, r4, #1
 8004244:	d120      	bne.n	8004288 <_Z23getFont_verdana_10_4bppv+0x54>
 8004246:	4628      	mov	r0, r5
 8004248:	f01e faed 	bl	8022826 <__cxa_guard_acquire>
 800424c:	b1e0      	cbz	r0, 8004288 <_Z23getFont_verdana_10_4bppv+0x54>
 800424e:	233f      	movs	r3, #63	@ 0x3f
 8004250:	2201      	movs	r2, #1
 8004252:	4910      	ldr	r1, [pc, #64]	@ (8004294 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004254:	9309      	str	r3, [sp, #36]	@ 0x24
 8004256:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004258:	4810      	ldr	r0, [pc, #64]	@ (800429c <_Z23getFont_verdana_10_4bppv+0x68>)
 800425a:	9308      	str	r3, [sp, #32]
 800425c:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800425e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004260:	9405      	str	r4, [sp, #20]
 8004262:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004266:	2304      	movs	r3, #4
 8004268:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800426c:	230a      	movs	r3, #10
 800426e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004278:	f7ff fdd2 	bl	8003e20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800427c:	4809      	ldr	r0, [pc, #36]	@ (80042a4 <_Z23getFont_verdana_10_4bppv+0x70>)
 800427e:	f01e fe65 	bl	8022f4c <atexit>
 8004282:	4628      	mov	r0, r5
 8004284:	f01e fadb 	bl	802283e <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004288:	4804      	ldr	r0, [pc, #16]	@ (800429c <_Z23getFont_verdana_10_4bppv+0x68>)
 800428a:	b00f      	add	sp, #60	@ 0x3c
 800428c:	bd30      	pop	{r4, r5, pc}
 800428e:	bf00      	nop
 8004290:	2400b138 	.word	0x2400b138
 8004294:	08028dac 	.word	0x08028dac
 8004298:	08029300 	.word	0x08029300
 800429c:	2400b13c 	.word	0x2400b13c
 80042a0:	080294ac 	.word	0x080294ac
 80042a4:	08004231 	.word	0x08004231

080042a8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80042a8:	4770      	bx	lr
	...

080042ac <_Z23getFont_verdana_20_4bppv>:
{
 80042ac:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80042ae:	4d17      	ldr	r5, [pc, #92]	@ (800430c <_Z23getFont_verdana_20_4bppv+0x60>)
{
 80042b0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80042b2:	682c      	ldr	r4, [r5, #0]
 80042b4:	f3bf 8f5b 	dmb	ish
 80042b8:	f014 0401 	ands.w	r4, r4, #1
 80042bc:	d122      	bne.n	8004304 <_Z23getFont_verdana_20_4bppv+0x58>
 80042be:	4628      	mov	r0, r5
 80042c0:	f01e fab1 	bl	8022826 <__cxa_guard_acquire>
 80042c4:	b1f0      	cbz	r0, 8004304 <_Z23getFont_verdana_20_4bppv+0x58>
 80042c6:	233f      	movs	r3, #63	@ 0x3f
 80042c8:	225f      	movs	r2, #95	@ 0x5f
 80042ca:	4911      	ldr	r1, [pc, #68]	@ (8004310 <_Z23getFont_verdana_20_4bppv+0x64>)
 80042cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ce:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <_Z23getFont_verdana_20_4bppv+0x68>)
 80042d0:	4811      	ldr	r0, [pc, #68]	@ (8004318 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80042d2:	9308      	str	r3, [sp, #32]
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <_Z23getFont_verdana_20_4bppv+0x70>)
 80042d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80042d8:	9307      	str	r3, [sp, #28]
 80042da:	2301      	movs	r3, #1
 80042dc:	9401      	str	r4, [sp, #4]
 80042de:	9304      	str	r3, [sp, #16]
 80042e0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80042e4:	2304      	movs	r3, #4
 80042e6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80042ea:	2314      	movs	r3, #20
 80042ec:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	2318      	movs	r3, #24
 80042f4:	f7ff fd94 	bl	8003e20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80042f8:	4809      	ldr	r0, [pc, #36]	@ (8004320 <_Z23getFont_verdana_20_4bppv+0x74>)
 80042fa:	f01e fe27 	bl	8022f4c <atexit>
 80042fe:	4628      	mov	r0, r5
 8004300:	f01e fa9d 	bl	802283e <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8004304:	4804      	ldr	r0, [pc, #16]	@ (8004318 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004306:	b00f      	add	sp, #60	@ 0x3c
 8004308:	bd30      	pop	{r4, r5, pc}
 800430a:	bf00      	nop
 800430c:	2400b168 	.word	0x2400b168
 8004310:	08028dbc 	.word	0x08028dbc
 8004314:	08029304 	.word	0x08029304
 8004318:	2400b16c 	.word	0x2400b16c
 800431c:	080294b0 	.word	0x080294b0
 8004320:	080042a9 	.word	0x080042a9

08004324 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004324:	4770      	bx	lr
	...

08004328 <_Z23getFont_verdana_40_4bppv>:
{
 8004328:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800432a:	4d16      	ldr	r5, [pc, #88]	@ (8004384 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 800432c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800432e:	682c      	ldr	r4, [r5, #0]
 8004330:	f3bf 8f5b 	dmb	ish
 8004334:	f014 0401 	ands.w	r4, r4, #1
 8004338:	d120      	bne.n	800437c <_Z23getFont_verdana_40_4bppv+0x54>
 800433a:	4628      	mov	r0, r5
 800433c:	f01e fa73 	bl	8022826 <__cxa_guard_acquire>
 8004340:	b1e0      	cbz	r0, 800437c <_Z23getFont_verdana_40_4bppv+0x54>
 8004342:	233f      	movs	r3, #63	@ 0x3f
 8004344:	2201      	movs	r2, #1
 8004346:	4910      	ldr	r1, [pc, #64]	@ (8004388 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004348:	9309      	str	r3, [sp, #36]	@ 0x24
 800434a:	4b10      	ldr	r3, [pc, #64]	@ (800438c <_Z23getFont_verdana_40_4bppv+0x64>)
 800434c:	4810      	ldr	r0, [pc, #64]	@ (8004390 <_Z23getFont_verdana_40_4bppv+0x68>)
 800434e:	9308      	str	r3, [sp, #32]
 8004350:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004352:	940a      	str	r4, [sp, #40]	@ 0x28
 8004354:	9405      	str	r4, [sp, #20]
 8004356:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800435a:	2304      	movs	r3, #4
 800435c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004360:	2328      	movs	r3, #40	@ 0x28
 8004362:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800436c:	f7ff fd58 	bl	8003e20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004370:	4809      	ldr	r0, [pc, #36]	@ (8004398 <_Z23getFont_verdana_40_4bppv+0x70>)
 8004372:	f01e fdeb 	bl	8022f4c <atexit>
 8004376:	4628      	mov	r0, r5
 8004378:	f01e fa61 	bl	802283e <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800437c:	4804      	ldr	r0, [pc, #16]	@ (8004390 <_Z23getFont_verdana_40_4bppv+0x68>)
 800437e:	b00f      	add	sp, #60	@ 0x3c
 8004380:	bd30      	pop	{r4, r5, pc}
 8004382:	bf00      	nop
 8004384:	2400b198 	.word	0x2400b198
 8004388:	080292f0 	.word	0x080292f0
 800438c:	080294a8 	.word	0x080294a8
 8004390:	2400b19c 	.word	0x2400b19c
 8004394:	080294b4 	.word	0x080294b4
 8004398:	08004325 	.word	0x08004325

0800439c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 800439c:	2000      	movs	r0, #0
 800439e:	4770      	bx	lr

080043a0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80043a0:	2000      	movs	r0, #0
 80043a2:	4770      	bx	lr

080043a4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80043a4:	b40e      	push	{r1, r2, r3}
 80043a6:	b503      	push	{r0, r1, lr}
 80043a8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80043aa:	2100      	movs	r1, #0
{
 80043ac:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80043b0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80043b2:	f010 fee7 	bl	8015184 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80043b6:	b002      	add	sp, #8
 80043b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043bc:	b003      	add	sp, #12
 80043be:	4770      	bx	lr

080043c0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80043c0:	b40c      	push	{r2, r3}
 80043c2:	b507      	push	{r0, r1, r2, lr}
 80043c4:	ab04      	add	r3, sp, #16
 80043c6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80043ca:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80043cc:	f010 feda 	bl	8015184 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80043d0:	b003      	add	sp, #12
 80043d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d6:	b002      	add	sp, #8
 80043d8:	4770      	bx	lr
	...

080043dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80043dc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80043de:	b510      	push	{r4, lr}
 80043e0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80043e2:	b373      	cbz	r3, 8004442 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80043e4:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80043e6:	b92b      	cbnz	r3, 80043f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80043e8:	4b18      	ldr	r3, [pc, #96]	@ (800444c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80043ea:	21c5      	movs	r1, #197	@ 0xc5
 80043ec:	4a18      	ldr	r2, [pc, #96]	@ (8004450 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80043ee:	4819      	ldr	r0, [pc, #100]	@ (8004454 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80043f0:	f01e fd8e 	bl	8022f10 <__assert_func>
            return buffer[pos];
 80043f4:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80043f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80043fa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80043fc:	b30b      	cbz	r3, 8004442 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80043fe:	f012 fd2f 	bl	8016e60 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004402:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004404:	2b01      	cmp	r3, #1
 8004406:	d803      	bhi.n	8004410 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004408:	4b13      	ldr	r3, [pc, #76]	@ (8004458 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800440a:	21cb      	movs	r1, #203	@ 0xcb
 800440c:	4a13      	ldr	r2, [pc, #76]	@ (800445c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800440e:	e7ee      	b.n	80043ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004410:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004412:	f640 103f 	movw	r0, #2367	@ 0x93f
 8004416:	1c53      	adds	r3, r2, #1
 8004418:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800441a:	2b09      	cmp	r3, #9
 800441c:	4619      	mov	r1, r3
 800441e:	bf88      	it	hi
 8004420:	f1a3 010a 	subhi.w	r1, r3, #10
 8004424:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004428:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800442a:	4281      	cmp	r1, r0
 800442c:	d109      	bne.n	8004442 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800442e:	2b0a      	cmp	r3, #10
 8004430:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004434:	bf28      	it	cs
 8004436:	2300      	movcs	r3, #0
            return buffer[pos];
 8004438:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 800443a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800443e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8004440:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8004442:	4620      	mov	r0, r4
}
 8004444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004448:	f012 bc0c 	b.w	8016c64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800444c:	08025c1b 	.word	0x08025c1b
 8004450:	08025c24 	.word	0x08025c24
 8004454:	08025ccf 	.word	0x08025ccf
 8004458:	08025d27 	.word	0x08025d27
 800445c:	08025d35 	.word	0x08025d35

08004460 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004460:	f012 bbc9 	b.w	8016bf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004464 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004464:	b510      	push	{r4, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	ac02      	add	r4, sp, #8
 800446a:	e884 0006 	stmia.w	r4, {r1, r2}
 800446e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8004470:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004472:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004474:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	9b08      	ldr	r3, [sp, #32]
 800447e:	f00f f991 	bl	80137a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004482:	b006      	add	sp, #24
 8004484:	bd10      	pop	{r4, pc}
	...

08004488 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004488:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800448a:	bb18      	cbnz	r0, 80044d4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800448c:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800448e:	4813      	ldr	r0, [pc, #76]	@ (80044dc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004490:	681c      	ldr	r4, [r3, #0]
 8004492:	4913      	ldr	r1, [pc, #76]	@ (80044e0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004494:	b1b4      	cbz	r4, 80044c4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004496:	6822      	ldr	r2, [r4, #0]
 8004498:	4422      	add	r2, r4
 800449a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800449c:	6862      	ldr	r2, [r4, #4]
 800449e:	4422      	add	r2, r4
 80044a0:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80044a2:	68a2      	ldr	r2, [r4, #8]
 80044a4:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80044a6:	4b0f      	ldr	r3, [pc, #60]	@ (80044e4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80044ac:	f000 f838 	bl	8004520 <_ZN17TypedTextDatabase8getFontsEv>
 80044b0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80044b2:	f000 f833 	bl	800451c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80044b6:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80044b8:	601c      	str	r4, [r3, #0]
        fonts = f;
 80044ba:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80044bc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80044be:	4b0c      	ldr	r3, [pc, #48]	@ (80044f0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80044c0:	8018      	strh	r0, [r3, #0]
    }
}
 80044c2:	e007      	b.n	80044d4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80044c4:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80044c6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80044ca:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80044cc:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80044ce:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80044d0:	2c00      	cmp	r4, #0
 80044d2:	d1e8      	bne.n	80044a6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80044d4:	bd38      	pop	{r3, r4, r5, pc}
 80044d6:	bf00      	nop
 80044d8:	2400b1d4 	.word	0x2400b1d4
 80044dc:	2400b1cc 	.word	0x2400b1cc
 80044e0:	2400b1c8 	.word	0x2400b1c8
 80044e4:	2400b1d0 	.word	0x2400b1d0
 80044e8:	24025248 	.word	0x24025248
 80044ec:	24025250 	.word	0x24025250
 80044f0:	2402524c 	.word	0x2402524c
 80044f4:	901edf28 	.word	0x901edf28
 80044f8:	901edf20 	.word	0x901edf20
 80044fc:	901edf48 	.word	0x901edf48

08004500 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004500:	4b04      	ldr	r3, [pc, #16]	@ (8004514 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004508:	4b03      	ldr	r3, [pc, #12]	@ (8004518 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	2400b1c8 	.word	0x2400b1c8
 8004518:	2400b1cc 	.word	0x2400b1cc

0800451c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800451c:	2002      	movs	r0, #2
 800451e:	4770      	bx	lr

08004520 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004520:	4800      	ldr	r0, [pc, #0]	@ (8004524 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004522:	4770      	bx	lr
 8004524:	2400b1d8 	.word	0x2400b1d8

08004528 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004528:	b510      	push	{r4, lr}
};
 800452a:	4c05      	ldr	r4, [pc, #20]	@ (8004540 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 800452c:	f7ff febe 	bl	80042ac <_Z23getFont_verdana_20_4bppv>
};
 8004530:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004532:	f7ff fef9 	bl	8004328 <_Z23getFont_verdana_40_4bppv>
};
 8004536:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004538:	f7ff fe7c 	bl	8004234 <_Z23getFont_verdana_10_4bppv>
};
 800453c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800453e:	bd10      	pop	{r4, pc}
 8004540:	2400b1d8 	.word	0x2400b1d8

08004544 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8004544:	b510      	push	{r4, lr}
    pointArray = 0;
 8004546:	2400      	movs	r4, #0
 8004548:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 800454a:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 800454c:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800454e:	601c      	str	r4, [r3, #0]
}
 8004550:	bd10      	pop	{r4, pc}

08004552 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004552:	4770      	bx	lr

08004554 <_ZN19FrontendApplicationD0Ev>:
 8004554:	b510      	push	{r4, lr}
 8004556:	4604      	mov	r4, r0
 8004558:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800455c:	f01e f961 	bl	8022822 <_ZdlPvj>
 8004560:	4620      	mov	r0, r4
 8004562:	bd10      	pop	{r4, pc}

08004564 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004564:	b510      	push	{r4, lr}
 8004566:	4604      	mov	r4, r0
    {
        model.tick();
 8004568:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800456c:	f000 f818 	bl	80045a0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004570:	4620      	mov	r0, r4
    }
 8004572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004576:	f00f bdf9 	b.w	801416c <_ZN8touchgfx11Application15handleTickEventEv>
	...

0800457c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800457c:	b510      	push	{r4, lr}
 800457e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004580:	f7ff fbd4 	bl	8003d2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004584:	4b01      	ldr	r3, [pc, #4]	@ (800458c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8004586:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004588:	6023      	str	r3, [r4, #0]
}
 800458a:	bd10      	pop	{r4, pc}
 800458c:	080264f8 	.word	0x080264f8

08004590 <_ZN5ModelC1Ev>:
long map(long x, long in_min,long in_max,long out_min,long out_max){
	return (x - in_min)*(out_max - out_min +1) / (in_max - in_min +1) + out_min;
}
#endif

Model::Model() : modelListener(0) , Button_state(false), ADC_VAL(500)
 8004590:	2200      	movs	r2, #0
 8004592:	6002      	str	r2, [r0, #0]
 8004594:	7102      	strb	r2, [r0, #4]
 8004596:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800459a:	6082      	str	r2, [r0, #8]
{

}
 800459c:	4770      	bx	lr
	...

080045a0 <_ZN5Model4tickEv>:

void Model::tick()
{
 80045a0:	b570      	push	{r4, r5, r6, lr}
#ifndef SIMULATOR
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80045a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
 80045a6:	4605      	mov	r5, r0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80045a8:	4813      	ldr	r0, [pc, #76]	@ (80045f8 <_ZN5Model4tickEv+0x58>)
 80045aa:	f003 fce9 	bl	8007f80 <HAL_GPIO_ReadPin>
 80045ae:	3800      	subs	r0, #0
		Button_state = true;
	}else{
		Button_state = false;
	}

	HAL_ADC_Start(&hadc3);
 80045b0:	4e12      	ldr	r6, [pc, #72]	@ (80045fc <_ZN5Model4tickEv+0x5c>)
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80045b2:	bf18      	it	ne
 80045b4:	2001      	movne	r0, #1
 80045b6:	7128      	strb	r0, [r5, #4]
	HAL_ADC_Start(&hadc3);
 80045b8:	4630      	mov	r0, r6
 80045ba:	f002 fa85 	bl	8006ac8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3,10);
 80045be:	210a      	movs	r1, #10
 80045c0:	4630      	mov	r0, r6
 80045c2:	f001 ff37 	bl	8006434 <HAL_ADC_PollForConversion>

	uint16_t val = HAL_ADC_GetValue(&hadc3);
 80045c6:	4630      	mov	r0, r6
 80045c8:	f001 ffc0 	bl	800654c <HAL_ADC_GetValue>
 80045cc:	4604      	mov	r4, r0
	HAL_ADC_Stop(&hadc3);
 80045ce:	4630      	mov	r0, r6
 80045d0:	f002 fb2d 	bl	8006c2e <HAL_ADC_Stop>
	return (x - in_min)*(out_max - out_min +1) / (in_max - in_min +1) + out_min;
 80045d4:	2365      	movs	r3, #101	@ 0x65

	ADC_VAL= map(val,0,4095,0,100);
 80045d6:	b2a4      	uxth	r4, r4
#endif

	modelListener->setLight(Button_state);
 80045d8:	6828      	ldr	r0, [r5, #0]
 80045da:	7929      	ldrb	r1, [r5, #4]
	return (x - in_min)*(out_max - out_min +1) / (in_max - in_min +1) + out_min;
 80045dc:	435c      	muls	r4, r3
	modelListener->setLight(Button_state);
 80045de:	6803      	ldr	r3, [r0, #0]
	return (x - in_min)*(out_max - out_min +1) / (in_max - in_min +1) + out_min;
 80045e0:	1324      	asrs	r4, r4, #12
	modelListener->setLight(Button_state);
 80045e2:	689b      	ldr	r3, [r3, #8]
	ADC_VAL= map(val,0,4095,0,100);
 80045e4:	60ac      	str	r4, [r5, #8]
	modelListener->setLight(Button_state);
 80045e6:	4798      	blx	r3
	modelListener->setVolume(ADC_VAL);
 80045e8:	6828      	ldr	r0, [r5, #0]
 80045ea:	68a9      	ldr	r1, [r5, #8]
 80045ec:	6803      	ldr	r3, [r0, #0]
}
 80045ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	modelListener->setVolume(ADC_VAL);
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4718      	bx	r3
 80045f6:	bf00      	nop
 80045f8:	58020800 	.word	0x58020800
 80045fc:	24009c94 	.word	0x24009c94

08004600 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8004600:	4770      	bx	lr

08004602 <_ZThn4_N16Screen1PresenterD1Ev>:
 8004602:	3804      	subs	r0, #4
 8004604:	4770      	bx	lr

08004606 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004606:	4770      	bx	lr

08004608 <_ZN16Screen1Presenter8setLightEb>:
}

void Screen1Presenter::setLight (bool state){


	view.setLight(state);
 8004608:	68c0      	ldr	r0, [r0, #12]
 800460a:	6803      	ldr	r3, [r0, #0]
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	4718      	bx	r3

08004610 <_ZThn4_N16Screen1Presenter8setLightEb>:
    virtual void setLight (bool state);
 8004610:	f1a0 0004 	sub.w	r0, r0, #4
 8004614:	f7ff bff8 	b.w	8004608 <_ZN16Screen1Presenter8setLightEb>

08004618 <_ZN16Screen1Presenter9setVolumeEi>:

}

void Screen1Presenter::setVolume(int ADC_VAL){

	view.setVolume(ADC_VAL);
 8004618:	68c0      	ldr	r0, [r0, #12]
 800461a:	6803      	ldr	r3, [r0, #0]
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	4718      	bx	r3

08004620 <_ZThn4_N16Screen1Presenter9setVolumeEi>:
    virtual void setVolume(int ADC_VAL);
 8004620:	f1a0 0004 	sub.w	r0, r0, #4
 8004624:	f7ff bff8 	b.w	8004618 <_ZN16Screen1Presenter9setVolumeEi>

08004628 <_ZN16Screen1PresenterD0Ev>:
    virtual ~Screen1Presenter() {}
 8004628:	b510      	push	{r4, lr}
 800462a:	4604      	mov	r4, r0
 800462c:	2110      	movs	r1, #16
 800462e:	f01e f8f8 	bl	8022822 <_ZdlPvj>
 8004632:	4620      	mov	r0, r4
 8004634:	bd10      	pop	{r4, pc}

08004636 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004636:	f1a0 0004 	sub.w	r0, r0, #4
 800463a:	e7f5      	b.n	8004628 <_ZN16Screen1PresenterD0Ev>

0800463c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 800463c:	2200      	movs	r2, #0
    : view(v)
 800463e:	60c1      	str	r1, [r0, #12]
 8004640:	6082      	str	r2, [r0, #8]
 8004642:	4a02      	ldr	r2, [pc, #8]	@ (800464c <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8004644:	6002      	str	r2, [r0, #0]
 8004646:	3220      	adds	r2, #32
 8004648:	6042      	str	r2, [r0, #4]
}
 800464a:	4770      	bx	lr
 800464c:	0802654c 	.word	0x0802654c

08004650 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8004650:	4770      	bx	lr
	...

08004654 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8004654:	4b03      	ldr	r3, [pc, #12]	@ (8004664 <_ZN11Screen1ViewD1Ev+0x10>)
 8004656:	b510      	push	{r4, lr}
 8004658:	4604      	mov	r4, r0
 800465a:	6003      	str	r3, [r0, #0]
 800465c:	f7ff fc54 	bl	8003f08 <_ZN15Screen1ViewBaseD1Ev>
 8004660:	4620      	mov	r0, r4
 8004662:	bd10      	pop	{r4, pc}
 8004664:	08026584 	.word	0x08026584

08004668 <_ZN11Screen1ViewD0Ev>:
 8004668:	b510      	push	{r4, lr}
 800466a:	4604      	mov	r4, r0
 800466c:	f7ff fff2 	bl	8004654 <_ZN11Screen1ViewD1Ev>
 8004670:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8004674:	4620      	mov	r0, r4
 8004676:	f01e f8d4 	bl	8022822 <_ZdlPvj>
 800467a:	4620      	mov	r0, r4
 800467c:	bd10      	pop	{r4, pc}
	...

08004680 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004680:	b510      	push	{r4, lr}
 8004682:	4604      	mov	r4, r0
 8004684:	f7ff fccc 	bl	8004020 <_ZN15Screen1ViewBaseC1Ev>
 8004688:	4b01      	ldr	r3, [pc, #4]	@ (8004690 <_ZN11Screen1ViewC1Ev+0x10>)
}
 800468a:	4620      	mov	r0, r4
Screen1View::Screen1View()
 800468c:	6023      	str	r3, [r4, #0]
}
 800468e:	bd10      	pop	{r4, pc}
 8004690:	08026584 	.word	0x08026584

08004694 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8004694:	f7ff bc39 	b.w	8003f0a <_ZN15Screen1ViewBase11setupScreenEv>

08004698 <_ZN11Screen1View8setLightEb>:
 8004698:	f880 10e9 	strb.w	r1, [r0, #233]	@ 0xe9

void Screen1View::setLight (bool state){

	LightON.setVisible(state);
	LightON.invalidate();
 800469c:	30c4      	adds	r0, #196	@ 0xc4
 800469e:	f010 be9c 	b.w	80153da <_ZNK8touchgfx8Drawable10invalidateEv>
	...

080046a4 <_ZN11Screen1View9setVolumeEi>:
}

void Screen1View::setVolume(int ADC_VAL){
 80046a4:	b510      	push	{r4, lr}
 80046a6:	4604      	mov	r4, r0
 80046a8:	460b      	mov	r3, r1

    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", ADC_VAL);
 80046aa:	4a06      	ldr	r2, [pc, #24]	@ (80046c4 <_ZN11Screen1View9setVolumeEi+0x20>)
 80046ac:	2104      	movs	r1, #4
 80046ae:	f500 709e 	add.w	r0, r0, #316	@ 0x13c
 80046b2:	f013 f97d 	bl	80179b0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.invalidate();
 80046b6:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0

}
 80046ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    textArea1.invalidate();
 80046be:	f010 be8c 	b.w	80153da <_ZNK8touchgfx8Drawable10invalidateEv>
 80046c2:	bf00      	nop
 80046c4:	08025e07 	.word	0x08025e07

080046c8 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80046c8:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80046ca:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 80046ce:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80046d0:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80046d2:	2302      	movs	r3, #2
 80046d4:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80046d6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80046da:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80046de:	4770      	bx	lr

080046e0 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80046e0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80046e4:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80046e6:	bf04      	itt	eq
 80046e8:	2300      	moveq	r3, #0
 80046ea:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 80046ee:	2000      	movs	r0, #0
 80046f0:	4770      	bx	lr

080046f2 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80046f2:	2000      	movs	r0, #0
 80046f4:	4770      	bx	lr

080046f6 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80046f6:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80046f8:	6904      	ldr	r4, [r0, #16]
 80046fa:	8900      	ldrh	r0, [r0, #8]
 80046fc:	46a4      	mov	ip, r4
}
 80046fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004702:	4760      	bx	ip

08004704 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004704:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004706:	68c4      	ldr	r4, [r0, #12]
 8004708:	8900      	ldrh	r0, [r0, #8]
 800470a:	46a4      	mov	ip, r4
}
 800470c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004710:	4760      	bx	ip

08004712 <FT6X06_GestureConfig>:
{
 8004712:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004714:	f100 0518 	add.w	r5, r0, #24
{
 8004718:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800471a:	7809      	ldrb	r1, [r1, #0]
 800471c:	4628      	mov	r0, r5
 800471e:	f000 f911 	bl	8004944 <ft6x06_radian_value>
 8004722:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004724:	7931      	ldrb	r1, [r6, #4]
 8004726:	4628      	mov	r0, r5
 8004728:	f000 f918 	bl	800495c <ft6x06_offset_left_right>
 800472c:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800472e:	7a31      	ldrb	r1, [r6, #8]
 8004730:	4628      	mov	r0, r5
 8004732:	f000 f91f 	bl	8004974 <ft6x06_offset_up_down>
 8004736:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004738:	7b31      	ldrb	r1, [r6, #12]
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f926 	bl	800498c <ft6x06_disatnce_left_right>
 8004740:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004742:	7c31      	ldrb	r1, [r6, #16]
 8004744:	4628      	mov	r0, r5
 8004746:	f000 f92d 	bl	80049a4 <ft6x06_distance_up_down>
 800474a:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800474c:	7d31      	ldrb	r1, [r6, #20]
 800474e:	4628      	mov	r0, r5
 8004750:	f000 f934 	bl	80049bc <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8004754:	42c4      	cmn	r4, r0
}
 8004756:	bf14      	ite	ne
 8004758:	f04f 30ff 	movne.w	r0, #4294967295
 800475c:	2000      	moveq	r0, #0
 800475e:	bd70      	pop	{r4, r5, r6, pc}

08004760 <FT6X06_ReadID>:
{
 8004760:	b513      	push	{r0, r1, r4, lr}
 8004762:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8004764:	3018      	adds	r0, #24
 8004766:	f10d 0107 	add.w	r1, sp, #7
 800476a:	f000 f93f 	bl	80049ec <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 800476e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004772:	6023      	str	r3, [r4, #0]
}
 8004774:	b002      	add	sp, #8
 8004776:	bd10      	pop	{r4, pc}

08004778 <FT6X06_GetState>:
{
 8004778:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800477a:	f100 0518 	add.w	r5, r0, #24
{
 800477e:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004780:	a901      	add	r1, sp, #4
 8004782:	4628      	mov	r0, r5
 8004784:	f000 f8d1 	bl	800492a <ft6x06_td_status>
 8004788:	bb08      	cbnz	r0, 80047ce <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800478a:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800478e:	2b02      	cmp	r3, #2
 8004790:	bf98      	it	ls
 8004792:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004794:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004796:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004798:	2103      	movs	r1, #3
 800479a:	4628      	mov	r0, r5
 800479c:	eb0d 0203 	add.w	r2, sp, r3
 80047a0:	f000 f8b0 	bl	8004904 <ft6x06_read_reg>
 80047a4:	b9b0      	cbnz	r0, 80047d4 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80047a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80047aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047b4:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80047b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80047ba:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80047bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60a3      	str	r3, [r4, #8]
}
 80047ca:	b003      	add	sp, #12
 80047cc:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295
 80047d2:	e7df      	b.n	8004794 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80047d8:	e7f7      	b.n	80047ca <FT6X06_GetState+0x52>

080047da <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80047da:	3018      	adds	r0, #24
 80047dc:	f000 b8a0 	b.w	8004920 <ft6x06_gest_id>

080047e0 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80047e0:	2101      	movs	r1, #1
 80047e2:	3018      	adds	r0, #24
 80047e4:	f000 b8f6 	b.w	80049d4 <ft6x06_g_mode>

080047e8 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 80047e8:	2100      	movs	r1, #0
 80047ea:	3018      	adds	r0, #24
 80047ec:	f000 b8f2 	b.w	80049d4 <ft6x06_g_mode>

080047f0 <FT6X06_Init>:
{
 80047f0:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 80047f2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80047f6:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80047f8:	b96b      	cbnz	r3, 8004816 <FT6X06_Init+0x26>
    pObj->IO.Init();
 80047fa:	6803      	ldr	r3, [r0, #0]
 80047fc:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff fff2 	bl	80047e8 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8004804:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004806:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800480a:	bf18      	it	ne
 800480c:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 800480e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8004812:	4240      	negs	r0, r0
}
 8004814:	bd10      	pop	{r4, pc}
 8004816:	2000      	movs	r0, #0
  return ret;
 8004818:	e7fc      	b.n	8004814 <FT6X06_Init+0x24>

0800481a <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 800481a:	2000      	movs	r0, #0
 800481c:	4770      	bx	lr

0800481e <FT6X06_GetMultiTouchState>:
{
 800481e:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004820:	f100 0518 	add.w	r5, r0, #24
{
 8004824:	b085      	sub	sp, #20
 8004826:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004828:	4628      	mov	r0, r5
 800482a:	a901      	add	r1, sp, #4
 800482c:	f000 f87d 	bl	800492a <ft6x06_td_status>
 8004830:	2800      	cmp	r0, #0
 8004832:	d145      	bne.n	80048c0 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004834:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004838:	2b02      	cmp	r3, #2
 800483a:	bf98      	it	ls
 800483c:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800483e:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004840:	230c      	movs	r3, #12
 8004842:	aa01      	add	r2, sp, #4
 8004844:	2103      	movs	r1, #3
 8004846:	4628      	mov	r0, r5
 8004848:	f000 f85c 	bl	8004904 <ft6x06_read_reg>
 800484c:	2800      	cmp	r0, #0
 800484e:	d13a      	bne.n	80048c6 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004850:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004854:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004858:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800485a:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800485c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004860:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004862:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004864:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004868:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800486c:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800486e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004878:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800487a:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800487e:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8004880:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004884:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8004886:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800488e:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004890:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004892:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004896:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004898:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800489a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800489e:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80048a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80048aa:	430b      	orrs	r3, r1
 80048ac:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 80048ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80048b2:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80048b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80048bc:	b005      	add	sp, #20
 80048be:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	e7bb      	b.n	800483e <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80048c6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80048ca:	e7f7      	b.n	80048bc <FT6X06_GetMultiTouchState+0x9e>

080048cc <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80048cc:	b190      	cbz	r0, 80048f4 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80048ce:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80048d0:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80048d2:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80048d4:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80048d6:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80048d8:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80048da:	68ca      	ldr	r2, [r1, #12]
 80048dc:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80048de:	690a      	ldr	r2, [r1, #16]
 80048e0:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80048e2:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80048e4:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80048e6:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80048e8:	4a04      	ldr	r2, [pc, #16]	@ (80048fc <FT6X06_RegisterBusIO+0x30>)
 80048ea:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80048ec:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <FT6X06_RegisterBusIO+0x34>)
 80048ee:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80048f0:	b103      	cbz	r3, 80048f4 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80048f2:	4718      	bx	r3
}
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	080046f7 	.word	0x080046f7
 8004900:	08004705 	.word	0x08004705

08004904 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004904:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004906:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800490a:	46a4      	mov	ip, r4
}
 800490c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004910:	4760      	bx	ip

08004912 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004912:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004914:	6804      	ldr	r4, [r0, #0]
 8004916:	6880      	ldr	r0, [r0, #8]
 8004918:	46a4      	mov	ip, r4
}
 800491a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800491e:	4760      	bx	ip

08004920 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004920:	2301      	movs	r3, #1
{
 8004922:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004924:	4619      	mov	r1, r3
 8004926:	f7ff bfed 	b.w	8004904 <ft6x06_read_reg>

0800492a <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800492a:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800492c:	460a      	mov	r2, r1
{
 800492e:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004930:	2301      	movs	r3, #1
 8004932:	2102      	movs	r1, #2
 8004934:	f7ff ffe6 	bl	8004904 <ft6x06_read_reg>
  
  if(ret == 0)
 8004938:	b918      	cbnz	r0, 8004942 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 800493a:	7823      	ldrb	r3, [r4, #0]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8004942:	bd10      	pop	{r4, pc}

08004944 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004944:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004946:	2301      	movs	r3, #1
{
 8004948:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800494c:	f10d 0207 	add.w	r2, sp, #7
 8004950:	2191      	movs	r1, #145	@ 0x91
 8004952:	f7ff ffde 	bl	8004912 <ft6x06_write_reg>
}
 8004956:	b003      	add	sp, #12
 8004958:	f85d fb04 	ldr.w	pc, [sp], #4

0800495c <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 800495c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800495e:	2301      	movs	r3, #1
{
 8004960:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004964:	f10d 0207 	add.w	r2, sp, #7
 8004968:	2192      	movs	r1, #146	@ 0x92
 800496a:	f7ff ffd2 	bl	8004912 <ft6x06_write_reg>
}
 800496e:	b003      	add	sp, #12
 8004970:	f85d fb04 	ldr.w	pc, [sp], #4

08004974 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004974:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004976:	2301      	movs	r3, #1
{
 8004978:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800497c:	f10d 0207 	add.w	r2, sp, #7
 8004980:	2193      	movs	r1, #147	@ 0x93
 8004982:	f7ff ffc6 	bl	8004912 <ft6x06_write_reg>
}
 8004986:	b003      	add	sp, #12
 8004988:	f85d fb04 	ldr.w	pc, [sp], #4

0800498c <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 800498c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800498e:	2301      	movs	r3, #1
{
 8004990:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004994:	f10d 0207 	add.w	r2, sp, #7
 8004998:	2194      	movs	r1, #148	@ 0x94
 800499a:	f7ff ffba 	bl	8004912 <ft6x06_write_reg>
}
 800499e:	b003      	add	sp, #12
 80049a0:	f85d fb04 	ldr.w	pc, [sp], #4

080049a4 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80049a4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80049a6:	2301      	movs	r3, #1
{
 80049a8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80049ac:	f10d 0207 	add.w	r2, sp, #7
 80049b0:	2195      	movs	r1, #149	@ 0x95
 80049b2:	f7ff ffae 	bl	8004912 <ft6x06_write_reg>
}
 80049b6:	b003      	add	sp, #12
 80049b8:	f85d fb04 	ldr.w	pc, [sp], #4

080049bc <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80049bc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80049be:	2301      	movs	r3, #1
{
 80049c0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80049c4:	f10d 0207 	add.w	r2, sp, #7
 80049c8:	2196      	movs	r1, #150	@ 0x96
 80049ca:	f7ff ffa2 	bl	8004912 <ft6x06_write_reg>
}
 80049ce:	b003      	add	sp, #12
 80049d0:	f85d fb04 	ldr.w	pc, [sp], #4

080049d4 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80049d4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80049d6:	2301      	movs	r3, #1
{
 80049d8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80049dc:	f10d 0207 	add.w	r2, sp, #7
 80049e0:	21a4      	movs	r1, #164	@ 0xa4
 80049e2:	f7ff ff96 	bl	8004912 <ft6x06_write_reg>
}
 80049e6:	b003      	add	sp, #12
 80049e8:	f85d fb04 	ldr.w	pc, [sp], #4

080049ec <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80049ec:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 80049ee:	2301      	movs	r3, #1
 80049f0:	21a8      	movs	r1, #168	@ 0xa8
 80049f2:	f7ff bf87 	b.w	8004904 <ft6x06_read_reg>
	...

080049f8 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80049f8:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80049fa:	2201      	movs	r2, #1
 80049fc:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80049fe:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8004a02:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004a04:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a06:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8004a08:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a0e:	f007 faf3 	bl	800bff8 <HAL_SDRAM_SendCommand>
 8004a12:	3800      	subs	r0, #0
 8004a14:	bf18      	it	ne
 8004a16:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004a18:	4240      	negs	r0, r0
 8004a1a:	bd08      	pop	{r3, pc}
 8004a1c:	2400b1e4 	.word	0x2400b1e4

08004a20 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004a20:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004a22:	2202      	movs	r2, #2
 8004a24:	4b08      	ldr	r3, [pc, #32]	@ (8004a48 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8004a26:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a36:	4619      	mov	r1, r3
 8004a38:	f007 fade 	bl	800bff8 <HAL_SDRAM_SendCommand>
 8004a3c:	3800      	subs	r0, #0
 8004a3e:	bf18      	it	ne
 8004a40:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004a42:	4240      	negs	r0, r0
 8004a44:	bd08      	pop	{r3, pc}
 8004a46:	bf00      	nop
 8004a48:	2400b1e4 	.word	0x2400b1e4

08004a4c <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8004a4c:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004a4e:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8004a52:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004a54:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8004a56:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004a58:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8004a5a:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8004a5c:	6991      	ldr	r1, [r2, #24]
 8004a5e:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004a60:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8004a62:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004a64:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004a66:	4907      	ldr	r1, [pc, #28]	@ (8004a84 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8004a68:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8004a6a:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004a6c:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8004a6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a76:	f007 fabf 	bl	800bff8 <HAL_SDRAM_SendCommand>
 8004a7a:	3800      	subs	r0, #0
 8004a7c:	bf18      	it	ne
 8004a7e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004a80:	4240      	negs	r0, r0
 8004a82:	bd10      	pop	{r4, pc}
 8004a84:	2400b1e4 	.word	0x2400b1e4

08004a88 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8004a88:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8004a8a:	4b08      	ldr	r3, [pc, #32]	@ (8004aac <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8004a8c:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8004a90:	2108      	movs	r1, #8
 8004a92:	2200      	movs	r2, #0
 8004a94:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f007 faab 	bl	800bff8 <HAL_SDRAM_SendCommand>
 8004aa2:	3800      	subs	r0, #0
 8004aa4:	bf18      	it	ne
 8004aa6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004aa8:	4240      	negs	r0, r0
 8004aaa:	bd08      	pop	{r3, pc}
 8004aac:	2400b1e4 	.word	0x2400b1e4

08004ab0 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8004ab0:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004ab2:	f007 fac0 	bl	800c036 <HAL_SDRAM_ProgramRefreshRate>
 8004ab6:	3800      	subs	r0, #0
 8004ab8:	bf18      	it	ne
 8004aba:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004abc:	4240      	negs	r0, r0
 8004abe:	bd08      	pop	{r3, pc}

08004ac0 <IS42S32800J_Init>:
{
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004ac4:	6809      	ldr	r1, [r1, #0]
{
 8004ac6:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004ac8:	f7ff ff96 	bl	80049f8 <IS42S32800J_ClockEnable>
 8004acc:	b110      	cbz	r0, 8004ad4 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8004ace:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004ad4:	f001 fc7e 	bl	80063d4 <HAL_GetTick>
 8004ad8:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004ada:	f001 fc7b 	bl	80063d4 <HAL_GetTick>
 8004ade:	4286      	cmp	r6, r0
 8004ae0:	d0fb      	beq.n	8004ada <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004ae2:	6821      	ldr	r1, [r4, #0]
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f7ff ff9b 	bl	8004a20 <IS42S32800J_Precharge>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d1ef      	bne.n	8004ace <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004aee:	4628      	mov	r0, r5
 8004af0:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004af4:	f7ff ffc8 	bl	8004a88 <IS42S32800J_RefreshMode>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d1e8      	bne.n	8004ace <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004afc:	4621      	mov	r1, r4
 8004afe:	4628      	mov	r0, r5
 8004b00:	f7ff ffa4 	bl	8004a4c <IS42S32800J_ModeRegConfig>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d1e2      	bne.n	8004ace <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8004b08:	68a1      	ldr	r1, [r4, #8]
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7ff ffd0 	bl	8004ab0 <IS42S32800J_RefreshRate>
 8004b10:	3800      	subs	r0, #0
 8004b12:	bf18      	it	ne
 8004b14:	2001      	movne	r0, #1
 8004b16:	4240      	negs	r0, r0
  return ret;
 8004b18:	e7db      	b.n	8004ad2 <IS42S32800J_Init+0x12>

08004b1a <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004b1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004b22:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004b26:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004b2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b2e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8004b32:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004b36:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8004b38:	2000      	movs	r0, #0
 8004b3a:	4770      	bx	lr

08004b3c <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004b3c:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004b3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8004b42:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b44:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004b48:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004b4a:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b4c:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8004b4e:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004b50:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b52:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8004b54:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b56:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b58:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8004b5a:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004b5c:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8004b5e:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b60:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b62:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b66:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8004b6a:	2310      	movs	r3, #16
 8004b6c:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004b6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b72:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8004b74:	f240 1301 	movw	r3, #257	@ 0x101
 8004b78:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b7e:	f005 fad7 	bl	800a130 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004b82:	2800      	cmp	r0, #0

}
 8004b84:	bf14      	ite	ne
 8004b86:	f06f 0004 	mvnne.w	r0, #4
 8004b8a:	2000      	moveq	r0, #0
 8004b8c:	b015      	add	sp, #84	@ 0x54
 8004b8e:	f85d fb04 	ldr.w	pc, [sp], #4

08004b92 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b92:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b94:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004b98:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b9a:	bf18      	it	ne
 8004b9c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004ba0:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ba2:	bf08      	it	eq
 8004ba4:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004ba8:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004baa:	a906      	add	r1, sp, #24
{
 8004bac:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bae:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004bb0:	2306      	movs	r3, #6
 8004bb2:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004bb4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004bb6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004bba:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8004bbc:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004bbe:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004bc0:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bc4:	f005 f9b4 	bl	8009f30 <HAL_QSPI_Command>
 8004bc8:	bb20      	cbnz	r0, 8004c14 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004bca:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004bce:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004bd0:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004bd2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004bd6:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bd8:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004bda:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004bde:	f04f 0310 	mov.w	r3, #16
 8004be2:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004be6:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bea:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004bec:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004bf0:	bf14      	ite	ne
 8004bf2:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004bf6:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bfa:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004bfc:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bfe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004c02:	f005 fa95 	bl	800a130 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004c06:	2800      	cmp	r0, #0
 8004c08:	bf14      	ite	ne
 8004c0a:	f06f 0004 	mvnne.w	r0, #4
 8004c0e:	2000      	moveq	r0, #0
}
 8004c10:	b015      	add	sp, #84	@ 0x54
 8004c12:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004c14:	f06f 0001 	mvn.w	r0, #1
 8004c18:	e7fa      	b.n	8004c10 <MT25TL01G_WriteEnable+0x7e>

08004c1a <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c1a:	2903      	cmp	r1, #3
{
 8004c1c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c1e:	bf18      	it	ne
 8004c20:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004c24:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c26:	bf08      	it	eq
 8004c28:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c30:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004c32:	23b7      	movs	r3, #183	@ 0xb7
 8004c34:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004c36:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c38:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004c3c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004c3e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c40:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c42:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8004c46:	f7ff ffa4 	bl	8004b92 <MT25TL01G_WriteEnable>
 8004c4a:	b118      	cbz	r0, 8004c54 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8004c4c:	f06f 0001 	mvn.w	r0, #1
}
 8004c50:	b00f      	add	sp, #60	@ 0x3c
 8004c52:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c58:	4669      	mov	r1, sp
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f005 f968 	bl	8009f30 <HAL_QSPI_Command>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d1f3      	bne.n	8004c4c <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004c64:	4629      	mov	r1, r5
 8004c66:	4620      	mov	r0, r4
 8004c68:	f7ff ff68 	bl	8004b3c <MT25TL01G_AutoPollingMemReady>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d0ef      	beq.n	8004c50 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004c70:	e7ec      	b.n	8004c4c <MT25TL01G_Enter4BytesAddressMode+0x32>

08004c72 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004c72:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c74:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004c78:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c7e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004c80:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c82:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004c84:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004c86:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c88:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004c8c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004c8e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c90:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c92:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c96:	f005 f94b 	bl	8009f30 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004c9a:	2800      	cmp	r0, #0
}
 8004c9c:	bf14      	ite	ne
 8004c9e:	f06f 0001 	mvnne.w	r0, #1
 8004ca2:	2000      	moveq	r0, #0
 8004ca4:	b00f      	add	sp, #60	@ 0x3c
 8004ca6:	f85d fb04 	ldr.w	pc, [sp], #4

08004caa <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004caa:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004cb0:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004cb6:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004cb8:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cba:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004cbc:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004cbe:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004cc0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004cc4:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004cc6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004cc8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004cca:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cce:	f005 f92f 	bl	8009f30 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004cd2:	2800      	cmp	r0, #0
}
 8004cd4:	bf14      	ite	ne
 8004cd6:	f06f 0001 	mvnne.w	r0, #1
 8004cda:	2000      	moveq	r0, #0
 8004cdc:	b00f      	add	sp, #60	@ 0x3c
 8004cde:	f85d fb04 	ldr.w	pc, [sp], #4

08004ce2 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004ce2:	b500      	push	{lr}
 8004ce4:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004ce6:	2903      	cmp	r1, #3
 8004ce8:	d80e      	bhi.n	8004d08 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004cea:	e8df f001 	tbb	[pc, r1]
 8004cee:	2902      	.short	0x2902
 8004cf0:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cf6:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004cf8:	230e      	movs	r3, #14
 8004cfa:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004cfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d00:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004d02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004d06:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004d08:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004d0a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004d0e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004d12:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004d14:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004d16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004d1a:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004d1c:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004d1e:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004d22:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004d24:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004d26:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004d28:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004d2c:	f005 fa51 	bl	800a1d2 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004d30:	2800      	cmp	r0, #0
}
 8004d32:	bf14      	ite	ne
 8004d34:	f06f 0005 	mvnne.w	r0, #5
 8004d38:	2000      	moveq	r0, #0
 8004d3a:	b011      	add	sp, #68	@ 0x44
 8004d3c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d44:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004d46:	233d      	movs	r3, #61	@ 0x3d
 8004d48:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d4e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004d50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d54:	e7d7      	b.n	8004d06 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d5a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8004d5c:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004d5e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004d60:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004d64:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004d66:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004d6a:	e7cc      	b.n	8004d06 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004d6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004d70:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004d72:	23ed      	movs	r3, #237	@ 0xed
 8004d74:	e7f3      	b.n	8004d5e <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004d76 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004d76:	b500      	push	{lr}
 8004d78:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004d7a:	2903      	cmp	r1, #3
 8004d7c:	d80e      	bhi.n	8004d9c <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004d7e:	e8df f001 	tbb	[pc, r1]
 8004d82:	2502      	.short	0x2502
 8004d84:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d8a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004d90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d94:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004d96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004d9a:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004d9c:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004d9e:	466a      	mov	r2, sp
 8004da0:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004da2:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004da4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004da8:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004dae:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004db0:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004db4:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004db8:	f005 fa0b 	bl	800a1d2 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004dbc:	2800      	cmp	r0, #0
}
 8004dbe:	bf14      	ite	ne
 8004dc0:	f06f 0005 	mvnne.w	r0, #5
 8004dc4:	2000      	moveq	r0, #0
 8004dc6:	b011      	add	sp, #68	@ 0x44
 8004dc8:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004dcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004dd0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004dd2:	23bc      	movs	r3, #188	@ 0xbc
 8004dd4:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8004dd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dda:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004ddc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004de0:	e7db      	b.n	8004d9a <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004de2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004de6:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004de8:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004dea:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004dec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004df0:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004df2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004df6:	e7d0      	b.n	8004d9a <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004df8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004dfc:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004dfe:	23eb      	movs	r3, #235	@ 0xeb
 8004e00:	e7f3      	b.n	8004dea <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004e02 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e02:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e04:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004e08:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e0a:	bf18      	it	ne
 8004e0c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004e10:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e12:	bf08      	it	eq
 8004e14:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e18:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e1a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004e1c:	2366      	movs	r3, #102	@ 0x66
 8004e1e:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004e20:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e22:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004e26:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004e28:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e2a:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e2c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e30:	f005 f87e 	bl	8009f30 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004e34:	2800      	cmp	r0, #0
}
 8004e36:	bf14      	ite	ne
 8004e38:	f06f 0001 	mvnne.w	r0, #1
 8004e3c:	2000      	moveq	r0, #0
 8004e3e:	b00f      	add	sp, #60	@ 0x3c
 8004e40:	f85d fb04 	ldr.w	pc, [sp], #4

08004e44 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e44:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e46:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004e4a:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e4c:	bf18      	it	ne
 8004e4e:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004e52:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e54:	bf08      	it	eq
 8004e56:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e5a:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e5c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8004e5e:	2399      	movs	r3, #153	@ 0x99
 8004e60:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004e62:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e64:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004e68:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004e6a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e6c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e6e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e72:	f005 f85d 	bl	8009f30 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004e76:	2800      	cmp	r0, #0
}
 8004e78:	bf14      	ite	ne
 8004e7a:	f06f 0001 	mvnne.w	r0, #1
 8004e7e:	2000      	moveq	r0, #0
 8004e80:	b00f      	add	sp, #60	@ 0x3c
 8004e82:	f85d fb04 	ldr.w	pc, [sp], #4

08004e86 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004e86:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e88:	6884      	ldr	r4, [r0, #8]
 8004e8a:	8800      	ldrh	r0, [r0, #0]
 8004e8c:	46a4      	mov	ip, r4
}
 8004e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e92:	4760      	bx	ip

08004e94 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e94:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e96:	6844      	ldr	r4, [r0, #4]
 8004e98:	8800      	ldrh	r0, [r0, #0]
 8004e9a:	46a4      	mov	ip, r4
}
 8004e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ea0:	4760      	bx	ip

08004ea2 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004ea2:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004ea4:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004eaa:	4798      	blx	r3
 8004eac:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004eae:	68e3      	ldr	r3, [r4, #12]
 8004eb0:	4798      	blx	r3
 8004eb2:	1b83      	subs	r3, r0, r6
 8004eb4:	42ab      	cmp	r3, r5
 8004eb6:	d3fa      	bcc.n	8004eae <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ebc <OTM8009A_Init>:
{
 8004ebc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f100 0510 	add.w	r5, r0, #16
{
 8004ec6:	4607      	mov	r7, r0
 8004ec8:	460e      	mov	r6, r1
 8004eca:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4ade      	ldr	r2, [pc, #888]	@ (8005248 <OTM8009A_Init+0x38c>)
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 fb99 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004ed6:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ed8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004eda:	4adc      	ldr	r2, [pc, #880]	@ (800524c <OTM8009A_Init+0x390>)
 8004edc:	21ff      	movs	r1, #255	@ 0xff
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 fb92 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ee4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004ee6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ee8:	4ad9      	ldr	r2, [pc, #868]	@ (8005250 <OTM8009A_Init+0x394>)
 8004eea:	4619      	mov	r1, r3
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 fb8b 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004ef2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ef4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004ef6:	4ad7      	ldr	r2, [pc, #860]	@ (8005254 <OTM8009A_Init+0x398>)
 8004ef8:	21ff      	movs	r1, #255	@ 0xff
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 fb84 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004f02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f04:	4ad2      	ldr	r2, [pc, #840]	@ (8005250 <OTM8009A_Init+0x394>)
 8004f06:	4619      	mov	r1, r3
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 fb7d 	bl	8005608 <otm8009a_write_reg>
 8004f0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004f10:	2300      	movs	r3, #0
 8004f12:	4ad1      	ldr	r2, [pc, #836]	@ (8005258 <OTM8009A_Init+0x39c>)
 8004f14:	21c4      	movs	r1, #196	@ 0xc4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fb76 	bl	8005608 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004f1c:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004f1e:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004f20:	4638      	mov	r0, r7
 8004f22:	f7ff ffbe 	bl	8004ea2 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004f26:	2300      	movs	r3, #0
 8004f28:	4acc      	ldr	r2, [pc, #816]	@ (800525c <OTM8009A_Init+0x3a0>)
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f000 fb6b 	bl	8005608 <otm8009a_write_reg>
 8004f32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004f34:	2300      	movs	r3, #0
 8004f36:	4aca      	ldr	r2, [pc, #808]	@ (8005260 <OTM8009A_Init+0x3a4>)
 8004f38:	21c4      	movs	r1, #196	@ 0xc4
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 fb64 	bl	8005608 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004f40:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004f42:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004f44:	4638      	mov	r0, r7
 8004f46:	f7ff ffac 	bl	8004ea2 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	4ac5      	ldr	r2, [pc, #788]	@ (8005264 <OTM8009A_Init+0x3a8>)
 8004f4e:	4628      	mov	r0, r5
 8004f50:	4619      	mov	r1, r3
 8004f52:	f000 fb59 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004f56:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004f58:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004f5a:	4ac3      	ldr	r2, [pc, #780]	@ (8005268 <OTM8009A_Init+0x3ac>)
 8004f5c:	21c5      	movs	r1, #197	@ 0xc5
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f000 fb52 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004f64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004f66:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004f68:	4ac0      	ldr	r2, [pc, #768]	@ (800526c <OTM8009A_Init+0x3b0>)
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 fb4b 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f72:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004f74:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f76:	4abe      	ldr	r2, [pc, #760]	@ (8005270 <OTM8009A_Init+0x3b4>)
 8004f78:	21c5      	movs	r1, #197	@ 0xc5
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 fb44 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004f80:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f82:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004f84:	4abb      	ldr	r2, [pc, #748]	@ (8005274 <OTM8009A_Init+0x3b8>)
 8004f86:	4619      	mov	r1, r3
 8004f88:	4628      	mov	r0, r5
 8004f8a:	f000 fb3d 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004f8e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004f90:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004f92:	4ab9      	ldr	r2, [pc, #740]	@ (8005278 <OTM8009A_Init+0x3bc>)
 8004f94:	21c0      	movs	r1, #192	@ 0xc0
 8004f96:	4628      	mov	r0, r5
 8004f98:	f000 fb36 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f9c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004f9e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fa0:	4aa9      	ldr	r2, [pc, #676]	@ (8005248 <OTM8009A_Init+0x38c>)
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f000 fb2f 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004faa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004fae:	4ab3      	ldr	r2, [pc, #716]	@ (800527c <OTM8009A_Init+0x3c0>)
 8004fb0:	21d9      	movs	r1, #217	@ 0xd9
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 fb28 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004fb8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004fba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004fbc:	4ab0      	ldr	r2, [pc, #704]	@ (8005280 <OTM8009A_Init+0x3c4>)
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 fb21 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004fc6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004fc8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004fca:	4aae      	ldr	r2, [pc, #696]	@ (8005284 <OTM8009A_Init+0x3c8>)
 8004fcc:	21c1      	movs	r1, #193	@ 0xc1
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 fb1a 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004fd4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004fd6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004fd8:	4aab      	ldr	r2, [pc, #684]	@ (8005288 <OTM8009A_Init+0x3cc>)
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 fb13 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004fe2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004fe4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004fe6:	4aa9      	ldr	r2, [pc, #676]	@ (800528c <OTM8009A_Init+0x3d0>)
 8004fe8:	21c5      	movs	r1, #197	@ 0xc5
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 fb0c 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004ff0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004ff2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004ff4:	4aa6      	ldr	r2, [pc, #664]	@ (8005290 <OTM8009A_Init+0x3d4>)
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f000 fb05 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ffe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005000:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005002:	4a9b      	ldr	r2, [pc, #620]	@ (8005270 <OTM8009A_Init+0x3b4>)
 8005004:	21c5      	movs	r1, #197	@ 0xc5
 8005006:	4628      	mov	r0, r5
 8005008:	f000 fafe 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800500c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800500e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005010:	4a8d      	ldr	r2, [pc, #564]	@ (8005248 <OTM8009A_Init+0x38c>)
 8005012:	4619      	mov	r1, r3
 8005014:	4628      	mov	r0, r5
 8005016:	f000 faf7 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800501a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800501c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800501e:	4a9d      	ldr	r2, [pc, #628]	@ (8005294 <OTM8009A_Init+0x3d8>)
 8005020:	21d8      	movs	r1, #216	@ 0xd8
 8005022:	4628      	mov	r0, r5
 8005024:	f000 faf0 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005028:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800502a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800502c:	4a9a      	ldr	r2, [pc, #616]	@ (8005298 <OTM8009A_Init+0x3dc>)
 800502e:	4619      	mov	r1, r3
 8005030:	4628      	mov	r0, r5
 8005032:	f000 fae9 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005036:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005038:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800503a:	4a98      	ldr	r2, [pc, #608]	@ (800529c <OTM8009A_Init+0x3e0>)
 800503c:	21c5      	movs	r1, #197	@ 0xc5
 800503e:	4628      	mov	r0, r5
 8005040:	f000 fae2 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005044:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005046:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005048:	4a95      	ldr	r2, [pc, #596]	@ (80052a0 <OTM8009A_Init+0x3e4>)
 800504a:	4619      	mov	r1, r3
 800504c:	4628      	mov	r0, r5
 800504e:	f000 fadb 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005052:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005054:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005056:	4a93      	ldr	r2, [pc, #588]	@ (80052a4 <OTM8009A_Init+0x3e8>)
 8005058:	21c0      	movs	r1, #192	@ 0xc0
 800505a:	4628      	mov	r0, r5
 800505c:	f000 fad4 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005060:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005062:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005064:	4a90      	ldr	r2, [pc, #576]	@ (80052a8 <OTM8009A_Init+0x3ec>)
 8005066:	4619      	mov	r1, r3
 8005068:	4628      	mov	r0, r5
 800506a:	f000 facd 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800506e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005070:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005072:	4a8e      	ldr	r2, [pc, #568]	@ (80052ac <OTM8009A_Init+0x3f0>)
 8005074:	21c5      	movs	r1, #197	@ 0xc5
 8005076:	4628      	mov	r0, r5
 8005078:	f000 fac6 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800507c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800507e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005080:	4a8b      	ldr	r2, [pc, #556]	@ (80052b0 <OTM8009A_Init+0x3f4>)
 8005082:	4619      	mov	r1, r3
 8005084:	4628      	mov	r0, r5
 8005086:	f000 fabf 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800508a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800508c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800508e:	4a89      	ldr	r2, [pc, #548]	@ (80052b4 <OTM8009A_Init+0x3f8>)
 8005090:	21c4      	movs	r1, #196	@ 0xc4
 8005092:	4628      	mov	r0, r5
 8005094:	f000 fab8 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005098:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800509a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800509c:	4a78      	ldr	r2, [pc, #480]	@ (8005280 <OTM8009A_Init+0x3c4>)
 800509e:	4619      	mov	r1, r3
 80050a0:	4628      	mov	r0, r5
 80050a2:	f000 fab1 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80050a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80050a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80050aa:	4a83      	ldr	r2, [pc, #524]	@ (80052b8 <OTM8009A_Init+0x3fc>)
 80050ac:	21c1      	movs	r1, #193	@ 0xc1
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 faaa 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80050b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80050b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80050b8:	4a80      	ldr	r2, [pc, #512]	@ (80052bc <OTM8009A_Init+0x400>)
 80050ba:	4619      	mov	r1, r3
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 faa3 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80050c2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80050c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80050c6:	4a7e      	ldr	r2, [pc, #504]	@ (80052c0 <OTM8009A_Init+0x404>)
 80050c8:	21b3      	movs	r1, #179	@ 0xb3
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 fa9c 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80050d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005250 <OTM8009A_Init+0x394>)
 80050d6:	4619      	mov	r1, r3
 80050d8:	4628      	mov	r0, r5
 80050da:	f000 fa95 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80050de:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80050e2:	4a78      	ldr	r2, [pc, #480]	@ (80052c4 <OTM8009A_Init+0x408>)
 80050e4:	21ce      	movs	r1, #206	@ 0xce
 80050e6:	4628      	mov	r0, r5
 80050e8:	f000 fa8e 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80050ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050f0:	4a75      	ldr	r2, [pc, #468]	@ (80052c8 <OTM8009A_Init+0x40c>)
 80050f2:	4619      	mov	r1, r3
 80050f4:	4628      	mov	r0, r5
 80050f6:	f000 fa87 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80050fa:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80050fe:	4a73      	ldr	r2, [pc, #460]	@ (80052cc <OTM8009A_Init+0x410>)
 8005100:	21ce      	movs	r1, #206	@ 0xce
 8005102:	4628      	mov	r0, r5
 8005104:	f000 fa80 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005108:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800510a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800510c:	4a70      	ldr	r2, [pc, #448]	@ (80052d0 <OTM8009A_Init+0x414>)
 800510e:	4619      	mov	r1, r3
 8005110:	4628      	mov	r0, r5
 8005112:	f000 fa79 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005116:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005118:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800511a:	4a6e      	ldr	r2, [pc, #440]	@ (80052d4 <OTM8009A_Init+0x418>)
 800511c:	21ce      	movs	r1, #206	@ 0xce
 800511e:	4628      	mov	r0, r5
 8005120:	f000 fa72 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005124:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005126:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005128:	4a6b      	ldr	r2, [pc, #428]	@ (80052d8 <OTM8009A_Init+0x41c>)
 800512a:	4619      	mov	r1, r3
 800512c:	4628      	mov	r0, r5
 800512e:	f000 fa6b 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005132:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005134:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005136:	4a69      	ldr	r2, [pc, #420]	@ (80052dc <OTM8009A_Init+0x420>)
 8005138:	21cf      	movs	r1, #207	@ 0xcf
 800513a:	4628      	mov	r0, r5
 800513c:	f000 fa64 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005140:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005142:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005144:	4a66      	ldr	r2, [pc, #408]	@ (80052e0 <OTM8009A_Init+0x424>)
 8005146:	4619      	mov	r1, r3
 8005148:	4628      	mov	r0, r5
 800514a:	f000 fa5d 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800514e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005150:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005152:	4a64      	ldr	r2, [pc, #400]	@ (80052e4 <OTM8009A_Init+0x428>)
 8005154:	21cf      	movs	r1, #207	@ 0xcf
 8005156:	4628      	mov	r0, r5
 8005158:	f000 fa56 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800515c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800515e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005160:	4a3b      	ldr	r2, [pc, #236]	@ (8005250 <OTM8009A_Init+0x394>)
 8005162:	4619      	mov	r1, r3
 8005164:	4628      	mov	r0, r5
 8005166:	f000 fa4f 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800516a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800516c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800516e:	4a5e      	ldr	r2, [pc, #376]	@ (80052e8 <OTM8009A_Init+0x42c>)
 8005170:	21cb      	movs	r1, #203	@ 0xcb
 8005172:	4628      	mov	r0, r5
 8005174:	f000 fa48 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005178:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800517a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800517c:	4a5b      	ldr	r2, [pc, #364]	@ (80052ec <OTM8009A_Init+0x430>)
 800517e:	4619      	mov	r1, r3
 8005180:	4628      	mov	r0, r5
 8005182:	f000 fa41 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005186:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005188:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800518a:	4a59      	ldr	r2, [pc, #356]	@ (80052f0 <OTM8009A_Init+0x434>)
 800518c:	21cb      	movs	r1, #203	@ 0xcb
 800518e:	4628      	mov	r0, r5
 8005190:	f000 fa3a 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005194:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005196:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005198:	4a4b      	ldr	r2, [pc, #300]	@ (80052c8 <OTM8009A_Init+0x40c>)
 800519a:	4619      	mov	r1, r3
 800519c:	4628      	mov	r0, r5
 800519e:	f000 fa33 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80051a2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80051a6:	4a53      	ldr	r2, [pc, #332]	@ (80052f4 <OTM8009A_Init+0x438>)
 80051a8:	21cb      	movs	r1, #203	@ 0xcb
 80051aa:	4628      	mov	r0, r5
 80051ac:	f000 fa2c 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80051b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051b4:	4a46      	ldr	r2, [pc, #280]	@ (80052d0 <OTM8009A_Init+0x414>)
 80051b6:	4619      	mov	r1, r3
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 fa25 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80051be:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80051c2:	4a4d      	ldr	r2, [pc, #308]	@ (80052f8 <OTM8009A_Init+0x43c>)
 80051c4:	21cb      	movs	r1, #203	@ 0xcb
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 fa1e 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80051cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80051ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80051d0:	4a41      	ldr	r2, [pc, #260]	@ (80052d8 <OTM8009A_Init+0x41c>)
 80051d2:	4619      	mov	r1, r3
 80051d4:	4628      	mov	r0, r5
 80051d6:	f000 fa17 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80051da:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80051dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80051de:	4a47      	ldr	r2, [pc, #284]	@ (80052fc <OTM8009A_Init+0x440>)
 80051e0:	21cb      	movs	r1, #203	@ 0xcb
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 fa10 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80051e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80051ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80051ec:	4a3c      	ldr	r2, [pc, #240]	@ (80052e0 <OTM8009A_Init+0x424>)
 80051ee:	4619      	mov	r1, r3
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 fa09 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80051f6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80051f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80051fa:	4a41      	ldr	r2, [pc, #260]	@ (8005300 <OTM8009A_Init+0x444>)
 80051fc:	21cb      	movs	r1, #203	@ 0xcb
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 fa02 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005204:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005206:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005208:	4a3e      	ldr	r2, [pc, #248]	@ (8005304 <OTM8009A_Init+0x448>)
 800520a:	4619      	mov	r1, r3
 800520c:	4628      	mov	r0, r5
 800520e:	f000 f9fb 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005212:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005214:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005216:	4a3c      	ldr	r2, [pc, #240]	@ (8005308 <OTM8009A_Init+0x44c>)
 8005218:	21cb      	movs	r1, #203	@ 0xcb
 800521a:	4628      	mov	r0, r5
 800521c:	f000 f9f4 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005220:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005222:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005224:	4a39      	ldr	r2, [pc, #228]	@ (800530c <OTM8009A_Init+0x450>)
 8005226:	4619      	mov	r1, r3
 8005228:	4628      	mov	r0, r5
 800522a:	f000 f9ed 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800522e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005230:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005232:	4a37      	ldr	r2, [pc, #220]	@ (8005310 <OTM8009A_Init+0x454>)
 8005234:	21cb      	movs	r1, #203	@ 0xcb
 8005236:	4628      	mov	r0, r5
 8005238:	f000 f9e6 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800523c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800523e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005240:	4a03      	ldr	r2, [pc, #12]	@ (8005250 <OTM8009A_Init+0x394>)
 8005242:	4619      	mov	r1, r3
 8005244:	4628      	mov	r0, r5
 8005246:	e065      	b.n	8005314 <OTM8009A_Init+0x458>
 8005248:	080266c5 	.word	0x080266c5
 800524c:	080266c1 	.word	0x080266c1
 8005250:	080266c6 	.word	0x080266c6
 8005254:	080266bf 	.word	0x080266bf
 8005258:	080266c7 	.word	0x080266c7
 800525c:	080266c8 	.word	0x080266c8
 8005260:	080266c9 	.word	0x080266c9
 8005264:	080266ca 	.word	0x080266ca
 8005268:	080266cb 	.word	0x080266cb
 800526c:	080266cc 	.word	0x080266cc
 8005270:	080266cd 	.word	0x080266cd
 8005274:	080266ce 	.word	0x080266ce
 8005278:	080266cf 	.word	0x080266cf
 800527c:	080266d0 	.word	0x080266d0
 8005280:	080266d3 	.word	0x080266d3
 8005284:	080266d4 	.word	0x080266d4
 8005288:	080266d5 	.word	0x080266d5
 800528c:	080266d6 	.word	0x080266d6
 8005290:	080266d7 	.word	0x080266d7
 8005294:	080266bd 	.word	0x080266bd
 8005298:	080266d8 	.word	0x080266d8
 800529c:	080266d9 	.word	0x080266d9
 80052a0:	080266da 	.word	0x080266da
 80052a4:	080266db 	.word	0x080266db
 80052a8:	080266dc 	.word	0x080266dc
 80052ac:	080266dd 	.word	0x080266dd
 80052b0:	080266d1 	.word	0x080266d1
 80052b4:	080266de 	.word	0x080266de
 80052b8:	080266df 	.word	0x080266df
 80052bc:	080266e0 	.word	0x080266e0
 80052c0:	080266bb 	.word	0x080266bb
 80052c4:	080266b5 	.word	0x080266b5
 80052c8:	080266e1 	.word	0x080266e1
 80052cc:	080266a7 	.word	0x080266a7
 80052d0:	080266e2 	.word	0x080266e2
 80052d4:	08026699 	.word	0x08026699
 80052d8:	080266e3 	.word	0x080266e3
 80052dc:	0802668f 	.word	0x0802668f
 80052e0:	080266e4 	.word	0x080266e4
 80052e4:	080266f1 	.word	0x080266f1
 80052e8:	08026685 	.word	0x08026685
 80052ec:	080266e5 	.word	0x080266e5
 80052f0:	08026676 	.word	0x08026676
 80052f4:	08026667 	.word	0x08026667
 80052f8:	0802665d 	.word	0x0802665d
 80052fc:	0802664e 	.word	0x0802664e
 8005300:	0802663f 	.word	0x0802663f
 8005304:	080266e6 	.word	0x080266e6
 8005308:	08026635 	.word	0x08026635
 800530c:	080266e7 	.word	0x080266e7
 8005310:	0802662b 	.word	0x0802662b
 8005314:	f000 f978 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005318:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800531a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800531c:	4a8e      	ldr	r2, [pc, #568]	@ (8005558 <OTM8009A_Init+0x69c>)
 800531e:	21cc      	movs	r1, #204	@ 0xcc
 8005320:	4628      	mov	r0, r5
 8005322:	f000 f971 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005326:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005328:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800532a:	4a8c      	ldr	r2, [pc, #560]	@ (800555c <OTM8009A_Init+0x6a0>)
 800532c:	4619      	mov	r1, r3
 800532e:	4628      	mov	r0, r5
 8005330:	f000 f96a 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005334:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005336:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005338:	4a89      	ldr	r2, [pc, #548]	@ (8005560 <OTM8009A_Init+0x6a4>)
 800533a:	21cc      	movs	r1, #204	@ 0xcc
 800533c:	4628      	mov	r0, r5
 800533e:	f000 f963 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005342:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005344:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005346:	4a87      	ldr	r2, [pc, #540]	@ (8005564 <OTM8009A_Init+0x6a8>)
 8005348:	4619      	mov	r1, r3
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f95c 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005350:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005352:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005354:	4a84      	ldr	r2, [pc, #528]	@ (8005568 <OTM8009A_Init+0x6ac>)
 8005356:	21cc      	movs	r1, #204	@ 0xcc
 8005358:	4628      	mov	r0, r5
 800535a:	f000 f955 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800535e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005360:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005362:	4a82      	ldr	r2, [pc, #520]	@ (800556c <OTM8009A_Init+0x6b0>)
 8005364:	4619      	mov	r1, r3
 8005366:	4628      	mov	r0, r5
 8005368:	f000 f94e 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800536c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800536e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005370:	4a7f      	ldr	r2, [pc, #508]	@ (8005570 <OTM8009A_Init+0x6b4>)
 8005372:	21cc      	movs	r1, #204	@ 0xcc
 8005374:	4628      	mov	r0, r5
 8005376:	f000 f947 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800537a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800537c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800537e:	4a7d      	ldr	r2, [pc, #500]	@ (8005574 <OTM8009A_Init+0x6b8>)
 8005380:	4619      	mov	r1, r3
 8005382:	4628      	mov	r0, r5
 8005384:	f000 f940 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005388:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800538a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800538c:	4a7a      	ldr	r2, [pc, #488]	@ (8005578 <OTM8009A_Init+0x6bc>)
 800538e:	21cc      	movs	r1, #204	@ 0xcc
 8005390:	4628      	mov	r0, r5
 8005392:	f000 f939 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005396:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005398:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800539a:	4a78      	ldr	r2, [pc, #480]	@ (800557c <OTM8009A_Init+0x6c0>)
 800539c:	4619      	mov	r1, r3
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f932 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80053a4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80053a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80053a8:	4a75      	ldr	r2, [pc, #468]	@ (8005580 <OTM8009A_Init+0x6c4>)
 80053aa:	21cc      	movs	r1, #204	@ 0xcc
 80053ac:	4628      	mov	r0, r5
 80053ae:	f000 f92b 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80053b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80053b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80053b6:	4a73      	ldr	r2, [pc, #460]	@ (8005584 <OTM8009A_Init+0x6c8>)
 80053b8:	4619      	mov	r1, r3
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 f924 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80053c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80053c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80053c4:	4a70      	ldr	r2, [pc, #448]	@ (8005588 <OTM8009A_Init+0x6cc>)
 80053c6:	21c5      	movs	r1, #197	@ 0xc5
 80053c8:	4628      	mov	r0, r5
 80053ca:	f000 f91d 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80053ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80053d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80053d2:	4a6e      	ldr	r2, [pc, #440]	@ (800558c <OTM8009A_Init+0x6d0>)
 80053d4:	4619      	mov	r1, r3
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 f916 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80053dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80053de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80053e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005590 <OTM8009A_Init+0x6d4>)
 80053e2:	21f5      	movs	r1, #245	@ 0xf5
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 f90f 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80053ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80053ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80053ee:	4a69      	ldr	r2, [pc, #420]	@ (8005594 <OTM8009A_Init+0x6d8>)
 80053f0:	4619      	mov	r1, r3
 80053f2:	4628      	mov	r0, r5
 80053f4:	f000 f908 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80053f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80053fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80053fc:	4a66      	ldr	r2, [pc, #408]	@ (8005598 <OTM8009A_Init+0x6dc>)
 80053fe:	21c6      	movs	r1, #198	@ 0xc6
 8005400:	4628      	mov	r0, r5
 8005402:	f000 f901 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005406:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005408:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800540a:	4a64      	ldr	r2, [pc, #400]	@ (800559c <OTM8009A_Init+0x6e0>)
 800540c:	4619      	mov	r1, r3
 800540e:	4628      	mov	r0, r5
 8005410:	f000 f8fa 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005414:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005416:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005418:	4a61      	ldr	r2, [pc, #388]	@ (80055a0 <OTM8009A_Init+0x6e4>)
 800541a:	21ff      	movs	r1, #255	@ 0xff
 800541c:	4628      	mov	r0, r5
 800541e:	f000 f8f3 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005422:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005424:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005426:	4a5d      	ldr	r2, [pc, #372]	@ (800559c <OTM8009A_Init+0x6e0>)
 8005428:	4619      	mov	r1, r3
 800542a:	4628      	mov	r0, r5
 800542c:	f000 f8ec 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005430:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005432:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005434:	4a59      	ldr	r2, [pc, #356]	@ (800559c <OTM8009A_Init+0x6e0>)
 8005436:	4619      	mov	r1, r3
 8005438:	4628      	mov	r0, r5
 800543a:	f000 f8e5 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800543e:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005440:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005442:	4a58      	ldr	r2, [pc, #352]	@ (80055a4 <OTM8009A_Init+0x6e8>)
 8005444:	21e1      	movs	r1, #225	@ 0xe1
 8005446:	4628      	mov	r0, r5
 8005448:	f000 f8de 	bl	8005608 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800544c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800544e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005450:	4a52      	ldr	r2, [pc, #328]	@ (800559c <OTM8009A_Init+0x6e0>)
 8005452:	4619      	mov	r1, r3
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f8d7 	bl	8005608 <otm8009a_write_reg>
 800545a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800545c:	2310      	movs	r3, #16
 800545e:	4a52      	ldr	r2, [pc, #328]	@ (80055a8 <OTM8009A_Init+0x6ec>)
 8005460:	21e2      	movs	r1, #226	@ 0xe2
 8005462:	4628      	mov	r0, r5
 8005464:	f000 f8d0 	bl	8005608 <otm8009a_write_reg>
 8005468:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800546a:	2300      	movs	r3, #0
 800546c:	4a4f      	ldr	r2, [pc, #316]	@ (80055ac <OTM8009A_Init+0x6f0>)
 800546e:	2111      	movs	r1, #17
 8005470:	4628      	mov	r0, r5
 8005472:	f000 f8c9 	bl	8005608 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005476:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005478:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800547a:	4638      	mov	r0, r7
 800547c:	f7ff fd11 	bl	8004ea2 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8005480:	4f4b      	ldr	r7, [pc, #300]	@ (80055b0 <OTM8009A_Init+0x6f4>)
 8005482:	2e00      	cmp	r6, #0
 8005484:	d061      	beq.n	800554a <OTM8009A_Init+0x68e>
 8005486:	2e02      	cmp	r6, #2
 8005488:	d107      	bne.n	800549a <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800548a:	2300      	movs	r3, #0
 800548c:	4a49      	ldr	r2, [pc, #292]	@ (80055b4 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800548e:	213a      	movs	r1, #58	@ 0x3a
 8005490:	4628      	mov	r0, r5
 8005492:	f000 f8b9 	bl	8005608 <otm8009a_write_reg>
 8005496:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005498:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800549a:	f1b8 0f01 	cmp.w	r8, #1
 800549e:	d157      	bne.n	8005550 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80054a0:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80054a2:	f10d 0207 	add.w	r2, sp, #7
 80054a6:	2136      	movs	r1, #54	@ 0x36
 80054a8:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80054aa:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80054ae:	2300      	movs	r3, #0
 80054b0:	f000 f8aa 	bl	8005608 <otm8009a_write_reg>
 80054b4:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80054b6:	2304      	movs	r3, #4
 80054b8:	4a3f      	ldr	r2, [pc, #252]	@ (80055b8 <OTM8009A_Init+0x6fc>)
 80054ba:	212a      	movs	r1, #42	@ 0x2a
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 f8a3 	bl	8005608 <otm8009a_write_reg>
 80054c2:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80054c4:	2304      	movs	r3, #4
 80054c6:	4a3d      	ldr	r2, [pc, #244]	@ (80055bc <OTM8009A_Init+0x700>)
 80054c8:	212b      	movs	r1, #43	@ 0x2b
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f89c 	bl	8005608 <otm8009a_write_reg>
 80054d0:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80054d2:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80054d6:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80054d8:	2300      	movs	r3, #0
 80054da:	4a39      	ldr	r2, [pc, #228]	@ (80055c0 <OTM8009A_Init+0x704>)
 80054dc:	2151      	movs	r1, #81	@ 0x51
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 f892 	bl	8005608 <otm8009a_write_reg>
 80054e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80054e6:	4633      	mov	r3, r6
 80054e8:	4a36      	ldr	r2, [pc, #216]	@ (80055c4 <OTM8009A_Init+0x708>)
 80054ea:	2153      	movs	r1, #83	@ 0x53
 80054ec:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80054ee:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80054f0:	f000 f88a 	bl	8005608 <otm8009a_write_reg>
 80054f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80054f6:	4633      	mov	r3, r6
 80054f8:	4a33      	ldr	r2, [pc, #204]	@ (80055c8 <OTM8009A_Init+0x70c>)
 80054fa:	2155      	movs	r1, #85	@ 0x55
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 f883 	bl	8005608 <otm8009a_write_reg>
 8005502:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005504:	4633      	mov	r3, r6
 8005506:	4a31      	ldr	r2, [pc, #196]	@ (80055cc <OTM8009A_Init+0x710>)
 8005508:	215e      	movs	r1, #94	@ 0x5e
 800550a:	4628      	mov	r0, r5
 800550c:	f000 f87c 	bl	8005608 <otm8009a_write_reg>
 8005510:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005512:	4633      	mov	r3, r6
 8005514:	4a2e      	ldr	r2, [pc, #184]	@ (80055d0 <OTM8009A_Init+0x714>)
 8005516:	2129      	movs	r1, #41	@ 0x29
 8005518:	4628      	mov	r0, r5
 800551a:	f000 f875 	bl	8005608 <otm8009a_write_reg>
 800551e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005520:	4633      	mov	r3, r6
 8005522:	4631      	mov	r1, r6
 8005524:	4a1d      	ldr	r2, [pc, #116]	@ (800559c <OTM8009A_Init+0x6e0>)
 8005526:	4628      	mov	r0, r5
 8005528:	f000 f86e 	bl	8005608 <otm8009a_write_reg>
 800552c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800552e:	4633      	mov	r3, r6
 8005530:	4a28      	ldr	r2, [pc, #160]	@ (80055d4 <OTM8009A_Init+0x718>)
 8005532:	212c      	movs	r1, #44	@ 0x2c
 8005534:	4628      	mov	r0, r5
 8005536:	f000 f867 	bl	8005608 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800553a:	42c4      	cmn	r4, r0
}
 800553c:	bf14      	ite	ne
 800553e:	f04f 30ff 	movne.w	r0, #4294967295
 8005542:	4630      	moveq	r0, r6
 8005544:	b002      	add	sp, #8
 8005546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800554a:	4633      	mov	r3, r6
 800554c:	4a22      	ldr	r2, [pc, #136]	@ (80055d8 <OTM8009A_Init+0x71c>)
 800554e:	e79e      	b.n	800548e <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005550:	2300      	movs	r3, #0
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	e7bf      	b.n	80054d6 <OTM8009A_Init+0x61a>
 8005556:	bf00      	nop
 8005558:	08026621 	.word	0x08026621
 800555c:	080266e5 	.word	0x080266e5
 8005560:	08026612 	.word	0x08026612
 8005564:	080266e1 	.word	0x080266e1
 8005568:	08026603 	.word	0x08026603
 800556c:	080266e2 	.word	0x080266e2
 8005570:	080265f9 	.word	0x080265f9
 8005574:	080266e3 	.word	0x080266e3
 8005578:	080265ea 	.word	0x080265ea
 800557c:	080266e4 	.word	0x080266e4
 8005580:	080265db 	.word	0x080265db
 8005584:	080266d1 	.word	0x080266d1
 8005588:	080266f2 	.word	0x080266f2
 800558c:	080266f3 	.word	0x080266f3
 8005590:	080266f4 	.word	0x080266f4
 8005594:	080266f5 	.word	0x080266f5
 8005598:	080266f6 	.word	0x080266f6
 800559c:	080266c5 	.word	0x080266c5
 80055a0:	080265d8 	.word	0x080265d8
 80055a4:	080265c8 	.word	0x080265c8
 80055a8:	080265b8 	.word	0x080265b8
 80055ac:	080266e8 	.word	0x080266e8
 80055b0:	2400b1f4 	.word	0x2400b1f4
 80055b4:	080266e9 	.word	0x080266e9
 80055b8:	080266fb 	.word	0x080266fb
 80055bc:	080266f7 	.word	0x080266f7
 80055c0:	080266eb 	.word	0x080266eb
 80055c4:	080266ec 	.word	0x080266ec
 80055c8:	080266ed 	.word	0x080266ed
 80055cc:	080266ee 	.word	0x080266ee
 80055d0:	080266ef 	.word	0x080266ef
 80055d4:	080266f0 	.word	0x080266f0
 80055d8:	080266ea 	.word	0x080266ea

080055dc <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80055dc:	b160      	cbz	r0, 80055f8 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80055de:	684b      	ldr	r3, [r1, #4]
 80055e0:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80055e2:	688b      	ldr	r3, [r1, #8]
 80055e4:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80055e6:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 80055e8:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80055ea:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80055ec:	4b04      	ldr	r3, [pc, #16]	@ (8005600 <OTM8009A_RegisterBusIO+0x24>)
 80055ee:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80055f0:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <OTM8009A_RegisterBusIO+0x28>)
 80055f2:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 80055f4:	2000      	movs	r0, #0
 80055f6:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	08004e87 	.word	0x08004e87
 8005604:	08004e95 	.word	0x08004e95

08005608 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005608:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800560a:	6804      	ldr	r4, [r0, #0]
 800560c:	6880      	ldr	r0, [r0, #8]
 800560e:	46a4      	mov	ip, r4
}
 8005610:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005614:	4760      	bx	ip
	...

08005618 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8005618:	4a10      	ldr	r2, [pc, #64]	@ (800565c <BSP_I2C4_DeInit+0x44>)
{
 800561a:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800561c:	6813      	ldr	r3, [r2, #0]
 800561e:	3b01      	subs	r3, #1
 8005620:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8005622:	b10b      	cbz	r3, 8005628 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8005624:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8005626:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005628:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800562c:	480c      	ldr	r0, [pc, #48]	@ (8005660 <BSP_I2C4_DeInit+0x48>)
 800562e:	f002 fc0b 	bl	8007e48 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005632:	480b      	ldr	r0, [pc, #44]	@ (8005660 <BSP_I2C4_DeInit+0x48>)
 8005634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005638:	f002 fc06 	bl	8007e48 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800563c:	4a09      	ldr	r2, [pc, #36]	@ (8005664 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800563e:	480a      	ldr	r0, [pc, #40]	@ (8005668 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8005640:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8005644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005648:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800564c:	f002 fe4c 	bl	80082e8 <HAL_I2C_DeInit>
 8005650:	2800      	cmp	r0, #0
 8005652:	d0e7      	beq.n	8005624 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8005654:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005658:	e7e5      	b.n	8005626 <BSP_I2C4_DeInit+0xe>
 800565a:	bf00      	nop
 800565c:	2400bc58 	.word	0x2400bc58
 8005660:	58020c00 	.word	0x58020c00
 8005664:	58024400 	.word	0x58024400
 8005668:	2400b200 	.word	0x2400b200

0800566c <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800566c:	2300      	movs	r3, #0
 800566e:	2201      	movs	r2, #1
{
 8005670:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8005672:	6041      	str	r1, [r0, #4]
{
 8005674:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005676:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005678:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 800567c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005680:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005684:	f002 fdda 	bl	800823c <HAL_I2C_Init>
 8005688:	4601      	mov	r1, r0
 800568a:	b108      	cbz	r0, 8005690 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 800568c:	2001      	movs	r0, #1
}
 800568e:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005690:	4620      	mov	r0, r4
 8005692:	f003 f800 	bl	8008696 <HAL_I2CEx_ConfigAnalogFilter>
 8005696:	4601      	mov	r1, r0
 8005698:	2800      	cmp	r0, #0
 800569a:	d1f7      	bne.n	800568c <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800569c:	4620      	mov	r0, r4
 800569e:	f003 f820 	bl	80086e2 <HAL_I2CEx_ConfigDigitalFilter>
 80056a2:	3800      	subs	r0, #0
 80056a4:	bf18      	it	ne
 80056a6:	2001      	movne	r0, #1
 80056a8:	e7f1      	b.n	800568e <MX_I2C4_Init+0x22>
	...

080056ac <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80056ac:	4ba2      	ldr	r3, [pc, #648]	@ (8005938 <BSP_I2C4_Init+0x28c>)
 80056ae:	48a3      	ldr	r0, [pc, #652]	@ (800593c <BSP_I2C4_Init+0x290>)
{
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	b093      	sub	sp, #76	@ 0x4c
  hbus_i2c4.Instance = BUS_I2C4;
 80056b6:	6003      	str	r3, [r0, #0]
  if (I2c4InitCounter == 0U)
 80056b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005940 <BSP_I2C4_Init+0x294>)
 80056ba:	681c      	ldr	r4, [r3, #0]
 80056bc:	b11c      	cbz	r4, 80056c6 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80056be:	2000      	movs	r0, #0
}
 80056c0:	b013      	add	sp, #76	@ 0x4c
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80056ca:	f002 ffdf 	bl	800868c <HAL_I2C_GetState>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d1f5      	bne.n	80056be <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80056d2:	4d9c      	ldr	r5, [pc, #624]	@ (8005944 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80056d4:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80056d8:	2702      	movs	r7, #2
 80056da:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80056dc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80056e0:	a90d      	add	r1, sp, #52	@ 0x34
 80056e2:	4899      	ldr	r0, [pc, #612]	@ (8005948 <BSP_I2C4_Init+0x29c>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80056e4:	f043 0308 	orr.w	r3, r3, #8
 80056e8:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80056ec:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80056f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80056f8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80056fc:	f043 0308 	orr.w	r3, r3, #8
 8005700:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005704:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005708:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005710:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005716:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800571a:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800571e:	f002 faab 	bl	8007c78 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005726:	a90d      	add	r1, sp, #52	@ 0x34
 8005728:	4887      	ldr	r0, [pc, #540]	@ (8005948 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800572a:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800572c:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005730:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005734:	f002 faa0 	bl	8007c78 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8005738:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800573c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005740:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8005744:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8005748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574c:	930c      	str	r3, [sp, #48]	@ 0x30
 800574e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8005750:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005758:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 800575c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005764:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005768:	f005 fa66 	bl	800ac38 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800576c:	2800      	cmp	r0, #0
 800576e:	d06d      	beq.n	800584c <BSP_I2C4_Init+0x1a0>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005770:	4b76      	ldr	r3, [pc, #472]	@ (800594c <BSP_I2C4_Init+0x2a0>)
  if (tsdadel_max <= 0)
 8005772:	4622      	mov	r2, r4
 8005774:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005776:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800577a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800577e:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 8005954 <BSP_I2C4_Init+0x2a8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005782:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005786:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800578a:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 800578e:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005790:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005794:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8005798:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 800579c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 80057a0:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80057a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005950 <BSP_I2C4_Init+0x2a4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
{
 80057a6:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80057a8:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 80057ac:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 80057b0:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80057b4:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80057b8:	d35b      	bcc.n	8005872 <BSP_I2C4_Init+0x1c6>
 80057ba:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80057bc:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80057be:	9d00      	ldr	r5, [sp, #0]
 80057c0:	42bd      	cmp	r5, r7
 80057c2:	d850      	bhi.n	8005866 <BSP_I2C4_Init+0x1ba>
 80057c4:	42be      	cmp	r6, r7
 80057c6:	d34e      	bcc.n	8005866 <BSP_I2C4_Init+0x1ba>
            if(presc != prev_presc)
 80057c8:	4591      	cmp	r9, r2
 80057ca:	d04c      	beq.n	8005866 <BSP_I2C4_Init+0x1ba>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80057cc:	2514      	movs	r5, #20
 80057ce:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 80057d2:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80057d4:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80057d6:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80057da:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80057dc:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80057e0:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80057e4:	d93c      	bls.n	8005860 <BSP_I2C4_Init+0x1b4>
 80057e6:	4a5a      	ldr	r2, [pc, #360]	@ (8005950 <BSP_I2C4_Init+0x2a4>)
 80057e8:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80057ea:	4b59      	ldr	r3, [pc, #356]	@ (8005950 <BSP_I2C4_Init+0x2a4>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80057ec:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80057f0:	4958      	ldr	r1, [pc, #352]	@ (8005954 <BSP_I2C4_Init+0x2a8>)
 80057f2:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80057f8:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80057fc:	9304      	str	r3, [sp, #16]
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	f10b 0332 	add.w	r3, fp, #50	@ 0x32
 8005808:	9309      	str	r3, [sp, #36]	@ 0x24
 800580a:	f5cb 6380 	rsb	r3, fp, #1024	@ 0x400
 800580e:	3301      	adds	r3, #1
 8005810:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005812:	9b06      	ldr	r3, [sp, #24]
 8005814:	429f      	cmp	r7, r3
 8005816:	d138      	bne.n	800588a <BSP_I2C4_Init+0x1de>
        if (idx < I2C_VALID_TIMING_NBR)
 8005818:	9b00      	ldr	r3, [sp, #0]
 800581a:	2b7f      	cmp	r3, #127	@ 0x7f
 800581c:	d816      	bhi.n	800584c <BSP_I2C4_Init+0x1a0>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800581e:	2114      	movs	r1, #20
 8005820:	9a00      	ldr	r2, [sp, #0]
 8005822:	4b4c      	ldr	r3, [pc, #304]	@ (8005954 <BSP_I2C4_Init+0x2a8>)
 8005824:	434a      	muls	r2, r1
 8005826:	1899      	adds	r1, r3, r2
 8005828:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800582a:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800582c:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005830:	684b      	ldr	r3, [r1, #4]
 8005832:	051b      	lsls	r3, r3, #20
 8005834:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005838:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800583a:	688b      	ldr	r3, [r1, #8]
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005842:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005844:	68cb      	ldr	r3, [r1, #12]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800584a:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800584c:	4621      	mov	r1, r4
 800584e:	483b      	ldr	r0, [pc, #236]	@ (800593c <BSP_I2C4_Init+0x290>)
 8005850:	f7ff ff0c 	bl	800566c <MX_I2C4_Init>
 8005854:	2800      	cmp	r0, #0
 8005856:	f43f af32 	beq.w	80056be <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 800585a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800585e:	e72f      	b.n	80056c0 <BSP_I2C4_Init+0x14>
              prev_presc = presc;
 8005860:	4691      	mov	r9, r2
 8005862:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005866:	f10e 0e01 	add.w	lr, lr, #1
 800586a:	440f      	add	r7, r1
 800586c:	f1be 0f10 	cmp.w	lr, #16
 8005870:	d1a5      	bne.n	80057be <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005872:	f1bc 0f10 	cmp.w	ip, #16
 8005876:	4488      	add	r8, r1
 8005878:	d198      	bne.n	80057ac <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800587a:	3201      	adds	r2, #1
 800587c:	4401      	add	r1, r0
 800587e:	2a10      	cmp	r2, #16
 8005880:	d191      	bne.n	80057a6 <BSP_I2C4_Init+0xfa>
 8005882:	f1ba 0f00 	cmp.w	sl, #0
 8005886:	d1ae      	bne.n	80057e6 <BSP_I2C4_Init+0x13a>
 8005888:	e7af      	b.n	80057ea <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800588a:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800588c:	f04f 0c00 	mov.w	ip, #0
 8005890:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005892:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005896:	441d      	add	r5, r3
 8005898:	eb03 060b 	add.w	r6, r3, fp
 800589c:	9503      	str	r5, [sp, #12]
 800589e:	f6a6 0634 	subw	r6, r6, #2100	@ 0x834
 80058a2:	9d02      	ldr	r5, [sp, #8]
 80058a4:	9608      	str	r6, [sp, #32]
 80058a6:	1aed      	subs	r5, r5, r3
 80058a8:	006d      	lsls	r5, r5, #1
 80058aa:	9501      	str	r5, [sp, #4]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80058ac:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80058ae:	f240 5214 	movw	r2, #1300	@ 0x514
 80058b2:	f8cd c014 	str.w	ip, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80058b6:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80058ba:	4295      	cmp	r5, r2
 80058bc:	d930      	bls.n	8005920 <BSP_I2C4_Init+0x274>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80058be:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80058c2:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 80058c6:	d22b      	bcs.n	8005920 <BSP_I2C4_Init+0x274>
 80058c8:	9e08      	ldr	r6, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80058ca:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80058ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80058d2:	442e      	add	r6, r5
 80058d4:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80058d8:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 80058dc:	f240 4212 	movw	r2, #1042	@ 0x412
 80058e0:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80058e4:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80058e8:	4592      	cmp	sl, r2
 80058ea:	d812      	bhi.n	8005912 <BSP_I2C4_Init+0x266>
 80058ec:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 80058f0:	d30f      	bcc.n	8005912 <BSP_I2C4_Init+0x266>
 80058f2:	4540      	cmp	r0, r8
 80058f4:	d20d      	bcs.n	8005912 <BSP_I2C4_Init+0x266>
              error = -error;
 80058f6:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 80058fa:	bf28      	it	cs
 80058fc:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80058fe:	9a04      	ldr	r2, [sp, #16]
 8005900:	4592      	cmp	sl, r2
 8005902:	d206      	bcs.n	8005912 <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8005904:	9a05      	ldr	r2, [sp, #20]
              prev_error = (uint32_t)error;
 8005906:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
 800590a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800590c:	9a07      	ldr	r2, [sp, #28]
              ret = count;
 800590e:	9700      	str	r7, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005910:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005912:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8005916:	4498      	add	r8, r3
 8005918:	441e      	add	r6, r3
 800591a:	eba9 0903 	sub.w	r9, r9, r3
 800591e:	d1db      	bne.n	80058d8 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005920:	9a01      	ldr	r2, [sp, #4]
 8005922:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8005926:	441d      	add	r5, r3
 8005928:	eba2 0203 	sub.w	r2, r2, r3
 800592c:	9201      	str	r2, [sp, #4]
 800592e:	d1be      	bne.n	80058ae <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005930:	3701      	adds	r7, #1
 8005932:	3114      	adds	r1, #20
 8005934:	e76d      	b.n	8005812 <BSP_I2C4_Init+0x166>
 8005936:	bf00      	nop
 8005938:	58001c00 	.word	0x58001c00
 800593c:	2400b200 	.word	0x2400b200
 8005940:	2400bc58 	.word	0x2400bc58
 8005944:	58024400 	.word	0x58024400
 8005948:	58020c00 	.word	0x58020c00
 800594c:	3b9aca00 	.word	0x3b9aca00
 8005950:	2400b254 	.word	0x2400b254
 8005954:	2400b258 	.word	0x2400b258

08005958 <BSP_I2C4_WriteReg>:
{
 8005958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800595a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800595e:	9200      	str	r2, [sp, #0]
 8005960:	460a      	mov	r2, r1
 8005962:	4601      	mov	r1, r0
 8005964:	4808      	ldr	r0, [pc, #32]	@ (8005988 <BSP_I2C4_WriteReg+0x30>)
 8005966:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800596a:	2301      	movs	r3, #1
 800596c:	f002 fcd6 	bl	800831c <HAL_I2C_Mem_Write>
 8005970:	b140      	cbz	r0, 8005984 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005972:	4805      	ldr	r0, [pc, #20]	@ (8005988 <BSP_I2C4_WriteReg+0x30>)
 8005974:	f002 fe8d 	bl	8008692 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005978:	2804      	cmp	r0, #4
 800597a:	bf14      	ite	ne
 800597c:	f06f 0003 	mvnne.w	r0, #3
 8005980:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005984:	b004      	add	sp, #16
 8005986:	bd10      	pop	{r4, pc}
 8005988:	2400b200 	.word	0x2400b200

0800598c <BSP_I2C4_ReadReg>:
{
 800598c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800598e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005992:	9200      	str	r2, [sp, #0]
 8005994:	460a      	mov	r2, r1
 8005996:	4601      	mov	r1, r0
 8005998:	4808      	ldr	r0, [pc, #32]	@ (80059bc <BSP_I2C4_ReadReg+0x30>)
 800599a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800599e:	2301      	movs	r3, #1
 80059a0:	f002 fd96 	bl	80084d0 <HAL_I2C_Mem_Read>
 80059a4:	b140      	cbz	r0, 80059b8 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80059a6:	4805      	ldr	r0, [pc, #20]	@ (80059bc <BSP_I2C4_ReadReg+0x30>)
 80059a8:	f002 fe73 	bl	8008692 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80059ac:	2804      	cmp	r0, #4
 80059ae:	bf14      	ite	ne
 80059b0:	f06f 0003 	mvnne.w	r0, #3
 80059b4:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80059b8:	b004      	add	sp, #16
 80059ba:	bd10      	pop	{r4, pc}
 80059bc:	2400b200 	.word	0x2400b200

080059c0 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 80059c0:	f000 bd08 	b.w	80063d4 <HAL_GetTick>

080059c4 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 80059c4:	4a09      	ldr	r2, [pc, #36]	@ (80059ec <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80059c6:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 80059ca:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80059cc:	684a      	ldr	r2, [r1, #4]
 80059ce:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 80059d0:	2201      	movs	r2, #1
 80059d2:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 80059d4:	688a      	ldr	r2, [r1, #8]
 80059d6:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 80059d8:	680a      	ldr	r2, [r1, #0]
 80059da:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80059dc:	2200      	movs	r2, #0
 80059de:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80059e2:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 80059e4:	68ca      	ldr	r2, [r1, #12]
 80059e6:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 80059e8:	f004 ba56 	b.w	8009e98 <HAL_QSPI_Init>
 80059ec:	52005000 	.word	0x52005000

080059f0 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 80059f0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80059f2:	b988      	cbnz	r0, 8005a18 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80059f4:	4c0a      	ldr	r4, [pc, #40]	@ (8005a20 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 80059f6:	480b      	ldr	r0, [pc, #44]	@ (8005a24 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80059f8:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80059fa:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80059fc:	b94b      	cbnz	r3, 8005a12 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80059fe:	f7ff f9ba 	bl	8004d76 <MT25TL01G_EnableMemoryMappedModeSTR>
 8005a02:	b110      	cbz	r0, 8005a0a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a04:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005a08:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005a0a:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005a0c:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005a0e:	7023      	strb	r3, [r4, #0]
 8005a10:	e7fa      	b.n	8005a08 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005a12:	f7ff f966 	bl	8004ce2 <MT25TL01G_EnableMemoryMappedModeDTR>
 8005a16:	e7f4      	b.n	8005a02 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005a18:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005a1c:	e7f4      	b.n	8005a08 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8005a1e:	bf00      	nop
 8005a20:	2400bc5c 	.word	0x2400bc5c
 8005a24:	240099c8 	.word	0x240099c8

08005a28 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005a2e:	bb30      	cbnz	r0, 8005a7e <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8005a30:	4d17      	ldr	r5, [pc, #92]	@ (8005a90 <BSP_QSPI_ConfigFlash+0x68>)
 8005a32:	782b      	ldrb	r3, [r5, #0]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d025      	beq.n	8005a84 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a38:	fab2 f382 	clz	r3, r2
 8005a3c:	4e15      	ldr	r6, [pc, #84]	@ (8005a94 <BSP_QSPI_ConfigFlash+0x6c>)
 8005a3e:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005a40:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005a46:	f004 fa27 	bl	8009e98 <HAL_QSPI_Init>
 8005a4a:	b9f0      	cbnz	r0, 8005a8a <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8005a4c:	786b      	ldrb	r3, [r5, #1]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d10f      	bne.n	8005a72 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8005a52:	2c03      	cmp	r4, #3
 8005a54:	d105      	bne.n	8005a62 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005a56:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005a58:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8005a5a:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005a5c:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005a5e:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8005a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff f921 	bl	8004caa <MT25TL01G_ExitQPIMode>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d0f4      	beq.n	8005a56 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a6c:	f06f 0004 	mvn.w	r0, #4
 8005a70:	e7f6      	b.n	8005a60 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8005a72:	2c03      	cmp	r4, #3
 8005a74:	d1ef      	bne.n	8005a56 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8005a76:	4630      	mov	r0, r6
 8005a78:	f7ff f8fb 	bl	8004c72 <MT25TL01G_EnterQPIMode>
 8005a7c:	e7f4      	b.n	8005a68 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8005a7e:	f06f 0001 	mvn.w	r0, #1
 8005a82:	e7ed      	b.n	8005a60 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8005a84:	f06f 0019 	mvn.w	r0, #25
 8005a88:	e7ea      	b.n	8005a60 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005a8a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005a8e:	e7e7      	b.n	8005a60 <BSP_QSPI_ConfigFlash+0x38>
 8005a90:	2400bc5c 	.word	0x2400bc5c
 8005a94:	240099c8 	.word	0x240099c8

08005a98 <BSP_QSPI_Init>:
{
 8005a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	f040 81ac 	bne.w	8005dfe <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005aa6:	4d03      	ldr	r5, [pc, #12]	@ (8005ab4 <BSP_QSPI_Init+0x1c>)
 8005aa8:	782f      	ldrb	r7, [r5, #0]
 8005aaa:	b12f      	cbz	r7, 8005ab8 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8005aac:	2000      	movs	r0, #0
}
 8005aae:	b024      	add	sp, #144	@ 0x90
 8005ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab4:	2400bc5c 	.word	0x2400bc5c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005ab8:	4bc3      	ldr	r3, [pc, #780]	@ (8005dc8 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005aba:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005abe:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005ac0:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8005ac2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005ac6:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005aca:	48c0      	ldr	r0, [pc, #768]	@ (8005dcc <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005acc:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005ad0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ad4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005ad8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005adc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005ae0:	9201      	str	r2, [sp, #4]
 8005ae2:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005ae4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005ae6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aea:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8005aec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005aee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005af2:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005af4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005af8:	f042 0202 	orr.w	r2, r2, #2
 8005afc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b04:	f002 0202 	and.w	r2, r2, #2
 8005b08:	9202      	str	r2, [sp, #8]
 8005b0a:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8005b0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b1c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005b20:	9203      	str	r2, [sp, #12]
 8005b22:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005b24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b28:	f042 0208 	orr.w	r2, r2, #8
 8005b2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b34:	f002 0208 	and.w	r2, r2, #8
 8005b38:	9204      	str	r2, [sp, #16]
 8005b3a:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8005b3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b40:	f042 0220 	orr.w	r2, r2, #32
 8005b44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b4c:	f002 0220 	and.w	r2, r2, #32
 8005b50:	9205      	str	r2, [sp, #20]
 8005b52:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8005b54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b58:	f042 0220 	orr.w	r2, r2, #32
 8005b5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b64:	f002 0220 	and.w	r2, r2, #32
 8005b68:	9206      	str	r2, [sp, #24]
 8005b6a:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005b6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b70:	f042 0220 	orr.w	r2, r2, #32
 8005b74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b7c:	f002 0220 	and.w	r2, r2, #32
 8005b80:	9207      	str	r2, [sp, #28]
 8005b82:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005b84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005b90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005b94:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005b98:	9208      	str	r2, [sp, #32]
 8005b9a:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005b9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ba0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ba4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ba8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005bac:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005bb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005bb8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bbc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005bc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005bc4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005bc8:	920a      	str	r2, [sp, #40]	@ 0x28
 8005bca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005bcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bd4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005bd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005bdc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005be0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005be2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005be4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005be8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	930c      	str	r3, [sp, #48]	@ 0x30
 8005bfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c02:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005c04:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c06:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005c0a:	f002 f835 	bl	8007c78 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005c0e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005c10:	a916      	add	r1, sp, #88	@ 0x58
 8005c12:	486f      	ldr	r0, [pc, #444]	@ (8005dd0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005c14:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005c16:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005c1a:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005c1e:	f002 f82b 	bl	8007c78 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005c22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005c26:	a916      	add	r1, sp, #88	@ 0x58
 8005c28:	486a      	ldr	r0, [pc, #424]	@ (8005dd4 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005c2a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c2c:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005c2e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005c30:	f002 f822 	bl	8007c78 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005c34:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005c36:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005c3a:	4867      	ldr	r0, [pc, #412]	@ (8005dd8 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005c3c:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005c40:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005c42:	f002 f819 	bl	8007c78 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005c46:	a916      	add	r1, sp, #88	@ 0x58
 8005c48:	4864      	ldr	r0, [pc, #400]	@ (8005ddc <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005c4a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005c4e:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005c52:	f002 f811 	bl	8007c78 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005c56:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005c58:	a916      	add	r1, sp, #88	@ 0x58
 8005c5a:	485f      	ldr	r0, [pc, #380]	@ (8005dd8 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005c5c:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005c5e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005c60:	f002 f80a 	bl	8007c78 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005c64:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005c66:	a916      	add	r1, sp, #88	@ 0x58
 8005c68:	485c      	ldr	r0, [pc, #368]	@ (8005ddc <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005c6a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005c6c:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005c6e:	f002 f803 	bl	8007c78 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005c72:	a916      	add	r1, sp, #88	@ 0x58
 8005c74:	4856      	ldr	r0, [pc, #344]	@ (8005dd0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005c76:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005c7a:	f001 fffd 	bl	8007c78 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005c7e:	a916      	add	r1, sp, #88	@ 0x58
 8005c80:	4856      	ldr	r0, [pc, #344]	@ (8005ddc <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005c82:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005c86:	f001 fff7 	bl	8007c78 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005c8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005c8e:	a916      	add	r1, sp, #88	@ 0x58
 8005c90:	484f      	ldr	r0, [pc, #316]	@ (8005dd0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005c92:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005c94:	f001 fff0 	bl	8007c78 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005c98:	463a      	mov	r2, r7
 8005c9a:	210f      	movs	r1, #15
 8005c9c:	205c      	movs	r0, #92	@ 0x5c
 8005c9e:	f001 f995 	bl	8006fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005ca2:	205c      	movs	r0, #92	@ 0x5c
 8005ca4:	f001 f9c4 	bl	8007030 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005ca8:	a811      	add	r0, sp, #68	@ 0x44
 8005caa:	f7fe ff36 	bl	8004b1a <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005cae:	7863      	ldrb	r3, [r4, #1]
 8005cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8005de0 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005cb2:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005cb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005cba:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005cbe:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005cc2:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005cc6:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005cca:	a90d      	add	r1, sp, #52	@ 0x34
 8005ccc:	4845      	ldr	r0, [pc, #276]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005cce:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005cd0:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005cd2:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005cd4:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005cd6:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005cd8:	f7ff fe74 	bl	80059c4 <MX_QSPI_Init>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f040 8091 	bne.w	8005e04 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005ce2:	2103      	movs	r1, #3
 8005ce4:	483f      	ldr	r0, [pc, #252]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005ce6:	f7ff f88c 	bl	8004e02 <MT25TL01G_ResetEnable>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f040 8084 	bne.w	8005df8 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005cf0:	2103      	movs	r1, #3
 8005cf2:	483c      	ldr	r0, [pc, #240]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005cf4:	f7ff f8a6 	bl	8004e44 <MT25TL01G_ResetMemory>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d17d      	bne.n	8005df8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005cfc:	7869      	ldrb	r1, [r5, #1]
 8005cfe:	4839      	ldr	r0, [pc, #228]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005d00:	f7fe ff1c 	bl	8004b3c <MT25TL01G_AutoPollingMemReady>
 8005d04:	4601      	mov	r1, r0
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d176      	bne.n	8005df8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005d0a:	4836      	ldr	r0, [pc, #216]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005d0c:	f7ff f879 	bl	8004e02 <MT25TL01G_ResetEnable>
 8005d10:	4601      	mov	r1, r0
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d170      	bne.n	8005df8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005d16:	4833      	ldr	r0, [pc, #204]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005d18:	f7ff f894 	bl	8004e44 <MT25TL01G_ResetMemory>
 8005d1c:	4601      	mov	r1, r0
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d16a      	bne.n	8005df8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005d22:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005d24:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005d26:	482f      	ldr	r0, [pc, #188]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005d28:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005d2a:	f7fe ff07 	bl	8004b3c <MT25TL01G_AutoPollingMemReady>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d162      	bne.n	8005df8 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005d32:	7869      	ldrb	r1, [r5, #1]
 8005d34:	482b      	ldr	r0, [pc, #172]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005d36:	f7fe ff70 	bl	8004c1a <MT25TL01G_Enter4BytesAddressMode>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d15c      	bne.n	8005df8 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005d3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8005d42:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005d46:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d48:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005d4c:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005d4e:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d50:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005d52:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005d54:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005d58:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005d5a:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005d5c:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005d60:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005d64:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d68:	481e      	ldr	r0, [pc, #120]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005d6a:	f004 f8e1 	bl	8009f30 <HAL_QSPI_Command>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d142      	bne.n	8005df8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d76:	f10d 0102 	add.w	r1, sp, #2
 8005d7a:	481a      	ldr	r0, [pc, #104]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005d7c:	f004 f978 	bl	800a070 <HAL_QSPI_Receive>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d139      	bne.n	8005df8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005d84:	7869      	ldrb	r1, [r5, #1]
 8005d86:	4817      	ldr	r0, [pc, #92]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005d88:	f7fe ff03 	bl	8004b92 <MT25TL01G_WriteEnable>
 8005d8c:	bba0      	cbnz	r0, 8005df8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005d8e:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d94:	a916      	add	r1, sp, #88	@ 0x58
 8005d96:	4813      	ldr	r0, [pc, #76]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005d98:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005d9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005d9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005da2:	051b      	lsls	r3, r3, #20
 8005da4:	0d1b      	lsrs	r3, r3, #20
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dae:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005db2:	f004 f8bd 	bl	8009f30 <HAL_QSPI_Command>
 8005db6:	b9f8      	cbnz	r0, 8005df8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dbc:	f10d 0102 	add.w	r1, sp, #2
 8005dc0:	4808      	ldr	r0, [pc, #32]	@ (8005de4 <BSP_QSPI_Init+0x34c>)
 8005dc2:	f004 f8f9 	bl	8009fb8 <HAL_QSPI_Transmit>
 8005dc6:	e00f      	b.n	8005de8 <BSP_QSPI_Init+0x350>
 8005dc8:	58024400 	.word	0x58024400
 8005dcc:	58020400 	.word	0x58020400
 8005dd0:	58021800 	.word	0x58021800
 8005dd4:	58020c00 	.word	0x58020c00
 8005dd8:	58021c00 	.word	0x58021c00
 8005ddc:	58021400 	.word	0x58021400
 8005de0:	08026700 	.word	0x08026700
 8005de4:	240099c8 	.word	0x240099c8
 8005de8:	b930      	cbnz	r0, 8005df8 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005dea:	7862      	ldrb	r2, [r4, #1]
 8005dec:	7821      	ldrb	r1, [r4, #0]
 8005dee:	f7ff fe1b 	bl	8005a28 <BSP_QSPI_ConfigFlash>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	f43f ae5a 	beq.w	8005aac <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005df8:	f06f 0004 	mvn.w	r0, #4
 8005dfc:	e657      	b.n	8005aae <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8005dfe:	f06f 0001 	mvn.w	r0, #1
 8005e02:	e654      	b.n	8005aae <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005e04:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005e08:	e651      	b.n	8005aae <BSP_QSPI_Init+0x16>
 8005e0a:	bf00      	nop

08005e0c <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005e0c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8005e0e:	4604      	mov	r4, r0
 8005e10:	b970      	cbnz	r0, 8005e30 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005e12:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <BSP_SDRAM_DeInit+0x2c>)
 8005e14:	4809      	ldr	r0, [pc, #36]	@ (8005e3c <BSP_SDRAM_DeInit+0x30>)
 8005e16:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005e18:	f006 f8e0 	bl	800bfdc <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005e1c:	207a      	movs	r0, #122	@ 0x7a
 8005e1e:	f001 f915 	bl	800704c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005e22:	4807      	ldr	r0, [pc, #28]	@ (8005e40 <BSP_SDRAM_DeInit+0x34>)
 8005e24:	4b07      	ldr	r3, [pc, #28]	@ (8005e44 <BSP_SDRAM_DeInit+0x38>)
 8005e26:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005e28:	f003 fdbe 	bl	80099a8 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005e2c:	4620      	mov	r0, r4
}
 8005e2e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005e30:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005e34:	e7fb      	b.n	8005e2e <BSP_SDRAM_DeInit+0x22>
 8005e36:	bf00      	nop
 8005e38:	52004140 	.word	0x52004140
 8005e3c:	2400bd60 	.word	0x2400bd60
 8005e40:	2400bc68 	.word	0x2400bc68
 8005e44:	52000040 	.word	0x52000040

08005e48 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005e48:	2201      	movs	r2, #1
 8005e4a:	4915      	ldr	r1, [pc, #84]	@ (8005ea0 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005e4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ea4 <MX_SDRAM_Init+0x5c>)
{
 8005e4e:	b510      	push	{r4, lr}
 8005e50:	b088      	sub	sp, #32
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005e52:	6082      	str	r2, [r0, #8]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005e54:	2440      	movs	r4, #64	@ 0x40
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005e56:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005e5a:	2104      	movs	r1, #4
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005e62:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005e66:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8005e70:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005e74:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005e78:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005e7c:	2207      	movs	r2, #7
 8005e7e:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005e80:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005e84:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8005e86:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005e88:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8005e8c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005e90:	f006 f87c 	bl	800bf8c <HAL_SDRAM_Init>
}
 8005e94:	3800      	subs	r0, #0
 8005e96:	bf18      	it	ne
 8005e98:	2001      	movne	r0, #1
 8005e9a:	b008      	add	sp, #32
 8005e9c:	bd10      	pop	{r4, pc}
 8005e9e:	bf00      	nop
 8005ea0:	52004140 	.word	0x52004140
 8005ea4:	2400bd60 	.word	0x2400bd60

08005ea8 <BSP_SDRAM_Init>:
{
 8005ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005eaa:	4605      	mov	r5, r0
{
 8005eac:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	f040 80dd 	bne.w	800606e <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005eb4:	4b71      	ldr	r3, [pc, #452]	@ (800607c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005eb6:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005eb8:	a909      	add	r1, sp, #36	@ 0x24
 8005eba:	4871      	ldr	r0, [pc, #452]	@ (8006080 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005ebc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005ec0:	4c70      	ldr	r4, [pc, #448]	@ (8006084 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005ec2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005ec6:	4e70      	ldr	r6, [pc, #448]	@ (8006088 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005ec8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005ecc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005ed0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005ed4:	9201      	str	r2, [sp, #4]
 8005ed6:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005ed8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005edc:	f042 0201 	orr.w	r2, r2, #1
 8005ee0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005ee4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005ee8:	f002 0201 	and.w	r2, r2, #1
 8005eec:	9202      	str	r2, [sp, #8]
 8005eee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ef0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ef4:	f042 0208 	orr.w	r2, r2, #8
 8005ef8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005efc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f00:	f002 0208 	and.w	r2, r2, #8
 8005f04:	9203      	str	r2, [sp, #12]
 8005f06:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f0c:	f042 0210 	orr.w	r2, r2, #16
 8005f10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005f14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f18:	f002 0210 	and.w	r2, r2, #16
 8005f1c:	9204      	str	r2, [sp, #16]
 8005f1e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f24:	f042 0220 	orr.w	r2, r2, #32
 8005f28:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005f2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f30:	f002 0220 	and.w	r2, r2, #32
 8005f34:	9205      	str	r2, [sp, #20]
 8005f36:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005f38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f40:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005f44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f48:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005f4c:	9206      	str	r2, [sp, #24]
 8005f4e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f58:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005f5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f60:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005f64:	9207      	str	r2, [sp, #28]
 8005f66:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005f68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f70:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005f74:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7e:	9308      	str	r3, [sp, #32]
 8005f80:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005f88:	230c      	movs	r3, #12
 8005f8a:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005f8e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005f92:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005f94:	f001 fe70 	bl	8007c78 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005f98:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005f9c:	a909      	add	r1, sp, #36	@ 0x24
 8005f9e:	483b      	ldr	r0, [pc, #236]	@ (800608c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005fa0:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005fa2:	f001 fe69 	bl	8007c78 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005fa6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005faa:	a909      	add	r1, sp, #36	@ 0x24
 8005fac:	4838      	ldr	r0, [pc, #224]	@ (8006090 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005fae:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005fb0:	f001 fe62 	bl	8007c78 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005fb4:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005fb8:	a909      	add	r1, sp, #36	@ 0x24
 8005fba:	4836      	ldr	r0, [pc, #216]	@ (8006094 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005fbc:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005fbe:	f001 fe5b 	bl	8007c78 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005fc2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005fc6:	a909      	add	r1, sp, #36	@ 0x24
 8005fc8:	4833      	ldr	r0, [pc, #204]	@ (8006098 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005fca:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005fcc:	f001 fe54 	bl	8007c78 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005fd0:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005fd4:	a909      	add	r1, sp, #36	@ 0x24
 8005fd6:	4831      	ldr	r0, [pc, #196]	@ (800609c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005fd8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005fda:	f001 fe4d 	bl	8007c78 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005fde:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005fe2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005fe6:	f240 2002 	movw	r0, #514	@ 0x202
 8005fea:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005fee:	6334      	str	r4, [r6, #48]	@ 0x30
 8005ff0:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005ff2:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005ff6:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005ffa:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005ffc:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005ffe:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8006000:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8006002:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006006:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800600a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800600e:	4b24      	ldr	r3, [pc, #144]	@ (80060a0 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006010:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006012:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8006014:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006018:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800601c:	f003 fcc4 	bl	80099a8 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8006020:	4620      	mov	r0, r4
 8006022:	f003 fc52 	bl	80098ca <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8006026:	462a      	mov	r2, r5
 8006028:	210f      	movs	r1, #15
 800602a:	207a      	movs	r0, #122	@ 0x7a
 800602c:	f000 ffce 	bl	8006fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8006030:	207a      	movs	r0, #122	@ 0x7a
 8006032:	f000 fffd 	bl	8007030 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8006036:	4630      	mov	r0, r6
 8006038:	f7ff ff06 	bl	8005e48 <MX_SDRAM_Init>
 800603c:	b9d0      	cbnz	r0, 8006074 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800603e:	4919      	ldr	r1, [pc, #100]	@ (80060a4 <BSP_SDRAM_Init+0x1fc>)
 8006040:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8006042:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8006046:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800604a:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800604c:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006050:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8006052:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006056:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800605a:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800605c:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800605e:	f7fe fd2f 	bl	8004ac0 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8006062:	2800      	cmp	r0, #0
 8006064:	bf18      	it	ne
 8006066:	f06f 0004 	mvnne.w	r0, #4
}
 800606a:	b00f      	add	sp, #60	@ 0x3c
 800606c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800606e:	f06f 0001 	mvn.w	r0, #1
 8006072:	e7fa      	b.n	800606a <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8006078:	e7f7      	b.n	800606a <BSP_SDRAM_Init+0x1c2>
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	58020c00 	.word	0x58020c00
 8006084:	2400bcd4 	.word	0x2400bcd4
 8006088:	2400bd60 	.word	0x2400bd60
 800608c:	58021000 	.word	0x58021000
 8006090:	58021400 	.word	0x58021400
 8006094:	58021800 	.word	0x58021800
 8006098:	58021c00 	.word	0x58021c00
 800609c:	58022000 	.word	0x58022000
 80060a0:	52000040 	.word	0x52000040
 80060a4:	2400bd40 	.word	0x2400bd40

080060a8 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	460c      	mov	r4, r1
 80060ae:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80060b0:	4606      	mov	r6, r0
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d15c      	bne.n	8006170 <BSP_TS_Init+0xc8>
 80060b6:	680b      	ldr	r3, [r1, #0]
 80060b8:	1e5a      	subs	r2, r3, #1
 80060ba:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 80060be:	d257      	bcs.n	8006170 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80060c0:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80060c2:	1e51      	subs	r1, r2, #1
 80060c4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80060c8:	d252      	bcs.n	8006170 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80060ca:	4293      	cmp	r3, r2
 80060cc:	bf28      	it	cs
 80060ce:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80060d0:	68e2      	ldr	r2, [r4, #12]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d84c      	bhi.n	8006170 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80060d6:	2370      	movs	r3, #112	@ 0x70
 80060d8:	2254      	movs	r2, #84	@ 0x54
 80060da:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80060de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061b4 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80060e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 80060e6:	4b2e      	ldr	r3, [pc, #184]	@ (80061a0 <BSP_TS_Init+0xf8>)
 80060e8:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80060ea:	4b2e      	ldr	r3, [pc, #184]	@ (80061a4 <BSP_TS_Init+0xfc>)
 80060ec:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80060ee:	4b2e      	ldr	r3, [pc, #184]	@ (80061a8 <BSP_TS_Init+0x100>)
 80060f0:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80060f2:	4b2e      	ldr	r3, [pc, #184]	@ (80061ac <BSP_TS_Init+0x104>)
 80060f4:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 80060f6:	4b2e      	ldr	r3, [pc, #184]	@ (80061b0 <BSP_TS_Init+0x108>)
 80060f8:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80060fa:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80060fe:	a906      	add	r1, sp, #24
 8006100:	482c      	ldr	r0, [pc, #176]	@ (80061b4 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006102:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006106:	f7fe fbe1 	bl	80048cc <FT6X06_RegisterBusIO>
 800610a:	b9c0      	cbnz	r0, 800613e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800610c:	4669      	mov	r1, sp
 800610e:	4829      	ldr	r0, [pc, #164]	@ (80061b4 <BSP_TS_Init+0x10c>)
 8006110:	f7fe fb26 	bl	8004760 <FT6X06_ReadID>
 8006114:	b998      	cbnz	r0, 800613e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8006116:	9b00      	ldr	r3, [sp, #0]
 8006118:	2b11      	cmp	r3, #17
 800611a:	d110      	bne.n	800613e <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800611c:	a903      	add	r1, sp, #12
 800611e:	4825      	ldr	r0, [pc, #148]	@ (80061b4 <BSP_TS_Init+0x10c>)
 8006120:	f7fe fad2 	bl	80046c8 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006124:	4f24      	ldr	r7, [pc, #144]	@ (80061b8 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006126:	4b25      	ldr	r3, [pc, #148]	@ (80061bc <BSP_TS_Init+0x114>)
 8006128:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80061c4 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800612c:	4821      	ldr	r0, [pc, #132]	@ (80061b4 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800612e:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006132:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4798      	blx	r3
 800613a:	4605      	mov	r5, r0
 800613c:	b1d8      	cbz	r0, 8006176 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 800613e:	b116      	cbz	r6, 8006146 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8006140:	f04f 35ff 	mov.w	r5, #4294967295
 8006144:	e010      	b.n	8006168 <BSP_TS_Init+0xc0>
 8006146:	2601      	movs	r6, #1
 8006148:	e7d7      	b.n	80060fa <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800614a:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800614c:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800614e:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006150:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006152:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006154:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800615a:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800615c:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800615e:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006160:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006162:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006164:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8006168:	4628      	mov	r0, r5
 800616a:	b00c      	add	sp, #48	@ 0x30
 800616c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006170:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8006174:	e7f8      	b.n	8006168 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006176:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006178:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800617a:	4e11      	ldr	r6, [pc, #68]	@ (80061c0 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800617c:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800617e:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8006184:	68a3      	ldr	r3, [r4, #8]
 8006186:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8006188:	68e3      	ldr	r3, [r4, #12]
 800618a:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800618c:	f8d8 3000 	ldr.w	r3, [r8]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	4798      	blx	r3
 8006194:	2800      	cmp	r0, #0
 8006196:	dad8      	bge.n	800614a <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006198:	f06f 0504 	mvn.w	r5, #4
 800619c:	e7e4      	b.n	8006168 <BSP_TS_Init+0xc0>
 800619e:	bf00      	nop
 80061a0:	080056ad 	.word	0x080056ad
 80061a4:	08005619 	.word	0x08005619
 80061a8:	0800598d 	.word	0x0800598d
 80061ac:	08005959 	.word	0x08005959
 80061b0:	080059c1 	.word	0x080059c1
 80061b4:	2400bd94 	.word	0x2400bd94
 80061b8:	2400bdbc 	.word	0x2400bdbc
 80061bc:	24000038 	.word	0x24000038
 80061c0:	2400bdc0 	.word	0x2400bdc0
 80061c4:	2400bde8 	.word	0x2400bde8

080061c8 <BSP_TS_GetState>:
{
 80061c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ca:	460c      	mov	r4, r1
 80061cc:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d14d      	bne.n	800626e <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80061d2:	4b28      	ldr	r3, [pc, #160]	@ (8006274 <BSP_TS_GetState+0xac>)
 80061d4:	a901      	add	r1, sp, #4
 80061d6:	4a28      	ldr	r2, [pc, #160]	@ (8006278 <BSP_TS_GetState+0xb0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6810      	ldr	r0, [r2, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	4798      	blx	r3
 80061e0:	2800      	cmp	r0, #0
 80061e2:	db41      	blt.n	8006268 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80061e4:	4925      	ldr	r1, [pc, #148]	@ (800627c <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 80061e6:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80061e8:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80061ea:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 80061ec:	2e00      	cmp	r6, #0
 80061ee:	d037      	beq.n	8006260 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80061f0:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80061f2:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80061f6:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 80061fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80061fe:	bf02      	ittt	eq
 8006200:	4694      	moveq	ip, r2
      x_oriented = state.TouchX;
 8006202:	461a      	moveq	r2, r3
      y_oriented = state.TouchY;
 8006204:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006206:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800620a:	bf1c      	itt	ne
 800620c:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8006210:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006214:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006218:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800621a:	bf44      	itt	mi
 800621c:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8006220:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006222:	680f      	ldr	r7, [r1, #0]
 8006224:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006226:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8006228:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800622a:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800622c:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800622e:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006232:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006236:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006238:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800623a:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800623c:	bf8c      	ite	hi
 800623e:	eba2 0c05 	subhi.w	ip, r2, r5
 8006242:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8006246:	4283      	cmp	r3, r0
 8006248:	bf8c      	ite	hi
 800624a:	1a1e      	subhi	r6, r3, r0
 800624c:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800624e:	4567      	cmp	r7, ip
 8006250:	d301      	bcc.n	8006256 <BSP_TS_GetState+0x8e>
 8006252:	42b7      	cmp	r7, r6
 8006254:	d205      	bcs.n	8006262 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8006256:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006258:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800625a:	2000      	movs	r0, #0
}
 800625c:	b005      	add	sp, #20
 800625e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8006260:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006262:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8006266:	e7f8      	b.n	800625a <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006268:	f06f 0004 	mvn.w	r0, #4
 800626c:	e7f6      	b.n	800625c <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800626e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006272:	e7f3      	b.n	800625c <BSP_TS_GetState+0x94>
 8006274:	2400bde8 	.word	0x2400bde8
 8006278:	2400bdbc 	.word	0x2400bdbc
 800627c:	2400bdc0 	.word	0x2400bdc0

08006280 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006280:	4b2d      	ldr	r3, [pc, #180]	@ (8006338 <SystemInit+0xb8>)
 8006282:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006286:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	f042 0210 	orr.w	r2, r2, #16
 8006294:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006296:	4a29      	ldr	r2, [pc, #164]	@ (800633c <SystemInit+0xbc>)
 8006298:	6813      	ldr	r3, [r2, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	2b06      	cmp	r3, #6
 80062a0:	d805      	bhi.n	80062ae <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	f023 030f 	bic.w	r3, r3, #15
 80062a8:	f043 0307 	orr.w	r3, r3, #7
 80062ac:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80062ae:	4b24      	ldr	r3, [pc, #144]	@ (8006340 <SystemInit+0xc0>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80062b8:	2200      	movs	r2, #0
 80062ba:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80062bc:	4a21      	ldr	r2, [pc, #132]	@ (8006344 <SystemInit+0xc4>)
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80062c2:	491e      	ldr	r1, [pc, #120]	@ (800633c <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 80062c4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80062c6:	680a      	ldr	r2, [r1, #0]
 80062c8:	0712      	lsls	r2, r2, #28
 80062ca:	d505      	bpl.n	80062d8 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80062cc:	680a      	ldr	r2, [r1, #0]
 80062ce:	f022 020f 	bic.w	r2, r2, #15
 80062d2:	f042 0207 	orr.w	r2, r2, #7
 80062d6:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80062d8:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80062da:	491b      	ldr	r1, [pc, #108]	@ (8006348 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 80062dc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80062de:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80062e0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80062e2:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80062e4:	4919      	ldr	r1, [pc, #100]	@ (800634c <SystemInit+0xcc>)
 80062e6:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80062e8:	4919      	ldr	r1, [pc, #100]	@ (8006350 <SystemInit+0xd0>)
 80062ea:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80062ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80062ee:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80062f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80062f2:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80062f4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80062f6:	6819      	ldr	r1, [r3, #0]
 80062f8:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80062fc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80062fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006300:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006304:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800630c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006310:	4b10      	ldr	r3, [pc, #64]	@ (8006354 <SystemInit+0xd4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f36f 030f 	bfc	r3, #0, #16
 8006318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800631c:	d203      	bcs.n	8006326 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800631e:	4b0e      	ldr	r3, [pc, #56]	@ (8006358 <SystemInit+0xd8>)
 8006320:	2201      	movs	r2, #1
 8006322:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <SystemInit+0xdc>)
 8006328:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800632c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800632e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006332:	4b01      	ldr	r3, [pc, #4]	@ (8006338 <SystemInit+0xb8>)
 8006334:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8006336:	4770      	bx	lr
 8006338:	e000ed00 	.word	0xe000ed00
 800633c:	52002000 	.word	0x52002000
 8006340:	58024400 	.word	0x58024400
 8006344:	eaf6ed7f 	.word	0xeaf6ed7f
 8006348:	02020200 	.word	0x02020200
 800634c:	01ff0000 	.word	0x01ff0000
 8006350:	01010280 	.word	0x01010280
 8006354:	5c001000 	.word	0x5c001000
 8006358:	51008000 	.word	0x51008000
 800635c:	52004000 	.word	0x52004000

08006360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006360:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006362:	2003      	movs	r0, #3
 8006364:	f000 fe20 	bl	8006fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006368:	f004 fa6a 	bl	800a840 <HAL_RCC_GetSysClockFreq>
 800636c:	490f      	ldr	r1, [pc, #60]	@ (80063ac <HAL_Init+0x4c>)
 800636e:	4a10      	ldr	r2, [pc, #64]	@ (80063b0 <HAL_Init+0x50>)
 8006370:	698b      	ldr	r3, [r1, #24]
 8006372:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006376:	5cd3      	ldrb	r3, [r2, r3]
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800637e:	698b      	ldr	r3, [r1, #24]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	5cd3      	ldrb	r3, [r2, r3]
 8006386:	4a0b      	ldr	r2, [pc, #44]	@ (80063b4 <HAL_Init+0x54>)
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	fa20 f303 	lsr.w	r3, r0, r3
 8006390:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006392:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <HAL_Init+0x58>)
 8006394:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006396:	2000      	movs	r0, #0
 8006398:	f7fb f96c 	bl	8001674 <HAL_InitTick>
 800639c:	4604      	mov	r4, r0
 800639e:	b918      	cbnz	r0, 80063a8 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80063a0:	f7fa fe12 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80063a4:	4620      	mov	r0, r4
 80063a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80063a8:	2401      	movs	r4, #1
 80063aa:	e7fb      	b.n	80063a4 <HAL_Init+0x44>
 80063ac:	58024400 	.word	0x58024400
 80063b0:	08026708 	.word	0x08026708
 80063b4:	24000068 	.word	0x24000068
 80063b8:	2400006c 	.word	0x2400006c

080063bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80063bc:	4a03      	ldr	r2, [pc, #12]	@ (80063cc <HAL_IncTick+0x10>)
 80063be:	4b04      	ldr	r3, [pc, #16]	@ (80063d0 <HAL_IncTick+0x14>)
 80063c0:	6811      	ldr	r1, [r2, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	440b      	add	r3, r1
 80063c6:	6013      	str	r3, [r2, #0]
}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	2400bdec 	.word	0x2400bdec
 80063d0:	24000070 	.word	0x24000070

080063d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80063d4:	4b01      	ldr	r3, [pc, #4]	@ (80063dc <HAL_GetTick+0x8>)
 80063d6:	6818      	ldr	r0, [r3, #0]
}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	2400bdec 	.word	0x2400bdec

080063e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80063e4:	f7ff fff6 	bl	80063d4 <HAL_GetTick>
 80063e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063ea:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80063ec:	bf1e      	ittt	ne
 80063ee:	4b04      	ldrne	r3, [pc, #16]	@ (8006400 <HAL_Delay+0x20>)
 80063f0:	781b      	ldrbne	r3, [r3, #0]
 80063f2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063f4:	f7ff ffee 	bl	80063d4 <HAL_GetTick>
 80063f8:	1b43      	subs	r3, r0, r5
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	d3fa      	bcc.n	80063f4 <HAL_Delay+0x14>
  {
  }
}
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	24000070 	.word	0x24000070

08006404 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006404:	4b01      	ldr	r3, [pc, #4]	@ (800640c <HAL_GetREVID+0x8>)
 8006406:	6818      	ldr	r0, [r3, #0]
}
 8006408:	0c00      	lsrs	r0, r0, #16
 800640a:	4770      	bx	lr
 800640c:	5c001000 	.word	0x5c001000

08006410 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8006410:	4a03      	ldr	r2, [pc, #12]	@ (8006420 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 8006412:	6853      	ldr	r3, [r2, #4]
 8006414:	ea23 0300 	bic.w	r3, r3, r0
 8006418:	430b      	orrs	r3, r1
 800641a:	6053      	str	r3, [r2, #4]
}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	58000400 	.word	0x58000400

08006424 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006424:	6880      	ldr	r0, [r0, #8]
}
 8006426:	f000 0001 	and.w	r0, r0, #1
 800642a:	4770      	bx	lr

0800642c <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800642c:	6880      	ldr	r0, [r0, #8]
}
 800642e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8006432:	4770      	bx	lr

08006434 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006434:	6803      	ldr	r3, [r0, #0]
 8006436:	4a41      	ldr	r2, [pc, #260]	@ (800653c <HAL_ADC_PollForConversion+0x108>)
 8006438:	4293      	cmp	r3, r2
{
 800643a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643e:	4604      	mov	r4, r0
 8006440:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006442:	d01c      	beq.n	800647e <HAL_ADC_PollForConversion+0x4a>
 8006444:	483e      	ldr	r0, [pc, #248]	@ (8006540 <HAL_ADC_PollForConversion+0x10c>)
 8006446:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800644a:	493e      	ldr	r1, [pc, #248]	@ (8006544 <HAL_ADC_PollForConversion+0x110>)
 800644c:	4283      	cmp	r3, r0
 800644e:	bf18      	it	ne
 8006450:	460a      	movne	r2, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006452:	6925      	ldr	r5, [r4, #16]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006454:	6897      	ldr	r7, [r2, #8]
 8006456:	2d08      	cmp	r5, #8
 8006458:	f007 071f 	and.w	r7, r7, #31
 800645c:	d022      	beq.n	80064a4 <HAL_ADC_PollForConversion+0x70>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800645e:	f240 2221 	movw	r2, #545	@ 0x221
 8006462:	40fa      	lsrs	r2, r7
 8006464:	07d1      	lsls	r1, r2, #31
 8006466:	d50c      	bpl.n	8006482 <HAL_ADC_PollForConversion+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800646e:	d018      	beq.n	80064a2 <HAL_ADC_PollForConversion+0x6e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006470:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8006472:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006474:	f043 0320 	orr.w	r3, r3, #32
 8006478:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800647a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800647e:	4a32      	ldr	r2, [pc, #200]	@ (8006548 <HAL_ADC_PollForConversion+0x114>)
 8006480:	e7e7      	b.n	8006452 <HAL_ADC_PollForConversion+0x1e>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006482:	4a2e      	ldr	r2, [pc, #184]	@ (800653c <HAL_ADC_PollForConversion+0x108>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00a      	beq.n	800649e <HAL_ADC_PollForConversion+0x6a>
 8006488:	482d      	ldr	r0, [pc, #180]	@ (8006540 <HAL_ADC_PollForConversion+0x10c>)
 800648a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800648e:	492d      	ldr	r1, [pc, #180]	@ (8006544 <HAL_ADC_PollForConversion+0x110>)
 8006490:	4283      	cmp	r3, r0
 8006492:	bf18      	it	ne
 8006494:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006496:	6893      	ldr	r3, [r2, #8]
 8006498:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 800649c:	e7e7      	b.n	800646e <HAL_ADC_PollForConversion+0x3a>
 800649e:	4a2a      	ldr	r2, [pc, #168]	@ (8006548 <HAL_ADC_PollForConversion+0x114>)
 80064a0:	e7f9      	b.n	8006496 <HAL_ADC_PollForConversion+0x62>
        tmp_Flag_End = (ADC_FLAG_EOC);
 80064a2:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 80064a4:	f7ff ff96 	bl	80063d4 <HAL_GetTick>
 80064a8:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	422a      	tst	r2, r5
 80064b0:	d025      	beq.n	80064fe <HAL_ADC_PollForConversion+0xca>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b8:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80064c0:	d10f      	bne.n	80064e2 <HAL_ADC_PollForConversion+0xae>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80064c2:	7d62      	ldrb	r2, [r4, #21]
 80064c4:	b96a      	cbnz	r2, 80064e2 <HAL_ADC_PollForConversion+0xae>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	0716      	lsls	r6, r2, #28
 80064ca:	d50a      	bpl.n	80064e2 <HAL_ADC_PollForConversion+0xae>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064d2:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064d6:	04d0      	lsls	r0, r2, #19
 80064d8:	d403      	bmi.n	80064e2 <HAL_ADC_PollForConversion+0xae>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064dc:	f042 0201 	orr.w	r2, r2, #1
 80064e0:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80064e2:	4a17      	ldr	r2, [pc, #92]	@ (8006540 <HAL_ADC_PollForConversion+0x10c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d104      	bne.n	80064f2 <HAL_ADC_PollForConversion+0xbe>
 80064e8:	f240 2221 	movw	r2, #545	@ 0x221
 80064ec:	40fa      	lsrs	r2, r7
 80064ee:	07d1      	lsls	r1, r2, #31
 80064f0:	d51b      	bpl.n	800652a <HAL_ADC_PollForConversion+0xf6>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80064f2:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80064f4:	2d08      	cmp	r5, #8
 80064f6:	d11b      	bne.n	8006530 <HAL_ADC_PollForConversion+0xfc>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80064f8:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80064fa:	2000      	movs	r0, #0
 80064fc:	e7bd      	b.n	800647a <HAL_ADC_PollForConversion+0x46>
    if (Timeout != HAL_MAX_DELAY)
 80064fe:	1c72      	adds	r2, r6, #1
 8006500:	d0d4      	beq.n	80064ac <HAL_ADC_PollForConversion+0x78>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006502:	f7ff ff67 	bl	80063d4 <HAL_GetTick>
 8006506:	eba0 0008 	sub.w	r0, r0, r8
 800650a:	42b0      	cmp	r0, r6
 800650c:	d801      	bhi.n	8006512 <HAL_ADC_PollForConversion+0xde>
 800650e:	2e00      	cmp	r6, #0
 8006510:	d1cb      	bne.n	80064aa <HAL_ADC_PollForConversion+0x76>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	402b      	ands	r3, r5
 8006518:	d1c7      	bne.n	80064aa <HAL_ADC_PollForConversion+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800651a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
          return HAL_TIMEOUT;
 800651c:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800651e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006522:	f042 0204 	orr.w	r2, r2, #4
 8006526:	6562      	str	r2, [r4, #84]	@ 0x54
          return HAL_TIMEOUT;
 8006528:	e7a7      	b.n	800647a <HAL_ADC_PollForConversion+0x46>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800652a:	4a04      	ldr	r2, [pc, #16]	@ (800653c <HAL_ADC_PollForConversion+0x108>)
 800652c:	68d2      	ldr	r2, [r2, #12]
 800652e:	e7e1      	b.n	80064f4 <HAL_ADC_PollForConversion+0xc0>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006530:	0452      	lsls	r2, r2, #17
 8006532:	d4e2      	bmi.n	80064fa <HAL_ADC_PollForConversion+0xc6>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006534:	220c      	movs	r2, #12
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e7df      	b.n	80064fa <HAL_ADC_PollForConversion+0xc6>
 800653a:	bf00      	nop
 800653c:	40022000 	.word	0x40022000
 8006540:	40022100 	.word	0x40022100
 8006544:	58026300 	.word	0x58026300
 8006548:	40022300 	.word	0x40022300

0800654c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800654c:	6803      	ldr	r3, [r0, #0]
 800654e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8006550:	4770      	bx	lr
	...

08006554 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006554:	2300      	movs	r3, #0
{
 8006556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8006558:	9301      	str	r3, [sp, #4]
{
 800655a:	4605      	mov	r5, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800655c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8006560:	2b01      	cmp	r3, #1
 8006562:	f000 81ec 	beq.w	800693e <HAL_ADC_ConfigChannel+0x3ea>
 8006566:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006568:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800656a:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff ff5c 	bl	800642c <LL_ADC_REG_IsConversionOngoing>
 8006574:	2800      	cmp	r0, #0
 8006576:	f040 8180 	bne.w	800687a <HAL_ADC_ConfigChannel+0x326>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800657a:	680a      	ldr	r2, [r1, #0]
 800657c:	2a00      	cmp	r2, #0
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800657e:	ea4f 6092 	mov.w	r0, r2, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8006582:	db07      	blt.n	8006594 <HAL_ADC_ConfigChannel+0x40>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006584:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8006588:	2e00      	cmp	r6, #0
 800658a:	d176      	bne.n	800667a <HAL_ADC_ConfigChannel+0x126>
 800658c:	4084      	lsls	r4, r0
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	4322      	orrs	r2, r4
 8006592:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006594:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006596:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
  MODIFY_REG(*preg,
 800659a:	271f      	movs	r7, #31
 800659c:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80065a0:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 80065a2:	f004 041f 	and.w	r4, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80065a6:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80065aa:	40a7      	lsls	r7, r4
 80065ac:	40a0      	lsls	r0, r4
 80065ae:	f85c 2006 	ldr.w	r2, [ip, r6]
 80065b2:	ea22 0207 	bic.w	r2, r2, r7
 80065b6:	4302      	orrs	r2, r0
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065b8:	4618      	mov	r0, r3
 80065ba:	f84c 2006 	str.w	r2, [ip, r6]
 80065be:	f7ff ff35 	bl	800642c <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	f002 0208 	and.w	r2, r2, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065c8:	4302      	orrs	r2, r0
 80065ca:	d14b      	bne.n	8006664 <HAL_ADC_ConfigChannel+0x110>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80065cc:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80065ce:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80065d2:	2607      	movs	r6, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80065d4:	0dc4      	lsrs	r4, r0, #23
  MODIFY_REG(*preg,
 80065d6:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80065da:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80065de:	4086      	lsls	r6, r0
 80065e0:	593a      	ldr	r2, [r7, r4]
 80065e2:	ea22 0206 	bic.w	r2, r2, r6
 80065e6:	688e      	ldr	r6, [r1, #8]
 80065e8:	4086      	lsls	r6, r0
 80065ea:	4332      	orrs	r2, r6
 80065ec:	513a      	str	r2, [r7, r4]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80065ee:	4aa6      	ldr	r2, [pc, #664]	@ (8006888 <HAL_ADC_ConfigChannel+0x334>)
 80065f0:	6948      	ldr	r0, [r1, #20]
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80065f8:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	d145      	bne.n	800668c <HAL_ADC_ConfigChannel+0x138>
 8006600:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8006604:	0052      	lsls	r2, r2, #1
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006606:	690f      	ldr	r7, [r1, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006608:	4090      	lsls	r0, r2
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800660a:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800660c:	2f04      	cmp	r7, #4
 800660e:	d045      	beq.n	800669c <HAL_ADC_ConfigChannel+0x148>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006610:	f103 0660 	add.w	r6, r3, #96	@ 0x60
    MODIFY_REG(*preg,
 8006614:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8006618:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 800661c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006620:	4322      	orrs	r2, r4
 8006622:	4302      	orrs	r2, r0
 8006624:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006628:	7e48      	ldrb	r0, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800662a:	690c      	ldr	r4, [r1, #16]
 800662c:	1e47      	subs	r7, r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800662e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006632:	4278      	negs	r0, r7
 8006634:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006638:	4178      	adcs	r0, r7
 800663a:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 800663e:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006642:	7e0a      	ldrb	r2, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006644:	690c      	ldr	r4, [r1, #16]
 8006646:	f102 3cff 	add.w	ip, r2, #4294967295
 800664a:	6918      	ldr	r0, [r3, #16]
 800664c:	f004 041f 	and.w	r4, r4, #31
 8006650:	f1dc 0200 	rsbs	r2, ip, #0
 8006654:	f420 40f0 	bic.w	r0, r0, #30720	@ 0x7800
 8006658:	eb42 020c 	adc.w	r2, r2, ip
 800665c:	02d2      	lsls	r2, r2, #11
 800665e:	40a2      	lsls	r2, r4
 8006660:	4302      	orrs	r2, r0
 8006662:	611a      	str	r2, [r3, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff fedd 	bl	8006424 <LL_ADC_IsEnabled>
 800666a:	2800      	cmp	r0, #0
 800666c:	d03d      	beq.n	80066ea <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800666e:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006670:	2300      	movs	r3, #0
 8006672:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8006676:	b003      	add	sp, #12
 8006678:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800667e:	fab2 f282 	clz	r2, r2
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006682:	2401      	movs	r4, #1
 8006684:	f002 021f 	and.w	r2, r2, #31
 8006688:	4094      	lsls	r4, r2
 800668a:	e780      	b.n	800658e <HAL_ADC_ConfigChannel+0x3a>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800668c:	f012 0f10 	tst.w	r2, #16
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	d0b5      	beq.n	8006600 <HAL_ADC_ConfigChannel+0xac>
 8006694:	0852      	lsrs	r2, r2, #1
 8006696:	f002 0208 	and.w	r2, r2, #8
 800669a:	e7b4      	b.n	8006606 <HAL_ADC_ConfigChannel+0xb2>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800669c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800669e:	06a0      	lsls	r0, r4, #26
 80066a0:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80066a4:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80066a8:	d103      	bne.n	80066b2 <HAL_ADC_ConfigChannel+0x15e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80066aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80066ac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80066b0:	661a      	str	r2, [r3, #96]	@ 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066b2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80066b4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80066b8:	4290      	cmp	r0, r2
 80066ba:	d103      	bne.n	80066c4 <HAL_ADC_ConfigChannel+0x170>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80066bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80066be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80066c2:	665a      	str	r2, [r3, #100]	@ 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80066c6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80066ca:	4290      	cmp	r0, r2
 80066cc:	d103      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x182>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80066ce:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80066d0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80066d4:	669a      	str	r2, [r3, #104]	@ 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80066d8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80066dc:	4290      	cmp	r0, r2
 80066de:	d1c1      	bne.n	8006664 <HAL_ADC_ConfigChannel+0x110>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80066e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80066e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80066e6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80066e8:	e7bc      	b.n	8006664 <HAL_ADC_ConfigChannel+0x110>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80066ea:	680c      	ldr	r4, [r1, #0]
 80066ec:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80066ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80066f2:	f3c4 0113 	ubfx	r1, r4, #0, #20
 80066f6:	f000 0618 	and.w	r6, r0, #24
 80066fa:	ea22 0201 	bic.w	r2, r2, r1
 80066fe:	4963      	ldr	r1, [pc, #396]	@ (800688c <HAL_ADC_ConfigChannel+0x338>)
 8006700:	40f1      	lsrs	r1, r6
 8006702:	4021      	ands	r1, r4
 8006704:	430a      	orrs	r2, r1
 8006706:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800670a:	4a61      	ldr	r2, [pc, #388]	@ (8006890 <HAL_ADC_ConfigChannel+0x33c>)
 800670c:	4290      	cmp	r0, r2
 800670e:	d161      	bne.n	80067d4 <HAL_ADC_ConfigChannel+0x280>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8006710:	4a60      	ldr	r2, [pc, #384]	@ (8006894 <HAL_ADC_ConfigChannel+0x340>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d12c      	bne.n	8006770 <HAL_ADC_ConfigChannel+0x21c>
 8006716:	4a60      	ldr	r2, [pc, #384]	@ (8006898 <HAL_ADC_ConfigChannel+0x344>)
 8006718:	4294      	cmp	r4, r2
 800671a:	f000 8093 	beq.w	8006844 <HAL_ADC_ConfigChannel+0x2f0>
 800671e:	4a5f      	ldr	r2, [pc, #380]	@ (800689c <HAL_ADC_ConfigChannel+0x348>)
 8006720:	4294      	cmp	r4, r2
 8006722:	f000 8091 	beq.w	8006848 <HAL_ADC_ConfigChannel+0x2f4>
 8006726:	4a5e      	ldr	r2, [pc, #376]	@ (80068a0 <HAL_ADC_ConfigChannel+0x34c>)
 8006728:	4294      	cmp	r4, r2
 800672a:	f000 808f 	beq.w	800684c <HAL_ADC_ConfigChannel+0x2f8>
 800672e:	4a5d      	ldr	r2, [pc, #372]	@ (80068a4 <HAL_ADC_ConfigChannel+0x350>)
 8006730:	4294      	cmp	r4, r2
 8006732:	f000 808d 	beq.w	8006850 <HAL_ADC_ConfigChannel+0x2fc>
 8006736:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 800673a:	3210      	adds	r2, #16
 800673c:	4294      	cmp	r4, r2
 800673e:	f000 8089 	beq.w	8006854 <HAL_ADC_ConfigChannel+0x300>
 8006742:	4a59      	ldr	r2, [pc, #356]	@ (80068a8 <HAL_ADC_ConfigChannel+0x354>)
 8006744:	4294      	cmp	r4, r2
 8006746:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 800674a:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 800674e:	d035      	beq.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 8006750:	4294      	cmp	r4, r2
 8006752:	d032      	beq.n	80067ba <HAL_ADC_ConfigChannel+0x266>
 8006754:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8006758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800675c:	4294      	cmp	r4, r2
 800675e:	d02a      	beq.n	80067b6 <HAL_ADC_ConfigChannel+0x262>
 8006760:	4a52      	ldr	r2, [pc, #328]	@ (80068ac <HAL_ADC_ConfigChannel+0x358>)
 8006762:	4294      	cmp	r4, r2
 8006764:	d06c      	beq.n	8006840 <HAL_ADC_ConfigChannel+0x2ec>
 8006766:	4a52      	ldr	r2, [pc, #328]	@ (80068b0 <HAL_ADC_ConfigChannel+0x35c>)
 8006768:	4294      	cmp	r4, r2
 800676a:	d177      	bne.n	800685c <HAL_ADC_ConfigChannel+0x308>
 800676c:	4a51      	ldr	r2, [pc, #324]	@ (80068b4 <HAL_ADC_ConfigChannel+0x360>)
 800676e:	e025      	b.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 8006770:	4a51      	ldr	r2, [pc, #324]	@ (80068b8 <HAL_ADC_ConfigChannel+0x364>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d172      	bne.n	800685c <HAL_ADC_ConfigChannel+0x308>
 8006776:	4a48      	ldr	r2, [pc, #288]	@ (8006898 <HAL_ADC_ConfigChannel+0x344>)
 8006778:	4294      	cmp	r4, r2
 800677a:	d063      	beq.n	8006844 <HAL_ADC_ConfigChannel+0x2f0>
 800677c:	4a47      	ldr	r2, [pc, #284]	@ (800689c <HAL_ADC_ConfigChannel+0x348>)
 800677e:	4294      	cmp	r4, r2
 8006780:	d062      	beq.n	8006848 <HAL_ADC_ConfigChannel+0x2f4>
 8006782:	4a47      	ldr	r2, [pc, #284]	@ (80068a0 <HAL_ADC_ConfigChannel+0x34c>)
 8006784:	4294      	cmp	r4, r2
 8006786:	d061      	beq.n	800684c <HAL_ADC_ConfigChannel+0x2f8>
 8006788:	4a46      	ldr	r2, [pc, #280]	@ (80068a4 <HAL_ADC_ConfigChannel+0x350>)
 800678a:	4294      	cmp	r4, r2
 800678c:	d060      	beq.n	8006850 <HAL_ADC_ConfigChannel+0x2fc>
 800678e:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8006792:	3210      	adds	r2, #16
 8006794:	4294      	cmp	r4, r2
 8006796:	d05d      	beq.n	8006854 <HAL_ADC_ConfigChannel+0x300>
 8006798:	4a43      	ldr	r2, [pc, #268]	@ (80068a8 <HAL_ADC_ConfigChannel+0x354>)
 800679a:	4294      	cmp	r4, r2
 800679c:	d05c      	beq.n	8006858 <HAL_ADC_ConfigChannel+0x304>
 800679e:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 80067a2:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 80067a6:	4294      	cmp	r4, r2
 80067a8:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80067ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067b0:	d004      	beq.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 80067b2:	4294      	cmp	r4, r2
 80067b4:	d1d7      	bne.n	8006766 <HAL_ADC_ConfigChannel+0x212>
 80067b6:	4a41      	ldr	r2, [pc, #260]	@ (80068bc <HAL_ADC_ConfigChannel+0x368>)
 80067b8:	e000      	b.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 80067ba:	4a41      	ldr	r2, [pc, #260]	@ (80068c0 <HAL_ADC_ConfigChannel+0x36c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067bc:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80067c0:	fab2 f282 	clz	r2, r2
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80067c4:	2101      	movs	r1, #1
 80067c6:	f002 021f 	and.w	r2, r2, #31
 80067ca:	fa01 f202 	lsl.w	r2, r1, r2
 80067ce:	69d9      	ldr	r1, [r3, #28]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	61da      	str	r2, [r3, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80067d4:	2c00      	cmp	r4, #0
 80067d6:	f6bf af4a 	bge.w	800666e <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067da:	4a2e      	ldr	r2, [pc, #184]	@ (8006894 <HAL_ADC_ConfigChannel+0x340>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d13f      	bne.n	8006860 <HAL_ADC_ConfigChannel+0x30c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80067e0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067e4:	482b      	ldr	r0, [pc, #172]	@ (8006894 <HAL_ADC_ConfigChannel+0x340>)
 80067e6:	6892      	ldr	r2, [r2, #8]
 80067e8:	f7ff fe1c 	bl	8006424 <LL_ADC_IsEnabled>
 80067ec:	4601      	mov	r1, r0
 80067ee:	4832      	ldr	r0, [pc, #200]	@ (80068b8 <HAL_ADC_ConfigChannel+0x364>)
 80067f0:	f7ff fe18 	bl	8006424 <LL_ADC_IsEnabled>
 80067f4:	4301      	orrs	r1, r0
 80067f6:	d140      	bne.n	800687a <HAL_ADC_ConfigChannel+0x326>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067f8:	4832      	ldr	r0, [pc, #200]	@ (80068c4 <HAL_ADC_ConfigChannel+0x370>)
 80067fa:	f002 71e0 	and.w	r1, r2, #29360128	@ 0x1c00000
 80067fe:	4284      	cmp	r4, r0
 8006800:	d176      	bne.n	80068f0 <HAL_ADC_ConfigChannel+0x39c>
 8006802:	0214      	lsls	r4, r2, #8
 8006804:	f53f af33 	bmi.w	800666e <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006808:	4a2f      	ldr	r2, [pc, #188]	@ (80068c8 <HAL_ADC_ConfigChannel+0x374>)
 800680a:	4293      	cmp	r3, r2
 800680c:	f47f af2f 	bne.w	800666e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006810:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8006814:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006818:	430b      	orrs	r3, r1
 800681a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800681e:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006822:	4b2a      	ldr	r3, [pc, #168]	@ (80068cc <HAL_ADC_ConfigChannel+0x378>)
 8006824:	4a2a      	ldr	r2, [pc, #168]	@ (80068d0 <HAL_ADC_ConfigChannel+0x37c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	fbb3 f3f2 	udiv	r3, r3, r2
 800682c:	3301      	adds	r3, #1
 800682e:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8006830:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8006832:	9b01      	ldr	r3, [sp, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f43f af1a 	beq.w	800666e <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	3b01      	subs	r3, #1
 800683e:	e7f7      	b.n	8006830 <HAL_ADC_ConfigChannel+0x2dc>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8006840:	4a24      	ldr	r2, [pc, #144]	@ (80068d4 <HAL_ADC_ConfigChannel+0x380>)
 8006842:	e7bb      	b.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 8006844:	2201      	movs	r2, #1
 8006846:	e7b9      	b.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 8006848:	4a23      	ldr	r2, [pc, #140]	@ (80068d8 <HAL_ADC_ConfigChannel+0x384>)
 800684a:	e7b7      	b.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 800684c:	4a23      	ldr	r2, [pc, #140]	@ (80068dc <HAL_ADC_ConfigChannel+0x388>)
 800684e:	e7b5      	b.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 8006850:	4a23      	ldr	r2, [pc, #140]	@ (80068e0 <HAL_ADC_ConfigChannel+0x38c>)
 8006852:	e7b3      	b.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 8006854:	4a23      	ldr	r2, [pc, #140]	@ (80068e4 <HAL_ADC_ConfigChannel+0x390>)
 8006856:	e7b1      	b.n	80067bc <HAL_ADC_ConfigChannel+0x268>
 8006858:	4a23      	ldr	r2, [pc, #140]	@ (80068e8 <HAL_ADC_ConfigChannel+0x394>)
 800685a:	e7af      	b.n	80067bc <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800685c:	2201      	movs	r2, #1
 800685e:	e7b6      	b.n	80067ce <HAL_ADC_ConfigChannel+0x27a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006860:	4a15      	ldr	r2, [pc, #84]	@ (80068b8 <HAL_ADC_ConfigChannel+0x364>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d102      	bne.n	800686c <HAL_ADC_ConfigChannel+0x318>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006866:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800686a:	e7bb      	b.n	80067e4 <HAL_ADC_ConfigChannel+0x290>
 800686c:	4a1f      	ldr	r2, [pc, #124]	@ (80068ec <HAL_ADC_ConfigChannel+0x398>)
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800686e:	4816      	ldr	r0, [pc, #88]	@ (80068c8 <HAL_ADC_ConfigChannel+0x374>)
 8006870:	6892      	ldr	r2, [r2, #8]
 8006872:	f7ff fdd7 	bl	8006424 <LL_ADC_IsEnabled>
 8006876:	2800      	cmp	r0, #0
 8006878:	d0be      	beq.n	80067f8 <HAL_ADC_ConfigChannel+0x2a4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800687a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800687c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800687e:	f043 0320 	orr.w	r3, r3, #32
 8006882:	656b      	str	r3, [r5, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 8006884:	e6f4      	b.n	8006670 <HAL_ADC_ConfigChannel+0x11c>
 8006886:	bf00      	nop
 8006888:	5c001000 	.word	0x5c001000
 800688c:	000fffff 	.word	0x000fffff
 8006890:	47ff0000 	.word	0x47ff0000
 8006894:	40022000 	.word	0x40022000
 8006898:	04300002 	.word	0x04300002
 800689c:	08600004 	.word	0x08600004
 80068a0:	0c900008 	.word	0x0c900008
 80068a4:	10c00010 	.word	0x10c00010
 80068a8:	2a000400 	.word	0x2a000400
 80068ac:	43210000 	.word	0x43210000
 80068b0:	4b840000 	.word	0x4b840000
 80068b4:	4fb80000 	.word	0x4fb80000
 80068b8:	40022100 	.word	0x40022100
 80068bc:	36902000 	.word	0x36902000
 80068c0:	32601000 	.word	0x32601000
 80068c4:	cb840000 	.word	0xcb840000
 80068c8:	58026000 	.word	0x58026000
 80068cc:	2400006c 	.word	0x2400006c
 80068d0:	00030d40 	.word	0x00030d40
 80068d4:	47520000 	.word	0x47520000
 80068d8:	19200040 	.word	0x19200040
 80068dc:	1d500080 	.word	0x1d500080
 80068e0:	21800100 	.word	0x21800100
 80068e4:	25b00200 	.word	0x25b00200
 80068e8:	2e300800 	.word	0x2e300800
 80068ec:	58026300 	.word	0x58026300
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80068f0:	4814      	ldr	r0, [pc, #80]	@ (8006944 <HAL_ADC_ConfigChannel+0x3f0>)
 80068f2:	4284      	cmp	r4, r0
 80068f4:	d110      	bne.n	8006918 <HAL_ADC_ConfigChannel+0x3c4>
 80068f6:	01d0      	lsls	r0, r2, #7
 80068f8:	f53f aeb9 	bmi.w	800666e <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068fc:	4a12      	ldr	r2, [pc, #72]	@ (8006948 <HAL_ADC_ConfigChannel+0x3f4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	f47f aeb5 	bne.w	800666e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006904:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8006908:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800690c:	430b      	orrs	r3, r1
 800690e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006912:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
}
 8006916:	e6aa      	b.n	800666e <HAL_ADC_ConfigChannel+0x11a>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006918:	480c      	ldr	r0, [pc, #48]	@ (800694c <HAL_ADC_ConfigChannel+0x3f8>)
 800691a:	4284      	cmp	r4, r0
 800691c:	f47f aea7 	bne.w	800666e <HAL_ADC_ConfigChannel+0x11a>
 8006920:	0252      	lsls	r2, r2, #9
 8006922:	f53f aea4 	bmi.w	800666e <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8006926:	4a08      	ldr	r2, [pc, #32]	@ (8006948 <HAL_ADC_ConfigChannel+0x3f4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	f47f aea0 	bne.w	800666e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800692e:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8006932:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006936:	430b      	orrs	r3, r1
 8006938:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800693c:	e7e9      	b.n	8006912 <HAL_ADC_ConfigChannel+0x3be>
  __HAL_LOCK(hadc);
 800693e:	2002      	movs	r0, #2
 8006940:	e699      	b.n	8006676 <HAL_ADC_ConfigChannel+0x122>
 8006942:	bf00      	nop
 8006944:	c7520000 	.word	0xc7520000
 8006948:	58026000 	.word	0x58026000
 800694c:	cfb80000 	.word	0xcfb80000

08006950 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006950:	6803      	ldr	r3, [r0, #0]
{
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fd68 	bl	800642c <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	f002 0208 	and.w	r2, r2, #8
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006962:	4302      	orrs	r2, r0
 8006964:	d101      	bne.n	800696a <ADC_ConversionStop+0x1a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006966:	2000      	movs	r0, #0
}
 8006968:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	0192      	lsls	r2, r2, #6
 800696e:	d53a      	bpl.n	80069e6 <ADC_ConversionStop+0x96>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006970:	8aa0      	ldrh	r0, [r4, #20]
 8006972:	f240 1201 	movw	r2, #257	@ 0x101
 8006976:	4290      	cmp	r0, r2
 8006978:	d135      	bne.n	80069e6 <ADC_ConversionStop+0x96>
 800697a:	4a27      	ldr	r2, [pc, #156]	@ (8006a18 <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800697c:	6819      	ldr	r1, [r3, #0]
 800697e:	064e      	lsls	r6, r1, #25
 8006980:	d525      	bpl.n	80069ce <ADC_ConversionStop+0x7e>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006982:	2240      	movs	r2, #64	@ 0x40
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006984:	2101      	movs	r1, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006986:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fd4f 	bl	800642c <LL_ADC_REG_IsConversionOngoing>
 800698e:	b150      	cbz	r0, 80069a6 <ADC_ConversionStop+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	0795      	lsls	r5, r2, #30
 8006994:	d407      	bmi.n	80069a6 <ADC_ConversionStop+0x56>
  MODIFY_REG(ADCx->CR,
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800699c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80069a0:	f042 0210 	orr.w	r2, r2, #16
 80069a4:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80069a6:	2901      	cmp	r1, #1
 80069a8:	d11f      	bne.n	80069ea <ADC_ConversionStop+0x9a>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80069aa:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80069ac:	f7ff fd12 	bl	80063d4 <HAL_GetTick>
 80069b0:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	422b      	tst	r3, r5
 80069b8:	d0d5      	beq.n	8006966 <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80069ba:	f7ff fd0b 	bl	80063d4 <HAL_GetTick>
 80069be:	1b80      	subs	r0, r0, r6
 80069c0:	2805      	cmp	r0, #5
 80069c2:	d9f6      	bls.n	80069b2 <ADC_ConversionStop+0x62>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	422b      	tst	r3, r5
 80069ca:	d0f2      	beq.n	80069b2 <ADC_ConversionStop+0x62>
 80069cc:	e001      	b.n	80069d2 <ADC_ConversionStop+0x82>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80069ce:	3a01      	subs	r2, #1
 80069d0:	d1d4      	bne.n	800697c <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 80069d4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d6:	f043 0310 	orr.w	r3, r3, #16
 80069da:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 80069e4:	e7c0      	b.n	8006968 <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80069e6:	2902      	cmp	r1, #2
 80069e8:	d1ce      	bne.n	8006988 <ADC_ConversionStop+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	0710      	lsls	r0, r2, #28
 80069ee:	d50a      	bpl.n	8006a06 <ADC_ConversionStop+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	0792      	lsls	r2, r2, #30
 80069f4:	d407      	bmi.n	8006a06 <ADC_ConversionStop+0xb6>
  MODIFY_REG(ADCx->CR,
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80069fc:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006a00:	f042 0220 	orr.w	r2, r2, #32
 8006a04:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8006a06:	2902      	cmp	r1, #2
 8006a08:	d003      	beq.n	8006a12 <ADC_ConversionStop+0xc2>
 8006a0a:	2903      	cmp	r1, #3
 8006a0c:	d1cd      	bne.n	80069aa <ADC_ConversionStop+0x5a>
 8006a0e:	250c      	movs	r5, #12
 8006a10:	e7cc      	b.n	80069ac <ADC_ConversionStop+0x5c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006a12:	2508      	movs	r5, #8
 8006a14:	e7ca      	b.n	80069ac <ADC_ConversionStop+0x5c>
 8006a16:	bf00      	nop
 8006a18:	000cdc01 	.word	0x000cdc01

08006a1c <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a1c:	6802      	ldr	r2, [r0, #0]
{
 8006a1e:	b570      	push	{r4, r5, r6, lr}
 8006a20:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a22:	4610      	mov	r0, r2
 8006a24:	f7ff fcfe 	bl	8006424 <LL_ADC_IsEnabled>
 8006a28:	b108      	cbz	r0, 8006a2e <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a2a:	2000      	movs	r0, #0
}
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006a2e:	6891      	ldr	r1, [r2, #8]
 8006a30:	4b20      	ldr	r3, [pc, #128]	@ (8006ab4 <ADC_Enable+0x98>)
 8006a32:	4219      	tst	r1, r3
 8006a34:	d009      	beq.n	8006a4a <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8006a38:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a3a:	f043 0310 	orr.w	r3, r3, #16
 8006a3e:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	65a3      	str	r3, [r4, #88]	@ 0x58
            return HAL_ERROR;
 8006a48:	e7f0      	b.n	8006a2c <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 8006a4a:	6893      	ldr	r3, [r2, #8]
 8006a4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006a5a:	f7ff fcbb 	bl	80063d4 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	4a15      	ldr	r2, [pc, #84]	@ (8006ab8 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8006a62:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d00c      	beq.n	8006a82 <ADC_Enable+0x66>
 8006a68:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d002      	beq.n	8006a76 <ADC_Enable+0x5a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006a70:	4b12      	ldr	r3, [pc, #72]	@ (8006abc <ADC_Enable+0xa0>)
 8006a72:	689b      	ldr	r3, [r3, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a74:	e003      	b.n	8006a7e <ADC_Enable+0x62>
 8006a76:	4b12      	ldr	r3, [pc, #72]	@ (8006ac0 <ADC_Enable+0xa4>)
 8006a78:	689b      	ldr	r3, [r3, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a7a:	06d9      	lsls	r1, r3, #27
 8006a7c:	d1d5      	bne.n	8006a2a <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 8006a7e:	4e11      	ldr	r6, [pc, #68]	@ (8006ac4 <ADC_Enable+0xa8>)
 8006a80:	e013      	b.n	8006aaa <ADC_Enable+0x8e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006a82:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac0 <ADC_Enable+0xa4>)
 8006a84:	e7f5      	b.n	8006a72 <ADC_Enable+0x56>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a86:	4610      	mov	r0, r2
 8006a88:	f7ff fccc 	bl	8006424 <LL_ADC_IsEnabled>
 8006a8c:	b920      	cbnz	r0, 8006a98 <ADC_Enable+0x7c>
  MODIFY_REG(ADCx->CR,
 8006a8e:	6893      	ldr	r3, [r2, #8]
 8006a90:	4033      	ands	r3, r6
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a98:	f7ff fc9c 	bl	80063d4 <HAL_GetTick>
 8006a9c:	1b40      	subs	r0, r0, r5
 8006a9e:	2802      	cmp	r0, #2
 8006aa0:	d903      	bls.n	8006aaa <ADC_Enable+0x8e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	07da      	lsls	r2, r3, #31
 8006aa8:	d5c5      	bpl.n	8006a36 <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	6813      	ldr	r3, [r2, #0]
 8006aae:	07db      	lsls	r3, r3, #31
 8006ab0:	d5e9      	bpl.n	8006a86 <ADC_Enable+0x6a>
 8006ab2:	e7ba      	b.n	8006a2a <ADC_Enable+0xe>
 8006ab4:	8000003f 	.word	0x8000003f
 8006ab8:	40022000 	.word	0x40022000
 8006abc:	58026300 	.word	0x58026300
 8006ac0:	40022300 	.word	0x40022300
 8006ac4:	7fffffc0 	.word	0x7fffffc0

08006ac8 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8006bb4 <HAL_ADC_Start+0xec>)
{
 8006aca:	b570      	push	{r4, r5, r6, lr}
 8006acc:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ace:	6800      	ldr	r0, [r0, #0]
 8006ad0:	4298      	cmp	r0, r3
 8006ad2:	d055      	beq.n	8006b80 <HAL_ADC_Start+0xb8>
 8006ad4:	4938      	ldr	r1, [pc, #224]	@ (8006bb8 <HAL_ADC_Start+0xf0>)
 8006ad6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8006ada:	4a38      	ldr	r2, [pc, #224]	@ (8006bbc <HAL_ADC_Start+0xf4>)
 8006adc:	4288      	cmp	r0, r1
 8006ade:	bf18      	it	ne
 8006ae0:	4613      	movne	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006ae2:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ae4:	f7ff fca2 	bl	800642c <LL_ADC_REG_IsConversionOngoing>
 8006ae8:	4605      	mov	r5, r0
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d15f      	bne.n	8006bae <HAL_ADC_Start+0xe6>
    __HAL_LOCK(hadc);
 8006aee:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d05b      	beq.n	8006bae <HAL_ADC_Start+0xe6>
 8006af6:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8006af8:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8006afa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8006afe:	f7ff ff8d 	bl	8006a1c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d150      	bne.n	8006ba8 <HAL_ADC_Start+0xe0>
      ADC_STATE_CLR_SET(hadc->State,
 8006b06:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006b08:	f006 011f 	and.w	r1, r6, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8006bb8 <HAL_ADC_Start+0xf0>)
      ADC_STATE_CLR_SET(hadc->State,
 8006b0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b1a:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d130      	bne.n	8006b84 <HAL_ADC_Start+0xbc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b22:	bb89      	cbnz	r1, 8006b88 <HAL_ADC_Start+0xc0>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b24:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006b28:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8006b2a:	f425 1580 	bic.w	r5, r5, #1048576	@ 0x100000
 8006b2e:	6565      	str	r5, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b30:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8006b32:	f415 5580 	ands.w	r5, r5, #4096	@ 0x1000
 8006b36:	d002      	beq.n	8006b3e <HAL_ADC_Start+0x76>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006b38:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8006b3a:	f025 0506 	bic.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8006b3e:	65a5      	str	r5, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b40:	251c      	movs	r5, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b42:	4293      	cmp	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b44:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8006b46:	f04f 0500 	mov.w	r5, #0
 8006b4a:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b4e:	d005      	beq.n	8006b5c <HAL_ADC_Start+0x94>
 8006b50:	f240 2521 	movw	r5, #545	@ 0x221
 8006b54:	fa25 f101 	lsr.w	r1, r5, r1
 8006b58:	07c9      	lsls	r1, r1, #31
 8006b5a:	d517      	bpl.n	8006b8c <HAL_ADC_Start+0xc4>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	0192      	lsls	r2, r2, #6
 8006b60:	d505      	bpl.n	8006b6e <HAL_ADC_Start+0xa6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b64:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006b68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b6c:	6562      	str	r2, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006b74:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006b78:	f042 0204 	orr.w	r2, r2, #4
 8006b7c:	609a      	str	r2, [r3, #8]
}
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b80:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc0 <HAL_ADC_Start+0xf8>)
 8006b82:	e7ae      	b.n	8006ae2 <HAL_ADC_Start+0x1a>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b84:	461a      	mov	r2, r3
 8006b86:	e7cf      	b.n	8006b28 <HAL_ADC_Start+0x60>
 8006b88:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb4 <HAL_ADC_Start+0xec>)
 8006b8a:	e7d1      	b.n	8006b30 <HAL_ADC_Start+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006b8c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b92:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006b94:	68d3      	ldr	r3, [r2, #12]
 8006b96:	019b      	lsls	r3, r3, #6
 8006b98:	d5f1      	bpl.n	8006b7e <HAL_ADC_Start+0xb6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006b9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006ba4:	6563      	str	r3, [r4, #84]	@ 0x54
 8006ba6:	e7ea      	b.n	8006b7e <HAL_ADC_Start+0xb6>
      __HAL_UNLOCK(hadc);
 8006ba8:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8006bac:	e7e7      	b.n	8006b7e <HAL_ADC_Start+0xb6>
    __HAL_LOCK(hadc);
 8006bae:	2002      	movs	r0, #2
 8006bb0:	e7e5      	b.n	8006b7e <HAL_ADC_Start+0xb6>
 8006bb2:	bf00      	nop
 8006bb4:	40022000 	.word	0x40022000
 8006bb8:	40022100 	.word	0x40022100
 8006bbc:	58026300 	.word	0x58026300
 8006bc0:	40022300 	.word	0x40022300

08006bc4 <ADC_Disable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006bc4:	6802      	ldr	r2, [r0, #0]
{
 8006bc6:	b538      	push	{r3, r4, r5, lr}
 8006bc8:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006bca:	4610      	mov	r0, r2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006bcc:	6893      	ldr	r3, [r2, #8]
 8006bce:	f7ff fc29 	bl	8006424 <LL_ADC_IsEnabled>
 8006bd2:	b908      	cbnz	r0, 8006bd8 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006bd4:	2000      	movs	r0, #0
}
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8006bd8:	0799      	lsls	r1, r3, #30
 8006bda:	d4fb      	bmi.n	8006bd4 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006bdc:	6893      	ldr	r3, [r2, #8]
 8006bde:	f003 030d 	and.w	r3, r3, #13
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d119      	bne.n	8006c1a <ADC_Disable+0x56>
  MODIFY_REG(ADCx->CR,
 8006be6:	6893      	ldr	r3, [r2, #8]
 8006be8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bf0:	f043 0302 	orr.w	r3, r3, #2
 8006bf4:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006bfa:	f7ff fbeb 	bl	80063d4 <HAL_GetTick>
 8006bfe:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	07db      	lsls	r3, r3, #31
 8006c06:	d5e5      	bpl.n	8006bd4 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006c08:	f7ff fbe4 	bl	80063d4 <HAL_GetTick>
 8006c0c:	1b40      	subs	r0, r0, r5
 8006c0e:	2802      	cmp	r0, #2
 8006c10:	d9f6      	bls.n	8006c00 <ADC_Disable+0x3c>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	07da      	lsls	r2, r3, #31
 8006c18:	d5f2      	bpl.n	8006c00 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c1a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8006c1c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c1e:	f043 0310 	orr.w	r3, r3, #16
 8006c22:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8006c2c:	e7d3      	b.n	8006bd6 <ADC_Disable+0x12>

08006c2e <HAL_ADC_Stop>:
{
 8006c2e:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8006c30:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8006c34:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d016      	beq.n	8006c68 <HAL_ADC_Stop+0x3a>
 8006c3a:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006c3c:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8006c3e:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006c42:	f7ff fe85 	bl	8006950 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8006c46:	b958      	cbnz	r0, 8006c60 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f7ff ffbb 	bl	8006bc4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8006c4e:	b938      	cbnz	r0, 8006c60 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8006c50:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006c52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8006c60:	2300      	movs	r3, #0
 8006c62:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006c66:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8006c68:	2002      	movs	r0, #2
 8006c6a:	e7fc      	b.n	8006c66 <HAL_ADC_Stop+0x38>

08006c6c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006c6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006c6e:	4a43      	ldr	r2, [pc, #268]	@ (8006d7c <ADC_ConfigureBoostMode+0x110>)
{
 8006c70:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006c72:	6803      	ldr	r3, [r0, #0]
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d003      	beq.n	8006c80 <ADC_ConfigureBoostMode+0x14>
 8006c78:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d125      	bne.n	8006ccc <ADC_ConfigureBoostMode+0x60>
 8006c80:	4b3f      	ldr	r3, [pc, #252]	@ (8006d80 <ADC_ConfigureBoostMode+0x114>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8006c88:	bf14      	ite	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	b9fb      	cbnz	r3, 8006cd0 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006c90:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006c94:	2100      	movs	r1, #0
 8006c96:	f005 f811 	bl	800bcbc <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006c9a:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006c9c:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8006c9e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006ca2:	d04a      	beq.n	8006d3a <ADC_ConfigureBoostMode+0xce>
 8006ca4:	d83f      	bhi.n	8006d26 <ADC_ConfigureBoostMode+0xba>
 8006ca6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006caa:	d044      	beq.n	8006d36 <ADC_ConfigureBoostMode+0xca>
 8006cac:	d836      	bhi.n	8006d1c <ADC_ConfigureBoostMode+0xb0>
 8006cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cb2:	d008      	beq.n	8006cc6 <ADC_ConfigureBoostMode+0x5a>
 8006cb4:	d82c      	bhi.n	8006d10 <ADC_ConfigureBoostMode+0xa4>
 8006cb6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006cba:	d004      	beq.n	8006cc6 <ADC_ConfigureBoostMode+0x5a>
 8006cbc:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006cc0:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8006cc4:	d116      	bne.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006cc6:	0c9b      	lsrs	r3, r3, #18
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	e00f      	b.n	8006cec <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8006d84 <ADC_ConfigureBoostMode+0x118>)
 8006cce:	e7d8      	b.n	8006c82 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8006cd0:	f003 ff7e 	bl	800abd0 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006cd4:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8006cd6:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8006cd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cdc:	d005      	beq.n	8006cea <ADC_ConfigureBoostMode+0x7e>
 8006cde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ce2:	d006      	beq.n	8006cf2 <ADC_ConfigureBoostMode+0x86>
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce8:	d104      	bne.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006cea:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006cec:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8006cf0:	e000      	b.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8006cf2:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006cf4:	f7ff fb86 	bl	8006404 <HAL_GetREVID>
 8006cf8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006cfc:	4298      	cmp	r0, r3
 8006cfe:	682b      	ldr	r3, [r5, #0]
 8006d00:	d823      	bhi.n	8006d4a <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8006d02:	4a21      	ldr	r2, [pc, #132]	@ (8006d88 <ADC_ConfigureBoostMode+0x11c>)
 8006d04:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006d06:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8006d08:	d91b      	bls.n	8006d42 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d0e:	e01a      	b.n	8006d46 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 8006d10:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006d14:	d0d7      	beq.n	8006cc6 <ADC_ConfigureBoostMode+0x5a>
 8006d16:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006d1a:	e7d3      	b.n	8006cc4 <ADC_ConfigureBoostMode+0x58>
 8006d1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d20:	d1e8      	bne.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 8006d22:	0944      	lsrs	r4, r0, #5
        break;
 8006d24:	e7e6      	b.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 8006d26:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006d2a:	d008      	beq.n	8006d3e <ADC_ConfigureBoostMode+0xd2>
 8006d2c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006d30:	d1e0      	bne.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 8006d32:	0a04      	lsrs	r4, r0, #8
        break;
 8006d34:	e7de      	b.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 8006d36:	0904      	lsrs	r4, r0, #4
        break;
 8006d38:	e7dc      	b.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 8006d3a:	0984      	lsrs	r4, r0, #6
        break;
 8006d3c:	e7da      	b.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 8006d3e:	09c4      	lsrs	r4, r0, #7
        break;
 8006d40:	e7d8      	b.n	8006cf4 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006d42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006d46:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8006d4a:	4a10      	ldr	r2, [pc, #64]	@ (8006d8c <ADC_ConfigureBoostMode+0x120>)
 8006d4c:	4294      	cmp	r4, r2
 8006d4e:	d803      	bhi.n	8006d58 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006d56:	e7f6      	b.n	8006d46 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8006d58:	4a0d      	ldr	r2, [pc, #52]	@ (8006d90 <ADC_ConfigureBoostMode+0x124>)
 8006d5a:	4294      	cmp	r4, r2
 8006d5c:	d803      	bhi.n	8006d66 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006d64:	e7d1      	b.n	8006d0a <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 8006d66:	4a0b      	ldr	r2, [pc, #44]	@ (8006d94 <ADC_ConfigureBoostMode+0x128>)
 8006d68:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	bf96      	itet	ls
 8006d6e:	f422 7240 	bicls.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006d72:	f442 7240 	orrhi.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006d76:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006d7a:	e7e4      	b.n	8006d46 <ADC_ConfigureBoostMode+0xda>
 8006d7c:	40022000 	.word	0x40022000
 8006d80:	40022300 	.word	0x40022300
 8006d84:	58026300 	.word	0x58026300
 8006d88:	01312d00 	.word	0x01312d00
 8006d8c:	00bebc21 	.word	0x00bebc21
 8006d90:	017d7841 	.word	0x017d7841
 8006d94:	02faf081 	.word	0x02faf081

08006d98 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8006d98:	2300      	movs	r3, #0
{
 8006d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 8006d9c:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8006d9e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006da0:	2800      	cmp	r0, #0
 8006da2:	f000 80ed 	beq.w	8006f80 <HAL_ADC_Init+0x1e8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006da6:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8006da8:	b925      	cbnz	r5, 8006db4 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8006daa:	f7fa f925 	bl	8000ff8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006dae:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006db0:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006db4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	0090      	lsls	r0, r2, #2
 8006dba:	d505      	bpl.n	8006dc8 <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8006dc2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006dc6:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	00d1      	lsls	r1, r2, #3
 8006dcc:	f140 809e 	bpl.w	8006f0c <HAL_ADC_Init+0x174>
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	00d2      	lsls	r2, r2, #3
 8006dd4:	f100 80b0 	bmi.w	8006f38 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8006dda:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ddc:	f042 0210 	orr.w	r2, r2, #16
 8006de0:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006de2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006de4:	f042 0201 	orr.w	r2, r2, #1
 8006de8:	65a2      	str	r2, [r4, #88]	@ 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fb1e 	bl	800642c <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006df0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006df2:	f002 0210 	and.w	r2, r2, #16
 8006df6:	4302      	orrs	r2, r0
 8006df8:	f040 80be 	bne.w	8006f78 <HAL_ADC_Init+0x1e0>
    ADC_STATE_CLR_SET(hadc->State,
 8006dfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006dfe:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 8006e00:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8006e04:	f042 0202 	orr.w	r2, r2, #2
 8006e08:	6562      	str	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e0a:	f7ff fb0b 	bl	8006424 <LL_ADC_IsEnabled>
 8006e0e:	b988      	cbnz	r0, 8006e34 <HAL_ADC_Init+0x9c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e10:	4a5c      	ldr	r2, [pc, #368]	@ (8006f84 <HAL_ADC_Init+0x1ec>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_ADC_Init+0x88>
 8006e16:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	f040 808e 	bne.w	8006f3c <HAL_ADC_Init+0x1a4>
 8006e20:	4858      	ldr	r0, [pc, #352]	@ (8006f84 <HAL_ADC_Init+0x1ec>)
 8006e22:	f7ff faff 	bl	8006424 <LL_ADC_IsEnabled>
 8006e26:	4603      	mov	r3, r0
 8006e28:	4857      	ldr	r0, [pc, #348]	@ (8006f88 <HAL_ADC_Init+0x1f0>)
 8006e2a:	f7ff fafb 	bl	8006424 <LL_ADC_IsEnabled>
 8006e2e:	4303      	orrs	r3, r0
 8006e30:	f000 8092 	beq.w	8006f58 <HAL_ADC_Init+0x1c0>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006e34:	f7ff fae6 	bl	8006404 <HAL_GetREVID>
 8006e38:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006e3c:	68a2      	ldr	r2, [r4, #8]
 8006e3e:	4298      	cmp	r0, r3
 8006e40:	7f21      	ldrb	r1, [r4, #28]
 8006e42:	7d60      	ldrb	r0, [r4, #21]
 8006e44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006e46:	f240 8089 	bls.w	8006f5c <HAL_ADC_Init+0x1c4>
 8006e4a:	2a10      	cmp	r2, #16
 8006e4c:	f040 8086 	bne.w	8006f5c <HAL_ADC_Init+0x1c4>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e50:	040a      	lsls	r2, r1, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006e52:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f043 031c 	orr.w	r3, r3, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e5c:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006e5e:	bf02      	ittt	eq
 8006e60:	6a22      	ldreq	r2, [r4, #32]
 8006e62:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006e66:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e6a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006e6c:	b122      	cbz	r2, 8006e78 <HAL_ADC_Init+0xe0>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e6e:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006e72:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006e74:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e76:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006e78:	6822      	ldr	r2, [r4, #0]
 8006e7a:	4944      	ldr	r1, [pc, #272]	@ (8006f8c <HAL_ADC_Init+0x1f4>)
 8006e7c:	68d0      	ldr	r0, [r2, #12]
 8006e7e:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e80:	4610      	mov	r0, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006e82:	4319      	orrs	r1, r3
 8006e84:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e86:	f7ff fad1 	bl	800642c <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e8a:	6893      	ldr	r3, [r2, #8]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e90:	4303      	orrs	r3, r0
 8006e92:	d127      	bne.n	8006ee4 <HAL_ADC_Init+0x14c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006e94:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006e96:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006e98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e9c:	f023 0303 	bic.w	r3, r3, #3
 8006ea0:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8006ea4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006eaa:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d15a      	bne.n	8006f68 <HAL_ADC_Init+0x1d0>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006eb2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006eb4:	6910      	ldr	r0, [r2, #16]
 8006eb6:	1e59      	subs	r1, r3, #1
 8006eb8:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	@ 0x40
 8006ebc:	4333      	orrs	r3, r6
 8006ebe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006ec2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	4932      	ldr	r1, [pc, #200]	@ (8006f90 <HAL_ADC_Init+0x1f8>)
 8006ec8:	4001      	ands	r1, r0
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006ed0:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8006ed2:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006ed4:	6913      	ldr	r3, [r2, #16]
 8006ed6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ed8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006edc:	430b      	orrs	r3, r1
 8006ede:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8006ee0:	f7ff fec4 	bl	8006c6c <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006ee4:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006ee6:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d141      	bne.n	8006f70 <HAL_ADC_Init+0x1d8>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006eec:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006eee:	69a3      	ldr	r3, [r4, #24]
 8006ef0:	f021 010f 	bic.w	r1, r1, #15
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006ef8:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006efa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006efc:	f023 0303 	bic.w	r3, r3, #3
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8006f06:	4628      	mov	r0, r5
 8006f08:	b002      	add	sp, #8
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006f0c:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f0e:	4921      	ldr	r1, [pc, #132]	@ (8006f94 <HAL_ADC_Init+0x1fc>)
 8006f10:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8006f14:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006f18:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006f1c:	609a      	str	r2, [r3, #8]
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f98 <HAL_ADC_Init+0x200>)
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	fbb2 f2f1 	udiv	r2, r2, r1
 8006f26:	3201      	adds	r2, #1
      wait_loop_index--;
 8006f28:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8006f2a:	9a01      	ldr	r2, [sp, #4]
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	f43f af4f 	beq.w	8006dd0 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8006f32:	9a01      	ldr	r2, [sp, #4]
 8006f34:	3a01      	subs	r2, #1
 8006f36:	e7f7      	b.n	8006f28 <HAL_ADC_Init+0x190>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f38:	2500      	movs	r5, #0
 8006f3a:	e756      	b.n	8006dea <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f3c:	4817      	ldr	r0, [pc, #92]	@ (8006f9c <HAL_ADC_Init+0x204>)
 8006f3e:	f7ff fa71 	bl	8006424 <LL_ADC_IsEnabled>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f47f af76 	bne.w	8006e34 <HAL_ADC_Init+0x9c>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006f48:	4a15      	ldr	r2, [pc, #84]	@ (8006fa0 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006f4a:	6893      	ldr	r3, [r2, #8]
 8006f4c:	6861      	ldr	r1, [r4, #4]
 8006f4e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8006f52:	430b      	orrs	r3, r1
 8006f54:	6093      	str	r3, [r2, #8]
}
 8006f56:	e76d      	b.n	8006e34 <HAL_ADC_Init+0x9c>
 8006f58:	4a12      	ldr	r2, [pc, #72]	@ (8006fa4 <HAL_ADC_Init+0x20c>)
 8006f5a:	e7f6      	b.n	8006f4a <HAL_ADC_Init+0x1b2>
                  hadc->Init.Overrun                                                    |
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006f66:	e779      	b.n	8006e5c <HAL_ADC_Init+0xc4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006f68:	6913      	ldr	r3, [r2, #16]
 8006f6a:	f023 0301 	bic.w	r3, r3, #1
 8006f6e:	e7af      	b.n	8006ed0 <HAL_ADC_Init+0x138>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006f70:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006f72:	f023 030f 	bic.w	r3, r3, #15
 8006f76:	e7bf      	b.n	8006ef8 <HAL_ADC_Init+0x160>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f78:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006f7a:	f043 0310 	orr.w	r3, r3, #16
 8006f7e:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8006f80:	2501      	movs	r5, #1
 8006f82:	e7c0      	b.n	8006f06 <HAL_ADC_Init+0x16e>
 8006f84:	40022000 	.word	0x40022000
 8006f88:	40022100 	.word	0x40022100
 8006f8c:	fff0c003 	.word	0xfff0c003
 8006f90:	fc00f81e 	.word	0xfc00f81e
 8006f94:	00030d40 	.word	0x00030d40
 8006f98:	2400006c 	.word	0x2400006c
 8006f9c:	58026000 	.word	0x58026000
 8006fa0:	58026300 	.word	0x58026300
 8006fa4:	40022300 	.word	0x40022300

08006fa8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fa8:	4907      	ldr	r1, [pc, #28]	@ (8006fc8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006faa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006fb6:	0412      	lsls	r2, r2, #16
 8006fb8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006fc4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006fc6:	4770      	bx	lr
 8006fc8:	e000ed00 	.word	0xe000ed00

08006fcc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fcc:	4b16      	ldr	r3, [pc, #88]	@ (8007028 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fce:	b530      	push	{r4, r5, lr}
 8006fd0:	68dc      	ldr	r4, [r3, #12]
 8006fd2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fd6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fda:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	bf28      	it	cs
 8006fe0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fe2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fe4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fe8:	bf8c      	ite	hi
 8006fea:	3c03      	subhi	r4, #3
 8006fec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fee:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8006ff2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ff4:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ff8:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ffc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007000:	fa03 f304 	lsl.w	r3, r3, r4
 8007004:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007008:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800700c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800700e:	db06      	blt.n	800701e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007010:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8007014:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8007018:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800701c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800701e:	f000 000f 	and.w	r0, r0, #15
 8007022:	4a02      	ldr	r2, [pc, #8]	@ (800702c <HAL_NVIC_SetPriority+0x60>)
 8007024:	5413      	strb	r3, [r2, r0]
 8007026:	e7f9      	b.n	800701c <HAL_NVIC_SetPriority+0x50>
 8007028:	e000ed00 	.word	0xe000ed00
 800702c:	e000ed14 	.word	0xe000ed14

08007030 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007030:	2800      	cmp	r0, #0
 8007032:	db07      	blt.n	8007044 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007034:	2301      	movs	r3, #1
 8007036:	0941      	lsrs	r1, r0, #5
 8007038:	f000 001f 	and.w	r0, r0, #31
 800703c:	4a02      	ldr	r2, [pc, #8]	@ (8007048 <HAL_NVIC_EnableIRQ+0x18>)
 800703e:	4083      	lsls	r3, r0
 8007040:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	e000e100 	.word	0xe000e100

0800704c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800704c:	2800      	cmp	r0, #0
 800704e:	db0c      	blt.n	800706a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007050:	0943      	lsrs	r3, r0, #5
 8007052:	2201      	movs	r2, #1
 8007054:	f000 001f 	and.w	r0, r0, #31
 8007058:	4904      	ldr	r1, [pc, #16]	@ (800706c <HAL_NVIC_DisableIRQ+0x20>)
 800705a:	3320      	adds	r3, #32
 800705c:	4082      	lsls	r2, r0
 800705e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007062:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007066:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800706a:	4770      	bx	lr
 800706c:	e000e100 	.word	0xe000e100

08007070 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8007070:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007074:	4b04      	ldr	r3, [pc, #16]	@ (8007088 <HAL_MPU_Disable+0x18>)
 8007076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007078:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800707c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	e000ed00 	.word	0xe000ed00

0800708c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800708c:	4b06      	ldr	r3, [pc, #24]	@ (80070a8 <HAL_MPU_Enable+0x1c>)
 800708e:	f040 0001 	orr.w	r0, r0, #1
 8007092:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007098:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800709c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800709e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80070a2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80070a6:	4770      	bx	lr
 80070a8:	e000ed00 	.word	0xe000ed00

080070ac <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80070ac:	7843      	ldrb	r3, [r0, #1]
 80070ae:	4a14      	ldr	r2, [pc, #80]	@ (8007100 <HAL_MPU_ConfigRegion+0x54>)
 80070b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80070b4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80070b8:	f023 0301 	bic.w	r3, r3, #1
 80070bc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80070c0:	6843      	ldr	r3, [r0, #4]
 80070c2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80070c6:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070c8:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80070ca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070cc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80070d0:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070d2:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80070d4:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070d6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80070da:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070dc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80070e0:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070e2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80070e6:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80070ec:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80070ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80070f2:	7a01      	ldrb	r1, [r0, #8]
 80070f4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80070f8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	e000ed00 	.word	0xe000ed00

08007104 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007104:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007106:	4604      	mov	r4, r0
 8007108:	b908      	cbnz	r0, 800710e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800710a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800710c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800710e:	7f43      	ldrb	r3, [r0, #29]
 8007110:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007114:	b913      	cbnz	r3, 800711c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8007116:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8007118:	f7f9 ffb4 	bl	8001084 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800711c:	2302      	movs	r3, #2
 800711e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007120:	7923      	ldrb	r3, [r4, #4]
 8007122:	b9e3      	cbnz	r3, 800715e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	4a13      	ldr	r2, [pc, #76]	@ (8007174 <HAL_CRC_Init+0x70>)
 8007128:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	f022 0218 	bic.w	r2, r2, #24
 8007130:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007132:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007134:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007136:	b9d2      	cbnz	r2, 800716e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007138:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800713c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800713e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	6961      	ldr	r1, [r4, #20]
 8007144:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007148:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800714a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800714c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007154:	430a      	orrs	r2, r1
 8007156:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8007158:	2301      	movs	r3, #1
 800715a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800715c:	e7d6      	b.n	800710c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800715e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f808 	bl	8007178 <HAL_CRCEx_Polynomial_Set>
 8007168:	2800      	cmp	r0, #0
 800716a:	d0e2      	beq.n	8007132 <HAL_CRC_Init+0x2e>
 800716c:	e7cd      	b.n	800710a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800716e:	6922      	ldr	r2, [r4, #16]
 8007170:	e7e4      	b.n	800713c <HAL_CRC_Init+0x38>
 8007172:	bf00      	nop
 8007174:	04c11db7 	.word	0x04c11db7

08007178 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007178:	07cb      	lsls	r3, r1, #31
{
 800717a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800717c:	d50d      	bpl.n	800719a <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800717e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007180:	3b01      	subs	r3, #1
 8007182:	d31d      	bcc.n	80071c0 <HAL_CRCEx_Polynomial_Set+0x48>
 8007184:	fa21 f403 	lsr.w	r4, r1, r3
 8007188:	07e4      	lsls	r4, r4, #31
 800718a:	d5f9      	bpl.n	8007180 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800718c:	2a10      	cmp	r2, #16
 800718e:	d013      	beq.n	80071b8 <HAL_CRCEx_Polynomial_Set+0x40>
 8007190:	2a10      	cmp	r2, #16
 8007192:	d804      	bhi.n	800719e <HAL_CRCEx_Polynomial_Set+0x26>
 8007194:	b13a      	cbz	r2, 80071a6 <HAL_CRCEx_Polynomial_Set+0x2e>
 8007196:	2a08      	cmp	r2, #8
 8007198:	d010      	beq.n	80071bc <HAL_CRCEx_Polynomial_Set+0x44>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
        {
          status =   HAL_ERROR;
 800719a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800719c:	e00b      	b.n	80071b6 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800719e:	2a18      	cmp	r2, #24
 80071a0:	d1fb      	bne.n	800719a <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80071a2:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80071a4:	d8f9      	bhi.n	800719a <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80071a6:	6800      	ldr	r0, [r0, #0]
 80071a8:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80071aa:	6883      	ldr	r3, [r0, #8]
 80071ac:	f023 0318 	bic.w	r3, r3, #24
 80071b0:	4313      	orrs	r3, r2
 80071b2:	6083      	str	r3, [r0, #8]
 80071b4:	2000      	movs	r0, #0
}
 80071b6:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80071b8:	2b07      	cmp	r3, #7
 80071ba:	e7f3      	b.n	80071a4 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80071bc:	2b0f      	cmp	r3, #15
 80071be:	e7f1      	b.n	80071a4 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80071c0:	2a10      	cmp	r2, #16
 80071c2:	d1e5      	bne.n	8007190 <HAL_CRCEx_Polynomial_Set+0x18>
 80071c4:	e7e9      	b.n	800719a <HAL_CRCEx_Polynomial_Set+0x22>

080071c6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80071c6:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80071c8:	4604      	mov	r4, r0
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d036      	beq.n	800723c <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80071ce:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 80071d2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80071d6:	b91b      	cbnz	r3, 80071e0 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80071d8:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80071dc:	f7f9 ff6a 	bl	80010b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071e0:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80071e2:	69e0      	ldr	r0, [r4, #28]
 80071e4:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071e6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80071ee:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80071f0:	6819      	ldr	r1, [r3, #0]
 80071f2:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80071f6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80071fa:	430a      	orrs	r2, r1
 80071fc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80071fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007200:	68a2      	ldr	r2, [r4, #8]
 8007202:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8007206:	4302      	orrs	r2, r0
 8007208:	f021 0101 	bic.w	r1, r1, #1
 800720c:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800720e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007210:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007214:	f36f 020f 	bfc	r2, #0, #16
 8007218:	430a      	orrs	r2, r1
 800721a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800721c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800721e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8007222:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8007226:	0552      	lsls	r2, r2, #21
 8007228:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800722c:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800722e:	430a      	orrs	r2, r1
 8007230:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007232:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007234:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007236:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800723a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800723c:	2001      	movs	r0, #1
 800723e:	e7fc      	b.n	800723a <HAL_DMA2D_Init+0x74>

08007240 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8007240:	4770      	bx	lr

08007242 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8007242:	4770      	bx	lr

08007244 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007244:	6803      	ldr	r3, [r0, #0]
{
 8007246:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007248:	685e      	ldr	r6, [r3, #4]
{
 800724a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800724c:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800724e:	07f2      	lsls	r2, r6, #31
 8007250:	d514      	bpl.n	800727c <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007252:	05e9      	lsls	r1, r5, #23
 8007254:	d512      	bpl.n	800727c <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800725c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800725e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8007260:	f042 0201 	orr.w	r2, r2, #1
 8007264:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007266:	2201      	movs	r2, #1
 8007268:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800726a:	2304      	movs	r3, #4
 800726c:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007270:	2300      	movs	r3, #0
 8007272:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007276:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007278:	b103      	cbz	r3, 800727c <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800727a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800727c:	06b2      	lsls	r2, r6, #26
 800727e:	d516      	bpl.n	80072ae <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007280:	04ab      	lsls	r3, r5, #18
 8007282:	d514      	bpl.n	80072ae <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800728c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800728e:	2220      	movs	r2, #32
 8007290:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007292:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007294:	f043 0302 	orr.w	r3, r3, #2
 8007298:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800729a:	2304      	movs	r3, #4
 800729c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80072a0:	2300      	movs	r3, #0
 80072a2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80072a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80072a8:	b10b      	cbz	r3, 80072ae <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80072aa:	4620      	mov	r0, r4
 80072ac:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80072ae:	0730      	lsls	r0, r6, #28
 80072b0:	d516      	bpl.n	80072e0 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80072b2:	0529      	lsls	r1, r5, #20
 80072b4:	d514      	bpl.n	80072e0 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072be:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80072c0:	2208      	movs	r2, #8
 80072c2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80072c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072c6:	f043 0304 	orr.w	r3, r3, #4
 80072ca:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80072cc:	2304      	movs	r3, #4
 80072ce:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80072d2:	2300      	movs	r3, #0
 80072d4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80072d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80072da:	b10b      	cbz	r3, 80072e0 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80072dc:	4620      	mov	r0, r4
 80072de:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80072e0:	0772      	lsls	r2, r6, #29
 80072e2:	d50b      	bpl.n	80072fc <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80072e4:	056b      	lsls	r3, r5, #21
 80072e6:	d509      	bpl.n	80072fc <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80072e8:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80072ea:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80072f4:	2204      	movs	r2, #4
 80072f6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80072f8:	f7ff ffa2 	bl	8007240 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80072fc:	07b0      	lsls	r0, r6, #30
 80072fe:	d514      	bpl.n	800732a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007300:	05a9      	lsls	r1, r5, #22
 8007302:	d512      	bpl.n	800732a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800730c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800730e:	2202      	movs	r2, #2
 8007310:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007314:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007316:	2301      	movs	r3, #1
 8007318:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800731c:	2300      	movs	r3, #0
 800731e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8007322:	6a23      	ldr	r3, [r4, #32]
 8007324:	b10b      	cbz	r3, 800732a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8007326:	4620      	mov	r0, r4
 8007328:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800732a:	06f2      	lsls	r2, r6, #27
 800732c:	d513      	bpl.n	8007356 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800732e:	04eb      	lsls	r3, r5, #19
 8007330:	d511      	bpl.n	8007356 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007332:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007334:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800733c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800733e:	2210      	movs	r2, #16
 8007340:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007342:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007344:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007346:	2301      	movs	r3, #1
 8007348:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800734c:	2300      	movs	r3, #0
 800734e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007352:	f7ff ff76 	bl	8007242 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8007356:	bd70      	pop	{r4, r5, r6, pc}

08007358 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8007358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800735c:	4607      	mov	r7, r0
 800735e:	460d      	mov	r5, r1
 8007360:	4614      	mov	r4, r2
 8007362:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007364:	f7ff f836 	bl	80063d4 <HAL_GetTick>
 8007368:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800736e:	07d2      	lsls	r2, r2, #31
 8007370:	d50a      	bpl.n	8007388 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007372:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007376:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8007378:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800737a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800737e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007382:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007388:	f7ff f824 	bl	80063d4 <HAL_GetTick>
 800738c:	eba0 0008 	sub.w	r0, r0, r8
 8007390:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007394:	d9e9      	bls.n	800736a <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8007396:	2003      	movs	r0, #3
 8007398:	e7f4      	b.n	8007384 <DSI_ShortWrite.constprop.0+0x2c>

0800739a <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800739a:	7c03      	ldrb	r3, [r0, #16]
{
 800739c:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d05b      	beq.n	800745a <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 80073a2:	6803      	ldr	r3, [r0, #0]
 80073a4:	2000      	movs	r0, #0
 80073a6:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80073aa:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80073ae:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 80073b0:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80073b2:	d507      	bpl.n	80073c4 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80073b4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80073b8:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 80073bc:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 80073c0:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80073c4:	0788      	lsls	r0, r1, #30
 80073c6:	d505      	bpl.n	80073d4 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80073c8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80073cc:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 80073d0:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80073d4:	0748      	lsls	r0, r1, #29
 80073d6:	d505      	bpl.n	80073e4 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80073d8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80073dc:	f040 0001 	orr.w	r0, r0, #1
 80073e0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80073e4:	0708      	lsls	r0, r1, #28
 80073e6:	d505      	bpl.n	80073f4 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80073e8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80073ec:	f040 0002 	orr.w	r0, r0, #2
 80073f0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80073f4:	06c8      	lsls	r0, r1, #27
 80073f6:	d505      	bpl.n	8007404 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80073f8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80073fc:	f040 000c 	orr.w	r0, r0, #12
 8007400:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8007404:	0688      	lsls	r0, r1, #26
 8007406:	d505      	bpl.n	8007414 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8007408:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800740c:	f040 0010 	orr.w	r0, r0, #16
 8007410:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8007414:	0648      	lsls	r0, r1, #25
 8007416:	d505      	bpl.n	8007424 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8007418:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800741c:	f040 0020 	orr.w	r0, r0, #32
 8007420:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8007424:	0608      	lsls	r0, r1, #24
 8007426:	d505      	bpl.n	8007434 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007428:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800742c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8007430:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8007434:	05c8      	lsls	r0, r1, #23
 8007436:	d505      	bpl.n	8007444 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8007438:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800743c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8007440:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8007444:	0589      	lsls	r1, r1, #22
 8007446:	d505      	bpl.n	8007454 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8007448:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800744c:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8007450:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007454:	2000      	movs	r0, #0
 8007456:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8007458:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800745a:	2002      	movs	r0, #2
}
 800745c:	4770      	bx	lr
	...

08007460 <HAL_DSI_Init>:
{
 8007460:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007462:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8007464:	4604      	mov	r4, r0
 8007466:	2800      	cmp	r0, #0
 8007468:	f000 80ea 	beq.w	8007640 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800746c:	7c43      	ldrb	r3, [r0, #17]
 800746e:	b90b      	cbnz	r3, 8007474 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8007470:	f7f9 fe44 	bl	80010fc <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007474:	2303      	movs	r3, #3
 8007476:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007478:	2300      	movs	r3, #0
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8007482:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007486:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800748a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800748e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007496:	f7fe ff9d 	bl	80063d4 <HAL_GetTick>
 800749a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800749c:	6822      	ldr	r2, [r4, #0]
 800749e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 80074a2:	04d9      	lsls	r1, r3, #19
 80074a4:	d56e      	bpl.n	8007584 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80074a6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80074aa:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 80074ae:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80074b2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80074b6:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80074ba:	e9d5 0300 	ldrd	r0, r3, [r5]
 80074be:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80074c0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80074c4:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80074c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80074ca:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80074cc:	430b      	orrs	r3, r1
 80074ce:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80074d2:	2300      	movs	r3, #0
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80074da:	f043 0301 	orr.w	r3, r3, #1
 80074de:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 80074e2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80074ee:	f7fe ff77 	bl	80063e0 <HAL_Delay>
  tickstart = HAL_GetTick();
 80074f2:	f7fe ff6f 	bl	80063d4 <HAL_GetTick>
 80074f6:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80074fe:	05d2      	lsls	r2, r2, #23
 8007500:	d548      	bpl.n	8007594 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8007502:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007504:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8007506:	9202      	str	r2, [sp, #8]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	f042 0201 	orr.w	r2, r2, #1
 800750e:	605a      	str	r2, [r3, #4]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	f002 0201 	and.w	r2, r2, #1
 8007516:	9202      	str	r2, [sp, #8]
 8007518:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007520:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007526:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007528:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800752a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800752e:	f042 0202 	orr.w	r2, r2, #2
 8007532:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8007536:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800753a:	f042 0204 	orr.w	r2, r2, #4
 800753e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007542:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007546:	f022 0203 	bic.w	r2, r2, #3
 800754a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800754e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007552:	430a      	orrs	r2, r1
 8007554:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8007558:	f7fe ff3c 	bl	80063d4 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800755c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800755e:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007564:	079b      	lsls	r3, r3, #30
 8007566:	d025      	beq.n	80075b4 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800756e:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8007572:	2b94      	cmp	r3, #148	@ 0x94
 8007574:	d025      	beq.n	80075c2 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007576:	f7fe ff2d 	bl	80063d4 <HAL_GetTick>
 800757a:	1b80      	subs	r0, r0, r6
 800757c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007580:	d9f2      	bls.n	8007568 <HAL_DSI_Init+0x108>
 8007582:	e014      	b.n	80075ae <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007584:	f7fe ff26 	bl	80063d4 <HAL_GetTick>
 8007588:	1b80      	subs	r0, r0, r6
 800758a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800758e:	d985      	bls.n	800749c <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007590:	2003      	movs	r0, #3
 8007592:	e053      	b.n	800763c <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007594:	f7fe ff1e 	bl	80063d4 <HAL_GetTick>
 8007598:	1b80      	subs	r0, r0, r6
 800759a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800759e:	d9ab      	bls.n	80074f8 <HAL_DSI_Init+0x98>
 80075a0:	e7f6      	b.n	8007590 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80075a2:	f7fe ff17 	bl	80063d4 <HAL_GetTick>
 80075a6:	1b80      	subs	r0, r0, r6
 80075a8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80075ac:	d902      	bls.n	80075b4 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 80075ae:	2300      	movs	r3, #0
 80075b0:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 80075b2:	e7ed      	b.n	8007590 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075ba:	f003 0314 	and.w	r3, r3, #20
 80075be:	2b14      	cmp	r3, #20
 80075c0:	d1ef      	bne.n	80075a2 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80075c2:	686b      	ldr	r3, [r5, #4]
 80075c4:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80075c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007644 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 80075ca:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	bf38      	it	cc
 80075d0:	2301      	movcc	r3, #1
 80075d2:	435a      	muls	r2, r3
 80075d4:	68ab      	ldr	r3, [r5, #8]
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	409a      	lsls	r2, r3
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	434b      	muls	r3, r1
 80075e0:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80075ea:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80075ee:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80075f2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80075f6:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80075f8:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80075fa:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 80075fe:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007602:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8007606:	9003      	str	r0, [sp, #12]
 8007608:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 800760a:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	605a      	str	r2, [r3, #4]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	f002 0201 	and.w	r2, r2, #1
 8007618:	9203      	str	r2, [sp, #12]
 800761a:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800761c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007620:	f022 0203 	bic.w	r2, r2, #3
 8007624:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007628:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800762c:	430a      	orrs	r2, r1
 800762e:	f042 0201 	orr.w	r2, r2, #1
 8007632:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8007636:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007638:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 800763a:	7463      	strb	r3, [r4, #17]
}
 800763c:	b004      	add	sp, #16
 800763e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007640:	2001      	movs	r0, #1
 8007642:	e7fb      	b.n	800763c <HAL_DSI_Init+0x1dc>
 8007644:	003d0900 	.word	0x003d0900

08007648 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8007648:	4770      	bx	lr

0800764a <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800764a:	6803      	ldr	r3, [r0, #0]
 800764c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007650:	07d1      	lsls	r1, r2, #31
{
 8007652:	b510      	push	{r4, lr}
 8007654:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007656:	d508      	bpl.n	800766a <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007658:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800765c:	07d2      	lsls	r2, r2, #31
 800765e:	d504      	bpl.n	800766a <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007660:	2201      	movs	r2, #1
 8007662:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007666:	f7fa fc93 	bl	8001f90 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007670:	0791      	lsls	r1, r2, #30
 8007672:	d509      	bpl.n	8007688 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007674:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007678:	0792      	lsls	r2, r2, #30
 800767a:	d505      	bpl.n	8007688 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800767c:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800767e:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007680:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007684:	f7fa fcb8 	bl	8001ff8 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8007688:	69a3      	ldr	r3, [r4, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d04e      	beq.n	800772c <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800768e:	6821      	ldr	r1, [r4, #0]
 8007690:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007694:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8007698:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800769a:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800769e:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 80076a2:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80076a4:	b291      	uxth	r1, r2
 80076a6:	b119      	cbz	r1, 80076b0 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80076a8:	6961      	ldr	r1, [r4, #20]
 80076aa:	f041 0101 	orr.w	r1, r1, #1
 80076ae:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80076b0:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 80076b4:	d003      	beq.n	80076be <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80076b6:	6962      	ldr	r2, [r4, #20]
 80076b8:	f042 0202 	orr.w	r2, r2, #2
 80076bc:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80076be:	07d8      	lsls	r0, r3, #31
 80076c0:	d503      	bpl.n	80076ca <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80076c2:	6962      	ldr	r2, [r4, #20]
 80076c4:	f042 0204 	orr.w	r2, r2, #4
 80076c8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80076ca:	0799      	lsls	r1, r3, #30
 80076cc:	d503      	bpl.n	80076d6 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80076ce:	6962      	ldr	r2, [r4, #20]
 80076d0:	f042 0208 	orr.w	r2, r2, #8
 80076d4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80076d6:	f013 0f0c 	tst.w	r3, #12
 80076da:	d003      	beq.n	80076e4 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80076dc:	6962      	ldr	r2, [r4, #20]
 80076de:	f042 0210 	orr.w	r2, r2, #16
 80076e2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80076e4:	06da      	lsls	r2, r3, #27
 80076e6:	d503      	bpl.n	80076f0 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80076e8:	6962      	ldr	r2, [r4, #20]
 80076ea:	f042 0220 	orr.w	r2, r2, #32
 80076ee:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80076f0:	0698      	lsls	r0, r3, #26
 80076f2:	d503      	bpl.n	80076fc <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80076f4:	6962      	ldr	r2, [r4, #20]
 80076f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076fa:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80076fc:	0659      	lsls	r1, r3, #25
 80076fe:	d503      	bpl.n	8007708 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007700:	6962      	ldr	r2, [r4, #20]
 8007702:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007706:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007708:	061a      	lsls	r2, r3, #24
 800770a:	d503      	bpl.n	8007714 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800770c:	6962      	ldr	r2, [r4, #20]
 800770e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007712:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8007714:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8007718:	d003      	beq.n	8007722 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800771a:	6963      	ldr	r3, [r4, #20]
 800771c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007720:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007722:	6963      	ldr	r3, [r4, #20]
 8007724:	b113      	cbz	r3, 800772c <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8007726:	4620      	mov	r0, r4
 8007728:	f7ff ff8e 	bl	8007648 <HAL_DSI_ErrorCallback>
}
 800772c:	bd10      	pop	{r4, pc}

0800772e <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800772e:	7c02      	ldrb	r2, [r0, #16]
{
 8007730:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007732:	2a01      	cmp	r2, #1
 8007734:	d00a      	beq.n	800774c <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8007736:	6802      	ldr	r2, [r0, #0]
 8007738:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800773a:	f020 0003 	bic.w	r0, r0, #3
 800773e:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007740:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8007742:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007744:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007746:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8007748:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800774a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800774c:	2002      	movs	r0, #2
}
 800774e:	4770      	bx	lr

08007750 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8007750:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007752:	7c03      	ldrb	r3, [r0, #16]
{
 8007754:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007756:	2b01      	cmp	r3, #1
 8007758:	d069      	beq.n	800782e <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800775a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800775c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800775e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007760:	f042 0201 	orr.w	r2, r2, #1
 8007764:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007766:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800776a:	f022 0201 	bic.w	r2, r2, #1
 800776e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8007772:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	f022 0203 	bic.w	r2, r2, #3
 8007784:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	4302      	orrs	r2, r0
 800778a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800778c:	695a      	ldr	r2, [r3, #20]
 800778e:	f022 0207 	bic.w	r2, r2, #7
 8007792:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007794:	6958      	ldr	r0, [r3, #20]
 8007796:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800779a:	432a      	orrs	r2, r5
 800779c:	694d      	ldr	r5, [r1, #20]
 800779e:	432a      	orrs	r2, r5
 80077a0:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80077a2:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80077a4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	f022 020f 	bic.w	r2, r2, #15
 80077ac:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	4302      	orrs	r2, r0
 80077b2:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80077b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80077b8:	f022 020e 	bic.w	r2, r2, #14
 80077bc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80077c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80077c4:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80077c8:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80077ca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80077ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077d0:	f36f 020f 	bfc	r2, #0, #16
 80077d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80077d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077d8:	4302      	orrs	r2, r0
 80077da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80077dc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80077e0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80077e4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80077e8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80077ec:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80077f0:	432a      	orrs	r2, r5
 80077f2:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80077f4:	432a      	orrs	r2, r5
 80077f6:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80077f8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80077fa:	432a      	orrs	r2, r5
 80077fc:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80077fe:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007800:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8007804:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007806:	f022 0201 	bic.w	r2, r2, #1
 800780a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800780c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800780e:	430a      	orrs	r2, r1
 8007810:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8007812:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800781e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007822:	f042 0202 	orr.w	r2, r2, #2
 8007826:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 800782a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800782c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800782e:	2002      	movs	r0, #2
 8007830:	e7fc      	b.n	800782c <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08007834 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8007834:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007836:	7c03      	ldrb	r3, [r0, #16]
{
 8007838:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800783a:	2b01      	cmp	r3, #1
 800783c:	d029      	beq.n	8007892 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800783e:	6800      	ldr	r0, [r0, #0]
 8007840:	4b15      	ldr	r3, [pc, #84]	@ (8007898 <HAL_DSI_ConfigCommand+0x64>)
 8007842:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8007844:	4023      	ands	r3, r4
 8007846:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007848:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800784a:	e9d1 3500 	ldrd	r3, r5, [r1]
 800784e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8007850:	688d      	ldr	r5, [r1, #8]
 8007852:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8007854:	68cd      	ldr	r5, [r1, #12]
 8007856:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8007858:	690d      	ldr	r5, [r1, #16]
 800785a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800785c:	694d      	ldr	r5, [r1, #20]
 800785e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8007860:	698d      	ldr	r5, [r1, #24]
 8007862:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8007864:	69cd      	ldr	r5, [r1, #28]
 8007866:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8007868:	6a0d      	ldr	r5, [r1, #32]
 800786a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800786c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800786e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8007870:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8007872:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8007874:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007876:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8007878:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800787a:	4323      	orrs	r3, r4
 800787c:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800787e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007880:	f023 0302 	bic.w	r3, r3, #2
 8007884:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007886:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007888:	430b      	orrs	r3, r1
 800788a:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800788c:	2000      	movs	r0, #0
 800788e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8007890:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007892:	2002      	movs	r0, #2
 8007894:	e7fc      	b.n	8007890 <HAL_DSI_ConfigCommand+0x5c>
 8007896:	bf00      	nop
 8007898:	fef080ff 	.word	0xfef080ff

0800789c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800789c:	7c02      	ldrb	r2, [r0, #16]
{
 800789e:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80078a0:	2a01      	cmp	r2, #1
 80078a2:	d00a      	beq.n	80078ba <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80078a4:	6802      	ldr	r2, [r0, #0]
 80078a6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80078a8:	f020 001f 	bic.w	r0, r0, #31
 80078ac:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80078ae:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80078b0:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80078b2:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 80078b4:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 80078b6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80078b8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80078ba:	2002      	movs	r0, #2
}
 80078bc:	4770      	bx	lr

080078be <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80078be:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078c0:	7c03      	ldrb	r3, [r0, #16]
{
 80078c2:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d034      	beq.n	8007932 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80078c8:	e9d1 0300 	ldrd	r0, r3, [r1]
 80078cc:	4298      	cmp	r0, r3
 80078ce:	bf38      	it	cc
 80078d0:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80078d8:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80078dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80078e0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80078e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80078e8:	4302      	orrs	r2, r0
 80078ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80078ee:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80078f2:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80078f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80078fa:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80078fe:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007902:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007904:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8007908:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800790a:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800790c:	432a      	orrs	r2, r5
 800790e:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007910:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007912:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8007916:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800791a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800791e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007922:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007926:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800792a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800792e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8007930:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007932:	2002      	movs	r0, #2
 8007934:	e7fc      	b.n	8007930 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08007938 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8007938:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800793a:	7c03      	ldrb	r3, [r0, #16]
{
 800793c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800793e:	2b01      	cmp	r3, #1
 8007940:	d05b      	beq.n	80079fa <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007942:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007944:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007946:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007948:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800794a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800794e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007956:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007958:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800795a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800795c:	b292      	uxth	r2, r2
 800795e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007960:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007962:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007966:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007968:	4a25      	ldr	r2, [pc, #148]	@ (8007a00 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800796a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800796c:	4010      	ands	r0, r2
 800796e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007970:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007972:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007974:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007976:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007978:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800797a:	4010      	ands	r0, r2
 800797c:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800797e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007980:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007982:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007984:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8007986:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800798a:	4010      	ands	r0, r2
 800798c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007990:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007994:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007996:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007998:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800799c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80079a0:	4010      	ands	r0, r2
 80079a2:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80079a6:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80079aa:	4328      	orrs	r0, r5
 80079ac:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80079b0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80079b4:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80079b8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80079bc:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80079c0:	698d      	ldr	r5, [r1, #24]
 80079c2:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80079c4:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80079c6:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80079c8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80079cc:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80079d0:	4010      	ands	r0, r2
 80079d2:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80079d6:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80079da:	4328      	orrs	r0, r5
 80079dc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80079e0:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80079e4:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80079e6:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80079e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80079ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80079f0:	430a      	orrs	r2, r1
 80079f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80079f6:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80079f8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80079fa:	2002      	movs	r0, #2
 80079fc:	e7fc      	b.n	80079f8 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80079fe:	bf00      	nop
 8007a00:	ffff0000 	.word	0xffff0000

08007a04 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a04:	7c03      	ldrb	r3, [r0, #16]
{
 8007a06:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d01c      	beq.n	8007a46 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8007a0c:	6802      	ldr	r2, [r0, #0]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	6851      	ldr	r1, [r2, #4]
 8007a14:	f041 0101 	orr.w	r1, r1, #1
 8007a18:	6051      	str	r1, [r2, #4]
 8007a1a:	6851      	ldr	r1, [r2, #4]
 8007a1c:	f001 0101 	and.w	r1, r1, #1
 8007a20:	9100      	str	r1, [sp, #0]
 8007a22:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8007a2a:	f041 0108 	orr.w	r1, r1, #8
 8007a2e:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8007a32:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a36:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007a38:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007a3a:	f002 0208 	and.w	r2, r2, #8
 8007a3e:	9201      	str	r2, [sp, #4]
 8007a40:	9a01      	ldr	r2, [sp, #4]
}
 8007a42:	b002      	add	sp, #8
 8007a44:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007a46:	2002      	movs	r0, #2
 8007a48:	e7fb      	b.n	8007a42 <HAL_DSI_Start+0x3e>

08007a4a <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a4a:	7c02      	ldrb	r2, [r0, #16]
{
 8007a4c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007a4e:	2a01      	cmp	r2, #1
 8007a50:	d009      	beq.n	8007a66 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007a52:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a54:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007a56:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8007a5a:	f042 0204 	orr.w	r2, r2, #4
 8007a5e:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8007a62:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007a64:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007a66:	2002      	movs	r0, #2
}
 8007a68:	4770      	bx	lr

08007a6a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007a6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a6c:	7c05      	ldrb	r5, [r0, #16]
{
 8007a6e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007a70:	2d01      	cmp	r5, #1
 8007a72:	d009      	beq.n	8007a88 <HAL_DSI_ShortWrite+0x1e>
 8007a74:	2501      	movs	r5, #1
 8007a76:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007a78:	9d06      	ldr	r5, [sp, #24]
 8007a7a:	9500      	str	r5, [sp, #0]
 8007a7c:	f7ff fc6c 	bl	8007358 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a80:	2300      	movs	r3, #0
 8007a82:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007a84:	b003      	add	sp, #12
 8007a86:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007a88:	2002      	movs	r0, #2
 8007a8a:	e7fb      	b.n	8007a84 <HAL_DSI_ShortWrite+0x1a>

08007a8c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8007a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a92:	7c03      	ldrb	r3, [r0, #16]
{
 8007a94:	4606      	mov	r6, r0
 8007a96:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007a98:	2b01      	cmp	r3, #1
{
 8007a9a:	4615      	mov	r5, r2
 8007a9c:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8007aa0:	d052      	beq.n	8007b48 <HAL_DSI_LongWrite+0xbc>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007aa6:	f7fe fc95 	bl	80063d4 <HAL_GetTick>
 8007aaa:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007aac:	6832      	ldr	r2, [r6, #0]
 8007aae:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007ab0:	f013 0a01 	ands.w	sl, r3, #1
 8007ab4:	d019      	beq.n	8007aea <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007ab6:	2c03      	cmp	r4, #3
 8007ab8:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8007aba:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007abe:	bf28      	it	cs
 8007ac0:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8007ac2:	4283      	cmp	r3, r0
 8007ac4:	d11d      	bne.n	8007b02 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8007ac6:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8007ac8:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8007aca:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8007ace:	bb10      	cbnz	r0, 8007b16 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007ad0:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007ad2:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8007ad6:	0223      	lsls	r3, r4, #8
 8007ad8:	0224      	lsls	r4, r4, #8
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8007ae0:	431d      	orrs	r5, r3
 8007ae2:	4325      	orrs	r5, r4
 8007ae4:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007ae6:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8007ae8:	e009      	b.n	8007afe <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007aea:	f7fe fc73 	bl	80063d4 <HAL_GetTick>
 8007aee:	eba0 000b 	sub.w	r0, r0, fp
 8007af2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007af6:	d9d9      	bls.n	8007aac <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8007af8:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007afa:	f886 a010 	strb.w	sl, [r6, #16]
}
 8007afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8007b02:	f818 1003 	ldrb.w	r1, [r8, r3]
 8007b06:	3301      	adds	r3, #1
 8007b08:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8007b0c:	fa01 f10c 	lsl.w	r1, r1, ip
 8007b10:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8007b14:	e7d5      	b.n	8007ac2 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007b16:	2804      	cmp	r0, #4
    fifoword = 0U;
 8007b18:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007b1c:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8007b1e:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007b20:	bf28      	it	cs
 8007b22:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007b26:	f813 8001 	ldrb.w	r8, [r3, r1]
 8007b2a:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8007b2e:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007b30:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8007b34:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007b36:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8007b3a:	d1f4      	bne.n	8007b26 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8007b3c:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8007b40:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8007b42:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8007b46:	e7c2      	b.n	8007ace <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8007b48:	2002      	movs	r0, #2
 8007b4a:	e7d8      	b.n	8007afe <HAL_DSI_LongWrite+0x72>

08007b4c <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8007b4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b50:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007b52:	7c03      	ldrb	r3, [r0, #16]
{
 8007b54:	4605      	mov	r5, r0
 8007b56:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8007b58:	2b01      	cmp	r3, #1
{
 8007b5a:	4617      	mov	r7, r2
 8007b5c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007b60:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8007b64:	d06f      	beq.n	8007c46 <HAL_DSI_Read+0xfa>
 8007b66:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8007b68:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8007b6a:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8007b6c:	d90d      	bls.n	8007b8a <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8007b6e:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007b72:	2237      	movs	r2, #55	@ 0x37
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	b2f3      	uxtb	r3, r6
 8007b78:	f7ff fbee 	bl	8007358 <DSI_ShortWrite.constprop.0>
 8007b7c:	b128      	cbz	r0, 8007b8a <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8007b7e:	2300      	movs	r3, #0

      return HAL_ERROR;
 8007b80:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8007b82:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8007b84:	b003      	add	sp, #12
 8007b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8007b8a:	f1b9 0f06 	cmp.w	r9, #6
 8007b8e:	d10f      	bne.n	8007bb0 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8007b92:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8007b9a:	f043 0306 	orr.w	r3, r3, #6
 8007b9e:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8007ba0:	f7fe fc18 	bl	80063d4 <HAL_GetTick>
 8007ba4:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8007ba6:	2e00      	cmp	r6, #0
 8007ba8:	dc27      	bgt.n	8007bfa <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8007baa:	2000      	movs	r0, #0
 8007bac:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8007bae:	e7e9      	b.n	8007b84 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007bb0:	f1b9 0f04 	cmp.w	r9, #4
 8007bb4:	d105      	bne.n	8007bc2 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bb6:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007bb8:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bba:	f044 0404 	orr.w	r4, r4, #4
 8007bbe:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007bc0:	e7ee      	b.n	8007ba0 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8007bc2:	f1b9 0f14 	cmp.w	r9, #20
 8007bc6:	d108      	bne.n	8007bda <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007bc8:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bcc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007bce:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bd0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8007bd4:	f044 0414 	orr.w	r4, r4, #20
 8007bd8:	e7f1      	b.n	8007bbe <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8007bda:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8007bde:	d1ce      	bne.n	8007b7e <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007be0:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007be4:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007be6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007be8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007bec:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bf0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8007bf4:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8007bf8:	e7e1      	b.n	8007bbe <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8007bfa:	682a      	ldr	r2, [r5, #0]
 8007bfc:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007bfe:	f013 0310 	ands.w	r3, r3, #16
 8007c02:	d10d      	bne.n	8007c20 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007c04:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8007c06:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007c08:	4632      	mov	r2, r6
 8007c0a:	bf28      	it	cs
 8007c0c:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8007c0e:	00d9      	lsls	r1, r3, #3
 8007c10:	fa20 f101 	lsr.w	r1, r0, r1
 8007c14:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8007c16:	3301      	adds	r3, #1
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d1f8      	bne.n	8007c0e <HAL_DSI_Read+0xc2>
 8007c1c:	4417      	add	r7, r2
 8007c1e:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007c20:	f7fe fbd8 	bl	80063d4 <HAL_GetTick>
 8007c24:	1b00      	subs	r0, r0, r4
 8007c26:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007c2a:	d903      	bls.n	8007c34 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8007c2c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007c2e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007c30:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8007c32:	e7a7      	b.n	8007b84 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007c38:	0652      	lsls	r2, r2, #25
 8007c3a:	d4b4      	bmi.n	8007ba6 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8007c3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c40:	069b      	lsls	r3, r3, #26
 8007c42:	d49c      	bmi.n	8007b7e <HAL_DSI_Read+0x32>
 8007c44:	e7af      	b.n	8007ba6 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8007c46:	2002      	movs	r0, #2
 8007c48:	e79c      	b.n	8007b84 <HAL_DSI_Read+0x38>

08007c4a <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007c4a:	7c02      	ldrb	r2, [r0, #16]
{
 8007c4c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007c4e:	2a01      	cmp	r2, #1
 8007c50:	d00f      	beq.n	8007c72 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8007c52:	6802      	ldr	r2, [r0, #0]
 8007c54:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007c58:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8007c5c:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007c60:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007c64:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007c68:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007c6a:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8007c6e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007c70:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007c72:	2002      	movs	r0, #2
}
 8007c74:	4770      	bx	lr
	...

08007c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007c7c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c7e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8007e44 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c82:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c86:	680a      	ldr	r2, [r1, #0]
 8007c88:	fa32 f503 	lsrs.w	r5, r2, r3
 8007c8c:	d102      	bne.n	8007c94 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8007c8e:	b003      	add	sp, #12
 8007c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c94:	2501      	movs	r5, #1
 8007c96:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8007c9a:	ea18 0202 	ands.w	r2, r8, r2
 8007c9e:	f000 80bb 	beq.w	8007e18 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ca2:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ca4:	2703      	movs	r7, #3
 8007ca6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007caa:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cae:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cb2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cb4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cb8:	2f01      	cmp	r7, #1
 8007cba:	d834      	bhi.n	8007d26 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8007cbc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cbe:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cc2:	68cf      	ldr	r7, [r1, #12]
 8007cc4:	fa07 f70e 	lsl.w	r7, r7, lr
 8007cc8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8007ccc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007cce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cd0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cd4:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8007cd8:	409f      	lsls	r7, r3
 8007cda:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8007cde:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007ce0:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ce2:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ce4:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ce8:	688f      	ldr	r7, [r1, #8]
 8007cea:	fa07 f70e 	lsl.w	r7, r7, lr
 8007cee:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8007cf2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cf4:	d119      	bne.n	8007d2a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8007cf6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cfa:	f003 0a07 	and.w	sl, r3, #7
 8007cfe:	f04f 0b0f 	mov.w	fp, #15
 8007d02:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8007d06:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007d0a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d0e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8007d12:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d16:	690f      	ldr	r7, [r1, #16]
 8007d18:	fa07 f70a 	lsl.w	r7, r7, sl
 8007d1c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8007d20:	f8c8 7020 	str.w	r7, [r8, #32]
 8007d24:	e001      	b.n	8007d2a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d26:	2d03      	cmp	r5, #3
 8007d28:	d1da      	bne.n	8007ce0 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8007d2a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d2c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d30:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d34:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d38:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8007d3c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d3e:	d06b      	beq.n	8007e18 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d40:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8007d44:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d48:	f003 0c03 	and.w	ip, r3, #3
 8007d4c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d50:	f045 0502 	orr.w	r5, r5, #2
 8007d54:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d58:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d5c:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8007d60:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8007d64:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d68:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d6c:	f005 0502 	and.w	r5, r5, #2
 8007d70:	9501      	str	r5, [sp, #4]
 8007d72:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007d74:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d76:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d7a:	4d31      	ldr	r5, [pc, #196]	@ (8007e40 <HAL_GPIO_Init+0x1c8>)
 8007d7c:	42a8      	cmp	r0, r5
 8007d7e:	d04d      	beq.n	8007e1c <HAL_GPIO_Init+0x1a4>
 8007d80:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d84:	42a8      	cmp	r0, r5
 8007d86:	d04b      	beq.n	8007e20 <HAL_GPIO_Init+0x1a8>
 8007d88:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d8c:	42a8      	cmp	r0, r5
 8007d8e:	d049      	beq.n	8007e24 <HAL_GPIO_Init+0x1ac>
 8007d90:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d94:	42a8      	cmp	r0, r5
 8007d96:	d047      	beq.n	8007e28 <HAL_GPIO_Init+0x1b0>
 8007d98:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d9c:	42a8      	cmp	r0, r5
 8007d9e:	d045      	beq.n	8007e2c <HAL_GPIO_Init+0x1b4>
 8007da0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007da4:	42a8      	cmp	r0, r5
 8007da6:	d043      	beq.n	8007e30 <HAL_GPIO_Init+0x1b8>
 8007da8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007dac:	42a8      	cmp	r0, r5
 8007dae:	d041      	beq.n	8007e34 <HAL_GPIO_Init+0x1bc>
 8007db0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007db4:	42a8      	cmp	r0, r5
 8007db6:	d03f      	beq.n	8007e38 <HAL_GPIO_Init+0x1c0>
 8007db8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007dbc:	42a8      	cmp	r0, r5
 8007dbe:	d03d      	beq.n	8007e3c <HAL_GPIO_Init+0x1c4>
 8007dc0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007dc4:	42a8      	cmp	r0, r5
 8007dc6:	bf14      	ite	ne
 8007dc8:	250a      	movne	r5, #10
 8007dca:	2509      	moveq	r5, #9
 8007dcc:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007dd0:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007dd4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007dd8:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007dda:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8007dde:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8007de0:	bf0c      	ite	eq
 8007de2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007de4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007de6:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8007dea:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8007dec:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8007dee:	bf0c      	ite	eq
 8007df0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007df2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007df4:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8007df8:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8007dfa:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8007dfe:	bf0c      	ite	eq
 8007e00:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007e02:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e04:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8007e06:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007e0a:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8007e0e:	bf54      	ite	pl
 8007e10:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007e12:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007e14:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8007e18:	3301      	adds	r3, #1
 8007e1a:	e734      	b.n	8007c86 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	e7d5      	b.n	8007dcc <HAL_GPIO_Init+0x154>
 8007e20:	2501      	movs	r5, #1
 8007e22:	e7d3      	b.n	8007dcc <HAL_GPIO_Init+0x154>
 8007e24:	2502      	movs	r5, #2
 8007e26:	e7d1      	b.n	8007dcc <HAL_GPIO_Init+0x154>
 8007e28:	2503      	movs	r5, #3
 8007e2a:	e7cf      	b.n	8007dcc <HAL_GPIO_Init+0x154>
 8007e2c:	2504      	movs	r5, #4
 8007e2e:	e7cd      	b.n	8007dcc <HAL_GPIO_Init+0x154>
 8007e30:	2505      	movs	r5, #5
 8007e32:	e7cb      	b.n	8007dcc <HAL_GPIO_Init+0x154>
 8007e34:	2506      	movs	r5, #6
 8007e36:	e7c9      	b.n	8007dcc <HAL_GPIO_Init+0x154>
 8007e38:	2507      	movs	r5, #7
 8007e3a:	e7c7      	b.n	8007dcc <HAL_GPIO_Init+0x154>
 8007e3c:	2508      	movs	r5, #8
 8007e3e:	e7c5      	b.n	8007dcc <HAL_GPIO_Init+0x154>
 8007e40:	58020000 	.word	0x58020000
 8007e44:	58024400 	.word	0x58024400

08007e48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007e4c:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007e4e:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e52:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007e56:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007e5a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8007e5e:	fa31 f302 	lsrs.w	r3, r1, r2
 8007e62:	d101      	bne.n	8007e68 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007e68:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8007e6c:	ea1c 0601 	ands.w	r6, ip, r1
 8007e70:	d070      	beq.n	8007f54 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007e72:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e76:	f002 0703 	and.w	r7, r2, #3
 8007e7a:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8007e7e:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007e80:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e84:	fa08 f907 	lsl.w	r9, r8, r7
 8007e88:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007e8c:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007e90:	4b3a      	ldr	r3, [pc, #232]	@ (8007f7c <HAL_GPIO_DeInit+0x134>)
 8007e92:	4298      	cmp	r0, r3
 8007e94:	d060      	beq.n	8007f58 <HAL_GPIO_DeInit+0x110>
 8007e96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e9a:	4298      	cmp	r0, r3
 8007e9c:	d05e      	beq.n	8007f5c <HAL_GPIO_DeInit+0x114>
 8007e9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ea2:	4298      	cmp	r0, r3
 8007ea4:	d05c      	beq.n	8007f60 <HAL_GPIO_DeInit+0x118>
 8007ea6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eaa:	4298      	cmp	r0, r3
 8007eac:	d05a      	beq.n	8007f64 <HAL_GPIO_DeInit+0x11c>
 8007eae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eb2:	4298      	cmp	r0, r3
 8007eb4:	d058      	beq.n	8007f68 <HAL_GPIO_DeInit+0x120>
 8007eb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eba:	4298      	cmp	r0, r3
 8007ebc:	d056      	beq.n	8007f6c <HAL_GPIO_DeInit+0x124>
 8007ebe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ec2:	4298      	cmp	r0, r3
 8007ec4:	d054      	beq.n	8007f70 <HAL_GPIO_DeInit+0x128>
 8007ec6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	d052      	beq.n	8007f74 <HAL_GPIO_DeInit+0x12c>
 8007ece:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ed2:	4298      	cmp	r0, r3
 8007ed4:	d050      	beq.n	8007f78 <HAL_GPIO_DeInit+0x130>
 8007ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eda:	4298      	cmp	r0, r3
 8007edc:	bf14      	ite	ne
 8007ede:	230a      	movne	r3, #10
 8007ee0:	2309      	moveq	r3, #9
 8007ee2:	40bb      	lsls	r3, r7
 8007ee4:	4573      	cmp	r3, lr
 8007ee6:	d117      	bne.n	8007f18 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007ee8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007eec:	ea23 0306 	bic.w	r3, r3, r6
 8007ef0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007ef4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8007ef8:	ea23 0306 	bic.w	r3, r3, r6
 8007efc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	ea23 0306 	bic.w	r3, r3, r6
 8007f06:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	ea23 0306 	bic.w	r3, r3, r6
 8007f0e:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007f10:	68ab      	ldr	r3, [r5, #8]
 8007f12:	ea23 0309 	bic.w	r3, r3, r9
 8007f16:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007f18:	0053      	lsls	r3, r2, #1
 8007f1a:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007f1c:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007f1e:	fa0b f303 	lsl.w	r3, fp, r3
 8007f22:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007f26:	431d      	orrs	r5, r3
 8007f28:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007f2a:	f002 0507 	and.w	r5, r2, #7
 8007f2e:	6a37      	ldr	r7, [r6, #32]
 8007f30:	00ad      	lsls	r5, r5, #2
 8007f32:	fa08 f505 	lsl.w	r5, r8, r5
 8007f36:	ea27 0705 	bic.w	r7, r7, r5
 8007f3a:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f3c:	68c5      	ldr	r5, [r0, #12]
 8007f3e:	ea25 0503 	bic.w	r5, r5, r3
 8007f42:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f44:	6845      	ldr	r5, [r0, #4]
 8007f46:	ea25 050c 	bic.w	r5, r5, ip
 8007f4a:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f4c:	6885      	ldr	r5, [r0, #8]
 8007f4e:	ea25 0303 	bic.w	r3, r5, r3
 8007f52:	6083      	str	r3, [r0, #8]
    position++;
 8007f54:	3201      	adds	r2, #1
 8007f56:	e782      	b.n	8007e5e <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e7c2      	b.n	8007ee2 <HAL_GPIO_DeInit+0x9a>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e7c0      	b.n	8007ee2 <HAL_GPIO_DeInit+0x9a>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e7be      	b.n	8007ee2 <HAL_GPIO_DeInit+0x9a>
 8007f64:	2303      	movs	r3, #3
 8007f66:	e7bc      	b.n	8007ee2 <HAL_GPIO_DeInit+0x9a>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	e7ba      	b.n	8007ee2 <HAL_GPIO_DeInit+0x9a>
 8007f6c:	2305      	movs	r3, #5
 8007f6e:	e7b8      	b.n	8007ee2 <HAL_GPIO_DeInit+0x9a>
 8007f70:	2306      	movs	r3, #6
 8007f72:	e7b6      	b.n	8007ee2 <HAL_GPIO_DeInit+0x9a>
 8007f74:	2307      	movs	r3, #7
 8007f76:	e7b4      	b.n	8007ee2 <HAL_GPIO_DeInit+0x9a>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	e7b2      	b.n	8007ee2 <HAL_GPIO_DeInit+0x9a>
 8007f7c:	58020000 	.word	0x58020000

08007f80 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f80:	6903      	ldr	r3, [r0, #16]
 8007f82:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007f84:	bf14      	ite	ne
 8007f86:	2001      	movne	r0, #1
 8007f88:	2000      	moveq	r0, #0
 8007f8a:	4770      	bx	lr

08007f8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f8c:	b10a      	cbz	r2, 8007f92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f8e:	6181      	str	r1, [r0, #24]
  }
}
 8007f90:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f92:	0409      	lsls	r1, r1, #16
 8007f94:	e7fb      	b.n	8007f8e <HAL_GPIO_WritePin+0x2>

08007f96 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007f96:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007f98:	ea01 0203 	and.w	r2, r1, r3
 8007f9c:	ea21 0103 	bic.w	r1, r1, r3
 8007fa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fa4:	6181      	str	r1, [r0, #24]
}
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007fa8:	4b04      	ldr	r3, [pc, #16]	@ (8007fbc <HAL_HSEM_FastTake+0x14>)
 8007faa:	3020      	adds	r0, #32
 8007fac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007fb0:	4b03      	ldr	r3, [pc, #12]	@ (8007fc0 <HAL_HSEM_FastTake+0x18>)
 8007fb2:	1ac0      	subs	r0, r0, r3
 8007fb4:	bf18      	it	ne
 8007fb6:	2001      	movne	r0, #1
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	58026400 	.word	0x58026400
 8007fc0:	80000300 	.word	0x80000300

08007fc4 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007fc4:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8007fc8:	4b01      	ldr	r3, [pc, #4]	@ (8007fd0 <HAL_HSEM_Release+0xc>)
 8007fca:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007fce:	4770      	bx	lr
 8007fd0:	58026400 	.word	0x58026400

08007fd4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fd4:	6803      	ldr	r3, [r0, #0]
 8007fd6:	699a      	ldr	r2, [r3, #24]
 8007fd8:	0791      	lsls	r1, r2, #30
 8007fda:	d501      	bpl.n	8007fe0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fdc:	2200      	movs	r2, #0
 8007fde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fe0:	699a      	ldr	r2, [r3, #24]
 8007fe2:	07d2      	lsls	r2, r2, #31
 8007fe4:	d403      	bmi.n	8007fee <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007fe6:	699a      	ldr	r2, [r3, #24]
 8007fe8:	f042 0201 	orr.w	r2, r2, #1
 8007fec:	619a      	str	r2, [r3, #24]
  }
}
 8007fee:	4770      	bx	lr

08007ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ff0:	b530      	push	{r4, r5, lr}
 8007ff2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ff4:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ff8:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ffa:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ffc:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008002:	4a05      	ldr	r2, [pc, #20]	@ (8008018 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008004:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8008006:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800800a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800800e:	ea20 0002 	bic.w	r0, r0, r2
 8008012:	4303      	orrs	r3, r0
 8008014:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008016:	bd30      	pop	{r4, r5, pc}
 8008018:	03ff63ff 	.word	0x03ff63ff

0800801c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800801c:	6803      	ldr	r3, [r0, #0]
{
 800801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8008022:	699c      	ldr	r4, [r3, #24]
{
 8008024:	4605      	mov	r5, r0
 8008026:	460f      	mov	r7, r1
 8008028:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800802a:	f014 0410 	ands.w	r4, r4, #16
 800802e:	d06f      	beq.n	8008110 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8008030:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008032:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008034:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008036:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	699a      	ldr	r2, [r3, #24]
 800803c:	0690      	lsls	r0, r2, #26
 800803e:	d461      	bmi.n	8008104 <I2C_IsErrorOccurred+0xe8>
 8008040:	f1b8 0f00 	cmp.w	r8, #0
 8008044:	d035      	beq.n	80080b2 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8008046:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800804a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800804c:	682e      	ldr	r6, [r5, #0]
 800804e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008050:	05d9      	lsls	r1, r3, #23
 8008052:	d505      	bpl.n	8008060 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008054:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8008058:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800805c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800805e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008060:	055a      	lsls	r2, r3, #21
 8008062:	d505      	bpl.n	8008070 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008064:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008068:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800806c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800806e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008070:	059b      	lsls	r3, r3, #22
 8008072:	d54f      	bpl.n	8008114 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008074:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008078:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800807c:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800807e:	4628      	mov	r0, r5
 8008080:	f7ff ffa8 	bl	8007fd4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8008084:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8008086:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008088:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800808c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8008090:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8008094:	f023 0301 	bic.w	r3, r3, #1
 8008098:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800809a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800809c:	4323      	orrs	r3, r4
 800809e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080a0:	2320      	movs	r3, #32
 80080a2:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a6:	2300      	movs	r3, #0
 80080a8:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80080ac:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80080b0:	e032      	b.n	8008118 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80080b2:	1c7a      	adds	r2, r7, #1
 80080b4:	d0c1      	beq.n	800803a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80080b6:	f7fe f98d 	bl	80063d4 <HAL_GetTick>
 80080ba:	1b80      	subs	r0, r0, r6
 80080bc:	42b8      	cmp	r0, r7
 80080be:	d801      	bhi.n	80080c4 <I2C_IsErrorOccurred+0xa8>
 80080c0:	2f00      	cmp	r7, #0
 80080c2:	d1b9      	bne.n	8008038 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80080c8:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80080cc:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80080ce:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80080d0:	0400      	lsls	r0, r0, #16
 80080d2:	d50a      	bpl.n	80080ea <I2C_IsErrorOccurred+0xce>
 80080d4:	0449      	lsls	r1, r1, #17
 80080d6:	d408      	bmi.n	80080ea <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80080d8:	2a20      	cmp	r2, #32
 80080da:	d006      	beq.n	80080ea <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080e2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80080e4:	f7fe f976 	bl	80063d4 <HAL_GetTick>
 80080e8:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080ea:	682b      	ldr	r3, [r5, #0]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	069b      	lsls	r3, r3, #26
 80080f0:	d4a2      	bmi.n	8008038 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80080f2:	f7fe f96f 	bl	80063d4 <HAL_GetTick>
 80080f6:	1b80      	subs	r0, r0, r6
 80080f8:	2819      	cmp	r0, #25
 80080fa:	d9f6      	bls.n	80080ea <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80080fc:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80080fe:	f04f 0801 	mov.w	r8, #1
 8008102:	e799      	b.n	8008038 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8008104:	f1b8 0f00 	cmp.w	r8, #0
 8008108:	d19d      	bne.n	8008046 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800810a:	2220      	movs	r2, #32
 800810c:	61da      	str	r2, [r3, #28]
 800810e:	e79a      	b.n	8008046 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8008110:	4620      	mov	r0, r4
 8008112:	e79b      	b.n	800804c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8008114:	2800      	cmp	r0, #0
 8008116:	d1b2      	bne.n	800807e <I2C_IsErrorOccurred+0x62>
}
 8008118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800811c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
 8008122:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	079b      	lsls	r3, r3, #30
 800812a:	d501      	bpl.n	8008130 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800812c:	2000      	movs	r0, #0
 800812e:	e01f      	b.n	8008170 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008130:	4632      	mov	r2, r6
 8008132:	4629      	mov	r1, r5
 8008134:	4620      	mov	r0, r4
 8008136:	f7ff ff71 	bl	800801c <I2C_IsErrorOccurred>
 800813a:	b9c0      	cbnz	r0, 800816e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800813c:	1c6a      	adds	r2, r5, #1
 800813e:	d0f1      	beq.n	8008124 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008140:	f7fe f948 	bl	80063d4 <HAL_GetTick>
 8008144:	1b80      	subs	r0, r0, r6
 8008146:	42a8      	cmp	r0, r5
 8008148:	d801      	bhi.n	800814e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800814a:	2d00      	cmp	r5, #0
 800814c:	d1ea      	bne.n	8008124 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f013 0302 	ands.w	r3, r3, #2
 8008156:	d1e5      	bne.n	8008124 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008158:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800815a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800815e:	f042 0220 	orr.w	r2, r2, #32
 8008162:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008164:	2220      	movs	r2, #32
 8008166:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800816a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800816e:	2001      	movs	r0, #1
}
 8008170:	bd70      	pop	{r4, r5, r6, pc}

08008172 <I2C_WaitOnFlagUntilTimeout>:
{
 8008172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008176:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800817a:	4604      	mov	r4, r0
 800817c:	460f      	mov	r7, r1
 800817e:	4616      	mov	r6, r2
 8008180:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	ea37 0303 	bics.w	r3, r7, r3
 800818a:	bf0c      	ite	eq
 800818c:	2301      	moveq	r3, #1
 800818e:	2300      	movne	r3, #0
 8008190:	42b3      	cmp	r3, r6
 8008192:	d001      	beq.n	8008198 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8008194:	2000      	movs	r0, #0
 8008196:	e025      	b.n	80081e4 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008198:	4642      	mov	r2, r8
 800819a:	4629      	mov	r1, r5
 800819c:	4620      	mov	r0, r4
 800819e:	f7ff ff3d 	bl	800801c <I2C_IsErrorOccurred>
 80081a2:	b9f0      	cbnz	r0, 80081e2 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 80081a4:	1c6b      	adds	r3, r5, #1
 80081a6:	d0ec      	beq.n	8008182 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a8:	f7fe f914 	bl	80063d4 <HAL_GetTick>
 80081ac:	eba0 0008 	sub.w	r0, r0, r8
 80081b0:	42a8      	cmp	r0, r5
 80081b2:	d801      	bhi.n	80081b8 <I2C_WaitOnFlagUntilTimeout+0x46>
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	d1e4      	bne.n	8008182 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	ea37 0303 	bics.w	r3, r7, r3
 80081c0:	bf0c      	ite	eq
 80081c2:	2301      	moveq	r3, #1
 80081c4:	2300      	movne	r3, #0
 80081c6:	42b3      	cmp	r3, r6
 80081c8:	d1db      	bne.n	8008182 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80081cc:	f043 0320 	orr.w	r3, r3, #32
 80081d0:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80081d2:	2320      	movs	r3, #32
 80081d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d8:	2300      	movs	r3, #0
 80081da:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80081de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80081e2:	2001      	movs	r0, #1
}
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4604      	mov	r4, r0
 80081ec:	460d      	mov	r5, r1
 80081ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	069b      	lsls	r3, r3, #26
 80081f6:	d501      	bpl.n	80081fc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80081f8:	2000      	movs	r0, #0
 80081fa:	e01d      	b.n	8008238 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fc:	4632      	mov	r2, r6
 80081fe:	4629      	mov	r1, r5
 8008200:	4620      	mov	r0, r4
 8008202:	f7ff ff0b 	bl	800801c <I2C_IsErrorOccurred>
 8008206:	b9b0      	cbnz	r0, 8008236 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008208:	f7fe f8e4 	bl	80063d4 <HAL_GetTick>
 800820c:	1b80      	subs	r0, r0, r6
 800820e:	42a8      	cmp	r0, r5
 8008210:	d801      	bhi.n	8008216 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8008212:	2d00      	cmp	r5, #0
 8008214:	d1ec      	bne.n	80081f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	f013 0320 	ands.w	r3, r3, #32
 800821e:	d1e7      	bne.n	80081f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008220:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008222:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008226:	f042 0220 	orr.w	r2, r2, #32
 800822a:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800822c:	2220      	movs	r2, #32
 800822e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008232:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008236:	2001      	movs	r0, #1
}
 8008238:	bd70      	pop	{r4, r5, r6, pc}

0800823a <HAL_I2C_MspInit>:
}
 800823a:	4770      	bx	lr

0800823c <HAL_I2C_Init>:
{
 800823c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800823e:	4604      	mov	r4, r0
 8008240:	2800      	cmp	r0, #0
 8008242:	d04e      	beq.n	80082e2 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008244:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008248:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800824c:	b91b      	cbnz	r3, 8008256 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800824e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8008252:	f7ff fff2 	bl	800823a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008256:	2324      	movs	r3, #36	@ 0x24
 8008258:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	f022 0201 	bic.w	r2, r2, #1
 8008264:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008266:	6862      	ldr	r2, [r4, #4]
 8008268:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800826c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008274:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008276:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800827a:	2901      	cmp	r1, #1
 800827c:	d106      	bne.n	800828c <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800827e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008282:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800828a:	e007      	b.n	800829c <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800828c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008290:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008292:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008294:	d1f6      	bne.n	8008284 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800829c:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800829e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80082a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082aa:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082b2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082b4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80082b8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80082ba:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80082c0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80082c2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	f042 0201 	orr.w	r2, r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80082d2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082d4:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80082d6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082da:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082dc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80082e0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80082e2:	2001      	movs	r0, #1
 80082e4:	e7fc      	b.n	80082e0 <HAL_I2C_Init+0xa4>

080082e6 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80082e6:	4770      	bx	lr

080082e8 <HAL_I2C_DeInit>:
{
 80082e8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80082ea:	4604      	mov	r4, r0
 80082ec:	b198      	cbz	r0, 8008316 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80082ee:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80082f0:	2324      	movs	r3, #36	@ 0x24
 80082f2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80082f6:	6813      	ldr	r3, [r2, #0]
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80082fe:	f7ff fff2 	bl	80082e6 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008302:	2000      	movs	r0, #0
 8008304:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8008306:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800830a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800830e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008310:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008314:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008316:	2001      	movs	r0, #1
 8008318:	e7fc      	b.n	8008314 <HAL_I2C_DeInit+0x2c>
	...

0800831c <HAL_I2C_Mem_Write>:
{
 800831c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008322:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008326:	4604      	mov	r4, r0
 8008328:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800832a:	2b20      	cmp	r3, #32
{
 800832c:	4616      	mov	r6, r2
 800832e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008332:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008336:	f040 80c6 	bne.w	80084c6 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800833a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800833c:	b113      	cbz	r3, 8008344 <HAL_I2C_Mem_Write+0x28>
 800833e:	f1ba 0f00 	cmp.w	sl, #0
 8008342:	d106      	bne.n	8008352 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008348:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800834a:	2001      	movs	r0, #1
}
 800834c:	b003      	add	sp, #12
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008352:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008356:	2b01      	cmp	r3, #1
 8008358:	f000 80b5 	beq.w	80084c6 <HAL_I2C_Mem_Write+0x1aa>
 800835c:	f04f 0b01 	mov.w	fp, #1
 8008360:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008364:	f7fe f836 	bl	80063d4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008368:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800836a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800836c:	9000      	str	r0, [sp, #0]
 800836e:	465a      	mov	r2, fp
 8008370:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008374:	4620      	mov	r0, r4
 8008376:	f7ff fefc 	bl	8008172 <I2C_WaitOnFlagUntilTimeout>
 800837a:	2800      	cmp	r0, #0
 800837c:	d1e5      	bne.n	800834a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800837e:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8008380:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008382:	fa5f f289 	uxtb.w	r2, r9
 8008386:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008388:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800838c:	2340      	movs	r3, #64	@ 0x40
 800838e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008392:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008394:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008396:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008398:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800839a:	4b4c      	ldr	r3, [pc, #304]	@ (80084cc <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800839c:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80083a6:	f7ff fe23 	bl	8007ff0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083aa:	462a      	mov	r2, r5
 80083ac:	4641      	mov	r1, r8
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7ff feb4 	bl	800811c <I2C_WaitOnTXISFlagUntilTimeout>
 80083b4:	bb18      	cbnz	r0, 80083fe <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083b6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083ba:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083bc:	d115      	bne.n	80083ea <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083be:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80083c0:	2200      	movs	r2, #0
 80083c2:	2180      	movs	r1, #128	@ 0x80
 80083c4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083c6:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80083c8:	4643      	mov	r3, r8
 80083ca:	9500      	str	r5, [sp, #0]
 80083cc:	f7ff fed1 	bl	8008172 <I2C_WaitOnFlagUntilTimeout>
 80083d0:	b9a8      	cbnz	r0, 80083fe <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2bff      	cmp	r3, #255	@ 0xff
 80083d8:	d815      	bhi.n	8008406 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80083da:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80083dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80083e0:	b292      	uxth	r2, r2
 80083e2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80083e4:	b2d2      	uxtb	r2, r2
 80083e6:	9000      	str	r0, [sp, #0]
 80083e8:	e012      	b.n	8008410 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083ea:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ec:	4641      	mov	r1, r8
 80083ee:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083f0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083f2:	462a      	mov	r2, r5
 80083f4:	f7ff fe92 	bl	800811c <I2C_WaitOnTXISFlagUntilTimeout>
 80083f8:	b908      	cbnz	r0, 80083fe <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	e7df      	b.n	80083be <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80083fe:	2300      	movs	r3, #0
 8008400:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008404:	e7a1      	b.n	800834a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008406:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008408:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800840c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800840e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008410:	4639      	mov	r1, r7
 8008412:	4620      	mov	r0, r4
 8008414:	f7ff fdec 	bl	8007ff0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008418:	462a      	mov	r2, r5
 800841a:	4641      	mov	r1, r8
 800841c:	4620      	mov	r0, r4
 800841e:	f7ff fe7d 	bl	800811c <I2C_WaitOnTXISFlagUntilTimeout>
 8008422:	2800      	cmp	r0, #0
 8008424:	d191      	bne.n	800834a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008426:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008428:	6822      	ldr	r2, [r4, #0]
 800842a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800842e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008430:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008432:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008434:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008436:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008438:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800843a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800843c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800843e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008440:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008442:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008444:	b29b      	uxth	r3, r3
 8008446:	b1b3      	cbz	r3, 8008476 <HAL_I2C_Mem_Write+0x15a>
 8008448:	b9aa      	cbnz	r2, 8008476 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800844a:	4643      	mov	r3, r8
 800844c:	2180      	movs	r1, #128	@ 0x80
 800844e:	4620      	mov	r0, r4
 8008450:	9500      	str	r5, [sp, #0]
 8008452:	f7ff fe8e 	bl	8008172 <I2C_WaitOnFlagUntilTimeout>
 8008456:	2800      	cmp	r0, #0
 8008458:	f47f af77 	bne.w	800834a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800845c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	2bff      	cmp	r3, #255	@ 0xff
 8008462:	d928      	bls.n	80084b6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008464:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008466:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800846a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800846c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800846e:	4639      	mov	r1, r7
 8008470:	4620      	mov	r0, r4
 8008472:	f7ff fdbd 	bl	8007ff0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008476:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008478:	b29b      	uxth	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1cc      	bne.n	8008418 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800847e:	462a      	mov	r2, r5
 8008480:	4641      	mov	r1, r8
 8008482:	4620      	mov	r0, r4
 8008484:	f7ff feb0 	bl	80081e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008488:	2800      	cmp	r0, #0
 800848a:	f47f af5e 	bne.w	800834a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	2120      	movs	r1, #32
 8008492:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800849a:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800849e:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80084a2:	f022 0201 	bic.w	r2, r2, #1
 80084a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80084a8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80084ac:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80084b0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80084b4:	e74a      	b.n	800834c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80084b6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80084bc:	b292      	uxth	r2, r2
 80084be:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084c0:	b2d2      	uxtb	r2, r2
 80084c2:	9000      	str	r0, [sp, #0]
 80084c4:	e7d3      	b.n	800846e <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80084c6:	2002      	movs	r0, #2
 80084c8:	e740      	b.n	800834c <HAL_I2C_Mem_Write+0x30>
 80084ca:	bf00      	nop
 80084cc:	80002000 	.word	0x80002000

080084d0 <HAL_I2C_Mem_Read>:
{
 80084d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80084d6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80084da:	4604      	mov	r4, r0
 80084dc:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80084de:	2b20      	cmp	r3, #32
{
 80084e0:	4616      	mov	r6, r2
 80084e2:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80084e6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80084ea:	f040 80c9 	bne.w	8008680 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80084ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084f0:	b113      	cbz	r3, 80084f8 <HAL_I2C_Mem_Read+0x28>
 80084f2:	f1ba 0f00 	cmp.w	sl, #0
 80084f6:	d106      	bne.n	8008506 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80084f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084fc:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80084fe:	2001      	movs	r0, #1
}
 8008500:	b003      	add	sp, #12
 8008502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008506:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800850a:	2b01      	cmp	r3, #1
 800850c:	f000 80b8 	beq.w	8008680 <HAL_I2C_Mem_Read+0x1b0>
 8008510:	f04f 0b01 	mov.w	fp, #1
 8008514:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008518:	f7fd ff5c 	bl	80063d4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800851c:	2319      	movs	r3, #25
 800851e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008520:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008522:	465a      	mov	r2, fp
 8008524:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008528:	4620      	mov	r0, r4
 800852a:	f7ff fe22 	bl	8008172 <I2C_WaitOnFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2800      	cmp	r0, #0
 8008532:	d1e4      	bne.n	80084fe <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008534:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8008536:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008538:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800853a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800853e:	2240      	movs	r2, #64	@ 0x40
 8008540:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008544:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008546:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008548:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800854a:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800854c:	4a4d      	ldr	r2, [pc, #308]	@ (8008684 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800854e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008552:	9200      	str	r2, [sp, #0]
 8008554:	fa5f f289 	uxtb.w	r2, r9
 8008558:	f7ff fd4a 	bl	8007ff0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800855c:	462a      	mov	r2, r5
 800855e:	4641      	mov	r1, r8
 8008560:	4620      	mov	r0, r4
 8008562:	f7ff fddb 	bl	800811c <I2C_WaitOnTXISFlagUntilTimeout>
 8008566:	bb20      	cbnz	r0, 80085b2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008568:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800856c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800856e:	d116      	bne.n	800859e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008570:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008572:	2200      	movs	r2, #0
 8008574:	2140      	movs	r1, #64	@ 0x40
 8008576:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008578:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800857a:	4643      	mov	r3, r8
 800857c:	9500      	str	r5, [sp, #0]
 800857e:	f7ff fdf8 	bl	8008172 <I2C_WaitOnFlagUntilTimeout>
 8008582:	b9b0      	cbnz	r0, 80085b2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008584:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008586:	b29b      	uxth	r3, r3
 8008588:	2bff      	cmp	r3, #255	@ 0xff
 800858a:	4b3f      	ldr	r3, [pc, #252]	@ (8008688 <HAL_I2C_Mem_Read+0x1b8>)
 800858c:	d815      	bhi.n	80085ba <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800858e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008590:	b292      	uxth	r2, r2
 8008592:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800859c:	e012      	b.n	80085c4 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800859e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085a0:	4641      	mov	r1, r8
 80085a2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085a6:	462a      	mov	r2, r5
 80085a8:	f7ff fdb8 	bl	800811c <I2C_WaitOnTXISFlagUntilTimeout>
 80085ac:	b908      	cbnz	r0, 80085b2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	e7de      	b.n	8008570 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80085b2:	2300      	movs	r3, #0
 80085b4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80085b8:	e7a1      	b.n	80084fe <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085ba:	22ff      	movs	r2, #255	@ 0xff
 80085bc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085c4:	4639      	mov	r1, r7
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7ff fd12 	bl	8007ff0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80085cc:	4643      	mov	r3, r8
 80085ce:	2200      	movs	r2, #0
 80085d0:	2104      	movs	r1, #4
 80085d2:	4620      	mov	r0, r4
 80085d4:	9500      	str	r5, [sp, #0]
 80085d6:	f7ff fdcc 	bl	8008172 <I2C_WaitOnFlagUntilTimeout>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d18f      	bne.n	80084fe <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80085e4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80085e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80085e8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80085ea:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80085ec:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80085ee:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80085f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80085f2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80085f4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80085f6:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80085fe:	b29b      	uxth	r3, r3
 8008600:	b1b3      	cbz	r3, 8008630 <HAL_I2C_Mem_Read+0x160>
 8008602:	b9aa      	cbnz	r2, 8008630 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008604:	4643      	mov	r3, r8
 8008606:	2180      	movs	r1, #128	@ 0x80
 8008608:	4620      	mov	r0, r4
 800860a:	9500      	str	r5, [sp, #0]
 800860c:	f7ff fdb1 	bl	8008172 <I2C_WaitOnFlagUntilTimeout>
 8008610:	2800      	cmp	r0, #0
 8008612:	f47f af74 	bne.w	80084fe <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008616:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008618:	b29b      	uxth	r3, r3
 800861a:	2bff      	cmp	r3, #255	@ 0xff
 800861c:	d928      	bls.n	8008670 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800861e:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008620:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008624:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008626:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008628:	4639      	mov	r1, r7
 800862a:	4620      	mov	r0, r4
 800862c:	f7ff fce0 	bl	8007ff0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008630:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1c9      	bne.n	80085cc <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008638:	462a      	mov	r2, r5
 800863a:	4641      	mov	r1, r8
 800863c:	4620      	mov	r0, r4
 800863e:	f7ff fdd3 	bl	80081e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008642:	2800      	cmp	r0, #0
 8008644:	f47f af5b 	bne.w	80084fe <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	2120      	movs	r1, #32
 800864c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008654:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008658:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800865c:	f022 0201 	bic.w	r2, r2, #1
 8008660:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008662:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008666:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800866a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800866e:	e747      	b.n	8008500 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008670:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008672:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008676:	b292      	uxth	r2, r2
 8008678:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	9000      	str	r0, [sp, #0]
 800867e:	e7d3      	b.n	8008628 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8008680:	2002      	movs	r0, #2
 8008682:	e73d      	b.n	8008500 <HAL_I2C_Mem_Read+0x30>
 8008684:	80002000 	.word	0x80002000
 8008688:	80002400 	.word	0x80002400

0800868c <HAL_I2C_GetState>:
  return hi2c->State;
 800868c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8008690:	4770      	bx	lr

08008692 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8008692:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8008694:	4770      	bx	lr

08008696 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008696:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008698:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800869c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800869e:	2a20      	cmp	r2, #32
 80086a0:	b2d4      	uxtb	r4, r2
 80086a2:	d11c      	bne.n	80086de <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086a4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80086a8:	2a01      	cmp	r2, #1
 80086aa:	d018      	beq.n	80086de <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086ac:	2224      	movs	r2, #36	@ 0x24
 80086ae:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086b2:	6802      	ldr	r2, [r0, #0]
 80086b4:	6810      	ldr	r0, [r2, #0]
 80086b6:	f020 0001 	bic.w	r0, r0, #1
 80086ba:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80086bc:	6810      	ldr	r0, [r2, #0]
 80086be:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80086c2:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80086c4:	6810      	ldr	r0, [r2, #0]
 80086c6:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086c8:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 80086ca:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80086cc:	6811      	ldr	r1, [r2, #0]
 80086ce:	f041 0101 	orr.w	r1, r1, #1
 80086d2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80086d4:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80086d8:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80086dc:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80086de:	2002      	movs	r0, #2
 80086e0:	e7fc      	b.n	80086dc <HAL_I2CEx_ConfigAnalogFilter+0x46>

080086e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086e2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086e4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80086e8:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ea:	2a20      	cmp	r2, #32
 80086ec:	b2d4      	uxtb	r4, r2
 80086ee:	d11b      	bne.n	8008728 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086f0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80086f4:	2a01      	cmp	r2, #1
 80086f6:	d017      	beq.n	8008728 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086f8:	2224      	movs	r2, #36	@ 0x24
 80086fa:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086fe:	6802      	ldr	r2, [r0, #0]
 8008700:	6810      	ldr	r0, [r2, #0]
 8008702:	f020 0001 	bic.w	r0, r0, #1
 8008706:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008708:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800870a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800870e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008712:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8008714:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008716:	6811      	ldr	r1, [r2, #0]
 8008718:	f041 0101 	orr.w	r1, r1, #1
 800871c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800871e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008722:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008726:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8008728:	2002      	movs	r0, #2
 800872a:	e7fc      	b.n	8008726 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800872c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800872c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800872e:	2401      	movs	r4, #1
 8008730:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8008732:	2500      	movs	r5, #0
 8008734:	194e      	adds	r6, r1, r5
 8008736:	443d      	add	r5, r7
 8008738:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800873a:	42be      	cmp	r6, r7
 800873c:	d112      	bne.n	8008764 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800873e:	2c10      	cmp	r4, #16
 8008740:	d108      	bne.n	8008754 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8008742:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008744:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8008746:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8008748:	601d      	str	r5, [r3, #0]
  p = 0;
 800874a:	4623      	mov	r3, r4
  si = Huffsize[0];
 800874c:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800874e:	5cc8      	ldrb	r0, [r1, r3]
 8008750:	b9d8      	cbnz	r0, 800878a <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8008752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8008754:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8008756:	3401      	adds	r4, #1
 8008758:	197e      	adds	r6, r7, r5
 800875a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800875e:	d9e9      	bls.n	8008734 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8008760:	2001      	movs	r0, #1
 8008762:	e7f6      	b.n	8008752 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8008764:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8008768:	e7e7      	b.n	800873a <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800876a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800876e:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8008770:	5cc8      	ldrb	r0, [r1, r3]
 8008772:	19dc      	adds	r4, r3, r7
 8008774:	42a8      	cmp	r0, r5
 8008776:	d0f8      	beq.n	800876a <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8008778:	2d1f      	cmp	r5, #31
 800877a:	d8f1      	bhi.n	8008760 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800877c:	fa06 f005 	lsl.w	r0, r6, r5
 8008780:	42a0      	cmp	r0, r4
 8008782:	d9ed      	bls.n	8008760 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8008784:	0064      	lsls	r4, r4, #1
    si++;
 8008786:	3501      	adds	r5, #1
 8008788:	e7e1      	b.n	800874e <JPEG_Bits_To_SizeCodes+0x22>
 800878a:	1ae7      	subs	r7, r4, r3
 800878c:	e7f0      	b.n	8008770 <JPEG_Bits_To_SizeCodes+0x44>

0800878e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800878e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008790:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8008794:	460d      	mov	r5, r1
 8008796:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008798:	ab01      	add	r3, sp, #4
 800879a:	aa43      	add	r2, sp, #268	@ 0x10c
 800879c:	a902      	add	r1, sp, #8
 800879e:	f7ff ffc5 	bl	800872c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80087a2:	b940      	cbnz	r0, 80087b6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
 80087a4:	9e01      	ldr	r6, [sp, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	460a      	mov	r2, r1
 80087aa:	f104 010f 	add.w	r1, r4, #15
 80087ae:	360f      	adds	r6, #15
 80087b0:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 80087b2:	42a1      	cmp	r1, r4
 80087b4:	d102      	bne.n	80087bc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80087b6:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 80087ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 80087bc:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80087c0:	2e0b      	cmp	r6, #11
 80087c2:	d80a      	bhi.n	80087da <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80087c4:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80087c8:	f853 cb04 	ldr.w	ip, [r3], #4
 80087cc:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80087d0:	f812 7b01 	ldrb.w	r7, [r2], #1
 80087d4:	3f01      	subs	r7, #1
 80087d6:	55af      	strb	r7, [r5, r6]
      k++;
 80087d8:	e7eb      	b.n	80087b2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 80087da:	2001      	movs	r0, #1
 80087dc:	e7eb      	b.n	80087b6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

080087de <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80087de:	4603      	mov	r3, r0
 80087e0:	4608      	mov	r0, r1
 80087e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80087e4:	681c      	ldr	r4, [r3, #0]
{
 80087e6:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80087e8:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d125      	bne.n	800883c <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80087f0:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80087f4:	a901      	add	r1, sp, #4
 80087f6:	f7ff ffca 	bl	800878e <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80087fa:	b9e8      	cbnz	r0, 8008838 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 80087fc:	aa01      	add	r2, sp, #4
 80087fe:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8008802:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8008806:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8008808:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800880a:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800880c:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800880e:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008810:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8008814:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008816:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008818:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800881c:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8008820:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008822:	7b13      	ldrb	r3, [r2, #12]
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800882a:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800882c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008830:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8008834:	42b4      	cmp	r4, r6
 8008836:	d1e9      	bne.n	800880c <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008838:	b011      	add	sp, #68	@ 0x44
 800883a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800883c:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8008840:	429a      	cmp	r2, r3
 8008842:	d102      	bne.n	800884a <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008844:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8008848:	e7d4      	b.n	80087f4 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800884a:	2001      	movs	r0, #1
 800884c:	e7f4      	b.n	8008838 <JPEG_Set_HuffDC_Mem+0x5a>

0800884e <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800884e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008852:	6804      	ldr	r4, [r0, #0]
{
 8008854:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8008858:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800885a:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800885e:	429a      	cmp	r2, r3
 8008860:	d149      	bne.n	80088f6 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008862:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008866:	466b      	mov	r3, sp
 8008868:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800886c:	a901      	add	r1, sp, #4
 800886e:	4630      	mov	r0, r6
 8008870:	f7ff ff5c 	bl	800872c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8008874:	2800      	cmp	r0, #0
 8008876:	d13a      	bne.n	80088ee <JPEG_Set_HuffAC_Mem+0xa0>
 8008878:	9b00      	ldr	r3, [sp, #0]
 800887a:	460d      	mov	r5, r1
 800887c:	f106 0c0f 	add.w	ip, r6, #15
 8008880:	4617      	mov	r7, r2
 8008882:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8008884:	f04f 0e0a 	mov.w	lr, #10
 8008888:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800888a:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800888c:	4561      	cmp	r1, ip
 800888e:	d139      	bne.n	8008904 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8008890:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8008894:	a942      	add	r1, sp, #264	@ 0x108
 8008896:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800889a:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800889c:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800889e:	6063      	str	r3, [r4, #4]
 80088a0:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 80088a2:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 80088a6:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 80088aa:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 80088ac:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80088b0:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 80088b2:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80088b6:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 80088b8:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80088bc:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80088be:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 80088c2:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80088c4:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 80088c8:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80088ca:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80088cc:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80088d0:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80088d4:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80088d6:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80088e0:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80088e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088e6:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80088ea:	42b4      	cmp	r4, r6
 80088ec:	d1e7      	bne.n	80088be <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80088ee:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 80088f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80088f6:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d10f      	bne.n	800891e <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80088fe:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 8008902:	e7b0      	b.n	8008866 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8008904:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 8008908:	b15b      	cbz	r3, 8008922 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800890a:	2bf0      	cmp	r3, #240	@ 0xf0
 800890c:	d015      	beq.n	800893a <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800890e:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 8008910:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8008914:	3b01      	subs	r3, #1
 8008916:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800891a:	2ba1      	cmp	r3, #161	@ 0xa1
 800891c:	d902      	bls.n	8008924 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800891e:	2001      	movs	r0, #1
 8008920:	e7e5      	b.n	80088ee <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8008922:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008924:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8008928:	f857 8b04 	ldr.w	r8, [r7], #4
 800892c:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008930:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008934:	3a01      	subs	r2, #1
 8008936:	54f2      	strb	r2, [r6, r3]
      k++;
 8008938:	e7a8      	b.n	800888c <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800893a:	23a1      	movs	r3, #161	@ 0xa1
 800893c:	e7f2      	b.n	8008924 <JPEG_Set_HuffAC_Mem+0xd6>

0800893e <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800893e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008940:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008944:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008946:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8008948:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800894a:	f002 0203 	and.w	r2, r2, #3
 800894e:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	bf0c      	ite	eq
 8008954:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8008958:	f022 0208 	bicne.w	r2, r2, #8
 800895c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008968:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800896c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800896e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008974:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008978:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800897c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800897e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008980:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008984:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	f042 0201 	orr.w	r2, r2, #1
 800898c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800898e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008990:	f002 020c 	and.w	r2, r2, #12
 8008994:	2a08      	cmp	r2, #8
 8008996:	d104      	bne.n	80089a2 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8008998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800899a:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800899e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80089a0:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80089a2:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80089a4:	f002 020c 	and.w	r2, r2, #12
 80089a8:	2a0c      	cmp	r2, #12
 80089aa:	d1f9      	bne.n	80089a0 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80089ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089ae:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80089b2:	e7f4      	b.n	800899e <JPEG_Init_Process+0x60>

080089b4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 80089b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80089b6:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 80089b8:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80089ba:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80089bc:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80089be:	42aa      	cmp	r2, r5
 80089c0:	d313      	bcc.n	80089ea <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80089c2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80089c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80089c6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80089c8:	428b      	cmp	r3, r1
 80089ca:	d30e      	bcc.n	80089ea <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 80089cc:	4f18      	ldr	r7, [pc, #96]	@ (8008a30 <JPEG_DMA_StartProcess+0x7c>)
 80089ce:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 80089d0:	4f18      	ldr	r7, [pc, #96]	@ (8008a34 <JPEG_DMA_StartProcess+0x80>)
 80089d2:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80089d4:	4e18      	ldr	r6, [pc, #96]	@ (8008a38 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80089d6:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80089d8:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80089da:	4e18      	ldr	r6, [pc, #96]	@ (8008a3c <JPEG_DMA_StartProcess+0x88>)
 80089dc:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80089de:	b105      	cbz	r5, 80089e2 <JPEG_DMA_StartProcess+0x2e>
 80089e0:	b931      	cbnz	r1, 80089f0 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80089e2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80089e4:	f043 0304 	orr.w	r3, r3, #4
 80089e8:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80089ea:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80089ec:	b003      	add	sp, #12
 80089ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80089f0:	fbb2 f6f5 	udiv	r6, r2, r5
 80089f4:	fb05 2516 	mls	r5, r5, r6, r2
 80089f8:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80089fa:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80089fc:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80089fe:	fbb3 f2f1 	udiv	r2, r3, r1
 8008a02:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008a06:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8008a08:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008a0a:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8008a0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008a0e:	9500      	str	r5, [sp, #0]
 8008a10:	69e2      	ldr	r2, [r4, #28]
 8008a12:	f001 f810 	bl	8009a36 <HAL_MDMA_Start_IT>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d1e3      	bne.n	80089e2 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	9500      	str	r5, [sp, #0]
 8008a1e:	3240      	adds	r2, #64	@ 0x40
 8008a20:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a22:	69a1      	ldr	r1, [r4, #24]
 8008a24:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008a26:	f001 f806 	bl	8009a36 <HAL_MDMA_Start_IT>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d0de      	beq.n	80089ec <JPEG_DMA_StartProcess+0x38>
 8008a2e:	e7d8      	b.n	80089e2 <JPEG_DMA_StartProcess+0x2e>
 8008a30:	08008f73 	.word	0x08008f73
 8008a34:	08008e6f 	.word	0x08008e6f
 8008a38:	08009431 	.word	0x08009431
 8008a3c:	08009423 	.word	0x08009423

08008a40 <HAL_JPEG_Init>:
{
 8008a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8008a42:	4605      	mov	r5, r0
 8008a44:	2800      	cmp	r0, #0
 8008a46:	f000 80f2 	beq.w	8008c2e <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8008a4a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8008a4e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008a52:	b91b      	cbnz	r3, 8008a5c <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8008a54:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8008a58:	f7f8 fba0 	bl	800119c <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8008a5c:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	4a86      	ldr	r2, [pc, #536]	@ (8008c7c <HAL_JPEG_Init+0x23c>)
 8008a62:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8008a66:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8008a6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a6c:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	f023 0301 	bic.w	r3, r3, #1
 8008a7c:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008a7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a80:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008a84:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008a86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008a8c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008a8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a94:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008a96:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008a98:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008a9c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008a9e:	4b78      	ldr	r3, [pc, #480]	@ (8008c80 <HAL_JPEG_Init+0x240>)
 8008aa0:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8008aa2:	4b78      	ldr	r3, [pc, #480]	@ (8008c84 <HAL_JPEG_Init+0x244>)
 8008aa4:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8008aa6:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8008aa8:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008aac:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8008aae:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008ab0:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008ab2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008ab4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8008ab8:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008aba:	4333      	orrs	r3, r6
 8008abc:	7c56      	ldrb	r6, [r2, #17]
 8008abe:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008ac2:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8008ac6:	4281      	cmp	r1, r0
 8008ac8:	d1f0      	bne.n	8008aac <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008aca:	4b6f      	ldr	r3, [pc, #444]	@ (8008c88 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008acc:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8008ad0:	4a6e      	ldr	r2, [pc, #440]	@ (8008c8c <HAL_JPEG_Init+0x24c>)
 8008ad2:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008ad6:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8008ada:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008ade:	4610      	mov	r0, r2
 8008ae0:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008ae2:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8008ae6:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008aea:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008aee:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 8008af0:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008af2:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008af6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008af8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8008afc:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008b00:	ea43 030c 	orr.w	r3, r3, ip
 8008b04:	f890 c011 	ldrb.w	ip, [r0, #17]
 8008b08:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008b0c:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8008b10:	42be      	cmp	r6, r7
 8008b12:	d1ec      	bne.n	8008aee <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8008b14:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8008b18:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8008b1c:	f36f 030f 	bfc	r3, #0, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8008b20:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8008b24:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8008b28:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008b2c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8008b30:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008b32:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008b36:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008b38:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8008b3c:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8008b40:	4333      	orrs	r3, r6
 8008b42:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8008b46:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008b4a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8008b4e:	4281      	cmp	r1, r0
 8008b50:	d1ec      	bne.n	8008b2c <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8008b52:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8008b56:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8008b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8008c90 <HAL_JPEG_Init+0x250>)
 8008b5c:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8008b60:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8008b62:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8008b66:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8008b6a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008b6e:	4013      	ands	r3, r2
  *address = value;
 8008b70:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008b74:	2301      	movs	r3, #1
 8008b76:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8008b7a:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8008b7e:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8008b82:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8008b86:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008b8a:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8008b8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8008b90:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8008b94:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008b98:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8008b9a:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8008b9e:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8008ba2:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8008c94 <HAL_JPEG_Init+0x254>)
 8008ba8:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8008bac:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008bb0:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8008bb4:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008bb8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8008bba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8008bbe:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8008bc2:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8008bc6:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8008bc8:	4a33      	ldr	r2, [pc, #204]	@ (8008c98 <HAL_JPEG_Init+0x258>)
 8008bca:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8008bce:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8008bd2:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008bd6:	4b31      	ldr	r3, [pc, #196]	@ (8008c9c <HAL_JPEG_Init+0x25c>)
 8008bd8:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8008bdc:	4b30      	ldr	r3, [pc, #192]	@ (8008ca0 <HAL_JPEG_Init+0x260>)
 8008bde:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8008be2:	4b30      	ldr	r3, [pc, #192]	@ (8008ca4 <HAL_JPEG_Init+0x264>)
 8008be4:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8008be8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8008bec:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8008bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8008bf2:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8008bf6:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8008bfa:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008bfc:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8008c00:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8008c02:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8008c06:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8008c0a:	4333      	orrs	r3, r6
 8008c0c:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8008c10:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008c14:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8008c18:	4281      	cmp	r1, r0
 8008c1a:	d1ec      	bne.n	8008bf6 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008c1c:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8008c20:	491a      	ldr	r1, [pc, #104]	@ (8008c8c <HAL_JPEG_Init+0x24c>)
 8008c22:	4628      	mov	r0, r5
 8008c24:	f7ff fe13 	bl	800884e <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008c28:	b118      	cbz	r0, 8008c32 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8008c2e:	2001      	movs	r0, #1
}
 8008c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8008c32:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8008c36:	4918      	ldr	r1, [pc, #96]	@ (8008c98 <HAL_JPEG_Init+0x258>)
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f7ff fe08 	bl	800884e <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d1f3      	bne.n	8008c2a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8008c42:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8008c46:	490d      	ldr	r1, [pc, #52]	@ (8008c7c <HAL_JPEG_Init+0x23c>)
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f7ff fdc8 	bl	80087de <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d1eb      	bne.n	8008c2a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8008c52:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8008c56:	4914      	ldr	r1, [pc, #80]	@ (8008ca8 <HAL_JPEG_Init+0x268>)
 8008c58:	4628      	mov	r0, r5
 8008c5a:	f7ff fdc0 	bl	80087de <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d1e3      	bne.n	8008c2a <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c68:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008c6a:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8008c6c:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8008c6e:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008c70:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008c74:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8008c76:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8008c78:	e7da      	b.n	8008c30 <HAL_JPEG_Init+0x1f0>
 8008c7a:	bf00      	nop
 8008c7c:	08026958 	.word	0x08026958
 8008c80:	08026758 	.word	0x08026758
 8008c84:	08026718 	.word	0x08026718
 8008c88:	0b0a0908 	.word	0x0b0a0908
 8008c8c:	0802688a 	.word	0x0802688a
 8008c90:	ffff0000 	.word	0xffff0000
 8008c94:	09080706 	.word	0x09080706
 8008c98:	080267d8 	.word	0x080267d8
 8008c9c:	01000404 	.word	0x01000404
 8008ca0:	05070403 	.word	0x05070403
 8008ca4:	04040201 	.word	0x04040201
 8008ca8:	0802693c 	.word	0x0802693c

08008cac <HAL_JPEG_GetInfo>:
{
 8008cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d06f      	beq.n	8008d94 <HAL_JPEG_GetInfo+0xe8>
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	d06d      	beq.n	8008d94 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008cb8:	6804      	ldr	r4, [r0, #0]
 8008cba:	6863      	ldr	r3, [r4, #4]
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d047      	beq.n	8008d54 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	f013 0303 	ands.w	r3, r3, #3
 8008cca:	d005      	beq.n	8008cd8 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d15e      	bne.n	8008d94 <HAL_JPEG_GetInfo+0xe8>
 8008cd6:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008cd8:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008cda:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008cdc:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008ce0:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008ce2:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008ce4:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008ce6:	68e2      	ldr	r2, [r4, #12]
 8008ce8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008cec:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008cee:	d13c      	bne.n	8008d6a <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008cf0:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008cf2:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008cf4:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008cf8:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008cfa:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008cfc:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008cfe:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008d02:	d129      	bne.n	8008d58 <HAL_JPEG_GetInfo+0xac>
 8008d04:	4313      	orrs	r3, r2
 8008d06:	f013 0f0f 	tst.w	r3, #15
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2301      	moveq	r3, #1
 8008d0e:	2300      	movne	r3, #0
 8008d10:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8008d12:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	3450      	adds	r4, #80	@ 0x50
 8008d18:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8008d98 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8008d1c:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008d1e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8008d22:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8008d26:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8008d2a:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8008d2e:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8008d30:	fa29 f206 	lsr.w	r2, r9, r6
 8008d34:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8008d36:	2a01      	cmp	r2, #1
 8008d38:	d119      	bne.n	8008d6e <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8008d3a:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8008d3c:	3608      	adds	r6, #8
 8008d3e:	3701      	adds	r7, #1
 8008d40:	2e20      	cmp	r6, #32
 8008d42:	d1f5      	bne.n	8008d30 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8008d44:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8008d46:	2d40      	cmp	r5, #64	@ 0x40
 8008d48:	d1ed      	bne.n	8008d26 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8008d4a:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8008d4c:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008d4e:	610b      	str	r3, [r1, #16]
}
 8008d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d54:	2310      	movs	r3, #16
 8008d56:	e7bf      	b.n	8008cd8 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008d58:	2d03      	cmp	r5, #3
 8008d5a:	d106      	bne.n	8008d6a <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	f013 0f0f 	tst.w	r3, #15
 8008d62:	bf0c      	ite	eq
 8008d64:	2301      	moveq	r3, #1
 8008d66:	2300      	movne	r3, #0
 8008d68:	e7d3      	b.n	8008d12 <HAL_JPEG_GetInfo+0x66>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e7d1      	b.n	8008d12 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008d6e:	fb0e fb02 	mul.w	fp, lr, r2
 8008d72:	f897 a000 	ldrb.w	sl, [r7]
 8008d76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d78:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8008d7c:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8008d80:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8008d82:	bf8b      	itete	hi
 8008d84:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8008d88:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8008d8c:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8008d8e:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8008d92:	e7d3      	b.n	8008d3c <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8008d94:	2001      	movs	r0, #1
 8008d96:	e7db      	b.n	8008d50 <HAL_JPEG_GetInfo+0xa4>
 8008d98:	08026798 	.word	0x08026798

08008d9c <HAL_JPEG_Decode_DMA>:
{
 8008d9c:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8008d9e:	4604      	mov	r4, r0
 8008da0:	b348      	cbz	r0, 8008df6 <HAL_JPEG_Decode_DMA+0x5a>
 8008da2:	b341      	cbz	r1, 8008df6 <HAL_JPEG_Decode_DMA+0x5a>
 8008da4:	b33b      	cbz	r3, 8008df6 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8008da6:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8008daa:	2d01      	cmp	r5, #1
 8008dac:	d028      	beq.n	8008e00 <HAL_JPEG_Decode_DMA+0x64>
 8008dae:	2501      	movs	r5, #1
 8008db0:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008db4:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8008db8:	2d01      	cmp	r5, #1
 8008dba:	d11e      	bne.n	8008dfa <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008dbc:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8008dbe:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008dc0:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008dc4:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8008dc6:	f025 050f 	bic.w	r5, r5, #15
 8008dca:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008dcc:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8008dce:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8008dd2:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008dd6:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8008dd8:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8008dda:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8008ddc:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8008dde:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8008de0:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8008de2:	f7ff fdac 	bl	800893e <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8008de6:	f7ff fde5 	bl	80089b4 <JPEG_DMA_StartProcess>
 8008dea:	b128      	cbz	r0, 8008df8 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008dec:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8008dee:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008df2:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008df6:	2001      	movs	r0, #1
}
 8008df8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8008e00:	2002      	movs	r0, #2
 8008e02:	e7f9      	b.n	8008df8 <HAL_JPEG_Decode_DMA+0x5c>

08008e04 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008e04:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e06:	f003 030c 	and.w	r3, r3, #12
 8008e0a:	2b0c      	cmp	r3, #12
 8008e0c:	d10d      	bne.n	8008e2a <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008e0e:	07cb      	lsls	r3, r1, #31
 8008e10:	d503      	bpl.n	8008e1a <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008e12:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e18:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008e1a:	0789      	lsls	r1, r1, #30
 8008e1c:	d503      	bpl.n	8008e26 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008e1e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008e24:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8008e26:	2000      	movs	r0, #0
 8008e28:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008e2a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e2c:	f003 030c 	and.w	r3, r3, #12
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d1f8      	bne.n	8008e26 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008e34:	f011 0301 	ands.w	r3, r1, #1
 8008e38:	d004      	beq.n	8008e44 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008e3a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e40:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008e42:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008e44:	078a      	lsls	r2, r1, #30
 8008e46:	d505      	bpl.n	8008e54 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008e48:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008e4a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008e4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e52:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008e54:	6801      	ldr	r1, [r0, #0]
 8008e56:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008e58:	ea22 0303 	bic.w	r3, r2, r3
 8008e5c:	630b      	str	r3, [r1, #48]	@ 0x30
 8008e5e:	e7e2      	b.n	8008e26 <HAL_JPEG_Pause+0x22>

08008e60 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008e60:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8008e62:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8008e64:	4770      	bx	lr

08008e66 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008e66:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008e68:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8008e6a:	4770      	bx	lr

08008e6c <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8008e6c:	4770      	bx	lr

08008e6e <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008e6e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8008e70:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008e72:	6803      	ldr	r3, [r0, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	f022 0201 	bic.w	r2, r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008e7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e7e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008e82:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008e8a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008e8c:	f043 0304 	orr.w	r3, r3, #4
 8008e90:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8008e92:	f7f9 fc89 	bl	80027a8 <HAL_JPEG_ErrorCallback>
}
 8008e96:	bd08      	pop	{r3, pc}

08008e98 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008e98:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8008e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008ea0:	b922      	cbnz	r2, 8008eac <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	f7ff ffae 	bl	8008e04 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	e004      	b.n	8008eb6 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008eac:	6a03      	ldr	r3, [r0, #32]
 8008eae:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008eb0:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008eb2:	d924      	bls.n	8008efe <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008eb4:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8008eb6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008eb8:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008ebc:	d11e      	bne.n	8008efc <JPEG_ReadInputData+0x64>
 8008ebe:	b1ea      	cbz	r2, 8008efc <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8008ec0:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008ec4:	69a0      	ldr	r0, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8008ec6:	ea4f 0692 	mov.w	r6, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008eca:	6821      	ldr	r1, [r4, #0]
    if (nb_words >= nbRequestWords)
 8008ecc:	d826      	bhi.n	8008f1c <JPEG_ReadInputData+0x84>
        input_count = hjpeg->JpegInCount;
 8008ece:	6a27      	ldr	r7, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008ed0:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ed2:	19c6      	adds	r6, r0, r7
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008ed4:	5dc7      	ldrb	r7, [r0, r7]
      for (index = 0; index < nbRequestWords; index++)
 8008ed6:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008ed8:	78b2      	ldrb	r2, [r6, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008eda:	f896 c001 	ldrb.w	ip, [r6, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008ede:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008ee2:	78f6      	ldrb	r6, [r6, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ee4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008ee8:	ea42 0207 	orr.w	r2, r2, r7
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008eec:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008ef0:	640a      	str	r2, [r1, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008ef2:	6a22      	ldr	r2, [r4, #32]
 8008ef4:	f102 0204 	add.w	r2, r2, #4
 8008ef8:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008efa:	d1e8      	bne.n	8008ece <JPEG_ReadInputData+0x36>
}
 8008efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d1d2      	bne.n	8008ea8 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008f02:	6a01      	ldr	r1, [r0, #32]
 8008f04:	f7f9 fbe2 	bl	80026cc <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8008f08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008f0a:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008f0c:	bf84      	itt	hi
 8008f0e:	f023 0303 	bichi.w	r3, r3, #3
 8008f12:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008f14:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8008f16:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008f18:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8008f1a:	e7cc      	b.n	8008eb6 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8008f1c:	2a03      	cmp	r2, #3
 8008f1e:	d917      	bls.n	8008f50 <JPEG_ReadInputData+0xb8>
          input_count = hjpeg->JpegInCount;
 8008f20:	6a27      	ldr	r7, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008f22:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008f24:	19c5      	adds	r5, r0, r7
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008f26:	5dc7      	ldrb	r7, [r0, r7]
        for (index = 0; index < nb_words; index++)
 8008f28:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008f2a:	78aa      	ldrb	r2, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008f2c:	f895 c001 	ldrb.w	ip, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008f30:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008f34:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008f36:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008f3a:	ea42 0207 	orr.w	r2, r2, r7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008f3e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008f42:	640a      	str	r2, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008f44:	6a22      	ldr	r2, [r4, #32]
 8008f46:	f102 0204 	add.w	r2, r2, #4
 8008f4a:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008f4c:	d8e8      	bhi.n	8008f20 <JPEG_ReadInputData+0x88>
 8008f4e:	e7d5      	b.n	8008efc <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8008f50:	461d      	mov	r5, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008f52:	6a26      	ldr	r6, [r4, #32]
 8008f54:	00ef      	lsls	r7, r5, #3
        for (index = 0; index < nb_bytes; index++)
 8008f56:	3501      	adds	r5, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008f58:	5d86      	ldrb	r6, [r0, r6]
        for (index = 0; index < nb_bytes; index++)
 8008f5a:	42aa      	cmp	r2, r5
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008f5c:	fa06 f607 	lsl.w	r6, r6, r7
 8008f60:	ea43 0306 	orr.w	r3, r3, r6
          hjpeg->JpegInCount++;
 8008f64:	6a26      	ldr	r6, [r4, #32]
 8008f66:	f106 0601 	add.w	r6, r6, #1
 8008f6a:	6226      	str	r6, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008f6c:	d1f1      	bne.n	8008f52 <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = dataword;
 8008f6e:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8008f70:	e7c4      	b.n	8008efc <JPEG_ReadInputData+0x64>

08008f72 <JPEG_MDMAInCpltCallback>:
{
 8008f72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008f74:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008f76:	6822      	ldr	r2, [r4, #0]
 8008f78:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008f7a:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008f7e:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8008f80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008f82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008f86:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8008f8a:	041b      	lsls	r3, r3, #16
 8008f8c:	0c1b      	lsrs	r3, r3, #16
 8008f8e:	2b0c      	cmp	r3, #12
 8008f90:	d11a      	bne.n	8008fc8 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008f92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008f94:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008f96:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008f98:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008f9a:	695a      	ldr	r2, [r3, #20]
 8008f9c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008f9e:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008fa2:	1a9b      	subs	r3, r3, r2
 8008fa4:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008fa6:	6a21      	ldr	r1, [r4, #32]
 8008fa8:	f7f9 fb90 	bl	80026cc <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8008fac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008fae:	42ab      	cmp	r3, r5
 8008fb0:	d327      	bcc.n	8009002 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008fb2:	b95d      	cbnz	r5, 8008fcc <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008fb4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8008fb6:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008fb8:	f043 0304 	orr.w	r3, r3, #4
 8008fbc:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008fbe:	2306      	movs	r3, #6
 8008fc0:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008fc4:	f7f9 fbf0 	bl	80027a8 <HAL_JPEG_ErrorCallback>
}
 8008fc8:	b003      	add	sp, #12
 8008fca:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008fcc:	fbb3 f2f5 	udiv	r2, r3, r5
 8008fd0:	fb05 3212 	mls	r2, r5, r2, r3
 8008fd4:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008fd6:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008fd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008fda:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008fdc:	04db      	lsls	r3, r3, #19
 8008fde:	d40a      	bmi.n	8008ff6 <JPEG_MDMAInCpltCallback+0x84>
 8008fe0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008fe2:	b143      	cbz	r3, 8008ff6 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	3240      	adds	r2, #64	@ 0x40
 8008fe8:	9100      	str	r1, [sp, #0]
 8008fea:	69a1      	ldr	r1, [r4, #24]
 8008fec:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008fee:	f000 fd22 	bl	8009a36 <HAL_MDMA_Start_IT>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d1de      	bne.n	8008fb4 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008ff6:	6822      	ldr	r2, [r4, #0]
 8008ff8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008ffa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8009000:	e7e2      	b.n	8008fc8 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0e8      	beq.n	8008fd8 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8009006:	079a      	lsls	r2, r3, #30
 8009008:	d0e6      	beq.n	8008fd8 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800900a:	f023 0303 	bic.w	r3, r3, #3
 800900e:	3304      	adds	r3, #4
 8009010:	e7e1      	b.n	8008fd6 <JPEG_MDMAInCpltCallback+0x64>

08009012 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009012:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009016:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800901a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800901c:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800901e:	4293      	cmp	r3, r2
 8009020:	d32a      	bcc.n	8009078 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8009022:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8009024:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8009026:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009028:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800902a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800902c:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800902e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009030:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009032:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009034:	69e0      	ldr	r0, [r4, #28]
 8009036:	4428      	add	r0, r5
 8009038:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800903c:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800903e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009040:	69e0      	ldr	r0, [r4, #28]
 8009042:	4428      	add	r0, r5
 8009044:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009048:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800904c:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800904e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009050:	69e0      	ldr	r0, [r4, #28]
 8009052:	4428      	add	r0, r5
 8009054:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8009056:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009058:	f103 0304 	add.w	r3, r3, #4
 800905c:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800905e:	d1e1      	bne.n	8009024 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009060:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009062:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009064:	429a      	cmp	r2, r3
 8009066:	d106      	bne.n	8009076 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009068:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800906a:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800906c:	4620      	mov	r0, r4
 800906e:	f7f9 fb4b 	bl	8002708 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8009076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009078:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800907a:	4293      	cmp	r3, r2
 800907c:	d9fb      	bls.n	8009076 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800907e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009080:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8009086:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009088:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800908a:	d105      	bne.n	8009098 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800908c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800908e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009090:	429f      	cmp	r7, r3
 8009092:	d119      	bne.n	80090c8 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009094:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009096:	e7e9      	b.n	800906c <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8009098:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800909a:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800909c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800909e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80090a0:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80090a2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80090a4:	69e1      	ldr	r1, [r4, #28]
 80090a6:	4429      	add	r1, r5
 80090a8:	0a1d      	lsrs	r5, r3, #8
 80090aa:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80090ac:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80090ae:	69e1      	ldr	r1, [r4, #28]
 80090b0:	4429      	add	r1, r5
 80090b2:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80090b4:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80090b6:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80090b8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80090ba:	69e1      	ldr	r1, [r4, #28]
 80090bc:	4429      	add	r1, r5
 80090be:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 80090c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80090c2:	3304      	adds	r3, #4
 80090c4:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80090c6:	e7de      	b.n	8009086 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80090c8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80090ca:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 80090cc:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80090ce:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 80090d0:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 80090d2:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80090d4:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 80090d6:	d114      	bne.n	8009102 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80090d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80090da:	4620      	mov	r0, r4
 80090dc:	f7f9 fb14 	bl	8002708 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80090e4:	1d2b      	adds	r3, r5, #4
 80090e6:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d8c4      	bhi.n	8009076 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80090ec:	00da      	lsls	r2, r3, #3
 80090ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80090f0:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80090f2:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80090f4:	fa26 f202 	lsr.w	r2, r6, r2
 80090f8:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80090fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80090fc:	3201      	adds	r2, #1
 80090fe:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8009100:	e7f2      	b.n	80090e8 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009102:	f002 0303 	and.w	r3, r2, #3
 8009106:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800910a:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	fa26 f303 	lsr.w	r3, r6, r3
 8009112:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8009116:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009118:	3301      	adds	r3, #1
 800911a:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800911c:	e7d9      	b.n	80090d2 <JPEG_StoreOutputData+0xc0>

0800911e <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800911e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009120:	f003 0303 	and.w	r3, r3, #3
 8009124:	2b02      	cmp	r3, #2
{
 8009126:	b510      	push	{r4, lr}
 8009128:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800912a:	d114      	bne.n	8009156 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800912c:	6803      	ldr	r3, [r0, #0]
 800912e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009130:	065b      	lsls	r3, r3, #25
 8009132:	d510      	bpl.n	8009156 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009134:	1d01      	adds	r1, r0, #4
 8009136:	f7ff fdb9 	bl	8008cac <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800913a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800913c:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800913e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009140:	f7f9 fa8e 	bl	8002660 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800914c:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800914e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009150:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009154:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009156:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009158:	04d9      	lsls	r1, r3, #19
 800915a:	d407      	bmi.n	800916c <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009160:	0792      	lsls	r2, r2, #30
 8009162:	d544      	bpl.n	80091ee <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009164:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8009166:	4620      	mov	r0, r4
 8009168:	f7ff fe96 	bl	8008e98 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800916c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800916e:	0499      	lsls	r1, r3, #18
 8009170:	d407      	bmi.n	8009182 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009176:	0712      	lsls	r2, r2, #28
 8009178:	d53e      	bpl.n	80091f8 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800917a:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800917c:	4620      	mov	r0, r4
 800917e:	f7ff ff48 	bl	8009012 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009186:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800918a:	2a20      	cmp	r2, #32
 800918c:	d13c      	bne.n	8009208 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	f022 0201 	bic.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009196:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009198:	f002 020c 	and.w	r2, r2, #12
 800919c:	2a08      	cmp	r2, #8
 800919e:	d103      	bne.n	80091a8 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80091a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091a2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80091a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80091a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091aa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80091ae:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 80091b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80091b2:	b133      	cbz	r3, 80091c2 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80091b4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80091b6:	4620      	mov	r0, r4
 80091b8:	69e1      	ldr	r1, [r4, #28]
 80091ba:	f7f9 faa5 	bl	8002708 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 80091c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80091c4:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80091c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80091c8:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80091cc:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80091d0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80091d2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80091d4:	f04f 0200 	mov.w	r2, #0
 80091d8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80091dc:	f04f 0201 	mov.w	r2, #1
 80091e0:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80091e4:	d10d      	bne.n	8009202 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80091e6:	f7f9 fae1 	bl	80027ac <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80091ea:	2001      	movs	r0, #1
}
 80091ec:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80091ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091f0:	0758      	lsls	r0, r3, #29
 80091f2:	d5bb      	bpl.n	800916c <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80091f4:	2101      	movs	r1, #1
 80091f6:	e7b6      	b.n	8009166 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80091f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091fa:	06db      	lsls	r3, r3, #27
 80091fc:	d5c1      	bpl.n	8009182 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80091fe:	2101      	movs	r1, #1
 8009200:	e7bc      	b.n	800917c <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009202:	f7ff fe33 	bl	8008e6c <HAL_JPEG_EncodeCpltCallback>
 8009206:	e7f0      	b.n	80091ea <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8009208:	2000      	movs	r0, #0
 800920a:	e7ef      	b.n	80091ec <JPEG_Process+0xce>

0800920c <JPEG_DMA_PollResidualData>:
{
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	4604      	mov	r4, r0
 8009210:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009212:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009214:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009216:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800921a:	d122      	bne.n	8009262 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800921c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800921e:	06d0      	lsls	r0, r2, #27
 8009220:	d51f      	bpl.n	8009262 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8009222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8009224:	69e1      	ldr	r1, [r4, #28]
 8009226:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009228:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800922a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800922c:	69e2      	ldr	r2, [r4, #28]
 800922e:	440a      	add	r2, r1
 8009230:	0a19      	lsrs	r1, r3, #8
 8009232:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009234:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009236:	69e2      	ldr	r2, [r4, #28]
 8009238:	440a      	add	r2, r1
 800923a:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800923c:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800923e:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009240:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009242:	69e2      	ldr	r2, [r4, #28]
 8009244:	440a      	add	r2, r1
 8009246:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8009248:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800924a:	3304      	adds	r3, #4
 800924c:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800924e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009250:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009252:	429a      	cmp	r2, r3
 8009254:	d105      	bne.n	8009262 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009256:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009258:	4620      	mov	r0, r4
 800925a:	69e1      	ldr	r1, [r4, #28]
 800925c:	f7f9 fa54 	bl	8002708 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8009260:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009262:	3e01      	subs	r6, #1
 8009264:	d1d5      	bne.n	8009212 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009266:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8009268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800926a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800926c:	06c9      	lsls	r1, r1, #27
 800926e:	d501      	bpl.n	8009274 <JPEG_DMA_PollResidualData+0x68>
 8009270:	0492      	lsls	r2, r2, #18
 8009272:	d420      	bmi.n	80092b6 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	f022 0201 	bic.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800927c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800927e:	b133      	cbz	r3, 800928e <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009280:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009282:	4620      	mov	r0, r4
 8009284:	69e1      	ldr	r1, [r4, #28]
 8009286:	f7f9 fa3f 	bl	8002708 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800928e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009290:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009292:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009294:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009298:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800929c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800929e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80092a0:	f04f 0200 	mov.w	r2, #0
 80092a4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80092a8:	f04f 0201 	mov.w	r2, #1
 80092ac:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80092b0:	d102      	bne.n	80092b8 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80092b2:	f7f9 fa7b 	bl	80027ac <HAL_JPEG_DecodeCpltCallback>
}
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80092b8:	f7ff fdd8 	bl	8008e6c <HAL_JPEG_EncodeCpltCallback>
}
 80092bc:	e7fb      	b.n	80092b6 <JPEG_DMA_PollResidualData+0xaa>

080092be <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80092be:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80092c0:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 80092c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092c6:	4604      	mov	r4, r0
 80092c8:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80092ca:	d014      	beq.n	80092f6 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80092cc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80092ce:	f003 030c 	and.w	r3, r3, #12
 80092d2:	2b0c      	cmp	r3, #12
 80092d4:	d146      	bne.n	8009364 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80092d6:	07cb      	lsls	r3, r1, #31
 80092d8:	d520      	bpl.n	800931c <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80092da:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80092dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092e0:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80092e2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80092e4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 80092e6:	b941      	cbnz	r1, 80092fa <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80092e8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80092ea:	f043 0304 	orr.w	r3, r3, #4
 80092ee:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80092f0:	2306      	movs	r3, #6
 80092f2:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80092f6:	2001      	movs	r0, #1
 80092f8:	e01d      	b.n	8009336 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 80092fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80092fc:	fbb3 f2f1 	udiv	r2, r3, r1
 8009300:	fb01 3212 	mls	r2, r1, r2, r3
 8009304:	1a9b      	subs	r3, r3, r2
 8009306:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8009308:	b143      	cbz	r3, 800931c <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800930a:	6822      	ldr	r2, [r4, #0]
 800930c:	2101      	movs	r1, #1
 800930e:	3240      	adds	r2, #64	@ 0x40
 8009310:	9100      	str	r1, [sp, #0]
 8009312:	69a1      	ldr	r1, [r4, #24]
 8009314:	f000 fb8f 	bl	8009a36 <HAL_MDMA_Start_IT>
 8009318:	2800      	cmp	r0, #0
 800931a:	d1e5      	bne.n	80092e8 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800931c:	07a8      	lsls	r0, r5, #30
 800931e:	d509      	bpl.n	8009334 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009320:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009322:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009326:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009328:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800932a:	0419      	lsls	r1, r3, #16
 800932c:	d505      	bpl.n	800933a <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800932e:	4620      	mov	r0, r4
 8009330:	f7ff ff6c 	bl	800920c <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8009334:	2000      	movs	r0, #0
}
 8009336:	b003      	add	sp, #12
 8009338:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800933a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800933c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800933e:	2900      	cmp	r1, #0
 8009340:	d0d2      	beq.n	80092e8 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009342:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009344:	fbb3 f2f1 	udiv	r2, r3, r1
 8009348:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800934c:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800934e:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009350:	2201      	movs	r2, #1
 8009352:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009354:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009356:	9200      	str	r2, [sp, #0]
 8009358:	69e2      	ldr	r2, [r4, #28]
 800935a:	f000 fb6c 	bl	8009a36 <HAL_MDMA_Start_IT>
 800935e:	2800      	cmp	r0, #0
 8009360:	d0e8      	beq.n	8009334 <HAL_JPEG_Resume+0x76>
 8009362:	e7c1      	b.n	80092e8 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009364:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009366:	f003 030c 	and.w	r3, r3, #12
 800936a:	2b08      	cmp	r3, #8
 800936c:	d1e2      	bne.n	8009334 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800936e:	f011 0301 	ands.w	r3, r1, #1
 8009372:	d004      	beq.n	800937e <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009374:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009376:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800937a:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800937c:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800937e:	07aa      	lsls	r2, r5, #30
 8009380:	d505      	bpl.n	800938e <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009382:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009384:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009388:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800938c:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800938e:	6821      	ldr	r1, [r4, #0]
 8009390:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009392:	4313      	orrs	r3, r2
 8009394:	630b      	str	r3, [r1, #48]	@ 0x30
 8009396:	e7cd      	b.n	8009334 <HAL_JPEG_Resume+0x76>

08009398 <JPEG_DMA_EndProcess>:
{
 8009398:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800939a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800939c:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800939e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80093ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d105      	bne.n	80093be <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80093b2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80093b4:	69c1      	ldr	r1, [r0, #28]
 80093b6:	f7f9 f9a7 	bl	8002708 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 80093c2:	f015 0510 	ands.w	r5, r5, #16
 80093c6:	d124      	bne.n	8009412 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 80093c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80093ca:	b12b      	cbz	r3, 80093d8 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80093cc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80093ce:	4620      	mov	r0, r4
 80093d0:	69e1      	ldr	r1, [r4, #28]
 80093d2:	f7f9 f999 	bl	8002708 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80093d6:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80093d8:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80093da:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80093dc:	6813      	ldr	r3, [r2, #0]
 80093de:	f023 0301 	bic.w	r3, r3, #1
 80093e2:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80093e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80093e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80093e8:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80093ec:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80093f0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80093f2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80093fc:	f04f 0201 	mov.w	r2, #1
 8009400:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009404:	d102      	bne.n	800940c <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009406:	f7f9 f9d1 	bl	80027ac <HAL_JPEG_DecodeCpltCallback>
}
 800940a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800940c:	f7ff fd2e 	bl	8008e6c <HAL_JPEG_EncodeCpltCallback>
 8009410:	e7fb      	b.n	800940a <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009412:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009414:	049b      	lsls	r3, r3, #18
 8009416:	d4f8      	bmi.n	800940a <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8009418:	4620      	mov	r0, r4
}
 800941a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800941e:	f7ff bef5 	b.w	800920c <JPEG_DMA_PollResidualData>

08009422 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009422:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009424:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009426:	041b      	lsls	r3, r3, #16
 8009428:	d501      	bpl.n	800942e <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800942a:	f7ff bfb5 	b.w	8009398 <JPEG_DMA_EndProcess>
}
 800942e:	4770      	bx	lr

08009430 <JPEG_MDMAOutCpltCallback>:
{
 8009430:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009432:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009438:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800943c:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800943e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009440:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8009444:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8009448:	0412      	lsls	r2, r2, #16
 800944a:	0c12      	lsrs	r2, r2, #16
 800944c:	2a0c      	cmp	r2, #12
 800944e:	d125      	bne.n	800949c <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8009450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009452:	069a      	lsls	r2, r3, #26
 8009454:	d424      	bmi.n	80094a0 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009456:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009458:	4620      	mov	r0, r4
 800945a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800945c:	695a      	ldr	r2, [r3, #20]
 800945e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009460:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009468:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800946a:	f7f9 f94d 	bl	8002708 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800946e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009470:	049b      	lsls	r3, r3, #18
 8009472:	d415      	bmi.n	80094a0 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009474:	6821      	ldr	r1, [r4, #0]
 8009476:	2301      	movs	r3, #1
 8009478:	3144      	adds	r1, #68	@ 0x44
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800947e:	69e2      	ldr	r2, [r4, #28]
 8009480:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009482:	f000 fad8 	bl	8009a36 <HAL_MDMA_Start_IT>
 8009486:	b158      	cbz	r0, 80094a0 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009488:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800948a:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800948c:	f043 0304 	orr.w	r3, r3, #4
 8009490:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009492:	2306      	movs	r3, #6
 8009494:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8009498:	f7f9 f986 	bl	80027a8 <HAL_JPEG_ErrorCallback>
}
 800949c:	b002      	add	sp, #8
 800949e:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80094a0:	6822      	ldr	r2, [r4, #0]
 80094a2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80094a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80094a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80094aa:	e7f7      	b.n	800949c <JPEG_MDMAOutCpltCallback+0x6c>

080094ac <HAL_JPEG_IRQHandler>:
{
 80094ac:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 80094ae:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 80094b2:	4604      	mov	r4, r0
  switch (hjpeg->State)
 80094b4:	3b03      	subs	r3, #3
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d850      	bhi.n	800955c <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80094ba:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80094bc:	f003 030c 	and.w	r3, r3, #12
 80094c0:	2b08      	cmp	r3, #8
 80094c2:	d103      	bne.n	80094cc <HAL_JPEG_IRQHandler+0x20>
}
 80094c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 80094c8:	f7ff be29 	b.w	800911e <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80094cc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80094ce:	f003 030c 	and.w	r3, r3, #12
 80094d2:	2b0c      	cmp	r3, #12
 80094d4:	d142      	bne.n	800955c <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80094d6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d114      	bne.n	800950a <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80094e0:	6803      	ldr	r3, [r0, #0]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e4:	0659      	lsls	r1, r3, #25
 80094e6:	d510      	bpl.n	800950a <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80094e8:	1d01      	adds	r1, r0, #4
 80094ea:	f7ff fbdf 	bl	8008cac <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80094ee:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80094f0:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80094f2:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80094f4:	f7f9 f8b4 	bl	8002660 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009500:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009504:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009508:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800950e:	0692      	lsls	r2, r2, #26
 8009510:	d524      	bpl.n	800955c <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009512:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009514:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800951a:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	f022 0201 	bic.w	r2, r2, #1
 8009522:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009526:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800952a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800952c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800952e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009532:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009534:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009538:	2b02      	cmp	r3, #2
 800953a:	d101      	bne.n	8009540 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800953c:	f000 fac4 	bl	8009ac8 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009540:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009542:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009546:	2b02      	cmp	r3, #2
 8009548:	d103      	bne.n	8009552 <HAL_JPEG_IRQHandler+0xa6>
}
 800954a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800954e:	f000 babb 	b.w	8009ac8 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8009552:	4620      	mov	r0, r4
}
 8009554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8009558:	f7ff bf1e 	b.w	8009398 <JPEG_DMA_EndProcess>
}
 800955c:	bd10      	pop	{r4, pc}
	...

08009560 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009560:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009562:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009564:	3284      	adds	r2, #132	@ 0x84
 8009566:	1883      	adds	r3, r0, r2
{
 8009568:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800956a:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800956c:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800956e:	684c      	ldr	r4, [r1, #4]
 8009570:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009574:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009578:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800957a:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800957c:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800957e:	f106 0c01 	add.w	ip, r6, #1
 8009582:	68c5      	ldr	r5, [r0, #12]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009584:	1ba4      	subs	r4, r4, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009586:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800958a:	4465      	add	r5, ip
 800958c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009590:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009592:	68c7      	ldr	r7, [r0, #12]
 8009594:	68cd      	ldr	r5, [r1, #12]
 8009596:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800959a:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800959c:	689d      	ldr	r5, [r3, #8]
 800959e:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80095a2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80095a4:	688d      	ldr	r5, [r1, #8]
 80095a6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80095aa:	3501      	adds	r5, #1
 80095ac:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 80095b0:	4465      	add	r5, ip
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80095b2:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80095b6:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80095ba:	698f      	ldr	r7, [r1, #24]
 80095bc:	f1bc 0f07 	cmp.w	ip, #7
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80095c0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80095c2:	691d      	ldr	r5, [r3, #16]
 80095c4:	f025 0507 	bic.w	r5, r5, #7
 80095c8:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80095ca:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80095ce:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80095d2:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80095d6:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80095da:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80095de:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80095e2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80095e6:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80095e8:	695d      	ldr	r5, [r3, #20]
 80095ea:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80095ee:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80095f0:	694d      	ldr	r5, [r1, #20]
 80095f2:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80095f4:	69dd      	ldr	r5, [r3, #28]
 80095f6:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80095fa:	f025 0507 	bic.w	r5, r5, #7
 80095fe:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009600:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8009604:	ea45 0507 	orr.w	r5, r5, r7
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009608:	bf88      	it	hi
 800960a:	2701      	movhi	r7, #1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800960c:	61dd      	str	r5, [r3, #28]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800960e:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8009610:	629d      	str	r5, [r3, #40]	@ 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009612:	bf9c      	itt	ls
 8009614:	4d0c      	ldrls	r5, [pc, #48]	@ (8009648 <LTDC_SetConfig+0xe8>)
 8009616:	f815 700c 	ldrbls.w	r7, [r5, ip]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800961a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800961c:	437c      	muls	r4, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800961e:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009622:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009624:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8009626:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009628:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800962a:	437d      	muls	r5, r7
 800962c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009630:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009632:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8009634:	f36f 040a 	bfc	r4, #0, #11
 8009638:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800963a:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800963c:	5883      	ldr	r3, [r0, r2]
 800963e:	f043 0301 	orr.w	r3, r3, #1
 8009642:	5083      	str	r3, [r0, r2]
}
 8009644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009646:	bf00      	nop
 8009648:	08026974 	.word	0x08026974

0800964c <HAL_LTDC_Init>:
{
 800964c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800964e:	4604      	mov	r4, r0
 8009650:	2800      	cmp	r0, #0
 8009652:	d04e      	beq.n	80096f2 <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009654:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009658:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800965c:	b91b      	cbnz	r3, 8009666 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800965e:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8009662:	f7f7 fe21 	bl	80012a8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009666:	2302      	movs	r3, #2
 8009668:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009674:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009676:	6999      	ldr	r1, [r3, #24]
 8009678:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800967c:	4302      	orrs	r2, r0
 800967e:	68e0      	ldr	r0, [r4, #12]
 8009680:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009682:	6920      	ldr	r0, [r4, #16]
 8009684:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009686:	430a      	orrs	r2, r1
 8009688:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800968a:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800968e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009692:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009694:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8009698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800969c:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800969e:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 80096a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80096a6:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 80096a8:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 80096ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80096b0:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80096b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80096b4:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80096b8:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80096bc:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80096c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80096c2:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80096c4:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 80096c8:	432a      	orrs	r2, r5
 80096ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80096ce:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80096d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80096d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80096d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096d8:	f042 0206 	orr.w	r2, r2, #6
 80096dc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	f042 0201 	orr.w	r2, r2, #1
 80096e4:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80096e6:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80096e8:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80096ec:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80096f0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80096f2:	2001      	movs	r0, #1
 80096f4:	e7fc      	b.n	80096f0 <HAL_LTDC_Init+0xa4>

080096f6 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80096f6:	4770      	bx	lr

080096f8 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 80096f8:	4770      	bx	lr

080096fa <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80096fa:	4770      	bx	lr

080096fc <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80096fc:	6803      	ldr	r3, [r0, #0]
{
 80096fe:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009700:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8009702:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009704:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009706:	0772      	lsls	r2, r6, #29
 8009708:	d514      	bpl.n	8009734 <HAL_LTDC_IRQHandler+0x38>
 800970a:	0769      	lsls	r1, r5, #29
 800970c:	d512      	bpl.n	8009734 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800970e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009710:	f022 0204 	bic.w	r2, r2, #4
 8009714:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009716:	2204      	movs	r2, #4
 8009718:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800971a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800971e:	f043 0301 	orr.w	r3, r3, #1
 8009722:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8009726:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009728:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800972c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009730:	f7ff ffe1 	bl	80096f6 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009734:	07b2      	lsls	r2, r6, #30
 8009736:	d516      	bpl.n	8009766 <HAL_LTDC_IRQHandler+0x6a>
 8009738:	07ab      	lsls	r3, r5, #30
 800973a:	d514      	bpl.n	8009766 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800973c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800973e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009742:	f022 0202 	bic.w	r2, r2, #2
 8009746:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009748:	2202      	movs	r2, #2
 800974a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800974c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8009750:	4313      	orrs	r3, r2
 8009752:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009756:	2304      	movs	r3, #4
 8009758:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800975c:	2300      	movs	r3, #0
 800975e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009762:	f7ff ffc8 	bl	80096f6 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009766:	07f0      	lsls	r0, r6, #31
 8009768:	d510      	bpl.n	800978c <HAL_LTDC_IRQHandler+0x90>
 800976a:	07e9      	lsls	r1, r5, #31
 800976c:	d50e      	bpl.n	800978c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800976e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8009770:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800977a:	2201      	movs	r2, #1
 800977c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800977e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8009780:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009784:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8009788:	f7ff ffb6 	bl	80096f8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800978c:	0732      	lsls	r2, r6, #28
 800978e:	d511      	bpl.n	80097b4 <HAL_LTDC_IRQHandler+0xb8>
 8009790:	072b      	lsls	r3, r5, #28
 8009792:	d50f      	bpl.n	80097b4 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009794:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009796:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800979a:	f022 0208 	bic.w	r2, r2, #8
 800979e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80097a0:	2208      	movs	r2, #8
 80097a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80097a4:	2301      	movs	r3, #1
 80097a6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80097aa:	2300      	movs	r3, #0
 80097ac:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80097b0:	f7ff ffa3 	bl	80096fa <HAL_LTDC_ReloadEventCallback>
}
 80097b4:	bd70      	pop	{r4, r5, r6, pc}

080097b6 <HAL_LTDC_ConfigLayer>:
{
 80097b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80097ba:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 80097be:	4606      	mov	r6, r0
 80097c0:	460f      	mov	r7, r1
 80097c2:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	f04f 0002 	mov.w	r0, #2
 80097ca:	d01f      	beq.n	800980c <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097cc:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 80097ce:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097d2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80097d4:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097d8:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80097dc:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097e0:	3438      	adds	r4, #56	@ 0x38
 80097e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097ee:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80097f0:	4630      	mov	r0, r6
 80097f2:	4662      	mov	r2, ip
 80097f4:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097f6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80097f8:	f7ff feb2 	bl	8009560 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80097fc:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80097fe:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009800:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009804:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009808:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800980c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009810 <HAL_LTDC_SetPitch>:
{
 8009810:	4603      	mov	r3, r0
 8009812:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8009814:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 8009818:	2801      	cmp	r0, #1
 800981a:	f04f 0002 	mov.w	r0, #2
 800981e:	d026      	beq.n	800986e <HAL_LTDC_SetPitch+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009820:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009824:	2034      	movs	r0, #52	@ 0x34
 8009826:	fb00 3002 	mla	r0, r0, r2, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800982a:	01d2      	lsls	r2, r2, #7
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800982c:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800982e:	3284      	adds	r2, #132	@ 0x84
 8009830:	2807      	cmp	r0, #7
 8009832:	bf96      	itet	ls
 8009834:	4c0e      	ldrls	r4, [pc, #56]	@ (8009870 <HAL_LTDC_SetPitch+0x60>)
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009836:	2401      	movhi	r4, #1
 8009838:	5c24      	ldrbls	r4, [r4, r0]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800983a:	6818      	ldr	r0, [r3, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800983c:	434c      	muls	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800983e:	4402      	add	r2, r0
 8009840:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009842:	f36f 401c 	bfc	r0, #16, #13
 8009846:	62d0      	str	r0, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009848:	480a      	ldr	r0, [pc, #40]	@ (8009874 <HAL_LTDC_SetPitch+0x64>)
 800984a:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 800984c:	f045 0501 	orr.w	r5, r5, #1
 8009850:	6245      	str	r5, [r0, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8009852:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8009854:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8009858:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800985a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800985c:	f042 0201 	orr.w	r2, r2, #1
 8009860:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8009862:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 8009864:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8009866:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800986a:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 800986e:	bd30      	pop	{r4, r5, pc}
 8009870:	08026974 	.word	0x08026974
 8009874:	50001000 	.word	0x50001000

08009878 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8009878:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800987a:	6804      	ldr	r4, [r0, #0]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800987c:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8009880:	6965      	ldr	r5, [r4, #20]
 8009882:	f363 0510 	bfi	r5, r3, #0, #17
 8009886:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8009888:	9d03      	ldr	r5, [sp, #12]
 800988a:	6963      	ldr	r3, [r4, #20]
 800988c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009894:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8009898:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800989a:	f04f 031f 	mov.w	r3, #31
 800989e:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 80098a0:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 80098a2:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 80098a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80098a6:	bf0c      	ite	eq
 80098a8:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80098ac:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80098b0:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80098b4:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 80098b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80098b8:	bf0c      	ite	eq
 80098ba:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 80098be:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 80098c2:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 80098c4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80098c6:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80098c8:	bd30      	pop	{r4, r5, pc}

080098ca <HAL_MDMA_Init>:
{
 80098ca:	b538      	push	{r3, r4, r5, lr}
 80098cc:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80098ce:	f7fc fd81 	bl	80063d4 <HAL_GetTick>
 80098d2:	4605      	mov	r5, r0
  if(hmdma == NULL)
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	d061      	beq.n	800999c <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 80098d8:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 80098da:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80098dc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80098e0:	2302      	movs	r3, #2
 80098e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80098e6:	68d3      	ldr	r3, [r2, #12]
 80098e8:	f023 0301 	bic.w	r3, r3, #1
 80098ec:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	68da      	ldr	r2, [r3, #12]
 80098f2:	07d2      	lsls	r2, r2, #31
 80098f4:	d448      	bmi.n	8009988 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80098f6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80098fe:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8009902:	430a      	orrs	r2, r1
 8009904:	69e1      	ldr	r1, [r4, #28]
 8009906:	430a      	orrs	r2, r1
 8009908:	6a21      	ldr	r1, [r4, #32]
 800990a:	430a      	orrs	r2, r1
 800990c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800990e:	430a      	orrs	r2, r1
 8009910:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009912:	430a      	orrs	r2, r1
 8009914:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009916:	430a      	orrs	r2, r1
 8009918:	68a1      	ldr	r1, [r4, #8]
 800991a:	430a      	orrs	r2, r1
 800991c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800991e:	3901      	subs	r1, #1
 8009920:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009924:	6861      	ldr	r1, [r4, #4]
 8009926:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800992a:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800992c:	d103      	bne.n	8009936 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800992e:	691a      	ldr	r2, [r3, #16]
 8009930:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8009934:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8009936:	2200      	movs	r2, #0
 8009938:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800993a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800993c:	2a00      	cmp	r2, #0
 800993e:	da04      	bge.n	800994a <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009940:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8009942:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009944:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8009948:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800994a:	b292      	uxth	r2, r2
 800994c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800994e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009950:	2a00      	cmp	r2, #0
 8009952:	da25      	bge.n	80099a0 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009954:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8009956:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009958:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800995c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800995e:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009960:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009964:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009968:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800996a:	f04f 0200 	mov.w	r2, #0
 800996e:	d019      	beq.n	80099a4 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8009970:	b2c9      	uxtb	r1, r1
 8009972:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009974:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8009976:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009978:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800997a:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800997c:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800997e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8009982:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8009986:	e00a      	b.n	800999e <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8009988:	f7fc fd24 	bl	80063d4 <HAL_GetTick>
 800998c:	1b40      	subs	r0, r0, r5
 800998e:	2805      	cmp	r0, #5
 8009990:	d9ad      	bls.n	80098ee <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8009992:	2340      	movs	r3, #64	@ 0x40
 8009994:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009996:	2303      	movs	r3, #3
 8009998:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800999c:	2001      	movs	r0, #1
}
 800999e:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80099a0:	6a18      	ldr	r0, [r3, #32]
 80099a2:	e7dd      	b.n	8009960 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 80099a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80099a6:	e7e5      	b.n	8009974 <HAL_MDMA_Init+0xaa>

080099a8 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80099a8:	b1d8      	cbz	r0, 80099e2 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 80099aa:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80099ac:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 80099ae:	68d3      	ldr	r3, [r2, #12]
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80099ba:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80099bc:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80099be:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80099c0:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80099c2:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80099c4:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80099c6:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80099c8:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80099ca:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80099cc:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80099ce:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80099d0:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 80099d2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 80099d6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 80099da:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 80099de:	4618      	mov	r0, r3
 80099e0:	4770      	bx	lr
    return HAL_ERROR;
 80099e2:	2001      	movs	r0, #1
}
 80099e4:	4770      	bx	lr

080099e6 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 80099e6:	4603      	mov	r3, r0
{
 80099e8:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 80099ea:	b300      	cbz	r0, 8009a2e <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 80099ec:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80099f0:	2801      	cmp	r0, #1
 80099f2:	d01e      	beq.n	8009a32 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 80099f4:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80099f6:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 80099fa:	42a5      	cmp	r5, r4
 80099fc:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 80099fe:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8009a02:	d112      	bne.n	8009a2a <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8009a04:	681c      	ldr	r4, [r3, #0]
 8009a06:	6925      	ldr	r5, [r4, #16]
 8009a08:	006d      	lsls	r5, r5, #1
 8009a0a:	d407      	bmi.n	8009a1c <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 8009a0c:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8009a0e:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8009a10:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 8009a12:	b939      	cbnz	r1, 8009a24 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8009a14:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 8009a18:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8009a1a:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009a22:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8009a24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009a28:	e7f6      	b.n	8009a18 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	e7f6      	b.n	8009a1c <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8009a2e:	2001      	movs	r0, #1
 8009a30:	e7f7      	b.n	8009a22 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8009a32:	2002      	movs	r0, #2
 8009a34:	e7f5      	b.n	8009a22 <HAL_MDMA_ConfigPostRequestMask+0x3c>

08009a36 <HAL_MDMA_Start_IT>:
{
 8009a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 8009a38:	4604      	mov	r4, r0
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d042      	beq.n	8009ac4 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 8009a3e:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8009a42:	2d01      	cmp	r5, #1
 8009a44:	d03c      	beq.n	8009ac0 <HAL_MDMA_Start_IT+0x8a>
 8009a46:	2501      	movs	r5, #1
 8009a48:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8009a4c:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8009a50:	2d01      	cmp	r5, #1
 8009a52:	f04f 0500 	mov.w	r5, #0
 8009a56:	d131      	bne.n	8009abc <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8009a58:	2602      	movs	r6, #2
 8009a5a:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009a5e:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8009a60:	6805      	ldr	r5, [r0, #0]
 8009a62:	68ee      	ldr	r6, [r5, #12]
 8009a64:	f026 0601 	bic.w	r6, r6, #1
 8009a68:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8009a6a:	9e06      	ldr	r6, [sp, #24]
 8009a6c:	9600      	str	r6, [sp, #0]
 8009a6e:	f7ff ff03 	bl	8009878 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8009a72:	68eb      	ldr	r3, [r5, #12]
 8009a74:	f043 0306 	orr.w	r3, r3, #6
 8009a78:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8009a7a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009a7c:	b11b      	cbz	r3, 8009a86 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8009a7e:	68eb      	ldr	r3, [r5, #12]
 8009a80:	f043 0310 	orr.w	r3, r3, #16
 8009a84:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009a86:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009a88:	b11b      	cbz	r3, 8009a92 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8009a8a:	68eb      	ldr	r3, [r5, #12]
 8009a8c:	f043 0308 	orr.w	r3, r3, #8
 8009a90:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8009a92:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009a94:	b11b      	cbz	r3, 8009a9e <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8009a96:	68eb      	ldr	r3, [r5, #12]
 8009a98:	f043 0320 	orr.w	r3, r3, #32
 8009a9c:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8009a9e:	68eb      	ldr	r3, [r5, #12]
 8009aa0:	f043 0301 	orr.w	r3, r3, #1
 8009aa4:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009aa6:	6863      	ldr	r3, [r4, #4]
 8009aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aac:	d103      	bne.n	8009ab6 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8009aae:	68eb      	ldr	r3, [r5, #12]
 8009ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ab4:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8009ab6:	2000      	movs	r0, #0
}
 8009ab8:	b002      	add	sp, #8
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8009abc:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8009ac0:	2002      	movs	r0, #2
 8009ac2:	e7f9      	b.n	8009ab8 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8009ac4:	2001      	movs	r0, #1
 8009ac6:	e7f7      	b.n	8009ab8 <HAL_MDMA_Start_IT+0x82>

08009ac8 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8009ac8:	b128      	cbz	r0, 8009ad6 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8009aca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d003      	beq.n	8009ada <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8009ad2:	2380      	movs	r3, #128	@ 0x80
 8009ad4:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8009ad6:	2001      	movs	r0, #1
 8009ad8:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8009ada:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009adc:	2304      	movs	r3, #4
 8009ade:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 8009ae2:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8009ae4:	68d3      	ldr	r3, [r2, #12]
 8009ae6:	f023 0301 	bic.w	r3, r3, #1
 8009aea:	60d3      	str	r3, [r2, #12]
}
 8009aec:	4770      	bx	lr
	...

08009af0 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 8009af0:	2300      	movs	r3, #0
{
 8009af2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 8009af4:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8009af6:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 8009afa:	4b58      	ldr	r3, [pc, #352]	@ (8009c5c <HAL_MDMA_IRQHandler+0x16c>)
{
 8009afc:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8009afe:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8009b00:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8009b02:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8009b04:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8009b06:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 8009b0a:	3a40      	subs	r2, #64	@ 0x40
 8009b0c:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8009b10:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8009b14:	4202      	tst	r2, r0
 8009b16:	f000 809e 	beq.w	8009c56 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	07d1      	lsls	r1, r2, #31
 8009b1e:	d529      	bpl.n	8009b74 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	0792      	lsls	r2, r2, #30
 8009b24:	d526      	bpl.n	8009b74 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	f022 0202 	bic.w	r2, r2, #2
 8009b2c:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8009b2e:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009b30:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8009b32:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009b34:	bf54      	ite	pl
 8009b36:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8009b3a:	f041 0102 	orrmi.w	r1, r1, #2
 8009b3e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8009b40:	0591      	lsls	r1, r2, #22
 8009b42:	d503      	bpl.n	8009b4c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8009b44:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009b46:	f041 0104 	orr.w	r1, r1, #4
 8009b4a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8009b4c:	05d0      	lsls	r0, r2, #23
 8009b4e:	d503      	bpl.n	8009b58 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8009b50:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009b52:	f041 0108 	orr.w	r1, r1, #8
 8009b56:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8009b58:	0551      	lsls	r1, r2, #21
 8009b5a:	d503      	bpl.n	8009b64 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8009b5c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009b5e:	f041 0110 	orr.w	r1, r1, #16
 8009b62:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8009b64:	0512      	lsls	r2, r2, #20
 8009b66:	d503      	bpl.n	8009b70 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8009b68:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8009b6a:	f042 0220 	orr.w	r2, r2, #32
 8009b6e:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8009b70:	2201      	movs	r2, #1
 8009b72:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	06d0      	lsls	r0, r2, #27
 8009b78:	d508      	bpl.n	8009b8c <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8009b7a:	68da      	ldr	r2, [r3, #12]
 8009b7c:	0691      	lsls	r1, r2, #26
 8009b7e:	d505      	bpl.n	8009b8c <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8009b80:	2210      	movs	r2, #16
 8009b82:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8009b84:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009b86:	b10b      	cbz	r3, 8009b8c <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8009b88:	4620      	mov	r0, r4
 8009b8a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	0712      	lsls	r2, r2, #28
 8009b92:	d508      	bpl.n	8009ba6 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8009b94:	68da      	ldr	r2, [r3, #12]
 8009b96:	06d0      	lsls	r0, r2, #27
 8009b98:	d505      	bpl.n	8009ba6 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8009b9e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009ba0:	b10b      	cbz	r3, 8009ba6 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	0751      	lsls	r1, r2, #29
 8009bac:	d508      	bpl.n	8009bc0 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	0712      	lsls	r2, r2, #28
 8009bb2:	d505      	bpl.n	8009bc0 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8009bb4:	2204      	movs	r2, #4
 8009bb6:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009bb8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009bba:	b10b      	cbz	r3, 8009bc0 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	0790      	lsls	r0, r2, #30
 8009bc6:	d524      	bpl.n	8009c12 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	0751      	lsls	r1, r2, #29
 8009bcc:	d521      	bpl.n	8009c12 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8009bce:	68da      	ldr	r2, [r3, #12]
 8009bd0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8009bd4:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8009bd6:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8009bda:	2a04      	cmp	r2, #4
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	d10c      	bne.n	8009bfc <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 8009be2:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8009be4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8009be8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8009bec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d031      	beq.n	8009c56 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 8009bf2:	4620      	mov	r0, r4
}
 8009bf4:	b003      	add	sp, #12
 8009bf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8009bfa:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8009bfc:	2102      	movs	r1, #2
 8009bfe:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8009c00:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 8009c02:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8009c06:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8009c0a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009c0c:	b10b      	cbz	r3, 8009c12 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8009c12:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009c14:	b1fb      	cbz	r3, 8009c56 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8009c16:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8009c1a:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009c1e:	2304      	movs	r3, #4
 8009c20:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8009c2e:	9a01      	ldr	r2, [sp, #4]
 8009c30:	3201      	adds	r2, #1
 8009c32:	42aa      	cmp	r2, r5
 8009c34:	9201      	str	r2, [sp, #4]
 8009c36:	d802      	bhi.n	8009c3e <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	07d2      	lsls	r2, r2, #31
 8009c3c:	d4f7      	bmi.n	8009c2e <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009c48:	bf4c      	ite	mi
 8009c4a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8009c4c:	2301      	movpl	r3, #1
 8009c4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8009c52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009c54:	e7cb      	b.n	8009bee <HAL_MDMA_IRQHandler+0xfe>
}
 8009c56:	b003      	add	sp, #12
 8009c58:	bd30      	pop	{r4, r5, pc}
 8009c5a:	bf00      	nop
 8009c5c:	2400006c 	.word	0x2400006c

08009c60 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c60:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009c62:	4d1c      	ldr	r5, [pc, #112]	@ (8009cd4 <HAL_PWREx_ConfigSupply+0x74>)
{
 8009c64:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009c66:	68eb      	ldr	r3, [r5, #12]
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	2b06      	cmp	r3, #6
 8009c6e:	d006      	beq.n	8009c7e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c70:	68e8      	ldr	r0, [r5, #12]
 8009c72:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8009c76:	1b00      	subs	r0, r0, r4
 8009c78:	bf18      	it	ne
 8009c7a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8009c7c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c7e:	68eb      	ldr	r3, [r5, #12]
 8009c80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009c84:	4303      	orrs	r3, r0
 8009c86:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8009c88:	f7fc fba4 	bl	80063d4 <HAL_GetTick>
 8009c8c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c8e:	686b      	ldr	r3, [r5, #4]
 8009c90:	049a      	lsls	r2, r3, #18
 8009c92:	d508      	bpl.n	8009ca6 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009c94:	f1a4 031d 	sub.w	r3, r4, #29
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d90c      	bls.n	8009cb6 <HAL_PWREx_ConfigSupply+0x56>
 8009c9c:	3c2d      	subs	r4, #45	@ 0x2d
 8009c9e:	2c01      	cmp	r4, #1
 8009ca0:	d909      	bls.n	8009cb6 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	e7ea      	b.n	8009c7c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ca6:	f7fc fb95 	bl	80063d4 <HAL_GetTick>
 8009caa:	1b80      	subs	r0, r0, r6
 8009cac:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009cb0:	d9ed      	bls.n	8009c8e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8009cb2:	2001      	movs	r0, #1
 8009cb4:	e7e2      	b.n	8009c7c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8009cb6:	f7fc fb8d 	bl	80063d4 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009cba:	4d06      	ldr	r5, [pc, #24]	@ (8009cd4 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8009cbc:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009cbe:	68eb      	ldr	r3, [r5, #12]
 8009cc0:	03db      	lsls	r3, r3, #15
 8009cc2:	d4ee      	bmi.n	8009ca2 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009cc4:	f7fc fb86 	bl	80063d4 <HAL_GetTick>
 8009cc8:	1b00      	subs	r0, r0, r4
 8009cca:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009cce:	d9f6      	bls.n	8009cbe <HAL_PWREx_ConfigSupply+0x5e>
 8009cd0:	e7ef      	b.n	8009cb2 <HAL_PWREx_ConfigSupply+0x52>
 8009cd2:	bf00      	nop
 8009cd4:	58024800 	.word	0x58024800

08009cd8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8009cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8009cdc:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8009cde:	b134      	cbz	r4, 8009cee <QSPI_Config+0x16>
 8009ce0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8009ce4:	d003      	beq.n	8009cee <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009ce6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009ce8:	6805      	ldr	r5, [r0, #0]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	612b      	str	r3, [r5, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009cee:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009cf2:	e9d1 c607 	ldrd	ip, r6, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009cf6:	f1ba 0f00 	cmp.w	sl, #0
 8009cfa:	d052      	beq.n	8009da2 <QSPI_Config+0xca>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009cfc:	694f      	ldr	r7, [r1, #20]
 8009cfe:	ea44 0a0a 	orr.w	sl, r4, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009d02:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d04:	04bf      	lsls	r7, r7, #18
 8009d06:	680b      	ldr	r3, [r1, #0]
 8009d08:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 8009d0c:	ea4a 0a02 	orr.w	sl, sl, r2
 8009d10:	e9d1 980b 	ldrd	r9, r8, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009d14:	b34e      	cbz	r6, 8009d6a <QSPI_Config+0x92>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009d16:	688c      	ldr	r4, [r1, #8]
 8009d18:	ea4a 0006 	orr.w	r0, sl, r6
 8009d1c:	61ec      	str	r4, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d1e:	690c      	ldr	r4, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009d20:	f1bc 0f00 	cmp.w	ip, #0
 8009d24:	d013      	beq.n	8009d4e <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d26:	ea43 030c 	orr.w	r3, r3, ip
 8009d2a:	ea43 0309 	orr.w	r3, r3, r9
 8009d2e:	ea43 0308 	orr.w	r3, r3, r8
 8009d32:	ea43 030e 	orr.w	r3, r3, lr
 8009d36:	4323      	orrs	r3, r4
 8009d38:	68cc      	ldr	r4, [r1, #12]
 8009d3a:	4323      	orrs	r3, r4
 8009d3c:	433b      	orrs	r3, r7
 8009d3e:	4303      	orrs	r3, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009d40:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d44:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009d46:	d00e      	beq.n	8009d66 <QSPI_Config+0x8e>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009d48:	684b      	ldr	r3, [r1, #4]
 8009d4a:	61ab      	str	r3, [r5, #24]
 8009d4c:	e00b      	b.n	8009d66 <QSPI_Config+0x8e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d4e:	ea43 0309 	orr.w	r3, r3, r9
 8009d52:	ea43 0308 	orr.w	r3, r3, r8
 8009d56:	ea43 030e 	orr.w	r3, r3, lr
 8009d5a:	4323      	orrs	r3, r4
 8009d5c:	433b      	orrs	r3, r7
 8009d5e:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d60:	616b      	str	r3, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8009d62:	f8c5 c018 	str.w	ip, [r5, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 8009d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009d6a:	f1bc 0f00 	cmp.w	ip, #0
 8009d6e:	d00d      	beq.n	8009d8c <QSPI_Config+0xb4>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d70:	ea43 030c 	orr.w	r3, r3, ip
 8009d74:	68c8      	ldr	r0, [r1, #12]
 8009d76:	ea43 0309 	orr.w	r3, r3, r9
 8009d7a:	ea43 0308 	orr.w	r3, r3, r8
 8009d7e:	ea43 030e 	orr.w	r3, r3, lr
 8009d82:	4303      	orrs	r3, r0
 8009d84:	433b      	orrs	r3, r7
 8009d86:	ea43 030a 	orr.w	r3, r3, sl
 8009d8a:	e7d9      	b.n	8009d40 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d8c:	ea43 0309 	orr.w	r3, r3, r9
 8009d90:	ea43 0308 	orr.w	r3, r3, r8
 8009d94:	ea43 000e 	orr.w	r0, r3, lr
 8009d98:	ea40 0307 	orr.w	r3, r0, r7
 8009d9c:	ea43 030a 	orr.w	r3, r3, sl
 8009da0:	e7de      	b.n	8009d60 <QSPI_Config+0x88>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009da2:	b316      	cbz	r6, 8009dea <QSPI_Config+0x112>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009da4:	688b      	ldr	r3, [r1, #8]
 8009da6:	4326      	orrs	r6, r4
 8009da8:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009daa:	694f      	ldr	r7, [r1, #20]
 8009dac:	4316      	orrs	r6, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009dae:	61eb      	str	r3, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009db0:	04bf      	lsls	r7, r7, #18
 8009db2:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009db4:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8009db6:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009dba:	f1bc 0f00 	cmp.w	ip, #0
 8009dbe:	d00b      	beq.n	8009dd8 <QSPI_Config+0x100>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009dc0:	ea43 030c 	orr.w	r3, r3, ip
 8009dc4:	68c8      	ldr	r0, [r1, #12]
 8009dc6:	ea43 0308 	orr.w	r3, r3, r8
 8009dca:	ea43 030e 	orr.w	r3, r3, lr
 8009dce:	4323      	orrs	r3, r4
 8009dd0:	4303      	orrs	r3, r0
 8009dd2:	433b      	orrs	r3, r7
 8009dd4:	4333      	orrs	r3, r6
 8009dd6:	e7b3      	b.n	8009d40 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009dd8:	ea43 0208 	orr.w	r2, r3, r8
 8009ddc:	ea42 020e 	orr.w	r2, r2, lr
 8009de0:	4322      	orrs	r2, r4
 8009de2:	433a      	orrs	r2, r7
 8009de4:	4332      	orrs	r2, r6
 8009de6:	616a      	str	r2, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8009de8:	e7bb      	b.n	8009d62 <QSPI_Config+0x8a>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009dea:	f1bc 0f00 	cmp.w	ip, #0
 8009dee:	d01a      	beq.n	8009e26 <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009df0:	ea44 030c 	orr.w	r3, r4, ip
 8009df4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8009df6:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009df8:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009dfc:	ea43 0302 	orr.w	r3, r3, r2
 8009e00:	ea43 0304 	orr.w	r3, r3, r4
 8009e04:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8009e06:	ea43 0304 	orr.w	r3, r3, r4
 8009e0a:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8009e0c:	ea43 0304 	orr.w	r3, r3, r4
 8009e10:	68cc      	ldr	r4, [r1, #12]
 8009e12:	ea43 0304 	orr.w	r3, r3, r4
 8009e16:	694c      	ldr	r4, [r1, #20]
 8009e18:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8009e1c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009e1e:	d0a2      	beq.n	8009d66 <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009e20:	684b      	ldr	r3, [r1, #4]
 8009e22:	6183      	str	r3, [r0, #24]
 8009e24:	e79f      	b.n	8009d66 <QSPI_Config+0x8e>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8009e26:	2c00      	cmp	r4, #0
 8009e28:	d09d      	beq.n	8009d66 <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009e2a:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009e2c:	6800      	ldr	r0, [r0, #0]
 8009e2e:	4323      	orrs	r3, r4
 8009e30:	4313      	orrs	r3, r2
 8009e32:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009e34:	4313      	orrs	r3, r2
 8009e36:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	694a      	ldr	r2, [r1, #20]
 8009e3c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009e40:	6143      	str	r3, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8009e42:	f8c0 c018 	str.w	ip, [r0, #24]
}
 8009e46:	e78e      	b.n	8009d66 <QSPI_Config+0x8e>

08009e48 <QSPI_WaitFlagStateUntilTimeout>:
{
 8009e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009e50:	4604      	mov	r4, r0
 8009e52:	460e      	mov	r6, r1
 8009e54:	4615      	mov	r5, r2
 8009e56:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009e58:	6822      	ldr	r2, [r4, #0]
 8009e5a:	6893      	ldr	r3, [r2, #8]
 8009e5c:	4233      	tst	r3, r6
 8009e5e:	bf14      	ite	ne
 8009e60:	2301      	movne	r3, #1
 8009e62:	2300      	moveq	r3, #0
 8009e64:	42ab      	cmp	r3, r5
 8009e66:	d101      	bne.n	8009e6c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8009e68:	2000      	movs	r0, #0
 8009e6a:	e00f      	b.n	8009e8c <QSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8009e6c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009e70:	d0f3      	beq.n	8009e5a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e72:	f7fc faaf 	bl	80063d4 <HAL_GetTick>
 8009e76:	1bc0      	subs	r0, r0, r7
 8009e78:	4540      	cmp	r0, r8
 8009e7a:	d909      	bls.n	8009e90 <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009e7c:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009e7e:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009e80:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009e84:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009e86:	f043 0301 	orr.w	r3, r3, #1
 8009e8a:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e90:	f1b8 0f00 	cmp.w	r8, #0
 8009e94:	d1e0      	bne.n	8009e58 <QSPI_WaitFlagStateUntilTimeout+0x10>
 8009e96:	e7f1      	b.n	8009e7c <QSPI_WaitFlagStateUntilTimeout+0x34>

08009e98 <HAL_QSPI_Init>:
{
 8009e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009e9c:	f7fc fa9a 	bl	80063d4 <HAL_GetTick>
 8009ea0:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8009ea2:	2c00      	cmp	r4, #0
 8009ea4:	d03f      	beq.n	8009f26 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009ea6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009eaa:	b92b      	cbnz	r3, 8009eb8 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8009eac:	4620      	mov	r0, r4
 8009eae:	f7f7 fa39 	bl	8001324 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009eb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009eb6:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009eb8:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009eba:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009ebc:	68a3      	ldr	r3, [r4, #8]
 8009ebe:	680a      	ldr	r2, [r1, #0]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8009ec6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009eca:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009ecc:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009ece:	2200      	movs	r2, #0
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	2120      	movs	r1, #32
 8009ed4:	462b      	mov	r3, r5
 8009ed6:	f7ff ffb7 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8009eda:	bb10      	cbnz	r0, 8009f22 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009edc:	6822      	ldr	r2, [r4, #0]
 8009ede:	69e5      	ldr	r5, [r4, #28]
 8009ee0:	68e3      	ldr	r3, [r4, #12]
 8009ee2:	6811      	ldr	r1, [r2, #0]
 8009ee4:	432b      	orrs	r3, r5
 8009ee6:	6a25      	ldr	r5, [r4, #32]
 8009ee8:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8009eec:	432b      	orrs	r3, r5
 8009eee:	6865      	ldr	r5, [r4, #4]
 8009ef0:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8009ef4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009ef8:	430b      	orrs	r3, r1
 8009efa:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009efc:	6855      	ldr	r5, [r2, #4]
 8009efe:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009f02:	430b      	orrs	r3, r1
 8009f04:	6921      	ldr	r1, [r4, #16]
 8009f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009f0a:	4908      	ldr	r1, [pc, #32]	@ (8009f2c <HAL_QSPI_Init+0x94>)
 8009f0c:	4029      	ands	r1, r5
 8009f0e:	430b      	orrs	r3, r1
 8009f10:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8009f12:	6813      	ldr	r3, [r2, #0]
 8009f14:	f043 0301 	orr.w	r3, r3, #1
 8009f18:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8009f1a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f1c:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8009f1e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8009f22:	b003      	add	sp, #12
 8009f24:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8009f26:	2001      	movs	r0, #1
 8009f28:	e7fb      	b.n	8009f22 <HAL_QSPI_Init+0x8a>
 8009f2a:	bf00      	nop
 8009f2c:	ffe0f8fe 	.word	0xffe0f8fe

08009f30 <HAL_QSPI_Command>:
{
 8009f30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f34:	4604      	mov	r4, r0
 8009f36:	468a      	mov	sl, r1
 8009f38:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8009f3a:	f7fc fa4b 	bl	80063d4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009f3e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009f42:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d035      	beq.n	8009fb4 <HAL_QSPI_Command+0x84>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	2602      	movs	r6, #2
 8009f4c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009f50:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	fa5f f983 	uxtb.w	r9, r3
 8009f5a:	d129      	bne.n	8009fb0 <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f5c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2120      	movs	r1, #32
 8009f62:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f64:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009f66:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009f6a:	f8cd 8000 	str.w	r8, [sp]
 8009f6e:	f7ff ff6b 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009f72:	4605      	mov	r5, r0
 8009f74:	b9a8      	cbnz	r0, 8009fa2 <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009f76:	4602      	mov	r2, r0
 8009f78:	4651      	mov	r1, sl
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7ff feac 	bl	8009cd8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009f80:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009f84:	b95b      	cbnz	r3, 8009f9e <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009f86:	463b      	mov	r3, r7
 8009f88:	464a      	mov	r2, r9
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f8cd 8000 	str.w	r8, [sp]
 8009f92:	f7ff ff59 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009f96:	4605      	mov	r5, r0
 8009f98:	b918      	cbnz	r0, 8009fa2 <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009f9e:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009fa8:	4628      	mov	r0, r5
 8009faa:	b002      	add	sp, #8
 8009fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8009fb0:	4635      	mov	r5, r6
 8009fb2:	e7f6      	b.n	8009fa2 <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 8009fb4:	2502      	movs	r5, #2
 8009fb6:	e7f7      	b.n	8009fa8 <HAL_QSPI_Command+0x78>

08009fb8 <HAL_QSPI_Transmit>:
{
 8009fb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	4688      	mov	r8, r1
 8009fc0:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8009fc2:	f7fc fa07 	bl	80063d4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009fc6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009fca:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009fcc:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d04c      	beq.n	800a06c <HAL_QSPI_Transmit+0xb4>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009fd8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	b2d8      	uxtb	r0, r3
 8009fe0:	d142      	bne.n	800a068 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009fe6:	f1b8 0f00 	cmp.w	r8, #0
 8009fea:	d038      	beq.n	800a05e <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8009fec:	2312      	movs	r3, #18
 8009fee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009ff2:	692b      	ldr	r3, [r5, #16]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009ff8:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8009ffa:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009ffe:	3301      	adds	r3, #1
 800a000:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a002:	696b      	ldr	r3, [r5, #20]
 800a004:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800a008:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800a00a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a00c:	b99b      	cbnz	r3, 800a036 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a00e:	4633      	mov	r3, r6
 800a010:	2201      	movs	r2, #1
 800a012:	2102      	movs	r1, #2
 800a014:	4620      	mov	r0, r4
 800a016:	9700      	str	r7, [sp, #0]
 800a018:	f7ff ff16 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800a01c:	b910      	cbnz	r0, 800a024 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	2202      	movs	r2, #2
 800a022:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a024:	2301      	movs	r3, #1
 800a026:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a02a:	2300      	movs	r3, #0
 800a02c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a030:	b002      	add	sp, #8
 800a032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a036:	4633      	mov	r3, r6
 800a038:	2201      	movs	r2, #1
 800a03a:	2104      	movs	r1, #4
 800a03c:	4620      	mov	r0, r4
 800a03e:	9700      	str	r7, [sp, #0]
 800a040:	f7ff ff02 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800a044:	2800      	cmp	r0, #0
 800a046:	d1ed      	bne.n	800a024 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a048:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800a050:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a052:	3301      	adds	r3, #1
 800a054:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800a056:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a058:	3b01      	subs	r3, #1
 800a05a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a05c:	e7d5      	b.n	800a00a <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a05e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a060:	f043 0308 	orr.w	r3, r3, #8
 800a064:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800a066:	e7e0      	b.n	800a02a <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800a068:	2002      	movs	r0, #2
 800a06a:	e7de      	b.n	800a02a <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800a06c:	2002      	movs	r0, #2
 800a06e:	e7df      	b.n	800a030 <HAL_QSPI_Transmit+0x78>

0800a070 <HAL_QSPI_Receive>:
{
 800a070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a074:	4604      	mov	r4, r0
 800a076:	4617      	mov	r7, r2
 800a078:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800a07a:	f7fc f9ab 	bl	80063d4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a07e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800a080:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a082:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800a084:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d04f      	beq.n	800a12c <HAL_QSPI_Receive+0xbc>
 800a08c:	2301      	movs	r3, #1
 800a08e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a092:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a096:	2b01      	cmp	r3, #1
 800a098:	b2d8      	uxtb	r0, r3
 800a09a:	d145      	bne.n	800a128 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a09c:	2300      	movs	r3, #0
 800a09e:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800a0a0:	f1b8 0f00 	cmp.w	r8, #0
 800a0a4:	d03b      	beq.n	800a11e <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a0a6:	2322      	movs	r3, #34	@ 0x22
 800a0a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a0ac:	692b      	ldr	r3, [r5, #16]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a0b2:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800a0b4:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a0bc:	6969      	ldr	r1, [r5, #20]
 800a0be:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800a0c2:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800a0c6:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a0c8:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800a0ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a0cc:	b99b      	cbnz	r3, 800a0f6 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a0ce:	4633      	mov	r3, r6
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	2102      	movs	r1, #2
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	9700      	str	r7, [sp, #0]
 800a0d8:	f7ff feb6 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800a0dc:	b910      	cbnz	r0, 800a0e4 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a0f0:	b002      	add	sp, #8
 800a0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a0f6:	4633      	mov	r3, r6
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	2106      	movs	r1, #6
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	9700      	str	r7, [sp, #0]
 800a100:	f7ff fea2 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800a104:	2800      	cmp	r0, #0
 800a106:	d1ed      	bne.n	800a0e4 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a108:	f895 2020 	ldrb.w	r2, [r5, #32]
 800a10c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a10e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a110:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a112:	3301      	adds	r3, #1
 800a114:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800a116:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a118:	3b01      	subs	r3, #1
 800a11a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a11c:	e7d5      	b.n	800a0ca <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a11e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a120:	f043 0308 	orr.w	r3, r3, #8
 800a124:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800a126:	e7e0      	b.n	800a0ea <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800a128:	2002      	movs	r0, #2
 800a12a:	e7de      	b.n	800a0ea <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800a12c:	2002      	movs	r0, #2
 800a12e:	e7df      	b.n	800a0f0 <HAL_QSPI_Receive+0x80>

0800a130 <HAL_QSPI_AutoPolling>:
{
 800a130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a134:	4604      	mov	r4, r0
 800a136:	461f      	mov	r7, r3
 800a138:	4689      	mov	r9, r1
 800a13a:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800a13c:	f7fc f94a 	bl	80063d4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a140:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a144:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800a146:	2b01      	cmp	r3, #1
 800a148:	d041      	beq.n	800a1ce <HAL_QSPI_AutoPolling+0x9e>
 800a14a:	2301      	movs	r3, #1
 800a14c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a150:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a154:	2b01      	cmp	r3, #1
 800a156:	fa5f f883 	uxtb.w	r8, r3
 800a15a:	d136      	bne.n	800a1ca <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a15c:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a15e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a160:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a162:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a164:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a168:	4603      	mov	r3, r0
 800a16a:	9700      	str	r7, [sp, #0]
 800a16c:	4620      	mov	r0, r4
 800a16e:	f7ff fe6b 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a172:	bb20      	cbnz	r0, 800a1be <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a174:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a176:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a178:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a17a:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a17c:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a17e:	686b      	ldr	r3, [r5, #4]
 800a180:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a182:	68ab      	ldr	r3, [r5, #8]
 800a184:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a186:	6813      	ldr	r3, [r2, #0]
 800a188:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a18c:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a18e:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a190:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a194:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a196:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800a19a:	68eb      	ldr	r3, [r5, #12]
 800a19c:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a1a0:	f7ff fd9a 	bl	8009cd8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a1a4:	4633      	mov	r3, r6
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	2108      	movs	r1, #8
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	9700      	str	r7, [sp, #0]
 800a1ae:	f7ff fe4b 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800a1b2:	b920      	cbnz	r0, 800a1be <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	2208      	movs	r2, #8
 800a1b8:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a1ba:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a1c4:	b003      	add	sp, #12
 800a1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800a1ca:	2002      	movs	r0, #2
 800a1cc:	e7f7      	b.n	800a1be <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800a1ce:	2002      	movs	r0, #2
 800a1d0:	e7f8      	b.n	800a1c4 <HAL_QSPI_AutoPolling+0x94>

0800a1d2 <HAL_QSPI_MemoryMapped>:
{
 800a1d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	4616      	mov	r6, r2
 800a1d8:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800a1da:	f7fc f8fb 	bl	80063d4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a1de:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a1e2:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800a1e4:	2a01      	cmp	r2, #1
 800a1e6:	d033      	beq.n	800a250 <HAL_QSPI_MemoryMapped+0x7e>
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a1ee:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800a1f2:	2a01      	cmp	r2, #1
 800a1f4:	d12a      	bne.n	800a24c <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a1f6:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a1f8:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a1fa:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a1fc:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a1fe:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a202:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a204:	9100      	str	r1, [sp, #0]
 800a206:	2120      	movs	r1, #32
 800a208:	f7ff fe1e 	bl	8009e48 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a20c:	4605      	mov	r5, r0
 800a20e:	b9b8      	cbnz	r0, 800a240 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	6872      	ldr	r2, [r6, #4]
 800a214:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a216:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a218:	f020 0008 	bic.w	r0, r0, #8
 800a21c:	ea40 0002 	orr.w	r0, r0, r2
 800a220:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a222:	d107      	bne.n	800a234 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a224:	6832      	ldr	r2, [r6, #0]
 800a226:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a228:	2210      	movs	r2, #16
 800a22a:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a232:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800a234:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800a238:	4639      	mov	r1, r7
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff fd4c 	bl	8009cd8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800a240:	2300      	movs	r3, #0
 800a242:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a246:	4628      	mov	r0, r5
 800a248:	b003      	add	sp, #12
 800a24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800a24c:	2502      	movs	r5, #2
 800a24e:	e7f7      	b.n	800a240 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800a250:	2502      	movs	r5, #2
 800a252:	e7f8      	b.n	800a246 <HAL_QSPI_MemoryMapped+0x74>

0800a254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a256:	4604      	mov	r4, r0
 800a258:	2800      	cmp	r0, #0
 800a25a:	d074      	beq.n	800a346 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a25c:	6803      	ldr	r3, [r0, #0]
 800a25e:	07d8      	lsls	r0, r3, #31
 800a260:	d45e      	bmi.n	800a320 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	0799      	lsls	r1, r3, #30
 800a266:	f100 80ad 	bmi.w	800a3c4 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	06da      	lsls	r2, r3, #27
 800a26e:	d527      	bpl.n	800a2c0 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a270:	4a9c      	ldr	r2, [pc, #624]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
 800a272:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a274:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a27a:	2b08      	cmp	r3, #8
 800a27c:	d007      	beq.n	800a28e <HAL_RCC_OscConfig+0x3a>
 800a27e:	2b18      	cmp	r3, #24
 800a280:	f040 8103 	bne.w	800a48a <HAL_RCC_OscConfig+0x236>
 800a284:	f001 0303 	and.w	r3, r1, #3
 800a288:	2b01      	cmp	r3, #1
 800a28a:	f040 80fe 	bne.w	800a48a <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a28e:	6813      	ldr	r3, [r2, #0]
 800a290:	05db      	lsls	r3, r3, #23
 800a292:	d502      	bpl.n	800a29a <HAL_RCC_OscConfig+0x46>
 800a294:	69e3      	ldr	r3, [r4, #28]
 800a296:	2b80      	cmp	r3, #128	@ 0x80
 800a298:	d155      	bne.n	800a346 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a29a:	f7fc f8b3 	bl	8006404 <HAL_GetREVID>
 800a29e:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a2a2:	6a21      	ldr	r1, [r4, #32]
 800a2a4:	4298      	cmp	r0, r3
 800a2a6:	4b8f      	ldr	r3, [pc, #572]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
 800a2a8:	f200 80e8 	bhi.w	800a47c <HAL_RCC_OscConfig+0x228>
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	2920      	cmp	r1, #32
 800a2b0:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800a2b4:	bf0c      	ite	eq
 800a2b6:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800a2ba:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800a2be:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	0719      	lsls	r1, r3, #28
 800a2c4:	f100 8123 	bmi.w	800a50e <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	069a      	lsls	r2, r3, #26
 800a2cc:	f100 8144 	bmi.w	800a558 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	075d      	lsls	r5, r3, #29
 800a2d4:	d51e      	bpl.n	800a314 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a2d6:	4d84      	ldr	r5, [pc, #528]	@ (800a4e8 <HAL_RCC_OscConfig+0x294>)
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2de:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a2e0:	f7fc f878 	bl	80063d4 <HAL_GetTick>
 800a2e4:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2e6:	682b      	ldr	r3, [r5, #0]
 800a2e8:	05da      	lsls	r2, r3, #23
 800a2ea:	f140 815a 	bpl.w	800a5a2 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	4d7c      	ldr	r5, [pc, #496]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	f040 815c 	bne.w	800a5b0 <HAL_RCC_OscConfig+0x35c>
 800a2f8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a2fa:	f043 0301 	orr.w	r3, r3, #1
 800a2fe:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a300:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800a304:	f7fc f866 	bl	80063d4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a308:	4e76      	ldr	r6, [pc, #472]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800a30a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a30c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800a30e:	079b      	lsls	r3, r3, #30
 800a310:	f140 8174 	bpl.w	800a5fc <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a314:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a316:	2900      	cmp	r1, #0
 800a318:	f040 8177 	bne.w	800a60a <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800a31c:	2000      	movs	r0, #0
 800a31e:	e02b      	b.n	800a378 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a320:	4a70      	ldr	r2, [pc, #448]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
 800a322:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a324:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a326:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a32a:	2b10      	cmp	r3, #16
 800a32c:	d005      	beq.n	800a33a <HAL_RCC_OscConfig+0xe6>
 800a32e:	2b18      	cmp	r3, #24
 800a330:	d10b      	bne.n	800a34a <HAL_RCC_OscConfig+0xf6>
 800a332:	f001 0303 	and.w	r3, r1, #3
 800a336:	2b02      	cmp	r3, #2
 800a338:	d107      	bne.n	800a34a <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a33a:	6813      	ldr	r3, [r2, #0]
 800a33c:	039a      	lsls	r2, r3, #14
 800a33e:	d590      	bpl.n	800a262 <HAL_RCC_OscConfig+0xe>
 800a340:	6863      	ldr	r3, [r4, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d18d      	bne.n	800a262 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800a346:	2001      	movs	r0, #1
 800a348:	e016      	b.n	800a378 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a34a:	6863      	ldr	r3, [r4, #4]
 800a34c:	4d65      	ldr	r5, [pc, #404]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
 800a34e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a352:	d112      	bne.n	800a37a <HAL_RCC_OscConfig+0x126>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a35a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a35c:	f7fc f83a 	bl	80063d4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a360:	4e60      	ldr	r6, [pc, #384]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800a362:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a364:	6833      	ldr	r3, [r6, #0]
 800a366:	039b      	lsls	r3, r3, #14
 800a368:	f53f af7b 	bmi.w	800a262 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a36c:	f7fc f832 	bl	80063d4 <HAL_GetTick>
 800a370:	1b40      	subs	r0, r0, r5
 800a372:	2864      	cmp	r0, #100	@ 0x64
 800a374:	d9f6      	bls.n	800a364 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800a376:	2003      	movs	r0, #3
}
 800a378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a37a:	b9a3      	cbnz	r3, 800a3a6 <HAL_RCC_OscConfig+0x152>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a38a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a38c:	f7fc f822 	bl	80063d4 <HAL_GetTick>
 800a390:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a392:	682b      	ldr	r3, [r5, #0]
 800a394:	039f      	lsls	r7, r3, #14
 800a396:	f57f af64 	bpl.w	800a262 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a39a:	f7fc f81b 	bl	80063d4 <HAL_GetTick>
 800a39e:	1b80      	subs	r0, r0, r6
 800a3a0:	2864      	cmp	r0, #100	@ 0x64
 800a3a2:	d9f6      	bls.n	800a392 <HAL_RCC_OscConfig+0x13e>
 800a3a4:	e7e7      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	d103      	bne.n	800a3b6 <HAL_RCC_OscConfig+0x162>
 800a3ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3b2:	602b      	str	r3, [r5, #0]
 800a3b4:	e7ce      	b.n	800a354 <HAL_RCC_OscConfig+0x100>
 800a3b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3ba:	602b      	str	r3, [r5, #0]
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3c2:	e7ca      	b.n	800a35a <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3c4:	4947      	ldr	r1, [pc, #284]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
 800a3c6:	68e2      	ldr	r2, [r4, #12]
 800a3c8:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3ca:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a3cc:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800a3d0:	d003      	beq.n	800a3da <HAL_RCC_OscConfig+0x186>
 800a3d2:	2b18      	cmp	r3, #24
 800a3d4:	d12a      	bne.n	800a42c <HAL_RCC_OscConfig+0x1d8>
 800a3d6:	0780      	lsls	r0, r0, #30
 800a3d8:	d128      	bne.n	800a42c <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3da:	680b      	ldr	r3, [r1, #0]
 800a3dc:	075b      	lsls	r3, r3, #29
 800a3de:	d501      	bpl.n	800a3e4 <HAL_RCC_OscConfig+0x190>
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	d0b0      	beq.n	800a346 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a3e4:	4d3f      	ldr	r5, [pc, #252]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
 800a3e6:	682b      	ldr	r3, [r5, #0]
 800a3e8:	f023 0319 	bic.w	r3, r3, #25
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a3f0:	f7fb fff0 	bl	80063d4 <HAL_GetTick>
 800a3f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	075f      	lsls	r7, r3, #29
 800a3fa:	d511      	bpl.n	800a420 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3fc:	f7fc f802 	bl	8006404 <HAL_GetREVID>
 800a400:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a404:	6922      	ldr	r2, [r4, #16]
 800a406:	4298      	cmp	r0, r3
 800a408:	686b      	ldr	r3, [r5, #4]
 800a40a:	d822      	bhi.n	800a452 <HAL_RCC_OscConfig+0x1fe>
 800a40c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a410:	2a40      	cmp	r2, #64	@ 0x40
 800a412:	bf0c      	ite	eq
 800a414:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800a418:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800a41c:	606b      	str	r3, [r5, #4]
 800a41e:	e724      	b.n	800a26a <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a420:	f7fb ffd8 	bl	80063d4 <HAL_GetTick>
 800a424:	1b80      	subs	r0, r0, r6
 800a426:	2802      	cmp	r0, #2
 800a428:	d9e5      	bls.n	800a3f6 <HAL_RCC_OscConfig+0x1a2>
 800a42a:	e7a4      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a42c:	4d2d      	ldr	r5, [pc, #180]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a42e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a430:	b1a2      	cbz	r2, 800a45c <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a432:	f023 0319 	bic.w	r3, r3, #25
 800a436:	4313      	orrs	r3, r2
 800a438:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a43a:	f7fb ffcb 	bl	80063d4 <HAL_GetTick>
 800a43e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	0758      	lsls	r0, r3, #29
 800a444:	d4da      	bmi.n	800a3fc <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a446:	f7fb ffc5 	bl	80063d4 <HAL_GetTick>
 800a44a:	1b80      	subs	r0, r0, r6
 800a44c:	2802      	cmp	r0, #2
 800a44e:	d9f7      	bls.n	800a440 <HAL_RCC_OscConfig+0x1ec>
 800a450:	e791      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a452:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a456:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a45a:	e7df      	b.n	800a41c <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800a45c:	f023 0301 	bic.w	r3, r3, #1
 800a460:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a462:	f7fb ffb7 	bl	80063d4 <HAL_GetTick>
 800a466:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	0759      	lsls	r1, r3, #29
 800a46c:	f57f aefd 	bpl.w	800a26a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a470:	f7fb ffb0 	bl	80063d4 <HAL_GetTick>
 800a474:	1b80      	subs	r0, r0, r6
 800a476:	2802      	cmp	r0, #2
 800a478:	d9f6      	bls.n	800a468 <HAL_RCC_OscConfig+0x214>
 800a47a:	e77c      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a47c:	68da      	ldr	r2, [r3, #12]
 800a47e:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800a482:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a486:	60da      	str	r2, [r3, #12]
 800a488:	e71a      	b.n	800a2c0 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a48a:	69e3      	ldr	r3, [r4, #28]
 800a48c:	4d15      	ldr	r5, [pc, #84]	@ (800a4e4 <HAL_RCC_OscConfig+0x290>)
 800a48e:	b36b      	cbz	r3, 800a4ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a496:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a498:	f7fb ff9c 	bl	80063d4 <HAL_GetTick>
 800a49c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a49e:	682b      	ldr	r3, [r5, #0]
 800a4a0:	05df      	lsls	r7, r3, #23
 800a4a2:	d511      	bpl.n	800a4c8 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a4a4:	f7fb ffae 	bl	8006404 <HAL_GetREVID>
 800a4a8:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a4ac:	6a22      	ldr	r2, [r4, #32]
 800a4ae:	4298      	cmp	r0, r3
 800a4b0:	d810      	bhi.n	800a4d4 <HAL_RCC_OscConfig+0x280>
 800a4b2:	686b      	ldr	r3, [r5, #4]
 800a4b4:	2a20      	cmp	r2, #32
 800a4b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a4ba:	bf0c      	ite	eq
 800a4bc:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800a4c0:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a4c4:	606b      	str	r3, [r5, #4]
 800a4c6:	e6fb      	b.n	800a2c0 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a4c8:	f7fb ff84 	bl	80063d4 <HAL_GetTick>
 800a4cc:	1b80      	subs	r0, r0, r6
 800a4ce:	2802      	cmp	r0, #2
 800a4d0:	d9e5      	bls.n	800a49e <HAL_RCC_OscConfig+0x24a>
 800a4d2:	e750      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a4d4:	68eb      	ldr	r3, [r5, #12]
 800a4d6:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800a4da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a4de:	60eb      	str	r3, [r5, #12]
 800a4e0:	e6ee      	b.n	800a2c0 <HAL_RCC_OscConfig+0x6c>
 800a4e2:	bf00      	nop
 800a4e4:	58024400 	.word	0x58024400
 800a4e8:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a4f4:	f7fb ff6e 	bl	80063d4 <HAL_GetTick>
 800a4f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a4fa:	682b      	ldr	r3, [r5, #0]
 800a4fc:	05d8      	lsls	r0, r3, #23
 800a4fe:	f57f aedf 	bpl.w	800a2c0 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a502:	f7fb ff67 	bl	80063d4 <HAL_GetTick>
 800a506:	1b80      	subs	r0, r0, r6
 800a508:	2802      	cmp	r0, #2
 800a50a:	d9f6      	bls.n	800a4fa <HAL_RCC_OscConfig+0x2a6>
 800a50c:	e733      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a50e:	6963      	ldr	r3, [r4, #20]
 800a510:	4da3      	ldr	r5, [pc, #652]	@ (800a7a0 <HAL_RCC_OscConfig+0x54c>)
 800a512:	b183      	cbz	r3, 800a536 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800a514:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a516:	f043 0301 	orr.w	r3, r3, #1
 800a51a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a51c:	f7fb ff5a 	bl	80063d4 <HAL_GetTick>
 800a520:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a522:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a524:	079b      	lsls	r3, r3, #30
 800a526:	f53f aecf 	bmi.w	800a2c8 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a52a:	f7fb ff53 	bl	80063d4 <HAL_GetTick>
 800a52e:	1b80      	subs	r0, r0, r6
 800a530:	2802      	cmp	r0, #2
 800a532:	d9f6      	bls.n	800a522 <HAL_RCC_OscConfig+0x2ce>
 800a534:	e71f      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800a536:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a538:	f023 0301 	bic.w	r3, r3, #1
 800a53c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a53e:	f7fb ff49 	bl	80063d4 <HAL_GetTick>
 800a542:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a544:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a546:	079f      	lsls	r7, r3, #30
 800a548:	f57f aebe 	bpl.w	800a2c8 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a54c:	f7fb ff42 	bl	80063d4 <HAL_GetTick>
 800a550:	1b80      	subs	r0, r0, r6
 800a552:	2802      	cmp	r0, #2
 800a554:	d9f6      	bls.n	800a544 <HAL_RCC_OscConfig+0x2f0>
 800a556:	e70e      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a558:	69a3      	ldr	r3, [r4, #24]
 800a55a:	4d91      	ldr	r5, [pc, #580]	@ (800a7a0 <HAL_RCC_OscConfig+0x54c>)
 800a55c:	b183      	cbz	r3, 800a580 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a564:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a566:	f7fb ff35 	bl	80063d4 <HAL_GetTick>
 800a56a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	0498      	lsls	r0, r3, #18
 800a570:	f53f aeae 	bmi.w	800a2d0 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a574:	f7fb ff2e 	bl	80063d4 <HAL_GetTick>
 800a578:	1b80      	subs	r0, r0, r6
 800a57a:	2802      	cmp	r0, #2
 800a57c:	d9f6      	bls.n	800a56c <HAL_RCC_OscConfig+0x318>
 800a57e:	e6fa      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a586:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a588:	f7fb ff24 	bl	80063d4 <HAL_GetTick>
 800a58c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a58e:	682b      	ldr	r3, [r5, #0]
 800a590:	0499      	lsls	r1, r3, #18
 800a592:	f57f ae9d 	bpl.w	800a2d0 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a596:	f7fb ff1d 	bl	80063d4 <HAL_GetTick>
 800a59a:	1b80      	subs	r0, r0, r6
 800a59c:	2802      	cmp	r0, #2
 800a59e:	d9f6      	bls.n	800a58e <HAL_RCC_OscConfig+0x33a>
 800a5a0:	e6e9      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5a2:	f7fb ff17 	bl	80063d4 <HAL_GetTick>
 800a5a6:	1b80      	subs	r0, r0, r6
 800a5a8:	2864      	cmp	r0, #100	@ 0x64
 800a5aa:	f67f ae9c 	bls.w	800a2e6 <HAL_RCC_OscConfig+0x92>
 800a5ae:	e6e2      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5b0:	b9b3      	cbnz	r3, 800a5e0 <HAL_RCC_OscConfig+0x38c>
 800a5b2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5b4:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5b8:	f023 0301 	bic.w	r3, r3, #1
 800a5bc:	672b      	str	r3, [r5, #112]	@ 0x70
 800a5be:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a5c0:	f023 0304 	bic.w	r3, r3, #4
 800a5c4:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800a5c6:	f7fb ff05 	bl	80063d4 <HAL_GetTick>
 800a5ca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5cc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a5ce:	0798      	lsls	r0, r3, #30
 800a5d0:	f57f aea0 	bpl.w	800a314 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5d4:	f7fb fefe 	bl	80063d4 <HAL_GetTick>
 800a5d8:	1b80      	subs	r0, r0, r6
 800a5da:	42b8      	cmp	r0, r7
 800a5dc:	d9f6      	bls.n	800a5cc <HAL_RCC_OscConfig+0x378>
 800a5de:	e6ca      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5e0:	2b05      	cmp	r3, #5
 800a5e2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a5e4:	d103      	bne.n	800a5ee <HAL_RCC_OscConfig+0x39a>
 800a5e6:	f043 0304 	orr.w	r3, r3, #4
 800a5ea:	672b      	str	r3, [r5, #112]	@ 0x70
 800a5ec:	e684      	b.n	800a2f8 <HAL_RCC_OscConfig+0xa4>
 800a5ee:	f023 0301 	bic.w	r3, r3, #1
 800a5f2:	672b      	str	r3, [r5, #112]	@ 0x70
 800a5f4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a5f6:	f023 0304 	bic.w	r3, r3, #4
 800a5fa:	e680      	b.n	800a2fe <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5fc:	f7fb feea 	bl	80063d4 <HAL_GetTick>
 800a600:	1b40      	subs	r0, r0, r5
 800a602:	42b8      	cmp	r0, r7
 800a604:	f67f ae82 	bls.w	800a30c <HAL_RCC_OscConfig+0xb8>
 800a608:	e6b5      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a60a:	4d65      	ldr	r5, [pc, #404]	@ (800a7a0 <HAL_RCC_OscConfig+0x54c>)
 800a60c:	692b      	ldr	r3, [r5, #16]
 800a60e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a612:	2b18      	cmp	r3, #24
 800a614:	d078      	beq.n	800a708 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 800a616:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a618:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800a61a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a61e:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a620:	d165      	bne.n	800a6ee <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 800a622:	f7fb fed7 	bl	80063d4 <HAL_GetTick>
 800a626:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	0199      	lsls	r1, r3, #6
 800a62c:	d459      	bmi.n	800a6e2 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a62e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800a630:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a632:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	4313      	orrs	r3, r2
 800a63c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a63e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a642:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a644:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a646:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a648:	3b01      	subs	r3, #1
 800a64a:	3a01      	subs	r2, #1
 800a64c:	025b      	lsls	r3, r3, #9
 800a64e:	0412      	lsls	r2, r2, #16
 800a650:	b29b      	uxth	r3, r3
 800a652:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a656:	4313      	orrs	r3, r2
 800a658:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a65a:	3a01      	subs	r2, #1
 800a65c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a660:	4313      	orrs	r3, r2
 800a662:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a664:	3a01      	subs	r2, #1
 800a666:	0612      	lsls	r2, r2, #24
 800a668:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a66c:	4313      	orrs	r3, r2
 800a66e:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800a670:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a672:	f023 0301 	bic.w	r3, r3, #1
 800a676:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a678:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a67a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a67c:	f36f 03cf 	bfc	r3, #3, #13
 800a680:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a684:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a686:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a688:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a68a:	f023 030c 	bic.w	r3, r3, #12
 800a68e:	4313      	orrs	r3, r2
 800a690:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a692:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a694:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a696:	f023 0302 	bic.w	r3, r3, #2
 800a69a:	4313      	orrs	r3, r2
 800a69c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a69e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a6a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6a6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a6a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6ac:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a6ae:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a6b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a6b4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800a6b6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a6b8:	f043 0301 	orr.w	r3, r3, #1
 800a6bc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800a6be:	682b      	ldr	r3, [r5, #0]
 800a6c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a6c6:	f7fb fe85 	bl	80063d4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6ca:	4d35      	ldr	r5, [pc, #212]	@ (800a7a0 <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 800a6cc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6ce:	682b      	ldr	r3, [r5, #0]
 800a6d0:	019a      	lsls	r2, r3, #6
 800a6d2:	f53f ae23 	bmi.w	800a31c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6d6:	f7fb fe7d 	bl	80063d4 <HAL_GetTick>
 800a6da:	1b00      	subs	r0, r0, r4
 800a6dc:	2802      	cmp	r0, #2
 800a6de:	d9f6      	bls.n	800a6ce <HAL_RCC_OscConfig+0x47a>
 800a6e0:	e649      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6e2:	f7fb fe77 	bl	80063d4 <HAL_GetTick>
 800a6e6:	1b80      	subs	r0, r0, r6
 800a6e8:	2802      	cmp	r0, #2
 800a6ea:	d99d      	bls.n	800a628 <HAL_RCC_OscConfig+0x3d4>
 800a6ec:	e643      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800a6ee:	f7fb fe71 	bl	80063d4 <HAL_GetTick>
 800a6f2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	019b      	lsls	r3, r3, #6
 800a6f8:	f57f ae10 	bpl.w	800a31c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6fc:	f7fb fe6a 	bl	80063d4 <HAL_GetTick>
 800a700:	1b00      	subs	r0, r0, r4
 800a702:	2802      	cmp	r0, #2
 800a704:	d9f6      	bls.n	800a6f4 <HAL_RCC_OscConfig+0x4a0>
 800a706:	e636      	b.n	800a376 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a708:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a70a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a70c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a70e:	f43f ae1a 	beq.w	800a346 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a712:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a716:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a718:	4281      	cmp	r1, r0
 800a71a:	f47f ae14 	bne.w	800a346 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a71e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a722:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a724:	428a      	cmp	r2, r1
 800a726:	f47f ae0e 	bne.w	800a346 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a72a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a72c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800a730:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a732:	4291      	cmp	r1, r2
 800a734:	f47f ae07 	bne.w	800a346 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a738:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a73a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800a73e:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a740:	4291      	cmp	r1, r2
 800a742:	f47f ae00 	bne.w	800a346 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a746:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a748:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800a74c:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a74e:	4291      	cmp	r1, r2
 800a750:	f47f adf9 	bne.w	800a346 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a754:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a756:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a75a:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a75c:	4293      	cmp	r3, r2
 800a75e:	f47f adf2 	bne.w	800a346 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a762:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a764:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a766:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a76a:	429a      	cmp	r2, r3
 800a76c:	f43f add6 	beq.w	800a31c <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800a770:	4d0b      	ldr	r5, [pc, #44]	@ (800a7a0 <HAL_RCC_OscConfig+0x54c>)
 800a772:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a774:	f023 0301 	bic.w	r3, r3, #1
 800a778:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800a77a:	f7fb fe2b 	bl	80063d4 <HAL_GetTick>
 800a77e:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a780:	f7fb fe28 	bl	80063d4 <HAL_GetTick>
 800a784:	42b0      	cmp	r0, r6
 800a786:	d0fb      	beq.n	800a780 <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a788:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a78a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a78c:	f36f 03cf 	bfc	r3, #3, #13
 800a790:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a794:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800a796:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a798:	f043 0301 	orr.w	r3, r3, #1
 800a79c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800a79e:	e5bd      	b.n	800a31c <HAL_RCC_OscConfig+0xc8>
 800a7a0:	58024400 	.word	0x58024400

0800a7a4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	4c23      	ldr	r4, [pc, #140]	@ (800a834 <HAL_RCC_MCOConfig+0x90>)
 800a7a8:	b088      	sub	sp, #32
 800a7aa:	460e      	mov	r6, r1
 800a7ac:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a7ae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800a7b2:	b9f8      	cbnz	r0, 800a7f4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800a7b4:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7b8:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a7bc:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800a7be:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a7c2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a7c6:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7d6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7d8:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a7dc:	4816      	ldr	r0, [pc, #88]	@ (800a838 <HAL_RCC_MCOConfig+0x94>)
 800a7de:	f7fd fa4b 	bl	8007c78 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a7e2:	6923      	ldr	r3, [r4, #16]
 800a7e4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800a7e8:	ea43 0106 	orr.w	r1, r3, r6
 800a7ec:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a7ee:	6121      	str	r1, [r4, #16]
  }
}
 800a7f0:	b008      	add	sp, #32
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800a7f4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7fc:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a7fe:	480f      	ldr	r0, [pc, #60]	@ (800a83c <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800a800:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a804:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	9302      	str	r3, [sp, #8]
 800a80e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a810:	2302      	movs	r3, #2
 800a812:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a816:	2300      	movs	r3, #0
 800a818:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a81c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a81e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a820:	f7fd fa2a 	bl	8007c78 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a824:	6923      	ldr	r3, [r4, #16]
 800a826:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800a82a:	ea43 0106 	orr.w	r1, r3, r6
 800a82e:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800a832:	e7dc      	b.n	800a7ee <HAL_RCC_MCOConfig+0x4a>
 800a834:	58024400 	.word	0x58024400
 800a838:	58020000 	.word	0x58020000
 800a83c:	58020800 	.word	0x58020800

0800a840 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a840:	4b49      	ldr	r3, [pc, #292]	@ (800a968 <HAL_RCC_GetSysClockFreq+0x128>)
 800a842:	691a      	ldr	r2, [r3, #16]
 800a844:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800a848:	2a10      	cmp	r2, #16
{
 800a84a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a84c:	f000 8088 	beq.w	800a960 <HAL_RCC_GetSysClockFreq+0x120>
 800a850:	2a18      	cmp	r2, #24
 800a852:	d00c      	beq.n	800a86e <HAL_RCC_GetSysClockFreq+0x2e>
 800a854:	2a00      	cmp	r2, #0
 800a856:	f040 8085 	bne.w	800a964 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	4843      	ldr	r0, [pc, #268]	@ (800a96c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a85e:	f012 0f20 	tst.w	r2, #32
 800a862:	d003      	beq.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a86a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a86c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a86e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a870:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a872:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800a874:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a878:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a87c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800a87e:	d0f5      	beq.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a880:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a884:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a888:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a88c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a890:	4362      	muls	r2, r4
 800a892:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 800a896:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a89c:	ee06 2a90 	vmov	s13, r2
 800a8a0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800a8a4:	d04e      	beq.n	800a944 <HAL_RCC_GetSysClockFreq+0x104>
 800a8a6:	2902      	cmp	r1, #2
 800a8a8:	d03e      	beq.n	800a928 <HAL_RCC_GetSysClockFreq+0xe8>
 800a8aa:	2900      	cmp	r1, #0
 800a8ac:	d14a      	bne.n	800a944 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	0692      	lsls	r2, r2, #26
 800a8b2:	d527      	bpl.n	800a904 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8b4:	6819      	ldr	r1, [r3, #0]
 800a8b6:	4a2d      	ldr	r2, [pc, #180]	@ (800a96c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a8b8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8be:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c4:	ee07 2a90 	vmov	s15, r2
 800a8c8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800a8cc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800a8d0:	ee07 3a10 	vmov	s14, r3
 800a8d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a8d8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a8dc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a8e0:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a8e4:	4b20      	ldr	r3, [pc, #128]	@ (800a968 <HAL_RCC_GetSysClockFreq+0x128>)
 800a8e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a8ec:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a8ee:	ee07 3a10 	vmov	s14, r3
 800a8f2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800a8f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a8fa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a8fe:	ee17 0a90 	vmov	r0, s15
 800a902:	e7b3      	b.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a916:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a91a:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a970 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a91e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a922:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800a926:	e7dd      	b.n	800a8e4 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a93a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a93e:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800a974 <HAL_RCC_GetSysClockFreq+0x134>
 800a942:	e7ec      	b.n	800a91e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a94a:	ee07 3a90 	vmov	s15, r3
 800a94e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a956:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a95a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800a978 <HAL_RCC_GetSysClockFreq+0x138>
 800a95e:	e7de      	b.n	800a91e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a960:	4806      	ldr	r0, [pc, #24]	@ (800a97c <HAL_RCC_GetSysClockFreq+0x13c>)
 800a962:	e783      	b.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800a964:	4806      	ldr	r0, [pc, #24]	@ (800a980 <HAL_RCC_GetSysClockFreq+0x140>)
 800a966:	e781      	b.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c>
 800a968:	58024400 	.word	0x58024400
 800a96c:	03d09000 	.word	0x03d09000
 800a970:	4c742400 	.word	0x4c742400
 800a974:	4bbebc20 	.word	0x4bbebc20
 800a978:	4a742400 	.word	0x4a742400
 800a97c:	017d7840 	.word	0x017d7840
 800a980:	003d0900 	.word	0x003d0900

0800a984 <HAL_RCC_ClockConfig>:
{
 800a984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a988:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a98a:	4604      	mov	r4, r0
 800a98c:	b910      	cbnz	r0, 800a994 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a98e:	2001      	movs	r0, #1
}
 800a990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a994:	4a88      	ldr	r2, [pc, #544]	@ (800abb8 <HAL_RCC_ClockConfig+0x234>)
 800a996:	6813      	ldr	r3, [r2, #0]
 800a998:	f003 030f 	and.w	r3, r3, #15
 800a99c:	428b      	cmp	r3, r1
 800a99e:	f0c0 8093 	bcc.w	800aac8 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	075f      	lsls	r7, r3, #29
 800a9a6:	f100 809b 	bmi.w	800aae0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9aa:	071e      	lsls	r6, r3, #28
 800a9ac:	d50b      	bpl.n	800a9c6 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9ae:	4983      	ldr	r1, [pc, #524]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800a9b0:	6960      	ldr	r0, [r4, #20]
 800a9b2:	69ca      	ldr	r2, [r1, #28]
 800a9b4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a9b8:	4290      	cmp	r0, r2
 800a9ba:	d904      	bls.n	800a9c6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9bc:	69ca      	ldr	r2, [r1, #28]
 800a9be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a9c2:	4302      	orrs	r2, r0
 800a9c4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9c6:	06d8      	lsls	r0, r3, #27
 800a9c8:	d50b      	bpl.n	800a9e2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9ca:	497c      	ldr	r1, [pc, #496]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800a9cc:	69a0      	ldr	r0, [r4, #24]
 800a9ce:	69ca      	ldr	r2, [r1, #28]
 800a9d0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a9d4:	4290      	cmp	r0, r2
 800a9d6:	d904      	bls.n	800a9e2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a9d8:	69ca      	ldr	r2, [r1, #28]
 800a9da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a9de:	4302      	orrs	r2, r0
 800a9e0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a9e2:	0699      	lsls	r1, r3, #26
 800a9e4:	d50b      	bpl.n	800a9fe <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a9e6:	4975      	ldr	r1, [pc, #468]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800a9e8:	69e0      	ldr	r0, [r4, #28]
 800a9ea:	6a0a      	ldr	r2, [r1, #32]
 800a9ec:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a9f0:	4290      	cmp	r0, r2
 800a9f2:	d904      	bls.n	800a9fe <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a9f4:	6a0a      	ldr	r2, [r1, #32]
 800a9f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a9fa:	4302      	orrs	r2, r0
 800a9fc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9fe:	079a      	lsls	r2, r3, #30
 800aa00:	d50b      	bpl.n	800aa1a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa02:	496e      	ldr	r1, [pc, #440]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800aa04:	68e0      	ldr	r0, [r4, #12]
 800aa06:	698a      	ldr	r2, [r1, #24]
 800aa08:	f002 020f 	and.w	r2, r2, #15
 800aa0c:	4290      	cmp	r0, r2
 800aa0e:	d904      	bls.n	800aa1a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa10:	698a      	ldr	r2, [r1, #24]
 800aa12:	f022 020f 	bic.w	r2, r2, #15
 800aa16:	4302      	orrs	r2, r0
 800aa18:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa1a:	07df      	lsls	r7, r3, #31
 800aa1c:	d46e      	bmi.n	800aafc <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	079e      	lsls	r6, r3, #30
 800aa22:	f100 80a1 	bmi.w	800ab68 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa26:	4964      	ldr	r1, [pc, #400]	@ (800abb8 <HAL_RCC_ClockConfig+0x234>)
 800aa28:	680a      	ldr	r2, [r1, #0]
 800aa2a:	f002 020f 	and.w	r2, r2, #15
 800aa2e:	42aa      	cmp	r2, r5
 800aa30:	f200 80a8 	bhi.w	800ab84 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa34:	0758      	lsls	r0, r3, #29
 800aa36:	f100 80b1 	bmi.w	800ab9c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa3a:	0719      	lsls	r1, r3, #28
 800aa3c:	d50b      	bpl.n	800aa56 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa3e:	495f      	ldr	r1, [pc, #380]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800aa40:	6960      	ldr	r0, [r4, #20]
 800aa42:	69ca      	ldr	r2, [r1, #28]
 800aa44:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aa48:	4290      	cmp	r0, r2
 800aa4a:	d204      	bcs.n	800aa56 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa4c:	69ca      	ldr	r2, [r1, #28]
 800aa4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800aa52:	4302      	orrs	r2, r0
 800aa54:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa56:	06da      	lsls	r2, r3, #27
 800aa58:	d50b      	bpl.n	800aa72 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa5a:	4958      	ldr	r1, [pc, #352]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800aa5c:	69a0      	ldr	r0, [r4, #24]
 800aa5e:	69ca      	ldr	r2, [r1, #28]
 800aa60:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800aa64:	4290      	cmp	r0, r2
 800aa66:	d204      	bcs.n	800aa72 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa68:	69ca      	ldr	r2, [r1, #28]
 800aa6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aa6e:	4302      	orrs	r2, r0
 800aa70:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa72:	069b      	lsls	r3, r3, #26
 800aa74:	d50b      	bpl.n	800aa8e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa76:	4a51      	ldr	r2, [pc, #324]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800aa78:	69e1      	ldr	r1, [r4, #28]
 800aa7a:	6a13      	ldr	r3, [r2, #32]
 800aa7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa80:	4299      	cmp	r1, r3
 800aa82:	d204      	bcs.n	800aa8e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa84:	6a13      	ldr	r3, [r2, #32]
 800aa86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa8e:	f7ff fed7 	bl	800a840 <HAL_RCC_GetSysClockFreq>
 800aa92:	494a      	ldr	r1, [pc, #296]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800aa94:	4a4a      	ldr	r2, [pc, #296]	@ (800abc0 <HAL_RCC_ClockConfig+0x23c>)
 800aa96:	698b      	ldr	r3, [r1, #24]
 800aa98:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800aa9c:	5cd3      	ldrb	r3, [r2, r3]
 800aa9e:	f003 031f 	and.w	r3, r3, #31
 800aaa2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaa4:	698b      	ldr	r3, [r1, #24]
 800aaa6:	f003 030f 	and.w	r3, r3, #15
 800aaaa:	5cd3      	ldrb	r3, [r2, r3]
 800aaac:	4a45      	ldr	r2, [pc, #276]	@ (800abc4 <HAL_RCC_ClockConfig+0x240>)
 800aaae:	f003 031f 	and.w	r3, r3, #31
 800aab2:	fa20 f303 	lsr.w	r3, r0, r3
 800aab6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800aab8:	4b43      	ldr	r3, [pc, #268]	@ (800abc8 <HAL_RCC_ClockConfig+0x244>)
 800aaba:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800aabc:	4b43      	ldr	r3, [pc, #268]	@ (800abcc <HAL_RCC_ClockConfig+0x248>)
}
 800aabe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800aac2:	6818      	ldr	r0, [r3, #0]
 800aac4:	f7f6 bdd6 	b.w	8001674 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aac8:	6813      	ldr	r3, [r2, #0]
 800aaca:	f023 030f 	bic.w	r3, r3, #15
 800aace:	430b      	orrs	r3, r1
 800aad0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aad2:	6813      	ldr	r3, [r2, #0]
 800aad4:	f003 030f 	and.w	r3, r3, #15
 800aad8:	428b      	cmp	r3, r1
 800aada:	f47f af58 	bne.w	800a98e <HAL_RCC_ClockConfig+0xa>
 800aade:	e760      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aae0:	4936      	ldr	r1, [pc, #216]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800aae2:	6920      	ldr	r0, [r4, #16]
 800aae4:	698a      	ldr	r2, [r1, #24]
 800aae6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aaea:	4290      	cmp	r0, r2
 800aaec:	f67f af5d 	bls.w	800a9aa <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aaf0:	698a      	ldr	r2, [r1, #24]
 800aaf2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800aaf6:	4302      	orrs	r2, r0
 800aaf8:	618a      	str	r2, [r1, #24]
 800aafa:	e756      	b.n	800a9aa <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aafc:	4b2f      	ldr	r3, [pc, #188]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800aafe:	68a1      	ldr	r1, [r4, #8]
 800ab00:	699a      	ldr	r2, [r3, #24]
 800ab02:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800ab06:	430a      	orrs	r2, r1
 800ab08:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab0a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab0c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab0e:	2902      	cmp	r1, #2
 800ab10:	d11d      	bne.n	800ab4e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab12:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab16:	f43f af3a 	beq.w	800a98e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab1a:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab1c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab20:	4f26      	ldr	r7, [pc, #152]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab22:	f022 0207 	bic.w	r2, r2, #7
 800ab26:	430a      	orrs	r2, r1
 800ab28:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800ab2a:	f7fb fc53 	bl	80063d4 <HAL_GetTick>
 800ab2e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	6862      	ldr	r2, [r4, #4]
 800ab34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab38:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800ab3c:	f43f af6f 	beq.w	800aa1e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab40:	f7fb fc48 	bl	80063d4 <HAL_GetTick>
 800ab44:	1b80      	subs	r0, r0, r6
 800ab46:	4540      	cmp	r0, r8
 800ab48:	d9f2      	bls.n	800ab30 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800ab4a:	2003      	movs	r0, #3
 800ab4c:	e720      	b.n	800a990 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab4e:	2903      	cmp	r1, #3
 800ab50:	d102      	bne.n	800ab58 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab52:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800ab56:	e7de      	b.n	800ab16 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ab58:	2901      	cmp	r1, #1
 800ab5a:	d102      	bne.n	800ab62 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab5c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800ab60:	e7d9      	b.n	800ab16 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab62:	f012 0f04 	tst.w	r2, #4
 800ab66:	e7d6      	b.n	800ab16 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab68:	4914      	ldr	r1, [pc, #80]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800ab6a:	68e0      	ldr	r0, [r4, #12]
 800ab6c:	698a      	ldr	r2, [r1, #24]
 800ab6e:	f002 020f 	and.w	r2, r2, #15
 800ab72:	4290      	cmp	r0, r2
 800ab74:	f4bf af57 	bcs.w	800aa26 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab78:	698a      	ldr	r2, [r1, #24]
 800ab7a:	f022 020f 	bic.w	r2, r2, #15
 800ab7e:	4302      	orrs	r2, r0
 800ab80:	618a      	str	r2, [r1, #24]
 800ab82:	e750      	b.n	800aa26 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab84:	680a      	ldr	r2, [r1, #0]
 800ab86:	f022 020f 	bic.w	r2, r2, #15
 800ab8a:	432a      	orrs	r2, r5
 800ab8c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab8e:	680a      	ldr	r2, [r1, #0]
 800ab90:	f002 020f 	and.w	r2, r2, #15
 800ab94:	42aa      	cmp	r2, r5
 800ab96:	f47f aefa 	bne.w	800a98e <HAL_RCC_ClockConfig+0xa>
 800ab9a:	e74b      	b.n	800aa34 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab9c:	4907      	ldr	r1, [pc, #28]	@ (800abbc <HAL_RCC_ClockConfig+0x238>)
 800ab9e:	6920      	ldr	r0, [r4, #16]
 800aba0:	698a      	ldr	r2, [r1, #24]
 800aba2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aba6:	4290      	cmp	r0, r2
 800aba8:	f4bf af47 	bcs.w	800aa3a <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800abac:	698a      	ldr	r2, [r1, #24]
 800abae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800abb2:	4302      	orrs	r2, r0
 800abb4:	618a      	str	r2, [r1, #24]
 800abb6:	e740      	b.n	800aa3a <HAL_RCC_ClockConfig+0xb6>
 800abb8:	52002000 	.word	0x52002000
 800abbc:	58024400 	.word	0x58024400
 800abc0:	08026708 	.word	0x08026708
 800abc4:	24000068 	.word	0x24000068
 800abc8:	2400006c 	.word	0x2400006c
 800abcc:	24000074 	.word	0x24000074

0800abd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abd0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abd2:	f7ff fe35 	bl	800a840 <HAL_RCC_GetSysClockFreq>
 800abd6:	4a0b      	ldr	r2, [pc, #44]	@ (800ac04 <HAL_RCC_GetHCLKFreq+0x34>)
 800abd8:	490b      	ldr	r1, [pc, #44]	@ (800ac08 <HAL_RCC_GetHCLKFreq+0x38>)
 800abda:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abdc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abde:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abe2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abe6:	5ccb      	ldrb	r3, [r1, r3]
 800abe8:	f003 031f 	and.w	r3, r3, #31
 800abec:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abf0:	5c88      	ldrb	r0, [r1, r2]
 800abf2:	4a06      	ldr	r2, [pc, #24]	@ (800ac0c <HAL_RCC_GetHCLKFreq+0x3c>)
 800abf4:	f000 001f 	and.w	r0, r0, #31
 800abf8:	fa23 f000 	lsr.w	r0, r3, r0
 800abfc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abfe:	4a04      	ldr	r2, [pc, #16]	@ (800ac10 <HAL_RCC_GetHCLKFreq+0x40>)
 800ac00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800ac02:	bd08      	pop	{r3, pc}
 800ac04:	58024400 	.word	0x58024400
 800ac08:	08026708 	.word	0x08026708
 800ac0c:	24000068 	.word	0x24000068
 800ac10:	2400006c 	.word	0x2400006c

0800ac14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac14:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac16:	f7ff ffdb 	bl	800abd0 <HAL_RCC_GetHCLKFreq>
 800ac1a:	4b05      	ldr	r3, [pc, #20]	@ (800ac30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ac1c:	4a05      	ldr	r2, [pc, #20]	@ (800ac34 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ac24:	5cd3      	ldrb	r3, [r2, r3]
 800ac26:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac2a:	40d8      	lsrs	r0, r3
 800ac2c:	bd08      	pop	{r3, pc}
 800ac2e:	bf00      	nop
 800ac30:	58024400 	.word	0x58024400
 800ac34:	08026708 	.word	0x08026708

0800ac38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac3a:	f7ff ffc9 	bl	800abd0 <HAL_RCC_GetHCLKFreq>
 800ac3e:	4b05      	ldr	r3, [pc, #20]	@ (800ac54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ac40:	4a05      	ldr	r2, [pc, #20]	@ (800ac58 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800ac48:	5cd3      	ldrb	r3, [r2, r3]
 800ac4a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac4e:	40d8      	lsrs	r0, r3
 800ac50:	bd08      	pop	{r3, pc}
 800ac52:	bf00      	nop
 800ac54:	58024400 	.word	0x58024400
 800ac58:	08026708 	.word	0x08026708

0800ac5c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ac5c:	233f      	movs	r3, #63	@ 0x3f
 800ac5e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ac60:	4b11      	ldr	r3, [pc, #68]	@ (800aca8 <HAL_RCC_GetClockConfig+0x4c>)
 800ac62:	691a      	ldr	r2, [r3, #16]
 800ac64:	f002 0207 	and.w	r2, r2, #7
 800ac68:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ac6a:	699a      	ldr	r2, [r3, #24]
 800ac6c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800ac70:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ac72:	699a      	ldr	r2, [r3, #24]
 800ac74:	f002 020f 	and.w	r2, r2, #15
 800ac78:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ac7a:	699a      	ldr	r2, [r3, #24]
 800ac7c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ac80:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ac82:	69da      	ldr	r2, [r3, #28]
 800ac84:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ac88:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ac8a:	69da      	ldr	r2, [r3, #28]
 800ac8c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800ac90:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ac98:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ac9a:	4b04      	ldr	r3, [pc, #16]	@ (800acac <HAL_RCC_GetClockConfig+0x50>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	600b      	str	r3, [r1, #0]
}
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	58024400 	.word	0x58024400
 800acac:	52002000 	.word	0x52002000

0800acb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800acb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800acb2:	4c39      	ldr	r4, [pc, #228]	@ (800ad98 <RCCEx_PLL2_Config+0xe8>)
{
 800acb4:	4606      	mov	r6, r0
 800acb6:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800acb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	d067      	beq.n	800ad92 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800acc8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acca:	f7fb fb83 	bl	80063d4 <HAL_GetTick>
 800acce:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	011a      	lsls	r2, r3, #4
 800acd4:	d449      	bmi.n	800ad6a <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acd6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800acd8:	6832      	ldr	r2, [r6, #0]
 800acda:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800acde:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ace2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ace4:	68b3      	ldr	r3, [r6, #8]
 800ace6:	68f2      	ldr	r2, [r6, #12]
 800ace8:	3b01      	subs	r3, #1
 800acea:	3a01      	subs	r2, #1
 800acec:	025b      	lsls	r3, r3, #9
 800acee:	0412      	lsls	r2, r2, #16
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800acf6:	4313      	orrs	r3, r2
 800acf8:	6872      	ldr	r2, [r6, #4]
 800acfa:	3a01      	subs	r2, #1
 800acfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad00:	4313      	orrs	r3, r2
 800ad02:	6932      	ldr	r2, [r6, #16]
 800ad04:	3a01      	subs	r2, #1
 800ad06:	0612      	lsls	r2, r2, #24
 800ad08:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad12:	6972      	ldr	r2, [r6, #20]
 800ad14:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad1c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad1e:	69b2      	ldr	r2, [r6, #24]
 800ad20:	f023 0320 	bic.w	r3, r3, #32
 800ad24:	4313      	orrs	r3, r2
 800ad26:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad28:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad2a:	f023 0310 	bic.w	r3, r3, #16
 800ad2e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ad32:	69f2      	ldr	r2, [r6, #28]
 800ad34:	f36f 03cf 	bfc	r3, #3, #13
 800ad38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ad3c:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad40:	f043 0310 	orr.w	r3, r3, #16
 800ad44:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad46:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ad48:	b9b5      	cbnz	r5, 800ad78 <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad50:	4c11      	ldr	r4, [pc, #68]	@ (800ad98 <RCCEx_PLL2_Config+0xe8>)
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad58:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad5a:	f7fb fb3b 	bl	80063d4 <HAL_GetTick>
 800ad5e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	d50f      	bpl.n	800ad86 <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 800ad66:	2000      	movs	r0, #0
 800ad68:	e005      	b.n	800ad76 <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad6a:	f7fb fb33 	bl	80063d4 <HAL_GetTick>
 800ad6e:	1bc0      	subs	r0, r0, r7
 800ad70:	2802      	cmp	r0, #2
 800ad72:	d9ad      	bls.n	800acd0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800ad74:	2003      	movs	r0, #3
}
 800ad76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad78:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad7a:	bf0c      	ite	eq
 800ad7c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad80:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800ad84:	e7e3      	b.n	800ad4e <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad86:	f7fb fb25 	bl	80063d4 <HAL_GetTick>
 800ad8a:	1b40      	subs	r0, r0, r5
 800ad8c:	2802      	cmp	r0, #2
 800ad8e:	d9e7      	bls.n	800ad60 <RCCEx_PLL2_Config+0xb0>
 800ad90:	e7f0      	b.n	800ad74 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 800ad92:	2001      	movs	r0, #1
 800ad94:	e7ef      	b.n	800ad76 <RCCEx_PLL2_Config+0xc6>
 800ad96:	bf00      	nop
 800ad98:	58024400 	.word	0x58024400

0800ad9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad9e:	4c39      	ldr	r4, [pc, #228]	@ (800ae84 <RCCEx_PLL3_Config+0xe8>)
{
 800ada0:	4606      	mov	r6, r0
 800ada2:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ada4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ada6:	f003 0303 	and.w	r3, r3, #3
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d067      	beq.n	800ae7e <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adb4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adb6:	f7fb fb0d 	bl	80063d4 <HAL_GetTick>
 800adba:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	009a      	lsls	r2, r3, #2
 800adc0:	d449      	bmi.n	800ae56 <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800adc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800adc4:	6832      	ldr	r2, [r6, #0]
 800adc6:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800adca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800adce:	62a3      	str	r3, [r4, #40]	@ 0x28
 800add0:	68b3      	ldr	r3, [r6, #8]
 800add2:	68f2      	ldr	r2, [r6, #12]
 800add4:	3b01      	subs	r3, #1
 800add6:	3a01      	subs	r2, #1
 800add8:	025b      	lsls	r3, r3, #9
 800adda:	0412      	lsls	r2, r2, #16
 800addc:	b29b      	uxth	r3, r3
 800adde:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ade2:	4313      	orrs	r3, r2
 800ade4:	6872      	ldr	r2, [r6, #4]
 800ade6:	3a01      	subs	r2, #1
 800ade8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adec:	4313      	orrs	r3, r2
 800adee:	6932      	ldr	r2, [r6, #16]
 800adf0:	3a01      	subs	r2, #1
 800adf2:	0612      	lsls	r2, r2, #24
 800adf4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800adf8:	4313      	orrs	r3, r2
 800adfa:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800adfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800adfe:	6972      	ldr	r2, [r6, #20]
 800ae00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ae04:	4313      	orrs	r3, r2
 800ae06:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ae0a:	69b2      	ldr	r2, [r6, #24]
 800ae0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae10:	4313      	orrs	r3, r2
 800ae12:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ae16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae1a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ae1c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ae1e:	69f2      	ldr	r2, [r6, #28]
 800ae20:	f36f 03cf 	bfc	r3, #3, #13
 800ae24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ae28:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ae2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ae2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae30:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae32:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ae34:	b9b5      	cbnz	r5, 800ae64 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ae3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ae3c:	4c11      	ldr	r4, [pc, #68]	@ (800ae84 <RCCEx_PLL3_Config+0xe8>)
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae44:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae46:	f7fb fac5 	bl	80063d4 <HAL_GetTick>
 800ae4a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	d50f      	bpl.n	800ae72 <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 800ae52:	2000      	movs	r0, #0
 800ae54:	e005      	b.n	800ae62 <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae56:	f7fb fabd 	bl	80063d4 <HAL_GetTick>
 800ae5a:	1bc0      	subs	r0, r0, r7
 800ae5c:	2802      	cmp	r0, #2
 800ae5e:	d9ad      	bls.n	800adbc <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800ae60:	2003      	movs	r0, #3
}
 800ae62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ae64:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae66:	bf0c      	ite	eq
 800ae68:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ae6c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800ae70:	e7e3      	b.n	800ae3a <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae72:	f7fb faaf 	bl	80063d4 <HAL_GetTick>
 800ae76:	1b40      	subs	r0, r0, r5
 800ae78:	2802      	cmp	r0, #2
 800ae7a:	d9e7      	bls.n	800ae4c <RCCEx_PLL3_Config+0xb0>
 800ae7c:	e7f0      	b.n	800ae60 <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800ae7e:	2001      	movs	r0, #1
 800ae80:	e7ef      	b.n	800ae62 <RCCEx_PLL3_Config+0xc6>
 800ae82:	bf00      	nop
 800ae84:	58024400 	.word	0x58024400

0800ae88 <HAL_RCCEx_PeriphCLKConfig>:
{
 800ae88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae8c:	6803      	ldr	r3, [r0, #0]
{
 800ae8e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae90:	011c      	lsls	r4, r3, #4
 800ae92:	d51e      	bpl.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae94:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ae96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae9a:	d02a      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800ae9c:	d80f      	bhi.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x36>
 800ae9e:	b1d3      	cbz	r3, 800aed6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800aea0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aea4:	d01d      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800aea6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	05d8      	lsls	r0, r3, #23
 800aeac:	d54f      	bpl.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800aeae:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800aeb0:	2b04      	cmp	r3, #4
 800aeb2:	d84b      	bhi.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800aeb4:	e8df f003 	tbb	[pc, r3]
 800aeb8:	27443d22 	.word	0x27443d22
 800aebc:	27          	.byte	0x27
 800aebd:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800aebe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aec2:	d1f0      	bne.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aec4:	4a86      	ldr	r2, [pc, #536]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aec6:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800aec8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800aeca:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aece:	430b      	orrs	r3, r1
 800aed0:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aed2:	2600      	movs	r6, #0
 800aed4:	e7e8      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aed6:	4a82      	ldr	r2, [pc, #520]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aed8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aeda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aede:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800aee0:	e7f0      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aee2:	2102      	movs	r1, #2
 800aee4:	3008      	adds	r0, #8
 800aee6:	f7ff fee3 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aeea:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d1db      	bne.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800aef0:	e7e8      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aef2:	2102      	movs	r1, #2
 800aef4:	3028      	adds	r0, #40	@ 0x28
 800aef6:	f7ff ff51 	bl	800ad9c <RCCEx_PLL3_Config>
 800aefa:	e7f6      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aefc:	4a78      	ldr	r2, [pc, #480]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aefe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800af00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800af06:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800af08:	bb1c      	cbnz	r4, 800af52 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af0a:	4a75      	ldr	r2, [pc, #468]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af0c:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800af0e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800af10:	f023 0307 	bic.w	r3, r3, #7
 800af14:	430b      	orrs	r3, r1
 800af16:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	0599      	lsls	r1, r3, #22
 800af1c:	d528      	bpl.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800af1e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800af20:	2b80      	cmp	r3, #128	@ 0x80
 800af22:	d043      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x124>
 800af24:	d817      	bhi.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800af26:	b3a3      	cbz	r3, 800af92 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800af28:	2b40      	cmp	r3, #64	@ 0x40
 800af2a:	d038      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800af2c:	2601      	movs	r6, #1
 800af2e:	4634      	mov	r4, r6
 800af30:	e01e      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af32:	2100      	movs	r1, #0
 800af34:	f105 0008 	add.w	r0, r5, #8
 800af38:	f7ff feba 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af3c:	4604      	mov	r4, r0
        break;
 800af3e:	e7e3      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af40:	2100      	movs	r1, #0
 800af42:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800af46:	f7ff ff29 	bl	800ad9c <RCCEx_PLL3_Config>
 800af4a:	e7f7      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800af4c:	2601      	movs	r6, #1
 800af4e:	4634      	mov	r4, r6
 800af50:	e7e2      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x90>
      status = ret;
 800af52:	4626      	mov	r6, r4
 800af54:	e7e0      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800af56:	2bc0      	cmp	r3, #192	@ 0xc0
 800af58:	d002      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800af5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af5e:	d1e5      	bne.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800af60:	bb54      	cbnz	r4, 800afb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800af62:	4a5f      	ldr	r2, [pc, #380]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af64:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800af66:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800af68:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800af6c:	430b      	orrs	r3, r1
 800af6e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	055a      	lsls	r2, r3, #21
 800af74:	d531      	bpl.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800af76:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800af7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af7e:	d049      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800af80:	d81c      	bhi.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x134>
 800af82:	2b00      	cmp	r3, #0
 800af84:	d039      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x172>
 800af86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af8a:	d03c      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800af8c:	2601      	movs	r6, #1
 800af8e:	4634      	mov	r4, r6
 800af90:	e023      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af92:	4a53      	ldr	r2, [pc, #332]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af94:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800af96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800af9c:	e7e0      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af9e:	2100      	movs	r1, #0
 800afa0:	f105 0008 	add.w	r0, r5, #8
 800afa4:	f7ff fe84 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afa8:	4604      	mov	r4, r0
        break;
 800afaa:	e7d9      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afac:	2100      	movs	r1, #0
 800afae:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800afb2:	f7ff fef3 	bl	800ad9c <RCCEx_PLL3_Config>
 800afb6:	e7f7      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      status = ret;
 800afb8:	4626      	mov	r6, r4
 800afba:	e7d9      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800afbc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800afc0:	d002      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800afc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800afc6:	d1e1      	bne.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800afc8:	bb54      	cbnz	r4, 800b020 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800afca:	4a45      	ldr	r2, [pc, #276]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800afcc:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800afd0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800afd2:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800afd6:	430b      	orrs	r3, r1
 800afd8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800afda:	682b      	ldr	r3, [r5, #0]
 800afdc:	051b      	lsls	r3, r3, #20
 800afde:	d530      	bpl.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800afe0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800afe4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afe8:	d045      	beq.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800afea:	d81b      	bhi.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800afec:	b3b3      	cbz	r3, 800b05c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800afee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aff2:	d039      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800aff4:	2601      	movs	r6, #1
 800aff6:	4634      	mov	r4, r6
 800aff8:	e023      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800affa:	4a39      	ldr	r2, [pc, #228]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800affc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800affe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b002:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b004:	e7e0      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b006:	2100      	movs	r1, #0
 800b008:	f105 0008 	add.w	r0, r5, #8
 800b00c:	f7ff fe50 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b010:	4604      	mov	r4, r0
        break;
 800b012:	e7d9      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b014:	2100      	movs	r1, #0
 800b016:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b01a:	f7ff febf 	bl	800ad9c <RCCEx_PLL3_Config>
 800b01e:	e7f7      	b.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x188>
      status = ret;
 800b020:	4626      	mov	r6, r4
 800b022:	e7da      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b024:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b028:	d002      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b02a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b02e:	d1e1      	bne.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800b030:	bb3c      	cbnz	r4, 800b082 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b032:	4a2b      	ldr	r2, [pc, #172]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b034:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800b038:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b03a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800b03e:	430b      	orrs	r3, r1
 800b040:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b042:	682b      	ldr	r3, [r5, #0]
 800b044:	019f      	lsls	r7, r3, #6
 800b046:	d528      	bpl.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800b048:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d03e      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800b04e:	d81a      	bhi.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b050:	b1db      	cbz	r3, 800b08a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b052:	2b10      	cmp	r3, #16
 800b054:	d034      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800b056:	2601      	movs	r6, #1
 800b058:	4634      	mov	r4, r6
 800b05a:	e01e      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b05c:	4a20      	ldr	r2, [pc, #128]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b05e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b064:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b066:	e7e3      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b068:	2100      	movs	r1, #0
 800b06a:	f105 0008 	add.w	r0, r5, #8
 800b06e:	f7ff fe1f 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b072:	4604      	mov	r4, r0
        break;
 800b074:	e7dc      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b076:	2100      	movs	r1, #0
 800b078:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b07c:	f7ff fe8e 	bl	800ad9c <RCCEx_PLL3_Config>
 800b080:	e7f7      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      status = ret;
 800b082:	4626      	mov	r6, r4
 800b084:	e7dd      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800b086:	2b30      	cmp	r3, #48	@ 0x30
 800b088:	d1e5      	bne.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800b08a:	bb34      	cbnz	r4, 800b0da <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b08c:	4a14      	ldr	r2, [pc, #80]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b08e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b090:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b092:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b096:	430b      	orrs	r3, r1
 800b098:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b09a:	682b      	ldr	r3, [r5, #0]
 800b09c:	04d8      	lsls	r0, r3, #19
 800b09e:	d530      	bpl.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0a6:	f000 8095 	beq.w	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b0aa:	d81b      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 8084 	beq.w	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b0b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0b6:	f000 8086 	beq.w	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800b0ba:	2601      	movs	r6, #1
 800b0bc:	4634      	mov	r4, r6
 800b0be:	e020      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0c0:	4a07      	ldr	r2, [pc, #28]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b0c2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b0c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b0ca:	e7de      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0cc:	2102      	movs	r1, #2
 800b0ce:	f105 0008 	add.w	r0, r5, #8
 800b0d2:	f7ff fded 	bl	800acb0 <RCCEx_PLL2_Config>
 800b0d6:	4604      	mov	r4, r0
        break;
 800b0d8:	e7d7      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x202>
      status = ret;
 800b0da:	4626      	mov	r6, r4
 800b0dc:	e7dd      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800b0de:	bf00      	nop
 800b0e0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800b0e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b0e8:	d002      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800b0ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0ee:	d1e4      	bne.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800b0f0:	2c00      	cmp	r4, #0
 800b0f2:	d175      	bne.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0f4:	4a93      	ldr	r2, [pc, #588]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b0f6:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800b0f8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b0fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0fe:	430b      	orrs	r3, r1
 800b100:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b102:	682b      	ldr	r3, [r5, #0]
 800b104:	0499      	lsls	r1, r3, #18
 800b106:	d50c      	bpl.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b108:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800b10a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b10e:	f000 8081 	beq.w	800b214 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b112:	d867      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b114:	2b00      	cmp	r3, #0
 800b116:	d06d      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b11c:	d073      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b11e:	2601      	movs	r6, #1
 800b120:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b122:	682b      	ldr	r3, [r5, #0]
 800b124:	045a      	lsls	r2, r3, #17
 800b126:	d50e      	bpl.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b128:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800b12c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b130:	f000 8091 	beq.w	800b256 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b134:	d876      	bhi.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800b136:	2b00      	cmp	r3, #0
 800b138:	d07c      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b13a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b13e:	f000 8083 	beq.w	800b248 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800b142:	2601      	movs	r6, #1
 800b144:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	015b      	lsls	r3, r3, #5
 800b14a:	d515      	bpl.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800b14c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b14e:	b14b      	cbz	r3, 800b164 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b154:	f040 8087 	bne.w	800b266 <HAL_RCCEx_PeriphCLKConfig+0x3de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b158:	2101      	movs	r1, #1
 800b15a:	f105 0008 	add.w	r0, r5, #8
 800b15e:	f7ff fda7 	bl	800acb0 <RCCEx_PLL2_Config>
 800b162:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b164:	2c00      	cmp	r4, #0
 800b166:	f040 8081 	bne.w	800b26c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800b16a:	4a76      	ldr	r2, [pc, #472]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b16c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800b16e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b174:	430b      	orrs	r3, r1
 800b176:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	041f      	lsls	r7, r3, #16
 800b17c:	d511      	bpl.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800b17e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b184:	d074      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b18a:	d077      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d17c      	bne.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x402>
    if (ret == HAL_OK)
 800b190:	2c00      	cmp	r4, #0
 800b192:	d17d      	bne.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b194:	4a6b      	ldr	r2, [pc, #428]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b196:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800b198:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b19a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800b19e:	430b      	orrs	r3, r1
 800b1a0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b1a2:	682b      	ldr	r3, [r5, #0]
 800b1a4:	01d8      	lsls	r0, r3, #7
 800b1a6:	f140 8083 	bpl.w	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch (PeriphClkInit->FmcClockSelection)
 800b1aa:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	f200 80c4 	bhi.w	800b33a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b1b2:	e8df f003 	tbb	[pc, r3]
 800b1b6:	6f74      	.short	0x6f74
 800b1b8:	74bb      	.short	0x74bb
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1ba:	4a62      	ldr	r2, [pc, #392]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b1bc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b1be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b1c4:	e794      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	f105 0008 	add.w	r0, r5, #8
 800b1cc:	f7ff fd70 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1d0:	4604      	mov	r4, r0
        break;
 800b1d2:	e78d      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b1da:	f7ff fddf 	bl	800ad9c <RCCEx_PLL3_Config>
 800b1de:	e7f7      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x348>
      status = ret;
 800b1e0:	4626      	mov	r6, r4
 800b1e2:	e78e      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b1e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b1e8:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800b1ec:	d002      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b1ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1f2:	d194      	bne.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800b1f4:	b9a4      	cbnz	r4, 800b220 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1f6:	4a53      	ldr	r2, [pc, #332]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b1f8:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800b1fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b1fc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b200:	430b      	orrs	r3, r1
 800b202:	6513      	str	r3, [r2, #80]	@ 0x50
 800b204:	e78d      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b206:	2101      	movs	r1, #1
 800b208:	f105 0008 	add.w	r0, r5, #8
 800b20c:	f7ff fd50 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b210:	4604      	mov	r4, r0
        break;
 800b212:	e7ef      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b214:	2101      	movs	r1, #1
 800b216:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b21a:	f7ff fdbf 	bl	800ad9c <RCCEx_PLL3_Config>
 800b21e:	e7f7      	b.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x388>
      status = ret;
 800b220:	4626      	mov	r6, r4
 800b222:	e77e      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b224:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b228:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b22c:	d002      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b22e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b232:	d186      	bne.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800b234:	b9ac      	cbnz	r4, 800b262 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b236:	4a43      	ldr	r2, [pc, #268]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b238:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800b23c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b23e:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b242:	430b      	orrs	r3, r1
 800b244:	6593      	str	r3, [r2, #88]	@ 0x58
 800b246:	e77e      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b248:	2101      	movs	r1, #1
 800b24a:	f105 0008 	add.w	r0, r5, #8
 800b24e:	f7ff fd2f 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b252:	4604      	mov	r4, r0
        break;
 800b254:	e7ee      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b256:	2101      	movs	r1, #1
 800b258:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b25c:	f7ff fd9e 	bl	800ad9c <RCCEx_PLL3_Config>
 800b260:	e7f7      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      status = ret;
 800b262:	4626      	mov	r6, r4
 800b264:	e76f      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800b266:	2601      	movs	r6, #1
 800b268:	4634      	mov	r4, r6
 800b26a:	e785      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      status = ret;
 800b26c:	4626      	mov	r6, r4
 800b26e:	e783      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b270:	4a34      	ldr	r2, [pc, #208]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b272:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b278:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b27a:	e789      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b27c:	2101      	movs	r1, #1
 800b27e:	f105 0008 	add.w	r0, r5, #8
 800b282:	f7ff fd15 	bl	800acb0 <RCCEx_PLL2_Config>
 800b286:	4604      	mov	r4, r0
        break;
 800b288:	e782      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800b28a:	2601      	movs	r6, #1
 800b28c:	4634      	mov	r4, r6
 800b28e:	e788      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      status = ret;
 800b290:	4626      	mov	r6, r4
 800b292:	e786      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b294:	4a2b      	ldr	r2, [pc, #172]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b296:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b29c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b29e:	2c00      	cmp	r4, #0
 800b2a0:	d14e      	bne.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b2a2:	4a28      	ldr	r2, [pc, #160]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b2a4:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800b2a6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b2a8:	f023 0303 	bic.w	r3, r3, #3
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	0259      	lsls	r1, r3, #9
 800b2b4:	d554      	bpl.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2b6:	4f24      	ldr	r7, [pc, #144]	@ (800b348 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2be:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800b2c0:	f7fb f888 	bl	80063d4 <HAL_GetTick>
 800b2c4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	05da      	lsls	r2, r3, #23
 800b2ca:	d541      	bpl.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if (ret == HAL_OK)
 800b2cc:	2c00      	cmp	r4, #0
 800b2ce:	d174      	bne.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x532>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b2d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b2d2:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800b2d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b2d8:	4042      	eors	r2, r0
 800b2da:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800b2de:	d00b      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x470>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b2e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2e2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b2e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2e8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800b2ec:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2ee:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b2f0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800b2f4:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800b2f6:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b2f8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b2fc:	d048      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x508>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2fe:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800b302:	4910      	ldr	r1, [pc, #64]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b304:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800b308:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800b30c:	d151      	bne.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b30e:	6908      	ldr	r0, [r1, #16]
 800b310:	4a0e      	ldr	r2, [pc, #56]	@ (800b34c <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b312:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800b316:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800b31a:	4302      	orrs	r2, r0
 800b31c:	610a      	str	r2, [r1, #16]
 800b31e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b322:	4a08      	ldr	r2, [pc, #32]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b324:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800b326:	430b      	orrs	r3, r1
 800b328:	6713      	str	r3, [r2, #112]	@ 0x70
 800b32a:	e019      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b32c:	2102      	movs	r1, #2
 800b32e:	f105 0008 	add.w	r0, r5, #8
 800b332:	f7ff fcbd 	bl	800acb0 <RCCEx_PLL2_Config>
 800b336:	4604      	mov	r4, r0
        break;
 800b338:	e7b1      	b.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->FmcClockSelection)
 800b33a:	2601      	movs	r6, #1
 800b33c:	4634      	mov	r4, r6
 800b33e:	e7b7      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x428>
      status = ret;
 800b340:	4626      	mov	r6, r4
 800b342:	e7b5      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b344:	58024400 	.word	0x58024400
 800b348:	58024800 	.word	0x58024800
 800b34c:	00ffffcf 	.word	0x00ffffcf
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b350:	f7fb f840 	bl	80063d4 <HAL_GetTick>
 800b354:	eba0 0008 	sub.w	r0, r0, r8
 800b358:	2864      	cmp	r0, #100	@ 0x64
 800b35a:	d9b4      	bls.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
        ret = HAL_TIMEOUT;
 800b35c:	2603      	movs	r6, #3
 800b35e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	07d8      	lsls	r0, r3, #31
 800b364:	d509      	bpl.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b366:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800b36a:	2b10      	cmp	r3, #16
 800b36c:	d03e      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x564>
 800b36e:	d826      	bhi.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x536>
 800b370:	b35b      	cbz	r3, 800b3ca <HAL_RCCEx_PeriphCLKConfig+0x542>
 800b372:	2b08      	cmp	r3, #8
 800b374:	d033      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x556>
 800b376:	2601      	movs	r6, #1
 800b378:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b37a:	682b      	ldr	r3, [r5, #0]
 800b37c:	0799      	lsls	r1, r3, #30
 800b37e:	d54b      	bpl.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b380:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800b382:	2b05      	cmp	r3, #5
 800b384:	d85e      	bhi.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b386:	e8df f003 	tbb	[pc, r3]
 800b38a:	393f      	.short	0x393f
 800b38c:	3f3f3f57 	.word	0x3f3f3f57
        tickstart = HAL_GetTick();
 800b390:	f7fb f820 	bl	80063d4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b394:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800b450 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        tickstart = HAL_GetTick();
 800b398:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b39a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b39e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800b3a2:	079b      	lsls	r3, r3, #30
 800b3a4:	d4ab      	bmi.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x476>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3a6:	f7fb f815 	bl	80063d4 <HAL_GetTick>
 800b3aa:	1bc0      	subs	r0, r0, r7
 800b3ac:	4548      	cmp	r0, r9
 800b3ae:	d9f6      	bls.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x516>
 800b3b0:	e7d4      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b3b2:	690a      	ldr	r2, [r1, #16]
 800b3b4:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800b3b8:	e7b0      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x494>
      status = ret;
 800b3ba:	4626      	mov	r6, r4
 800b3bc:	e7d0      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b3be:	f023 0208 	bic.w	r2, r3, #8
 800b3c2:	2a20      	cmp	r2, #32
 800b3c4:	d001      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x542>
 800b3c6:	2b18      	cmp	r3, #24
 800b3c8:	d1d5      	bne.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if (ret == HAL_OK)
 800b3ca:	b9ac      	cbnz	r4, 800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b3cc:	4a20      	ldr	r2, [pc, #128]	@ (800b450 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ce:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800b3d2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b3d4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800b3d8:	430b      	orrs	r3, r1
 800b3da:	6553      	str	r3, [r2, #84]	@ 0x54
 800b3dc:	e7cd      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3de:	2101      	movs	r1, #1
 800b3e0:	f105 0008 	add.w	r0, r5, #8
 800b3e4:	f7ff fc64 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3e8:	4604      	mov	r4, r0
        break;
 800b3ea:	e7ee      	b.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b3f2:	f7ff fcd3 	bl	800ad9c <RCCEx_PLL3_Config>
 800b3f6:	e7f7      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = ret;
 800b3f8:	4626      	mov	r6, r4
 800b3fa:	e7be      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	f105 0008 	add.w	r0, r5, #8
 800b402:	f7ff fc55 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b406:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b408:	b9fc      	cbnz	r4, 800b44a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b40a:	4a11      	ldr	r2, [pc, #68]	@ (800b450 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b40c:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800b40e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b410:	f023 0307 	bic.w	r3, r3, #7
 800b414:	430b      	orrs	r3, r1
 800b416:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b418:	682b      	ldr	r3, [r5, #0]
 800b41a:	075a      	lsls	r2, r3, #29
 800b41c:	d52b      	bpl.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b41e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800b422:	2b05      	cmp	r3, #5
 800b424:	f200 816e 	bhi.w	800b704 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800b428:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b42c:	0014001a 	.word	0x0014001a
 800b430:	001a0166 	.word	0x001a0166
 800b434:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b438:	2101      	movs	r1, #1
 800b43a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b43e:	f7ff fcad 	bl	800ad9c <RCCEx_PLL3_Config>
 800b442:	e7e0      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b444:	2601      	movs	r6, #1
 800b446:	4634      	mov	r4, r6
 800b448:	e7e6      	b.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x590>
      status = ret;
 800b44a:	4626      	mov	r6, r4
 800b44c:	e7e4      	b.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x590>
 800b44e:	bf00      	nop
 800b450:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b454:	2101      	movs	r1, #1
 800b456:	f105 0008 	add.w	r0, r5, #8
 800b45a:	f7ff fc29 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b45e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b460:	2c00      	cmp	r4, #0
 800b462:	f040 8152 	bne.w	800b70a <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b466:	4aaa      	ldr	r2, [pc, #680]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b468:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800b46c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b46e:	f023 0307 	bic.w	r3, r3, #7
 800b472:	430b      	orrs	r3, r1
 800b474:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b476:	682b      	ldr	r3, [r5, #0]
 800b478:	069b      	lsls	r3, r3, #26
 800b47a:	d510      	bpl.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b47c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800b480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b484:	f000 8160 	beq.w	800b748 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800b488:	f200 8144 	bhi.w	800b714 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 814a 	beq.w	800b726 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800b492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b496:	f000 8150 	beq.w	800b73a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800b49a:	2601      	movs	r6, #1
 800b49c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b49e:	682b      	ldr	r3, [r5, #0]
 800b4a0:	065f      	lsls	r7, r3, #25
 800b4a2:	d510      	bpl.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b4a4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800b4a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4ac:	f000 816e 	beq.w	800b78c <HAL_RCCEx_PeriphCLKConfig+0x904>
 800b4b0:	f200 8152 	bhi.w	800b758 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 8158 	beq.w	800b76a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b4ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4be:	f000 815e 	beq.w	800b77e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800b4c2:	2601      	movs	r6, #1
 800b4c4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	0618      	lsls	r0, r3, #24
 800b4ca:	d510      	bpl.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b4cc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800b4d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4d4:	f000 817c 	beq.w	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800b4d8:	f200 8160 	bhi.w	800b79c <HAL_RCCEx_PeriphCLKConfig+0x914>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 8166 	beq.w	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x926>
 800b4e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4e6:	f000 816c 	beq.w	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800b4ea:	2601      	movs	r6, #1
 800b4ec:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b4ee:	682b      	ldr	r3, [r5, #0]
 800b4f0:	0719      	lsls	r1, r3, #28
 800b4f2:	d514      	bpl.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x696>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b4f4:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800b4f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4fc:	d107      	bne.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0x686>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4fe:	2102      	movs	r1, #2
 800b500:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b504:	f7ff fc4a 	bl	800ad9c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b508:	2800      	cmp	r0, #0
 800b50a:	bf18      	it	ne
 800b50c:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b50e:	4a80      	ldr	r2, [pc, #512]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b510:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800b514:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b516:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b51a:	430b      	orrs	r3, r1
 800b51c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b51e:	682b      	ldr	r3, [r5, #0]
 800b520:	06da      	lsls	r2, r3, #27
 800b522:	d514      	bpl.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b524:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800b528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b52c:	d107      	bne.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b52e:	2102      	movs	r1, #2
 800b530:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b534:	f7ff fc32 	bl	800ad9c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b538:	2800      	cmp	r0, #0
 800b53a:	bf18      	it	ne
 800b53c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b53e:	4a74      	ldr	r2, [pc, #464]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b540:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800b544:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b54a:	430b      	orrs	r3, r1
 800b54c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b54e:	682b      	ldr	r3, [r5, #0]
 800b550:	031b      	lsls	r3, r3, #12
 800b552:	d51b      	bpl.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 800b554:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b558:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b55c:	f000 8140 	beq.w	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x958>
 800b560:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b564:	d007      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b566:	2900      	cmp	r1, #0
 800b568:	f040 8140 	bne.w	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x964>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b56c:	f105 0008 	add.w	r0, r5, #8
 800b570:	f7ff fb9e 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b574:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b576:	2c00      	cmp	r4, #0
 800b578:	f040 813b 	bne.w	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b57c:	4a64      	ldr	r2, [pc, #400]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b57e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b582:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b584:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800b588:	430b      	orrs	r3, r1
 800b58a:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	035f      	lsls	r7, r3, #13
 800b590:	d50f      	bpl.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    switch (PeriphClkInit->UsbClockSelection)
 800b592:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800b596:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b59a:	f000 813b 	beq.w	800b814 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b59e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b5a2:	f000 812d 	beq.w	800b800 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800b5a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5aa:	f000 8124 	beq.w	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b5ae:	2601      	movs	r6, #1
 800b5b0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b5b2:	682b      	ldr	r3, [r5, #0]
 800b5b4:	03d8      	lsls	r0, r3, #15
 800b5b6:	d509      	bpl.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b5b8:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 8133 	beq.w	800b826 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800b5c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5c4:	f000 813d 	beq.w	800b842 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b5c8:	2601      	movs	r6, #1
 800b5ca:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	0099      	lsls	r1, r3, #2
 800b5d0:	d507      	bpl.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5d2:	2102      	movs	r1, #2
 800b5d4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b5d8:	f7ff fbe0 	bl	800ad9c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	bf18      	it	ne
 800b5e0:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b5e2:	e9d5 3100 	ldrd	r3, r1, [r5]
 800b5e6:	039a      	lsls	r2, r3, #14
 800b5e8:	f140 8143 	bpl.w	800b872 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    switch (PeriphClkInit->RngClockSelection)
 800b5ec:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800b5f0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b5f4:	f000 813f 	beq.w	800b876 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800b5f8:	f200 812c 	bhi.w	800b854 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f000 812f 	beq.w	800b860 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800b602:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b604:	02df      	lsls	r7, r3, #11
 800b606:	d506      	bpl.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b608:	4841      	ldr	r0, [pc, #260]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b60a:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800b60c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b60e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b612:	4332      	orrs	r2, r6
 800b614:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b616:	00de      	lsls	r6, r3, #3
 800b618:	d507      	bpl.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b61a:	483d      	ldr	r0, [pc, #244]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b61c:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800b620:	6902      	ldr	r2, [r0, #16]
 800b622:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b626:	4332      	orrs	r2, r6
 800b628:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b62a:	0298      	lsls	r0, r3, #10
 800b62c:	d506      	bpl.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b62e:	4838      	ldr	r0, [pc, #224]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b630:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800b632:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b634:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b638:	4332      	orrs	r2, r6
 800b63a:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b63c:	005a      	lsls	r2, r3, #1
 800b63e:	d509      	bpl.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b640:	4a33      	ldr	r2, [pc, #204]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b642:	6910      	ldr	r0, [r2, #16]
 800b644:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800b648:	6110      	str	r0, [r2, #16]
 800b64a:	6910      	ldr	r0, [r2, #16]
 800b64c:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800b650:	4330      	orrs	r0, r6
 800b652:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b654:	2b00      	cmp	r3, #0
 800b656:	da06      	bge.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b658:	482d      	ldr	r0, [pc, #180]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b65a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b65c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800b65e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b662:	4332      	orrs	r2, r6
 800b664:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b666:	021f      	lsls	r7, r3, #8
 800b668:	d507      	bpl.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b66a:	4a29      	ldr	r2, [pc, #164]	@ (800b710 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b66c:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800b670:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b672:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b676:	4303      	orrs	r3, r0
 800b678:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b67a:	07ce      	lsls	r6, r1, #31
 800b67c:	d506      	bpl.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x804>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b67e:	2100      	movs	r1, #0
 800b680:	f105 0008 	add.w	r0, r5, #8
 800b684:	f7ff fb14 	bl	800acb0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b688:	4607      	mov	r7, r0
 800b68a:	b900      	cbnz	r0, 800b68e <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch (PeriphClkInit->RngClockSelection)
 800b68c:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b68e:	686b      	ldr	r3, [r5, #4]
 800b690:	079c      	lsls	r4, r3, #30
 800b692:	d506      	bpl.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b694:	2101      	movs	r1, #1
 800b696:	f105 0008 	add.w	r0, r5, #8
 800b69a:	f7ff fb09 	bl	800acb0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b69e:	4606      	mov	r6, r0
 800b6a0:	b900      	cbnz	r0, 800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    switch (PeriphClkInit->RngClockSelection)
 800b6a2:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b6a4:	686b      	ldr	r3, [r5, #4]
 800b6a6:	0758      	lsls	r0, r3, #29
 800b6a8:	d506      	bpl.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x830>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6aa:	2102      	movs	r1, #2
 800b6ac:	f105 0008 	add.w	r0, r5, #8
 800b6b0:	f7ff fafe 	bl	800acb0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	b900      	cbnz	r0, 800b6ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch (PeriphClkInit->RngClockSelection)
 800b6b8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b6ba:	686b      	ldr	r3, [r5, #4]
 800b6bc:	0719      	lsls	r1, r3, #28
 800b6be:	d506      	bpl.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x846>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b6c6:	f7ff fb69 	bl	800ad9c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	b900      	cbnz	r0, 800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x848>
    switch (PeriphClkInit->RngClockSelection)
 800b6ce:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b6d0:	686b      	ldr	r3, [r5, #4]
 800b6d2:	06da      	lsls	r2, r3, #27
 800b6d4:	d506      	bpl.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b6dc:	f7ff fb5e 	bl	800ad9c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	b900      	cbnz	r0, 800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    switch (PeriphClkInit->RngClockSelection)
 800b6e4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b6e6:	686b      	ldr	r3, [r5, #4]
 800b6e8:	069b      	lsls	r3, r3, #26
 800b6ea:	f100 80ca 	bmi.w	800b882 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  if (status == HAL_OK)
 800b6ee:	1e20      	subs	r0, r4, #0
 800b6f0:	bf18      	it	ne
 800b6f2:	2001      	movne	r0, #1
}
 800b6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b6fe:	f7ff fb4d 	bl	800ad9c <RCCEx_PLL3_Config>
 800b702:	e6ac      	b.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b704:	2601      	movs	r6, #1
 800b706:	4634      	mov	r4, r6
 800b708:	e6b5      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 800b70a:	4626      	mov	r6, r4
 800b70c:	e6b3      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800b70e:	bf00      	nop
 800b710:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b714:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b718:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b71c:	d003      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800b71e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b722:	f47f aeba 	bne.w	800b49a <HAL_RCCEx_PeriphCLKConfig+0x612>
    if (ret == HAL_OK)
 800b726:	b9ac      	cbnz	r4, 800b754 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b728:	4a5b      	ldr	r2, [pc, #364]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b72a:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800b72e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b730:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b734:	430b      	orrs	r3, r1
 800b736:	6553      	str	r3, [r2, #84]	@ 0x54
 800b738:	e6b1      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b73a:	2100      	movs	r1, #0
 800b73c:	f105 0008 	add.w	r0, r5, #8
 800b740:	f7ff fab6 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b744:	4604      	mov	r4, r0
        break;
 800b746:	e7ee      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b748:	2102      	movs	r1, #2
 800b74a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b74e:	f7ff fb25 	bl	800ad9c <RCCEx_PLL3_Config>
 800b752:	e7f7      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      status = ret;
 800b754:	4626      	mov	r6, r4
 800b756:	e6a2      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b758:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b75c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800b760:	d003      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b762:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b766:	f47f aeac 	bne.w	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if (ret == HAL_OK)
 800b76a:	b9ac      	cbnz	r4, 800b798 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b76c:	4a4a      	ldr	r2, [pc, #296]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b76e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800b772:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b774:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800b778:	430b      	orrs	r3, r1
 800b77a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b77c:	e6a3      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b77e:	2100      	movs	r1, #0
 800b780:	f105 0008 	add.w	r0, r5, #8
 800b784:	f7ff fa94 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b788:	4604      	mov	r4, r0
        break;
 800b78a:	e7ee      	b.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b78c:	2102      	movs	r1, #2
 800b78e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b792:	f7ff fb03 	bl	800ad9c <RCCEx_PLL3_Config>
 800b796:	e7f7      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x900>
      status = ret;
 800b798:	4626      	mov	r6, r4
 800b79a:	e694      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b79c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b7a0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800b7a4:	d003      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x926>
 800b7a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b7aa:	f47f ae9e 	bne.w	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x662>
    if (ret == HAL_OK)
 800b7ae:	b9ac      	cbnz	r4, 800b7dc <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b7b0:	4a39      	ldr	r2, [pc, #228]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b7b2:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800b7b6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b7b8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	6593      	str	r3, [r2, #88]	@ 0x58
 800b7c0:	e695      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	f105 0008 	add.w	r0, r5, #8
 800b7c8:	f7ff fa72 	bl	800acb0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7cc:	4604      	mov	r4, r0
        break;
 800b7ce:	e7ee      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x926>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7d0:	2102      	movs	r1, #2
 800b7d2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b7d6:	f7ff fae1 	bl	800ad9c <RCCEx_PLL3_Config>
 800b7da:	e7f7      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x944>
      status = ret;
 800b7dc:	4626      	mov	r6, r4
 800b7de:	e686      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7e0:	2102      	movs	r1, #2
 800b7e2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b7e6:	f7ff fad9 	bl	800ad9c <RCCEx_PLL3_Config>
 800b7ea:	e6c3      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    switch (PeriphClkInit->AdcClockSelection)
 800b7ec:	2601      	movs	r6, #1
 800b7ee:	4634      	mov	r4, r6
 800b7f0:	e6cc      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x704>
      status = ret;
 800b7f2:	4626      	mov	r6, r4
 800b7f4:	e6ca      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x704>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f6:	4a28      	ldr	r2, [pc, #160]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b7f8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b7fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b800:	b97c      	cbnz	r4, 800b822 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b802:	4a25      	ldr	r2, [pc, #148]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b804:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800b808:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b80a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b80e:	430b      	orrs	r3, r1
 800b810:	6553      	str	r3, [r2, #84]	@ 0x54
 800b812:	e6ce      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b814:	2101      	movs	r1, #1
 800b816:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b81a:	f7ff fabf 	bl	800ad9c <RCCEx_PLL3_Config>
 800b81e:	4604      	mov	r4, r0
        break;
 800b820:	e7ee      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x978>
      status = ret;
 800b822:	4626      	mov	r6, r4
 800b824:	e6c5      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b826:	4a1c      	ldr	r2, [pc, #112]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b828:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b82a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b82e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b830:	b974      	cbnz	r4, 800b850 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b832:	4a19      	ldr	r2, [pc, #100]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b834:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800b836:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b83c:	430b      	orrs	r3, r1
 800b83e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b840:	e6c4      	b.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x744>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b842:	2102      	movs	r1, #2
 800b844:	f105 0008 	add.w	r0, r5, #8
 800b848:	f7ff fa32 	bl	800acb0 <RCCEx_PLL2_Config>
 800b84c:	4604      	mov	r4, r0
        break;
 800b84e:	e7ef      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      status = ret;
 800b850:	4626      	mov	r6, r4
 800b852:	e6bb      	b.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->RngClockSelection)
 800b854:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800b858:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b85c:	f47f aed1 	bne.w	800b602 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    if (ret == HAL_OK)
 800b860:	2c00      	cmp	r4, #0
 800b862:	f47f aecf 	bne.w	800b604 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b866:	4c0c      	ldr	r4, [pc, #48]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b868:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b86a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b86e:	4302      	orrs	r2, r0
 800b870:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800b872:	4634      	mov	r4, r6
 800b874:	e6c6      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b876:	4f08      	ldr	r7, [pc, #32]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b87a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b87e:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800b880:	e7ee      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b882:	2102      	movs	r1, #2
 800b884:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b888:	f7ff fa88 	bl	800ad9c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f43f af2e 	beq.w	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x866>
  return HAL_ERROR;
 800b892:	2001      	movs	r0, #1
 800b894:	e72e      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800b896:	bf00      	nop
 800b898:	58024400 	.word	0x58024400

0800b89c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800b89c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b89e:	f7ff f997 	bl	800abd0 <HAL_RCC_GetHCLKFreq>
 800b8a2:	4b05      	ldr	r3, [pc, #20]	@ (800b8b8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800b8a4:	4a05      	ldr	r2, [pc, #20]	@ (800b8bc <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800b8a6:	6a1b      	ldr	r3, [r3, #32]
 800b8a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b8ac:	5cd3      	ldrb	r3, [r2, r3]
 800b8ae:	f003 031f 	and.w	r3, r3, #31
}
 800b8b2:	40d8      	lsrs	r0, r3
 800b8b4:	bd08      	pop	{r3, pc}
 800b8b6:	bf00      	nop
 800b8b8:	58024400 	.word	0x58024400
 800b8bc:	08026708 	.word	0x08026708

0800b8c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8c0:	494f      	ldr	r1, [pc, #316]	@ (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800b8c2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8c4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b8c6:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b8c8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800b8ca:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b8ce:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b8d2:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800b8d4:	f000 8090 	beq.w	800b9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8d8:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b8dc:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b8e0:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8e4:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b8ec:	4353      	muls	r3, r2
    switch (pllsource)
 800b8ee:	2c01      	cmp	r4, #1
 800b8f0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8f4:	ee06 3a90 	vmov	s13, r3
 800b8f8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b8fc:	d06e      	beq.n	800b9dc <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800b8fe:	2c02      	cmp	r4, #2
 800b900:	d05e      	beq.n	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800b902:	2c00      	cmp	r4, #0
 800b904:	d16a      	bne.n	800b9dc <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b906:	680b      	ldr	r3, [r1, #0]
 800b908:	069b      	lsls	r3, r3, #26
 800b90a:	d547      	bpl.n	800b99c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b90c:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b90e:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b910:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b914:	4a3b      	ldr	r2, [pc, #236]	@ (800ba04 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b916:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b91a:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b91c:	ee07 2a90 	vmov	s15, r2
 800b920:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b924:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b928:	ee07 3a10 	vmov	s14, r3
 800b92c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b930:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b934:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b938:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b93c:	4a30      	ldr	r2, [pc, #192]	@ (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800b93e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b940:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b944:	ee07 3a10 	vmov	s14, r3
 800b948:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b94c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b950:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b954:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b958:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b95c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b95e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b962:	ee07 3a10 	vmov	s14, r3
 800b966:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b96a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b96e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b972:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b976:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b97a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b97c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b980:	ee06 3a90 	vmov	s13, r3
 800b984:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b988:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b98c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b990:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b994:	ee17 3a90 	vmov	r3, s15
 800b998:	6083      	str	r3, [r0, #8]
}
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b99c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b99e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800b9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9b2:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9b6:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b9ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b9be:	e7bd      	b.n	800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9c0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b9c2:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800ba0c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800b9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ca:	ee07 3a90 	vmov	s15, r3
 800b9ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b9da:	e7ec      	b.n	800b9b6 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9dc:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b9de:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800ba10 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800b9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b9f6:	e7de      	b.n	800b9b6 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b9f8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b9fc:	e7cc      	b.n	800b998 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800b9fe:	bf00      	nop
 800ba00:	58024400 	.word	0x58024400
 800ba04:	03d09000 	.word	0x03d09000
 800ba08:	4c742400 	.word	0x4c742400
 800ba0c:	4bbebc20 	.word	0x4bbebc20
 800ba10:	4a742400 	.word	0x4a742400

0800ba14 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba14:	494f      	ldr	r1, [pc, #316]	@ (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800ba16:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba18:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ba1a:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ba1c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800ba1e:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ba22:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ba26:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800ba28:	f000 8090 	beq.w	800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba2c:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ba30:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ba34:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba38:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ba40:	4353      	muls	r3, r2
    switch (pllsource)
 800ba42:	2c01      	cmp	r4, #1
 800ba44:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba48:	ee06 3a90 	vmov	s13, r3
 800ba4c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800ba50:	d06e      	beq.n	800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800ba52:	2c02      	cmp	r4, #2
 800ba54:	d05e      	beq.n	800bb14 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800ba56:	2c00      	cmp	r4, #0
 800ba58:	d16a      	bne.n	800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba5a:	680b      	ldr	r3, [r1, #0]
 800ba5c:	069b      	lsls	r3, r3, #26
 800ba5e:	d547      	bpl.n	800baf0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba60:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba64:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800ba68:	4a3b      	ldr	r2, [pc, #236]	@ (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba6e:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba70:	ee07 2a90 	vmov	s15, r2
 800ba74:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800ba78:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800ba7c:	ee07 3a10 	vmov	s14, r3
 800ba80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba84:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ba88:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ba8c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ba90:	4a30      	ldr	r2, [pc, #192]	@ (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800ba92:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800ba94:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ba98:	ee07 3a10 	vmov	s14, r3
 800ba9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800baa0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800baa4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800baa8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800baac:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bab0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800bab2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bab6:	ee07 3a10 	vmov	s14, r3
 800baba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800babe:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bac2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bac6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800baca:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bace:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800bad0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bad4:	ee06 3a90 	vmov	s13, r3
 800bad8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800badc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bae0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bae4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800bae8:	ee17 3a90 	vmov	r3, s15
 800baec:	6083      	str	r3, [r0, #8]
}
 800baee:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800baf0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800baf2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800baf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bafa:	ee07 3a90 	vmov	s15, r3
 800bafe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb06:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb0a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800bb0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800bb12:	e7bd      	b.n	800ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb14:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb16:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800bb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb1e:	ee07 3a90 	vmov	s15, r3
 800bb22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb2a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bb2e:	e7ec      	b.n	800bb0a <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb30:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb32:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800bb64 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800bb36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb3a:	ee07 3a90 	vmov	s15, r3
 800bb3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb46:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bb4a:	e7de      	b.n	800bb0a <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb4c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb50:	e7cc      	b.n	800baec <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800bb52:	bf00      	nop
 800bb54:	58024400 	.word	0x58024400
 800bb58:	03d09000 	.word	0x03d09000
 800bb5c:	4c742400 	.word	0x4c742400
 800bb60:	4bbebc20 	.word	0x4bbebc20
 800bb64:	4a742400 	.word	0x4a742400

0800bb68 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb68:	494f      	ldr	r1, [pc, #316]	@ (800bca8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800bb6a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb6c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bb6e:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb70:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll1m != 0U)
 800bb72:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bb76:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb7a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 800bb7c:	f000 8090 	beq.w	800bca0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb80:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb84:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb88:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb8c:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb94:	4353      	muls	r3, r2
    switch (pllsource)
 800bb96:	2c01      	cmp	r4, #1
 800bb98:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb9c:	ee06 3a90 	vmov	s13, r3
 800bba0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800bba4:	d04e      	beq.n	800bc44 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800bba6:	2c02      	cmp	r4, #2
 800bba8:	d05e      	beq.n	800bc68 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 800bbaa:	2c00      	cmp	r4, #0
 800bbac:	d16a      	bne.n	800bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbae:	680b      	ldr	r3, [r1, #0]
 800bbb0:	069b      	lsls	r3, r3, #26
 800bbb2:	d567      	bpl.n	800bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbb4:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbb6:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbb8:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800bbbc:	4a3b      	ldr	r2, [pc, #236]	@ (800bcac <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbc2:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbc4:	ee07 2a90 	vmov	s15, r2
 800bbc8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800bbcc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800bbd0:	ee07 3a10 	vmov	s14, r3
 800bbd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bbd8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bbdc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bbe0:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bbe4:	4a30      	ldr	r2, [pc, #192]	@ (800bca8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800bbe6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800bbe8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bbec:	ee07 3a10 	vmov	s14, r3
 800bbf0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bbf4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bbf8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bbfc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800bc00:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bc04:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800bc06:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bc0a:	ee07 3a10 	vmov	s14, r3
 800bc0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc12:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bc16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bc1a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800bc1e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bc22:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800bc24:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bc28:	ee06 3a90 	vmov	s13, r3
 800bc2c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bc30:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bc34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bc38:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800bc3c:	ee17 3a90 	vmov	r3, s15
 800bc40:	6083      	str	r3, [r0, #8]
}
 800bc42:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc44:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800bc46:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800bc4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc5a:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc5e:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800bc62:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800bc66:	e7bd      	b.n	800bbe4 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc68:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800bc6a:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800bcb4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800bc6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc72:	ee07 3a90 	vmov	s15, r3
 800bc76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc7e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bc82:	e7ec      	b.n	800bc5e <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc84:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800bc86:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800bcb8 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800bc8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc9a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bc9e:	e7de      	b.n	800bc5e <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bca0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bca4:	e7cc      	b.n	800bc40 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800bca6:	bf00      	nop
 800bca8:	58024400 	.word	0x58024400
 800bcac:	03d09000 	.word	0x03d09000
 800bcb0:	4a742400 	.word	0x4a742400
 800bcb4:	4bbebc20 	.word	0x4bbebc20
 800bcb8:	4c742400 	.word	0x4c742400

0800bcbc <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800bcbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bcbe:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800bcc2:	430b      	orrs	r3, r1
 800bcc4:	d115      	bne.n	800bcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bcc6:	4b9d      	ldr	r3, [pc, #628]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bcc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcca:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 800bcce:	2a04      	cmp	r2, #4
 800bcd0:	d82d      	bhi.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800bcd2:	e8df f012 	tbh	[pc, r2, lsl #1]
 800bcd6:	001c      	.short	0x001c
 800bcd8:	000500e1 	.word	0x000500e1
 800bcdc:	00410151 	.word	0x00410151
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bce0:	6818      	ldr	r0, [r3, #0]
 800bce2:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800bce6:	f000 80df 	beq.w	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcea:	a801      	add	r0, sp, #4
 800bcec:	f7ff fe92 	bl	800ba14 <HAL_RCCEx_GetPLL3ClockFreq>
 800bcf0:	e0d9      	b.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bcf2:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 800bcf6:	430b      	orrs	r3, r1
 800bcf8:	d11b      	bne.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bcfa:	4b90      	ldr	r3, [pc, #576]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bcfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcfe:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 800bd02:	2a80      	cmp	r2, #128	@ 0x80
 800bd04:	d0ec      	beq.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800bd06:	d80c      	bhi.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
    switch (srcclk)
 800bd08:	2a00      	cmp	r2, #0
 800bd0a:	f040 80c5 	bne.w	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800bd14:	f000 80c8 	beq.w	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd18:	a801      	add	r0, sp, #4
 800bd1a:	f7ff ff25 	bl	800bb68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd1e:	9802      	ldr	r0, [sp, #8]
 800bd20:	e0c2      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
    switch (saiclocksource)
 800bd22:	2ac0      	cmp	r2, #192	@ 0xc0
 800bd24:	f000 8128 	beq.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800bd28:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 800bd2c:	d014      	beq.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = 0;
 800bd2e:	2000      	movs	r0, #0
 800bd30:	e0ba      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bd32:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800bd36:	430b      	orrs	r3, r1
 800bd38:	d12e      	bne.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bd3a:	4b80      	ldr	r3, [pc, #512]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bd3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd3e:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 800bd42:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800bd46:	d0cb      	beq.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800bd48:	d9de      	bls.n	800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800bd4a:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 800bd4e:	f000 8113 	beq.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800bd52:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800bd56:	e7e9      	b.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd5a:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd5c:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd60:	0748      	lsls	r0, r1, #29
 800bd62:	d506      	bpl.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800bd64:	b92a      	cbnz	r2, 800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd66:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd68:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bd6c:	4874      	ldr	r0, [pc, #464]	@ (800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800bd6e:	40d8      	lsrs	r0, r3
 800bd70:	e09a      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd72:	4b72      	ldr	r3, [pc, #456]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bd74:	6819      	ldr	r1, [r3, #0]
 800bd76:	05c9      	lsls	r1, r1, #23
 800bd78:	d503      	bpl.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800bd7a:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 800bd7e:	f000 80fd 	beq.w	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd82:	6818      	ldr	r0, [r3, #0]
 800bd84:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800bd88:	f000 808e 	beq.w	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = 0;
 800bd8c:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800bd90:	486c      	ldr	r0, [pc, #432]	@ (800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd92:	bf18      	it	ne
 800bd94:	2000      	movne	r0, #0
 800bd96:	e087      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bd98:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	d11f      	bne.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bda0:	4b66      	ldr	r3, [pc, #408]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bda2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bda4:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 800bda8:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800bdac:	d098      	beq.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800bdae:	d9ab      	bls.n	800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800bdb0:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 800bdb4:	f000 80e0 	beq.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800bdb8:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 800bdbc:	d1b7      	bne.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdc0:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdc2:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdc6:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdc8:	0748      	lsls	r0, r1, #29
 800bdca:	d501      	bpl.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	d0cb      	beq.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdd0:	05d9      	lsls	r1, r3, #23
 800bdd2:	d503      	bpl.n	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800bdd4:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 800bdd8:	f000 80d0 	beq.w	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bddc:	4b57      	ldr	r3, [pc, #348]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bdde:	e7d0      	b.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bde0:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800bde4:	430b      	orrs	r3, r1
 800bde6:	d10f      	bne.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bde8:	4b54      	ldr	r3, [pc, #336]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bdea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bdec:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 800bdf0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800bdf4:	f43f af74 	beq.w	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800bdf8:	d986      	bls.n	800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800bdfa:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800bdfe:	f000 80bb 	beq.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800be02:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800be06:	e7d9      	b.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800be08:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 800be0c:	430b      	orrs	r3, r1
 800be0e:	d132      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800be10:	4a4a      	ldr	r2, [pc, #296]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800be12:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800be14:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800be18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be1c:	f000 8081 	beq.w	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800be20:	d80d      	bhi.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800be22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be26:	d016      	beq.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800be28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be2c:	d01b      	beq.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f47f af7d 	bne.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 800be34:	b005      	add	sp, #20
 800be36:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800be3a:	f7fe beeb 	b.w	800ac14 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 800be3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be42:	d074      	beq.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800be44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 800be48:	f47f af71 	bne.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800be4c:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 800be4e:	4b3d      	ldr	r3, [pc, #244]	@ (800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be50:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800be54:	e06f      	b.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be56:	6810      	ldr	r0, [r2, #0]
 800be58:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800be5c:	d024      	beq.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be5e:	a801      	add	r0, sp, #4
 800be60:	f7ff fd2e 	bl	800b8c0 <HAL_RCCEx_GetPLL2ClockFreq>
 800be64:	e75b      	b.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be66:	6810      	ldr	r0, [r2, #0]
 800be68:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800be6c:	d01c      	beq.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be6e:	a801      	add	r0, sp, #4
 800be70:	f7ff fdd0 	bl	800ba14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be74:	e753      	b.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800be76:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800be7a:	430b      	orrs	r3, r1
 800be7c:	d120      	bne.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800be7e:	4b2f      	ldr	r3, [pc, #188]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800be80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be82:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 800be86:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800be8a:	d010      	beq.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 800be8c:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800be90:	d095      	beq.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 800be92:	2a00      	cmp	r2, #0
 800be94:	f47f af4b 	bne.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800be9e:	d003      	beq.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bea0:	a801      	add	r0, sp, #4
 800bea2:	f7ff fd0d 	bl	800b8c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bea6:	9801      	ldr	r0, [sp, #4]
}
 800bea8:	b005      	add	sp, #20
 800beaa:	f85d fb04 	ldr.w	pc, [sp], #4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800beae:	6818      	ldr	r0, [r3, #0]
 800beb0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800beb4:	d0f8      	beq.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beb6:	a801      	add	r0, sp, #4
 800beb8:	f7ff fdac 	bl	800ba14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bebc:	9803      	ldr	r0, [sp, #12]
 800bebe:	e7f3      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bec0:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800bec4:	430b      	orrs	r3, r1
 800bec6:	d10c      	bne.n	800bee2 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bec8:	4b1c      	ldr	r3, [pc, #112]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800beca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 800becc:	03d2      	lsls	r2, r2, #15
 800bece:	f57f af1e 	bpl.w	800bd0e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bed2:	6818      	ldr	r0, [r3, #0]
 800bed4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800bed8:	d0e6      	beq.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beda:	a801      	add	r0, sp, #4
 800bedc:	f7ff fcf0 	bl	800b8c0 <HAL_RCCEx_GetPLL2ClockFreq>
 800bee0:	e7ec      	b.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bee2:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800bee6:	430b      	orrs	r3, r1
 800bee8:	d130      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x290>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800beea:	4a14      	ldr	r2, [pc, #80]	@ (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800beec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800beee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800bef2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bef6:	d014      	beq.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800bef8:	d80d      	bhi.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800befa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800befe:	d0aa      	beq.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800bf00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf04:	d0af      	beq.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f47f af11 	bne.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 800bf0c:	b005      	add	sp, #20
 800bf0e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bf12:	f7ff bcc3 	b.w	800b89c <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
 800bf16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf1a:	d008      	beq.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bf1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf20:	e792      	b.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bf22:	6810      	ldr	r0, [r2, #0]
 800bf24:	f010 0004 	ands.w	r0, r0, #4
 800bf28:	d0be      	beq.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf2a:	6813      	ldr	r3, [r2, #0]
 800bf2c:	e71c      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bf2e:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 800bf30:	4b05      	ldr	r3, [pc, #20]	@ (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bf32:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 800bf36:	bf18      	it	ne
 800bf38:	4618      	movne	r0, r3
 800bf3a:	e7b5      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 800bf3c:	58024400 	.word	0x58024400
 800bf40:	03d09000 	.word	0x03d09000
 800bf44:	017d7840 	.word	0x017d7840
 800bf48:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bf4c:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800bf50:	4308      	orrs	r0, r1
 800bf52:	f47f aeec 	bne.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bf56:	4a0a      	ldr	r2, [pc, #40]	@ (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800bf58:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bf5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 800bf5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf62:	d007      	beq.n	800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800bf64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf68:	f43f af75 	beq.w	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f47f aede 	bne.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800bf72:	e76b      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf74:	6810      	ldr	r0, [r2, #0]
 800bf76:	e6cb      	b.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf78:	4802      	ldr	r0, [pc, #8]	@ (800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800bf7a:	e795      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = CSI_VALUE;
 800bf7c:	4802      	ldr	r0, [pc, #8]	@ (800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf7e:	e793      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 800bf80:	58024400 	.word	0x58024400
 800bf84:	00bb8000 	.word	0x00bb8000
 800bf88:	003d0900 	.word	0x003d0900

0800bf8c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bf90:	4604      	mov	r4, r0
 800bf92:	b1f0      	cbz	r0, 800bfd2 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bf94:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800bf98:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bf9c:	b91b      	cbnz	r3, 800bfa6 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bf9e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bfa2:	f7f5 fa83 	bl	80014ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bfa6:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bfa8:	1d21      	adds	r1, r4, #4
 800bfaa:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bfac:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bfb0:	f000 f9fd 	bl	800c3ae <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bfb4:	6862      	ldr	r2, [r4, #4]
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	6820      	ldr	r0, [r4, #0]
 800bfba:	f000 fa2e 	bl	800c41a <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800bfbe:	4a06      	ldr	r2, [pc, #24]	@ (800bfd8 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800bfc0:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800bfc2:	6813      	ldr	r3, [r2, #0]
 800bfc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bfc8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800bfd0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	e7fc      	b.n	800bfd0 <HAL_SDRAM_Init+0x44>
 800bfd6:	bf00      	nop
 800bfd8:	52004000 	.word	0x52004000

0800bfdc <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800bfdc:	b510      	push	{r4, lr}
 800bfde:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800bfe0:	f7f5 fafe 	bl	80015e0 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800bfe4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bfe8:	f000 fa4d 	bl	800c486 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800bfec:	2000      	movs	r0, #0
 800bfee:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800bff2:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800bff6:	bd10      	pop	{r4, pc}

0800bff8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800bff8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800bffa:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800bffe:	4605      	mov	r5, r0
 800c000:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c002:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c004:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c006:	d010      	beq.n	800c02a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c008:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800c00c:	2c01      	cmp	r4, #1
 800c00e:	d110      	bne.n	800c032 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c010:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c012:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c014:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c018:	f000 fa44 	bl	800c4a4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c01c:	6833      	ldr	r3, [r6, #0]
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d104      	bne.n	800c02c <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c022:	2305      	movs	r3, #5
 800c024:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c028:	2000      	movs	r0, #0
}
 800c02a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c02c:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800c030:	e7fa      	b.n	800c028 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c032:	2001      	movs	r0, #1
 800c034:	e7f9      	b.n	800c02a <HAL_SDRAM_SendCommand+0x32>

0800c036 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c036:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c038:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c03c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c03e:	2b02      	cmp	r3, #2
 800c040:	b2d8      	uxtb	r0, r3
 800c042:	d00d      	beq.n	800c060 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c044:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c048:	2b01      	cmp	r3, #1
 800c04a:	b2dd      	uxtb	r5, r3
 800c04c:	d109      	bne.n	800c062 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c04e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c050:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c052:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c056:	f000 fa37 	bl	800c4c8 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c05a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c05c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800c060:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c062:	2001      	movs	r0, #1
 800c064:	e7fc      	b.n	800c060 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800c066 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c066:	4770      	bx	lr

0800c068 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c068:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d12f      	bne.n	800c0d0 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c070:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c072:	4a18      	ldr	r2, [pc, #96]	@ (800c0d4 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c074:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c078:	6803      	ldr	r3, [r0, #0]
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d01a      	beq.n	800c0b4 <HAL_TIM_Base_Start+0x4c>
 800c07e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c082:	d017      	beq.n	800c0b4 <HAL_TIM_Base_Start+0x4c>
 800c084:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c088:	4293      	cmp	r3, r2
 800c08a:	d013      	beq.n	800c0b4 <HAL_TIM_Base_Start+0x4c>
 800c08c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c090:	4293      	cmp	r3, r2
 800c092:	d00f      	beq.n	800c0b4 <HAL_TIM_Base_Start+0x4c>
 800c094:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c098:	4293      	cmp	r3, r2
 800c09a:	d00b      	beq.n	800c0b4 <HAL_TIM_Base_Start+0x4c>
 800c09c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d007      	beq.n	800c0b4 <HAL_TIM_Base_Start+0x4c>
 800c0a4:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d003      	beq.n	800c0b4 <HAL_TIM_Base_Start+0x4c>
 800c0ac:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d107      	bne.n	800c0c4 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0b4:	6899      	ldr	r1, [r3, #8]
 800c0b6:	4a08      	ldr	r2, [pc, #32]	@ (800c0d8 <HAL_TIM_Base_Start+0x70>)
 800c0b8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ba:	2a06      	cmp	r2, #6
 800c0bc:	d006      	beq.n	800c0cc <HAL_TIM_Base_Start+0x64>
 800c0be:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c0c2:	d003      	beq.n	800c0cc <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	f042 0201 	orr.w	r2, r2, #1
 800c0ca:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	4770      	bx	lr
    return HAL_ERROR;
 800c0d0:	2001      	movs	r0, #1
}
 800c0d2:	4770      	bx	lr
 800c0d4:	40010000 	.word	0x40010000
 800c0d8:	00010007 	.word	0x00010007

0800c0dc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0dc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d133      	bne.n	800c14c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0ea:	6803      	ldr	r3, [r0, #0]
 800c0ec:	68da      	ldr	r2, [r3, #12]
 800c0ee:	f042 0201 	orr.w	r2, r2, #1
 800c0f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0f4:	4a16      	ldr	r2, [pc, #88]	@ (800c150 <HAL_TIM_Base_Start_IT+0x74>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d01a      	beq.n	800c130 <HAL_TIM_Base_Start_IT+0x54>
 800c0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0fe:	d017      	beq.n	800c130 <HAL_TIM_Base_Start_IT+0x54>
 800c100:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c104:	4293      	cmp	r3, r2
 800c106:	d013      	beq.n	800c130 <HAL_TIM_Base_Start_IT+0x54>
 800c108:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d00f      	beq.n	800c130 <HAL_TIM_Base_Start_IT+0x54>
 800c110:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c114:	4293      	cmp	r3, r2
 800c116:	d00b      	beq.n	800c130 <HAL_TIM_Base_Start_IT+0x54>
 800c118:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d007      	beq.n	800c130 <HAL_TIM_Base_Start_IT+0x54>
 800c120:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c124:	4293      	cmp	r3, r2
 800c126:	d003      	beq.n	800c130 <HAL_TIM_Base_Start_IT+0x54>
 800c128:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d107      	bne.n	800c140 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c130:	6899      	ldr	r1, [r3, #8]
 800c132:	4a08      	ldr	r2, [pc, #32]	@ (800c154 <HAL_TIM_Base_Start_IT+0x78>)
 800c134:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c136:	2a06      	cmp	r2, #6
 800c138:	d006      	beq.n	800c148 <HAL_TIM_Base_Start_IT+0x6c>
 800c13a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c13e:	d003      	beq.n	800c148 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	f042 0201 	orr.w	r2, r2, #1
 800c146:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c148:	2000      	movs	r0, #0
 800c14a:	4770      	bx	lr
    return HAL_ERROR;
 800c14c:	2001      	movs	r0, #1
}
 800c14e:	4770      	bx	lr
 800c150:	40010000 	.word	0x40010000
 800c154:	00010007 	.word	0x00010007

0800c158 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c158:	4770      	bx	lr

0800c15a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c15a:	4770      	bx	lr

0800c15c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c15c:	4770      	bx	lr

0800c15e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c15e:	4770      	bx	lr

0800c160 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800c160:	6803      	ldr	r3, [r0, #0]
{
 800c162:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800c164:	68dd      	ldr	r5, [r3, #12]
{
 800c166:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800c168:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c16a:	07b2      	lsls	r2, r6, #30
 800c16c:	d50d      	bpl.n	800c18a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c16e:	07a9      	lsls	r1, r5, #30
 800c170:	d50b      	bpl.n	800c18a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c172:	f06f 0202 	mvn.w	r2, #2
 800c176:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c178:	2201      	movs	r2, #1
 800c17a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	079a      	lsls	r2, r3, #30
 800c180:	d075      	beq.n	800c26e <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c182:	f7ff ffea 	bl	800c15a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c186:	2300      	movs	r3, #0
 800c188:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c18a:	0773      	lsls	r3, r6, #29
 800c18c:	d510      	bpl.n	800c1b0 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c18e:	0768      	lsls	r0, r5, #29
 800c190:	d50e      	bpl.n	800c1b0 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c198:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c19a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c19c:	2202      	movs	r2, #2
 800c19e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1a0:	699b      	ldr	r3, [r3, #24]
 800c1a2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c1a6:	d068      	beq.n	800c27a <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c1a8:	f7ff ffd7 	bl	800c15a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c1b0:	0731      	lsls	r1, r6, #28
 800c1b2:	d50f      	bpl.n	800c1d4 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c1b4:	072a      	lsls	r2, r5, #28
 800c1b6:	d50d      	bpl.n	800c1d4 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c1be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c1c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1c2:	2204      	movs	r2, #4
 800c1c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1c6:	69db      	ldr	r3, [r3, #28]
 800c1c8:	079b      	lsls	r3, r3, #30
 800c1ca:	d05c      	beq.n	800c286 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800c1cc:	f7ff ffc5 	bl	800c15a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c1d4:	06f1      	lsls	r1, r6, #27
 800c1d6:	d510      	bpl.n	800c1fa <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c1d8:	06ea      	lsls	r2, r5, #27
 800c1da:	d50e      	bpl.n	800c1fa <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c1e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c1e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1e6:	2208      	movs	r2, #8
 800c1e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1ea:	69db      	ldr	r3, [r3, #28]
 800c1ec:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c1f0:	d04f      	beq.n	800c292 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800c1f2:	f7ff ffb2 	bl	800c15a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c1fa:	07f3      	lsls	r3, r6, #31
 800c1fc:	d508      	bpl.n	800c210 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c1fe:	07e8      	lsls	r0, r5, #31
 800c200:	d506      	bpl.n	800c210 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c202:	6823      	ldr	r3, [r4, #0]
 800c204:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c208:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c20a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c20c:	f7f4 fed0 	bl	8000fb0 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c210:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800c214:	d008      	beq.n	800c228 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c216:	0629      	lsls	r1, r5, #24
 800c218:	d506      	bpl.n	800c228 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800c220:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c222:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c224:	f000 f8c1 	bl	800c3aa <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c228:	05f2      	lsls	r2, r6, #23
 800c22a:	d508      	bpl.n	800c23e <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c22c:	062b      	lsls	r3, r5, #24
 800c22e:	d506      	bpl.n	800c23e <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c236:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c238:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c23a:	f000 f8b7 	bl	800c3ac <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c23e:	0670      	lsls	r0, r6, #25
 800c240:	d508      	bpl.n	800c254 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c242:	0669      	lsls	r1, r5, #25
 800c244:	d506      	bpl.n	800c254 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800c24c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c24e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c250:	f7ff ff85 	bl	800c15e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c254:	06b2      	lsls	r2, r6, #26
 800c256:	d522      	bpl.n	800c29e <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c258:	06ab      	lsls	r3, r5, #26
 800c25a:	d520      	bpl.n	800c29e <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c262:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c264:	611a      	str	r2, [r3, #16]
}
 800c266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c26a:	f000 b89d 	b.w	800c3a8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c26e:	f7ff ff73 	bl	800c158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c272:	4620      	mov	r0, r4
 800c274:	f7ff ff72 	bl	800c15c <HAL_TIM_PWM_PulseFinishedCallback>
 800c278:	e785      	b.n	800c186 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c27a:	f7ff ff6d 	bl	800c158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c27e:	4620      	mov	r0, r4
 800c280:	f7ff ff6c 	bl	800c15c <HAL_TIM_PWM_PulseFinishedCallback>
 800c284:	e792      	b.n	800c1ac <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c286:	f7ff ff67 	bl	800c158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c28a:	4620      	mov	r0, r4
 800c28c:	f7ff ff66 	bl	800c15c <HAL_TIM_PWM_PulseFinishedCallback>
 800c290:	e79e      	b.n	800c1d0 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c292:	f7ff ff61 	bl	800c158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c296:	4620      	mov	r0, r4
 800c298:	f7ff ff60 	bl	800c15c <HAL_TIM_PWM_PulseFinishedCallback>
 800c29c:	e7ab      	b.n	800c1f6 <HAL_TIM_IRQHandler+0x96>
}
 800c29e:	bd70      	pop	{r4, r5, r6, pc}

0800c2a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2a0:	4a27      	ldr	r2, [pc, #156]	@ (800c340 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800c2a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2a4:	4290      	cmp	r0, r2
 800c2a6:	d012      	beq.n	800c2ce <TIM_Base_SetConfig+0x2e>
 800c2a8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c2ac:	d00f      	beq.n	800c2ce <TIM_Base_SetConfig+0x2e>
 800c2ae:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c2b2:	4290      	cmp	r0, r2
 800c2b4:	d00b      	beq.n	800c2ce <TIM_Base_SetConfig+0x2e>
 800c2b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2ba:	4290      	cmp	r0, r2
 800c2bc:	d007      	beq.n	800c2ce <TIM_Base_SetConfig+0x2e>
 800c2be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2c2:	4290      	cmp	r0, r2
 800c2c4:	d003      	beq.n	800c2ce <TIM_Base_SetConfig+0x2e>
 800c2c6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c2ca:	4290      	cmp	r0, r2
 800c2cc:	d108      	bne.n	800c2e0 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c2d2:	684a      	ldr	r2, [r1, #4]
 800c2d4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2da:	68ca      	ldr	r2, [r1, #12]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	e00a      	b.n	800c2f6 <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2e0:	4a18      	ldr	r2, [pc, #96]	@ (800c344 <TIM_Base_SetConfig+0xa4>)
 800c2e2:	4290      	cmp	r0, r2
 800c2e4:	d0f7      	beq.n	800c2d6 <TIM_Base_SetConfig+0x36>
 800c2e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2ea:	4290      	cmp	r0, r2
 800c2ec:	d0f3      	beq.n	800c2d6 <TIM_Base_SetConfig+0x36>
 800c2ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2f2:	4290      	cmp	r0, r2
 800c2f4:	d0ef      	beq.n	800c2d6 <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2f6:	694a      	ldr	r2, [r1, #20]
 800c2f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2fc:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2fe:	688a      	ldr	r2, [r1, #8]
 800c300:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c302:	680a      	ldr	r2, [r1, #0]
 800c304:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c306:	4a0e      	ldr	r2, [pc, #56]	@ (800c340 <TIM_Base_SetConfig+0xa0>)
 800c308:	4290      	cmp	r0, r2
 800c30a:	d00f      	beq.n	800c32c <TIM_Base_SetConfig+0x8c>
 800c30c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c310:	4290      	cmp	r0, r2
 800c312:	d00b      	beq.n	800c32c <TIM_Base_SetConfig+0x8c>
 800c314:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800c318:	4290      	cmp	r0, r2
 800c31a:	d007      	beq.n	800c32c <TIM_Base_SetConfig+0x8c>
 800c31c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c320:	4290      	cmp	r0, r2
 800c322:	d003      	beq.n	800c32c <TIM_Base_SetConfig+0x8c>
 800c324:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c328:	4290      	cmp	r0, r2
 800c32a:	d101      	bne.n	800c330 <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c32c:	690a      	ldr	r2, [r1, #16]
 800c32e:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c330:	6802      	ldr	r2, [r0, #0]
 800c332:	f042 0204 	orr.w	r2, r2, #4
 800c336:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c338:	2201      	movs	r2, #1
 800c33a:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800c33c:	6003      	str	r3, [r0, #0]
}
 800c33e:	4770      	bx	lr
 800c340:	40010000 	.word	0x40010000
 800c344:	40014000 	.word	0x40014000

0800c348 <HAL_TIM_Base_Init>:
{
 800c348:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c34a:	4604      	mov	r4, r0
 800c34c:	b350      	cbz	r0, 800c3a4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c34e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c352:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c356:	b91b      	cbnz	r3, 800c360 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c358:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c35c:	f7ff fe83 	bl	800c066 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c360:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c362:	6820      	ldr	r0, [r4, #0]
 800c364:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c366:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c36a:	f7ff ff99 	bl	800c2a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c36e:	2301      	movs	r3, #1
  return HAL_OK;
 800c370:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c372:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c376:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c37a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c37e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c382:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c386:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c38a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c38e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c392:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c396:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c39a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c39e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800c3a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c3a4:	2001      	movs	r0, #1
 800c3a6:	e7fc      	b.n	800c3a2 <HAL_TIM_Base_Init+0x5a>

0800c3a8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800c3a8:	4770      	bx	lr

0800c3aa <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800c3aa:	4770      	bx	lr

0800c3ac <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800c3ac:	4770      	bx	lr

0800c3ae <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800c3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c3b2:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800c3b6:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800c3ba:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800c3be:	ea43 0308 	orr.w	r3, r3, r8
 800c3c2:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800c3c6:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c3ca:	6809      	ldr	r1, [r1, #0]
 800c3cc:	b981      	cbnz	r1, 800c3f0 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c3ce:	ea43 030e 	orr.w	r3, r3, lr
 800c3d2:	6801      	ldr	r1, [r0, #0]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	f36f 010e 	bfc	r1, #0, #15
 800c3da:	ea43 030c 	orr.w	r3, r3, ip
 800c3de:	433b      	orrs	r3, r7
 800c3e0:	4333      	orrs	r3, r6
 800c3e2:	432b      	orrs	r3, r5
 800c3e4:	4323      	orrs	r3, r4
 800c3e6:	430b      	orrs	r3, r1
 800c3e8:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c3f0:	6801      	ldr	r1, [r0, #0]
 800c3f2:	ea43 030e 	orr.w	r3, r3, lr
 800c3f6:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800c3fa:	430b      	orrs	r3, r1
 800c3fc:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c3fe:	ea42 030c 	orr.w	r3, r2, ip
 800c402:	6841      	ldr	r1, [r0, #4]
 800c404:	433b      	orrs	r3, r7
 800c406:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800c40a:	4333      	orrs	r3, r6
 800c40c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800c410:	432b      	orrs	r3, r5
 800c412:	4323      	orrs	r3, r4
 800c414:	4313      	orrs	r3, r2
 800c416:	6043      	str	r3, [r0, #4]
 800c418:	e7e7      	b.n	800c3ea <FMC_SDRAM_Init+0x3c>

0800c41a <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c41a:	68cb      	ldr	r3, [r1, #12]
 800c41c:	f103 3cff 	add.w	ip, r3, #4294967295
 800c420:	694b      	ldr	r3, [r1, #20]
{
 800c422:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c424:	3b01      	subs	r3, #1
 800c426:	684c      	ldr	r4, [r1, #4]
 800c428:	688f      	ldr	r7, [r1, #8]
 800c42a:	690e      	ldr	r6, [r1, #16]
 800c42c:	051b      	lsls	r3, r3, #20
 800c42e:	698d      	ldr	r5, [r1, #24]
 800c430:	3c01      	subs	r4, #1
 800c432:	3f01      	subs	r7, #1
 800c434:	3e01      	subs	r6, #1
 800c436:	3d01      	subs	r5, #1
 800c438:	6809      	ldr	r1, [r1, #0]
 800c43a:	0124      	lsls	r4, r4, #4
 800c43c:	023f      	lsls	r7, r7, #8
 800c43e:	3901      	subs	r1, #1
 800c440:	0436      	lsls	r6, r6, #16
 800c442:	062d      	lsls	r5, r5, #24
 800c444:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800c448:	b95a      	cbnz	r2, 800c462 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c44a:	430b      	orrs	r3, r1
 800c44c:	6882      	ldr	r2, [r0, #8]
 800c44e:	4323      	orrs	r3, r4
 800c450:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c454:	433b      	orrs	r3, r7
 800c456:	4333      	orrs	r3, r6
 800c458:	432b      	orrs	r3, r5
 800c45a:	4313      	orrs	r3, r2
 800c45c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800c45e:	2000      	movs	r0, #0
 800c460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c462:	6882      	ldr	r2, [r0, #8]
 800c464:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800c468:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800c46c:	4313      	orrs	r3, r2
 800c46e:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c470:	ea44 0307 	orr.w	r3, r4, r7
 800c474:	68c2      	ldr	r2, [r0, #12]
 800c476:	430b      	orrs	r3, r1
 800c478:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c47c:	4333      	orrs	r3, r6
 800c47e:	432b      	orrs	r3, r5
 800c480:	4313      	orrs	r3, r2
 800c482:	60c3      	str	r3, [r0, #12]
 800c484:	e7eb      	b.n	800c45e <FMC_SDRAM_Timing_Init+0x44>

0800c486 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800c486:	4603      	mov	r3, r0
 800c488:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800c48c:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800c490:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800c494:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800c496:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800c49a:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800c49c:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800c49e:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800c4a0:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800c4a2:	4770      	bx	lr

0800c4a4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c4a4:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c4a6:	e9d1 3400 	ldrd	r3, r4, [r1]
 800c4aa:	6902      	ldr	r2, [r0, #16]
 800c4ac:	4323      	orrs	r3, r4
 800c4ae:	68cc      	ldr	r4, [r1, #12]
 800c4b0:	f36f 0215 	bfc	r2, #0, #22
 800c4b4:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	688a      	ldr	r2, [r1, #8]
 800c4bc:	3a01      	subs	r2, #1
 800c4be:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c4c2:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	bd10      	pop	{r4, pc}

0800c4c8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c4c8:	6943      	ldr	r3, [r0, #20]
 800c4ca:	f36f 034d 	bfc	r3, #1, #13
 800c4ce:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800c4d2:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	4770      	bx	lr

0800c4d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c4d8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800c4da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c4de:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c4e0:	f001 fee0 	bl	800e2a4 <xTaskGetSchedulerState>
 800c4e4:	2801      	cmp	r0, #1
 800c4e6:	d003      	beq.n	800c4f0 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800c4e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800c4ec:	f000 bc4a 	b.w	800cd84 <xPortSysTickHandler>
}
 800c4f0:	bd08      	pop	{r3, pc}
	...

0800c4f4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4f4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c4f8:	b92b      	cbnz	r3, 800c506 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800c4fa:	4b06      	ldr	r3, [pc, #24]	@ (800c514 <osKernelInitialize+0x20>)
 800c4fc:	6818      	ldr	r0, [r3, #0]
 800c4fe:	b928      	cbnz	r0, 800c50c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c500:	2201      	movs	r2, #1
 800c502:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c504:	4770      	bx	lr
    stat = osErrorISR;
 800c506:	f06f 0005 	mvn.w	r0, #5
 800c50a:	4770      	bx	lr
    } else {
      stat = osError;
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	2400c4b0 	.word	0x2400c4b0

0800c518 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c518:	b510      	push	{r4, lr}
 800c51a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c51e:	b95c      	cbnz	r4, 800c538 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800c520:	4b08      	ldr	r3, [pc, #32]	@ (800c544 <osKernelStart+0x2c>)
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	2a01      	cmp	r2, #1
 800c526:	d10a      	bne.n	800c53e <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c528:	4a07      	ldr	r2, [pc, #28]	@ (800c548 <osKernelStart+0x30>)
 800c52a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c52c:	2202      	movs	r2, #2
 800c52e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c530:	f001 fd58 	bl	800dfe4 <vTaskStartScheduler>
      stat = osOK;
 800c534:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800c536:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c538:	f06f 0005 	mvn.w	r0, #5
 800c53c:	e7fb      	b.n	800c536 <osKernelStart+0x1e>
      stat = osError;
 800c53e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800c542:	e7f8      	b.n	800c536 <osKernelStart+0x1e>
 800c544:	2400c4b0 	.word	0x2400c4b0
 800c548:	e000ed00 	.word	0xe000ed00

0800c54c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c54e:	4614      	mov	r4, r2
 800c550:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c552:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c554:	460b      	mov	r3, r1
  hTask = NULL;
 800c556:	9205      	str	r2, [sp, #20]
 800c558:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c55c:	b9fa      	cbnz	r2, 800c59e <osThreadNew+0x52>
 800c55e:	b1f0      	cbz	r0, 800c59e <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c560:	b354      	cbz	r4, 800c5b8 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c562:	69a5      	ldr	r5, [r4, #24]
 800c564:	b125      	cbz	r5, 800c570 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c566:	1e69      	subs	r1, r5, #1
 800c568:	2937      	cmp	r1, #55	@ 0x37
 800c56a:	d902      	bls.n	800c572 <osThreadNew+0x26>
        return (NULL);
 800c56c:	2000      	movs	r0, #0
 800c56e:	e017      	b.n	800c5a0 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 800c570:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c572:	6862      	ldr	r2, [r4, #4]
 800c574:	07d2      	lsls	r2, r2, #31
 800c576:	d4f9      	bmi.n	800c56c <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800c578:	6966      	ldr	r6, [r4, #20]
 800c57a:	b19e      	cbz	r6, 800c5a4 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c57c:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800c57e:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c580:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 800c584:	b187      	cbz	r7, 800c5a8 <osThreadNew+0x5c>
 800c586:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800c58a:	d908      	bls.n	800c59e <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c58c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c58e:	b134      	cbz	r4, 800c59e <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c590:	b12e      	cbz	r6, 800c59e <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c592:	9500      	str	r5, [sp, #0]
 800c594:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800c598:	f001 fb89 	bl	800dcae <xTaskCreateStatic>
 800c59c:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c59e:	9805      	ldr	r0, [sp, #20]
}
 800c5a0:	b007      	add	sp, #28
 800c5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800c5a4:	2280      	movs	r2, #128	@ 0x80
 800c5a6:	e7ea      	b.n	800c57e <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c5a8:	f1bc 0f00 	cmp.w	ip, #0
 800c5ac:	d1f7      	bne.n	800c59e <osThreadNew+0x52>
 800c5ae:	6924      	ldr	r4, [r4, #16]
 800c5b0:	2c00      	cmp	r4, #0
 800c5b2:	d1f4      	bne.n	800c59e <osThreadNew+0x52>
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	e001      	b.n	800c5bc <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800c5b8:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800c5ba:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c5bc:	a905      	add	r1, sp, #20
 800c5be:	b292      	uxth	r2, r2
 800c5c0:	e9cd 5100 	strd	r5, r1, [sp]
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	f001 fbaa 	bl	800dd1e <xTaskCreate>
 800c5ca:	2801      	cmp	r0, #1
            hTask = NULL;
 800c5cc:	bf1c      	itt	ne
 800c5ce:	2300      	movne	r3, #0
 800c5d0:	9305      	strne	r3, [sp, #20]
 800c5d2:	e7e4      	b.n	800c59e <osThreadNew+0x52>

0800c5d4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800c5dc:	b117      	cbz	r7, 800c5e4 <osMutexNew+0x10>
  hMutex = NULL;
 800c5de:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (attr != NULL) {
 800c5e4:	b320      	cbz	r0, 800c630 <osMutexNew+0x5c>
      type = attr->attr_bits;
 800c5e6:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800c5e8:	0733      	lsls	r3, r6, #28
 800c5ea:	d4f8      	bmi.n	800c5de <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c5ec:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c5f0:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800c5f4:	b199      	cbz	r1, 800c61e <osMutexNew+0x4a>
 800c5f6:	2b4f      	cmp	r3, #79	@ 0x4f
 800c5f8:	d9f1      	bls.n	800c5de <osMutexNew+0xa>
          if (rmtx != 0U) {
 800c5fa:	b1be      	cbz	r6, 800c62c <osMutexNew+0x58>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c5fc:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c5fe:	f000 fec8 	bl	800d392 <xQueueCreateMutexStatic>
 800c602:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800c604:	2800      	cmp	r0, #0
 800c606:	d0ea      	beq.n	800c5de <osMutexNew+0xa>
          name = attr->name;
 800c608:	682d      	ldr	r5, [r5, #0]
 800c60a:	4637      	mov	r7, r6
        vQueueAddToRegistry (hMutex, name);
 800c60c:	4629      	mov	r1, r5
 800c60e:	4620      	mov	r0, r4
 800c610:	f001 f988 	bl	800d924 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c614:	2f00      	cmp	r7, #0
 800c616:	d0e3      	beq.n	800c5e0 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c618:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800c61c:	e7e0      	b.n	800c5e0 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1dd      	bne.n	800c5de <osMutexNew+0xa>
            if (rmtx != 0U) {
 800c622:	b12e      	cbz	r6, 800c630 <osMutexNew+0x5c>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c624:	2004      	movs	r0, #4
 800c626:	f000 fee8 	bl	800d3fa <xQueueCreateMutex>
 800c62a:	e7ea      	b.n	800c602 <osMutexNew+0x2e>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c62c:	2001      	movs	r0, #1
 800c62e:	e7e6      	b.n	800c5fe <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800c630:	2001      	movs	r0, #1
 800c632:	f000 fee2 	bl	800d3fa <xQueueCreateMutex>
      if (hMutex != NULL) {
 800c636:	4604      	mov	r4, r0
 800c638:	2800      	cmp	r0, #0
 800c63a:	d0d0      	beq.n	800c5de <osMutexNew+0xa>
        if (attr != NULL) {
 800c63c:	2d00      	cmp	r5, #0
 800c63e:	d0e5      	beq.n	800c60c <osMutexNew+0x38>
 800c640:	2600      	movs	r6, #0
 800c642:	e7e1      	b.n	800c608 <osMutexNew+0x34>

0800c644 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4603      	mov	r3, r0
 800c648:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c64a:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800c64e:	f003 0201 	and.w	r2, r3, #1
 800c652:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c656:	b995      	cbnz	r5, 800c67e <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d913      	bls.n	800c684 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c65c:	b162      	cbz	r2, 800c678 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c65e:	f001 f8f2 	bl	800d846 <xQueueTakeMutexRecursive>
 800c662:	2801      	cmp	r0, #1
 800c664:	d101      	bne.n	800c66a <osMutexAcquire+0x26>
  stat = osOK;
 800c666:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c668:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800c66a:	2c00      	cmp	r4, #0
 800c66c:	bf14      	ite	ne
 800c66e:	f06f 0001 	mvnne.w	r0, #1
 800c672:	f06f 0002 	mvneq.w	r0, #2
 800c676:	e7f7      	b.n	800c668 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c678:	f001 f828 	bl	800d6cc <xQueueSemaphoreTake>
 800c67c:	e7f1      	b.n	800c662 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800c67e:	f06f 0005 	mvn.w	r0, #5
 800c682:	e7f1      	b.n	800c668 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800c684:	f06f 0003 	mvn.w	r0, #3
 800c688:	e7ee      	b.n	800c668 <osMutexAcquire+0x24>

0800c68a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c68a:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c68c:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c690:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800c692:	f002 0301 	and.w	r3, r2, #1
 800c696:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c69a:	b979      	cbnz	r1, 800c6bc <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c69c:	2a01      	cmp	r2, #1
 800c69e:	d910      	bls.n	800c6c2 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c6a0:	b13b      	cbz	r3, 800c6b2 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c6a2:	f000 fe8b 	bl	800d3bc <xQueueGiveMutexRecursive>
 800c6a6:	2801      	cmp	r0, #1
  stat = osOK;
 800c6a8:	bf0c      	ite	eq
 800c6aa:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800c6ac:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c6b0:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	f000 fdba 	bl	800d22e <xQueueGenericSend>
 800c6ba:	e7f4      	b.n	800c6a6 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800c6bc:	f06f 0005 	mvn.w	r0, #5
 800c6c0:	e7f6      	b.n	800c6b0 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800c6c2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c6c6:	e7f3      	b.n	800c6b0 <osMutexRelease+0x26>

0800c6c8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c6c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	460e      	mov	r6, r1
 800c6ce:	4615      	mov	r5, r2
 800c6d0:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c6d4:	b942      	cbnz	r2, 800c6e8 <osSemaphoreNew+0x20>
 800c6d6:	b138      	cbz	r0, 800c6e8 <osSemaphoreNew+0x20>
 800c6d8:	4288      	cmp	r0, r1
 800c6da:	d305      	bcc.n	800c6e8 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800c6dc:	b155      	cbz	r5, 800c6f4 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c6de:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800c6e2:	b12b      	cbz	r3, 800c6f0 <osSemaphoreNew+0x28>
 800c6e4:	2f4f      	cmp	r7, #79	@ 0x4f
 800c6e6:	d822      	bhi.n	800c72e <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800c6e8:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	b003      	add	sp, #12
 800c6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c6f0:	2f00      	cmp	r7, #0
 800c6f2:	d1f9      	bne.n	800c6e8 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800c6f4:	2c01      	cmp	r4, #1
 800c6f6:	d00c      	beq.n	800c712 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	f000 fd79 	bl	800d1f2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800c700:	4604      	mov	r4, r0
 800c702:	2800      	cmp	r0, #0
 800c704:	d0f0      	beq.n	800c6e8 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800c706:	b985      	cbnz	r5, 800c72a <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800c708:	4629      	mov	r1, r5
 800c70a:	4620      	mov	r0, r4
 800c70c:	f001 f90a 	bl	800d924 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800c710:	e7eb      	b.n	800c6ea <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800c712:	2203      	movs	r2, #3
 800c714:	2100      	movs	r1, #0
 800c716:	2001      	movs	r0, #1
 800c718:	f000 fd22 	bl	800d160 <xQueueGenericCreate>
 800c71c:	e00e      	b.n	800c73c <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c71e:	461a      	mov	r2, r3
 800c720:	f000 fd45 	bl	800d1ae <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800c724:	4604      	mov	r4, r0
 800c726:	2800      	cmp	r0, #0
 800c728:	d0de      	beq.n	800c6e8 <osSemaphoreNew+0x20>
          name = attr->name;
 800c72a:	682d      	ldr	r5, [r5, #0]
 800c72c:	e7ec      	b.n	800c708 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800c72e:	2801      	cmp	r0, #1
 800c730:	d1f5      	bne.n	800c71e <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c732:	2103      	movs	r1, #3
 800c734:	9100      	str	r1, [sp, #0]
 800c736:	4611      	mov	r1, r2
 800c738:	f000 fcc4 	bl	800d0c4 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800c73c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c73e:	2800      	cmp	r0, #0
 800c740:	d0d2      	beq.n	800c6e8 <osSemaphoreNew+0x20>
 800c742:	2e00      	cmp	r6, #0
 800c744:	d0df      	beq.n	800c706 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c746:	2300      	movs	r3, #0
 800c748:	461a      	mov	r2, r3
 800c74a:	4619      	mov	r1, r3
 800c74c:	f000 fd6f 	bl	800d22e <xQueueGenericSend>
 800c750:	2801      	cmp	r0, #1
 800c752:	d0d8      	beq.n	800c706 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800c754:	4620      	mov	r0, r4
 800c756:	f001 f90f 	bl	800d978 <vQueueDelete>
      if (hSemaphore != NULL) {
 800c75a:	e7c5      	b.n	800c6e8 <osSemaphoreNew+0x20>

0800c75c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c75c:	b513      	push	{r0, r1, r4, lr}
 800c75e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c760:	b328      	cbz	r0, 800c7ae <osSemaphoreAcquire+0x52>
 800c762:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c766:	b1cb      	cbz	r3, 800c79c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800c768:	bb09      	cbnz	r1, 800c7ae <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c76a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c76c:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c76e:	f001 f88b 	bl	800d888 <xQueueReceiveFromISR>
 800c772:	2801      	cmp	r0, #1
 800c774:	d003      	beq.n	800c77e <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800c776:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c77a:	b002      	add	sp, #8
 800c77c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800c77e:	9b01      	ldr	r3, [sp, #4]
 800c780:	b90b      	cbnz	r3, 800c786 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800c782:	2000      	movs	r0, #0
 800c784:	e7f9      	b.n	800c77a <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800c786:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c78a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c78e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	e7f2      	b.n	800c782 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c79c:	f000 ff96 	bl	800d6cc <xQueueSemaphoreTake>
 800c7a0:	2801      	cmp	r0, #1
 800c7a2:	d0ee      	beq.n	800c782 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800c7a4:	2c00      	cmp	r4, #0
 800c7a6:	d0e6      	beq.n	800c776 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800c7a8:	f06f 0001 	mvn.w	r0, #1
 800c7ac:	e7e5      	b.n	800c77a <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800c7ae:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c7b2:	e7e2      	b.n	800c77a <osSemaphoreAcquire+0x1e>

0800c7b4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c7b4:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c7b6:	b318      	cbz	r0, 800c800 <osSemaphoreRelease+0x4c>
 800c7b8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c7bc:	b1cb      	cbz	r3, 800c7f2 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800c7be:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c7c0:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800c7c2:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c7c4:	f000 fe93 	bl	800d4ee <xQueueGiveFromISR>
 800c7c8:	2801      	cmp	r0, #1
 800c7ca:	d004      	beq.n	800c7d6 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800c7cc:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800c7d0:	b003      	add	sp, #12
 800c7d2:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800c7d6:	9b01      	ldr	r3, [sp, #4]
 800c7d8:	b14b      	cbz	r3, 800c7ee <osSemaphoreRelease+0x3a>
 800c7da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c7de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	e7ee      	b.n	800c7d0 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	f000 fd1a 	bl	800d22e <xQueueGenericSend>
 800c7fa:	2801      	cmp	r0, #1
 800c7fc:	d0f7      	beq.n	800c7ee <osSemaphoreRelease+0x3a>
 800c7fe:	e7e5      	b.n	800c7cc <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800c800:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c804:	e7e4      	b.n	800c7d0 <osSemaphoreRelease+0x1c>

0800c806 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c808:	4605      	mov	r5, r0
 800c80a:	460e      	mov	r6, r1
 800c80c:	4614      	mov	r4, r2
 800c80e:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c812:	b11f      	cbz	r7, 800c81c <osMessageQueueNew+0x16>
  hQueue = NULL;
 800c814:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800c816:	4628      	mov	r0, r5
 800c818:	b003      	add	sp, #12
 800c81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d0f9      	beq.n	800c814 <osMessageQueueNew+0xe>
 800c820:	2900      	cmp	r1, #0
 800c822:	d0f7      	beq.n	800c814 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800c824:	b1da      	cbz	r2, 800c85e <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c826:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800c82a:	b183      	cbz	r3, 800c84e <osMessageQueueNew+0x48>
 800c82c:	2a4f      	cmp	r2, #79	@ 0x4f
 800c82e:	d9f1      	bls.n	800c814 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c830:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c832:	2a00      	cmp	r2, #0
 800c834:	d0ee      	beq.n	800c814 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c836:	434d      	muls	r5, r1
 800c838:	6966      	ldr	r6, [r4, #20]
 800c83a:	42ae      	cmp	r6, r5
 800c83c:	d3ea      	bcc.n	800c814 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c83e:	9700      	str	r7, [sp, #0]
 800c840:	f000 fc40 	bl	800d0c4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800c844:	4605      	mov	r5, r0
 800c846:	2800      	cmp	r0, #0
 800c848:	d0e4      	beq.n	800c814 <osMessageQueueNew+0xe>
        name = attr->name;
 800c84a:	6824      	ldr	r4, [r4, #0]
 800c84c:	e011      	b.n	800c872 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c84e:	2a00      	cmp	r2, #0
 800c850:	d1e0      	bne.n	800c814 <osMessageQueueNew+0xe>
 800c852:	6923      	ldr	r3, [r4, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1dd      	bne.n	800c814 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c858:	6963      	ldr	r3, [r4, #20]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1da      	bne.n	800c814 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800c85e:	4628      	mov	r0, r5
 800c860:	2200      	movs	r2, #0
 800c862:	4631      	mov	r1, r6
 800c864:	f000 fc7c 	bl	800d160 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800c868:	4605      	mov	r5, r0
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d0d2      	beq.n	800c814 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800c86e:	2c00      	cmp	r4, #0
 800c870:	d1eb      	bne.n	800c84a <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800c872:	4621      	mov	r1, r4
 800c874:	4628      	mov	r0, r5
 800c876:	f001 f855 	bl	800d924 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800c87a:	e7cc      	b.n	800c816 <osMessageQueueNew+0x10>

0800c87c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c87c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c87e:	461c      	mov	r4, r3
 800c880:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800c884:	b1de      	cbz	r6, 800c8be <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c886:	b338      	cbz	r0, 800c8d8 <osMessageQueuePut+0x5c>
 800c888:	b331      	cbz	r1, 800c8d8 <osMessageQueuePut+0x5c>
 800c88a:	bb2b      	cbnz	r3, 800c8d8 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c88c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c88e:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c890:	f000 fdd0 	bl	800d434 <xQueueGenericSendFromISR>
 800c894:	2801      	cmp	r0, #1
 800c896:	d003      	beq.n	800c8a0 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800c898:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c89c:	b002      	add	sp, #8
 800c89e:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800c8a0:	9b01      	ldr	r3, [sp, #4]
 800c8a2:	b90b      	cbnz	r3, 800c8a8 <osMessageQueuePut+0x2c>
  stat = osOK;
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	e7f9      	b.n	800c89c <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800c8a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c8ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	e7f2      	b.n	800c8a4 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c8be:	b158      	cbz	r0, 800c8d8 <osMessageQueuePut+0x5c>
 800c8c0:	b151      	cbz	r1, 800c8d8 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c8c2:	4633      	mov	r3, r6
 800c8c4:	4622      	mov	r2, r4
 800c8c6:	f000 fcb2 	bl	800d22e <xQueueGenericSend>
 800c8ca:	2801      	cmp	r0, #1
 800c8cc:	d0ea      	beq.n	800c8a4 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800c8ce:	2c00      	cmp	r4, #0
 800c8d0:	d0e2      	beq.n	800c898 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800c8d2:	f06f 0001 	mvn.w	r0, #1
 800c8d6:	e7e1      	b.n	800c89c <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800c8d8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c8dc:	e7de      	b.n	800c89c <osMessageQueuePut+0x20>

0800c8de <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c8de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8e0:	461c      	mov	r4, r3
 800c8e2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800c8e6:	b1db      	cbz	r3, 800c920 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c8e8:	b330      	cbz	r0, 800c938 <osMessageQueueGet+0x5a>
 800c8ea:	b329      	cbz	r1, 800c938 <osMessageQueueGet+0x5a>
 800c8ec:	bb24      	cbnz	r4, 800c938 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c8ee:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c8f0:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c8f2:	f000 ffc9 	bl	800d888 <xQueueReceiveFromISR>
 800c8f6:	2801      	cmp	r0, #1
 800c8f8:	d003      	beq.n	800c902 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800c8fa:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c8fe:	b003      	add	sp, #12
 800c900:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800c902:	9b01      	ldr	r3, [sp, #4]
 800c904:	b90b      	cbnz	r3, 800c90a <osMessageQueueGet+0x2c>
  stat = osOK;
 800c906:	2000      	movs	r0, #0
 800c908:	e7f9      	b.n	800c8fe <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800c90a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c912:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	e7f2      	b.n	800c906 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c920:	b150      	cbz	r0, 800c938 <osMessageQueueGet+0x5a>
 800c922:	b149      	cbz	r1, 800c938 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c924:	4622      	mov	r2, r4
 800c926:	f000 fe33 	bl	800d590 <xQueueReceive>
 800c92a:	2801      	cmp	r0, #1
 800c92c:	d0eb      	beq.n	800c906 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800c92e:	2c00      	cmp	r4, #0
 800c930:	d0e3      	beq.n	800c8fa <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800c932:	f06f 0001 	mvn.w	r0, #1
 800c936:	e7e2      	b.n	800c8fe <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800c938:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c93c:	e7df      	b.n	800c8fe <osMessageQueueGet+0x20>
	...

0800c940 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c940:	4b03      	ldr	r3, [pc, #12]	@ (800c950 <vApplicationGetIdleTaskMemory+0x10>)
 800c942:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c944:	4b03      	ldr	r3, [pc, #12]	@ (800c954 <vApplicationGetIdleTaskMemory+0x14>)
 800c946:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c948:	2380      	movs	r3, #128	@ 0x80
 800c94a:	6013      	str	r3, [r2, #0]
}
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	2400c450 	.word	0x2400c450
 800c954:	2400c250 	.word	0x2400c250

0800c958 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c958:	4b03      	ldr	r3, [pc, #12]	@ (800c968 <vApplicationGetTimerTaskMemory+0x10>)
 800c95a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c95c:	4b03      	ldr	r3, [pc, #12]	@ (800c96c <vApplicationGetTimerTaskMemory+0x14>)
 800c95e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c964:	6013      	str	r3, [r2, #0]
}
 800c966:	4770      	bx	lr
 800c968:	2400c1f0 	.word	0x2400c1f0
 800c96c:	2400bdf0 	.word	0x2400bdf0

0800c970 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c970:	4b10      	ldr	r3, [pc, #64]	@ (800c9b4 <prvInsertBlockIntoFreeList+0x44>)
{
 800c972:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c974:	461a      	mov	r2, r3
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4283      	cmp	r3, r0
 800c97a:	d3fb      	bcc.n	800c974 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c97c:	6854      	ldr	r4, [r2, #4]
 800c97e:	1911      	adds	r1, r2, r4
 800c980:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c982:	bf01      	itttt	eq
 800c984:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800c986:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c988:	1909      	addeq	r1, r1, r4
 800c98a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c98c:	6844      	ldr	r4, [r0, #4]
 800c98e:	1901      	adds	r1, r0, r4
 800c990:	428b      	cmp	r3, r1
 800c992:	d10c      	bne.n	800c9ae <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c994:	4908      	ldr	r1, [pc, #32]	@ (800c9b8 <prvInsertBlockIntoFreeList+0x48>)
 800c996:	6809      	ldr	r1, [r1, #0]
 800c998:	428b      	cmp	r3, r1
 800c99a:	d003      	beq.n	800c9a4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c99c:	6859      	ldr	r1, [r3, #4]
 800c99e:	4421      	add	r1, r4
 800c9a0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9a2:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9a4:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9a6:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9a8:	bf18      	it	ne
 800c9aa:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9ac:	bd10      	pop	{r4, pc}
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	e7f8      	b.n	800c9a4 <prvInsertBlockIntoFreeList+0x34>
 800c9b2:	bf00      	nop
 800c9b4:	2400c4cc 	.word	0x2400c4cc
 800c9b8:	2400c4c8 	.word	0x2400c4c8

0800c9bc <pvPortMalloc>:
{
 800c9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800c9c2:	f001 f9db 	bl	800dd7c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c9c6:	4940      	ldr	r1, [pc, #256]	@ (800cac8 <pvPortMalloc+0x10c>)
 800c9c8:	4d40      	ldr	r5, [pc, #256]	@ (800cacc <pvPortMalloc+0x110>)
 800c9ca:	680b      	ldr	r3, [r1, #0]
 800c9cc:	b9f3      	cbnz	r3, 800ca0c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800c9ce:	4a40      	ldr	r2, [pc, #256]	@ (800cad0 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800c9d0:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9d2:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9d4:	4e3f      	ldr	r6, [pc, #252]	@ (800cad4 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9d6:	bf1b      	ittet	ne
 800c9d8:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9da:	4b3f      	ldrne	r3, [pc, #252]	@ (800cad8 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9dc:	4b3f      	ldreq	r3, [pc, #252]	@ (800cadc <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9de:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800c9e2:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9e4:	bf18      	it	ne
 800c9e6:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9e8:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9ea:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800c9ec:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9ee:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800c9f2:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9f6:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800c9f8:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9fa:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9fe:	4b38      	ldr	r3, [pc, #224]	@ (800cae0 <pvPortMalloc+0x124>)
 800ca00:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca02:	4b38      	ldr	r3, [pc, #224]	@ (800cae4 <pvPortMalloc+0x128>)
 800ca04:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca0a:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca0c:	682e      	ldr	r6, [r5, #0]
 800ca0e:	4226      	tst	r6, r4
 800ca10:	d155      	bne.n	800cabe <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800ca12:	2c00      	cmp	r4, #0
 800ca14:	d046      	beq.n	800caa4 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800ca16:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca1a:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca1c:	bf1c      	itt	ne
 800ca1e:	f023 0307 	bicne.w	r3, r3, #7
 800ca22:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d04a      	beq.n	800cabe <pvPortMalloc+0x102>
 800ca28:	4f2e      	ldr	r7, [pc, #184]	@ (800cae4 <pvPortMalloc+0x128>)
 800ca2a:	683c      	ldr	r4, [r7, #0]
 800ca2c:	429c      	cmp	r4, r3
 800ca2e:	d346      	bcc.n	800cabe <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800ca30:	4a28      	ldr	r2, [pc, #160]	@ (800cad4 <pvPortMalloc+0x118>)
 800ca32:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca34:	6868      	ldr	r0, [r5, #4]
 800ca36:	4298      	cmp	r0, r3
 800ca38:	d204      	bcs.n	800ca44 <pvPortMalloc+0x88>
 800ca3a:	f8d5 c000 	ldr.w	ip, [r5]
 800ca3e:	f1bc 0f00 	cmp.w	ip, #0
 800ca42:	d115      	bne.n	800ca70 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800ca44:	6809      	ldr	r1, [r1, #0]
 800ca46:	42a9      	cmp	r1, r5
 800ca48:	d039      	beq.n	800cabe <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca4a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca4c:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca50:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca52:	1ac2      	subs	r2, r0, r3
 800ca54:	2a10      	cmp	r2, #16
 800ca56:	d912      	bls.n	800ca7e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca58:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca5a:	0741      	lsls	r1, r0, #29
 800ca5c:	d00b      	beq.n	800ca76 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	e7fe      	b.n	800ca6e <pvPortMalloc+0xb2>
					pxPreviousBlock = pxBlock;
 800ca70:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca72:	4665      	mov	r5, ip
 800ca74:	e7de      	b.n	800ca34 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca76:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca78:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca7a:	f7ff ff79 	bl	800c970 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca7e:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca80:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca82:	4917      	ldr	r1, [pc, #92]	@ (800cae0 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca84:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca86:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca88:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800ca8a:	4a17      	ldr	r2, [pc, #92]	@ (800cae8 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca8c:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800ca8e:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800ca90:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca92:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800ca94:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca98:	bf38      	it	cc
 800ca9a:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca9c:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800caa0:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800caa2:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800caa4:	f001 fa0e 	bl	800dec4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800caa8:	0763      	lsls	r3, r4, #29
 800caaa:	d00a      	beq.n	800cac2 <pvPortMalloc+0x106>
 800caac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	e7fe      	b.n	800cabc <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800cabe:	2400      	movs	r4, #0
 800cac0:	e7f0      	b.n	800caa4 <pvPortMalloc+0xe8>
}
 800cac2:	4620      	mov	r0, r4
 800cac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac8:	2400c4c8 	.word	0x2400c4c8
 800cacc:	2400c4b4 	.word	0x2400c4b4
 800cad0:	2400c4d4 	.word	0x2400c4d4
 800cad4:	2400c4cc 	.word	0x2400c4cc
 800cad8:	24024b74 	.word	0x24024b74
 800cadc:	000186a0 	.word	0x000186a0
 800cae0:	2400c4c0 	.word	0x2400c4c0
 800cae4:	2400c4c4 	.word	0x2400c4c4
 800cae8:	2400c4bc 	.word	0x2400c4bc

0800caec <vPortFree>:
{
 800caec:	b510      	push	{r4, lr}
	if( pv != NULL )
 800caee:	4604      	mov	r4, r0
 800caf0:	b390      	cbz	r0, 800cb58 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800caf2:	4a1a      	ldr	r2, [pc, #104]	@ (800cb5c <vPortFree+0x70>)
 800caf4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800caf8:	6812      	ldr	r2, [r2, #0]
 800cafa:	4213      	tst	r3, r2
 800cafc:	d108      	bne.n	800cb10 <vPortFree+0x24>
 800cafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	e7fe      	b.n	800cb0e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb10:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800cb14:	b141      	cbz	r1, 800cb28 <vPortFree+0x3c>
 800cb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1a:	f383 8811 	msr	BASEPRI, r3
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f3bf 8f4f 	dsb	sy
 800cb26:	e7fe      	b.n	800cb26 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb28:	ea23 0302 	bic.w	r3, r3, r2
 800cb2c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800cb30:	f001 f924 	bl	800dd7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb34:	4a0a      	ldr	r2, [pc, #40]	@ (800cb60 <vPortFree+0x74>)
 800cb36:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb3a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb3e:	6811      	ldr	r1, [r2, #0]
 800cb40:	440b      	add	r3, r1
 800cb42:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb44:	f7ff ff14 	bl	800c970 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb48:	4a06      	ldr	r2, [pc, #24]	@ (800cb64 <vPortFree+0x78>)
 800cb4a:	6813      	ldr	r3, [r2, #0]
 800cb4c:	3301      	adds	r3, #1
}
 800cb4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800cb52:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800cb54:	f001 b9b6 	b.w	800dec4 <xTaskResumeAll>
}
 800cb58:	bd10      	pop	{r4, pc}
 800cb5a:	bf00      	nop
 800cb5c:	2400c4b4 	.word	0x2400c4b4
 800cb60:	2400c4c4 	.word	0x2400c4c4
 800cb64:	2400c4b8 	.word	0x2400c4b8

0800cb68 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb68:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb6c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb70:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb72:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb74:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb7c:	4770      	bx	lr

0800cb7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb82:	4770      	bx	lr

0800cb84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb84:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb86:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800cb88:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb8a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb8c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb8e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800cb90:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800cb92:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800cb94:	3301      	adds	r3, #1
 800cb96:	6003      	str	r3, [r0, #0]
}
 800cb98:	4770      	bx	lr

0800cb9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb9a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb9c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb9e:	1c63      	adds	r3, r4, #1
 800cba0:	d10a      	bne.n	800cbb8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cba2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cba4:	685a      	ldr	r2, [r3, #4]
 800cba6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cba8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbaa:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbac:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800cbae:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800cbb0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	6003      	str	r3, [r0, #0]
}
 800cbb6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbb8:	f100 0208 	add.w	r2, r0, #8
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	6852      	ldr	r2, [r2, #4]
 800cbc0:	6815      	ldr	r5, [r2, #0]
 800cbc2:	42a5      	cmp	r5, r4
 800cbc4:	d9fa      	bls.n	800cbbc <vListInsert+0x22>
 800cbc6:	e7ed      	b.n	800cba4 <vListInsert+0xa>

0800cbc8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cbc8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cbca:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800cbce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cbd0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cbd2:	6859      	ldr	r1, [r3, #4]
 800cbd4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cbd6:	bf08      	it	eq
 800cbd8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cbda:	2200      	movs	r2, #0
 800cbdc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	3a01      	subs	r2, #1
 800cbe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cbe4:	6818      	ldr	r0, [r3, #0]
}
 800cbe6:	4770      	bx	lr

0800cbe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbe8:	4808      	ldr	r0, [pc, #32]	@ (800cc0c <prvPortStartFirstTask+0x24>)
 800cbea:	6800      	ldr	r0, [r0, #0]
 800cbec:	6800      	ldr	r0, [r0, #0]
 800cbee:	f380 8808 	msr	MSP, r0
 800cbf2:	f04f 0000 	mov.w	r0, #0
 800cbf6:	f380 8814 	msr	CONTROL, r0
 800cbfa:	b662      	cpsie	i
 800cbfc:	b661      	cpsie	f
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	df00      	svc	0
 800cc08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc0a:	0000      	.short	0x0000
 800cc0c:	e000ed08 	.word	0xe000ed08

0800cc10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc10:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cc20 <vPortEnableVFP+0x10>
 800cc14:	6801      	ldr	r1, [r0, #0]
 800cc16:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cc1a:	6001      	str	r1, [r0, #0]
 800cc1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc1e:	0000      	.short	0x0000
 800cc20:	e000ed88 	.word	0xe000ed88

0800cc24 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800cc24:	2300      	movs	r3, #0
{
 800cc26:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800cc28:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc60 <prvTaskExitError+0x3c>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	d008      	beq.n	800cc44 <prvTaskExitError+0x20>
 800cc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	e7fe      	b.n	800cc42 <prvTaskExitError+0x1e>
 800cc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800cc54:	9b01      	ldr	r3, [sp, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d0fc      	beq.n	800cc54 <prvTaskExitError+0x30>
}
 800cc5a:	b002      	add	sp, #8
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	24000078 	.word	0x24000078

0800cc64 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc68:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc6c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800cc70:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc72:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc74:	4b03      	ldr	r3, [pc, #12]	@ (800cc84 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc76:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc78:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc7a:	f06f 0302 	mvn.w	r3, #2
 800cc7e:	6203      	str	r3, [r0, #32]
}
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	0800cc25 	.word	0x0800cc25
	...

0800cc90 <SVC_Handler>:
	__asm volatile (
 800cc90:	4b07      	ldr	r3, [pc, #28]	@ (800ccb0 <pxCurrentTCBConst2>)
 800cc92:	6819      	ldr	r1, [r3, #0]
 800cc94:	6808      	ldr	r0, [r1, #0]
 800cc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9a:	f380 8809 	msr	PSP, r0
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f04f 0000 	mov.w	r0, #0
 800cca6:	f380 8811 	msr	BASEPRI, r0
 800ccaa:	4770      	bx	lr
 800ccac:	f3af 8000 	nop.w

0800ccb0 <pxCurrentTCBConst2>:
 800ccb0:	240250b4 	.word	0x240250b4

0800ccb4 <vPortEnterCritical>:
 800ccb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800ccc4:	4a0a      	ldr	r2, [pc, #40]	@ (800ccf0 <vPortEnterCritical+0x3c>)
 800ccc6:	6813      	ldr	r3, [r2, #0]
 800ccc8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800ccca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800cccc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ccce:	d10e      	bne.n	800ccee <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccd0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ccd4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	b143      	cbz	r3, 800ccee <vPortEnterCritical+0x3a>
 800ccdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	e7fe      	b.n	800ccec <vPortEnterCritical+0x38>
}
 800ccee:	4770      	bx	lr
 800ccf0:	24000078 	.word	0x24000078

0800ccf4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ccf4:	4a08      	ldr	r2, [pc, #32]	@ (800cd18 <vPortExitCritical+0x24>)
 800ccf6:	6813      	ldr	r3, [r2, #0]
 800ccf8:	b943      	cbnz	r3, 800cd0c <vPortExitCritical+0x18>
 800ccfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	e7fe      	b.n	800cd0a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd10:	b90b      	cbnz	r3, 800cd16 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd12:	f383 8811 	msr	BASEPRI, r3
}
 800cd16:	4770      	bx	lr
 800cd18:	24000078 	.word	0x24000078
 800cd1c:	00000000 	.word	0x00000000

0800cd20 <PendSV_Handler>:
	__asm volatile
 800cd20:	f3ef 8009 	mrs	r0, PSP
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	4b15      	ldr	r3, [pc, #84]	@ (800cd80 <pxCurrentTCBConst>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	f01e 0f10 	tst.w	lr, #16
 800cd30:	bf08      	it	eq
 800cd32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3a:	6010      	str	r0, [r2, #0]
 800cd3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cd44:	f380 8811 	msr	BASEPRI, r0
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f001 f996 	bl	800e080 <vTaskSwitchContext>
 800cd54:	f04f 0000 	mov.w	r0, #0
 800cd58:	f380 8811 	msr	BASEPRI, r0
 800cd5c:	bc09      	pop	{r0, r3}
 800cd5e:	6819      	ldr	r1, [r3, #0]
 800cd60:	6808      	ldr	r0, [r1, #0]
 800cd62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd66:	f01e 0f10 	tst.w	lr, #16
 800cd6a:	bf08      	it	eq
 800cd6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd70:	f380 8809 	msr	PSP, r0
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	f3af 8000 	nop.w

0800cd80 <pxCurrentTCBConst>:
 800cd80:	240250b4 	.word	0x240250b4

0800cd84 <xPortSysTickHandler>:
{
 800cd84:	b508      	push	{r3, lr}
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800cd96:	f000 ffff 	bl	800dd98 <xTaskIncrementTick>
 800cd9a:	b128      	cbz	r0, 800cda8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cda0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cda4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f383 8811 	msr	BASEPRI, r3
}
 800cdae:	bd08      	pop	{r3, pc}

0800cdb0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdb0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800cdb4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdb6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdba:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdbc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdbe:	4b04      	ldr	r3, [pc, #16]	@ (800cdd0 <vPortSetupTimerInterrupt+0x20>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	fbb3 f3f1 	udiv	r3, r3, r1
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdca:	2307      	movs	r3, #7
 800cdcc:	6113      	str	r3, [r2, #16]
}
 800cdce:	4770      	bx	lr
 800cdd0:	2400006c 	.word	0x2400006c

0800cdd4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cdd4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800cdd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cdda:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800cdde:	4a38      	ldr	r2, [pc, #224]	@ (800cec0 <xPortStartScheduler+0xec>)
 800cde0:	4291      	cmp	r1, r2
 800cde2:	d108      	bne.n	800cdf6 <xPortStartScheduler+0x22>
	__asm volatile
 800cde4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde8:	f383 8811 	msr	BASEPRI, r3
 800cdec:	f3bf 8f6f 	isb	sy
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	e7fe      	b.n	800cdf4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cdf6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800cdfa:	4b32      	ldr	r3, [pc, #200]	@ (800cec4 <xPortStartScheduler+0xf0>)
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d108      	bne.n	800ce12 <xPortStartScheduler+0x3e>
 800ce00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	e7fe      	b.n	800ce10 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce12:	4b2d      	ldr	r3, [pc, #180]	@ (800cec8 <xPortStartScheduler+0xf4>)
 800ce14:	781a      	ldrb	r2, [r3, #0]
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce1a:	22ff      	movs	r2, #255	@ 0xff
 800ce1c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce1e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce20:	4a2a      	ldr	r2, [pc, #168]	@ (800cecc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce28:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ce2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ce30:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce32:	2307      	movs	r3, #7
 800ce34:	4a26      	ldr	r2, [pc, #152]	@ (800ced0 <xPortStartScheduler+0xfc>)
 800ce36:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce38:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800ce3c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce3e:	0609      	lsls	r1, r1, #24
 800ce40:	d40a      	bmi.n	800ce58 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	d011      	beq.n	800ce6a <xPortStartScheduler+0x96>
 800ce46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4a:	f383 8811 	msr	BASEPRI, r3
 800ce4e:	f3bf 8f6f 	isb	sy
 800ce52:	f3bf 8f4f 	dsb	sy
 800ce56:	e7fe      	b.n	800ce56 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	f88d 3003 	strb.w	r3, [sp, #3]
 800ce68:	e7e6      	b.n	800ce38 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce6e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800ce72:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce74:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	4a13      	ldr	r2, [pc, #76]	@ (800cec8 <xPortStartScheduler+0xf4>)
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce7e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ce82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ce86:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce8a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ce8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ce92:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800ce96:	f7ff ff8b 	bl	800cdb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ce9a:	4b0e      	ldr	r3, [pc, #56]	@ (800ced4 <xPortStartScheduler+0x100>)
 800ce9c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800ce9e:	f7ff feb7 	bl	800cc10 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cea2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800cea6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ceaa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800ceae:	f7ff fe9b 	bl	800cbe8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ceb2:	f001 f8e5 	bl	800e080 <vTaskSwitchContext>
}
 800ceb6:	4628      	mov	r0, r5
	prvTaskExitError();
 800ceb8:	f7ff feb4 	bl	800cc24 <prvTaskExitError>
}
 800cebc:	b003      	add	sp, #12
 800cebe:	bd30      	pop	{r4, r5, pc}
 800cec0:	410fc271 	.word	0x410fc271
 800cec4:	410fc270 	.word	0x410fc270
 800cec8:	e000e400 	.word	0xe000e400
 800cecc:	24024b78 	.word	0x24024b78
 800ced0:	24024b74 	.word	0x24024b74
 800ced4:	24000078 	.word	0x24000078

0800ced8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ced8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cedc:	2b0f      	cmp	r3, #15
 800cede:	d90e      	bls.n	800cefe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cee0:	4a11      	ldr	r2, [pc, #68]	@ (800cf28 <vPortValidateInterruptPriority+0x50>)
 800cee2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cee4:	4a11      	ldr	r2, [pc, #68]	@ (800cf2c <vPortValidateInterruptPriority+0x54>)
 800cee6:	7812      	ldrb	r2, [r2, #0]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d908      	bls.n	800cefe <vPortValidateInterruptPriority+0x26>
 800ceec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	e7fe      	b.n	800cefc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cefe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf02:	4a0b      	ldr	r2, [pc, #44]	@ (800cf30 <vPortValidateInterruptPriority+0x58>)
 800cf04:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800cf08:	6812      	ldr	r2, [r2, #0]
 800cf0a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d908      	bls.n	800cf24 <vPortValidateInterruptPriority+0x4c>
 800cf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	e7fe      	b.n	800cf22 <vPortValidateInterruptPriority+0x4a>
	}
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	e000e3f0 	.word	0xe000e3f0
 800cf2c:	24024b78 	.word	0x24024b78
 800cf30:	24024b74 	.word	0x24024b74

0800cf34 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf34:	b510      	push	{r4, lr}
 800cf36:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf38:	f7ff febc 	bl	800ccb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf3c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800cf3e:	f7ff fed9 	bl	800ccf4 <vPortExitCritical>

	return xReturn;
}
 800cf42:	fab4 f084 	clz	r0, r4
 800cf46:	0940      	lsrs	r0, r0, #5
 800cf48:	bd10      	pop	{r4, pc}

0800cf4a <prvCopyDataToQueue>:
{
 800cf4a:	b570      	push	{r4, r5, r6, lr}
 800cf4c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cf4e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800cf50:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf52:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cf54:	b942      	cbnz	r2, 800cf68 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf56:	6806      	ldr	r6, [r0, #0]
 800cf58:	b99e      	cbnz	r6, 800cf82 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf5a:	6880      	ldr	r0, [r0, #8]
 800cf5c:	f001 f9f0 	bl	800e340 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf60:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf62:	3501      	adds	r5, #1
 800cf64:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800cf68:	b96e      	cbnz	r6, 800cf86 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf6a:	6840      	ldr	r0, [r0, #4]
 800cf6c:	f016 fb4d 	bl	802360a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf70:	6863      	ldr	r3, [r4, #4]
 800cf72:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800cf74:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf76:	68a2      	ldr	r2, [r4, #8]
 800cf78:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf7a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf7c:	bf24      	itt	cs
 800cf7e:	6823      	ldrcs	r3, [r4, #0]
 800cf80:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800cf82:	2000      	movs	r0, #0
 800cf84:	e7ed      	b.n	800cf62 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf86:	68c0      	ldr	r0, [r0, #12]
 800cf88:	f016 fb3f 	bl	802360a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf8c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800cf8e:	68e3      	ldr	r3, [r4, #12]
 800cf90:	4251      	negs	r1, r2
 800cf92:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf94:	6822      	ldr	r2, [r4, #0]
 800cf96:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf98:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf9a:	bf3e      	ittt	cc
 800cf9c:	68a3      	ldrcc	r3, [r4, #8]
 800cf9e:	185b      	addcc	r3, r3, r1
 800cfa0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800cfa2:	2e02      	cmp	r6, #2
 800cfa4:	d1ed      	bne.n	800cf82 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfa6:	b10d      	cbz	r5, 800cfac <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800cfa8:	3d01      	subs	r5, #1
 800cfaa:	e7ea      	b.n	800cf82 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800cfac:	4628      	mov	r0, r5
 800cfae:	e7d8      	b.n	800cf62 <prvCopyDataToQueue+0x18>

0800cfb0 <prvCopyDataFromQueue>:
{
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cfb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800cfb6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cfb8:	b162      	cbz	r2, 800cfd4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfba:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cfbc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfbe:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cfc0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfc2:	60dc      	str	r4, [r3, #12]
}
 800cfc4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cfc8:	bf24      	itt	cs
 800cfca:	6819      	ldrcs	r1, [r3, #0]
 800cfcc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfce:	68d9      	ldr	r1, [r3, #12]
 800cfd0:	f016 bb1b 	b.w	802360a <memcpy>
}
 800cfd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <prvUnlockQueue>:
{
 800cfda:	b570      	push	{r4, r5, r6, lr}
 800cfdc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800cfde:	f7ff fe69 	bl	800ccb4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cfe2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfe6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800cfea:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfec:	2d00      	cmp	r5, #0
 800cfee:	dd01      	ble.n	800cff4 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cff0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cff2:	b9b3      	cbnz	r3, 800d022 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 800cff4:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cff6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800cffa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800cffe:	f7ff fe79 	bl	800ccf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d002:	f7ff fe57 	bl	800ccb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d006:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d00a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d00c:	2d00      	cmp	r5, #0
 800d00e:	dd01      	ble.n	800d014 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d010:	6923      	ldr	r3, [r4, #16]
 800d012:	b97b      	cbnz	r3, 800d034 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800d014:	23ff      	movs	r3, #255	@ 0xff
 800d016:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d01a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d01e:	f7ff be69 	b.w	800ccf4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d022:	4630      	mov	r0, r6
 800d024:	f001 f8a8 	bl	800e178 <xTaskRemoveFromEventList>
 800d028:	b108      	cbz	r0, 800d02e <prvUnlockQueue+0x54>
						vTaskMissedYield();
 800d02a:	f001 f92f 	bl	800e28c <vTaskMissedYield>
			--cTxLock;
 800d02e:	3d01      	subs	r5, #1
 800d030:	b26d      	sxtb	r5, r5
 800d032:	e7db      	b.n	800cfec <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d034:	4630      	mov	r0, r6
 800d036:	f001 f89f 	bl	800e178 <xTaskRemoveFromEventList>
 800d03a:	b108      	cbz	r0, 800d040 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800d03c:	f001 f926 	bl	800e28c <vTaskMissedYield>
				--cRxLock;
 800d040:	3d01      	subs	r5, #1
 800d042:	b26d      	sxtb	r5, r5
 800d044:	e7e2      	b.n	800d00c <prvUnlockQueue+0x32>

0800d046 <xQueueGenericReset>:
{
 800d046:	b538      	push	{r3, r4, r5, lr}
 800d048:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d04a:	4604      	mov	r4, r0
 800d04c:	b940      	cbnz	r0, 800d060 <xQueueGenericReset+0x1a>
 800d04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	e7fe      	b.n	800d05e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800d060:	f7ff fe28 	bl	800ccb4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d064:	6822      	ldr	r2, [r4, #0]
 800d066:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d06a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d06c:	434b      	muls	r3, r1
 800d06e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d070:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d072:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d074:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d076:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d078:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d07a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d07c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d07e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d082:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d086:	b9a5      	cbnz	r5, 800d0b2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	b173      	cbz	r3, 800d0aa <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d08c:	f104 0010 	add.w	r0, r4, #16
 800d090:	f001 f872 	bl	800e178 <xTaskRemoveFromEventList>
 800d094:	b148      	cbz	r0, 800d0aa <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d096:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d09a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d09e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d0aa:	f7ff fe23 	bl	800ccf4 <vPortExitCritical>
}
 800d0ae:	2001      	movs	r0, #1
 800d0b0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d0b2:	f104 0010 	add.w	r0, r4, #16
 800d0b6:	f7ff fd57 	bl	800cb68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d0ba:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d0be:	f7ff fd53 	bl	800cb68 <vListInitialise>
 800d0c2:	e7f2      	b.n	800d0aa <xQueueGenericReset+0x64>

0800d0c4 <xQueueGenericCreateStatic>:
	{
 800d0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0c6:	460d      	mov	r5, r1
 800d0c8:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0ca:	b940      	cbnz	r0, 800d0de <xQueueGenericCreateStatic+0x1a>
 800d0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	e7fe      	b.n	800d0dc <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800d0de:	b943      	cbnz	r3, 800d0f2 <xQueueGenericCreateStatic+0x2e>
 800d0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	e7fe      	b.n	800d0f0 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0f2:	b14a      	cbz	r2, 800d108 <xQueueGenericCreateStatic+0x44>
 800d0f4:	b991      	cbnz	r1, 800d11c <xQueueGenericCreateStatic+0x58>
 800d0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	e7fe      	b.n	800d106 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d108:	b141      	cbz	r1, 800d11c <xQueueGenericCreateStatic+0x58>
 800d10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	e7fe      	b.n	800d11a <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d11c:	2350      	movs	r3, #80	@ 0x50
 800d11e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d120:	9b01      	ldr	r3, [sp, #4]
 800d122:	2b50      	cmp	r3, #80	@ 0x50
 800d124:	d008      	beq.n	800d138 <xQueueGenericCreateStatic+0x74>
 800d126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12a:	f383 8811 	msr	BASEPRI, r3
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f3bf 8f4f 	dsb	sy
 800d136:	e7fe      	b.n	800d136 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d138:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d13a:	2d00      	cmp	r5, #0
 800d13c:	bf08      	it	eq
 800d13e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d140:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d142:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d146:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d148:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d14c:	4620      	mov	r0, r4
 800d14e:	f7ff ff7a 	bl	800d046 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d152:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800d156:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d158:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800d15c:	b003      	add	sp, #12
 800d15e:	bd30      	pop	{r4, r5, pc}

0800d160 <xQueueGenericCreate>:
	{
 800d160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d162:	460d      	mov	r5, r1
 800d164:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d166:	4606      	mov	r6, r0
 800d168:	b940      	cbnz	r0, 800d17c <xQueueGenericCreate+0x1c>
 800d16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d16e:	f383 8811 	msr	BASEPRI, r3
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	e7fe      	b.n	800d17a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d17c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d17e:	3050      	adds	r0, #80	@ 0x50
 800d180:	f7ff fc1c 	bl	800c9bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d184:	4604      	mov	r4, r0
 800d186:	b170      	cbz	r0, 800d1a6 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d188:	2300      	movs	r3, #0
 800d18a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d18e:	b165      	cbz	r5, 800d1aa <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d190:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d194:	2101      	movs	r1, #1
 800d196:	4620      	mov	r0, r4
 800d198:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d19a:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d19e:	f7ff ff52 	bl	800d046 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d1a2:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	e7f2      	b.n	800d194 <xQueueGenericCreate+0x34>

0800d1ae <xQueueCreateCountingSemaphoreStatic>:
	{
 800d1ae:	b513      	push	{r0, r1, r4, lr}
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d1b4:	b940      	cbnz	r0, 800d1c8 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800d1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ba:	f383 8811 	msr	BASEPRI, r3
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	e7fe      	b.n	800d1c6 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d1c8:	4288      	cmp	r0, r1
 800d1ca:	d208      	bcs.n	800d1de <xQueueCreateCountingSemaphoreStatic+0x30>
 800d1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	e7fe      	b.n	800d1dc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d1de:	2202      	movs	r2, #2
 800d1e0:	9200      	str	r2, [sp, #0]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	f7ff ff6d 	bl	800d0c4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800d1ea:	b100      	cbz	r0, 800d1ee <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d1ec:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d1ee:	b002      	add	sp, #8
 800d1f0:	bd10      	pop	{r4, pc}

0800d1f2 <xQueueCreateCountingSemaphore>:
	{
 800d1f2:	b510      	push	{r4, lr}
 800d1f4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d1f6:	b940      	cbnz	r0, 800d20a <xQueueCreateCountingSemaphore+0x18>
 800d1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	e7fe      	b.n	800d208 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d20a:	4288      	cmp	r0, r1
 800d20c:	d208      	bcs.n	800d220 <xQueueCreateCountingSemaphore+0x2e>
 800d20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	e7fe      	b.n	800d21e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d220:	2202      	movs	r2, #2
 800d222:	2100      	movs	r1, #0
 800d224:	f7ff ff9c 	bl	800d160 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d228:	b100      	cbz	r0, 800d22c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d22a:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d22c:	bd10      	pop	{r4, pc}

0800d22e <xQueueGenericSend>:
{
 800d22e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d232:	460f      	mov	r7, r1
 800d234:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d236:	4604      	mov	r4, r0
{
 800d238:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800d23a:	b940      	cbnz	r0, 800d24e <xQueueGenericSend+0x20>
 800d23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d240:	f383 8811 	msr	BASEPRI, r3
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	e7fe      	b.n	800d24c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d24e:	b951      	cbnz	r1, 800d266 <xQueueGenericSend+0x38>
 800d250:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d252:	b143      	cbz	r3, 800d266 <xQueueGenericSend+0x38>
 800d254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d258:	f383 8811 	msr	BASEPRI, r3
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	e7fe      	b.n	800d264 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d266:	2e02      	cmp	r6, #2
 800d268:	d10b      	bne.n	800d282 <xQueueGenericSend+0x54>
 800d26a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d008      	beq.n	800d282 <xQueueGenericSend+0x54>
 800d270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d274:	f383 8811 	msr	BASEPRI, r3
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	e7fe      	b.n	800d280 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d282:	f001 f80f 	bl	800e2a4 <xTaskGetSchedulerState>
 800d286:	4605      	mov	r5, r0
 800d288:	b320      	cbz	r0, 800d2d4 <xQueueGenericSend+0xa6>
 800d28a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d28c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d290:	f7ff fd10 	bl	800ccb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d294:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d296:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d298:	429a      	cmp	r2, r3
 800d29a:	d227      	bcs.n	800d2ec <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d29c:	4632      	mov	r2, r6
 800d29e:	4639      	mov	r1, r7
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f7ff fe52 	bl	800cf4a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d2a8:	b11b      	cbz	r3, 800d2b2 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d2ae:	f000 ff63 	bl	800e178 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800d2b2:	b148      	cbz	r0, 800d2c8 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800d2b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d2b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d2c8:	f7ff fd14 	bl	800ccf4 <vPortExitCritical>
				return pdPASS;
 800d2cc:	2001      	movs	r0, #1
}
 800d2ce:	b004      	add	sp, #16
 800d2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2d4:	9b01      	ldr	r3, [sp, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d0d8      	beq.n	800d28c <xQueueGenericSend+0x5e>
 800d2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	e7fe      	b.n	800d2ea <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2ec:	2e02      	cmp	r6, #2
 800d2ee:	d0d5      	beq.n	800d29c <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2f0:	9b01      	ldr	r3, [sp, #4]
 800d2f2:	b91b      	cbnz	r3, 800d2fc <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800d2f4:	f7ff fcfe 	bl	800ccf4 <vPortExitCritical>
					return errQUEUE_FULL;
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	e7e8      	b.n	800d2ce <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800d2fc:	b915      	cbnz	r5, 800d304 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2fe:	a802      	add	r0, sp, #8
 800d300:	f000 ff7c 	bl	800e1fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d304:	f7ff fcf6 	bl	800ccf4 <vPortExitCritical>
		vTaskSuspendAll();
 800d308:	f000 fd38 	bl	800dd7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d30c:	f7ff fcd2 	bl	800ccb4 <vPortEnterCritical>
 800d310:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d314:	2bff      	cmp	r3, #255	@ 0xff
 800d316:	d101      	bne.n	800d31c <xQueueGenericSend+0xee>
 800d318:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800d31c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d320:	2bff      	cmp	r3, #255	@ 0xff
 800d322:	d101      	bne.n	800d328 <xQueueGenericSend+0xfa>
 800d324:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800d328:	f7ff fce4 	bl	800ccf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d32c:	a901      	add	r1, sp, #4
 800d32e:	a802      	add	r0, sp, #8
 800d330:	f000 ff70 	bl	800e214 <xTaskCheckForTimeOut>
 800d334:	bb38      	cbnz	r0, 800d386 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d336:	f7ff fcbd 	bl	800ccb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d33a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d33c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d33e:	429a      	cmp	r2, r3
 800d340:	d10e      	bne.n	800d360 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d342:	f7ff fcd7 	bl	800ccf4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d346:	9901      	ldr	r1, [sp, #4]
 800d348:	f104 0010 	add.w	r0, r4, #16
 800d34c:	f000 fedc 	bl	800e108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d350:	4620      	mov	r0, r4
 800d352:	f7ff fe42 	bl	800cfda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d356:	f000 fdb5 	bl	800dec4 <xTaskResumeAll>
 800d35a:	b148      	cbz	r0, 800d370 <xQueueGenericSend+0x142>
 800d35c:	2501      	movs	r5, #1
 800d35e:	e797      	b.n	800d290 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800d360:	f7ff fcc8 	bl	800ccf4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d364:	4620      	mov	r0, r4
 800d366:	f7ff fe38 	bl	800cfda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d36a:	f000 fdab 	bl	800dec4 <xTaskResumeAll>
 800d36e:	e7f5      	b.n	800d35c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800d370:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d378:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	e7ea      	b.n	800d35c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800d386:	4620      	mov	r0, r4
 800d388:	f7ff fe27 	bl	800cfda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d38c:	f000 fd9a 	bl	800dec4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800d390:	e7b2      	b.n	800d2f8 <xQueueGenericSend+0xca>

0800d392 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d392:	2200      	movs	r2, #0
	{
 800d394:	460b      	mov	r3, r1
 800d396:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d398:	4611      	mov	r1, r2
 800d39a:	9000      	str	r0, [sp, #0]
 800d39c:	2001      	movs	r0, #1
 800d39e:	f7ff fe91 	bl	800d0c4 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	b138      	cbz	r0, 800d3b6 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3a6:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3ac:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d3ae:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d3b0:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d3b2:	f7ff ff3c 	bl	800d22e <xQueueGenericSend>
	}
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	b002      	add	sp, #8
 800d3ba:	bd10      	pop	{r4, pc}

0800d3bc <xQueueGiveMutexRecursive>:
	{
 800d3bc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800d3be:	4604      	mov	r4, r0
 800d3c0:	b940      	cbnz	r0, 800d3d4 <xQueueGiveMutexRecursive+0x18>
 800d3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	e7fe      	b.n	800d3d2 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d3d4:	6885      	ldr	r5, [r0, #8]
 800d3d6:	f000 ff5f 	bl	800e298 <xTaskGetCurrentTaskHandle>
 800d3da:	4285      	cmp	r5, r0
 800d3dc:	d10b      	bne.n	800d3f6 <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d3de:	68e3      	ldr	r3, [r4, #12]
 800d3e0:	3b01      	subs	r3, #1
 800d3e2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d3e4:	b10b      	cbz	r3, 800d3ea <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800d3e6:	2001      	movs	r0, #1
	}
 800d3e8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f7ff ff1d 	bl	800d22e <xQueueGenericSend>
 800d3f4:	e7f7      	b.n	800d3e6 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800d3f6:	2000      	movs	r0, #0
		return xReturn;
 800d3f8:	e7f6      	b.n	800d3e8 <xQueueGiveMutexRecursive+0x2c>

0800d3fa <xQueueCreateMutex>:
	{
 800d3fa:	b570      	push	{r4, r5, r6, lr}
 800d3fc:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d3fe:	2050      	movs	r0, #80	@ 0x50
 800d400:	f7ff fadc 	bl	800c9bc <pvPortMalloc>
 800d404:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800d406:	b198      	cbz	r0, 800d430 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d408:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800d40a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d40c:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d40e:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800d412:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d416:	f7ff fe16 	bl	800d046 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d41a:	462b      	mov	r3, r5
 800d41c:	462a      	mov	r2, r5
 800d41e:	4629      	mov	r1, r5
 800d420:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d422:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d426:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d428:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d42a:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d42c:	f7ff feff 	bl	800d22e <xQueueGenericSend>
	}
 800d430:	4620      	mov	r0, r4
 800d432:	bd70      	pop	{r4, r5, r6, pc}

0800d434 <xQueueGenericSendFromISR>:
{
 800d434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d438:	4689      	mov	r9, r1
 800d43a:	4617      	mov	r7, r2
 800d43c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d43e:	4604      	mov	r4, r0
 800d440:	b940      	cbnz	r0, 800d454 <xQueueGenericSendFromISR+0x20>
 800d442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	e7fe      	b.n	800d452 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d454:	b951      	cbnz	r1, 800d46c <xQueueGenericSendFromISR+0x38>
 800d456:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d458:	b143      	cbz	r3, 800d46c <xQueueGenericSendFromISR+0x38>
 800d45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	e7fe      	b.n	800d46a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d46c:	2e02      	cmp	r6, #2
 800d46e:	d10b      	bne.n	800d488 <xQueueGenericSendFromISR+0x54>
 800d470:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d472:	2b01      	cmp	r3, #1
 800d474:	d008      	beq.n	800d488 <xQueueGenericSendFromISR+0x54>
 800d476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	e7fe      	b.n	800d486 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d488:	f7ff fd26 	bl	800ced8 <vPortValidateInterruptPriority>
	__asm volatile
 800d48c:	f3ef 8811 	mrs	r8, BASEPRI
 800d490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d494:	f383 8811 	msr	BASEPRI, r3
 800d498:	f3bf 8f6f 	isb	sy
 800d49c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4a0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d4a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d301      	bcc.n	800d4ac <xQueueGenericSendFromISR+0x78>
 800d4a8:	2e02      	cmp	r6, #2
 800d4aa:	d11e      	bne.n	800d4ea <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4ac:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4b0:	4632      	mov	r2, r6
 800d4b2:	4649      	mov	r1, r9
 800d4b4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4b6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4ba:	f7ff fd46 	bl	800cf4a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d4be:	1c6b      	adds	r3, r5, #1
 800d4c0:	d10e      	bne.n	800d4e0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d4c4:	b13b      	cbz	r3, 800d4d6 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4c6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d4ca:	f000 fe55 	bl	800e178 <xTaskRemoveFromEventList>
 800d4ce:	b110      	cbz	r0, 800d4d6 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800d4d0:	b10f      	cbz	r7, 800d4d6 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800d4d6:	2001      	movs	r0, #1
	__asm volatile
 800d4d8:	f388 8811 	msr	BASEPRI, r8
}
 800d4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4e0:	3501      	adds	r5, #1
 800d4e2:	b26d      	sxtb	r5, r5
 800d4e4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800d4e8:	e7f5      	b.n	800d4d6 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	e7f4      	b.n	800d4d8 <xQueueGenericSendFromISR+0xa4>

0800d4ee <xQueueGiveFromISR>:
{
 800d4ee:	b570      	push	{r4, r5, r6, lr}
 800d4f0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	b940      	cbnz	r0, 800d508 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800d4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4fa:	f383 8811 	msr	BASEPRI, r3
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	e7fe      	b.n	800d506 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d508:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d50a:	b143      	cbz	r3, 800d51e <xQueueGiveFromISR+0x30>
 800d50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d510:	f383 8811 	msr	BASEPRI, r3
 800d514:	f3bf 8f6f 	isb	sy
 800d518:	f3bf 8f4f 	dsb	sy
 800d51c:	e7fe      	b.n	800d51c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d51e:	6803      	ldr	r3, [r0, #0]
 800d520:	b953      	cbnz	r3, 800d538 <xQueueGiveFromISR+0x4a>
 800d522:	6883      	ldr	r3, [r0, #8]
 800d524:	b143      	cbz	r3, 800d538 <xQueueGiveFromISR+0x4a>
 800d526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	e7fe      	b.n	800d536 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d538:	f7ff fcce 	bl	800ced8 <vPortValidateInterruptPriority>
	__asm volatile
 800d53c:	f3ef 8611 	mrs	r6, BASEPRI
 800d540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d544:	f383 8811 	msr	BASEPRI, r3
 800d548:	f3bf 8f6f 	isb	sy
 800d54c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d550:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d552:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d554:	4293      	cmp	r3, r2
 800d556:	d919      	bls.n	800d58c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d55c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800d55e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800d560:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d562:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800d564:	d10d      	bne.n	800d582 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d566:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d568:	b13b      	cbz	r3, 800d57a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d56a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d56e:	f000 fe03 	bl	800e178 <xTaskRemoveFromEventList>
 800d572:	b110      	cbz	r0, 800d57a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800d574:	b10d      	cbz	r5, 800d57a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d576:	2301      	movs	r3, #1
 800d578:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800d57a:	2001      	movs	r0, #1
	__asm volatile
 800d57c:	f386 8811 	msr	BASEPRI, r6
}
 800d580:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d582:	3301      	adds	r3, #1
 800d584:	b25b      	sxtb	r3, r3
 800d586:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d58a:	e7f6      	b.n	800d57a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800d58c:	2000      	movs	r0, #0
 800d58e:	e7f5      	b.n	800d57c <xQueueGiveFromISR+0x8e>

0800d590 <xQueueReceive>:
{
 800d590:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d594:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800d596:	4604      	mov	r4, r0
{
 800d598:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d59a:	b940      	cbnz	r0, 800d5ae <xQueueReceive+0x1e>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a0:	f383 8811 	msr	BASEPRI, r3
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	e7fe      	b.n	800d5ac <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5ae:	b951      	cbnz	r1, 800d5c6 <xQueueReceive+0x36>
 800d5b0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d5b2:	b143      	cbz	r3, 800d5c6 <xQueueReceive+0x36>
 800d5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	e7fe      	b.n	800d5c4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5c6:	f000 fe6d 	bl	800e2a4 <xTaskGetSchedulerState>
 800d5ca:	4605      	mov	r5, r0
 800d5cc:	b318      	cbz	r0, 800d616 <xQueueReceive+0x86>
 800d5ce:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d5d0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d5d4:	f7ff fb6e 	bl	800ccb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5d8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5da:	b347      	cbz	r7, 800d62e <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5dc:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5de:	4631      	mov	r1, r6
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f7ff fce5 	bl	800cfb0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5e6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5e8:	6923      	ldr	r3, [r4, #16]
 800d5ea:	b173      	cbz	r3, 800d60a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5ec:	f104 0010 	add.w	r0, r4, #16
 800d5f0:	f000 fdc2 	bl	800e178 <xTaskRemoveFromEventList>
 800d5f4:	b148      	cbz	r0, 800d60a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800d5f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d5fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d602:	f3bf 8f4f 	dsb	sy
 800d606:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d60a:	f7ff fb73 	bl	800ccf4 <vPortExitCritical>
				return pdPASS;
 800d60e:	2001      	movs	r0, #1
}
 800d610:	b004      	add	sp, #16
 800d612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d0d9      	beq.n	800d5d0 <xQueueReceive+0x40>
 800d61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	e7fe      	b.n	800d62c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d62e:	9b01      	ldr	r3, [sp, #4]
 800d630:	b91b      	cbnz	r3, 800d63a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800d632:	f7ff fb5f 	bl	800ccf4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d636:	2000      	movs	r0, #0
 800d638:	e7ea      	b.n	800d610 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800d63a:	b915      	cbnz	r5, 800d642 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d63c:	a802      	add	r0, sp, #8
 800d63e:	f000 fddd 	bl	800e1fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d642:	f7ff fb57 	bl	800ccf4 <vPortExitCritical>
		vTaskSuspendAll();
 800d646:	f000 fb99 	bl	800dd7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d64a:	f7ff fb33 	bl	800ccb4 <vPortEnterCritical>
 800d64e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d652:	2bff      	cmp	r3, #255	@ 0xff
 800d654:	d101      	bne.n	800d65a <xQueueReceive+0xca>
 800d656:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800d65a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d65e:	2bff      	cmp	r3, #255	@ 0xff
 800d660:	d101      	bne.n	800d666 <xQueueReceive+0xd6>
 800d662:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800d666:	f7ff fb45 	bl	800ccf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d66a:	a901      	add	r1, sp, #4
 800d66c:	a802      	add	r0, sp, #8
 800d66e:	f000 fdd1 	bl	800e214 <xTaskCheckForTimeOut>
 800d672:	bb00      	cbnz	r0, 800d6b6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d674:	4620      	mov	r0, r4
 800d676:	f7ff fc5d 	bl	800cf34 <prvIsQueueEmpty>
 800d67a:	b1b0      	cbz	r0, 800d6aa <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d67c:	9901      	ldr	r1, [sp, #4]
 800d67e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d682:	f000 fd41 	bl	800e108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d686:	4620      	mov	r0, r4
 800d688:	f7ff fca7 	bl	800cfda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d68c:	f000 fc1a 	bl	800dec4 <xTaskResumeAll>
 800d690:	b948      	cbnz	r0, 800d6a6 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800d692:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d69a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	2501      	movs	r5, #1
 800d6a8:	e794      	b.n	800d5d4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f7ff fc95 	bl	800cfda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6b0:	f000 fc08 	bl	800dec4 <xTaskResumeAll>
 800d6b4:	e7f7      	b.n	800d6a6 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f7ff fc8f 	bl	800cfda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6bc:	f000 fc02 	bl	800dec4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f7ff fc37 	bl	800cf34 <prvIsQueueEmpty>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d0ed      	beq.n	800d6a6 <xQueueReceive+0x116>
 800d6ca:	e7b4      	b.n	800d636 <xQueueReceive+0xa6>

0800d6cc <xQueueSemaphoreTake>:
{
 800d6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ce:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800d6d0:	4604      	mov	r4, r0
{
 800d6d2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d6d4:	b940      	cbnz	r0, 800d6e8 <xQueueSemaphoreTake+0x1c>
 800d6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	e7fe      	b.n	800d6e6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d6e8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800d6ea:	b145      	cbz	r5, 800d6fe <xQueueSemaphoreTake+0x32>
 800d6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	e7fe      	b.n	800d6fc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6fe:	f000 fdd1 	bl	800e2a4 <xTaskGetSchedulerState>
 800d702:	4606      	mov	r6, r0
 800d704:	b320      	cbz	r0, 800d750 <xQueueSemaphoreTake+0x84>
 800d706:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800d708:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800d70a:	f7ff fad3 	bl	800ccb4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d70e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d710:	b353      	cbz	r3, 800d768 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d712:	3b01      	subs	r3, #1
 800d714:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d716:	6823      	ldr	r3, [r4, #0]
 800d718:	b913      	cbnz	r3, 800d720 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d71a:	f000 fea1 	bl	800e460 <pvTaskIncrementMutexHeldCount>
 800d71e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	b173      	cbz	r3, 800d742 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d724:	f104 0010 	add.w	r0, r4, #16
 800d728:	f000 fd26 	bl	800e178 <xTaskRemoveFromEventList>
 800d72c:	b148      	cbz	r0, 800d742 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800d72e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d736:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d742:	f7ff fad7 	bl	800ccf4 <vPortExitCritical>
				return pdPASS;
 800d746:	2001      	movs	r0, #1
}
 800d748:	b005      	add	sp, #20
 800d74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d74c:	4635      	mov	r5, r6
 800d74e:	e7db      	b.n	800d708 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d750:	9b01      	ldr	r3, [sp, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d0fa      	beq.n	800d74c <xQueueSemaphoreTake+0x80>
 800d756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	e7fe      	b.n	800d766 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d768:	9b01      	ldr	r3, [sp, #4]
 800d76a:	b953      	cbnz	r3, 800d782 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d76c:	2d00      	cmp	r5, #0
 800d76e:	d066      	beq.n	800d83e <xQueueSemaphoreTake+0x172>
 800d770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	e7fe      	b.n	800d780 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800d782:	b916      	cbnz	r6, 800d78a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d784:	a802      	add	r0, sp, #8
 800d786:	f000 fd39 	bl	800e1fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d78a:	f7ff fab3 	bl	800ccf4 <vPortExitCritical>
		vTaskSuspendAll();
 800d78e:	f000 faf5 	bl	800dd7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d792:	f7ff fa8f 	bl	800ccb4 <vPortEnterCritical>
 800d796:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d79a:	2bff      	cmp	r3, #255	@ 0xff
 800d79c:	d101      	bne.n	800d7a2 <xQueueSemaphoreTake+0xd6>
 800d79e:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800d7a2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d7a6:	2bff      	cmp	r3, #255	@ 0xff
 800d7a8:	d101      	bne.n	800d7ae <xQueueSemaphoreTake+0xe2>
 800d7aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7ae:	f7ff faa1 	bl	800ccf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7b2:	a901      	add	r1, sp, #4
 800d7b4:	a802      	add	r0, sp, #8
 800d7b6:	f000 fd2d 	bl	800e214 <xTaskCheckForTimeOut>
 800d7ba:	bb50      	cbnz	r0, 800d812 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f7ff fbb9 	bl	800cf34 <prvIsQueueEmpty>
 800d7c2:	b300      	cbz	r0, 800d806 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	b93b      	cbnz	r3, 800d7d8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800d7c8:	f7ff fa74 	bl	800ccb4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7cc:	68a0      	ldr	r0, [r4, #8]
 800d7ce:	f000 fd79 	bl	800e2c4 <xTaskPriorityInherit>
 800d7d2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800d7d4:	f7ff fa8e 	bl	800ccf4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7d8:	9901      	ldr	r1, [sp, #4]
 800d7da:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d7de:	f000 fc93 	bl	800e108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f7ff fbf9 	bl	800cfda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7e8:	f000 fb6c 	bl	800dec4 <xTaskResumeAll>
 800d7ec:	b948      	cbnz	r0, 800d802 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800d7ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d7f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	2601      	movs	r6, #1
 800d804:	e781      	b.n	800d70a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800d806:	4620      	mov	r0, r4
 800d808:	f7ff fbe7 	bl	800cfda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d80c:	f000 fb5a 	bl	800dec4 <xTaskResumeAll>
 800d810:	e7f7      	b.n	800d802 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800d812:	4620      	mov	r0, r4
 800d814:	f7ff fbe1 	bl	800cfda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d818:	f000 fb54 	bl	800dec4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d81c:	4620      	mov	r0, r4
 800d81e:	f7ff fb89 	bl	800cf34 <prvIsQueueEmpty>
 800d822:	2800      	cmp	r0, #0
 800d824:	d0ed      	beq.n	800d802 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800d826:	b165      	cbz	r5, 800d842 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800d828:	f7ff fa44 	bl	800ccb4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d82c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d82e:	b119      	cbz	r1, 800d838 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d830:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d832:	6819      	ldr	r1, [r3, #0]
 800d834:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d838:	68a0      	ldr	r0, [r4, #8]
 800d83a:	f000 fdc3 	bl	800e3c4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800d83e:	f7ff fa59 	bl	800ccf4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d842:	2000      	movs	r0, #0
 800d844:	e780      	b.n	800d748 <xQueueSemaphoreTake+0x7c>

0800d846 <xQueueTakeMutexRecursive>:
	{
 800d846:	b570      	push	{r4, r5, r6, lr}
 800d848:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800d84a:	4604      	mov	r4, r0
 800d84c:	b940      	cbnz	r0, 800d860 <xQueueTakeMutexRecursive+0x1a>
 800d84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	e7fe      	b.n	800d85e <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d860:	6886      	ldr	r6, [r0, #8]
 800d862:	f000 fd19 	bl	800e298 <xTaskGetCurrentTaskHandle>
 800d866:	4286      	cmp	r6, r0
 800d868:	d104      	bne.n	800d874 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d86a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800d86c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d86e:	3301      	adds	r3, #1
 800d870:	60e3      	str	r3, [r4, #12]
	}
 800d872:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d874:	4629      	mov	r1, r5
 800d876:	4620      	mov	r0, r4
 800d878:	f7ff ff28 	bl	800d6cc <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d0f8      	beq.n	800d872 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d880:	68e3      	ldr	r3, [r4, #12]
 800d882:	3301      	adds	r3, #1
 800d884:	60e3      	str	r3, [r4, #12]
 800d886:	e7f4      	b.n	800d872 <xQueueTakeMutexRecursive+0x2c>

0800d888 <xQueueReceiveFromISR>:
{
 800d888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d88c:	4689      	mov	r9, r1
 800d88e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800d890:	4604      	mov	r4, r0
 800d892:	b940      	cbnz	r0, 800d8a6 <xQueueReceiveFromISR+0x1e>
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	e7fe      	b.n	800d8a4 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8a6:	b951      	cbnz	r1, 800d8be <xQueueReceiveFromISR+0x36>
 800d8a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d8aa:	b143      	cbz	r3, 800d8be <xQueueReceiveFromISR+0x36>
 800d8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	e7fe      	b.n	800d8bc <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8be:	f7ff fb0b 	bl	800ced8 <vPortValidateInterruptPriority>
	__asm volatile
 800d8c2:	f3ef 8711 	mrs	r7, BASEPRI
 800d8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8d6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8d8:	b30d      	cbz	r5, 800d91e <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d8da:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8de:	4649      	mov	r1, r9
 800d8e0:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8e2:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800d8e4:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8e6:	f7ff fb63 	bl	800cfb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8ea:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800d8ec:	1c73      	adds	r3, r6, #1
 800d8ee:	d111      	bne.n	800d914 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8f0:	6923      	ldr	r3, [r4, #16]
 800d8f2:	b153      	cbz	r3, 800d90a <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8f4:	f104 0010 	add.w	r0, r4, #16
 800d8f8:	f000 fc3e 	bl	800e178 <xTaskRemoveFromEventList>
 800d8fc:	b128      	cbz	r0, 800d90a <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800d8fe:	f1b8 0f00 	cmp.w	r8, #0
 800d902:	d002      	beq.n	800d90a <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d904:	2301      	movs	r3, #1
 800d906:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800d90a:	2001      	movs	r0, #1
	__asm volatile
 800d90c:	f387 8811 	msr	BASEPRI, r7
}
 800d910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d914:	3601      	adds	r6, #1
 800d916:	b276      	sxtb	r6, r6
 800d918:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800d91c:	e7f5      	b.n	800d90a <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800d91e:	4628      	mov	r0, r5
 800d920:	e7f4      	b.n	800d90c <xQueueReceiveFromISR+0x84>
	...

0800d924 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d924:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d926:	4a07      	ldr	r2, [pc, #28]	@ (800d944 <vQueueAddToRegistry+0x20>)
	{
 800d928:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d92a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800d92e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800d932:	b91d      	cbnz	r5, 800d93c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d934:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d938:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d93a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d93c:	3301      	adds	r3, #1
 800d93e:	2b08      	cmp	r3, #8
 800d940:	d1f3      	bne.n	800d92a <vQueueAddToRegistry+0x6>
 800d942:	e7fa      	b.n	800d93a <vQueueAddToRegistry+0x16>
 800d944:	24024b7c 	.word	0x24024b7c

0800d948 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d948:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d94a:	4a09      	ldr	r2, [pc, #36]	@ (800d970 <vQueueUnregisterQueue+0x28>)
	{
 800d94c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d94e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d952:	00dc      	lsls	r4, r3, #3
 800d954:	4281      	cmp	r1, r0
 800d956:	d106      	bne.n	800d966 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d958:	4a06      	ldr	r2, [pc, #24]	@ (800d974 <vQueueUnregisterQueue+0x2c>)
 800d95a:	2100      	movs	r1, #0
 800d95c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d960:	4422      	add	r2, r4
 800d962:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d964:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d966:	3301      	adds	r3, #1
 800d968:	2b08      	cmp	r3, #8
 800d96a:	d1f0      	bne.n	800d94e <vQueueUnregisterQueue+0x6>
 800d96c:	e7fa      	b.n	800d964 <vQueueUnregisterQueue+0x1c>
 800d96e:	bf00      	nop
 800d970:	24024b80 	.word	0x24024b80
 800d974:	24024b7c 	.word	0x24024b7c

0800d978 <vQueueDelete>:
{
 800d978:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800d97a:	b940      	cbnz	r0, 800d98e <vQueueDelete+0x16>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	e7fe      	b.n	800d98c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800d98e:	f7ff ffdb 	bl	800d948 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d992:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800d996:	b91b      	cbnz	r3, 800d9a0 <vQueueDelete+0x28>
}
 800d998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800d99c:	f7ff b8a6 	b.w	800caec <vPortFree>
}
 800d9a0:	bd10      	pop	{r4, pc}

0800d9a2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9a2:	b570      	push	{r4, r5, r6, lr}
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	460d      	mov	r5, r1
 800d9a8:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d9aa:	f7ff f983 	bl	800ccb4 <vPortEnterCritical>
 800d9ae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d9b2:	2bff      	cmp	r3, #255	@ 0xff
 800d9b4:	d102      	bne.n	800d9bc <vQueueWaitForMessageRestricted+0x1a>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d9bc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d9c0:	2bff      	cmp	r3, #255	@ 0xff
 800d9c2:	d102      	bne.n	800d9ca <vQueueWaitForMessageRestricted+0x28>
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d9ca:	f7ff f993 	bl	800ccf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d9ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d9d0:	b92b      	cbnz	r3, 800d9de <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d9d2:	4632      	mov	r2, r6
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d9da:	f000 fbaf 	bl	800e13c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d9de:	4620      	mov	r0, r4
	}
 800d9e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800d9e4:	f7ff baf9 	b.w	800cfda <prvUnlockQueue>

0800d9e8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ec:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9ee:	f7ff f961 	bl	800ccb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9f2:	4b2f      	ldr	r3, [pc, #188]	@ (800dab0 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800d9f4:	4e2f      	ldr	r6, [pc, #188]	@ (800dab4 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	4f2f      	ldr	r7, [pc, #188]	@ (800dab8 <prvAddNewTaskToReadyList+0xd0>)
 800d9fa:	3201      	adds	r2, #1
 800d9fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800d9fe:	6835      	ldr	r5, [r6, #0]
 800da00:	2d00      	cmp	r5, #0
 800da02:	d14a      	bne.n	800da9a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da04:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d11f      	bne.n	800da4c <prvAddNewTaskToReadyList+0x64>
 800da0c:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da0e:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da10:	4640      	mov	r0, r8
 800da12:	f7ff f8a9 	bl	800cb68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da16:	f108 0814 	add.w	r8, r8, #20
 800da1a:	2d38      	cmp	r5, #56	@ 0x38
 800da1c:	d1f7      	bne.n	800da0e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da1e:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800dae0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800da22:	4d26      	ldr	r5, [pc, #152]	@ (800dabc <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800da24:	4640      	mov	r0, r8
 800da26:	f7ff f89f 	bl	800cb68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da2a:	4628      	mov	r0, r5
 800da2c:	f7ff f89c 	bl	800cb68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da30:	4823      	ldr	r0, [pc, #140]	@ (800dac0 <prvAddNewTaskToReadyList+0xd8>)
 800da32:	f7ff f899 	bl	800cb68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da36:	4823      	ldr	r0, [pc, #140]	@ (800dac4 <prvAddNewTaskToReadyList+0xdc>)
 800da38:	f7ff f896 	bl	800cb68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da3c:	4822      	ldr	r0, [pc, #136]	@ (800dac8 <prvAddNewTaskToReadyList+0xe0>)
 800da3e:	f7ff f893 	bl	800cb68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da42:	4b22      	ldr	r3, [pc, #136]	@ (800dacc <prvAddNewTaskToReadyList+0xe4>)
 800da44:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da48:	4b21      	ldr	r3, [pc, #132]	@ (800dad0 <prvAddNewTaskToReadyList+0xe8>)
 800da4a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800da4c:	4a21      	ldr	r2, [pc, #132]	@ (800dad4 <prvAddNewTaskToReadyList+0xec>)
 800da4e:	6813      	ldr	r3, [r2, #0]
 800da50:	3301      	adds	r3, #1
 800da52:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800da54:	4a20      	ldr	r2, [pc, #128]	@ (800dad8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800da56:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800da58:	6811      	ldr	r1, [r2, #0]
 800da5a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800da5c:	428b      	cmp	r3, r1
 800da5e:	d900      	bls.n	800da62 <prvAddNewTaskToReadyList+0x7a>
 800da60:	6013      	str	r3, [r2, #0]
 800da62:	2014      	movs	r0, #20
 800da64:	1d21      	adds	r1, r4, #4
 800da66:	fb00 7003 	mla	r0, r0, r3, r7
 800da6a:	f7ff f88b 	bl	800cb84 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800da6e:	f7ff f941 	bl	800ccf4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800da72:	4b1a      	ldr	r3, [pc, #104]	@ (800dadc <prvAddNewTaskToReadyList+0xf4>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	b173      	cbz	r3, 800da96 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da78:	6833      	ldr	r3, [r6, #0]
 800da7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800da7e:	429a      	cmp	r2, r3
 800da80:	d209      	bcs.n	800da96 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800da82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800da86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	f3bf 8f6f 	isb	sy
}
 800da96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800da9a:	4b10      	ldr	r3, [pc, #64]	@ (800dadc <prvAddNewTaskToReadyList+0xf4>)
 800da9c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da9e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800daa0:	2a00      	cmp	r2, #0
 800daa2:	d1d3      	bne.n	800da4c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800daa4:	6832      	ldr	r2, [r6, #0]
 800daa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d8cf      	bhi.n	800da4c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800daac:	6034      	str	r4, [r6, #0]
 800daae:	e7cd      	b.n	800da4c <prvAddNewTaskToReadyList+0x64>
 800dab0:	24024be0 	.word	0x24024be0
 800dab4:	240250b4 	.word	0x240250b4
 800dab8:	24024c54 	.word	0x24024c54
 800dabc:	24024c2c 	.word	0x24024c2c
 800dac0:	24024c10 	.word	0x24024c10
 800dac4:	24024bfc 	.word	0x24024bfc
 800dac8:	24024be4 	.word	0x24024be4
 800dacc:	24024c28 	.word	0x24024c28
 800dad0:	24024c24 	.word	0x24024c24
 800dad4:	24024bc4 	.word	0x24024bc4
 800dad8:	24024bd8 	.word	0x24024bd8
 800dadc:	24024bd4 	.word	0x24024bd4
 800dae0:	24024c40 	.word	0x24024c40

0800dae4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dae6:	4b15      	ldr	r3, [pc, #84]	@ (800db3c <prvAddCurrentTaskToDelayedList+0x58>)
{
 800dae8:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daea:	4d15      	ldr	r5, [pc, #84]	@ (800db40 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800daec:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800daee:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daf0:	6828      	ldr	r0, [r5, #0]
 800daf2:	3004      	adds	r0, #4
 800daf4:	f7ff f868 	bl	800cbc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800daf8:	1c73      	adds	r3, r6, #1
 800dafa:	d107      	bne.n	800db0c <prvAddCurrentTaskToDelayedList+0x28>
 800dafc:	b137      	cbz	r7, 800db0c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dafe:	6829      	ldr	r1, [r5, #0]
 800db00:	4810      	ldr	r0, [pc, #64]	@ (800db44 <prvAddCurrentTaskToDelayedList+0x60>)
 800db02:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db08:	f7ff b83c 	b.w	800cb84 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db0c:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db0e:	682b      	ldr	r3, [r5, #0]
 800db10:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db12:	d307      	bcc.n	800db24 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db14:	4b0c      	ldr	r3, [pc, #48]	@ (800db48 <prvAddCurrentTaskToDelayedList+0x64>)
 800db16:	6818      	ldr	r0, [r3, #0]
 800db18:	6829      	ldr	r1, [r5, #0]
}
 800db1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db1e:	3104      	adds	r1, #4
 800db20:	f7ff b83b 	b.w	800cb9a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db24:	4b09      	ldr	r3, [pc, #36]	@ (800db4c <prvAddCurrentTaskToDelayedList+0x68>)
 800db26:	6818      	ldr	r0, [r3, #0]
 800db28:	6829      	ldr	r1, [r5, #0]
 800db2a:	3104      	adds	r1, #4
 800db2c:	f7ff f835 	bl	800cb9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db30:	4b07      	ldr	r3, [pc, #28]	@ (800db50 <prvAddCurrentTaskToDelayedList+0x6c>)
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	42a2      	cmp	r2, r4
 800db36:	d900      	bls.n	800db3a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800db38:	601c      	str	r4, [r3, #0]
}
 800db3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db3c:	24024bdc 	.word	0x24024bdc
 800db40:	240250b4 	.word	0x240250b4
 800db44:	24024be4 	.word	0x24024be4
 800db48:	24024c24 	.word	0x24024c24
 800db4c:	24024c28 	.word	0x24024c28
 800db50:	24024bc0 	.word	0x24024bc0

0800db54 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db54:	4a06      	ldr	r2, [pc, #24]	@ (800db70 <prvResetNextTaskUnblockTime+0x1c>)
 800db56:	6813      	ldr	r3, [r2, #0]
 800db58:	6819      	ldr	r1, [r3, #0]
 800db5a:	4b06      	ldr	r3, [pc, #24]	@ (800db74 <prvResetNextTaskUnblockTime+0x20>)
 800db5c:	b919      	cbnz	r1, 800db66 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800db5e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db62:	601a      	str	r2, [r3, #0]
}
 800db64:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db66:	6812      	ldr	r2, [r2, #0]
 800db68:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db6a:	68d2      	ldr	r2, [r2, #12]
 800db6c:	6852      	ldr	r2, [r2, #4]
 800db6e:	e7f8      	b.n	800db62 <prvResetNextTaskUnblockTime+0xe>
 800db70:	24024c28 	.word	0x24024c28
 800db74:	24024bc0 	.word	0x24024bc0

0800db78 <prvDeleteTCB>:
	{
 800db78:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db7a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800db7e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db80:	b93b      	cbnz	r3, 800db92 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800db82:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800db84:	f7fe ffb2 	bl	800caec <vPortFree>
				vPortFree( pxTCB );
 800db88:	4620      	mov	r0, r4
	}
 800db8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800db8e:	f7fe bfad 	b.w	800caec <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800db92:	2b01      	cmp	r3, #1
 800db94:	d0f9      	beq.n	800db8a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db96:	2b02      	cmp	r3, #2
 800db98:	d008      	beq.n	800dbac <prvDeleteTCB+0x34>
 800db9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	e7fe      	b.n	800dbaa <prvDeleteTCB+0x32>
	}
 800dbac:	bd10      	pop	{r4, pc}
	...

0800dbb0 <prvIdleTask>:
{
 800dbb0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbb2:	4c14      	ldr	r4, [pc, #80]	@ (800dc04 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbb4:	4f14      	ldr	r7, [pc, #80]	@ (800dc08 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800dbb6:	4d15      	ldr	r5, [pc, #84]	@ (800dc0c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbb8:	6823      	ldr	r3, [r4, #0]
 800dbba:	b983      	cbnz	r3, 800dbde <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dbbc:	4b14      	ldr	r3, [pc, #80]	@ (800dc10 <prvIdleTask+0x60>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d909      	bls.n	800dbd8 <prvIdleTask+0x28>
				taskYIELD();
 800dbc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dbc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbcc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800dbd8:	f7f2 fd8e 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800dbdc:	e7eb      	b.n	800dbb6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800dbde:	f7ff f869 	bl	800ccb4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbe6:	1d30      	adds	r0, r6, #4
 800dbe8:	f7fe ffee 	bl	800cbc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800dbf8:	f7ff f87c 	bl	800ccf4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7ff ffbb 	bl	800db78 <prvDeleteTCB>
 800dc02:	e7d9      	b.n	800dbb8 <prvIdleTask+0x8>
 800dc04:	24024bf8 	.word	0x24024bf8
 800dc08:	24024bfc 	.word	0x24024bfc
 800dc0c:	24024be0 	.word	0x24024be0
 800dc10:	24024c54 	.word	0x24024c54

0800dc14 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc18:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dc1a:	4607      	mov	r7, r0
 800dc1c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc1e:	21a5      	movs	r1, #165	@ 0xa5
 800dc20:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dc22:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc24:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dc26:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc2a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800dc2c:	f015 fc0c 	bl	8023448 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dc32:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc34:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800dc38:	b3b5      	cbz	r5, 800dca8 <prvInitialiseNewTask.constprop.0+0x94>
 800dc3a:	1e6b      	subs	r3, r5, #1
 800dc3c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800dc40:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc42:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dc46:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800dc4a:	b109      	cbz	r1, 800dc50 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc4c:	42ab      	cmp	r3, r5
 800dc4e:	d1f8      	bne.n	800dc42 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc50:	2300      	movs	r3, #0
 800dc52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc56:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800dc58:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc5c:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc5e:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800dc60:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc64:	bf28      	it	cs
 800dc66:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800dc68:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800dc6a:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc6c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc70:	f7fe ff85 	bl	800cb7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc74:	f104 0018 	add.w	r0, r4, #24
 800dc78:	f7fe ff81 	bl	800cb7e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800dc7c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc80:	4642      	mov	r2, r8
 800dc82:	4639      	mov	r1, r7
 800dc84:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc86:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc88:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc8a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800dc8c:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc90:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc94:	f7fe ffe6 	bl	800cc64 <pxPortInitialiseStack>
 800dc98:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800dc9a:	f1b9 0f00 	cmp.w	r9, #0
 800dc9e:	d001      	beq.n	800dca4 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dca0:	f8c9 4000 	str.w	r4, [r9]
}
 800dca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dca8:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800dcac:	e7d3      	b.n	800dc56 <prvInitialiseNewTask.constprop.0+0x42>

0800dcae <xTaskCreateStatic>:
	{
 800dcae:	b570      	push	{r4, r5, r6, lr}
 800dcb0:	b086      	sub	sp, #24
 800dcb2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800dcb6:	b945      	cbnz	r5, 800dcca <xTaskCreateStatic+0x1c>
 800dcb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcbc:	f383 8811 	msr	BASEPRI, r3
 800dcc0:	f3bf 8f6f 	isb	sy
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	e7fe      	b.n	800dcc8 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800dcca:	b944      	cbnz	r4, 800dcde <xTaskCreateStatic+0x30>
 800dccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	e7fe      	b.n	800dcdc <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800dcde:	2660      	movs	r6, #96	@ 0x60
 800dce0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dce2:	9e05      	ldr	r6, [sp, #20]
 800dce4:	2e60      	cmp	r6, #96	@ 0x60
 800dce6:	d008      	beq.n	800dcfa <xTaskCreateStatic+0x4c>
 800dce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	e7fe      	b.n	800dcf8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dcfa:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dcfc:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dcfe:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd00:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd04:	ad04      	add	r5, sp, #16
 800dd06:	9402      	str	r4, [sp, #8]
 800dd08:	9501      	str	r5, [sp, #4]
 800dd0a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800dd0c:	9500      	str	r5, [sp, #0]
 800dd0e:	f7ff ff81 	bl	800dc14 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd12:	4620      	mov	r0, r4
 800dd14:	f7ff fe68 	bl	800d9e8 <prvAddNewTaskToReadyList>
	}
 800dd18:	9804      	ldr	r0, [sp, #16]
 800dd1a:	b006      	add	sp, #24
 800dd1c:	bd70      	pop	{r4, r5, r6, pc}

0800dd1e <xTaskCreate>:
	{
 800dd1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd22:	4607      	mov	r7, r0
 800dd24:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd26:	0090      	lsls	r0, r2, #2
	{
 800dd28:	4688      	mov	r8, r1
 800dd2a:	4616      	mov	r6, r2
 800dd2c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd2e:	f7fe fe45 	bl	800c9bc <pvPortMalloc>
			if( pxStack != NULL )
 800dd32:	4605      	mov	r5, r0
 800dd34:	b920      	cbnz	r0, 800dd40 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd36:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800dd3a:	b005      	add	sp, #20
 800dd3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd40:	2060      	movs	r0, #96	@ 0x60
 800dd42:	f7fe fe3b 	bl	800c9bc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800dd46:	4604      	mov	r4, r0
 800dd48:	b198      	cbz	r0, 800dd72 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd4a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800dd4c:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd4e:	4632      	mov	r2, r6
 800dd50:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd52:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd58:	9002      	str	r0, [sp, #8]
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd60:	9300      	str	r3, [sp, #0]
 800dd62:	464b      	mov	r3, r9
 800dd64:	f7ff ff56 	bl	800dc14 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f7ff fe3d 	bl	800d9e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd6e:	2001      	movs	r0, #1
 800dd70:	e7e3      	b.n	800dd3a <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800dd72:	4628      	mov	r0, r5
 800dd74:	f7fe feba 	bl	800caec <vPortFree>
		if( pxNewTCB != NULL )
 800dd78:	e7dd      	b.n	800dd36 <xTaskCreate+0x18>
	...

0800dd7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800dd7c:	4a02      	ldr	r2, [pc, #8]	@ (800dd88 <vTaskSuspendAll+0xc>)
 800dd7e:	6813      	ldr	r3, [r2, #0]
 800dd80:	3301      	adds	r3, #1
 800dd82:	6013      	str	r3, [r2, #0]
}
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	24024bbc 	.word	0x24024bbc

0800dd8c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800dd8c:	4b01      	ldr	r3, [pc, #4]	@ (800dd94 <xTaskGetTickCount+0x8>)
 800dd8e:	6818      	ldr	r0, [r3, #0]
}
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	24024bdc 	.word	0x24024bdc

0800dd98 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd98:	4b3f      	ldr	r3, [pc, #252]	@ (800de98 <xTaskIncrementTick+0x100>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
{
 800dd9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d172      	bne.n	800de8a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dda4:	4b3d      	ldr	r3, [pc, #244]	@ (800de9c <xTaskIncrementTick+0x104>)
 800dda6:	681c      	ldr	r4, [r3, #0]
 800dda8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800ddaa:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ddac:	b9bc      	cbnz	r4, 800ddde <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800ddae:	4b3c      	ldr	r3, [pc, #240]	@ (800dea0 <xTaskIncrementTick+0x108>)
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	6812      	ldr	r2, [r2, #0]
 800ddb4:	b142      	cbz	r2, 800ddc8 <xTaskIncrementTick+0x30>
 800ddb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddba:	f383 8811 	msr	BASEPRI, r3
 800ddbe:	f3bf 8f6f 	isb	sy
 800ddc2:	f3bf 8f4f 	dsb	sy
 800ddc6:	e7fe      	b.n	800ddc6 <xTaskIncrementTick+0x2e>
 800ddc8:	4a36      	ldr	r2, [pc, #216]	@ (800dea4 <xTaskIncrementTick+0x10c>)
 800ddca:	6819      	ldr	r1, [r3, #0]
 800ddcc:	6810      	ldr	r0, [r2, #0]
 800ddce:	6018      	str	r0, [r3, #0]
 800ddd0:	6011      	str	r1, [r2, #0]
 800ddd2:	4a35      	ldr	r2, [pc, #212]	@ (800dea8 <xTaskIncrementTick+0x110>)
 800ddd4:	6813      	ldr	r3, [r2, #0]
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	6013      	str	r3, [r2, #0]
 800ddda:	f7ff febb 	bl	800db54 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ddde:	4d33      	ldr	r5, [pc, #204]	@ (800deac <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800dde0:	f04f 0b00 	mov.w	fp, #0
 800dde4:	4e32      	ldr	r6, [pc, #200]	@ (800deb0 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dde6:	682b      	ldr	r3, [r5, #0]
 800dde8:	4f32      	ldr	r7, [pc, #200]	@ (800deb4 <xTaskIncrementTick+0x11c>)
 800ddea:	429c      	cmp	r4, r3
 800ddec:	d212      	bcs.n	800de14 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddee:	683a      	ldr	r2, [r7, #0]
 800ddf0:	2114      	movs	r1, #20
 800ddf2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ddf4:	434a      	muls	r2, r1
 800ddf6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800ddf8:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800ddfa:	4a2f      	ldr	r2, [pc, #188]	@ (800deb8 <xTaskIncrementTick+0x120>)
 800ddfc:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800ddfe:	bf28      	it	cs
 800de00:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800de04:	2a00      	cmp	r2, #0
 800de06:	bf18      	it	ne
 800de08:	f04f 0b01 	movne.w	fp, #1
}
 800de0c:	4658      	mov	r0, fp
 800de0e:	b003      	add	sp, #12
 800de10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de14:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800dea0 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800de18:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800dec0 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de1c:	f8d9 2000 	ldr.w	r2, [r9]
 800de20:	6812      	ldr	r2, [r2, #0]
 800de22:	b91a      	cbnz	r2, 800de2c <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de24:	f04f 32ff 	mov.w	r2, #4294967295
 800de28:	602a      	str	r2, [r5, #0]
					break;
 800de2a:	e7e0      	b.n	800ddee <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de2c:	f8d9 2000 	ldr.w	r2, [r9]
 800de30:	68d2      	ldr	r2, [r2, #12]
 800de32:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de36:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800de3a:	428c      	cmp	r4, r1
 800de3c:	d201      	bcs.n	800de42 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800de3e:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de40:	e7d5      	b.n	800ddee <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de42:	f108 0304 	add.w	r3, r8, #4
 800de46:	4618      	mov	r0, r3
 800de48:	9301      	str	r3, [sp, #4]
 800de4a:	f7fe febd 	bl	800cbc8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de4e:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800de52:	b119      	cbz	r1, 800de5c <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de54:	f108 0018 	add.w	r0, r8, #24
 800de58:	f7fe feb6 	bl	800cbc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de5c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800de60:	f8da 1000 	ldr.w	r1, [sl]
 800de64:	4288      	cmp	r0, r1
 800de66:	d901      	bls.n	800de6c <xTaskIncrementTick+0xd4>
 800de68:	f8ca 0000 	str.w	r0, [sl]
 800de6c:	2314      	movs	r3, #20
 800de6e:	9901      	ldr	r1, [sp, #4]
 800de70:	fb03 6000 	mla	r0, r3, r0, r6
 800de74:	f7fe fe86 	bl	800cb84 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de78:	6838      	ldr	r0, [r7, #0]
 800de7a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800de7e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800de80:	4291      	cmp	r1, r2
 800de82:	bf28      	it	cs
 800de84:	f04f 0b01 	movcs.w	fp, #1
 800de88:	e7c8      	b.n	800de1c <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800de8a:	4a0c      	ldr	r2, [pc, #48]	@ (800debc <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800de8c:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800de90:	6813      	ldr	r3, [r2, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	6013      	str	r3, [r2, #0]
 800de96:	e7b9      	b.n	800de0c <xTaskIncrementTick+0x74>
 800de98:	24024bbc 	.word	0x24024bbc
 800de9c:	24024bdc 	.word	0x24024bdc
 800dea0:	24024c28 	.word	0x24024c28
 800dea4:	24024c24 	.word	0x24024c24
 800dea8:	24024bc8 	.word	0x24024bc8
 800deac:	24024bc0 	.word	0x24024bc0
 800deb0:	24024c54 	.word	0x24024c54
 800deb4:	240250b4 	.word	0x240250b4
 800deb8:	24024bcc 	.word	0x24024bcc
 800debc:	24024bd0 	.word	0x24024bd0
 800dec0:	24024bd8 	.word	0x24024bd8

0800dec4 <xTaskResumeAll>:
{
 800dec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800dec8:	4c30      	ldr	r4, [pc, #192]	@ (800df8c <xTaskResumeAll+0xc8>)
 800deca:	6823      	ldr	r3, [r4, #0]
 800decc:	b943      	cbnz	r3, 800dee0 <xTaskResumeAll+0x1c>
 800dece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	e7fe      	b.n	800dede <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800dee0:	f7fe fee8 	bl	800ccb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	3b01      	subs	r3, #1
 800dee8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deea:	6824      	ldr	r4, [r4, #0]
 800deec:	b12c      	cbz	r4, 800defa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800deee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800def0:	f7fe ff00 	bl	800ccf4 <vPortExitCritical>
}
 800def4:	4620      	mov	r0, r4
 800def6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800defa:	4b25      	ldr	r3, [pc, #148]	@ (800df90 <xTaskResumeAll+0xcc>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d0f5      	beq.n	800deee <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df02:	4d24      	ldr	r5, [pc, #144]	@ (800df94 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800df04:	4e24      	ldr	r6, [pc, #144]	@ (800df98 <xTaskResumeAll+0xd4>)
 800df06:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800dfa8 <xTaskResumeAll+0xe4>
 800df0a:	e01d      	b.n	800df48 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df0c:	68eb      	ldr	r3, [r5, #12]
 800df0e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df10:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df12:	f104 0018 	add.w	r0, r4, #24
 800df16:	f7fe fe57 	bl	800cbc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df1a:	4638      	mov	r0, r7
 800df1c:	f7fe fe54 	bl	800cbc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800df22:	6832      	ldr	r2, [r6, #0]
 800df24:	4293      	cmp	r3, r2
 800df26:	d900      	bls.n	800df2a <xTaskResumeAll+0x66>
 800df28:	6033      	str	r3, [r6, #0]
 800df2a:	2014      	movs	r0, #20
 800df2c:	4639      	mov	r1, r7
 800df2e:	fb00 8003 	mla	r0, r0, r3, r8
 800df32:	f7fe fe27 	bl	800cb84 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df36:	4b19      	ldr	r3, [pc, #100]	@ (800df9c <xTaskResumeAll+0xd8>)
 800df38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df3e:	429a      	cmp	r2, r3
 800df40:	d302      	bcc.n	800df48 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800df42:	4b17      	ldr	r3, [pc, #92]	@ (800dfa0 <xTaskResumeAll+0xdc>)
 800df44:	2201      	movs	r2, #1
 800df46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df48:	682b      	ldr	r3, [r5, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1de      	bne.n	800df0c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800df4e:	b10c      	cbz	r4, 800df54 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800df50:	f7ff fe00 	bl	800db54 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df54:	4d13      	ldr	r5, [pc, #76]	@ (800dfa4 <xTaskResumeAll+0xe0>)
 800df56:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800df58:	b144      	cbz	r4, 800df6c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800df5a:	4e11      	ldr	r6, [pc, #68]	@ (800dfa0 <xTaskResumeAll+0xdc>)
 800df5c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800df5e:	f7ff ff1b 	bl	800dd98 <xTaskIncrementTick>
 800df62:	b100      	cbz	r0, 800df66 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800df64:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df66:	3c01      	subs	r4, #1
 800df68:	d1f9      	bne.n	800df5e <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800df6a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800df6c:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa0 <xTaskResumeAll+0xdc>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d0bc      	beq.n	800deee <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800df74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800df88:	2401      	movs	r4, #1
 800df8a:	e7b1      	b.n	800def0 <xTaskResumeAll+0x2c>
 800df8c:	24024bbc 	.word	0x24024bbc
 800df90:	24024be0 	.word	0x24024be0
 800df94:	24024c10 	.word	0x24024c10
 800df98:	24024bd8 	.word	0x24024bd8
 800df9c:	240250b4 	.word	0x240250b4
 800dfa0:	24024bcc 	.word	0x24024bcc
 800dfa4:	24024bd0 	.word	0x24024bd0
 800dfa8:	24024c54 	.word	0x24024c54

0800dfac <vTaskSetApplicationTaskTag>:
	{
 800dfac:	b538      	push	{r3, r4, r5, lr}
 800dfae:	460d      	mov	r5, r1
		if( xTask == NULL )
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	b908      	cbnz	r0, 800dfb8 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800dfb4:	4b04      	ldr	r3, [pc, #16]	@ (800dfc8 <vTaskSetApplicationTaskTag+0x1c>)
 800dfb6:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800dfb8:	f7fe fe7c 	bl	800ccb4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800dfbc:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800dfbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800dfc2:	f7fe be97 	b.w	800ccf4 <vPortExitCritical>
 800dfc6:	bf00      	nop
 800dfc8:	240250b4 	.word	0x240250b4

0800dfcc <xTaskCallApplicationTaskHook>:
	{
 800dfcc:	4603      	mov	r3, r0
 800dfce:	4608      	mov	r0, r1
		if( xTask == NULL )
 800dfd0:	b90b      	cbnz	r3, 800dfd6 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800dfd2:	4b03      	ldr	r3, [pc, #12]	@ (800dfe0 <xTaskCallApplicationTaskHook+0x14>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800dfd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfd8:	b103      	cbz	r3, 800dfdc <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800dfda:	4718      	bx	r3
	}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	4770      	bx	lr
 800dfe0:	240250b4 	.word	0x240250b4

0800dfe4 <vTaskStartScheduler>:
{
 800dfe4:	b510      	push	{r4, lr}
 800dfe6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dfe8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dfea:	aa07      	add	r2, sp, #28
 800dfec:	a906      	add	r1, sp, #24
 800dfee:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dff0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dff4:	f7fe fca4 	bl	800c940 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dff8:	9b05      	ldr	r3, [sp, #20]
 800dffa:	9a07      	ldr	r2, [sp, #28]
 800dffc:	9302      	str	r3, [sp, #8]
 800dffe:	9b06      	ldr	r3, [sp, #24]
 800e000:	4919      	ldr	r1, [pc, #100]	@ (800e068 <vTaskStartScheduler+0x84>)
 800e002:	481a      	ldr	r0, [pc, #104]	@ (800e06c <vTaskStartScheduler+0x88>)
 800e004:	e9cd 4300 	strd	r4, r3, [sp]
 800e008:	4623      	mov	r3, r4
 800e00a:	f7ff fe50 	bl	800dcae <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e00e:	b340      	cbz	r0, 800e062 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800e010:	f000 fa84 	bl	800e51c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e014:	2801      	cmp	r0, #1
 800e016:	d119      	bne.n	800e04c <vTaskStartScheduler+0x68>
 800e018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e01c:	f383 8811 	msr	BASEPRI, r3
 800e020:	f3bf 8f6f 	isb	sy
 800e024:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800e028:	f04f 32ff 	mov.w	r2, #4294967295
 800e02c:	4b10      	ldr	r3, [pc, #64]	@ (800e070 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800e02e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800e030:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e032:	4b10      	ldr	r3, [pc, #64]	@ (800e074 <vTaskStartScheduler+0x90>)
 800e034:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e036:	4b10      	ldr	r3, [pc, #64]	@ (800e078 <vTaskStartScheduler+0x94>)
 800e038:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e03a:	4b10      	ldr	r3, [pc, #64]	@ (800e07c <vTaskStartScheduler+0x98>)
 800e03c:	6818      	ldr	r0, [r3, #0]
 800e03e:	f7ff ffc5 	bl	800dfcc <xTaskCallApplicationTaskHook>
}
 800e042:	b008      	add	sp, #32
 800e044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e048:	f7fe bec4 	b.w	800cdd4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e04c:	3001      	adds	r0, #1
 800e04e:	d108      	bne.n	800e062 <vTaskStartScheduler+0x7e>
 800e050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e054:	f383 8811 	msr	BASEPRI, r3
 800e058:	f3bf 8f6f 	isb	sy
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	e7fe      	b.n	800e060 <vTaskStartScheduler+0x7c>
}
 800e062:	b008      	add	sp, #32
 800e064:	bd10      	pop	{r4, pc}
 800e066:	bf00      	nop
 800e068:	08025e0a 	.word	0x08025e0a
 800e06c:	0800dbb1 	.word	0x0800dbb1
 800e070:	24024bc0 	.word	0x24024bc0
 800e074:	24024bd4 	.word	0x24024bd4
 800e078:	24024bdc 	.word	0x24024bdc
 800e07c:	240250b4 	.word	0x240250b4

0800e080 <vTaskSwitchContext>:
{
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e082:	4b1c      	ldr	r3, [pc, #112]	@ (800e0f4 <vTaskSwitchContext+0x74>)
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	4b1c      	ldr	r3, [pc, #112]	@ (800e0f8 <vTaskSwitchContext+0x78>)
 800e088:	b112      	cbz	r2, 800e090 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e08a:	2201      	movs	r2, #1
 800e08c:	601a      	str	r2, [r3, #0]
}
 800e08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800e090:	4c1a      	ldr	r4, [pc, #104]	@ (800e0fc <vTaskSwitchContext+0x7c>)
 800e092:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e094:	4e1a      	ldr	r6, [pc, #104]	@ (800e100 <vTaskSwitchContext+0x80>)
 800e096:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800e098:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800e09a:	6820      	ldr	r0, [r4, #0]
 800e09c:	f7ff ff96 	bl	800dfcc <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a0:	6832      	ldr	r2, [r6, #0]
 800e0a2:	4918      	ldr	r1, [pc, #96]	@ (800e104 <vTaskSwitchContext+0x84>)
 800e0a4:	fb07 f302 	mul.w	r3, r7, r2
 800e0a8:	58cd      	ldr	r5, [r1, r3]
 800e0aa:	18c8      	adds	r0, r1, r3
 800e0ac:	b1ad      	cbz	r5, 800e0da <vTaskSwitchContext+0x5a>
 800e0ae:	6845      	ldr	r5, [r0, #4]
 800e0b0:	3308      	adds	r3, #8
 800e0b2:	686d      	ldr	r5, [r5, #4]
 800e0b4:	440b      	add	r3, r1
 800e0b6:	429d      	cmp	r5, r3
 800e0b8:	6045      	str	r5, [r0, #4]
 800e0ba:	bf04      	itt	eq
 800e0bc:	686b      	ldreq	r3, [r5, #4]
 800e0be:	6043      	streq	r3, [r0, #4]
 800e0c0:	2314      	movs	r3, #20
 800e0c2:	fb03 1102 	mla	r1, r3, r2, r1
 800e0c6:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800e0c8:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800e0d0:	6820      	ldr	r0, [r4, #0]
}
 800e0d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800e0d6:	f7ff bf79 	b.w	800dfcc <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0da:	b942      	cbnz	r2, 800e0ee <vTaskSwitchContext+0x6e>
 800e0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	e7fe      	b.n	800e0ec <vTaskSwitchContext+0x6c>
 800e0ee:	3a01      	subs	r2, #1
 800e0f0:	e7d8      	b.n	800e0a4 <vTaskSwitchContext+0x24>
 800e0f2:	bf00      	nop
 800e0f4:	24024bbc 	.word	0x24024bbc
 800e0f8:	24024bcc 	.word	0x24024bcc
 800e0fc:	240250b4 	.word	0x240250b4
 800e100:	24024bd8 	.word	0x24024bd8
 800e104:	24024c54 	.word	0x24024c54

0800e108 <vTaskPlaceOnEventList>:
{
 800e108:	b510      	push	{r4, lr}
 800e10a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800e10c:	b940      	cbnz	r0, 800e120 <vTaskPlaceOnEventList+0x18>
 800e10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	e7fe      	b.n	800e11e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e120:	4b05      	ldr	r3, [pc, #20]	@ (800e138 <vTaskPlaceOnEventList+0x30>)
 800e122:	6819      	ldr	r1, [r3, #0]
 800e124:	3118      	adds	r1, #24
 800e126:	f7fe fd38 	bl	800cb9a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e12a:	4620      	mov	r0, r4
 800e12c:	2101      	movs	r1, #1
}
 800e12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e132:	f7ff bcd7 	b.w	800dae4 <prvAddCurrentTaskToDelayedList>
 800e136:	bf00      	nop
 800e138:	240250b4 	.word	0x240250b4

0800e13c <vTaskPlaceOnEventListRestricted>:
	{
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	460d      	mov	r5, r1
 800e140:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800e142:	b940      	cbnz	r0, 800e156 <vTaskPlaceOnEventListRestricted+0x1a>
 800e144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	e7fe      	b.n	800e154 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e156:	4b07      	ldr	r3, [pc, #28]	@ (800e174 <vTaskPlaceOnEventListRestricted+0x38>)
 800e158:	6819      	ldr	r1, [r3, #0]
 800e15a:	3118      	adds	r1, #24
 800e15c:	f7fe fd12 	bl	800cb84 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800e160:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e162:	4621      	mov	r1, r4
 800e164:	bf0c      	ite	eq
 800e166:	4628      	moveq	r0, r5
 800e168:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800e16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e170:	f7ff bcb8 	b.w	800dae4 <prvAddCurrentTaskToDelayedList>
 800e174:	240250b4 	.word	0x240250b4

0800e178 <xTaskRemoveFromEventList>:
{
 800e178:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e17a:	68c3      	ldr	r3, [r0, #12]
 800e17c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e17e:	b944      	cbnz	r4, 800e192 <xTaskRemoveFromEventList+0x1a>
 800e180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	e7fe      	b.n	800e190 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e192:	f104 0518 	add.w	r5, r4, #24
 800e196:	4628      	mov	r0, r5
 800e198:	f7fe fd16 	bl	800cbc8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e19c:	4b11      	ldr	r3, [pc, #68]	@ (800e1e4 <xTaskRemoveFromEventList+0x6c>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	b9d3      	cbnz	r3, 800e1d8 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1a2:	1d25      	adds	r5, r4, #4
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	f7fe fd0f 	bl	800cbc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1aa:	4a0f      	ldr	r2, [pc, #60]	@ (800e1e8 <xTaskRemoveFromEventList+0x70>)
 800e1ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e1ae:	6811      	ldr	r1, [r2, #0]
 800e1b0:	428b      	cmp	r3, r1
 800e1b2:	d900      	bls.n	800e1b6 <xTaskRemoveFromEventList+0x3e>
 800e1b4:	6013      	str	r3, [r2, #0]
 800e1b6:	2014      	movs	r0, #20
 800e1b8:	4a0c      	ldr	r2, [pc, #48]	@ (800e1ec <xTaskRemoveFromEventList+0x74>)
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1c0:	f7fe fce0 	bl	800cb84 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e1f0 <xTaskRemoveFromEventList+0x78>)
 800e1c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d906      	bls.n	800e1de <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800e1d0:	2001      	movs	r0, #1
 800e1d2:	4b08      	ldr	r3, [pc, #32]	@ (800e1f4 <xTaskRemoveFromEventList+0x7c>)
 800e1d4:	6018      	str	r0, [r3, #0]
}
 800e1d6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1d8:	4629      	mov	r1, r5
 800e1da:	4807      	ldr	r0, [pc, #28]	@ (800e1f8 <xTaskRemoveFromEventList+0x80>)
 800e1dc:	e7f0      	b.n	800e1c0 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800e1de:	2000      	movs	r0, #0
	return xReturn;
 800e1e0:	e7f9      	b.n	800e1d6 <xTaskRemoveFromEventList+0x5e>
 800e1e2:	bf00      	nop
 800e1e4:	24024bbc 	.word	0x24024bbc
 800e1e8:	24024bd8 	.word	0x24024bd8
 800e1ec:	24024c54 	.word	0x24024c54
 800e1f0:	240250b4 	.word	0x240250b4
 800e1f4:	24024bcc 	.word	0x24024bcc
 800e1f8:	24024c10 	.word	0x24024c10

0800e1fc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1fc:	4b03      	ldr	r3, [pc, #12]	@ (800e20c <vTaskInternalSetTimeOutState+0x10>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e202:	4b03      	ldr	r3, [pc, #12]	@ (800e210 <vTaskInternalSetTimeOutState+0x14>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	6043      	str	r3, [r0, #4]
}
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	24024bc8 	.word	0x24024bc8
 800e210:	24024bdc 	.word	0x24024bdc

0800e214 <xTaskCheckForTimeOut>:
{
 800e214:	b570      	push	{r4, r5, r6, lr}
 800e216:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800e218:	4605      	mov	r5, r0
 800e21a:	b940      	cbnz	r0, 800e22e <xTaskCheckForTimeOut+0x1a>
 800e21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e220:	f383 8811 	msr	BASEPRI, r3
 800e224:	f3bf 8f6f 	isb	sy
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	e7fe      	b.n	800e22c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800e22e:	b941      	cbnz	r1, 800e242 <xTaskCheckForTimeOut+0x2e>
 800e230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	e7fe      	b.n	800e240 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800e242:	f7fe fd37 	bl	800ccb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e246:	4b0f      	ldr	r3, [pc, #60]	@ (800e284 <xTaskCheckForTimeOut+0x70>)
 800e248:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	d010      	beq.n	800e272 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e250:	480d      	ldr	r0, [pc, #52]	@ (800e288 <xTaskCheckForTimeOut+0x74>)
 800e252:	682e      	ldr	r6, [r5, #0]
 800e254:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e256:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e258:	4286      	cmp	r6, r0
 800e25a:	d001      	beq.n	800e260 <xTaskCheckForTimeOut+0x4c>
 800e25c:	428a      	cmp	r2, r1
 800e25e:	d90f      	bls.n	800e280 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e260:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e262:	4283      	cmp	r3, r0
 800e264:	d90a      	bls.n	800e27c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800e266:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e268:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800e26a:	4413      	add	r3, r2
 800e26c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e26e:	f7ff ffc5 	bl	800e1fc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800e272:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e274:	f7fe fd3e 	bl	800ccf4 <vPortExitCritical>
}
 800e278:	4620      	mov	r0, r4
 800e27a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800e27c:	2300      	movs	r3, #0
 800e27e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800e280:	2401      	movs	r4, #1
 800e282:	e7f7      	b.n	800e274 <xTaskCheckForTimeOut+0x60>
 800e284:	24024bdc 	.word	0x24024bdc
 800e288:	24024bc8 	.word	0x24024bc8

0800e28c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e28c:	4b01      	ldr	r3, [pc, #4]	@ (800e294 <vTaskMissedYield+0x8>)
 800e28e:	2201      	movs	r2, #1
 800e290:	601a      	str	r2, [r3, #0]
}
 800e292:	4770      	bx	lr
 800e294:	24024bcc 	.word	0x24024bcc

0800e298 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800e298:	4b01      	ldr	r3, [pc, #4]	@ (800e2a0 <xTaskGetCurrentTaskHandle+0x8>)
 800e29a:	6818      	ldr	r0, [r3, #0]
	}
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	240250b4 	.word	0x240250b4

0800e2a4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e2a4:	4b05      	ldr	r3, [pc, #20]	@ (800e2bc <xTaskGetSchedulerState+0x18>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	b133      	cbz	r3, 800e2b8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2aa:	4b05      	ldr	r3, [pc, #20]	@ (800e2c0 <xTaskGetSchedulerState+0x1c>)
 800e2ac:	6818      	ldr	r0, [r3, #0]
 800e2ae:	fab0 f080 	clz	r0, r0
 800e2b2:	0940      	lsrs	r0, r0, #5
 800e2b4:	0040      	lsls	r0, r0, #1
 800e2b6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e2b8:	2001      	movs	r0, #1
	}
 800e2ba:	4770      	bx	lr
 800e2bc:	24024bd4 	.word	0x24024bd4
 800e2c0:	24024bbc 	.word	0x24024bbc

0800e2c4 <xTaskPriorityInherit>:
	{
 800e2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	b338      	cbz	r0, 800e31a <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e2ca:	4d1a      	ldr	r5, [pc, #104]	@ (800e334 <xTaskPriorityInherit+0x70>)
 800e2cc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e2ce:	682a      	ldr	r2, [r5, #0]
 800e2d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d226      	bcs.n	800e324 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e2d6:	6982      	ldr	r2, [r0, #24]
 800e2d8:	2a00      	cmp	r2, #0
 800e2da:	db04      	blt.n	800e2e6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2dc:	682a      	ldr	r2, [r5, #0]
 800e2de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e2e0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e2e4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e2e6:	2214      	movs	r2, #20
 800e2e8:	4e13      	ldr	r6, [pc, #76]	@ (800e338 <xTaskPriorityInherit+0x74>)
 800e2ea:	fb02 6303 	mla	r3, r2, r3, r6
 800e2ee:	6962      	ldr	r2, [r4, #20]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d113      	bne.n	800e31c <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2f4:	1d27      	adds	r7, r4, #4
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	f7fe fc66 	bl	800cbc8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2fc:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e2fe:	4a0f      	ldr	r2, [pc, #60]	@ (800e33c <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e302:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e304:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e306:	428b      	cmp	r3, r1
 800e308:	d900      	bls.n	800e30c <xTaskPriorityInherit+0x48>
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	2014      	movs	r0, #20
 800e30e:	4639      	mov	r1, r7
 800e310:	fb00 6003 	mla	r0, r0, r3, r6
 800e314:	f7fe fc36 	bl	800cb84 <vListInsertEnd>
				xReturn = pdTRUE;
 800e318:	2001      	movs	r0, #1
	}
 800e31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e320:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e322:	e7f9      	b.n	800e318 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e324:	682b      	ldr	r3, [r5, #0]
 800e326:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800e328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e32a:	4298      	cmp	r0, r3
 800e32c:	bf2c      	ite	cs
 800e32e:	2000      	movcs	r0, #0
 800e330:	2001      	movcc	r0, #1
 800e332:	e7f2      	b.n	800e31a <xTaskPriorityInherit+0x56>
 800e334:	240250b4 	.word	0x240250b4
 800e338:	24024c54 	.word	0x24024c54
 800e33c:	24024bd8 	.word	0x24024bd8

0800e340 <xTaskPriorityDisinherit>:
	{
 800e340:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800e342:	b908      	cbnz	r0, 800e348 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800e344:	2000      	movs	r0, #0
	}
 800e346:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800e348:	4b1b      	ldr	r3, [pc, #108]	@ (800e3b8 <xTaskPriorityDisinherit+0x78>)
 800e34a:	681c      	ldr	r4, [r3, #0]
 800e34c:	4284      	cmp	r4, r0
 800e34e:	d008      	beq.n	800e362 <xTaskPriorityDisinherit+0x22>
 800e350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	e7fe      	b.n	800e360 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800e362:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e364:	b943      	cbnz	r3, 800e378 <xTaskPriorityDisinherit+0x38>
 800e366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	e7fe      	b.n	800e376 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e378:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800e37a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e37c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800e37e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e380:	4291      	cmp	r1, r2
 800e382:	d0df      	beq.n	800e344 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1dd      	bne.n	800e344 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e388:	1d25      	adds	r5, r4, #4
 800e38a:	4628      	mov	r0, r5
 800e38c:	f7fe fc1c 	bl	800cbc8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e390:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e392:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e396:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e398:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e39a:	4a08      	ldr	r2, [pc, #32]	@ (800e3bc <xTaskPriorityDisinherit+0x7c>)
 800e39c:	6811      	ldr	r1, [r2, #0]
 800e39e:	428b      	cmp	r3, r1
 800e3a0:	d900      	bls.n	800e3a4 <xTaskPriorityDisinherit+0x64>
 800e3a2:	6013      	str	r3, [r2, #0]
 800e3a4:	4a06      	ldr	r2, [pc, #24]	@ (800e3c0 <xTaskPriorityDisinherit+0x80>)
 800e3a6:	2014      	movs	r0, #20
 800e3a8:	4629      	mov	r1, r5
 800e3aa:	fb00 2003 	mla	r0, r0, r3, r2
 800e3ae:	f7fe fbe9 	bl	800cb84 <vListInsertEnd>
					xReturn = pdTRUE;
 800e3b2:	2001      	movs	r0, #1
		return xReturn;
 800e3b4:	e7c7      	b.n	800e346 <xTaskPriorityDisinherit+0x6>
 800e3b6:	bf00      	nop
 800e3b8:	240250b4 	.word	0x240250b4
 800e3bc:	24024bd8 	.word	0x24024bd8
 800e3c0:	24024c54 	.word	0x24024c54

0800e3c4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800e3c4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d042      	beq.n	800e452 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800e3cc:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800e3ce:	b942      	cbnz	r2, 800e3e2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800e3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	e7fe      	b.n	800e3e0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e3e2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800e3e4:	4299      	cmp	r1, r3
 800e3e6:	bf38      	it	cc
 800e3e8:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e3ea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e3ec:	428b      	cmp	r3, r1
 800e3ee:	d030      	beq.n	800e452 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e3f0:	2a01      	cmp	r2, #1
 800e3f2:	d12e      	bne.n	800e452 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800e3f4:	4a17      	ldr	r2, [pc, #92]	@ (800e454 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800e3f6:	6812      	ldr	r2, [r2, #0]
 800e3f8:	4282      	cmp	r2, r0
 800e3fa:	d108      	bne.n	800e40e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800e3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	e7fe      	b.n	800e40c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e40e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e410:	4d11      	ldr	r5, [pc, #68]	@ (800e458 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e412:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e414:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800e418:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e41a:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e41e:	bfa8      	it	ge
 800e420:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e424:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e426:	bfa8      	it	ge
 800e428:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d111      	bne.n	800e452 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e42e:	1d06      	adds	r6, r0, #4
 800e430:	4630      	mov	r0, r6
 800e432:	f7fe fbc9 	bl	800cbc8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e436:	4a09      	ldr	r2, [pc, #36]	@ (800e45c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e438:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e43a:	6811      	ldr	r1, [r2, #0]
 800e43c:	428b      	cmp	r3, r1
 800e43e:	d900      	bls.n	800e442 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800e440:	6013      	str	r3, [r2, #0]
 800e442:	2014      	movs	r0, #20
 800e444:	4631      	mov	r1, r6
 800e446:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800e44a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800e44e:	f7fe bb99 	b.w	800cb84 <vListInsertEnd>
	}
 800e452:	bd70      	pop	{r4, r5, r6, pc}
 800e454:	240250b4 	.word	0x240250b4
 800e458:	24024c54 	.word	0x24024c54
 800e45c:	24024bd8 	.word	0x24024bd8

0800e460 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e460:	4b04      	ldr	r3, [pc, #16]	@ (800e474 <pvTaskIncrementMutexHeldCount+0x14>)
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	b11a      	cbz	r2, 800e46e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e466:	6819      	ldr	r1, [r3, #0]
 800e468:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800e46a:	3201      	adds	r2, #1
 800e46c:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800e46e:	6818      	ldr	r0, [r3, #0]
	}
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	240250b4 	.word	0x240250b4

0800e478 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800e478:	4291      	cmp	r1, r2
{
 800e47a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e47c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e47e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800e480:	d80a      	bhi.n	800e498 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e482:	1ad2      	subs	r2, r2, r3
 800e484:	6983      	ldr	r3, [r0, #24]
 800e486:	429a      	cmp	r2, r3
 800e488:	d20d      	bcs.n	800e4a6 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e48a:	1d01      	adds	r1, r0, #4
 800e48c:	4b07      	ldr	r3, [pc, #28]	@ (800e4ac <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e48e:	6818      	ldr	r0, [r3, #0]
 800e490:	f7fe fb83 	bl	800cb9a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e494:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800e496:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e498:	429a      	cmp	r2, r3
 800e49a:	d201      	bcs.n	800e4a0 <prvInsertTimerInActiveList+0x28>
 800e49c:	4299      	cmp	r1, r3
 800e49e:	d202      	bcs.n	800e4a6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e4a0:	1d01      	adds	r1, r0, #4
 800e4a2:	4b03      	ldr	r3, [pc, #12]	@ (800e4b0 <prvInsertTimerInActiveList+0x38>)
 800e4a4:	e7f3      	b.n	800e48e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800e4a6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800e4a8:	e7f5      	b.n	800e496 <prvInsertTimerInActiveList+0x1e>
 800e4aa:	bf00      	nop
 800e4ac:	240251b4 	.word	0x240251b4
 800e4b0:	240251b8 	.word	0x240251b8

0800e4b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e4b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800e4b6:	4c11      	ldr	r4, [pc, #68]	@ (800e4fc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800e4b8:	f7fe fbfc 	bl	800ccb4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800e4bc:	6825      	ldr	r5, [r4, #0]
 800e4be:	b9bd      	cbnz	r5, 800e4f0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800e4c0:	4f0f      	ldr	r7, [pc, #60]	@ (800e500 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800e4c2:	4e10      	ldr	r6, [pc, #64]	@ (800e504 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	f7fe fb4f 	bl	800cb68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f7fe fb4c 	bl	800cb68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4d0:	4b0d      	ldr	r3, [pc, #52]	@ (800e508 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4d2:	4a0e      	ldr	r2, [pc, #56]	@ (800e50c <prvCheckForValidListAndQueue+0x58>)
 800e4d4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800e4d6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4d8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800e4da:	4b0d      	ldr	r3, [pc, #52]	@ (800e510 <prvCheckForValidListAndQueue+0x5c>)
 800e4dc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4de:	4b0d      	ldr	r3, [pc, #52]	@ (800e514 <prvCheckForValidListAndQueue+0x60>)
 800e4e0:	9500      	str	r5, [sp, #0]
 800e4e2:	f7fe fdef 	bl	800d0c4 <xQueueGenericCreateStatic>
 800e4e6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4e8:	b110      	cbz	r0, 800e4f0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4ea:	490b      	ldr	r1, [pc, #44]	@ (800e518 <prvCheckForValidListAndQueue+0x64>)
 800e4ec:	f7ff fa1a 	bl	800d924 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800e4f0:	b003      	add	sp, #12
 800e4f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800e4f6:	f7fe bbfd 	b.w	800ccf4 <vPortExitCritical>
 800e4fa:	bf00      	nop
 800e4fc:	240251b0 	.word	0x240251b0
 800e500:	240251d0 	.word	0x240251d0
 800e504:	240251bc 	.word	0x240251bc
 800e508:	240251b8 	.word	0x240251b8
 800e50c:	24025108 	.word	0x24025108
 800e510:	240251b4 	.word	0x240251b4
 800e514:	240250b8 	.word	0x240250b8
 800e518:	08025e0f 	.word	0x08025e0f

0800e51c <xTimerCreateTimerTask>:
{
 800e51c:	b510      	push	{r4, lr}
 800e51e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800e520:	f7ff ffc8 	bl	800e4b4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e524:	4b12      	ldr	r3, [pc, #72]	@ (800e570 <xTimerCreateTimerTask+0x54>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	b1b3      	cbz	r3, 800e558 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e52a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e52c:	aa07      	add	r2, sp, #28
 800e52e:	a906      	add	r1, sp, #24
 800e530:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e532:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e536:	f7fe fa0f 	bl	800c958 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e53a:	9b05      	ldr	r3, [sp, #20]
 800e53c:	9a07      	ldr	r2, [sp, #28]
 800e53e:	9302      	str	r3, [sp, #8]
 800e540:	9b06      	ldr	r3, [sp, #24]
 800e542:	490c      	ldr	r1, [pc, #48]	@ (800e574 <xTimerCreateTimerTask+0x58>)
 800e544:	9301      	str	r3, [sp, #4]
 800e546:	2302      	movs	r3, #2
 800e548:	480b      	ldr	r0, [pc, #44]	@ (800e578 <xTimerCreateTimerTask+0x5c>)
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	4623      	mov	r3, r4
 800e54e:	f7ff fbae 	bl	800dcae <xTaskCreateStatic>
 800e552:	4b0a      	ldr	r3, [pc, #40]	@ (800e57c <xTimerCreateTimerTask+0x60>)
 800e554:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800e556:	b940      	cbnz	r0, 800e56a <xTimerCreateTimerTask+0x4e>
 800e558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e568:	e7fe      	b.n	800e568 <xTimerCreateTimerTask+0x4c>
}
 800e56a:	2001      	movs	r0, #1
 800e56c:	b008      	add	sp, #32
 800e56e:	bd10      	pop	{r4, pc}
 800e570:	240251b0 	.word	0x240251b0
 800e574:	08025e14 	.word	0x08025e14
 800e578:	0800e679 	.word	0x0800e679
 800e57c:	240251ac 	.word	0x240251ac

0800e580 <xTimerGenericCommand>:
{
 800e580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e582:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800e584:	4604      	mov	r4, r0
{
 800e586:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800e588:	b940      	cbnz	r0, 800e59c <xTimerGenericCommand+0x1c>
 800e58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	e7fe      	b.n	800e59a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800e59c:	4d0c      	ldr	r5, [pc, #48]	@ (800e5d0 <xTimerGenericCommand+0x50>)
 800e59e:	6828      	ldr	r0, [r5, #0]
 800e5a0:	b178      	cbz	r0, 800e5c2 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e5a2:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e5a4:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e5a6:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e5aa:	dc0c      	bgt.n	800e5c6 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e5ac:	f7ff fe7a 	bl	800e2a4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e5b0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e5b2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e5b4:	4669      	mov	r1, sp
 800e5b6:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e5b8:	bf0c      	ite	eq
 800e5ba:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e5bc:	461a      	movne	r2, r3
 800e5be:	f7fe fe36 	bl	800d22e <xQueueGenericSend>
}
 800e5c2:	b004      	add	sp, #16
 800e5c4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	4669      	mov	r1, sp
 800e5ca:	f7fe ff33 	bl	800d434 <xQueueGenericSendFromISR>
 800e5ce:	e7f8      	b.n	800e5c2 <xTimerGenericCommand+0x42>
 800e5d0:	240251b0 	.word	0x240251b0

0800e5d4 <prvSampleTimeNow>:
{
 800e5d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800e5d8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800e674 <prvSampleTimeNow+0xa0>
{
 800e5dc:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800e5de:	f7ff fbd5 	bl	800dd8c <xTaskGetTickCount>
 800e5e2:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800e5e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e5e8:	4283      	cmp	r3, r0
 800e5ea:	d909      	bls.n	800e600 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5ec:	4f1f      	ldr	r7, [pc, #124]	@ (800e66c <prvSampleTimeNow+0x98>)
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	b96a      	cbnz	r2, 800e610 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800e5f4:	4a1e      	ldr	r2, [pc, #120]	@ (800e670 <prvSampleTimeNow+0x9c>)
 800e5f6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e5f8:	6013      	str	r3, [r2, #0]
 800e5fa:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800e5fc:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800e5fe:	e000      	b.n	800e602 <prvSampleTimeNow+0x2e>
 800e600:	2300      	movs	r3, #0
}
 800e602:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800e604:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800e606:	f8c8 5000 	str.w	r5, [r8]
}
 800e60a:	b002      	add	sp, #8
 800e60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e610:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e612:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e614:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e618:	f104 0a04 	add.w	sl, r4, #4
 800e61c:	4650      	mov	r0, sl
 800e61e:	f7fe fad3 	bl	800cbc8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e622:	6a23      	ldr	r3, [r4, #32]
 800e624:	4620      	mov	r0, r4
 800e626:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e628:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e62c:	075b      	lsls	r3, r3, #29
 800e62e:	d5de      	bpl.n	800e5ee <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e630:	69a3      	ldr	r3, [r4, #24]
 800e632:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800e634:	4599      	cmp	r9, r3
 800e636:	d206      	bcs.n	800e646 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e638:	4651      	mov	r1, sl
 800e63a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e63c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e63e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e640:	f7fe faab 	bl	800cb9a <vListInsert>
 800e644:	e7d3      	b.n	800e5ee <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e646:	2300      	movs	r3, #0
 800e648:	464a      	mov	r2, r9
 800e64a:	4620      	mov	r0, r4
 800e64c:	4619      	mov	r1, r3
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	f7ff ff96 	bl	800e580 <xTimerGenericCommand>
				configASSERT( xResult );
 800e654:	2800      	cmp	r0, #0
 800e656:	d1ca      	bne.n	800e5ee <prvSampleTimeNow+0x1a>
 800e658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e65c:	f383 8811 	msr	BASEPRI, r3
 800e660:	f3bf 8f6f 	isb	sy
 800e664:	f3bf 8f4f 	dsb	sy
 800e668:	e7fe      	b.n	800e668 <prvSampleTimeNow+0x94>
 800e66a:	bf00      	nop
 800e66c:	240251b8 	.word	0x240251b8
 800e670:	240251b4 	.word	0x240251b4
 800e674:	240251a8 	.word	0x240251a8

0800e678 <prvTimerTask>:
{
 800e678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e67c:	4d6e      	ldr	r5, [pc, #440]	@ (800e838 <prvTimerTask+0x1c0>)
{
 800e67e:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e680:	4e6e      	ldr	r6, [pc, #440]	@ (800e83c <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	f8d3 8000 	ldr.w	r8, [r3]
 800e688:	f1b8 0f00 	cmp.w	r8, #0
 800e68c:	d035      	beq.n	800e6fa <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e68e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e690:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e692:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800e696:	f7ff fb71 	bl	800dd7c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e69a:	a804      	add	r0, sp, #16
 800e69c:	f7ff ff9a 	bl	800e5d4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e6a0:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e6a2:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d169      	bne.n	800e77c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e6a8:	2c00      	cmp	r4, #0
 800e6aa:	d14c      	bne.n	800e746 <prvTimerTask+0xce>
 800e6ac:	4540      	cmp	r0, r8
 800e6ae:	d350      	bcc.n	800e752 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800e6b0:	f7ff fc08 	bl	800dec4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6b4:	682b      	ldr	r3, [r5, #0]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6ba:	1d38      	adds	r0, r7, #4
 800e6bc:	f7fe fa84 	bl	800cbc8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e6c4:	0758      	lsls	r0, r3, #29
 800e6c6:	d51a      	bpl.n	800e6fe <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e6c8:	69b9      	ldr	r1, [r7, #24]
 800e6ca:	4643      	mov	r3, r8
 800e6cc:	464a      	mov	r2, r9
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	4441      	add	r1, r8
 800e6d2:	f7ff fed1 	bl	800e478 <prvInsertTimerInActiveList>
 800e6d6:	b1b0      	cbz	r0, 800e706 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6d8:	4623      	mov	r3, r4
 800e6da:	4642      	mov	r2, r8
 800e6dc:	4621      	mov	r1, r4
 800e6de:	4638      	mov	r0, r7
 800e6e0:	9400      	str	r4, [sp, #0]
 800e6e2:	f7ff ff4d 	bl	800e580 <xTimerGenericCommand>
			configASSERT( xResult );
 800e6e6:	b970      	cbnz	r0, 800e706 <prvTimerTask+0x8e>
 800e6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	e7fe      	b.n	800e6f8 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e6fa:	2401      	movs	r4, #1
 800e6fc:	e7cb      	b.n	800e696 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6fe:	f023 0301 	bic.w	r3, r3, #1
 800e702:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	4638      	mov	r0, r7
 800e70a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e70c:	2200      	movs	r2, #0
 800e70e:	a904      	add	r1, sp, #16
 800e710:	6830      	ldr	r0, [r6, #0]
 800e712:	f7fe ff3d 	bl	800d590 <xQueueReceive>
 800e716:	2800      	cmp	r0, #0
 800e718:	d0b3      	beq.n	800e682 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e71a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e71c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e71e:	2b00      	cmp	r3, #0
 800e720:	db2f      	blt.n	800e782 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e722:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e724:	6963      	ldr	r3, [r4, #20]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d132      	bne.n	800e790 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e72a:	a803      	add	r0, sp, #12
 800e72c:	f7ff ff52 	bl	800e5d4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e730:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e732:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800e734:	2b09      	cmp	r3, #9
 800e736:	d8e9      	bhi.n	800e70c <prvTimerTask+0x94>
 800e738:	e8df f003 	tbb	[pc, r3]
 800e73c:	572e2e2e 	.word	0x572e2e2e
 800e740:	2e2e765e 	.word	0x2e2e765e
 800e744:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e746:	4b3e      	ldr	r3, [pc, #248]	@ (800e840 <prvTimerTask+0x1c8>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681c      	ldr	r4, [r3, #0]
 800e74c:	fab4 f484 	clz	r4, r4
 800e750:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e752:	4622      	mov	r2, r4
 800e754:	eba8 0109 	sub.w	r1, r8, r9
 800e758:	6830      	ldr	r0, [r6, #0]
 800e75a:	f7ff f922 	bl	800d9a2 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e75e:	f7ff fbb1 	bl	800dec4 <xTaskResumeAll>
 800e762:	2800      	cmp	r0, #0
 800e764:	d1d2      	bne.n	800e70c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800e766:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e76a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e76e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e772:	f3bf 8f4f 	dsb	sy
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	e7c7      	b.n	800e70c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800e77c:	f7ff fba2 	bl	800dec4 <xTaskResumeAll>
}
 800e780:	e7c4      	b.n	800e70c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e782:	9b05      	ldr	r3, [sp, #20]
 800e784:	9907      	ldr	r1, [sp, #28]
 800e786:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e788:	9b04      	ldr	r3, [sp, #16]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	dbbe      	blt.n	800e70c <prvTimerTask+0x94>
 800e78e:	e7c8      	b.n	800e722 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e790:	1d20      	adds	r0, r4, #4
 800e792:	f7fe fa19 	bl	800cbc8 <uxListRemove>
 800e796:	e7c8      	b.n	800e72a <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e798:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e79c:	4620      	mov	r0, r4
 800e79e:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7a0:	f043 0301 	orr.w	r3, r3, #1
 800e7a4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e7a8:	9b05      	ldr	r3, [sp, #20]
 800e7aa:	4419      	add	r1, r3
 800e7ac:	f7ff fe64 	bl	800e478 <prvInsertTimerInActiveList>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	d0ab      	beq.n	800e70c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7b4:	6a23      	ldr	r3, [r4, #32]
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7ba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e7be:	0759      	lsls	r1, r3, #29
 800e7c0:	d5a4      	bpl.n	800e70c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e7c2:	69a2      	ldr	r2, [r4, #24]
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	9905      	ldr	r1, [sp, #20]
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	440a      	add	r2, r1
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	f7ff fed6 	bl	800e580 <xTimerGenericCommand>
							configASSERT( xResult );
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d199      	bne.n	800e70c <prvTimerTask+0x94>
 800e7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7dc:	f383 8811 	msr	BASEPRI, r3
 800e7e0:	f3bf 8f6f 	isb	sy
 800e7e4:	f3bf 8f4f 	dsb	sy
 800e7e8:	e7fe      	b.n	800e7e8 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7ea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7ee:	f023 0301 	bic.w	r3, r3, #1
 800e7f2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800e7f6:	e789      	b.n	800e70c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7f8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e7fc:	f043 0301 	orr.w	r3, r3, #1
 800e800:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e804:	9905      	ldr	r1, [sp, #20]
 800e806:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e808:	b941      	cbnz	r1, 800e81c <prvTimerTask+0x1a4>
 800e80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80e:	f383 8811 	msr	BASEPRI, r3
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	f3bf 8f4f 	dsb	sy
 800e81a:	e7fe      	b.n	800e81a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e81c:	4603      	mov	r3, r0
 800e81e:	4401      	add	r1, r0
 800e820:	4620      	mov	r0, r4
 800e822:	f7ff fe29 	bl	800e478 <prvInsertTimerInActiveList>
					break;
 800e826:	e771      	b.n	800e70c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e828:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e82c:	079a      	lsls	r2, r3, #30
 800e82e:	d4de      	bmi.n	800e7ee <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800e830:	4620      	mov	r0, r4
 800e832:	f7fe f95b 	bl	800caec <vPortFree>
 800e836:	e769      	b.n	800e70c <prvTimerTask+0x94>
 800e838:	240251b8 	.word	0x240251b8
 800e83c:	240251b0 	.word	0x240251b0
 800e840:	240251b4 	.word	0x240251b4

0800e844 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800e844:	8880      	ldrh	r0, [r0, #4]
 800e846:	4770      	bx	lr

0800e848 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800e848:	b570      	push	{r4, r5, r6, lr}
 800e84a:	6803      	ldr	r3, [r0, #0]
 800e84c:	460c      	mov	r4, r1
 800e84e:	2100      	movs	r1, #0
 800e850:	4605      	mov	r5, r0
 800e852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e854:	4798      	blx	r3
 800e856:	4606      	mov	r6, r0
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	4628      	mov	r0, r5
 800e85c:	1ba4      	subs	r4, r4, r6
 800e85e:	6a1b      	ldr	r3, [r3, #32]
 800e860:	b2a4      	uxth	r4, r4
 800e862:	4798      	blx	r3
 800e864:	fbb4 f0f0 	udiv	r0, r4, r0
 800e868:	bd70      	pop	{r4, r5, r6, pc}

0800e86a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800e86a:	2300      	movs	r3, #0
 800e86c:	8083      	strh	r3, [r0, #4]
 800e86e:	4770      	bx	lr

0800e870 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800e870:	b510      	push	{r4, lr}
 800e872:	6803      	ldr	r3, [r0, #0]
 800e874:	4604      	mov	r4, r0
 800e876:	8881      	ldrh	r1, [r0, #4]
 800e878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e87a:	4798      	blx	r3
 800e87c:	88a3      	ldrh	r3, [r4, #4]
 800e87e:	3301      	adds	r3, #1
 800e880:	80a3      	strh	r3, [r4, #4]
 800e882:	bd10      	pop	{r4, pc}

0800e884 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800e884:	6803      	ldr	r3, [r0, #0]
 800e886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e888:	4718      	bx	r3

0800e88a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800e88a:	4770      	bx	lr

0800e88c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800e88c:	4a02      	ldr	r2, [pc, #8]	@ (800e898 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800e88e:	6002      	str	r2, [r0, #0]
 800e890:	2200      	movs	r2, #0
 800e892:	8082      	strh	r2, [r0, #4]
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	08026984 	.word	0x08026984

0800e89c <_ZN8touchgfx9Container13getFirstChildEv>:
 800e89c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800e89e:	4770      	bx	lr

0800e8a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800e8a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	b12b      	cbz	r3, 800e8b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e8a6:	b920      	cbnz	r0, 800e8b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e8a8:	1a5a      	subs	r2, r3, r1
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	4250      	negs	r0, r2
 800e8ae:	4150      	adcs	r0, r2
 800e8b0:	e7f8      	b.n	800e8a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800e8b2:	4770      	bx	lr

0800e8b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	6148      	str	r0, [r1, #20]
 800e8b8:	618b      	str	r3, [r1, #24]
 800e8ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e8bc:	b913      	cbnz	r3, 800e8c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800e8be:	6281      	str	r1, [r0, #40]	@ 0x28
 800e8c0:	4770      	bx	lr
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	699a      	ldr	r2, [r3, #24]
 800e8c6:	2a00      	cmp	r2, #0
 800e8c8:	d1fb      	bne.n	800e8c2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800e8ca:	6199      	str	r1, [r3, #24]
 800e8cc:	4770      	bx	lr

0800e8ce <_ZN8touchgfx9Container9removeAllEv>:
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e8d2:	b123      	cbz	r3, 800e8de <_ZN8touchgfx9Container9removeAllEv+0x10>
 800e8d4:	6999      	ldr	r1, [r3, #24]
 800e8d6:	6281      	str	r1, [r0, #40]	@ 0x28
 800e8d8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800e8dc:	e7f8      	b.n	800e8d0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800e8de:	4770      	bx	lr

0800e8e0 <_ZN8touchgfx9Container6unlinkEv>:
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	6283      	str	r3, [r0, #40]	@ 0x28
 800e8e4:	4770      	bx	lr

0800e8e6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	8002      	strh	r2, [r0, #0]
 800e8ea:	8042      	strh	r2, [r0, #2]
 800e8ec:	8082      	strh	r2, [r0, #4]
 800e8ee:	80c2      	strh	r2, [r0, #6]
 800e8f0:	4770      	bx	lr

0800e8f2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800e8f2:	b570      	push	{r4, r5, r6, lr}
 800e8f4:	460d      	mov	r5, r1
 800e8f6:	4616      	mov	r6, r2
 800e8f8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e8fa:	b13c      	cbz	r4, 800e90c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800e8fc:	6823      	ldr	r3, [r4, #0]
 800e8fe:	4620      	mov	r0, r4
 800e900:	4632      	mov	r2, r6
 800e902:	4629      	mov	r1, r5
 800e904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e906:	4798      	blx	r3
 800e908:	69a4      	ldr	r4, [r4, #24]
 800e90a:	e7f6      	b.n	800e8fa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800e90c:	bd70      	pop	{r4, r5, r6, pc}

0800e90e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800e90e:	b538      	push	{r3, r4, r5, lr}
 800e910:	460d      	mov	r5, r1
 800e912:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e914:	b134      	cbz	r4, 800e924 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800e916:	682b      	ldr	r3, [r5, #0]
 800e918:	4621      	mov	r1, r4
 800e91a:	4628      	mov	r0, r5
 800e91c:	689b      	ldr	r3, [r3, #8]
 800e91e:	4798      	blx	r3
 800e920:	69a4      	ldr	r4, [r4, #24]
 800e922:	e7f7      	b.n	800e914 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800e924:	bd38      	pop	{r3, r4, r5, pc}

0800e926 <_ZN8touchgfx9ContainerD1Ev>:
 800e926:	4770      	bx	lr

0800e928 <_ZN8touchgfx9ContainerD0Ev>:
 800e928:	b510      	push	{r4, lr}
 800e92a:	4604      	mov	r4, r0
 800e92c:	212c      	movs	r1, #44	@ 0x2c
 800e92e:	f013 ff78 	bl	8022822 <_ZdlPvj>
 800e932:	4620      	mov	r0, r4
 800e934:	bd10      	pop	{r4, pc}

0800e936 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800e936:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e938:	b19b      	cbz	r3, 800e962 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e93a:	428b      	cmp	r3, r1
 800e93c:	d109      	bne.n	800e952 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800e93e:	699a      	ldr	r2, [r3, #24]
 800e940:	2100      	movs	r1, #0
 800e942:	6159      	str	r1, [r3, #20]
 800e944:	6282      	str	r2, [r0, #40]	@ 0x28
 800e946:	b902      	cbnz	r2, 800e94a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800e948:	4770      	bx	lr
 800e94a:	6199      	str	r1, [r3, #24]
 800e94c:	4770      	bx	lr
 800e94e:	4613      	mov	r3, r2
 800e950:	b13a      	cbz	r2, 800e962 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e952:	699a      	ldr	r2, [r3, #24]
 800e954:	428a      	cmp	r2, r1
 800e956:	d1fa      	bne.n	800e94e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800e958:	698a      	ldr	r2, [r1, #24]
 800e95a:	619a      	str	r2, [r3, #24]
 800e95c:	2300      	movs	r3, #0
 800e95e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800e962:	4770      	bx	lr

0800e964 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800e964:	b410      	push	{r4}
 800e966:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e968:	4604      	mov	r4, r0
 800e96a:	b92b      	cbnz	r3, 800e978 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800e96c:	6803      	ldr	r3, [r0, #0]
 800e96e:	4611      	mov	r1, r2
 800e970:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e976:	4718      	bx	r3
 800e978:	b941      	cbnz	r1, 800e98c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800e97a:	6193      	str	r3, [r2, #24]
 800e97c:	6282      	str	r2, [r0, #40]	@ 0x28
 800e97e:	6154      	str	r4, [r2, #20]
 800e980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	4603      	mov	r3, r0
 800e988:	2800      	cmp	r0, #0
 800e98a:	d0f9      	beq.n	800e980 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800e98c:	4299      	cmp	r1, r3
 800e98e:	6998      	ldr	r0, [r3, #24]
 800e990:	d1f9      	bne.n	800e986 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800e992:	6190      	str	r0, [r2, #24]
 800e994:	618a      	str	r2, [r1, #24]
 800e996:	e7f2      	b.n	800e97e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800e998 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800e998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	461f      	mov	r7, r3
 800e99e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e9a2:	460d      	mov	r5, r1
 800e9a4:	4616      	mov	r6, r2
 800e9a6:	b103      	cbz	r3, 800e9aa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800e9a8:	6038      	str	r0, [r7, #0]
 800e9aa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e9ac:	b314      	cbz	r4, 800e9f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800e9ae:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e9b2:	b1eb      	cbz	r3, 800e9f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e9b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e9b8:	428d      	cmp	r5, r1
 800e9ba:	db19      	blt.n	800e9f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e9bc:	b289      	uxth	r1, r1
 800e9be:	8923      	ldrh	r3, [r4, #8]
 800e9c0:	440b      	add	r3, r1
 800e9c2:	b21b      	sxth	r3, r3
 800e9c4:	429d      	cmp	r5, r3
 800e9c6:	da13      	bge.n	800e9f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e9c8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e9cc:	4296      	cmp	r6, r2
 800e9ce:	db0f      	blt.n	800e9f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e9d0:	b292      	uxth	r2, r2
 800e9d2:	8963      	ldrh	r3, [r4, #10]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	b21b      	sxth	r3, r3
 800e9d8:	429e      	cmp	r6, r3
 800e9da:	da09      	bge.n	800e9f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	1ab2      	subs	r2, r6, r2
 800e9e0:	1a69      	subs	r1, r5, r1
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800e9e8:	b212      	sxth	r2, r2
 800e9ea:	463b      	mov	r3, r7
 800e9ec:	b209      	sxth	r1, r1
 800e9ee:	47c0      	blx	r8
 800e9f0:	69a4      	ldr	r4, [r4, #24]
 800e9f2:	e7db      	b.n	800e9ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800e9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e9f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800e9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fc:	4c6d      	ldr	r4, [pc, #436]	@ (800ebb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800e9fe:	b0a1      	sub	sp, #132	@ 0x84
 800ea00:	4606      	mov	r6, r0
 800ea02:	6824      	ldr	r4, [r4, #0]
 800ea04:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800ea06:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800ea0a:	2400      	movs	r4, #0
 800ea0c:	9303      	str	r3, [sp, #12]
 800ea0e:	802c      	strh	r4, [r5, #0]
 800ea10:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800ea12:	802c      	strh	r4, [r5, #0]
 800ea14:	601c      	str	r4, [r3, #0]
 800ea16:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ea1a:	f7ff ffbd 	bl	800e998 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ea1e:	f1b9 0f03 	cmp.w	r9, #3
 800ea22:	f340 80c1 	ble.w	800eba8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800ea26:	4631      	mov	r1, r6
 800ea28:	a80c      	add	r0, sp, #48	@ 0x30
 800ea2a:	f006 fd71 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ea2e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800ea32:	9306      	str	r3, [sp, #24]
 800ea34:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800ea38:	9307      	str	r3, [sp, #28]
 800ea3a:	9b03      	ldr	r3, [sp, #12]
 800ea3c:	f8d3 a000 	ldr.w	sl, [r3]
 800ea40:	f1ba 0f00 	cmp.w	sl, #0
 800ea44:	f000 80b3 	beq.w	800ebae <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800ea48:	4651      	mov	r1, sl
 800ea4a:	a810      	add	r0, sp, #64	@ 0x40
 800ea4c:	f006 fd60 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ea50:	2002      	movs	r0, #2
 800ea52:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800ea56:	9b01      	ldr	r3, [sp, #4]
 800ea58:	9a06      	ldr	r2, [sp, #24]
 800ea5a:	fb91 f1f0 	sdiv	r1, r1, r0
 800ea5e:	189d      	adds	r5, r3, r2
 800ea60:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800ea64:	9a07      	ldr	r2, [sp, #28]
 800ea66:	4419      	add	r1, r3
 800ea68:	9b02      	ldr	r3, [sp, #8]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800ea70:	1a6d      	subs	r5, r5, r1
 800ea72:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800ea76:	fb92 f2f0 	sdiv	r2, r2, r0
 800ea7a:	440a      	add	r2, r1
 800ea7c:	1a9b      	subs	r3, r3, r2
 800ea7e:	435b      	muls	r3, r3
 800ea80:	fb05 3505 	mla	r5, r5, r5, r3
 800ea84:	4f4c      	ldr	r7, [pc, #304]	@ (800ebb8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800ea86:	ac10      	add	r4, sp, #64	@ 0x40
 800ea88:	f1b9 0f0c 	cmp.w	r9, #12
 800ea8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea90:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea94:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea98:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ea9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eaa0:	f04f 0303 	mov.w	r3, #3
 800eaa4:	bfd8      	it	le
 800eaa6:	f109 32ff 	addle.w	r2, r9, #4294967295
 800eaaa:	f04f 0400 	mov.w	r4, #0
 800eaae:	f8cd 9000 	str.w	r9, [sp]
 800eab2:	bfcc      	ite	gt
 800eab4:	4698      	movgt	r8, r3
 800eab6:	fb92 f8f3 	sdivle	r8, r2, r3
 800eaba:	1c63      	adds	r3, r4, #1
 800eabc:	aa10      	add	r2, sp, #64	@ 0x40
 800eabe:	f004 0401 	and.w	r4, r4, #1
 800eac2:	f04f 0b00 	mov.w	fp, #0
 800eac6:	9308      	str	r3, [sp, #32]
 800eac8:	9b00      	ldr	r3, [sp, #0]
 800eaca:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800eace:	fb93 f3f8 	sdiv	r3, r3, r8
 800ead2:	3404      	adds	r4, #4
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	9304      	str	r3, [sp, #16]
 800ead8:	9a04      	ldr	r2, [sp, #16]
 800eada:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800eade:	fb13 f302 	smulbb	r3, r3, r2
 800eae2:	9a01      	ldr	r2, [sp, #4]
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	1899      	adds	r1, r3, r2
 800eae8:	9305      	str	r3, [sp, #20]
 800eaea:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800eaee:	b209      	sxth	r1, r1
 800eaf0:	4299      	cmp	r1, r3
 800eaf2:	db4d      	blt.n	800eb90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800eaf4:	8932      	ldrh	r2, [r6, #8]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	b21b      	sxth	r3, r3
 800eafa:	4299      	cmp	r1, r3
 800eafc:	da48      	bge.n	800eb90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800eafe:	9b04      	ldr	r3, [sp, #16]
 800eb00:	6827      	ldr	r7, [r4, #0]
 800eb02:	fb17 f703 	smulbb	r7, r7, r3
 800eb06:	9b02      	ldr	r3, [sp, #8]
 800eb08:	b2bf      	uxth	r7, r7
 800eb0a:	18fa      	adds	r2, r7, r3
 800eb0c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800eb10:	b212      	sxth	r2, r2
 800eb12:	429a      	cmp	r2, r3
 800eb14:	db3c      	blt.n	800eb90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800eb16:	8970      	ldrh	r0, [r6, #10]
 800eb18:	4403      	add	r3, r0
 800eb1a:	b21b      	sxth	r3, r3
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	da37      	bge.n	800eb90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800eb20:	2300      	movs	r3, #0
 800eb22:	4630      	mov	r0, r6
 800eb24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb26:	ab0b      	add	r3, sp, #44	@ 0x2c
 800eb28:	f7ff ff36 	bl	800e998 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800eb2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb2e:	b37a      	cbz	r2, 800eb90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800eb30:	4552      	cmp	r2, sl
 800eb32:	d02d      	beq.n	800eb90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800eb34:	4611      	mov	r1, r2
 800eb36:	a80e      	add	r0, sp, #56	@ 0x38
 800eb38:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb3a:	f006 fce9 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800eb3e:	f04f 0e02 	mov.w	lr, #2
 800eb42:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800eb46:	9a06      	ldr	r2, [sp, #24]
 800eb48:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800eb4c:	9b01      	ldr	r3, [sp, #4]
 800eb4e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800eb52:	4413      	add	r3, r2
 800eb54:	9a07      	ldr	r2, [sp, #28]
 800eb56:	fb91 f1fe 	sdiv	r1, r1, lr
 800eb5a:	fb9c fcfe 	sdiv	ip, ip, lr
 800eb5e:	4401      	add	r1, r0
 800eb60:	1a58      	subs	r0, r3, r1
 800eb62:	9b02      	ldr	r3, [sp, #8]
 800eb64:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800eb68:	4413      	add	r3, r2
 800eb6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb6c:	448c      	add	ip, r1
 800eb6e:	eba3 030c 	sub.w	r3, r3, ip
 800eb72:	435b      	muls	r3, r3
 800eb74:	fb00 3300 	mla	r3, r0, r0, r3
 800eb78:	42ab      	cmp	r3, r5
 800eb7a:	d208      	bcs.n	800eb8e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800eb7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb7e:	461d      	mov	r5, r3
 800eb80:	9803      	ldr	r0, [sp, #12]
 800eb82:	6001      	str	r1, [r0, #0]
 800eb84:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800eb86:	9805      	ldr	r0, [sp, #20]
 800eb88:	8008      	strh	r0, [r1, #0]
 800eb8a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800eb8c:	800f      	strh	r7, [r1, #0]
 800eb8e:	4692      	mov	sl, r2
 800eb90:	f10b 0b01 	add.w	fp, fp, #1
 800eb94:	3408      	adds	r4, #8
 800eb96:	f1bb 0f04 	cmp.w	fp, #4
 800eb9a:	d19d      	bne.n	800ead8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800eb9c:	9b00      	ldr	r3, [sp, #0]
 800eb9e:	9c08      	ldr	r4, [sp, #32]
 800eba0:	444b      	add	r3, r9
 800eba2:	4544      	cmp	r4, r8
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	d188      	bne.n	800eaba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800eba8:	b021      	add	sp, #132	@ 0x84
 800ebaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebae:	f04f 35ff 	mov.w	r5, #4294967295
 800ebb2:	e767      	b.n	800ea84 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800ebb4:	240251f0 	.word	0x240251f0
 800ebb8:	08023f88 	.word	0x08023f88

0800ebbc <_ZN8touchgfx4RectaNERKS0_>:
 800ebbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebc0:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ebc4:	888c      	ldrh	r4, [r1, #4]
 800ebc6:	f9b0 9000 	ldrsh.w	r9, [r0]
 800ebca:	443c      	add	r4, r7
 800ebcc:	b2a4      	uxth	r4, r4
 800ebce:	fa0f f884 	sxth.w	r8, r4
 800ebd2:	45c1      	cmp	r9, r8
 800ebd4:	da2f      	bge.n	800ec36 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ebd6:	8882      	ldrh	r2, [r0, #4]
 800ebd8:	444a      	add	r2, r9
 800ebda:	b292      	uxth	r2, r2
 800ebdc:	fa0f fe82 	sxth.w	lr, r2
 800ebe0:	4577      	cmp	r7, lr
 800ebe2:	da28      	bge.n	800ec36 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ebe4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ebe8:	88cb      	ldrh	r3, [r1, #6]
 800ebea:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800ebee:	442b      	add	r3, r5
 800ebf0:	b21b      	sxth	r3, r3
 800ebf2:	429e      	cmp	r6, r3
 800ebf4:	da1f      	bge.n	800ec36 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ebf6:	88c3      	ldrh	r3, [r0, #6]
 800ebf8:	4433      	add	r3, r6
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	fa0f fc83 	sxth.w	ip, r3
 800ec00:	4565      	cmp	r5, ip
 800ec02:	da18      	bge.n	800ec36 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ec04:	454f      	cmp	r7, r9
 800ec06:	bfb8      	it	lt
 800ec08:	464f      	movlt	r7, r9
 800ec0a:	42b5      	cmp	r5, r6
 800ec0c:	bfb8      	it	lt
 800ec0e:	4635      	movlt	r5, r6
 800ec10:	45f0      	cmp	r8, lr
 800ec12:	bfd8      	it	le
 800ec14:	4622      	movle	r2, r4
 800ec16:	1bd2      	subs	r2, r2, r7
 800ec18:	8082      	strh	r2, [r0, #4]
 800ec1a:	884a      	ldrh	r2, [r1, #2]
 800ec1c:	88c9      	ldrh	r1, [r1, #6]
 800ec1e:	8007      	strh	r7, [r0, #0]
 800ec20:	440a      	add	r2, r1
 800ec22:	8045      	strh	r5, [r0, #2]
 800ec24:	b292      	uxth	r2, r2
 800ec26:	b211      	sxth	r1, r2
 800ec28:	458c      	cmp	ip, r1
 800ec2a:	bfa8      	it	ge
 800ec2c:	4613      	movge	r3, r2
 800ec2e:	1b5b      	subs	r3, r3, r5
 800ec30:	80c3      	strh	r3, [r0, #6]
 800ec32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec36:	2300      	movs	r3, #0
 800ec38:	8003      	strh	r3, [r0, #0]
 800ec3a:	8043      	strh	r3, [r0, #2]
 800ec3c:	8083      	strh	r3, [r0, #4]
 800ec3e:	80c3      	strh	r3, [r0, #6]
 800ec40:	e7f7      	b.n	800ec32 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800ec42:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	dd06      	ble.n	800ec58 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800ec4a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	bfcc      	ite	gt
 800ec52:	2000      	movgt	r0, #0
 800ec54:	2001      	movle	r0, #1
 800ec56:	4770      	bx	lr
 800ec58:	2001      	movs	r0, #1
 800ec5a:	4770      	bx	lr

0800ec5c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ec5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec60:	2300      	movs	r3, #0
 800ec62:	4604      	mov	r4, r0
 800ec64:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800ec66:	8003      	strh	r3, [r0, #0]
 800ec68:	8043      	strh	r3, [r0, #2]
 800ec6a:	8083      	strh	r3, [r0, #4]
 800ec6c:	80c3      	strh	r3, [r0, #6]
 800ec6e:	2d00      	cmp	r5, #0
 800ec70:	d040      	beq.n	800ecf4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800ec72:	1d28      	adds	r0, r5, #4
 800ec74:	f7ff ffe5 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec78:	b988      	cbnz	r0, 800ec9e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f7ff ffe1 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec80:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ec84:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ec88:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ec8c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ec90:	b138      	cbz	r0, 800eca2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ec92:	8022      	strh	r2, [r4, #0]
 800ec94:	8063      	strh	r3, [r4, #2]
 800ec96:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ec9a:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ec9e:	69ad      	ldr	r5, [r5, #24]
 800eca0:	e7e5      	b.n	800ec6e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800eca2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800eca6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ecaa:	4290      	cmp	r0, r2
 800ecac:	4607      	mov	r7, r0
 800ecae:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800ecb2:	460e      	mov	r6, r1
 800ecb4:	bfa8      	it	ge
 800ecb6:	4617      	movge	r7, r2
 800ecb8:	4299      	cmp	r1, r3
 800ecba:	4472      	add	r2, lr
 800ecbc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800ecc0:	bfa8      	it	ge
 800ecc2:	461e      	movge	r6, r3
 800ecc4:	4440      	add	r0, r8
 800ecc6:	4471      	add	r1, lr
 800ecc8:	4463      	add	r3, ip
 800ecca:	b200      	sxth	r0, r0
 800eccc:	8027      	strh	r7, [r4, #0]
 800ecce:	b212      	sxth	r2, r2
 800ecd0:	8066      	strh	r6, [r4, #2]
 800ecd2:	b209      	sxth	r1, r1
 800ecd4:	b21b      	sxth	r3, r3
 800ecd6:	4290      	cmp	r0, r2
 800ecd8:	bfac      	ite	ge
 800ecda:	ebc7 0200 	rsbge	r2, r7, r0
 800ecde:	ebc7 0202 	rsblt	r2, r7, r2
 800ece2:	4299      	cmp	r1, r3
 800ece4:	bfac      	ite	ge
 800ece6:	ebc6 0301 	rsbge	r3, r6, r1
 800ecea:	ebc6 0303 	rsblt	r3, r6, r3
 800ecee:	80a2      	strh	r2, [r4, #4]
 800ecf0:	80e3      	strh	r3, [r4, #6]
 800ecf2:	e7d4      	b.n	800ec9e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ecfa <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800ecfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ecfe:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800ed02:	b383      	cbz	r3, 800ed66 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ed04:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ed06:	b374      	cbz	r4, 800ed66 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ed08:	f9b1 5000 	ldrsh.w	r5, [r1]
 800ed0c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800ed10:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800ed14:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800ed18:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800ed1c:	b303      	cbz	r3, 800ed60 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ed1e:	4668      	mov	r0, sp
 800ed20:	1d21      	adds	r1, r4, #4
 800ed22:	f8ad 5000 	strh.w	r5, [sp]
 800ed26:	f8ad 6002 	strh.w	r6, [sp, #2]
 800ed2a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800ed2e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800ed32:	f7ff ff43 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 800ed36:	4668      	mov	r0, sp
 800ed38:	f7ff ff83 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ed3c:	b980      	cbnz	r0, 800ed60 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ed3e:	f8bd 3000 	ldrh.w	r3, [sp]
 800ed42:	4669      	mov	r1, sp
 800ed44:	88a2      	ldrh	r2, [r4, #4]
 800ed46:	4620      	mov	r0, r4
 800ed48:	1a9b      	subs	r3, r3, r2
 800ed4a:	88e2      	ldrh	r2, [r4, #6]
 800ed4c:	f8ad 3000 	strh.w	r3, [sp]
 800ed50:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ed54:	1a9b      	subs	r3, r3, r2
 800ed56:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ed5a:	6823      	ldr	r3, [r4, #0]
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	4798      	blx	r3
 800ed60:	69a4      	ldr	r4, [r4, #24]
 800ed62:	2c00      	cmp	r4, #0
 800ed64:	d1d8      	bne.n	800ed18 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800ed66:	b002      	add	sp, #8
 800ed68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed6c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800ed6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed6e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800ed72:	460d      	mov	r5, r1
 800ed74:	4616      	mov	r6, r2
 800ed76:	b323      	cbz	r3, 800edc2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ed78:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ed7a:	b314      	cbz	r4, 800edc2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ed7c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800ed80:	b1eb      	cbz	r3, 800edbe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ed82:	6828      	ldr	r0, [r5, #0]
 800ed84:	466b      	mov	r3, sp
 800ed86:	6869      	ldr	r1, [r5, #4]
 800ed88:	c303      	stmia	r3!, {r0, r1}
 800ed8a:	4668      	mov	r0, sp
 800ed8c:	1d21      	adds	r1, r4, #4
 800ed8e:	f7ff ff15 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 800ed92:	4668      	mov	r0, sp
 800ed94:	f7ff ff55 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ed98:	b988      	cbnz	r0, 800edbe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ed9a:	f8bd 3000 	ldrh.w	r3, [sp]
 800ed9e:	4669      	mov	r1, sp
 800eda0:	88a2      	ldrh	r2, [r4, #4]
 800eda2:	4620      	mov	r0, r4
 800eda4:	1a9b      	subs	r3, r3, r2
 800eda6:	88e2      	ldrh	r2, [r4, #6]
 800eda8:	f8ad 3000 	strh.w	r3, [sp]
 800edac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800edb0:	1a9b      	subs	r3, r3, r2
 800edb2:	4632      	mov	r2, r6
 800edb4:	f8ad 3002 	strh.w	r3, [sp, #2]
 800edb8:	6823      	ldr	r3, [r4, #0]
 800edba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800edbc:	4798      	blx	r3
 800edbe:	69a4      	ldr	r4, [r4, #24]
 800edc0:	e7db      	b.n	800ed7a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800edc2:	b002      	add	sp, #8
 800edc4:	bd70      	pop	{r4, r5, r6, pc}

0800edc6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800edc6:	6803      	ldr	r3, [r0, #0]
 800edc8:	b513      	push	{r0, r1, r4, lr}
 800edca:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800edce:	2300      	movs	r3, #0
 800edd0:	e9cd 3300 	strd	r3, r3, [sp]
 800edd4:	466b      	mov	r3, sp
 800edd6:	47a0      	blx	r4
 800edd8:	b002      	add	sp, #8
 800edda:	bd10      	pop	{r4, pc}

0800eddc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800eddc:	2301      	movs	r3, #1
 800edde:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800ede2:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800ede6:	4770      	bx	lr

0800ede8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800ede8:	2301      	movs	r3, #1
 800edea:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800edee:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800edf2:	4770      	bx	lr

0800edf4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800edf4:	6843      	ldr	r3, [r0, #4]
 800edf6:	2201      	movs	r2, #1
 800edf8:	725a      	strb	r2, [r3, #9]
 800edfa:	6840      	ldr	r0, [r0, #4]
 800edfc:	6803      	ldr	r3, [r0, #0]
 800edfe:	691b      	ldr	r3, [r3, #16]
 800ee00:	4718      	bx	r3

0800ee02 <_ZN8touchgfx3HAL8flushDMAEv>:
 800ee02:	6840      	ldr	r0, [r0, #4]
 800ee04:	6803      	ldr	r3, [r0, #0]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	4718      	bx	r3

0800ee0a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800ee0a:	b530      	push	{r4, r5, lr}
 800ee0c:	b08b      	sub	sp, #44	@ 0x2c
 800ee0e:	6804      	ldr	r4, [r0, #0]
 800ee10:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800ee14:	9509      	str	r5, [sp, #36]	@ 0x24
 800ee16:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800ee1a:	9508      	str	r5, [sp, #32]
 800ee1c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800ee20:	9507      	str	r5, [sp, #28]
 800ee22:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800ee26:	9506      	str	r5, [sp, #24]
 800ee28:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800ee2c:	9505      	str	r5, [sp, #20]
 800ee2e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800ee32:	9504      	str	r5, [sp, #16]
 800ee34:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800ee38:	9503      	str	r5, [sp, #12]
 800ee3a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800ee3e:	9502      	str	r5, [sp, #8]
 800ee40:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800ee44:	e9cd 3500 	strd	r3, r5, [sp]
 800ee48:	4613      	mov	r3, r2
 800ee4a:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	47a0      	blx	r4
 800ee50:	b00b      	add	sp, #44	@ 0x2c
 800ee52:	bd30      	pop	{r4, r5, pc}

0800ee54 <_ZN8touchgfx3HAL10beginFrameEv>:
 800ee54:	4b04      	ldr	r3, [pc, #16]	@ (800ee68 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	b123      	cbz	r3, 800ee64 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800ee5a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800ee5e:	f080 0001 	eor.w	r0, r0, #1
 800ee62:	4770      	bx	lr
 800ee64:	2001      	movs	r0, #1
 800ee66:	4770      	bx	lr
 800ee68:	240251ee 	.word	0x240251ee

0800ee6c <_ZN8touchgfx3HAL8endFrameEv>:
 800ee6c:	b510      	push	{r4, lr}
 800ee6e:	4604      	mov	r4, r0
 800ee70:	6840      	ldr	r0, [r0, #4]
 800ee72:	6803      	ldr	r3, [r0, #0]
 800ee74:	689b      	ldr	r3, [r3, #8]
 800ee76:	4798      	blx	r3
 800ee78:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800ee7c:	b113      	cbz	r3, 800ee84 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800ee84:	bd10      	pop	{r4, pc}

0800ee86 <_ZN8touchgfx3HAL10initializeEv>:
 800ee86:	b510      	push	{r4, lr}
 800ee88:	4604      	mov	r4, r0
 800ee8a:	f7f3 fe09 	bl	8002aa0 <_ZN8touchgfx10OSWrappers10initializeEv>
 800ee8e:	f7f2 fe4f 	bl	8001b30 <_ZN8touchgfx4GPIO4initEv>
 800ee92:	6860      	ldr	r0, [r4, #4]
 800ee94:	6803      	ldr	r3, [r0, #0]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	4798      	blx	r3
 800ee9a:	68e0      	ldr	r0, [r4, #12]
 800ee9c:	6803      	ldr	r3, [r0, #0]
 800ee9e:	689b      	ldr	r3, [r3, #8]
 800eea0:	4798      	blx	r3
 800eea2:	6823      	ldr	r3, [r4, #0]
 800eea4:	4620      	mov	r0, r4
 800eea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeac:	4718      	bx	r3
	...

0800eeb0 <_ZN8touchgfx3HAL4tickEv>:
 800eeb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800eeb2:	6803      	ldr	r3, [r0, #0]
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	4d62      	ldr	r5, [pc, #392]	@ (800f040 <_ZN8touchgfx3HAL4tickEv+0x190>)
 800eeb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800eebc:	4798      	blx	r3
 800eebe:	2800      	cmp	r0, #0
 800eec0:	f000 809e 	beq.w	800f000 <_ZN8touchgfx3HAL4tickEv+0x150>
 800eec4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	d002      	beq.n	800eed2 <_ZN8touchgfx3HAL4tickEv+0x22>
 800eecc:	2001      	movs	r0, #1
 800eece:	f7f2 fd95 	bl	80019fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800eed2:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800eed6:	2600      	movs	r6, #0
 800eed8:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800eedc:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800eee0:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800eee4:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800eee8:	b133      	cbz	r3, 800eef8 <_ZN8touchgfx3HAL4tickEv+0x48>
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	4620      	mov	r0, r4
 800eeee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800eef2:	4798      	blx	r3
 800eef4:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800eef8:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800eefc:	2601      	movs	r6, #1
 800eefe:	6862      	ldr	r2, [r4, #4]
 800ef00:	f083 0301 	eor.w	r3, r3, #1
 800ef04:	702e      	strb	r6, [r5, #0]
 800ef06:	7253      	strb	r3, [r2, #9]
 800ef08:	f005 f8ae 	bl	8014068 <_ZN8touchgfx11Application11getInstanceEv>
 800ef0c:	6803      	ldr	r3, [r0, #0]
 800ef0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef10:	4798      	blx	r3
 800ef12:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800ef16:	b90b      	cbnz	r3, 800ef1c <_ZN8touchgfx3HAL4tickEv+0x6c>
 800ef18:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800ef1c:	f005 f8a4 	bl	8014068 <_ZN8touchgfx11Application11getInstanceEv>
 800ef20:	6803      	ldr	r3, [r0, #0]
 800ef22:	695b      	ldr	r3, [r3, #20]
 800ef24:	4798      	blx	r3
 800ef26:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800ef28:	6803      	ldr	r3, [r0, #0]
 800ef2a:	691b      	ldr	r3, [r3, #16]
 800ef2c:	4798      	blx	r3
 800ef2e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800ef32:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800ef36:	3b01      	subs	r3, #1
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800ef3e:	b10a      	cbz	r2, 800ef44 <_ZN8touchgfx3HAL4tickEv+0x94>
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1eb      	bne.n	800ef1c <_ZN8touchgfx3HAL4tickEv+0x6c>
 800ef44:	4a3f      	ldr	r2, [pc, #252]	@ (800f044 <_ZN8touchgfx3HAL4tickEv+0x194>)
 800ef46:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800ef4a:	7813      	ldrb	r3, [r2, #0]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	b25b      	sxtb	r3, r3
 800ef50:	4299      	cmp	r1, r3
 800ef52:	7013      	strb	r3, [r2, #0]
 800ef54:	dc10      	bgt.n	800ef78 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800ef56:	2300      	movs	r3, #0
 800ef58:	68e0      	ldr	r0, [r4, #12]
 800ef5a:	a902      	add	r1, sp, #8
 800ef5c:	7013      	strb	r3, [r2, #0]
 800ef5e:	aa03      	add	r2, sp, #12
 800ef60:	6803      	ldr	r3, [r0, #0]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	4798      	blx	r3
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d059      	beq.n	800f020 <_ZN8touchgfx3HAL4tickEv+0x170>
 800ef6c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ef70:	4620      	mov	r0, r4
 800ef72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ef76:	4798      	blx	r3
 800ef78:	2300      	movs	r3, #0
 800ef7a:	6960      	ldr	r0, [r4, #20]
 800ef7c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ef80:	b158      	cbz	r0, 800ef9a <_ZN8touchgfx3HAL4tickEv+0xea>
 800ef82:	6803      	ldr	r3, [r0, #0]
 800ef84:	f10d 0107 	add.w	r1, sp, #7
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	4798      	blx	r3
 800ef8c:	b128      	cbz	r0, 800ef9a <_ZN8touchgfx3HAL4tickEv+0xea>
 800ef8e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800ef90:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ef94:	6803      	ldr	r3, [r0, #0]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	4798      	blx	r3
 800ef9a:	f104 001c 	add.w	r0, r4, #28
 800ef9e:	f012 fe43 	bl	8021c28 <_ZN8touchgfx8Gestures4tickEv>
 800efa2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800efa6:	b30b      	cbz	r3, 800efec <_ZN8touchgfx3HAL4tickEv+0x13c>
 800efa8:	6920      	ldr	r0, [r4, #16]
 800efaa:	6803      	ldr	r3, [r0, #0]
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	4798      	blx	r3
 800efb0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800efb2:	4606      	mov	r6, r0
 800efb4:	b903      	cbnz	r3, 800efb8 <_ZN8touchgfx3HAL4tickEv+0x108>
 800efb6:	6760      	str	r0, [r4, #116]	@ 0x74
 800efb8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800efba:	4a23      	ldr	r2, [pc, #140]	@ (800f048 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800efbc:	1af3      	subs	r3, r6, r3
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d914      	bls.n	800efec <_ZN8touchgfx3HAL4tickEv+0x13c>
 800efc2:	6920      	ldr	r0, [r4, #16]
 800efc4:	6803      	ldr	r3, [r0, #0]
 800efc6:	699b      	ldr	r3, [r3, #24]
 800efc8:	4798      	blx	r3
 800efca:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800efcc:	2264      	movs	r2, #100	@ 0x64
 800efce:	1af3      	subs	r3, r6, r3
 800efd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800efd4:	fbb0 f0f3 	udiv	r0, r0, r3
 800efd8:	2800      	cmp	r0, #0
 800efda:	dc26      	bgt.n	800f02a <_ZN8touchgfx3HAL4tickEv+0x17a>
 800efdc:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800efe0:	6920      	ldr	r0, [r4, #16]
 800efe2:	2100      	movs	r1, #0
 800efe4:	6803      	ldr	r3, [r0, #0]
 800efe6:	69db      	ldr	r3, [r3, #28]
 800efe8:	4798      	blx	r3
 800efea:	6766      	str	r6, [r4, #116]	@ 0x74
 800efec:	6823      	ldr	r3, [r4, #0]
 800efee:	4620      	mov	r0, r4
 800eff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eff4:	4798      	blx	r3
 800eff6:	f005 f837 	bl	8014068 <_ZN8touchgfx11Application11getInstanceEv>
 800effa:	6803      	ldr	r3, [r0, #0]
 800effc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800effe:	4798      	blx	r3
 800f000:	6823      	ldr	r3, [r4, #0]
 800f002:	4620      	mov	r0, r4
 800f004:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f008:	4798      	blx	r3
 800f00a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f00e:	2b02      	cmp	r3, #2
 800f010:	d002      	beq.n	800f018 <_ZN8touchgfx3HAL4tickEv+0x168>
 800f012:	2001      	movs	r0, #1
 800f014:	f7f2 fd22 	bl	8001a5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f018:	2300      	movs	r3, #0
 800f01a:	702b      	strb	r3, [r5, #0]
 800f01c:	b004      	add	sp, #16
 800f01e:	bd70      	pop	{r4, r5, r6, pc}
 800f020:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800f024:	4620      	mov	r0, r4
 800f026:	4798      	blx	r3
 800f028:	e7a6      	b.n	800ef78 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800f02a:	2863      	cmp	r0, #99	@ 0x63
 800f02c:	bfcb      	itete	gt
 800f02e:	2300      	movgt	r3, #0
 800f030:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800f034:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800f038:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800f03c:	e7d0      	b.n	800efe0 <_ZN8touchgfx3HAL4tickEv+0x130>
 800f03e:	bf00      	nop
 800f040:	240251f4 	.word	0x240251f4
 800f044:	240251f5 	.word	0x240251f5
 800f048:	05f5e100 	.word	0x05f5e100

0800f04c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800f04c:	b510      	push	{r4, lr}
 800f04e:	4604      	mov	r4, r0
 800f050:	f7f3 fd56 	bl	8002b00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800f054:	2200      	movs	r2, #0
 800f056:	6863      	ldr	r3, [r4, #4]
 800f058:	729a      	strb	r2, [r3, #10]
 800f05a:	bd10      	pop	{r4, pc}

0800f05c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800f05c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800f05e:	301c      	adds	r0, #28
 800f060:	f012 bde0 	b.w	8021c24 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800f064 <_ZN8touchgfx3HAL5touchEll>:
 800f064:	b530      	push	{r4, r5, lr}
 800f066:	b087      	sub	sp, #28
 800f068:	4604      	mov	r4, r0
 800f06a:	a804      	add	r0, sp, #16
 800f06c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f070:	f004 fde2 	bl	8013c38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800f074:	9b04      	ldr	r3, [sp, #16]
 800f076:	a906      	add	r1, sp, #24
 800f078:	a803      	add	r0, sp, #12
 800f07a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f07e:	9b05      	ldr	r3, [sp, #20]
 800f080:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800f084:	f004 fe2a 	bl	8013cdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800f088:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800f08c:	f104 001c 	add.w	r0, r4, #28
 800f090:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f094:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f098:	b189      	cbz	r1, 800f0be <_ZN8touchgfx3HAL5touchEll+0x5a>
 800f09a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800f09e:	9300      	str	r3, [sp, #0]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800f0a6:	462a      	mov	r2, r5
 800f0a8:	f012 fdcc 	bl	8021c44 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800f0ac:	b128      	cbz	r0, 800f0ba <_ZN8touchgfx3HAL5touchEll+0x56>
 800f0ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f0b2:	6623      	str	r3, [r4, #96]	@ 0x60
 800f0b4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f0b8:	6663      	str	r3, [r4, #100]	@ 0x64
 800f0ba:	b007      	add	sp, #28
 800f0bc:	bd30      	pop	{r4, r5, pc}
 800f0be:	f012 fe01 	bl	8021cc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800f0c8:	e7f1      	b.n	800f0ae <_ZN8touchgfx3HAL5touchEll+0x4a>

0800f0ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800f0ca:	b510      	push	{r4, lr}
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d046      	beq.n	800f15e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f0d0:	ea81 0002 	eor.w	r0, r1, r2
 800f0d4:	07c4      	lsls	r4, r0, #31
 800f0d6:	d508      	bpl.n	800f0ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800f0d8:	440b      	add	r3, r1
 800f0da:	3a01      	subs	r2, #1
 800f0dc:	428b      	cmp	r3, r1
 800f0de:	d93e      	bls.n	800f15e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f0e0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f0e4:	f801 0b01 	strb.w	r0, [r1], #1
 800f0e8:	e7f8      	b.n	800f0dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800f0ea:	07d0      	lsls	r0, r2, #31
 800f0ec:	bf42      	ittt	mi
 800f0ee:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800f0f2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f0f6:	f801 0b01 	strbmi.w	r0, [r1], #1
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d911      	bls.n	800f122 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f0fe:	ea81 0402 	eor.w	r4, r1, r2
 800f102:	4610      	mov	r0, r2
 800f104:	07a4      	lsls	r4, r4, #30
 800f106:	d022      	beq.n	800f14e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800f108:	f023 0401 	bic.w	r4, r3, #1
 800f10c:	440c      	add	r4, r1
 800f10e:	428c      	cmp	r4, r1
 800f110:	4602      	mov	r2, r0
 800f112:	d904      	bls.n	800f11e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800f114:	8812      	ldrh	r2, [r2, #0]
 800f116:	3002      	adds	r0, #2
 800f118:	f821 2b02 	strh.w	r2, [r1], #2
 800f11c:	e7f7      	b.n	800f10e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800f11e:	f003 0301 	and.w	r3, r3, #1
 800f122:	f023 0003 	bic.w	r0, r3, #3
 800f126:	4408      	add	r0, r1
 800f128:	4288      	cmp	r0, r1
 800f12a:	4614      	mov	r4, r2
 800f12c:	d904      	bls.n	800f138 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800f12e:	6824      	ldr	r4, [r4, #0]
 800f130:	3204      	adds	r2, #4
 800f132:	f841 4b04 	str.w	r4, [r1], #4
 800f136:	e7f7      	b.n	800f128 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800f138:	f003 0303 	and.w	r3, r3, #3
 800f13c:	3a01      	subs	r2, #1
 800f13e:	440b      	add	r3, r1
 800f140:	428b      	cmp	r3, r1
 800f142:	d90c      	bls.n	800f15e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f144:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f148:	f801 0b01 	strb.w	r0, [r1], #1
 800f14c:	e7f8      	b.n	800f140 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800f14e:	0790      	lsls	r0, r2, #30
 800f150:	d0e7      	beq.n	800f122 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f152:	f832 0b02 	ldrh.w	r0, [r2], #2
 800f156:	3b02      	subs	r3, #2
 800f158:	f821 0b02 	strh.w	r0, [r1], #2
 800f15c:	e7e1      	b.n	800f122 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f15e:	2001      	movs	r0, #1
 800f160:	bd10      	pop	{r4, pc}

0800f162 <_ZN8touchgfx3HAL7noTouchEv>:
 800f162:	b510      	push	{r4, lr}
 800f164:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800f168:	4604      	mov	r4, r0
 800f16a:	b153      	cbz	r3, 800f182 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800f16c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800f170:	2101      	movs	r1, #1
 800f172:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800f176:	301c      	adds	r0, #28
 800f178:	f012 fda4 	bl	8021cc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f17c:	2300      	movs	r3, #0
 800f17e:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800f182:	bd10      	pop	{r4, pc}

0800f184 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800f184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f188:	b085      	sub	sp, #20
 800f18a:	4604      	mov	r4, r0
 800f18c:	2000      	movs	r0, #0
 800f18e:	4699      	mov	r9, r3
 800f190:	ad04      	add	r5, sp, #16
 800f192:	460f      	mov	r7, r1
 800f194:	4690      	mov	r8, r2
 800f196:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f19a:	69a0      	ldr	r0, [r4, #24]
 800f19c:	6806      	ldr	r6, [r0, #0]
 800f19e:	9501      	str	r5, [sp, #4]
 800f1a0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800f1a4:	9500      	str	r5, [sp, #0]
 800f1a6:	6835      	ldr	r5, [r6, #0]
 800f1a8:	47a8      	blx	r5
 800f1aa:	4d10      	ldr	r5, [pc, #64]	@ (800f1ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800f1ac:	4606      	mov	r6, r0
 800f1ae:	f8a5 9000 	strh.w	r9, [r5]
 800f1b2:	f7f4 fdaf 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f1b6:	6803      	ldr	r3, [r0, #0]
 800f1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ba:	4798      	blx	r3
 800f1bc:	b128      	cbz	r0, 800f1ca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800f1be:	2801      	cmp	r0, #1
 800f1c0:	d00b      	beq.n	800f1da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	b005      	add	sp, #20
 800f1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1ca:	882b      	ldrh	r3, [r5, #0]
 800f1cc:	fb08 7203 	mla	r2, r8, r3, r7
 800f1d0:	9b03      	ldr	r3, [sp, #12]
 800f1d2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800f1d6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f1d8:	e7f3      	b.n	800f1c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f1da:	882a      	ldrh	r2, [r5, #0]
 800f1dc:	9b03      	ldr	r3, [sp, #12]
 800f1de:	fb08 7202 	mla	r2, r8, r2, r7
 800f1e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f1e6:	1a9a      	subs	r2, r3, r2
 800f1e8:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800f1ea:	e7ea      	b.n	800f1c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f1ec:	240251ea 	.word	0x240251ea

0800f1f0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f2:	4b15      	ldr	r3, [pc, #84]	@ (800f248 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 800f1f4:	460f      	mov	r7, r1
 800f1f6:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800f1fa:	4606      	mov	r6, r0
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800f200:	fb93 f4f4 	sdiv	r4, r3, r4
 800f204:	f7f4 fd86 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f208:	6803      	ldr	r3, [r0, #0]
 800f20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f20c:	4798      	blx	r3
 800f20e:	2801      	cmp	r0, #1
 800f210:	d00b      	beq.n	800f22a <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800f212:	d303      	bcc.n	800f21c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 800f214:	2802      	cmp	r0, #2
 800f216:	d010      	beq.n	800f23a <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800f218:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800f21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f21c:	4b0b      	ldr	r3, [pc, #44]	@ (800f24c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f21e:	437c      	muls	r4, r7
 800f220:	8819      	ldrh	r1, [r3, #0]
 800f222:	434c      	muls	r4, r1
 800f224:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800f228:	e7f6      	b.n	800f218 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f22a:	4b08      	ldr	r3, [pc, #32]	@ (800f24c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f22c:	437c      	muls	r4, r7
 800f22e:	8819      	ldrh	r1, [r3, #0]
 800f230:	434c      	muls	r4, r1
 800f232:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f236:	1b2d      	subs	r5, r5, r4
 800f238:	e7ee      	b.n	800f218 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f23a:	4b04      	ldr	r3, [pc, #16]	@ (800f24c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f23c:	437c      	muls	r4, r7
 800f23e:	8819      	ldrh	r1, [r3, #0]
 800f240:	434c      	muls	r4, r1
 800f242:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800f246:	e7e7      	b.n	800f218 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f248:	240251ec 	.word	0x240251ec
 800f24c:	240251ea 	.word	0x240251ea

0800f250 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800f250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f252:	b08b      	sub	sp, #44	@ 0x2c
 800f254:	4617      	mov	r7, r2
 800f256:	4604      	mov	r4, r0
 800f258:	460e      	mov	r6, r1
 800f25a:	461d      	mov	r5, r3
 800f25c:	f7f4 fd5a 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f260:	6803      	ldr	r3, [r0, #0]
 800f262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f264:	4798      	blx	r3
 800f266:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800f26a:	9007      	str	r0, [sp, #28]
 800f26c:	4631      	mov	r1, r6
 800f26e:	6822      	ldr	r2, [r4, #0]
 800f270:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f274:	4b0c      	ldr	r3, [pc, #48]	@ (800f2a8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800f276:	4620      	mov	r0, r4
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	9306      	str	r3, [sp, #24]
 800f27c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f280:	9305      	str	r3, [sp, #20]
 800f282:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800f286:	9304      	str	r3, [sp, #16]
 800f288:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f28c:	9303      	str	r3, [sp, #12]
 800f28e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f292:	9302      	str	r3, [sp, #8]
 800f294:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f298:	e9cd 5300 	strd	r5, r3, [sp]
 800f29c:	463b      	mov	r3, r7
 800f29e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	47a8      	blx	r5
 800f2a4:	b00b      	add	sp, #44	@ 0x2c
 800f2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2a8:	240251ea 	.word	0x240251ea

0800f2ac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800f2ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2b0:	4698      	mov	r8, r3
 800f2b2:	6803      	ldr	r3, [r0, #0]
 800f2b4:	b08b      	sub	sp, #44	@ 0x2c
 800f2b6:	4617      	mov	r7, r2
 800f2b8:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800f2ba:	460e      	mov	r6, r1
 800f2bc:	4b13      	ldr	r3, [pc, #76]	@ (800f30c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800f2be:	4604      	mov	r4, r0
 800f2c0:	f8b3 9000 	ldrh.w	r9, [r3]
 800f2c4:	f7f4 fd26 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f2c8:	6803      	ldr	r3, [r0, #0]
 800f2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2cc:	4798      	blx	r3
 800f2ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f2da:	2302      	movs	r3, #2
 800f2dc:	4620      	mov	r0, r4
 800f2de:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	9305      	str	r3, [sp, #20]
 800f2e6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800f2ea:	9304      	str	r3, [sp, #16]
 800f2ec:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800f2f0:	9303      	str	r3, [sp, #12]
 800f2f2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f2f6:	9302      	str	r3, [sp, #8]
 800f2f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f2fc:	e9cd 8300 	strd	r8, r3, [sp]
 800f300:	463b      	mov	r3, r7
 800f302:	47a8      	blx	r5
 800f304:	b00b      	add	sp, #44	@ 0x2c
 800f306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f30a:	bf00      	nop
 800f30c:	240251ea 	.word	0x240251ea

0800f310 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800f310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f314:	4698      	mov	r8, r3
 800f316:	6803      	ldr	r3, [r0, #0]
 800f318:	b087      	sub	sp, #28
 800f31a:	460e      	mov	r6, r1
 800f31c:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800f31e:	4617      	mov	r7, r2
 800f320:	4b0f      	ldr	r3, [pc, #60]	@ (800f360 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800f322:	4604      	mov	r4, r0
 800f324:	f8b3 9000 	ldrh.w	r9, [r3]
 800f328:	f7f4 fcf4 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f32c:	6803      	ldr	r3, [r0, #0]
 800f32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f330:	4798      	blx	r3
 800f332:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800f336:	463a      	mov	r2, r7
 800f338:	4631      	mov	r1, r6
 800f33a:	f8cd 900c 	str.w	r9, [sp, #12]
 800f33e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800f342:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800f346:	4620      	mov	r0, r4
 800f348:	9302      	str	r3, [sp, #8]
 800f34a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	4643      	mov	r3, r8
 800f358:	47a8      	blx	r5
 800f35a:	b007      	add	sp, #28
 800f35c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f360:	240251ea 	.word	0x240251ea

0800f364 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800f364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f368:	4604      	mov	r4, r0
 800f36a:	b08f      	sub	sp, #60	@ 0x3c
 800f36c:	4610      	mov	r0, r2
 800f36e:	460d      	mov	r5, r1
 800f370:	4691      	mov	r9, r2
 800f372:	461e      	mov	r6, r3
 800f374:	f008 fb42 	bl	80179fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f378:	2800      	cmp	r0, #0
 800f37a:	f000 809d 	beq.w	800f4b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	4620      	mov	r0, r4
 800f382:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800f51c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800f386:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800f38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f38c:	4798      	blx	r3
 800f38e:	6823      	ldr	r3, [r4, #0]
 800f390:	4620      	mov	r0, r4
 800f392:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800f520 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800f396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f398:	4798      	blx	r3
 800f39a:	f8bb 3000 	ldrh.w	r3, [fp]
 800f39e:	4f5c      	ldr	r7, [pc, #368]	@ (800f510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f3a0:	9301      	str	r3, [sp, #4]
 800f3a2:	f8ba 3000 	ldrh.w	r3, [sl]
 800f3a6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800f3aa:	4640      	mov	r0, r8
 800f3ac:	9302      	str	r3, [sp, #8]
 800f3ae:	883b      	ldrh	r3, [r7, #0]
 800f3b0:	9303      	str	r3, [sp, #12]
 800f3b2:	4b58      	ldr	r3, [pc, #352]	@ (800f514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f3b4:	881a      	ldrh	r2, [r3, #0]
 800f3b6:	9305      	str	r3, [sp, #20]
 800f3b8:	9204      	str	r2, [sp, #16]
 800f3ba:	f008 fc6f 	bl	8017c9c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f3be:	8038      	strh	r0, [r7, #0]
 800f3c0:	4640      	mov	r0, r8
 800f3c2:	f008 fc9f 	bl	8017d04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f3c6:	9b05      	ldr	r3, [sp, #20]
 800f3c8:	b280      	uxth	r0, r0
 800f3ca:	8018      	strh	r0, [r3, #0]
 800f3cc:	4b52      	ldr	r3, [pc, #328]	@ (800f518 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d174      	bne.n	800f4be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800f3d4:	883b      	ldrh	r3, [r7, #0]
 800f3d6:	f8aa 0000 	strh.w	r0, [sl]
 800f3da:	f8ab 3000 	strh.w	r3, [fp]
 800f3de:	4648      	mov	r0, r9
 800f3e0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800f3e4:	f008 fb0a 	bl	80179fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800f3ee:	4611      	mov	r1, r2
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800f3f6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800f3fa:	f7f4 fdd8 	bl	8003fae <_ZN8touchgfx8Drawable5setXYEss>
 800f3fe:	2301      	movs	r3, #1
 800f400:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800f404:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f408:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	dd5c      	ble.n	800f4ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f410:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f414:	2b00      	cmp	r3, #0
 800f416:	dd58      	ble.n	800f4ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f418:	462a      	mov	r2, r5
 800f41a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f41c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f420:	6851      	ldr	r1, [r2, #4]
 800f422:	c303      	stmia	r3!, {r0, r1}
 800f424:	4631      	mov	r1, r6
 800f426:	a80a      	add	r0, sp, #40	@ 0x28
 800f428:	f7ff fbc8 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 800f42c:	4b38      	ldr	r3, [pc, #224]	@ (800f510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f42e:	2100      	movs	r1, #0
 800f430:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f434:	4b37      	ldr	r3, [pc, #220]	@ (800f514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f436:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800f43a:	aa0a      	add	r2, sp, #40	@ 0x28
 800f43c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f440:	910c      	str	r1, [sp, #48]	@ 0x30
 800f442:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800f446:	ab08      	add	r3, sp, #32
 800f448:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f44c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f450:	4618      	mov	r0, r3
 800f452:	a90c      	add	r1, sp, #48	@ 0x30
 800f454:	f7ff fbb2 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 800f458:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d13c      	bne.n	800f4d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800f45e:	2000      	movs	r0, #0
 800f460:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800f464:	2600      	movs	r6, #0
 800f466:	696b      	ldr	r3, [r5, #20]
 800f468:	a908      	add	r1, sp, #32
 800f46a:	682a      	ldr	r2, [r5, #0]
 800f46c:	4628      	mov	r0, r5
 800f46e:	9305      	str	r3, [sp, #20]
 800f470:	616e      	str	r6, [r5, #20]
 800f472:	6892      	ldr	r2, [r2, #8]
 800f474:	4790      	blx	r2
 800f476:	9b05      	ldr	r3, [sp, #20]
 800f478:	4652      	mov	r2, sl
 800f47a:	4649      	mov	r1, r9
 800f47c:	616b      	str	r3, [r5, #20]
 800f47e:	4628      	mov	r0, r5
 800f480:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800f484:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800f488:	f7f4 fd91 	bl	8003fae <_ZN8touchgfx8Drawable5setXYEss>
 800f48c:	9a01      	ldr	r2, [sp, #4]
 800f48e:	4b23      	ldr	r3, [pc, #140]	@ (800f51c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800f490:	4620      	mov	r0, r4
 800f492:	801a      	strh	r2, [r3, #0]
 800f494:	9a02      	ldr	r2, [sp, #8]
 800f496:	4b22      	ldr	r3, [pc, #136]	@ (800f520 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800f498:	801a      	strh	r2, [r3, #0]
 800f49a:	9a03      	ldr	r2, [sp, #12]
 800f49c:	4b1c      	ldr	r3, [pc, #112]	@ (800f510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f49e:	801a      	strh	r2, [r3, #0]
 800f4a0:	4b1c      	ldr	r3, [pc, #112]	@ (800f514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f4a2:	9a04      	ldr	r2, [sp, #16]
 800f4a4:	801a      	strh	r2, [r3, #0]
 800f4a6:	6823      	ldr	r3, [r4, #0]
 800f4a8:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800f4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ae:	4798      	blx	r3
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4b6:	4798      	blx	r3
 800f4b8:	b00f      	add	sp, #60	@ 0x3c
 800f4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4be:	883b      	ldrh	r3, [r7, #0]
 800f4c0:	f8ab 0000 	strh.w	r0, [fp]
 800f4c4:	f8aa 3000 	strh.w	r3, [sl]
 800f4c8:	e789      	b.n	800f3de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800f4ca:	462a      	mov	r2, r5
 800f4cc:	ab0a      	add	r3, sp, #40	@ 0x28
 800f4ce:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f4d2:	6851      	ldr	r1, [r2, #4]
 800f4d4:	c303      	stmia	r3!, {r0, r1}
 800f4d6:	e7a9      	b.n	800f42c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800f4d8:	a807      	add	r0, sp, #28
 800f4da:	f008 fd1d 	bl	8017f18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f4de:	4606      	mov	r6, r0
 800f4e0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800f4e2:	6803      	ldr	r3, [r0, #0]
 800f4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4e6:	4798      	blx	r3
 800f4e8:	4286      	cmp	r6, r0
 800f4ea:	d1b8      	bne.n	800f45e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800f4ec:	f7f4 fc12 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f4f0:	6803      	ldr	r3, [r0, #0]
 800f4f2:	4606      	mov	r6, r0
 800f4f4:	a807      	add	r0, sp, #28
 800f4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4f8:	9305      	str	r3, [sp, #20]
 800f4fa:	f008 fd0d 	bl	8017f18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f4fe:	9b05      	ldr	r3, [sp, #20]
 800f500:	4601      	mov	r1, r0
 800f502:	4630      	mov	r0, r6
 800f504:	4798      	blx	r3
 800f506:	f080 0001 	eor.w	r0, r0, #1
 800f50a:	b2c0      	uxtb	r0, r0
 800f50c:	e7a8      	b.n	800f460 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800f50e:	bf00      	nop
 800f510:	240251e4 	.word	0x240251e4
 800f514:	240251e6 	.word	0x240251e6
 800f518:	240251e8 	.word	0x240251e8
 800f51c:	240251ea 	.word	0x240251ea
 800f520:	240251ec 	.word	0x240251ec

0800f524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800f524:	4b07      	ldr	r3, [pc, #28]	@ (800f544 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800f526:	b510      	push	{r4, lr}
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	4604      	mov	r4, r0
 800f52c:	b13b      	cbz	r3, 800f53e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f52e:	6803      	ldr	r3, [r0, #0]
 800f530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f532:	4798      	blx	r3
 800f534:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f536:	4283      	cmp	r3, r0
 800f538:	d101      	bne.n	800f53e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f53a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800f53c:	bd10      	pop	{r4, pc}
 800f53e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800f540:	e7fc      	b.n	800f53c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800f542:	bf00      	nop
 800f544:	240251ee 	.word	0x240251ee

0800f548 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f54c:	461d      	mov	r5, r3
 800f54e:	b08a      	sub	sp, #40	@ 0x28
 800f550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f554:	4690      	mov	r8, r2
 800f556:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800f55a:	2400      	movs	r4, #0
 800f55c:	4607      	mov	r7, r0
 800f55e:	fb06 8505 	mla	r5, r6, r5, r8
 800f562:	9404      	str	r4, [sp, #16]
 800f564:	f88d 4020 	strb.w	r4, [sp, #32]
 800f568:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f56c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f570:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f574:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f578:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f57c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f580:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f584:	f7ff ffce 	bl	800f524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f588:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f592:	a901      	add	r1, sp, #4
 800f594:	9505      	str	r5, [sp, #20]
 800f596:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f59a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800f59e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800f5a2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800f5a6:	6803      	ldr	r3, [r0, #0]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	4798      	blx	r3
 800f5ac:	b00a      	add	sp, #40	@ 0x28
 800f5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f5b2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800f5b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5b6:	b08b      	sub	sp, #44	@ 0x2c
 800f5b8:	2400      	movs	r4, #0
 800f5ba:	4691      	mov	r9, r2
 800f5bc:	461d      	mov	r5, r3
 800f5be:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800f5c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f5c6:	4688      	mov	r8, r1
 800f5c8:	4607      	mov	r7, r0
 800f5ca:	9404      	str	r4, [sp, #16]
 800f5cc:	fb06 9505 	mla	r5, r6, r5, r9
 800f5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5d4:	f7ff ffa6 	bl	800f524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f5d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f5dc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f5e6:	a901      	add	r1, sp, #4
 800f5e8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f5ec:	9505      	str	r5, [sp, #20]
 800f5ee:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f5f2:	f8ad 401c 	strh.w	r4, [sp, #28]
 800f5f6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f5fa:	f8cd 8010 	str.w	r8, [sp, #16]
 800f5fe:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f602:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f606:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800f60a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800f60e:	6803      	ldr	r3, [r0, #0]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	4798      	blx	r3
 800f614:	b00b      	add	sp, #44	@ 0x2c
 800f616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800f61c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800f61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f620:	b08a      	sub	sp, #40	@ 0x28
 800f622:	4698      	mov	r8, r3
 800f624:	2300      	movs	r3, #0
 800f626:	4606      	mov	r6, r0
 800f628:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800f62c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800f630:	2d0b      	cmp	r5, #11
 800f632:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800f636:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800f63a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800f63e:	9304      	str	r3, [sp, #16]
 800f640:	d137      	bne.n	800f6b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800f642:	2380      	movs	r3, #128	@ 0x80
 800f644:	f88d 0020 	strb.w	r0, [sp, #32]
 800f648:	4630      	mov	r0, r6
 800f64a:	9203      	str	r2, [sp, #12]
 800f64c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f650:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f654:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f658:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f65c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f660:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f664:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f668:	f7ff ff5c 	bl	800f524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f66c:	2c0b      	cmp	r4, #11
 800f66e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f672:	f8ad 701e 	strh.w	r7, [sp, #30]
 800f676:	bf94      	ite	ls
 800f678:	4b19      	ldrls	r3, [pc, #100]	@ (800f6e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800f67a:	2100      	movhi	r1, #0
 800f67c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800f680:	bf98      	it	ls
 800f682:	5d19      	ldrbls	r1, [r3, r4]
 800f684:	fb02 8307 	mla	r3, r2, r7, r8
 800f688:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f68c:	10c9      	asrs	r1, r1, #3
 800f68e:	fb01 0003 	mla	r0, r1, r3, r0
 800f692:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800f696:	a901      	add	r1, sp, #4
 800f698:	9005      	str	r0, [sp, #20]
 800f69a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800f69e:	2300      	movs	r3, #0
 800f6a0:	6870      	ldr	r0, [r6, #4]
 800f6a2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f6a6:	6803      	ldr	r3, [r0, #0]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	4798      	blx	r3
 800f6ac:	b00a      	add	sp, #40	@ 0x28
 800f6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b2:	2d02      	cmp	r5, #2
 800f6b4:	d109      	bne.n	800f6ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800f6b6:	28ff      	cmp	r0, #255	@ 0xff
 800f6b8:	d105      	bne.n	800f6c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800f6ba:	f1bc 0f00 	cmp.w	ip, #0
 800f6be:	bf14      	ite	ne
 800f6c0:	2340      	movne	r3, #64	@ 0x40
 800f6c2:	2320      	moveq	r3, #32
 800f6c4:	e7be      	b.n	800f644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f6c6:	2340      	movs	r3, #64	@ 0x40
 800f6c8:	e7bc      	b.n	800f644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f6ca:	28ff      	cmp	r0, #255	@ 0xff
 800f6cc:	d105      	bne.n	800f6da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800f6ce:	f1bc 0f00 	cmp.w	ip, #0
 800f6d2:	bf14      	ite	ne
 800f6d4:	2304      	movne	r3, #4
 800f6d6:	2301      	moveq	r3, #1
 800f6d8:	e7b4      	b.n	800f644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f6da:	2304      	movs	r3, #4
 800f6dc:	e7b2      	b.n	800f644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f6de:	bf00      	nop
 800f6e0:	08026a40 	.word	0x08026a40

0800f6e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800f6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	b08b      	sub	sp, #44	@ 0x2c
 800f6ea:	461d      	mov	r5, r3
 800f6ec:	2400      	movs	r4, #0
 800f6ee:	4688      	mov	r8, r1
 800f6f0:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800f6f4:	4693      	mov	fp, r2
 800f6f6:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800f6fa:	4607      	mov	r7, r0
 800f6fc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800f700:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800f704:	9404      	str	r4, [sp, #16]
 800f706:	bf14      	ite	ne
 800f708:	2308      	movne	r3, #8
 800f70a:	2302      	moveq	r3, #2
 800f70c:	fb05 b50a 	mla	r5, r5, sl, fp
 800f710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f714:	f7ff ff06 	bl	800f524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f718:	2e0b      	cmp	r6, #11
 800f71a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800f71e:	a901      	add	r1, sp, #4
 800f720:	bf98      	it	ls
 800f722:	4b13      	ldrls	r3, [pc, #76]	@ (800f770 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800f724:	f8ad a01e 	strh.w	sl, [sp, #30]
 800f728:	bf98      	it	ls
 800f72a:	5d9c      	ldrbls	r4, [r3, r6]
 800f72c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800f730:	10e4      	asrs	r4, r4, #3
 800f732:	f8cd 8010 	str.w	r8, [sp, #16]
 800f736:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f73a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800f73e:	fb04 0405 	mla	r4, r4, r5, r0
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f748:	2300      	movs	r3, #0
 800f74a:	9405      	str	r4, [sp, #20]
 800f74c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f750:	f88d 9020 	strb.w	r9, [sp, #32]
 800f754:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800f758:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f75c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800f760:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800f764:	6803      	ldr	r3, [r0, #0]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	4798      	blx	r3
 800f76a:	b00b      	add	sp, #44	@ 0x2c
 800f76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f770:	08026a40 	.word	0x08026a40

0800f774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800f774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f778:	461e      	mov	r6, r3
 800f77a:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800f77c:	460f      	mov	r7, r1
 800f77e:	4690      	mov	r8, r2
 800f780:	881d      	ldrh	r5, [r3, #0]
 800f782:	f7f4 fac7 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f786:	6803      	ldr	r3, [r0, #0]
 800f788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f78a:	4798      	blx	r3
 800f78c:	280b      	cmp	r0, #11
 800f78e:	bf96      	itet	ls
 800f790:	4b05      	ldrls	r3, [pc, #20]	@ (800f7a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800f792:	2400      	movhi	r4, #0
 800f794:	5c1c      	ldrbls	r4, [r3, r0]
 800f796:	fb08 7005 	mla	r0, r8, r5, r7
 800f79a:	10e4      	asrs	r4, r4, #3
 800f79c:	fb04 6000 	mla	r0, r4, r0, r6
 800f7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a4:	240251ea 	.word	0x240251ea
 800f7a8:	08026a40 	.word	0x08026a40

0800f7ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800f7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ae:	b08b      	sub	sp, #44	@ 0x2c
 800f7b0:	461f      	mov	r7, r3
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	4616      	mov	r6, r2
 800f7b6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800f7ba:	2500      	movs	r5, #0
 800f7bc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f7c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f7c4:	9504      	str	r5, [sp, #16]
 800f7c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f7ca:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f7ce:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f7d2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f7d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f7da:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f7de:	f88d 3020 	strb.w	r3, [sp, #32]
 800f7e2:	f7ff fe9f 	bl	800f524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f7e6:	463a      	mov	r2, r7
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f7ff ffc1 	bl	800f774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f7f2:	4b0e      	ldr	r3, [pc, #56]	@ (800f82c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800f7f4:	9005      	str	r0, [sp, #20]
 800f7f6:	881b      	ldrh	r3, [r3, #0]
 800f7f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f7fc:	f7f4 fa8a 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f800:	6803      	ldr	r3, [r0, #0]
 800f802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f804:	4798      	blx	r3
 800f806:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f808:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800f80c:	a901      	add	r1, sp, #4
 800f80e:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800f812:	9304      	str	r3, [sp, #16]
 800f814:	6860      	ldr	r0, [r4, #4]
 800f816:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800f81a:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800f81e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800f822:	6803      	ldr	r3, [r0, #0]
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	4798      	blx	r3
 800f828:	b00b      	add	sp, #44	@ 0x2c
 800f82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f82c:	240251ea 	.word	0x240251ea

0800f830 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800f830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f832:	b08d      	sub	sp, #52	@ 0x34
 800f834:	2501      	movs	r5, #1
 800f836:	4604      	mov	r4, r0
 800f838:	466b      	mov	r3, sp
 800f83a:	9503      	str	r5, [sp, #12]
 800f83c:	e883 0006 	stmia.w	r3, {r1, r2}
 800f840:	2300      	movs	r3, #0
 800f842:	f8bd 6000 	ldrh.w	r6, [sp]
 800f846:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800f84a:	9306      	str	r3, [sp, #24]
 800f84c:	6803      	ldr	r3, [r0, #0]
 800f84e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f850:	4798      	blx	r3
 800f852:	463a      	mov	r2, r7
 800f854:	4631      	mov	r1, r6
 800f856:	4603      	mov	r3, r0
 800f858:	4620      	mov	r0, r4
 800f85a:	f7ff ff8b 	bl	800f774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f85e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f860:	9004      	str	r0, [sp, #16]
 800f862:	9307      	str	r3, [sp, #28]
 800f864:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f868:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f86c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f870:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800f874:	4b0e      	ldr	r3, [pc, #56]	@ (800f8b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800f876:	881b      	ldrh	r3, [r3, #0]
 800f878:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800f87c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800f880:	f7f4 fa48 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f884:	6803      	ldr	r3, [r0, #0]
 800f886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f888:	4798      	blx	r3
 800f88a:	23ff      	movs	r3, #255	@ 0xff
 800f88c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800f890:	a903      	add	r1, sp, #12
 800f892:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800f896:	6860      	ldr	r0, [r4, #4]
 800f898:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800f89c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800f8a0:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800f8a4:	6803      	ldr	r3, [r0, #0]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	4798      	blx	r3
 800f8aa:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800f8ac:	b00d      	add	sp, #52	@ 0x34
 800f8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b0:	240251ea 	.word	0x240251ea

0800f8b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800f8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b8:	b08c      	sub	sp, #48	@ 0x30
 800f8ba:	461e      	mov	r6, r3
 800f8bc:	2300      	movs	r3, #0
 800f8be:	4604      	mov	r4, r0
 800f8c0:	466d      	mov	r5, sp
 800f8c2:	9306      	str	r3, [sp, #24]
 800f8c4:	6803      	ldr	r3, [r0, #0]
 800f8c6:	e885 0006 	stmia.w	r5, {r1, r2}
 800f8ca:	2501      	movs	r5, #1
 800f8cc:	f8bd 7000 	ldrh.w	r7, [sp]
 800f8d0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800f8d4:	9503      	str	r5, [sp, #12]
 800f8d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8d8:	4798      	blx	r3
 800f8da:	4642      	mov	r2, r8
 800f8dc:	4639      	mov	r1, r7
 800f8de:	4603      	mov	r3, r0
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f7ff ff47 	bl	800f774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f8e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f8ea:	9004      	str	r0, [sp, #16]
 800f8ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f8f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f8f4:	9607      	str	r6, [sp, #28]
 800f8f6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800f8fa:	4b10      	ldr	r3, [pc, #64]	@ (800f93c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800f8fc:	881b      	ldrh	r3, [r3, #0]
 800f8fe:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800f902:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f904:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800f908:	f7f4 fa04 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 800f90c:	6803      	ldr	r3, [r0, #0]
 800f90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f910:	4798      	blx	r3
 800f912:	23ff      	movs	r3, #255	@ 0xff
 800f914:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800f918:	a903      	add	r1, sp, #12
 800f91a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800f91e:	6860      	ldr	r0, [r4, #4]
 800f920:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800f924:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800f928:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800f92c:	6803      	ldr	r3, [r0, #0]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	4798      	blx	r3
 800f932:	4630      	mov	r0, r6
 800f934:	b00c      	add	sp, #48	@ 0x30
 800f936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93a:	bf00      	nop
 800f93c:	240251ea 	.word	0x240251ea

0800f940 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800f940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f942:	b085      	sub	sp, #20
 800f944:	4605      	mov	r5, r0
 800f946:	ac02      	add	r4, sp, #8
 800f948:	e884 0006 	stmia.w	r4, {r1, r2}
 800f94c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800f950:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800f954:	f7ff fde6 	bl	800f524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f958:	4631      	mov	r1, r6
 800f95a:	4603      	mov	r3, r0
 800f95c:	463a      	mov	r2, r7
 800f95e:	4628      	mov	r0, r5
 800f960:	f7ff ff08 	bl	800f774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f964:	4a05      	ldr	r2, [pc, #20]	@ (800f97c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800f966:	682b      	ldr	r3, [r5, #0]
 800f968:	8812      	ldrh	r2, [r2, #0]
 800f96a:	9200      	str	r2, [sp, #0]
 800f96c:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 800f96e:	4603      	mov	r3, r0
 800f970:	4628      	mov	r0, r5
 800f972:	e894 0006 	ldmia.w	r4, {r1, r2}
 800f976:	47b0      	blx	r6
 800f978:	b005      	add	sp, #20
 800f97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f97c:	240251ea 	.word	0x240251ea

0800f980 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800f986:	4604      	mov	r4, r0
 800f988:	b19b      	cbz	r3, 800f9b2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800f98a:	2002      	movs	r0, #2
 800f98c:	f7f2 f896 	bl	8001abc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800f990:	2300      	movs	r3, #0
 800f992:	4620      	mov	r0, r4
 800f994:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800f998:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 800f9a2:	f7ff fdbf 	bl	800f524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f9a6:	4601      	mov	r1, r0
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	462b      	mov	r3, r5
 800f9ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9b0:	4718      	bx	r3
 800f9b2:	bd70      	pop	{r4, r5, r6, pc}

0800f9b4 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	4605      	mov	r5, r0
 800f9b8:	460c      	mov	r4, r1
 800f9ba:	2003      	movs	r0, #3
 800f9bc:	b149      	cbz	r1, 800f9d2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800f9be:	f7f2 f81d 	bl	80019fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f9c2:	6928      	ldr	r0, [r5, #16]
 800f9c4:	b168      	cbz	r0, 800f9e2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800f9c6:	6803      	ldr	r3, [r0, #0]
 800f9c8:	2101      	movs	r1, #1
 800f9ca:	695b      	ldr	r3, [r3, #20]
 800f9cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9d0:	4718      	bx	r3
 800f9d2:	f7f2 f843 	bl	8001a5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f9d6:	6928      	ldr	r0, [r5, #16]
 800f9d8:	b118      	cbz	r0, 800f9e2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800f9da:	6803      	ldr	r3, [r0, #0]
 800f9dc:	4621      	mov	r1, r4
 800f9de:	695b      	ldr	r3, [r3, #20]
 800f9e0:	e7f4      	b.n	800f9cc <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800f9e2:	bd70      	pop	{r4, r5, r6, pc}

0800f9e4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	460d      	mov	r5, r1
 800f9ee:	428b      	cmp	r3, r1
 800f9f0:	d006      	beq.n	800fa00 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800f9f2:	6803      	ldr	r3, [r0, #0]
 800f9f4:	b929      	cbnz	r1, 800fa02 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800f9f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f9fa:	4798      	blx	r3
 800f9fc:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800fa00:	bd38      	pop	{r3, r4, r5, pc}
 800fa02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800fa06:	e7f8      	b.n	800f9fa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800fa08 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800fa08:	4b0c      	ldr	r3, [pc, #48]	@ (800fa3c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 800fa0a:	b510      	push	{r4, lr}
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	4604      	mov	r4, r0
 800fa10:	b953      	cbnz	r3, 800fa28 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800fa12:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800fa16:	b93b      	cbnz	r3, 800fa28 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800fa18:	6840      	ldr	r0, [r0, #4]
 800fa1a:	f000 f919 	bl	800fc50 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800fa1e:	b118      	cbz	r0, 800fa28 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800fa20:	6862      	ldr	r2, [r4, #4]
 800fa22:	7a53      	ldrb	r3, [r2, #9]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d0fc      	beq.n	800fa22 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 800fa28:	f7f3 f862 	bl	8002af0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	2100      	movs	r1, #0
 800fa30:	f7ff ffd8 	bl	800f9e4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fa34:	4620      	mov	r0, r4
 800fa36:	f7ff fd75 	bl	800f524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fa3a:	bd10      	pop	{r4, pc}
 800fa3c:	240251ee 	.word	0x240251ee

0800fa40 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	4604      	mov	r4, r0
 800fa44:	6803      	ldr	r3, [r0, #0]
 800fa46:	b919      	cbnz	r1, 800fa50 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800fa48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa4e:	4718      	bx	r3
 800fa50:	2200      	movs	r2, #0
 800fa52:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800fa56:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800fa5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa5c:	4798      	blx	r3
 800fa5e:	6863      	ldr	r3, [r4, #4]
 800fa60:	2101      	movs	r1, #1
 800fa62:	4605      	mov	r5, r0
 800fa64:	4620      	mov	r0, r4
 800fa66:	7299      	strb	r1, [r3, #10]
 800fa68:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800fa6c:	f7ff ffba 	bl	800f9e4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fa70:	4628      	mov	r0, r5
 800fa72:	bd70      	pop	{r4, r5, r6, pc}

0800fa74 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800fa74:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800fa78:	1a13      	subs	r3, r2, r0
 800fa7a:	4258      	negs	r0, r3
 800fa7c:	4158      	adcs	r0, r3
 800fa7e:	4770      	bx	lr

0800fa80 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800fa80:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800fa84:	1a9b      	subs	r3, r3, r2
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	bfdc      	itt	le
 800fa8a:	6882      	ldrle	r2, [r0, #8]
 800fa8c:	189b      	addle	r3, r3, r2
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	bfcc      	ite	gt
 800fa92:	2000      	movgt	r0, #0
 800fa94:	2001      	movle	r0, #1
 800fa96:	4770      	bx	lr

0800fa98 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800fa98:	6902      	ldr	r2, [r0, #16]
 800fa9a:	6843      	ldr	r3, [r0, #4]
 800fa9c:	2024      	movs	r0, #36	@ 0x24
 800fa9e:	fb00 3002 	mla	r0, r0, r2, r3
 800faa2:	4770      	bx	lr

0800faa4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800faa4:	6803      	ldr	r3, [r0, #0]
 800faa6:	691b      	ldr	r3, [r3, #16]
 800faa8:	4718      	bx	r3

0800faaa <_ZN8touchgfx13DMA_Interface7executeEv>:
 800faaa:	2301      	movs	r3, #1
 800faac:	b570      	push	{r4, r5, r6, lr}
 800faae:	7203      	strb	r3, [r0, #8]
 800fab0:	4604      	mov	r4, r0
 800fab2:	6840      	ldr	r0, [r0, #4]
 800fab4:	6803      	ldr	r3, [r0, #0]
 800fab6:	699b      	ldr	r3, [r3, #24]
 800fab8:	4798      	blx	r3
 800faba:	6803      	ldr	r3, [r0, #0]
 800fabc:	4605      	mov	r5, r0
 800fabe:	2b40      	cmp	r3, #64	@ 0x40
 800fac0:	d00c      	beq.n	800fadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fac2:	d810      	bhi.n	800fae6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800fac4:	2b04      	cmp	r3, #4
 800fac6:	d01d      	beq.n	800fb04 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800fac8:	d804      	bhi.n	800fad4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800faca:	2b01      	cmp	r3, #1
 800facc:	d006      	beq.n	800fadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800face:	2b02      	cmp	r3, #2
 800fad0:	d02c      	beq.n	800fb2c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800fad2:	bd70      	pop	{r4, r5, r6, pc}
 800fad4:	2b08      	cmp	r3, #8
 800fad6:	d01d      	beq.n	800fb14 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800fad8:	2b20      	cmp	r3, #32
 800fada:	d1fa      	bne.n	800fad2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	4620      	mov	r0, r4
 800fae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fae2:	4798      	blx	r3
 800fae4:	e013      	b.n	800fb0e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800fae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800faea:	d0f7      	beq.n	800fadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800faec:	d804      	bhi.n	800faf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800faee:	2b80      	cmp	r3, #128	@ 0x80
 800faf0:	d0f4      	beq.n	800fadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800faf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800faf6:	e7f0      	b.n	800fada <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800faf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fafc:	d0ee      	beq.n	800fadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fafe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb02:	e7e5      	b.n	800fad0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800fb04:	6823      	ldr	r3, [r4, #0]
 800fb06:	7f01      	ldrb	r1, [r0, #28]
 800fb08:	4620      	mov	r0, r4
 800fb0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0c:	4798      	blx	r3
 800fb0e:	6823      	ldr	r3, [r4, #0]
 800fb10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb12:	e006      	b.n	800fb22 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800fb14:	6823      	ldr	r3, [r4, #0]
 800fb16:	7f01      	ldrb	r1, [r0, #28]
 800fb18:	4620      	mov	r0, r4
 800fb1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb1c:	4798      	blx	r3
 800fb1e:	6823      	ldr	r3, [r4, #0]
 800fb20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb22:	4629      	mov	r1, r5
 800fb24:	4620      	mov	r0, r4
 800fb26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb2a:	4718      	bx	r3
 800fb2c:	6823      	ldr	r3, [r4, #0]
 800fb2e:	4620      	mov	r0, r4
 800fb30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb32:	4798      	blx	r3
 800fb34:	e7f3      	b.n	800fb1e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800fb36 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800fb36:	4770      	bx	lr

0800fb38 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800fb38:	4770      	bx	lr

0800fb3a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800fb3a:	4770      	bx	lr

0800fb3c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800fb3c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800fb40:	b510      	push	{r4, lr}
 800fb42:	1ad2      	subs	r2, r2, r3
 800fb44:	2a00      	cmp	r2, #0
 800fb46:	bfdc      	itt	le
 800fb48:	6884      	ldrle	r4, [r0, #8]
 800fb4a:	1912      	addle	r2, r2, r4
 800fb4c:	2a01      	cmp	r2, #1
 800fb4e:	dd16      	ble.n	800fb7e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800fb50:	6842      	ldr	r2, [r0, #4]
 800fb52:	2424      	movs	r4, #36	@ 0x24
 800fb54:	fb04 2303 	mla	r3, r4, r3, r2
 800fb58:	f101 0220 	add.w	r2, r1, #32
 800fb5c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fb60:	4291      	cmp	r1, r2
 800fb62:	f843 4b04 	str.w	r4, [r3], #4
 800fb66:	d1f9      	bne.n	800fb5c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800fb68:	780a      	ldrb	r2, [r1, #0]
 800fb6a:	701a      	strb	r2, [r3, #0]
 800fb6c:	68c3      	ldr	r3, [r0, #12]
 800fb6e:	6882      	ldr	r2, [r0, #8]
 800fb70:	f3bf 8f5b 	dmb	ish
 800fb74:	3301      	adds	r3, #1
 800fb76:	429a      	cmp	r2, r3
 800fb78:	bfd8      	it	le
 800fb7a:	1a9b      	suble	r3, r3, r2
 800fb7c:	60c3      	str	r3, [r0, #12]
 800fb7e:	bd10      	pop	{r4, pc}

0800fb80 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800fb80:	6903      	ldr	r3, [r0, #16]
 800fb82:	6882      	ldr	r2, [r0, #8]
 800fb84:	f3bf 8f5b 	dmb	ish
 800fb88:	3301      	adds	r3, #1
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	bfd8      	it	le
 800fb8e:	1a9b      	suble	r3, r3, r2
 800fb90:	6103      	str	r3, [r0, #16]
 800fb92:	4770      	bx	lr

0800fb94 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	4604      	mov	r4, r0
 800fb98:	460e      	mov	r6, r1
 800fb9a:	6860      	ldr	r0, [r4, #4]
 800fb9c:	6803      	ldr	r3, [r0, #0]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	4798      	blx	r3
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d1f9      	bne.n	800fb9a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800fba6:	4d0d      	ldr	r5, [pc, #52]	@ (800fbdc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800fba8:	6828      	ldr	r0, [r5, #0]
 800fbaa:	6803      	ldr	r3, [r0, #0]
 800fbac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbb0:	4798      	blx	r3
 800fbb2:	f7f2 ffab 	bl	8002b0c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800fbb6:	6828      	ldr	r0, [r5, #0]
 800fbb8:	2101      	movs	r1, #1
 800fbba:	f7ff ff13 	bl	800f9e4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fbbe:	6860      	ldr	r0, [r4, #4]
 800fbc0:	4631      	mov	r1, r6
 800fbc2:	6803      	ldr	r3, [r0, #0]
 800fbc4:	689b      	ldr	r3, [r3, #8]
 800fbc6:	4798      	blx	r3
 800fbc8:	6823      	ldr	r3, [r4, #0]
 800fbca:	4620      	mov	r0, r4
 800fbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbce:	4798      	blx	r3
 800fbd0:	6828      	ldr	r0, [r5, #0]
 800fbd2:	6803      	ldr	r3, [r0, #0]
 800fbd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbda:	4718      	bx	r3
 800fbdc:	240251f0 	.word	0x240251f0

0800fbe0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800fbe0:	b508      	push	{r3, lr}
 800fbe2:	f7f2 ff85 	bl	8002af0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fbe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fbea:	f7f2 bf89 	b.w	8002b00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800fbee <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fbee:	b510      	push	{r4, lr}
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	2114      	movs	r1, #20
 800fbf4:	f012 fe15 	bl	8022822 <_ZdlPvj>
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	bd10      	pop	{r4, pc}

0800fbfc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800fbfc:	b570      	push	{r4, r5, r6, lr}
 800fbfe:	4604      	mov	r4, r0
 800fc00:	6840      	ldr	r0, [r0, #4]
 800fc02:	6803      	ldr	r3, [r0, #0]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	4798      	blx	r3
 800fc08:	4605      	mov	r5, r0
 800fc0a:	b930      	cbnz	r0, 800fc1a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800fc0c:	7a23      	ldrb	r3, [r4, #8]
 800fc0e:	b123      	cbz	r3, 800fc1a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800fc10:	6860      	ldr	r0, [r4, #4]
 800fc12:	6803      	ldr	r3, [r0, #0]
 800fc14:	695b      	ldr	r3, [r3, #20]
 800fc16:	4798      	blx	r3
 800fc18:	7225      	strb	r5, [r4, #8]
 800fc1a:	6860      	ldr	r0, [r4, #4]
 800fc1c:	6803      	ldr	r3, [r0, #0]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4798      	blx	r3
 800fc22:	b928      	cbnz	r0, 800fc30 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	4620      	mov	r0, r4
 800fc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc2e:	4718      	bx	r3
 800fc30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc34:	f7f2 bf72 	b.w	8002b1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800fc38 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800fc38:	b510      	push	{r4, lr}
 800fc3a:	6082      	str	r2, [r0, #8]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	4c03      	ldr	r4, [pc, #12]	@ (800fc4c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800fc40:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800fc44:	e9c0 4100 	strd	r4, r1, [r0]
 800fc48:	bd10      	pop	{r4, pc}
 800fc4a:	bf00      	nop
 800fc4c:	08026a54 	.word	0x08026a54

0800fc50 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800fc50:	6840      	ldr	r0, [r0, #4]
 800fc52:	6803      	ldr	r3, [r0, #0]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4718      	bx	r3

0800fc58 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800fc58:	2300      	movs	r3, #0
 800fc5a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800fc5c:	8503      	strh	r3, [r0, #40]	@ 0x28
 800fc5e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800fc60:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800fc62:	6980      	ldr	r0, [r0, #24]
 800fc64:	b110      	cbz	r0, 800fc6c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800fc66:	6803      	ldr	r3, [r0, #0]
 800fc68:	691b      	ldr	r3, [r3, #16]
 800fc6a:	4718      	bx	r3
 800fc6c:	4770      	bx	lr

0800fc6e <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800fc6e:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800fc72:	4770      	bx	lr

0800fc74 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800fc74:	b538      	push	{r3, r4, r5, lr}
 800fc76:	0e0b      	lsrs	r3, r1, #24
 800fc78:	4604      	mov	r4, r0
 800fc7a:	460d      	mov	r5, r1
 800fc7c:	7783      	strb	r3, [r0, #30]
 800fc7e:	6803      	ldr	r3, [r0, #0]
 800fc80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc82:	4798      	blx	r3
 800fc84:	6803      	ldr	r3, [r0, #0]
 800fc86:	4629      	mov	r1, r5
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	4798      	blx	r3
 800fc8c:	6823      	ldr	r3, [r4, #0]
 800fc8e:	4620      	mov	r0, r4
 800fc90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc92:	4798      	blx	r3
 800fc94:	61a0      	str	r0, [r4, #24]
 800fc96:	bd38      	pop	{r3, r4, r5, pc}

0800fc98 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800fc98:	7741      	strb	r1, [r0, #29]
 800fc9a:	4770      	bx	lr

0800fc9c <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800fc9c:	b530      	push	{r4, r5, lr}
 800fc9e:	460d      	mov	r5, r1
 800fca0:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800fca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcac:	682b      	ldr	r3, [r5, #0]
 800fcae:	6023      	str	r3, [r4, #0]
 800fcb0:	bd30      	pop	{r4, r5, pc}

0800fcb2 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800fcb2:	b538      	push	{r3, r4, r5, lr}
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	1d03      	adds	r3, r0, #4
 800fcb8:	6808      	ldr	r0, [r1, #0]
 800fcba:	2500      	movs	r5, #0
 800fcbc:	6849      	ldr	r1, [r1, #4]
 800fcbe:	c303      	stmia	r3!, {r0, r1}
 800fcc0:	6813      	ldr	r3, [r2, #0]
 800fcc2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800fcc6:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800fcca:	6853      	ldr	r3, [r2, #4]
 800fccc:	61a5      	str	r5, [r4, #24]
 800fcce:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800fcd2:	f005 ff0f 	bl	8015af4 <_ZN8touchgfx9Matrix3x35resetEv>
 800fcd6:	23ff      	movs	r3, #255	@ 0xff
 800fcd8:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800fcdc:	7763      	strb	r3, [r4, #29]
 800fcde:	77a3      	strb	r3, [r4, #30]
 800fce0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800fce4:	6323      	str	r3, [r4, #48]	@ 0x30
 800fce6:	2301      	movs	r3, #1
 800fce8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800fcec:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fcf0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800fcf0:	ee70 7a41 	vsub.f32	s15, s0, s2
 800fcf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcf8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	ed2d 8b0a 	vpush	{d8-d12}
 800fd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd06:	b087      	sub	sp, #28
 800fd08:	eef0 9a40 	vmov.f32	s19, s0
 800fd0c:	6802      	ldr	r2, [r0, #0]
 800fd0e:	eeb0 aa60 	vmov.f32	s20, s1
 800fd12:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800fd16:	eeb0 9a41 	vmov.f32	s18, s2
 800fd1a:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800fd1c:	eef0 8a61 	vmov.f32	s17, s3
 800fd20:	eeb0 ca42 	vmov.f32	s24, s4
 800fd24:	eef0 ca62 	vmov.f32	s25, s5
 800fd28:	d112      	bne.n	800fd50 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800fd2a:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800fd2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd36:	d10b      	bne.n	800fd50 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800fd38:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800fd3c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800fd3e:	3901      	subs	r1, #1
 800fd40:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800fd44:	b007      	add	sp, #28
 800fd46:	ecbd 8b0a 	vpop	{d8-d12}
 800fd4a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd4e:	4710      	bx	r2
 800fd50:	23ff      	movs	r3, #255	@ 0xff
 800fd52:	4628      	mov	r0, r5
 800fd54:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800fd58:	f8df 92c4 	ldr.w	r9, [pc, #708]	@ 8010020 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x330>
 800fd5c:	77ab      	strb	r3, [r5, #30]
 800fd5e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800fd60:	4798      	blx	r3
 800fd62:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800fd66:	eeb0 0a69 	vmov.f32	s0, s19
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	80c3      	strh	r3, [r0, #6]
 800fd6e:	eef0 0a4a 	vmov.f32	s1, s20
 800fd72:	4640      	mov	r0, r8
 800fd74:	f005 ff6d 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fd78:	eeb0 ba40 	vmov.f32	s22, s0
 800fd7c:	ed8d 0a00 	vstr	s0, [sp]
 800fd80:	eeb0 0a49 	vmov.f32	s0, s18
 800fd84:	eef0 ba60 	vmov.f32	s23, s1
 800fd88:	edcd 0a01 	vstr	s1, [sp, #4]
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	eef0 0a68 	vmov.f32	s1, s17
 800fd92:	f005 ff5e 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fd96:	eeb4 ba40 	vcmp.f32	s22, s0
 800fd9a:	eeb0 8a40 	vmov.f32	s16, s0
 800fd9e:	ed8d 0a02 	vstr	s0, [sp, #8]
 800fda2:	eef0 aa60 	vmov.f32	s21, s1
 800fda6:	edcd 0a03 	vstr	s1, [sp, #12]
 800fdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdae:	eef4 ba60 	vcmp.f32	s23, s1
 800fdb2:	bf0c      	ite	eq
 800fdb4:	2301      	moveq	r3, #1
 800fdb6:	2300      	movne	r3, #0
 800fdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbc:	eeb4 ba40 	vcmp.f32	s22, s0
 800fdc0:	7463      	strb	r3, [r4, #17]
 800fdc2:	bf0c      	ite	eq
 800fdc4:	2301      	moveq	r3, #1
 800fdc6:	2300      	movne	r3, #0
 800fdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdcc:	74a3      	strb	r3, [r4, #18]
 800fdce:	d031      	beq.n	800fe34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800fdd0:	eef4 ba60 	vcmp.f32	s23, s1
 800fdd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd8:	d02c      	beq.n	800fe34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800fdda:	ee39 9a69 	vsub.f32	s18, s18, s19
 800fdde:	4640      	mov	r0, r8
 800fde0:	ee78 8aca 	vsub.f32	s17, s17, s20
 800fde4:	eef0 0a4a 	vmov.f32	s1, s20
 800fde8:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 800fdec:	eec8 7aac 	vdiv.f32	s15, s17, s25
 800fdf0:	eeb0 0a69 	vmov.f32	s0, s19
 800fdf4:	eeec 0a87 	vfma.f32	s1, s25, s14
 800fdf8:	eea7 0acc 	vfms.f32	s0, s15, s24
 800fdfc:	f005 ff29 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fe00:	f899 3000 	ldrb.w	r3, [r9]
 800fe04:	edcd 0a05 	vstr	s1, [sp, #20]
 800fe08:	ee70 0aeb 	vsub.f32	s1, s1, s23
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	bf08      	it	eq
 800fe10:	eef1 7a60 	vnegeq.f32	s15, s1
 800fe14:	ed8d 0a04 	vstr	s0, [sp, #16]
 800fe18:	ee30 0a4b 	vsub.f32	s0, s0, s22
 800fe1c:	bf04      	itt	eq
 800fe1e:	eef0 0a40 	vmoveq.f32	s1, s0
 800fe22:	eeb0 0a67 	vmoveq.f32	s0, s15
 800fe26:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fe2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2e:	d135      	bne.n	800fe9c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ac>
 800fe30:	2301      	movs	r3, #1
 800fe32:	74a3      	strb	r3, [r4, #18]
 800fe34:	f899 2000 	ldrb.w	r2, [r9]
 800fe38:	7c63      	ldrb	r3, [r4, #17]
 800fe3a:	2a01      	cmp	r2, #1
 800fe3c:	f040 80a3 	bne.w	800ff86 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d073      	beq.n	800ff2c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x23c>
 800fe44:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 800fe48:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8010018 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800fe4c:	eef4 baea 	vcmpe.f32	s23, s21
 800fe50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe58:	edc4 7a08 	vstr	s15, [r4, #32]
 800fe5c:	eefd 7aea 	vcvt.s32.f32	s15, s21
 800fe60:	ee17 3a90 	vmov	r3, s15
 800fe64:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 800fe68:	b21a      	sxth	r2, r3
 800fe6a:	ee17 3a90 	vmov	r3, s15
 800fe6e:	bf48      	it	mi
 800fe70:	8162      	strhmi	r2, [r4, #10]
 800fe72:	b21b      	sxth	r3, r3
 800fe74:	bf56      	itet	pl
 800fe76:	8122      	strhpl	r2, [r4, #8]
 800fe78:	8123      	strhmi	r3, [r4, #8]
 800fe7a:	8163      	strhpl	r3, [r4, #10]
 800fe7c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800fe80:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800fe84:	1a9b      	subs	r3, r3, r2
 800fe86:	ee07 3a90 	vmov	s15, r3
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe90:	7463      	strb	r3, [r4, #17]
 800fe92:	2301      	movs	r3, #1
 800fe94:	edc4 7a07 	vstr	s15, [r4, #28]
 800fe98:	74a3      	strb	r3, [r4, #18]
 800fe9a:	e03f      	b.n	800ff1c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800fe9c:	ee80 7a80 	vdiv.f32	s14, s1, s0
 800fea0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fea4:	ed84 7a05 	vstr	s14, [r4, #20]
 800fea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feac:	d102      	bne.n	800feb4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c4>
 800feae:	2301      	movs	r3, #1
 800feb0:	7463      	strb	r3, [r4, #17]
 800feb2:	e7bf      	b.n	800fe34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	ee38 8a4b 	vsub.f32	s16, s16, s22
 800feba:	ee7a aaeb 	vsub.f32	s21, s21, s23
 800febe:	bf0b      	itete	eq
 800fec0:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 800fec4:	eef0 7a6b 	vmovne.f32	s15, s23
 800fec8:	ee07 2a90 	vmoveq	s15, r2
 800fecc:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 800fed0:	bf02      	ittt	eq
 800fed2:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 800fed6:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 800feda:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 800fede:	2b01      	cmp	r3, #1
 800fee0:	edc4 7a06 	vstr	s15, [r4, #24]
 800fee4:	bf02      	ittt	eq
 800fee6:	eef1 7a48 	vnegeq.f32	s15, s16
 800feea:	eeb0 8a6a 	vmoveq.f32	s16, s21
 800feee:	eef0 aa67 	vmoveq.f32	s21, s15
 800fef2:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800fef6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801001c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 800fefa:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fefe:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800ff02:	ed84 8a07 	vstr	s16, [r4, #28]
 800ff06:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ff0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff0e:	edc4 7a08 	vstr	s15, [r4, #32]
 800ff12:	d503      	bpl.n	800ff1c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ff14:	eeb1 8a48 	vneg.f32	s16, s16
 800ff18:	ed84 8a07 	vstr	s16, [r4, #28]
 800ff1c:	60e7      	str	r7, [r4, #12]
 800ff1e:	7426      	strb	r6, [r4, #16]
 800ff20:	61ac      	str	r4, [r5, #24]
 800ff22:	b007      	add	sp, #28
 800ff24:	ecbd 8b0a 	vpop	{d8-d12}
 800ff28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff2c:	7ca3      	ldrb	r3, [r4, #18]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d0f4      	beq.n	800ff1c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ff32:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ff36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8010018 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800ff3a:	ee00 3a10 	vmov	s0, r3
 800ff3e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ff42:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ff46:	ee30 0a4b 	vsub.f32	s0, s0, s22
 800ff4a:	ee38 7a40 	vsub.f32	s14, s16, s0
 800ff4e:	eeb4 8ac0 	vcmpe.f32	s16, s0
 800ff52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff5a:	edc4 7a08 	vstr	s15, [r4, #32]
 800ff5e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ff62:	ee17 3a90 	vmov	r3, s15
 800ff66:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ff6a:	b21a      	sxth	r2, r3
 800ff6c:	ee17 3a90 	vmov	r3, s15
 800ff70:	bfc8      	it	gt
 800ff72:	8162      	strhgt	r2, [r4, #10]
 800ff74:	b21b      	sxth	r3, r3
 800ff76:	bfd6      	itet	le
 800ff78:	8122      	strhle	r2, [r4, #8]
 800ff7a:	8123      	strhgt	r3, [r4, #8]
 800ff7c:	8163      	strhle	r3, [r4, #10]
 800ff7e:	2301      	movs	r3, #1
 800ff80:	7463      	strb	r3, [r4, #17]
 800ff82:	2300      	movs	r3, #0
 800ff84:	e788      	b.n	800fe98 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 800ff86:	b1e3      	cbz	r3, 800ffc2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d2>
 800ff88:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 800ff8c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8010018 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800ff90:	eef4 baea 	vcmpe.f32	s23, s21
 800ff94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9c:	edc4 7a08 	vstr	s15, [r4, #32]
 800ffa0:	eefd 7aea 	vcvt.s32.f32	s15, s21
 800ffa4:	ee17 3a90 	vmov	r3, s15
 800ffa8:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 800ffac:	b21a      	sxth	r2, r3
 800ffae:	ee17 3a90 	vmov	r3, s15
 800ffb2:	bf48      	it	mi
 800ffb4:	8162      	strhmi	r2, [r4, #10]
 800ffb6:	b21b      	sxth	r3, r3
 800ffb8:	bf56      	itet	pl
 800ffba:	8122      	strhpl	r2, [r4, #8]
 800ffbc:	8123      	strhmi	r3, [r4, #8]
 800ffbe:	8163      	strhpl	r3, [r4, #10]
 800ffc0:	e7ac      	b.n	800ff1c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ffc2:	7ca3      	ldrb	r3, [r4, #18]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d0a9      	beq.n	800ff1c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ffc8:	ee38 7a4b 	vsub.f32	s14, s16, s22
 800ffcc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8010018 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800ffd0:	eeb4 bac8 	vcmpe.f32	s22, s16
 800ffd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffdc:	edc4 7a08 	vstr	s15, [r4, #32]
 800ffe0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ffe4:	ee17 3a90 	vmov	r3, s15
 800ffe8:	eefd 7acb 	vcvt.s32.f32	s15, s22
 800ffec:	b21a      	sxth	r2, r3
 800ffee:	ee17 3a90 	vmov	r3, s15
 800fff2:	bf48      	it	mi
 800fff4:	8162      	strhmi	r2, [r4, #10]
 800fff6:	b21b      	sxth	r3, r3
 800fff8:	bf56      	itet	pl
 800fffa:	8122      	strhpl	r2, [r4, #8]
 800fffc:	8123      	strhmi	r3, [r4, #8]
 800fffe:	8163      	strhpl	r3, [r4, #10]
 8010000:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8010004:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010008:	1a9b      	subs	r3, r3, r2
 801000a:	ee07 3a90 	vmov	s15, r3
 801000e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010012:	edc4 7a07 	vstr	s15, [r4, #28]
 8010016:	e781      	b.n	800ff1c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010018:	447ffffe 	.word	0x447ffffe
 801001c:	44800000 	.word	0x44800000
 8010020:	240251e8 	.word	0x240251e8

08010024 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8010024:	b510      	push	{r4, lr}
 8010026:	ed2d 8b02 	vpush	{d8}
 801002a:	eef0 8a62 	vmov.f32	s17, s5
 801002e:	2100      	movs	r1, #0
 8010030:	4604      	mov	r4, r0
 8010032:	eeb0 8a42 	vmov.f32	s16, s4
 8010036:	f012 f985 	bl	8022344 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801003a:	eef0 7a68 	vmov.f32	s15, s17
 801003e:	6823      	ldr	r3, [r4, #0]
 8010040:	4620      	mov	r0, r4
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010048:	ee17 2a90 	vmov	r2, s15
 801004c:	eef0 7a48 	vmov.f32	s15, s16
 8010050:	ecbd 8b02 	vpop	{d8}
 8010054:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801005c:	ee17 1a90 	vmov	r1, s15
 8010060:	4718      	bx	r3

08010062 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8010062:	b510      	push	{r4, lr}
 8010064:	ed2d 8b02 	vpush	{d8}
 8010068:	eef0 8a63 	vmov.f32	s17, s7
 801006c:	2100      	movs	r1, #0
 801006e:	4604      	mov	r4, r0
 8010070:	eeb0 8a43 	vmov.f32	s16, s6
 8010074:	f012 fa28 	bl	80224c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8010078:	eef0 7a68 	vmov.f32	s15, s17
 801007c:	6823      	ldr	r3, [r4, #0]
 801007e:	4620      	mov	r0, r4
 8010080:	689b      	ldr	r3, [r3, #8]
 8010082:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010086:	ee17 2a90 	vmov	r2, s15
 801008a:	eef0 7a48 	vmov.f32	s15, s16
 801008e:	ecbd 8b02 	vpop	{d8}
 8010092:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801009a:	ee17 1a90 	vmov	r1, s15
 801009e:	4718      	bx	r3

080100a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 80100a0:	b513      	push	{r0, r1, r4, lr}
 80100a2:	4604      	mov	r4, r0
 80100a4:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80100a6:	f005 fdd4 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80100aa:	eef0 7a60 	vmov.f32	s15, s1
 80100ae:	4620      	mov	r0, r4
 80100b0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80100b4:	ee17 2a90 	vmov	r2, s15
 80100b8:	eef0 7a40 	vmov.f32	s15, s0
 80100bc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80100c0:	ee17 1a90 	vmov	r1, s15
 80100c4:	b002      	add	sp, #8
 80100c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100ca:	f012 b895 	b.w	80221f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

080100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 80100ce:	b513      	push	{r0, r1, r4, lr}
 80100d0:	4604      	mov	r4, r0
 80100d2:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80100d4:	f005 fdbd 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80100d8:	eef0 7a60 	vmov.f32	s15, s1
 80100dc:	4620      	mov	r0, r4
 80100de:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80100e2:	ee17 2a90 	vmov	r2, s15
 80100e6:	eef0 7a40 	vmov.f32	s15, s0
 80100ea:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80100ee:	ee17 1a90 	vmov	r1, s15
 80100f2:	b002      	add	sp, #8
 80100f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100f8:	f012 b8cb 	b.w	8022292 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080100fc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80100fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100fe:	2400      	movs	r4, #0
 8010100:	9f07      	ldr	r7, [sp, #28]
 8010102:	f04f 0e01 	mov.w	lr, #1
 8010106:	4626      	mov	r6, r4
 8010108:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 801010c:	4463      	add	r3, ip
 801010e:	4563      	cmp	r3, ip
 8010110:	d02d      	beq.n	801016e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8010112:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8010116:	2d06      	cmp	r5, #6
 8010118:	d8f9      	bhi.n	801010e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801011a:	fa0e f505 	lsl.w	r5, lr, r5
 801011e:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8010122:	d10d      	bne.n	8010140 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8010124:	f015 0f10 	tst.w	r5, #16
 8010128:	d117      	bne.n	801015a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 801012a:	072d      	lsls	r5, r5, #28
 801012c:	d5ef      	bpl.n	801010e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801012e:	3801      	subs	r0, #1
 8010130:	b91e      	cbnz	r6, 801013a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8010132:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8010136:	682d      	ldr	r5, [r5, #0]
 8010138:	600d      	str	r5, [r1, #0]
 801013a:	b96c      	cbnz	r4, 8010158 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801013c:	2601      	movs	r6, #1
 801013e:	e7e6      	b.n	801010e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010140:	b926      	cbnz	r6, 801014c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8010142:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8010146:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801014a:	600b      	str	r3, [r1, #0]
 801014c:	b924      	cbnz	r4, 8010158 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801014e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8010152:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010156:	6013      	str	r3, [r2, #0]
 8010158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801015a:	3801      	subs	r0, #1
 801015c:	b91c      	cbnz	r4, 8010166 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801015e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8010162:	6824      	ldr	r4, [r4, #0]
 8010164:	6014      	str	r4, [r2, #0]
 8010166:	2e00      	cmp	r6, #0
 8010168:	d1f6      	bne.n	8010158 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801016a:	2401      	movs	r4, #1
 801016c:	e7cf      	b.n	801010e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801016e:	b90e      	cbnz	r6, 8010174 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8010170:	2300      	movs	r3, #0
 8010172:	600b      	str	r3, [r1, #0]
 8010174:	2c00      	cmp	r4, #0
 8010176:	d1ef      	bne.n	8010158 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010178:	2300      	movs	r3, #0
 801017a:	e7ec      	b.n	8010156 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0801017c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 801017c:	b538      	push	{r3, r4, r5, lr}
 801017e:	ed2d 8b0a 	vpush	{d8-d12}
 8010182:	eef0 ba40 	vmov.f32	s23, s0
 8010186:	4604      	mov	r4, r0
 8010188:	eeb0 ca60 	vmov.f32	s24, s1
 801018c:	460d      	mov	r5, r1
 801018e:	eef0 aa41 	vmov.f32	s21, s2
 8010192:	eeb0 ba61 	vmov.f32	s22, s3
 8010196:	eeb0 9a42 	vmov.f32	s18, s4
 801019a:	eef0 9a62 	vmov.f32	s19, s5
 801019e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 80101a2:	ee7b 8a29 	vadd.f32	s17, s22, s19
 80101a6:	ee3a 8a89 	vadd.f32	s16, s21, s18
 80101aa:	ee68 8a8a 	vmul.f32	s17, s17, s20
 80101ae:	ee28 8a0a 	vmul.f32	s16, s16, s20
 80101b2:	ee3c 0a68 	vsub.f32	s0, s24, s17
 80101b6:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 80101ba:	ee20 0a00 	vmul.f32	s0, s0, s0
 80101be:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80101c2:	f012 fb59 	bl	8022878 <sqrtf>
 80101c6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80101ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ce:	d12e      	bne.n	801022e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 80101d0:	ee79 7a6a 	vsub.f32	s15, s18, s21
 80101d4:	ee39 7acb 	vsub.f32	s14, s19, s22
 80101d8:	eeb0 8a6a 	vmov.f32	s16, s21
 80101dc:	eef0 8a4b 	vmov.f32	s17, s22
 80101e0:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80101e4:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80101e8:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80101ec:	eee7 8aca 	vfms.f32	s17, s15, s20
 80101f0:	2d02      	cmp	r5, #2
 80101f2:	dc2f      	bgt.n	8010254 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80101f4:	3501      	adds	r5, #1
 80101f6:	eef0 1a4b 	vmov.f32	s3, s22
 80101fa:	eeb0 1a6a 	vmov.f32	s2, s21
 80101fe:	4620      	mov	r0, r4
 8010200:	4629      	mov	r1, r5
 8010202:	eef0 2a68 	vmov.f32	s5, s17
 8010206:	eeb0 2a48 	vmov.f32	s4, s16
 801020a:	eef0 0a4c 	vmov.f32	s1, s24
 801020e:	eeb0 0a6b 	vmov.f32	s0, s23
 8010212:	f7ff ffb3 	bl	801017c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8010216:	eef0 0a68 	vmov.f32	s1, s17
 801021a:	eeb0 0a48 	vmov.f32	s0, s16
 801021e:	4620      	mov	r0, r4
 8010220:	f7ff ff55 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010224:	eeb0 ba68 	vmov.f32	s22, s17
 8010228:	eef0 aa48 	vmov.f32	s21, s16
 801022c:	e7b9      	b.n	80101a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 801022e:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8010232:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8010236:	ee78 8acc 	vsub.f32	s17, s17, s24
 801023a:	ee28 7a27 	vmul.f32	s14, s16, s15
 801023e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010242:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8010246:	eec7 8a80 	vdiv.f32	s17, s15, s0
 801024a:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801024e:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8010252:	e7cd      	b.n	80101f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8010254:	eef0 0a68 	vmov.f32	s1, s17
 8010258:	4620      	mov	r0, r4
 801025a:	eeb0 0a48 	vmov.f32	s0, s16
 801025e:	f7ff ff36 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010262:	ecbd 8b0a 	vpop	{d8-d12}
 8010266:	bd38      	pop	{r3, r4, r5, pc}

08010268 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8010268:	b510      	push	{r4, lr}
 801026a:	ed2d 8b0a 	vpush	{d8-d12}
 801026e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8010272:	4604      	mov	r4, r0
 8010274:	eeb0 ca40 	vmov.f32	s24, s0
 8010278:	2b02      	cmp	r3, #2
 801027a:	eeb0 9a60 	vmov.f32	s18, s1
 801027e:	eef0 9a41 	vmov.f32	s19, s2
 8010282:	eef0 8a61 	vmov.f32	s17, s3
 8010286:	eeb0 ba42 	vmov.f32	s22, s4
 801028a:	eef0 ba62 	vmov.f32	s23, s5
 801028e:	eeb0 aa43 	vmov.f32	s20, s6
 8010292:	eef0 aa63 	vmov.f32	s21, s7
 8010296:	eeb0 8a44 	vmov.f32	s16, s8
 801029a:	eef0 ca64 	vmov.f32	s25, s9
 801029e:	d12c      	bne.n	80102fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 80102a0:	eef0 0a62 	vmov.f32	s1, s5
 80102a4:	eeb0 0a42 	vmov.f32	s0, s4
 80102a8:	f7ff ff11 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80102ac:	ee79 9acb 	vsub.f32	s19, s19, s22
 80102b0:	ee7a caec 	vsub.f32	s25, s21, s25
 80102b4:	ee78 8aeb 	vsub.f32	s17, s17, s23
 80102b8:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80102bc:	ee69 9aac 	vmul.f32	s19, s19, s25
 80102c0:	ee28 8a88 	vmul.f32	s16, s17, s16
 80102c4:	eef4 9ac8 	vcmpe.f32	s19, s16
 80102c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102cc:	db0f      	blt.n	80102ee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 80102ce:	2101      	movs	r1, #1
 80102d0:	eef0 2a6a 	vmov.f32	s5, s21
 80102d4:	eeb0 2a4a 	vmov.f32	s4, s20
 80102d8:	4620      	mov	r0, r4
 80102da:	eef0 1a6b 	vmov.f32	s3, s23
 80102de:	eeb0 1a4b 	vmov.f32	s2, s22
 80102e2:	eef0 0a49 	vmov.f32	s1, s18
 80102e6:	eeb0 0a4c 	vmov.f32	s0, s24
 80102ea:	f7ff ff47 	bl	801017c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80102ee:	eef0 0a6a 	vmov.f32	s1, s21
 80102f2:	4620      	mov	r0, r4
 80102f4:	eeb0 0a4a 	vmov.f32	s0, s20
 80102f8:	e035      	b.n	8010366 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	d138      	bne.n	8010370 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80102fe:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8010302:	ee33 6a48 	vsub.f32	s12, s6, s16
 8010306:	ee71 7a42 	vsub.f32	s15, s2, s4
 801030a:	ee73 6ae4 	vsub.f32	s13, s7, s9
 801030e:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8010312:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010316:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801031a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801031e:	d027      	beq.n	8010370 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010320:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8010324:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8010328:	eea4 8a83 	vfma.f32	s16, s9, s6
 801032c:	eee1 8a22 	vfma.f32	s17, s2, s5
 8010330:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8010334:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8010338:	eee6 7a28 	vfma.f32	s15, s12, s17
 801033c:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8010340:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8010344:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8010348:	eec8 0a07 	vdiv.f32	s1, s16, s14
 801034c:	ee3c ca40 	vsub.f32	s24, s24, s0
 8010350:	ee39 9a60 	vsub.f32	s18, s18, s1
 8010354:	ee29 9a09 	vmul.f32	s18, s18, s18
 8010358:	eeac 9a0c 	vfma.f32	s18, s24, s24
 801035c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8010360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010364:	db04      	blt.n	8010370 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010366:	f7ff feb2 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801036a:	ecbd 8b0a 	vpop	{d8-d12}
 801036e:	bd10      	pop	{r4, pc}
 8010370:	eef0 0a6b 	vmov.f32	s1, s23
 8010374:	4620      	mov	r0, r4
 8010376:	eeb0 0a4b 	vmov.f32	s0, s22
 801037a:	f7ff fea8 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801037e:	e7b6      	b.n	80102ee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08010380 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8010380:	b510      	push	{r4, lr}
 8010382:	ed2d 8b0c 	vpush	{d8-d13}
 8010386:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801038a:	4604      	mov	r4, r0
 801038c:	eeb0 9a40 	vmov.f32	s18, s0
 8010390:	eef0 9a60 	vmov.f32	s19, s1
 8010394:	eef0 aa41 	vmov.f32	s21, s2
 8010398:	eeb0 ba61 	vmov.f32	s22, s3
 801039c:	b933      	cbnz	r3, 80103ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801039e:	f7ff fe96 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80103a2:	eef0 0a4b 	vmov.f32	s1, s22
 80103a6:	eeb0 0a6a 	vmov.f32	s0, s21
 80103aa:	e015      	b.n	80103d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 80103ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80103b0:	2b02      	cmp	r3, #2
 80103b2:	ee71 8a40 	vsub.f32	s17, s2, s0
 80103b6:	ee31 8ae0 	vsub.f32	s16, s3, s1
 80103ba:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80103be:	ee28 8a27 	vmul.f32	s16, s16, s15
 80103c2:	d10f      	bne.n	80103e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 80103c4:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80103c8:	ee30 0a08 	vadd.f32	s0, s0, s16
 80103cc:	f7ff fe7f 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80103d0:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80103d4:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80103d8:	4620      	mov	r0, r4
 80103da:	f7ff fe78 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80103de:	ecbd 8b0c 	vpop	{d8-d13}
 80103e2:	bd10      	pop	{r4, pc}
 80103e4:	f7ff fe73 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80103e8:	eef0 0a69 	vmov.f32	s1, s19
 80103ec:	eeb0 0a49 	vmov.f32	s0, s18
 80103f0:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8010520 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80103f4:	eeb1 aa68 	vneg.f32	s20, s17
 80103f8:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8010524 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80103fc:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010400:	4620      	mov	r0, r4
 8010402:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010406:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8010528 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 801040a:	eddf ca48 	vldr	s25, [pc, #288]	@ 801052c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 801040e:	ed9f da48 	vldr	s26, [pc, #288]	@ 8010530 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8010412:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8010416:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801041a:	f7ff fe58 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801041e:	eef0 0a69 	vmov.f32	s1, s19
 8010422:	eeb0 0a49 	vmov.f32	s0, s18
 8010426:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8010534 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 801042a:	4620      	mov	r0, r4
 801042c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010430:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010434:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8010438:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801043c:	f7ff fe47 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010440:	eef0 0a69 	vmov.f32	s1, s19
 8010444:	eeb0 0a49 	vmov.f32	s0, s18
 8010448:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010538 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 801044c:	4620      	mov	r0, r4
 801044e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010452:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010456:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801045a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801045e:	f7ff fe36 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010462:	eef0 0a69 	vmov.f32	s1, s19
 8010466:	eeb0 0a49 	vmov.f32	s0, s18
 801046a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 801053c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801046e:	4620      	mov	r0, r4
 8010470:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010474:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010478:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801047c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8010480:	f7ff fe25 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010484:	ee79 0a88 	vadd.f32	s1, s19, s16
 8010488:	ee39 0a28 	vadd.f32	s0, s18, s17
 801048c:	4620      	mov	r0, r4
 801048e:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010492:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010496:	f7ff fe1a 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801049a:	eef0 0a69 	vmov.f32	s1, s19
 801049e:	eeb0 0a49 	vmov.f32	s0, s18
 80104a2:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8010540 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 80104a6:	4620      	mov	r0, r4
 80104a8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80104ac:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80104b0:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80104b4:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80104b8:	f7ff fe09 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80104bc:	eef0 0a69 	vmov.f32	s1, s19
 80104c0:	eeb0 0a49 	vmov.f32	s0, s18
 80104c4:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8010544 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 80104c8:	4620      	mov	r0, r4
 80104ca:	eee8 0a27 	vfma.f32	s1, s16, s15
 80104ce:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80104d2:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80104d6:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80104da:	f7ff fdf8 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80104de:	eef0 0a69 	vmov.f32	s1, s19
 80104e2:	eeb0 0a49 	vmov.f32	s0, s18
 80104e6:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8010548 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80104ea:	4620      	mov	r0, r4
 80104ec:	eee8 0a27 	vfma.f32	s1, s16, s15
 80104f0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80104f4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80104f8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80104fc:	f7ff fde7 	bl	80100ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010500:	eef0 0a69 	vmov.f32	s1, s19
 8010504:	eeb0 0a49 	vmov.f32	s0, s18
 8010508:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801054c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 801050c:	4620      	mov	r0, r4
 801050e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010512:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010516:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801051a:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801051e:	e73e      	b.n	801039e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8010520:	3d23d70a 	.word	0x3d23d70a
 8010524:	3e8f5c29 	.word	0x3e8f5c29
 8010528:	3f19999a 	.word	0x3f19999a
 801052c:	3f4ccccd 	.word	0x3f4ccccd
 8010530:	3f75c28f 	.word	0x3f75c28f
 8010534:	3e4ccccd 	.word	0x3e4ccccd
 8010538:	3ecccccd 	.word	0x3ecccccd
 801053c:	3f3851ec 	.word	0x3f3851ec
 8010540:	3fa3d70a 	.word	0x3fa3d70a
 8010544:	3fcccccd 	.word	0x3fcccccd
 8010548:	3fe66666 	.word	0x3fe66666
 801054c:	3ffae148 	.word	0x3ffae148

08010550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8010550:	b570      	push	{r4, r5, r6, lr}
 8010552:	ed2d 8b06 	vpush	{d8-d10}
 8010556:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801055a:	eef0 aa40 	vmov.f32	s21, s0
 801055e:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8010562:	4604      	mov	r4, r0
 8010564:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8010568:	ee30 9a49 	vsub.f32	s18, s0, s18
 801056c:	eeb0 aa60 	vmov.f32	s20, s1
 8010570:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010574:	eea9 0a09 	vfma.f32	s0, s18, s18
 8010578:	f012 f97e 	bl	8022878 <sqrtf>
 801057c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010584:	dd36      	ble.n	80105f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8010586:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801058a:	2600      	movs	r6, #0
 801058c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8010590:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8010594:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8010598:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 801059c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80105a0:	eec8 8a26 	vdiv.f32	s17, s16, s13
 80105a4:	ee89 8a26 	vdiv.f32	s16, s18, s13
 80105a8:	ee70 9a28 	vadd.f32	s19, s0, s17
 80105ac:	ee78 8aaa 	vadd.f32	s17, s17, s21
 80105b0:	ee30 9ac8 	vsub.f32	s18, s1, s16
 80105b4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80105b8:	b1fd      	cbz	r5, 80105fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 80105ba:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 80105be:	eef0 0a49 	vmov.f32	s1, s18
 80105c2:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 80105c6:	eeb0 0a69 	vmov.f32	s0, s19
 80105ca:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 80105ce:	4620      	mov	r0, r4
 80105d0:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80105d4:	f7ff fd64 	bl	80100a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80105d8:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80105dc:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80105e0:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80105e4:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80105e8:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80105ec:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80105f0:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80105f4:	ecbd 8b06 	vpop	{d8-d10}
 80105f8:	bd70      	pop	{r4, r5, r6, pc}
 80105fa:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80105fe:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8010602:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8010606:	b16b      	cbz	r3, 8010624 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8010608:	eef0 1a49 	vmov.f32	s3, s18
 801060c:	4620      	mov	r0, r4
 801060e:	eeb0 1a69 	vmov.f32	s2, s19
 8010612:	eef0 0a62 	vmov.f32	s1, s5
 8010616:	eeb0 0a42 	vmov.f32	s0, s4
 801061a:	f7ff feb1 	bl	8010380 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801061e:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8010622:	e7db      	b.n	80105dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8010624:	eef0 4a48 	vmov.f32	s9, s16
 8010628:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 801062c:	eeb0 4a68 	vmov.f32	s8, s17
 8010630:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8010634:	eef0 3a49 	vmov.f32	s7, s18
 8010638:	4620      	mov	r0, r4
 801063a:	eeb0 3a69 	vmov.f32	s6, s19
 801063e:	f7ff fe13 	bl	8010268 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8010642:	e7cb      	b.n	80105dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08010644 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8010644:	ee07 2a90 	vmov	s15, r2
 8010648:	ee07 1a10 	vmov	s14, r1
 801064c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8010650:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8010664 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8010654:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8010658:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801065c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010660:	f7ff bf76 	b.w	8010550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010664:	3d000000 	.word	0x3d000000

08010668 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8010668:	b538      	push	{r3, r4, r5, lr}
 801066a:	ed2d 8b02 	vpush	{d8}
 801066e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8010672:	4604      	mov	r4, r0
 8010674:	b31d      	cbz	r5, 80106be <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8010676:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801067a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801067e:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8010682:	ee78 8a67 	vsub.f32	s17, s16, s15
 8010686:	ee38 8a27 	vadd.f32	s16, s16, s15
 801068a:	eef0 0a68 	vmov.f32	s1, s17
 801068e:	f7ff fd07 	bl	80100a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8010692:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8010696:	eef0 1a48 	vmov.f32	s3, s16
 801069a:	4620      	mov	r0, r4
 801069c:	eeb0 0a41 	vmov.f32	s0, s2
 80106a0:	eef0 0a68 	vmov.f32	s1, s17
 80106a4:	f7ff fe6c 	bl	8010380 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80106a8:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80106ac:	eef0 1a68 	vmov.f32	s3, s17
 80106b0:	4620      	mov	r0, r4
 80106b2:	eef0 0a48 	vmov.f32	s1, s16
 80106b6:	eeb0 0a41 	vmov.f32	s0, s2
 80106ba:	f7ff fe61 	bl	8010380 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80106be:	4628      	mov	r0, r5
 80106c0:	ecbd 8b02 	vpop	{d8}
 80106c4:	bd38      	pop	{r3, r4, r5, pc}

080106c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 80106c6:	b510      	push	{r4, lr}
 80106c8:	ed2d 8b02 	vpush	{d8}
 80106cc:	4604      	mov	r4, r0
 80106ce:	eeb0 8a40 	vmov.f32	s16, s0
 80106d2:	eef0 8a60 	vmov.f32	s17, s1
 80106d6:	f7ff ffc7 	bl	8010668 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80106da:	b9d0      	cbnz	r0, 8010712 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80106dc:	4620      	mov	r0, r4
 80106de:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 80106e2:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 80106e6:	eef0 0a68 	vmov.f32	s1, s17
 80106ea:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 80106ee:	eeb0 0a48 	vmov.f32	s0, s16
 80106f2:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 80106f6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80106fa:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80106fe:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8010702:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8010706:	f7ff fdaf 	bl	8010268 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801070a:	2001      	movs	r0, #1
 801070c:	ecbd 8b02 	vpop	{d8}
 8010710:	bd10      	pop	{r4, pc}
 8010712:	2000      	movs	r0, #0
 8010714:	e7fa      	b.n	801070c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08010716 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8010716:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 801071a:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 801071e:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8010722:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8010726:	f7ff be2b 	b.w	8010380 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0801072c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 801072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010730:	b089      	sub	sp, #36	@ 0x24
 8010732:	461c      	mov	r4, r3
 8010734:	4682      	mov	sl, r0
 8010736:	4615      	mov	r5, r2
 8010738:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801073c:	f10d 0820 	add.w	r8, sp, #32
 8010740:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010742:	9304      	str	r3, [sp, #16]
 8010744:	2300      	movs	r3, #0
 8010746:	9105      	str	r1, [sp, #20]
 8010748:	9306      	str	r3, [sp, #24]
 801074a:	f848 3d04 	str.w	r3, [r8, #-4]!
 801074e:	9b04      	ldr	r3, [sp, #16]
 8010750:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8010754:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8010758:	9b05      	ldr	r3, [sp, #20]
 801075a:	429d      	cmp	r5, r3
 801075c:	d96d      	bls.n	801083a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801075e:	3d01      	subs	r5, #1
 8010760:	f819 3005 	ldrb.w	r3, [r9, r5]
 8010764:	2b06      	cmp	r3, #6
 8010766:	d8f7      	bhi.n	8010758 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8010768:	a201      	add	r2, pc, #4	@ (adr r2, 8010770 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 801076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076e:	bf00      	nop
 8010770:	0801078f 	.word	0x0801078f
 8010774:	08010759 	.word	0x08010759
 8010778:	0801078d 	.word	0x0801078d
 801077c:	080107b1 	.word	0x080107b1
 8010780:	080107b1 	.word	0x080107b1
 8010784:	080107b5 	.word	0x080107b5
 8010788:	080107f5 	.word	0x080107f5
 801078c:	3c02      	subs	r4, #2
 801078e:	4650      	mov	r0, sl
 8010790:	9400      	str	r4, [sp, #0]
 8010792:	462b      	mov	r3, r5
 8010794:	4642      	mov	r2, r8
 8010796:	a906      	add	r1, sp, #24
 8010798:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801079c:	f7ff fcae 	bl	80100fc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80107a0:	eddd 0a07 	vldr	s1, [sp, #28]
 80107a4:	ed9d 0a06 	vldr	s0, [sp, #24]
 80107a8:	4630      	mov	r0, r6
 80107aa:	f7ff fed1 	bl	8010550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80107ae:	e7d3      	b.n	8010758 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80107b0:	3c01      	subs	r4, #1
 80107b2:	e7ec      	b.n	801078e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 80107b4:	f1a4 0b04 	sub.w	fp, r4, #4
 80107b8:	3c02      	subs	r4, #2
 80107ba:	4650      	mov	r0, sl
 80107bc:	462b      	mov	r3, r5
 80107be:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80107c2:	f8cd b000 	str.w	fp, [sp]
 80107c6:	4642      	mov	r2, r8
 80107c8:	a906      	add	r1, sp, #24
 80107ca:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80107ce:	f7ff fc95 	bl	80100fc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80107d2:	eddd 2a07 	vldr	s5, [sp, #28]
 80107d6:	ed9d 2a06 	vldr	s4, [sp, #24]
 80107da:	4630      	mov	r0, r6
 80107dc:	ed54 1a01 	vldr	s3, [r4, #-4]
 80107e0:	ed14 1a02 	vldr	s2, [r4, #-8]
 80107e4:	edd4 0a01 	vldr	s1, [r4, #4]
 80107e8:	ed94 0a00 	vldr	s0, [r4]
 80107ec:	f7ff fc1a 	bl	8010024 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80107f0:	465c      	mov	r4, fp
 80107f2:	e7b1      	b.n	8010758 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80107f4:	f1a4 0b06 	sub.w	fp, r4, #6
 80107f8:	3c02      	subs	r4, #2
 80107fa:	4650      	mov	r0, sl
 80107fc:	462b      	mov	r3, r5
 80107fe:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8010802:	f8cd b000 	str.w	fp, [sp]
 8010806:	4642      	mov	r2, r8
 8010808:	a906      	add	r1, sp, #24
 801080a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801080e:	f7ff fc75 	bl	80100fc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8010812:	eddd 3a07 	vldr	s7, [sp, #28]
 8010816:	ed9d 3a06 	vldr	s6, [sp, #24]
 801081a:	4630      	mov	r0, r6
 801081c:	ed54 2a03 	vldr	s5, [r4, #-12]
 8010820:	ed14 2a04 	vldr	s4, [r4, #-16]
 8010824:	ed54 1a01 	vldr	s3, [r4, #-4]
 8010828:	ed14 1a02 	vldr	s2, [r4, #-8]
 801082c:	edd4 0a01 	vldr	s1, [r4, #4]
 8010830:	ed94 0a00 	vldr	s0, [r4]
 8010834:	f7ff fc15 	bl	8010062 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010838:	e7da      	b.n	80107f0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 801083a:	9b04      	ldr	r3, [sp, #16]
 801083c:	b113      	cbz	r3, 8010844 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801083e:	4630      	mov	r0, r6
 8010840:	f7ff ff69 	bl	8010716 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8010844:	b009      	add	sp, #36	@ 0x24
 8010846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084a:	bf00      	nop

0801084c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 801084c:	eef0 7a60 	vmov.f32	s15, s1
 8010850:	6803      	ldr	r3, [r0, #0]
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010858:	ee17 2a90 	vmov	r2, s15
 801085c:	eef0 7a40 	vmov.f32	s15, s0
 8010860:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010864:	ee17 1a90 	vmov	r1, s15
 8010868:	4718      	bx	r3
	...

0801086c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 801086c:	4b04      	ldr	r3, [pc, #16]	@ (8010880 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801086e:	b510      	push	{r4, lr}
 8010870:	4604      	mov	r4, r0
 8010872:	f840 3b14 	str.w	r3, [r0], #20
 8010876:	f001 f88b 	bl	8011990 <_ZN8touchgfx7OutlineD1Ev>
 801087a:	4620      	mov	r0, r4
 801087c:	bd10      	pop	{r4, pc}
 801087e:	bf00      	nop
 8010880:	08027014 	.word	0x08027014

08010884 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8010884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010888:	ed2d 8b04 	vpush	{d8-d9}
 801088c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8010890:	b0b5      	sub	sp, #212	@ 0xd4
 8010892:	4605      	mov	r5, r0
 8010894:	468b      	mov	fp, r1
 8010896:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801089a:	9206      	str	r2, [sp, #24]
 801089c:	461e      	mov	r6, r3
 801089e:	2400      	movs	r4, #0
 80108a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a4:	f240 814f 	bls.w	8010b46 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 80108a8:	23ff      	movs	r3, #255	@ 0xff
 80108aa:	1d02      	adds	r2, r0, #4
 80108ac:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8010b4c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 80108b0:	f04f 0800 	mov.w	r8, #0
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	af08      	add	r7, sp, #32
 80108b8:	6981      	ldr	r1, [r0, #24]
 80108ba:	a808      	add	r0, sp, #32
 80108bc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80108be:	eef0 9a49 	vmov.f32	s19, s18
 80108c2:	f011 fb4d 	bl	8021f60 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80108c6:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 80108ca:	4ba1      	ldr	r3, [pc, #644]	@ (8010b50 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 80108cc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80108d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80108d4:	2201      	movs	r2, #1
 80108d6:	9308      	str	r3, [sp, #32]
 80108d8:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80108dc:	edd5 6a08 	vldr	s13, [r5, #32]
 80108e0:	eeb0 8a49 	vmov.f32	s16, s18
 80108e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e8:	9325      	str	r3, [sp, #148]	@ 0x94
 80108ea:	f04f 0300 	mov.w	r3, #0
 80108ee:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 80108f2:	7f6a      	ldrb	r2, [r5, #29]
 80108f4:	eef0 8a49 	vmov.f32	s17, s18
 80108f8:	bf48      	it	mi
 80108fa:	eef1 7a67 	vnegmi.f32	s15, s15
 80108fe:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8010902:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8010906:	46c1      	mov	r9, r8
 8010908:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801090c:	f04f 0a01 	mov.w	sl, #1
 8010910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010914:	7fab      	ldrb	r3, [r5, #30]
 8010916:	942a      	str	r4, [sp, #168]	@ 0xa8
 8010918:	435a      	muls	r2, r3
 801091a:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 801091e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8010922:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8010926:	1c53      	adds	r3, r2, #1
 8010928:	942b      	str	r4, [sp, #172]	@ 0xac
 801092a:	942c      	str	r4, [sp, #176]	@ 0xb0
 801092c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010930:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8010934:	942d      	str	r4, [sp, #180]	@ 0xb4
 8010936:	942e      	str	r4, [sp, #184]	@ 0xb8
 8010938:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801093c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010940:	942f      	str	r4, [sp, #188]	@ 0xbc
 8010942:	9430      	str	r4, [sp, #192]	@ 0xc0
 8010944:	9431      	str	r4, [sp, #196]	@ 0xc4
 8010946:	9432      	str	r4, [sp, #200]	@ 0xc8
 8010948:	9433      	str	r4, [sp, #204]	@ 0xcc
 801094a:	4644      	mov	r4, r8
 801094c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8010950:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8010954:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8010958:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 801095c:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8010960:	9b06      	ldr	r3, [sp, #24]
 8010962:	454b      	cmp	r3, r9
 8010964:	f000 80cc 	beq.w	8010b00 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8010968:	f109 0301 	add.w	r3, r9, #1
 801096c:	9305      	str	r3, [sp, #20]
 801096e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8010972:	2b06      	cmp	r3, #6
 8010974:	d839      	bhi.n	80109ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010976:	e8df f003 	tbb	[pc, r3]
 801097a:	3b04      	.short	0x3b04
 801097c:	817c6f60 	.word	0x817c6f60
 8010980:	a0          	.byte	0xa0
 8010981:	00          	.byte	0x00
 8010982:	45c1      	cmp	r9, r8
 8010984:	d92b      	bls.n	80109de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8010986:	eef0 0a49 	vmov.f32	s1, s18
 801098a:	4638      	mov	r0, r7
 801098c:	eeb0 0a69 	vmov.f32	s0, s19
 8010990:	f7ff fdde 	bl	8010550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010994:	4638      	mov	r0, r7
 8010996:	f7ff fe67 	bl	8010668 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801099a:	4681      	mov	r9, r0
 801099c:	b9f8      	cbnz	r0, 80109de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801099e:	eef0 0a49 	vmov.f32	s1, s18
 80109a2:	4638      	mov	r0, r7
 80109a4:	eeb0 0a69 	vmov.f32	s0, s19
 80109a8:	f7ff fe8d 	bl	80106c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80109ac:	4628      	mov	r0, r5
 80109ae:	4623      	mov	r3, r4
 80109b0:	9a05      	ldr	r2, [sp, #20]
 80109b2:	4641      	mov	r1, r8
 80109b4:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 80109b8:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 80109bc:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80109c0:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80109c4:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80109c8:	e9cd b600 	strd	fp, r6, [sp]
 80109cc:	f7ff feae 	bl	801072c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80109d0:	eef0 0a49 	vmov.f32	s1, s18
 80109d4:	eeb0 0a69 	vmov.f32	s0, s19
 80109d8:	4638      	mov	r0, r7
 80109da:	f7ff fe74 	bl	80106c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80109de:	eeb0 8a49 	vmov.f32	s16, s18
 80109e2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80109e6:	eef0 8a69 	vmov.f32	s17, s19
 80109ea:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80109ee:	e7b7      	b.n	8010960 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 80109f0:	45c1      	cmp	r9, r8
 80109f2:	d90d      	bls.n	8010a10 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80109f4:	4638      	mov	r0, r7
 80109f6:	f7ff fe37 	bl	8010668 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80109fa:	b948      	cbnz	r0, 8010a10 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80109fc:	4623      	mov	r3, r4
 80109fe:	464a      	mov	r2, r9
 8010a00:	4641      	mov	r1, r8
 8010a02:	4628      	mov	r0, r5
 8010a04:	e9cd a702 	strd	sl, r7, [sp, #8]
 8010a08:	e9cd b600 	strd	fp, r6, [sp]
 8010a0c:	f7ff fe8e 	bl	801072c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010a10:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010a14:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8010a18:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8010a1c:	3402      	adds	r4, #2
 8010a1e:	edd3 8a00 	vldr	s17, [r3]
 8010a22:	46c8      	mov	r8, r9
 8010a24:	ed93 8a01 	vldr	s16, [r3, #4]
 8010a28:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8010a2c:	eef0 9a68 	vmov.f32	s19, s17
 8010a30:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8010a34:	eeb0 9a48 	vmov.f32	s18, s16
 8010a38:	e7d7      	b.n	80109ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010a3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010a3e:	4638      	mov	r0, r7
 8010a40:	3402      	adds	r4, #2
 8010a42:	edd3 8a00 	vldr	s17, [r3]
 8010a46:	ed93 8a01 	vldr	s16, [r3, #4]
 8010a4a:	eeb0 0a68 	vmov.f32	s0, s17
 8010a4e:	eef0 0a48 	vmov.f32	s1, s16
 8010a52:	f7ff fd7d 	bl	8010550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010a56:	e7c8      	b.n	80109ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010a58:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010a5c:	edd3 8a00 	vldr	s17, [r3]
 8010a60:	eef0 0a48 	vmov.f32	s1, s16
 8010a64:	4638      	mov	r0, r7
 8010a66:	eeb0 0a68 	vmov.f32	s0, s17
 8010a6a:	3401      	adds	r4, #1
 8010a6c:	f7ff fd70 	bl	8010550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010a70:	e7bb      	b.n	80109ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010a72:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010a76:	ed93 8a00 	vldr	s16, [r3]
 8010a7a:	e7f1      	b.n	8010a60 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8010a7c:	00a3      	lsls	r3, r4, #2
 8010a7e:	eef0 0a48 	vmov.f32	s1, s16
 8010a82:	eeb0 0a68 	vmov.f32	s0, s17
 8010a86:	4638      	mov	r0, r7
 8010a88:	f103 0208 	add.w	r2, r3, #8
 8010a8c:	f103 090c 	add.w	r9, r3, #12
 8010a90:	4433      	add	r3, r6
 8010a92:	3404      	adds	r4, #4
 8010a94:	4432      	add	r2, r6
 8010a96:	44b1      	add	r9, r6
 8010a98:	edd3 1a01 	vldr	s3, [r3, #4]
 8010a9c:	ed92 2a00 	vldr	s4, [r2]
 8010aa0:	edd9 2a00 	vldr	s5, [r9]
 8010aa4:	ed93 1a00 	vldr	s2, [r3]
 8010aa8:	9207      	str	r2, [sp, #28]
 8010aaa:	f7ff fabb 	bl	8010024 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010aae:	9a07      	ldr	r2, [sp, #28]
 8010ab0:	ed99 8a00 	vldr	s16, [r9]
 8010ab4:	edd2 8a00 	vldr	s17, [r2]
 8010ab8:	e797      	b.n	80109ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010aba:	00a3      	lsls	r3, r4, #2
 8010abc:	eef0 0a48 	vmov.f32	s1, s16
 8010ac0:	eeb0 0a68 	vmov.f32	s0, s17
 8010ac4:	4638      	mov	r0, r7
 8010ac6:	f103 0210 	add.w	r2, r3, #16
 8010aca:	f103 0914 	add.w	r9, r3, #20
 8010ace:	4433      	add	r3, r6
 8010ad0:	3406      	adds	r4, #6
 8010ad2:	4432      	add	r2, r6
 8010ad4:	44b1      	add	r9, r6
 8010ad6:	edd3 2a03 	vldr	s5, [r3, #12]
 8010ada:	ed92 3a00 	vldr	s6, [r2]
 8010ade:	edd9 3a00 	vldr	s7, [r9]
 8010ae2:	ed93 2a02 	vldr	s4, [r3, #8]
 8010ae6:	edd3 1a01 	vldr	s3, [r3, #4]
 8010aea:	ed93 1a00 	vldr	s2, [r3]
 8010aee:	9207      	str	r2, [sp, #28]
 8010af0:	f7ff fab7 	bl	8010062 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010af4:	9a07      	ldr	r2, [sp, #28]
 8010af6:	ed99 8a00 	vldr	s16, [r9]
 8010afa:	edd2 8a00 	vldr	s17, [r2]
 8010afe:	e774      	b.n	80109ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010b00:	9b06      	ldr	r3, [sp, #24]
 8010b02:	af08      	add	r7, sp, #32
 8010b04:	4543      	cmp	r3, r8
 8010b06:	d90f      	bls.n	8010b28 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8010b08:	4638      	mov	r0, r7
 8010b0a:	f7ff fdad 	bl	8010668 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010b0e:	b958      	cbnz	r0, 8010b28 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8010b10:	2301      	movs	r3, #1
 8010b12:	9703      	str	r7, [sp, #12]
 8010b14:	f8cd b000 	str.w	fp, [sp]
 8010b18:	4641      	mov	r1, r8
 8010b1a:	9a06      	ldr	r2, [sp, #24]
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8010b22:	4623      	mov	r3, r4
 8010b24:	f7ff fe02 	bl	801072c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010b28:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8010b2c:	4638      	mov	r0, r7
 8010b2e:	f011 faab 	bl	8022088 <_ZN8touchgfx6Canvas6renderEh>
 8010b32:	4604      	mov	r4, r0
 8010b34:	4638      	mov	r0, r7
 8010b36:	f7ff fe99 	bl	801086c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	b035      	add	sp, #212	@ 0xd4
 8010b3e:	ecbd 8b04 	vpop	{d8-d9}
 8010b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b46:	2401      	movs	r4, #1
 8010b48:	e7f7      	b.n	8010b3a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8010b4a:	bf00      	nop
 8010b4c:	00000000 	.word	0x00000000
 8010b50:	08026a78 	.word	0x08026a78

08010b54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8010b54:	b510      	push	{r4, lr}
 8010b56:	4604      	mov	r4, r0
 8010b58:	f7ff fe88 	bl	801086c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8010b5c:	21b0      	movs	r1, #176	@ 0xb0
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f011 fe5f 	bl	8022822 <_ZdlPvj>
 8010b64:	4620      	mov	r0, r4
 8010b66:	bd10      	pop	{r4, pc}

08010b68 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8010b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b6c:	4698      	mov	r8, r3
 8010b6e:	23ff      	movs	r3, #255	@ 0xff
 8010b70:	4607      	mov	r7, r0
 8010b72:	4689      	mov	r9, r1
 8010b74:	4692      	mov	sl, r2
 8010b76:	1d02      	adds	r2, r0, #4
 8010b78:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8010b7c:	2400      	movs	r4, #0
 8010b7e:	44ca      	add	sl, r9
 8010b80:	ed2d 8b06 	vpush	{d8-d10}
 8010b84:	b0aa      	sub	sp, #168	@ 0xa8
 8010b86:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8010d8c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	eef0 8a48 	vmov.f32	s17, s16
 8010b90:	6981      	ldr	r1, [r0, #24]
 8010b92:	a80d      	add	r0, sp, #52	@ 0x34
 8010b94:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8010b96:	f011 f9e3 	bl	8021f60 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8010b9a:	7f3b      	ldrb	r3, [r7, #28]
 8010b9c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8010d8c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	1e5a      	subs	r2, r3, #1
 8010ba4:	eeb0 0a60 	vmov.f32	s0, s1
 8010ba8:	4253      	negs	r3, r2
 8010baa:	4153      	adcs	r3, r2
 8010bac:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8010bb0:	f005 f84f 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010bb4:	eeb0 9a40 	vmov.f32	s18, s0
 8010bb8:	eef0 9a60 	vmov.f32	s19, s1
 8010bbc:	45ca      	cmp	sl, r9
 8010bbe:	f000 80cd 	beq.w	8010d5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8010bc2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010bc6:	2b06      	cmp	r3, #6
 8010bc8:	d8f8      	bhi.n	8010bbc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010bca:	e8df f003 	tbb	[pc, r3]
 8010bce:	0804      	.short	0x0804
 8010bd0:	58533f2a 	.word	0x58533f2a
 8010bd4:	8a          	.byte	0x8a
 8010bd5:	00          	.byte	0x00
 8010bd6:	a80d      	add	r0, sp, #52	@ 0x34
 8010bd8:	f011 fa34 	bl	8022044 <_ZN8touchgfx6Canvas5closeEv>
 8010bdc:	e7ee      	b.n	8010bbc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010bde:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010be2:	4628      	mov	r0, r5
 8010be4:	ed93 8a01 	vldr	s16, [r3, #4]
 8010be8:	edd3 8a00 	vldr	s17, [r3]
 8010bec:	eef0 0a48 	vmov.f32	s1, s16
 8010bf0:	eeb0 0a68 	vmov.f32	s0, s17
 8010bf4:	f005 f82d 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010bf8:	a80d      	add	r0, sp, #52	@ 0x34
 8010bfa:	eef0 7a60 	vmov.f32	s15, s1
 8010bfe:	eeb0 9a40 	vmov.f32	s18, s0
 8010c02:	eef0 9a60 	vmov.f32	s19, s1
 8010c06:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010c0a:	ee17 2a90 	vmov	r2, s15
 8010c0e:	eef0 7a40 	vmov.f32	s15, s0
 8010c12:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010c16:	ee17 1a90 	vmov	r1, s15
 8010c1a:	f011 faed 	bl	80221f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8010c1e:	3402      	adds	r4, #2
 8010c20:	e7cc      	b.n	8010bbc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010c22:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010c26:	4628      	mov	r0, r5
 8010c28:	edd3 8a00 	vldr	s17, [r3]
 8010c2c:	ed93 8a01 	vldr	s16, [r3, #4]
 8010c30:	eeb0 0a68 	vmov.f32	s0, s17
 8010c34:	eef0 0a48 	vmov.f32	s1, s16
 8010c38:	f005 f80b 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010c3c:	a80d      	add	r0, sp, #52	@ 0x34
 8010c3e:	eeb0 9a40 	vmov.f32	s18, s0
 8010c42:	eef0 9a60 	vmov.f32	s19, s1
 8010c46:	f7ff fe01 	bl	801084c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8010c4a:	e7e8      	b.n	8010c1e <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8010c4c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010c50:	edd3 8a00 	vldr	s17, [r3]
 8010c54:	eef0 0a48 	vmov.f32	s1, s16
 8010c58:	4628      	mov	r0, r5
 8010c5a:	eeb0 0a68 	vmov.f32	s0, s17
 8010c5e:	3401      	adds	r4, #1
 8010c60:	f004 fff7 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010c64:	a80d      	add	r0, sp, #52	@ 0x34
 8010c66:	eef0 9a60 	vmov.f32	s19, s1
 8010c6a:	eeb0 9a40 	vmov.f32	s18, s0
 8010c6e:	f7ff fded 	bl	801084c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8010c72:	e7a3      	b.n	8010bbc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010c74:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010c78:	ed93 8a00 	vldr	s16, [r3]
 8010c7c:	e7ea      	b.n	8010c54 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8010c7e:	1ca3      	adds	r3, r4, #2
 8010c80:	4628      	mov	r0, r5
 8010c82:	3404      	adds	r4, #4
 8010c84:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8010c88:	ed53 0a01 	vldr	s1, [r3, #-4]
 8010c8c:	ed13 0a02 	vldr	s0, [r3, #-8]
 8010c90:	edd3 8a00 	vldr	s17, [r3]
 8010c94:	ed93 8a01 	vldr	s16, [r3, #4]
 8010c98:	f004 ffdb 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010c9c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8010ca0:	eeb0 0a68 	vmov.f32	s0, s17
 8010ca4:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8010ca8:	eef0 0a48 	vmov.f32	s1, s16
 8010cac:	4628      	mov	r0, r5
 8010cae:	f004 ffd0 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010cb2:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8010cb6:	eef0 2a60 	vmov.f32	s5, s1
 8010cba:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8010cbe:	eeb0 2a40 	vmov.f32	s4, s0
 8010cc2:	a80d      	add	r0, sp, #52	@ 0x34
 8010cc4:	eeb0 aa40 	vmov.f32	s20, s0
 8010cc8:	eef0 aa60 	vmov.f32	s21, s1
 8010ccc:	eeb0 0a49 	vmov.f32	s0, s18
 8010cd0:	eef0 0a69 	vmov.f32	s1, s19
 8010cd4:	f7ff f9a6 	bl	8010024 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010cd8:	eef0 9a6a 	vmov.f32	s19, s21
 8010cdc:	eeb0 9a4a 	vmov.f32	s18, s20
 8010ce0:	e76c      	b.n	8010bbc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010ce2:	1d26      	adds	r6, r4, #4
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	3406      	adds	r4, #6
 8010ce8:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010cec:	ed56 0a03 	vldr	s1, [r6, #-12]
 8010cf0:	ed16 0a04 	vldr	s0, [r6, #-16]
 8010cf4:	edd6 8a00 	vldr	s17, [r6]
 8010cf8:	ed96 8a01 	vldr	s16, [r6, #4]
 8010cfc:	f004 ffa9 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010d00:	ed8d 0a07 	vstr	s0, [sp, #28]
 8010d04:	4628      	mov	r0, r5
 8010d06:	ed16 0a02 	vldr	s0, [r6, #-8]
 8010d0a:	edcd 0a08 	vstr	s1, [sp, #32]
 8010d0e:	ed56 0a01 	vldr	s1, [r6, #-4]
 8010d12:	f004 ff9e 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010d16:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8010d1a:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8010d1e:	eeb0 0a68 	vmov.f32	s0, s17
 8010d22:	eef0 0a48 	vmov.f32	s1, s16
 8010d26:	4628      	mov	r0, r5
 8010d28:	f004 ff93 	bl	8015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010d2c:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8010d30:	eeb0 3a40 	vmov.f32	s6, s0
 8010d34:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8010d38:	eef0 3a60 	vmov.f32	s7, s1
 8010d3c:	eddd 1a08 	vldr	s3, [sp, #32]
 8010d40:	eeb0 aa40 	vmov.f32	s20, s0
 8010d44:	ed9d 1a07 	vldr	s2, [sp, #28]
 8010d48:	eef0 aa60 	vmov.f32	s21, s1
 8010d4c:	a80d      	add	r0, sp, #52	@ 0x34
 8010d4e:	eef0 0a69 	vmov.f32	s1, s19
 8010d52:	eeb0 0a49 	vmov.f32	s0, s18
 8010d56:	f7ff f984 	bl	8010062 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010d5a:	e7bd      	b.n	8010cd8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8010d5c:	7f7b      	ldrb	r3, [r7, #29]
 8010d5e:	a80d      	add	r0, sp, #52	@ 0x34
 8010d60:	7fb9      	ldrb	r1, [r7, #30]
 8010d62:	4359      	muls	r1, r3
 8010d64:	1c4b      	adds	r3, r1, #1
 8010d66:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8010d6a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010d6e:	f011 f98b 	bl	8022088 <_ZN8touchgfx6Canvas6renderEh>
 8010d72:	4b07      	ldr	r3, [pc, #28]	@ (8010d90 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8010d74:	4604      	mov	r4, r0
 8010d76:	a812      	add	r0, sp, #72	@ 0x48
 8010d78:	930d      	str	r3, [sp, #52]	@ 0x34
 8010d7a:	f000 fe09 	bl	8011990 <_ZN8touchgfx7OutlineD1Ev>
 8010d7e:	4620      	mov	r0, r4
 8010d80:	b02a      	add	sp, #168	@ 0xa8
 8010d82:	ecbd 8b06 	vpop	{d8-d10}
 8010d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d8a:	bf00      	nop
 8010d8c:	00000000 	.word	0x00000000
 8010d90:	08027014 	.word	0x08027014

08010d94 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8010d94:	b410      	push	{r4}
 8010d96:	7f04      	ldrb	r4, [r0, #28]
 8010d98:	b11c      	cbz	r4, 8010da2 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8010d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d9e:	f7ff bee3 	b.w	8010b68 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8010da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010da6:	f7ff bd6d 	b.w	8010884 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

08010dac <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8010dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db0:	4691      	mov	r9, r2
 8010db2:	4602      	mov	r2, r0
 8010db4:	b085      	sub	sp, #20
 8010db6:	4605      	mov	r5, r0
 8010db8:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8010dbc:	4688      	mov	r8, r1
 8010dbe:	469a      	mov	sl, r3
 8010dc0:	ab02      	add	r3, sp, #8
 8010dc2:	6851      	ldr	r1, [r2, #4]
 8010dc4:	af02      	add	r7, sp, #8
 8010dc6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010dca:	c303      	stmia	r3!, {r0, r1}
 8010dcc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	dd08      	ble.n	8010de6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010dd4:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8010dd8:	2c00      	cmp	r4, #0
 8010dda:	dd04      	ble.n	8010de6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8010e98 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 8010dde:	7812      	ldrb	r2, [r2, #0]
 8010de0:	b122      	cbz	r2, 8010dec <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 8010de2:	2a01      	cmp	r2, #1
 8010de4:	d02d      	beq.n	8010e42 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 8010de6:	b005      	add	sp, #20
 8010de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010df0:	441c      	add	r4, r3
 8010df2:	b2a4      	uxth	r4, r4
 8010df4:	b226      	sxth	r6, r4
 8010df6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8010dfa:	42b3      	cmp	r3, r6
 8010dfc:	daf3      	bge.n	8010de6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010dfe:	4653      	mov	r3, sl
 8010e00:	464a      	mov	r2, r9
 8010e02:	4641      	mov	r1, r8
 8010e04:	4628      	mov	r0, r5
 8010e06:	e9cd b700 	strd	fp, r7, [sp]
 8010e0a:	f7ff ffc3 	bl	8010d94 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8010e0e:	b940      	cbnz	r0, 8010e22 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8010e10:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d004      	beq.n	8010e22 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8010e18:	3301      	adds	r3, #1
 8010e1a:	105b      	asrs	r3, r3, #1
 8010e1c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010e20:	e7ed      	b.n	8010dfe <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 8010e22:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8010e26:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010e2a:	4413      	add	r3, r2
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	441a      	add	r2, r3
 8010e30:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010e34:	b212      	sxth	r2, r2
 8010e36:	4296      	cmp	r6, r2
 8010e38:	dadd      	bge.n	8010df6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8010e3a:	1ae3      	subs	r3, r4, r3
 8010e3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010e40:	e7d9      	b.n	8010df6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8010e42:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8010e46:	441c      	add	r4, r3
 8010e48:	b2a4      	uxth	r4, r4
 8010e4a:	b226      	sxth	r6, r4
 8010e4c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8010e50:	42b3      	cmp	r3, r6
 8010e52:	dac8      	bge.n	8010de6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010e54:	4653      	mov	r3, sl
 8010e56:	464a      	mov	r2, r9
 8010e58:	4641      	mov	r1, r8
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	e9cd b700 	strd	fp, r7, [sp]
 8010e60:	f7ff ff98 	bl	8010d94 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8010e64:	b940      	cbnz	r0, 8010e78 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8010e66:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d004      	beq.n	8010e78 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8010e6e:	3301      	adds	r3, #1
 8010e70:	105b      	asrs	r3, r3, #1
 8010e72:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010e76:	e7ed      	b.n	8010e54 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 8010e78:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010e7c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010e80:	4413      	add	r3, r2
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	441a      	add	r2, r3
 8010e86:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010e8a:	b212      	sxth	r2, r2
 8010e8c:	4296      	cmp	r6, r2
 8010e8e:	dadd      	bge.n	8010e4c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8010e90:	1ae3      	subs	r3, r4, r3
 8010e92:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010e96:	e7d9      	b.n	8010e4c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8010e98:	240251e8 	.word	0x240251e8

08010e9c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8010e9c:	0c0b      	lsrs	r3, r1, #16
 8010e9e:	60c1      	str	r1, [r0, #12]
 8010ea0:	7481      	strb	r1, [r0, #18]
 8010ea2:	7403      	strb	r3, [r0, #16]
 8010ea4:	0a0b      	lsrs	r3, r1, #8
 8010ea6:	7443      	strb	r3, [r0, #17]
 8010ea8:	4770      	bx	lr

08010eaa <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8010eaa:	f1a0 0008 	sub.w	r0, r0, #8
 8010eae:	e7f5      	b.n	8010e9c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

08010eb0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8010eb0:	b508      	push	{r3, lr}
 8010eb2:	4b05      	ldr	r3, [pc, #20]	@ (8010ec8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8010eb4:	6818      	ldr	r0, [r3, #0]
 8010eb6:	6803      	ldr	r3, [r0, #0]
 8010eb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010ebc:	4798      	blx	r3
 8010ebe:	1e43      	subs	r3, r0, #1
 8010ec0:	4258      	negs	r0, r3
 8010ec2:	4158      	adcs	r0, r3
 8010ec4:	bd08      	pop	{r3, pc}
 8010ec6:	bf00      	nop
 8010ec8:	240251f0 	.word	0x240251f0

08010ecc <_ZN8touchgfx13PainterRGB888D1Ev>:
 8010ecc:	4770      	bx	lr

08010ece <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8010ece:	3808      	subs	r0, #8
 8010ed0:	4770      	bx	lr

08010ed2 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8010ed2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010ed6:	b410      	push	{r4}
 8010ed8:	188c      	adds	r4, r1, r2
 8010eda:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010ede:	68c2      	ldr	r2, [r0, #12]
 8010ee0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010eea:	f7f2 b875 	b.w	8002fd8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08010eee <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8010eee:	f7f2 b84f 	b.w	8002f90 <_ZN8touchgfx5paint8tearDownEv>

08010ef2 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8010ef2:	b510      	push	{r4, lr}
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	2114      	movs	r1, #20
 8010ef8:	f011 fc93 	bl	8022822 <_ZdlPvj>
 8010efc:	4620      	mov	r0, r4
 8010efe:	bd10      	pop	{r4, pc}

08010f00 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8010f00:	f1a0 0008 	sub.w	r0, r0, #8
 8010f04:	e7f5      	b.n	8010ef2 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08010f08 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8010f08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f10:	4411      	add	r1, r2
 8010f12:	7c42      	ldrb	r2, [r0, #17]
 8010f14:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8010f18:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8010f1c:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8010f20:	2a00      	cmp	r2, #0
 8010f22:	f000 8084 	beq.w	801102e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8010f26:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8010f2a:	ed90 7a08 	vldr	s14, [r0, #32]
 8010f2e:	42a2      	cmp	r2, r4
 8010f30:	68c3      	ldr	r3, [r0, #12]
 8010f32:	db20      	blt.n	8010f76 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8010f34:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010f38:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8010f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f40:	bfc8      	it	gt
 8010f42:	2200      	movgt	r2, #0
 8010f44:	589a      	ldr	r2, [r3, r2]
 8010f46:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8010f4a:	7c03      	ldrb	r3, [r0, #16]
 8010f4c:	fa5f fc82 	uxtb.w	ip, r2
 8010f50:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8010f54:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8010f58:	440e      	add	r6, r1
 8010f5a:	b36b      	cbz	r3, 8010fb8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8010f5c:	2dff      	cmp	r5, #255	@ 0xff
 8010f5e:	d12b      	bne.n	8010fb8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8010f60:	42b1      	cmp	r1, r6
 8010f62:	f080 8204 	bcs.w	801136e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010f66:	f881 c000 	strb.w	ip, [r1]
 8010f6a:	3103      	adds	r1, #3
 8010f6c:	f801 7c02 	strb.w	r7, [r1, #-2]
 8010f70:	f801 4c01 	strb.w	r4, [r1, #-1]
 8010f74:	e7f4      	b.n	8010f60 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8010f76:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
 8010f7a:	42a7      	cmp	r7, r4
 8010f7c:	dc08      	bgt.n	8010f90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8010f7e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010f82:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8010f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8a:	bfd8      	it	le
 8010f8c:	2200      	movle	r2, #0
 8010f8e:	e7d9      	b.n	8010f44 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8010f90:	1aa2      	subs	r2, r4, r2
 8010f92:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010f96:	ee07 2a90 	vmov	s15, r2
 8010f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010faa:	ee17 2a90 	vmov	r2, s15
 8010fae:	bfd8      	it	le
 8010fb0:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8010fb4:	0092      	lsls	r2, r2, #2
 8010fb6:	e7c5      	b.n	8010f44 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8010fb8:	0e12      	lsrs	r2, r2, #24
 8010fba:	4355      	muls	r5, r2
 8010fbc:	1c6a      	adds	r2, r5, #1
 8010fbe:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8010fc2:	122d      	asrs	r5, r5, #8
 8010fc4:	43e8      	mvns	r0, r5
 8010fc6:	b2ad      	uxth	r5, r5
 8010fc8:	fb1c fc05 	smulbb	ip, ip, r5
 8010fcc:	b2c0      	uxtb	r0, r0
 8010fce:	fb17 f705 	smulbb	r7, r7, r5
 8010fd2:	fb14 f505 	smulbb	r5, r4, r5
 8010fd6:	fa1f fc8c 	uxth.w	ip, ip
 8010fda:	b2bf      	uxth	r7, r7
 8010fdc:	b2ad      	uxth	r5, r5
 8010fde:	428e      	cmp	r6, r1
 8010fe0:	f101 0303 	add.w	r3, r1, #3
 8010fe4:	f240 81c3 	bls.w	801136e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010fe8:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8010fec:	fb02 c200 	mla	r2, r2, r0, ip
 8010ff0:	b292      	uxth	r2, r2
 8010ff2:	1c51      	adds	r1, r2, #1
 8010ff4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010ff8:	1212      	asrs	r2, r2, #8
 8010ffa:	f803 2c03 	strb.w	r2, [r3, #-3]
 8010ffe:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8011002:	fb02 7200 	mla	r2, r2, r0, r7
 8011006:	b292      	uxth	r2, r2
 8011008:	1c51      	adds	r1, r2, #1
 801100a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801100e:	1212      	asrs	r2, r2, #8
 8011010:	f803 2c02 	strb.w	r2, [r3, #-2]
 8011014:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8011018:	fb02 5200 	mla	r2, r2, r0, r5
 801101c:	b292      	uxth	r2, r2
 801101e:	1c51      	adds	r1, r2, #1
 8011020:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011024:	4619      	mov	r1, r3
 8011026:	1212      	asrs	r2, r2, #8
 8011028:	f803 2c01 	strb.w	r2, [r3, #-1]
 801102c:	e7d7      	b.n	8010fde <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 801102e:	7c82      	ldrb	r2, [r0, #18]
 8011030:	2a00      	cmp	r2, #0
 8011032:	d047      	beq.n	80110c4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8011034:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8011038:	ee07 2a10 	vmov	s14, r2
 801103c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011040:	ee07 3a90 	vmov	s15, r3
 8011044:	461a      	mov	r2, r3
 8011046:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801104a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011052:	f200 808e 	bhi.w	8011172 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8011056:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801105a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801105e:	68c7      	ldr	r7, [r0, #12]
 8011060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011064:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011068:	ee06 6a90 	vmov	s13, r6
 801106c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011070:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011078:	bf4a      	itet	mi
 801107a:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 801107e:	4634      	movpl	r4, r6
 8011080:	ee17 4a90 	vmovmi	r4, s15
 8011084:	edd0 7a08 	vldr	s15, [r0, #32]
 8011088:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801108c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8011090:	448e      	add	lr, r1
 8011092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011096:	bfc8      	it	gt
 8011098:	2200      	movgt	r2, #0
 801109a:	58bf      	ldr	r7, [r7, r2]
 801109c:	7c02      	ldrb	r2, [r0, #16]
 801109e:	fa5f f987 	uxtb.w	r9, r7
 80110a2:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80110a6:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80110aa:	b31a      	cbz	r2, 80110f4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80110ac:	2dff      	cmp	r5, #255	@ 0xff
 80110ae:	d121      	bne.n	80110f4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80110b0:	4571      	cmp	r1, lr
 80110b2:	d25d      	bcs.n	8011170 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80110b4:	f881 9000 	strb.w	r9, [r1]
 80110b8:	3103      	adds	r1, #3
 80110ba:	f801 8c02 	strb.w	r8, [r1, #-2]
 80110be:	f801 cc01 	strb.w	ip, [r1, #-1]
 80110c2:	e7f5      	b.n	80110b0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 80110c4:	ee07 4a90 	vmov	s15, r4
 80110c8:	ed90 7a06 	vldr	s14, [r0, #24]
 80110cc:	edd0 6a05 	vldr	s13, [r0, #20]
 80110d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80110d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80110dc:	edd0 7a08 	vldr	s15, [r0, #32]
 80110e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80110e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e8:	bf44      	itt	mi
 80110ea:	edd0 7a07 	vldrmi	s15, [r0, #28]
 80110ee:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 80110f2:	e7a5      	b.n	8011040 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 80110f4:	0e3f      	lsrs	r7, r7, #24
 80110f6:	436f      	muls	r7, r5
 80110f8:	1c7a      	adds	r2, r7, #1
 80110fa:	eb02 2227 	add.w	r2, r2, r7, asr #8
 80110fe:	1212      	asrs	r2, r2, #8
 8011100:	ea6f 0a02 	mvn.w	sl, r2
 8011104:	b292      	uxth	r2, r2
 8011106:	fb19 f902 	smulbb	r9, r9, r2
 801110a:	fa5f fa8a 	uxtb.w	sl, sl
 801110e:	fb18 f802 	smulbb	r8, r8, r2
 8011112:	fb1c fc02 	smulbb	ip, ip, r2
 8011116:	fa1f f989 	uxth.w	r9, r9
 801111a:	fa1f f888 	uxth.w	r8, r8
 801111e:	fa1f fc8c 	uxth.w	ip, ip
 8011122:	458e      	cmp	lr, r1
 8011124:	f101 0203 	add.w	r2, r1, #3
 8011128:	d922      	bls.n	8011170 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801112a:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801112e:	fb01 910a 	mla	r1, r1, sl, r9
 8011132:	b289      	uxth	r1, r1
 8011134:	1c4f      	adds	r7, r1, #1
 8011136:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801113a:	1209      	asrs	r1, r1, #8
 801113c:	f802 1c03 	strb.w	r1, [r2, #-3]
 8011140:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011144:	fb01 810a 	mla	r1, r1, sl, r8
 8011148:	b289      	uxth	r1, r1
 801114a:	1c4f      	adds	r7, r1, #1
 801114c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011150:	1209      	asrs	r1, r1, #8
 8011152:	f802 1c02 	strb.w	r1, [r2, #-2]
 8011156:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801115a:	fb01 c10a 	mla	r1, r1, sl, ip
 801115e:	b289      	uxth	r1, r1
 8011160:	1c4f      	adds	r7, r1, #1
 8011162:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011166:	1209      	asrs	r1, r1, #8
 8011168:	f802 1c01 	strb.w	r1, [r2, #-1]
 801116c:	4611      	mov	r1, r2
 801116e:	e7d8      	b.n	8011122 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8011170:	191a      	adds	r2, r3, r4
 8011172:	4433      	add	r3, r6
 8011174:	b21b      	sxth	r3, r3
 8011176:	4293      	cmp	r3, r2
 8011178:	f340 80f9 	ble.w	801136e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801117c:	edd0 7a07 	vldr	s15, [r0, #28]
 8011180:	ee06 2a90 	vmov	s13, r2
 8011184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011188:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801118c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011194:	f340 80b0 	ble.w	80112f8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8011198:	ee06 3a10 	vmov	s12, r3
 801119c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80111a0:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8011374 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 80111a4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80111a8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80111ac:	ed90 6a08 	vldr	s12, [r0, #32]
 80111b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80111b8:	bfd6      	itet	le
 80111ba:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80111be:	469c      	movgt	ip, r3
 80111c0:	ee17 ca90 	vmovle	ip, s15
 80111c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c8:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8011378 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 80111cc:	ebac 0202 	sub.w	r2, ip, r2
 80111d0:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80111d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80111d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80111dc:	188c      	adds	r4, r1, r2
 80111de:	7c02      	ldrb	r2, [r0, #16]
 80111e0:	b1d2      	cbz	r2, 8011218 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80111e2:	2dff      	cmp	r5, #255	@ 0xff
 80111e4:	d118      	bne.n	8011218 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80111e6:	42a1      	cmp	r1, r4
 80111e8:	d261      	bcs.n	80112ae <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80111ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80111ee:	68c6      	ldr	r6, [r0, #12]
 80111f0:	3103      	adds	r1, #3
 80111f2:	ee17 7a10 	vmov	r7, s14
 80111f6:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 80111fa:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 80111fe:	f801 6c03 	strb.w	r6, [r1, #-3]
 8011202:	7856      	ldrb	r6, [r2, #1]
 8011204:	f801 6c02 	strb.w	r6, [r1, #-2]
 8011208:	7892      	ldrb	r2, [r2, #2]
 801120a:	f801 2c01 	strb.w	r2, [r1, #-1]
 801120e:	ed90 7a08 	vldr	s14, [r0, #32]
 8011212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011216:	e7e6      	b.n	80111e6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8011218:	68c2      	ldr	r2, [r0, #12]
 801121a:	428c      	cmp	r4, r1
 801121c:	f101 0e03 	add.w	lr, r1, #3
 8011220:	d945      	bls.n	80112ae <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8011222:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011226:	ee17 9a10 	vmov	r9, s14
 801122a:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801122e:	f898 7003 	ldrb.w	r7, [r8, #3]
 8011232:	fb07 f605 	mul.w	r6, r7, r5
 8011236:	1c77      	adds	r7, r6, #1
 8011238:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801123c:	123f      	asrs	r7, r7, #8
 801123e:	b2b9      	uxth	r1, r7
 8011240:	43ff      	mvns	r7, r7
 8011242:	b2fe      	uxtb	r6, r7
 8011244:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8011248:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 801124c:	fb19 f906 	smulbb	r9, r9, r6
 8011250:	fb07 9701 	mla	r7, r7, r1, r9
 8011254:	b2bf      	uxth	r7, r7
 8011256:	f107 0901 	add.w	r9, r7, #1
 801125a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801125e:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8011262:	fb19 f906 	smulbb	r9, r9, r6
 8011266:	123f      	asrs	r7, r7, #8
 8011268:	f80e 7c03 	strb.w	r7, [lr, #-3]
 801126c:	f898 7001 	ldrb.w	r7, [r8, #1]
 8011270:	fb07 9701 	mla	r7, r7, r1, r9
 8011274:	b2bf      	uxth	r7, r7
 8011276:	f107 0901 	add.w	r9, r7, #1
 801127a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801127e:	123f      	asrs	r7, r7, #8
 8011280:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8011284:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8011288:	f898 8002 	ldrb.w	r8, [r8, #2]
 801128c:	fb17 f606 	smulbb	r6, r7, r6
 8011290:	fb08 6601 	mla	r6, r8, r1, r6
 8011294:	b2b6      	uxth	r6, r6
 8011296:	1c71      	adds	r1, r6, #1
 8011298:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801129c:	4671      	mov	r1, lr
 801129e:	1236      	asrs	r6, r6, #8
 80112a0:	f80e 6c01 	strb.w	r6, [lr, #-1]
 80112a4:	ed90 7a08 	vldr	s14, [r0, #32]
 80112a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80112ac:	e7b5      	b.n	801121a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 80112ae:	4563      	cmp	r3, ip
 80112b0:	dd5d      	ble.n	801136e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80112b2:	edd0 7a08 	vldr	s15, [r0, #32]
 80112b6:	eba3 030c 	sub.w	r3, r3, ip
 80112ba:	68c4      	ldr	r4, [r0, #12]
 80112bc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80112c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80112c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80112c8:	7c00      	ldrb	r0, [r0, #16]
 80112ca:	440b      	add	r3, r1
 80112cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d0:	bfd8      	it	le
 80112d2:	2200      	movle	r2, #0
 80112d4:	58a2      	ldr	r2, [r4, r2]
 80112d6:	b2d4      	uxtb	r4, r2
 80112d8:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80112dc:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80112e0:	b160      	cbz	r0, 80112fc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80112e2:	2dff      	cmp	r5, #255	@ 0xff
 80112e4:	d10a      	bne.n	80112fc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80112e6:	4299      	cmp	r1, r3
 80112e8:	d241      	bcs.n	801136e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80112ea:	700c      	strb	r4, [r1, #0]
 80112ec:	3103      	adds	r1, #3
 80112ee:	f801 cc02 	strb.w	ip, [r1, #-2]
 80112f2:	f801 7c01 	strb.w	r7, [r1, #-1]
 80112f6:	e7f6      	b.n	80112e6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 80112f8:	4694      	mov	ip, r2
 80112fa:	e7da      	b.n	80112b2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 80112fc:	0e12      	lsrs	r2, r2, #24
 80112fe:	436a      	muls	r2, r5
 8011300:	1c55      	adds	r5, r2, #1
 8011302:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8011306:	122d      	asrs	r5, r5, #8
 8011308:	43ee      	mvns	r6, r5
 801130a:	b2ad      	uxth	r5, r5
 801130c:	fb14 f405 	smulbb	r4, r4, r5
 8011310:	b2f6      	uxtb	r6, r6
 8011312:	fb1c f005 	smulbb	r0, ip, r5
 8011316:	fb17 f505 	smulbb	r5, r7, r5
 801131a:	b2a4      	uxth	r4, r4
 801131c:	b280      	uxth	r0, r0
 801131e:	b2ad      	uxth	r5, r5
 8011320:	428b      	cmp	r3, r1
 8011322:	f101 0203 	add.w	r2, r1, #3
 8011326:	d922      	bls.n	801136e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011328:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801132c:	fb01 4106 	mla	r1, r1, r6, r4
 8011330:	b289      	uxth	r1, r1
 8011332:	1c4f      	adds	r7, r1, #1
 8011334:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011338:	1209      	asrs	r1, r1, #8
 801133a:	f802 1c03 	strb.w	r1, [r2, #-3]
 801133e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011342:	fb01 0106 	mla	r1, r1, r6, r0
 8011346:	b289      	uxth	r1, r1
 8011348:	1c4f      	adds	r7, r1, #1
 801134a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801134e:	1209      	asrs	r1, r1, #8
 8011350:	f802 1c02 	strb.w	r1, [r2, #-2]
 8011354:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011358:	fb01 5106 	mla	r1, r1, r6, r5
 801135c:	b289      	uxth	r1, r1
 801135e:	1c4f      	adds	r7, r1, #1
 8011360:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011364:	1209      	asrs	r1, r1, #8
 8011366:	f802 1c01 	strb.w	r1, [r2, #-1]
 801136a:	4611      	mov	r1, r2
 801136c:	e7d8      	b.n	8011320 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 801136e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011372:	bf00      	nop
 8011374:	447ffffe 	.word	0x447ffffe
 8011378:	00000000 	.word	0x00000000

0801137c <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 801137c:	4770      	bx	lr

0801137e <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801137e:	4770      	bx	lr

08011380 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8011380:	b510      	push	{r4, lr}
 8011382:	4604      	mov	r4, r0
 8011384:	2124      	movs	r1, #36	@ 0x24
 8011386:	f011 fa4c 	bl	8022822 <_ZdlPvj>
 801138a:	4620      	mov	r0, r4
 801138c:	bd10      	pop	{r4, pc}
	...

08011390 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8011390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011392:	6803      	ldr	r3, [r0, #0]
 8011394:	460d      	mov	r5, r1
 8011396:	4604      	mov	r4, r0
 8011398:	4601      	mov	r1, r0
 801139a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801139c:	a802      	add	r0, sp, #8
 801139e:	4798      	blx	r3
 80113a0:	6828      	ldr	r0, [r5, #0]
 80113a2:	6869      	ldr	r1, [r5, #4]
 80113a4:	466b      	mov	r3, sp
 80113a6:	c303      	stmia	r3!, {r0, r1}
 80113a8:	4668      	mov	r0, sp
 80113aa:	4619      	mov	r1, r3
 80113ac:	f7fd fc06 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 80113b0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80113b2:	b188      	cbz	r0, 80113d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80113b4:	6803      	ldr	r3, [r0, #0]
 80113b6:	1d21      	adds	r1, r4, #4
 80113b8:	68db      	ldr	r3, [r3, #12]
 80113ba:	4798      	blx	r3
 80113bc:	b160      	cbz	r0, 80113d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80113be:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	dd08      	ble.n	80113d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80113c6:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80113ca:	2d00      	cmp	r5, #0
 80113cc:	dd04      	ble.n	80113d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80113ce:	4a2b      	ldr	r2, [pc, #172]	@ (801147c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80113d0:	7812      	ldrb	r2, [r2, #0]
 80113d2:	b11a      	cbz	r2, 80113dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80113d4:	2a01      	cmp	r2, #1
 80113d6:	d029      	beq.n	801142c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80113d8:	b004      	add	sp, #16
 80113da:	bd70      	pop	{r4, r5, r6, pc}
 80113dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80113e0:	441d      	add	r5, r3
 80113e2:	b2ad      	uxth	r5, r5
 80113e4:	b22e      	sxth	r6, r5
 80113e6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80113ea:	42b3      	cmp	r3, r6
 80113ec:	daf4      	bge.n	80113d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80113ee:	6823      	ldr	r3, [r4, #0]
 80113f0:	4669      	mov	r1, sp
 80113f2:	4620      	mov	r0, r4
 80113f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113f6:	4798      	blx	r3
 80113f8:	b940      	cbnz	r0, 801140c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80113fa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d004      	beq.n	801140c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8011402:	3301      	adds	r3, #1
 8011404:	105b      	asrs	r3, r3, #1
 8011406:	f8ad 3006 	strh.w	r3, [sp, #6]
 801140a:	e7f0      	b.n	80113ee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801140c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011410:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011414:	4413      	add	r3, r2
 8011416:	b29b      	uxth	r3, r3
 8011418:	441a      	add	r2, r3
 801141a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801141e:	b212      	sxth	r2, r2
 8011420:	4296      	cmp	r6, r2
 8011422:	dae0      	bge.n	80113e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011424:	1aeb      	subs	r3, r5, r3
 8011426:	f8ad 3006 	strh.w	r3, [sp, #6]
 801142a:	e7dc      	b.n	80113e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801142c:	f8bd 5000 	ldrh.w	r5, [sp]
 8011430:	441d      	add	r5, r3
 8011432:	b2ad      	uxth	r5, r5
 8011434:	b22e      	sxth	r6, r5
 8011436:	f9bd 3000 	ldrsh.w	r3, [sp]
 801143a:	42b3      	cmp	r3, r6
 801143c:	dacc      	bge.n	80113d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801143e:	6823      	ldr	r3, [r4, #0]
 8011440:	4669      	mov	r1, sp
 8011442:	4620      	mov	r0, r4
 8011444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011446:	4798      	blx	r3
 8011448:	b940      	cbnz	r0, 801145c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801144a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801144e:	2b01      	cmp	r3, #1
 8011450:	d004      	beq.n	801145c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011452:	3301      	adds	r3, #1
 8011454:	105b      	asrs	r3, r3, #1
 8011456:	f8ad 3004 	strh.w	r3, [sp, #4]
 801145a:	e7f0      	b.n	801143e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801145c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011460:	f8bd 3000 	ldrh.w	r3, [sp]
 8011464:	4413      	add	r3, r2
 8011466:	b29b      	uxth	r3, r3
 8011468:	441a      	add	r2, r3
 801146a:	f8ad 3000 	strh.w	r3, [sp]
 801146e:	b212      	sxth	r2, r2
 8011470:	4296      	cmp	r6, r2
 8011472:	dae0      	bge.n	8011436 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011474:	1aeb      	subs	r3, r5, r3
 8011476:	f8ad 3004 	strh.w	r3, [sp, #4]
 801147a:	e7dc      	b.n	8011436 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801147c:	240251e8 	.word	0x240251e8

08011480 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8011480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011482:	6803      	ldr	r3, [r0, #0]
 8011484:	4604      	mov	r4, r0
 8011486:	4601      	mov	r1, r0
 8011488:	4668      	mov	r0, sp
 801148a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801148c:	4798      	blx	r3
 801148e:	2100      	movs	r1, #0
 8011490:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011494:	4668      	mov	r0, sp
 8011496:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801149a:	9102      	str	r1, [sp, #8]
 801149c:	a902      	add	r1, sp, #8
 801149e:	f8ad 200c 	strh.w	r2, [sp, #12]
 80114a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80114a6:	f7fd fb89 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 80114aa:	6823      	ldr	r3, [r4, #0]
 80114ac:	4669      	mov	r1, sp
 80114ae:	4620      	mov	r0, r4
 80114b0:	691b      	ldr	r3, [r3, #16]
 80114b2:	4798      	blx	r3
 80114b4:	b004      	add	sp, #16
 80114b6:	bd10      	pop	{r4, pc}

080114b8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80114b8:	2101      	movs	r1, #1
 80114ba:	2200      	movs	r2, #0
 80114bc:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80114c0:	490a      	ldr	r1, [pc, #40]	@ (80114ec <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80114c2:	8082      	strh	r2, [r0, #4]
 80114c4:	6001      	str	r1, [r0, #0]
 80114c6:	21ff      	movs	r1, #255	@ 0xff
 80114c8:	80c2      	strh	r2, [r0, #6]
 80114ca:	8102      	strh	r2, [r0, #8]
 80114cc:	8142      	strh	r2, [r0, #10]
 80114ce:	8182      	strh	r2, [r0, #12]
 80114d0:	81c2      	strh	r2, [r0, #14]
 80114d2:	8202      	strh	r2, [r0, #16]
 80114d4:	8242      	strh	r2, [r0, #18]
 80114d6:	61c2      	str	r2, [r0, #28]
 80114d8:	8402      	strh	r2, [r0, #32]
 80114da:	8442      	strh	r2, [r0, #34]	@ 0x22
 80114dc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80114e0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80114e4:	6282      	str	r2, [r0, #40]	@ 0x28
 80114e6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80114ea:	4770      	bx	lr
 80114ec:	08026b30 	.word	0x08026b30

080114f0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80114f0:	4b07      	ldr	r3, [pc, #28]	@ (8011510 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80114f2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80114f4:	881b      	ldrh	r3, [r3, #0]
 80114f6:	4293      	cmp	r3, r2
 80114f8:	bf81      	itttt	hi
 80114fa:	4b06      	ldrhi	r3, [pc, #24]	@ (8011514 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80114fc:	681b      	ldrhi	r3, [r3, #0]
 80114fe:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8011502:	7858      	ldrbhi	r0, [r3, #1]
 8011504:	bf8c      	ite	hi
 8011506:	f000 0003 	andhi.w	r0, r0, #3
 801150a:	2000      	movls	r0, #0
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop
 8011510:	2402524c 	.word	0x2402524c
 8011514:	24025248 	.word	0x24025248

08011518 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8011518:	4b11      	ldr	r3, [pc, #68]	@ (8011560 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801151e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011520:	4604      	mov	r4, r0
 8011522:	881b      	ldrh	r3, [r3, #0]
 8011524:	428b      	cmp	r3, r1
 8011526:	d918      	bls.n	801155a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8011528:	6803      	ldr	r3, [r0, #0]
 801152a:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 801152c:	4b0d      	ldr	r3, [pc, #52]	@ (8011564 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801152e:	6818      	ldr	r0, [r3, #0]
 8011530:	f7f2 ffe6 	bl	8004500 <_ZNK8touchgfx5Texts7getTextEt>
 8011534:	6823      	ldr	r3, [r4, #0]
 8011536:	4606      	mov	r6, r0
 8011538:	4620      	mov	r0, r4
 801153a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801153c:	4798      	blx	r3
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	4607      	mov	r7, r0
 8011542:	4620      	mov	r0, r4
 8011544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011548:	4798      	blx	r3
 801154a:	463a      	mov	r2, r7
 801154c:	4603      	mov	r3, r0
 801154e:	4631      	mov	r1, r6
 8011550:	4620      	mov	r0, r4
 8011552:	46ac      	mov	ip, r5
 8011554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011558:	4760      	bx	ip
 801155a:	2000      	movs	r0, #0
 801155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011560:	2402524c 	.word	0x2402524c
 8011564:	24025254 	.word	0x24025254

08011568 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8011568:	4b18      	ldr	r3, [pc, #96]	@ (80115cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801156a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801156e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011570:	4604      	mov	r4, r0
 8011572:	881b      	ldrh	r3, [r3, #0]
 8011574:	428b      	cmp	r3, r1
 8011576:	d926      	bls.n	80115c6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8011578:	4b15      	ldr	r3, [pc, #84]	@ (80115d0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8011580:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8011584:	4b13      	ldr	r3, [pc, #76]	@ (80115d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8011586:	7855      	ldrb	r5, [r2, #1]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801158e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011592:	6833      	ldr	r3, [r6, #0]
 8011594:	69df      	ldr	r7, [r3, #28]
 8011596:	4b10      	ldr	r3, [pc, #64]	@ (80115d8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8011598:	6818      	ldr	r0, [r3, #0]
 801159a:	f7f2 ffb1 	bl	8004500 <_ZNK8touchgfx5Texts7getTextEt>
 801159e:	6823      	ldr	r3, [r4, #0]
 80115a0:	4680      	mov	r8, r0
 80115a2:	4620      	mov	r0, r4
 80115a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80115a6:	4798      	blx	r3
 80115a8:	6823      	ldr	r3, [r4, #0]
 80115aa:	4681      	mov	r9, r0
 80115ac:	4620      	mov	r0, r4
 80115ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115b2:	4798      	blx	r3
 80115b4:	464b      	mov	r3, r9
 80115b6:	9000      	str	r0, [sp, #0]
 80115b8:	4642      	mov	r2, r8
 80115ba:	4629      	mov	r1, r5
 80115bc:	4630      	mov	r0, r6
 80115be:	47b8      	blx	r7
 80115c0:	b003      	add	sp, #12
 80115c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115c6:	2000      	movs	r0, #0
 80115c8:	e7fa      	b.n	80115c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80115ca:	bf00      	nop
 80115cc:	2402524c 	.word	0x2402524c
 80115d0:	24025248 	.word	0x24025248
 80115d4:	24025250 	.word	0x24025250
 80115d8:	24025254 	.word	0x24025254

080115dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80115dc:	b40e      	push	{r1, r2, r3}
 80115de:	4b30      	ldr	r3, [pc, #192]	@ (80116a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80115e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115e4:	881a      	ldrh	r2, [r3, #0]
 80115e6:	b09d      	sub	sp, #116	@ 0x74
 80115e8:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80115ea:	4604      	mov	r4, r0
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d954      	bls.n	801169a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80115f0:	aa26      	add	r2, sp, #152	@ 0x98
 80115f2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80116a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80115f6:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80116a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80115fa:	9202      	str	r2, [sp, #8]
 80115fc:	f8d9 2000 	ldr.w	r2, [r9]
 8011600:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011604:	f8d8 3000 	ldr.w	r3, [r8]
 8011608:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801160c:	682b      	ldr	r3, [r5, #0]
 801160e:	4628      	mov	r0, r5
 8011610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011612:	4798      	blx	r3
 8011614:	4606      	mov	r6, r0
 8011616:	b207      	sxth	r7, r0
 8011618:	a803      	add	r0, sp, #12
 801161a:	f004 fee1 	bl	80163e0 <_ZN8touchgfx12TextProviderC1Ev>
 801161e:	682b      	ldr	r3, [r5, #0]
 8011620:	4628      	mov	r0, r5
 8011622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011624:	4798      	blx	r3
 8011626:	682b      	ldr	r3, [r5, #0]
 8011628:	4682      	mov	sl, r0
 801162a:	4628      	mov	r0, r5
 801162c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801162e:	4798      	blx	r3
 8011630:	4653      	mov	r3, sl
 8011632:	9000      	str	r0, [sp, #0]
 8011634:	a803      	add	r0, sp, #12
 8011636:	9a02      	ldr	r2, [sp, #8]
 8011638:	9925      	ldr	r1, [sp, #148]	@ 0x94
 801163a:	f004 ff24 	bl	8016486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801163e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8011640:	f8d9 3000 	ldr.w	r3, [r9]
 8011644:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8011648:	8925      	ldrh	r5, [r4, #8]
 801164a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801164e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8011652:	eba5 050c 	sub.w	r5, r5, ip
 8011656:	784a      	ldrb	r2, [r1, #1]
 8011658:	f8d8 3000 	ldr.w	r3, [r8]
 801165c:	b22d      	sxth	r5, r5
 801165e:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8011662:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8011666:	9500      	str	r5, [sp, #0]
 8011668:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801166c:	a803      	add	r0, sp, #12
 801166e:	f002 f869 	bl	8013744 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8011672:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8011676:	b203      	sxth	r3, r0
 8011678:	18b9      	adds	r1, r7, r2
 801167a:	2900      	cmp	r1, #0
 801167c:	dd0b      	ble.n	8011696 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801167e:	3b01      	subs	r3, #1
 8011680:	fb13 f302 	smulbb	r3, r3, r2
 8011684:	fb16 3300 	smlabb	r3, r6, r0, r3
 8011688:	b21f      	sxth	r7, r3
 801168a:	4638      	mov	r0, r7
 801168c:	b01d      	add	sp, #116	@ 0x74
 801168e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011692:	b003      	add	sp, #12
 8011694:	4770      	bx	lr
 8011696:	2b00      	cmp	r3, #0
 8011698:	dcf7      	bgt.n	801168a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801169a:	2700      	movs	r7, #0
 801169c:	e7f5      	b.n	801168a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801169e:	bf00      	nop
 80116a0:	2402524c 	.word	0x2402524c
 80116a4:	24025248 	.word	0x24025248
 80116a8:	24025250 	.word	0x24025250

080116ac <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80116ac:	b570      	push	{r4, r5, r6, lr}
 80116ae:	6803      	ldr	r3, [r0, #0]
 80116b0:	4604      	mov	r4, r0
 80116b2:	4615      	mov	r5, r2
 80116b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116b6:	4798      	blx	r3
 80116b8:	6823      	ldr	r3, [r4, #0]
 80116ba:	4629      	mov	r1, r5
 80116bc:	4620      	mov	r0, r4
 80116be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116c4:	4718      	bx	r3
	...

080116c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80116c8:	b538      	push	{r3, r4, r5, lr}
 80116ca:	4b0e      	ldr	r3, [pc, #56]	@ (8011704 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80116cc:	4604      	mov	r4, r0
 80116ce:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80116d0:	881b      	ldrh	r3, [r3, #0]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d214      	bcs.n	8011700 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80116d6:	6803      	ldr	r3, [r0, #0]
 80116d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116da:	4798      	blx	r3
 80116dc:	6823      	ldr	r3, [r4, #0]
 80116de:	4605      	mov	r5, r0
 80116e0:	4620      	mov	r0, r4
 80116e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116e4:	4798      	blx	r3
 80116e6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80116ea:	b22d      	sxth	r5, r5
 80116ec:	4601      	mov	r1, r0
 80116ee:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80116f2:	bf06      	itte	eq
 80116f4:	4602      	moveq	r2, r0
 80116f6:	4629      	moveq	r1, r5
 80116f8:	462a      	movne	r2, r5
 80116fa:	4620      	mov	r0, r4
 80116fc:	f7ff ffd6 	bl	80116ac <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8011700:	bd38      	pop	{r3, r4, r5, pc}
 8011702:	bf00      	nop
 8011704:	2402524c 	.word	0x2402524c

08011708 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8011708:	b530      	push	{r4, r5, lr}
 801170a:	888b      	ldrh	r3, [r1, #4]
 801170c:	b085      	sub	sp, #20
 801170e:	4604      	mov	r4, r0
 8011710:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011712:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011716:	b923      	cbnz	r3, 8011722 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8011718:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801171c:	b90b      	cbnz	r3, 8011722 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801171e:	f7ff ffd3 	bl	80116c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8011722:	6823      	ldr	r3, [r4, #0]
 8011724:	466d      	mov	r5, sp
 8011726:	4621      	mov	r1, r4
 8011728:	343c      	adds	r4, #60	@ 0x3c
 801172a:	4628      	mov	r0, r5
 801172c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011730:	4798      	blx	r3
 8011732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801173a:	b005      	add	sp, #20
 801173c:	bd30      	pop	{r4, r5, pc}

0801173e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801173e:	2300      	movs	r3, #0
 8011740:	8083      	strh	r3, [r0, #4]
 8011742:	80c3      	strh	r3, [r0, #6]
 8011744:	8003      	strh	r3, [r0, #0]
 8011746:	8043      	strh	r3, [r0, #2]
 8011748:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801174c:	2bff      	cmp	r3, #255	@ 0xff
 801174e:	bf01      	itttt	eq
 8011750:	890b      	ldrheq	r3, [r1, #8]
 8011752:	8083      	strheq	r3, [r0, #4]
 8011754:	894b      	ldrheq	r3, [r1, #10]
 8011756:	80c3      	strheq	r3, [r0, #6]
 8011758:	4770      	bx	lr
	...

0801175c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801175c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801175e:	4604      	mov	r4, r0
 8011760:	466b      	mov	r3, sp
 8011762:	6808      	ldr	r0, [r1, #0]
 8011764:	6849      	ldr	r1, [r1, #4]
 8011766:	c303      	stmia	r3!, {r0, r1}
 8011768:	6823      	ldr	r3, [r4, #0]
 801176a:	4669      	mov	r1, sp
 801176c:	4620      	mov	r0, r4
 801176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011770:	4798      	blx	r3
 8011772:	4b08      	ldr	r3, [pc, #32]	@ (8011794 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801177a:	b10a      	cbz	r2, 8011780 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801177c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801177e:	b900      	cbnz	r0, 8011782 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011780:	6898      	ldr	r0, [r3, #8]
 8011782:	6803      	ldr	r3, [r0, #0]
 8011784:	4669      	mov	r1, sp
 8011786:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011788:	6a1d      	ldr	r5, [r3, #32]
 801178a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801178e:	47a8      	blx	r5
 8011790:	b003      	add	sp, #12
 8011792:	bd30      	pop	{r4, r5, pc}
 8011794:	240251f0 	.word	0x240251f0

08011798 <_ZN8touchgfx3BoxD1Ev>:
 8011798:	4770      	bx	lr

0801179a <_ZN8touchgfx3BoxD0Ev>:
 801179a:	b510      	push	{r4, lr}
 801179c:	4604      	mov	r4, r0
 801179e:	212c      	movs	r1, #44	@ 0x2c
 80117a0:	f011 f83f 	bl	8022822 <_ZdlPvj>
 80117a4:	4620      	mov	r0, r4
 80117a6:	bd10      	pop	{r4, pc}

080117a8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80117a8:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80117ac:	b12a      	cbz	r2, 80117ba <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80117ae:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80117b2:	b112      	cbz	r2, 80117ba <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80117b4:	6803      	ldr	r3, [r0, #0]
 80117b6:	695b      	ldr	r3, [r3, #20]
 80117b8:	4718      	bx	r3
 80117ba:	4770      	bx	lr

080117bc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80117bc:	4b30      	ldr	r3, [pc, #192]	@ (8011880 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80117be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117c2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80117c4:	b08d      	sub	sp, #52	@ 0x34
 80117c6:	881b      	ldrh	r3, [r3, #0]
 80117c8:	4604      	mov	r4, r0
 80117ca:	460f      	mov	r7, r1
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d954      	bls.n	801187a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80117d0:	4b2c      	ldr	r3, [pc, #176]	@ (8011884 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80117d2:	6819      	ldr	r1, [r3, #0]
 80117d4:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80117d8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80117dc:	4a2a      	ldr	r2, [pc, #168]	@ (8011888 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80117de:	6812      	ldr	r2, [r2, #0]
 80117e0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80117e4:	2900      	cmp	r1, #0
 80117e6:	d048      	beq.n	801187a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80117e8:	785a      	ldrb	r2, [r3, #1]
 80117ea:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80117ee:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80117f2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80117f6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80117fa:	4b24      	ldr	r3, [pc, #144]	@ (801188c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80117fc:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8011806:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 801180a:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 801180e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011810:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8011814:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8011818:	9107      	str	r1, [sp, #28]
 801181a:	f88d 8020 	strb.w	r8, [sp, #32]
 801181e:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8011822:	9609      	str	r6, [sp, #36]	@ 0x24
 8011824:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8011828:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 801182c:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8011830:	b10b      	cbz	r3, 8011836 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8011832:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8011834:	b905      	cbnz	r5, 8011838 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8011836:	6895      	ldr	r5, [r2, #8]
 8011838:	ae05      	add	r6, sp, #20
 801183a:	4621      	mov	r1, r4
 801183c:	4630      	mov	r0, r6
 801183e:	f003 fe67 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011842:	4b13      	ldr	r3, [pc, #76]	@ (8011890 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8011844:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8011846:	6818      	ldr	r0, [r3, #0]
 8011848:	f7f2 fe5a 	bl	8004500 <_ZNK8touchgfx5Texts7getTextEt>
 801184c:	6823      	ldr	r3, [r4, #0]
 801184e:	4680      	mov	r8, r0
 8011850:	4620      	mov	r0, r4
 8011852:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011854:	4798      	blx	r3
 8011856:	6823      	ldr	r3, [r4, #0]
 8011858:	4681      	mov	r9, r0
 801185a:	4620      	mov	r0, r4
 801185c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011860:	4798      	blx	r3
 8011862:	ab07      	add	r3, sp, #28
 8011864:	f8cd 8004 	str.w	r8, [sp, #4]
 8011868:	9300      	str	r3, [sp, #0]
 801186a:	463b      	mov	r3, r7
 801186c:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8011870:	4628      	mov	r0, r5
 8011872:	e896 0006 	ldmia.w	r6, {r1, r2}
 8011876:	f7f2 fdf5 	bl	8004464 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801187a:	b00d      	add	sp, #52	@ 0x34
 801187c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011880:	2402524c 	.word	0x2402524c
 8011884:	24025248 	.word	0x24025248
 8011888:	24025250 	.word	0x24025250
 801188c:	240251f0 	.word	0x240251f0
 8011890:	24025254 	.word	0x24025254

08011894 <_ZN8touchgfx5ImageD1Ev>:
 8011894:	4770      	bx	lr

08011896 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011896:	b570      	push	{r4, r5, r6, lr}
 8011898:	880b      	ldrh	r3, [r1, #0]
 801189a:	460d      	mov	r5, r1
 801189c:	4604      	mov	r4, r0
 801189e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80118a0:	4608      	mov	r0, r1
 80118a2:	f006 f9fb 	bl	8017c9c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80118a6:	4606      	mov	r6, r0
 80118a8:	4628      	mov	r0, r5
 80118aa:	f006 fa2b 	bl	8017d04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80118ae:	6823      	ldr	r3, [r4, #0]
 80118b0:	4605      	mov	r5, r0
 80118b2:	4631      	mov	r1, r6
 80118b4:	4620      	mov	r0, r4
 80118b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118b8:	4798      	blx	r3
 80118ba:	6823      	ldr	r3, [r4, #0]
 80118bc:	4629      	mov	r1, r5
 80118be:	4620      	mov	r0, r4
 80118c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118c6:	4718      	bx	r3

080118c8 <_ZN8touchgfx5ImageD0Ev>:
 80118c8:	b510      	push	{r4, lr}
 80118ca:	4604      	mov	r4, r0
 80118cc:	212c      	movs	r1, #44	@ 0x2c
 80118ce:	f010 ffa8 	bl	8022822 <_ZdlPvj>
 80118d2:	4620      	mov	r0, r4
 80118d4:	bd10      	pop	{r4, pc}

080118d6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80118d6:	b510      	push	{r4, lr}
 80118d8:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80118dc:	4604      	mov	r4, r0
 80118de:	2bff      	cmp	r3, #255	@ 0xff
 80118e0:	d006      	beq.n	80118f0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80118e2:	2300      	movs	r3, #0
 80118e4:	8003      	strh	r3, [r0, #0]
 80118e6:	8043      	strh	r3, [r0, #2]
 80118e8:	8083      	strh	r3, [r0, #4]
 80118ea:	80c3      	strh	r3, [r0, #6]
 80118ec:	4620      	mov	r0, r4
 80118ee:	bd10      	pop	{r4, pc}
 80118f0:	3126      	adds	r1, #38	@ 0x26
 80118f2:	f006 fa3b 	bl	8017d6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80118f6:	e7f9      	b.n	80118ec <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080118f8 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80118f8:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 80118fc:	b12a      	cbz	r2, 801190a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80118fe:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011902:	b112      	cbz	r2, 801190a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8011904:	6803      	ldr	r3, [r0, #0]
 8011906:	695b      	ldr	r3, [r3, #20]
 8011908:	4718      	bx	r3
 801190a:	4770      	bx	lr

0801190c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801190c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011910:	4604      	mov	r4, r0
 8011912:	b088      	sub	sp, #32
 8011914:	2500      	movs	r5, #0
 8011916:	460f      	mov	r7, r1
 8011918:	f854 3b26 	ldr.w	r3, [r4], #38
 801191c:	a904      	add	r1, sp, #16
 801191e:	4606      	mov	r6, r0
 8011920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011922:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011926:	4798      	blx	r3
 8011928:	4620      	mov	r0, r4
 801192a:	f006 f9b7 	bl	8017c9c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801192e:	4680      	mov	r8, r0
 8011930:	4620      	mov	r0, r4
 8011932:	f006 f9e7 	bl	8017d04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011936:	9506      	str	r5, [sp, #24]
 8011938:	ad06      	add	r5, sp, #24
 801193a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801193e:	4639      	mov	r1, r7
 8011940:	f8ad 801c 	strh.w	r8, [sp, #28]
 8011944:	4628      	mov	r0, r5
 8011946:	f7fd f939 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 801194a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801194e:	2b00      	cmp	r3, #0
 8011950:	dd19      	ble.n	8011986 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011952:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011956:	2b00      	cmp	r3, #0
 8011958:	dd15      	ble.n	8011986 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801195a:	4b0c      	ldr	r3, [pc, #48]	@ (801198c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011962:	b10a      	cbz	r2, 8011968 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8011964:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011966:	b900      	cbnz	r0, 801196a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8011968:	6898      	ldr	r0, [r3, #8]
 801196a:	2701      	movs	r7, #1
 801196c:	6801      	ldr	r1, [r0, #0]
 801196e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011972:	9702      	str	r7, [sp, #8]
 8011974:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8011978:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801197c:	e9cd 5600 	strd	r5, r6, [sp]
 8011980:	688d      	ldr	r5, [r1, #8]
 8011982:	4621      	mov	r1, r4
 8011984:	47a8      	blx	r5
 8011986:	b008      	add	sp, #32
 8011988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801198c:	240251f0 	.word	0x240251f0

08011990 <_ZN8touchgfx7OutlineD1Ev>:
 8011990:	4770      	bx	lr

08011992 <_ZN8touchgfx7OutlineD0Ev>:
 8011992:	b510      	push	{r4, lr}
 8011994:	4604      	mov	r4, r0
 8011996:	2130      	movs	r1, #48	@ 0x30
 8011998:	f010 ff43 	bl	8022822 <_ZdlPvj>
 801199c:	4620      	mov	r0, r4
 801199e:	bd10      	pop	{r4, pc}

080119a0 <_ZN8touchgfx7Outline5resetEv>:
 80119a0:	b510      	push	{r4, lr}
 80119a2:	4604      	mov	r4, r0
 80119a4:	f000 fe72 	bl	801268c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80119a8:	60e0      	str	r0, [r4, #12]
 80119aa:	f000 fe75 	bl	8012698 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80119ae:	68e3      	ldr	r3, [r4, #12]
 80119b0:	08c0      	lsrs	r0, r0, #3
 80119b2:	2200      	movs	r2, #0
 80119b4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80119b8:	6123      	str	r3, [r4, #16]
 80119ba:	3801      	subs	r0, #1
 80119bc:	60a2      	str	r2, [r4, #8]
 80119be:	6060      	str	r0, [r4, #4]
 80119c0:	8019      	strh	r1, [r3, #0]
 80119c2:	8059      	strh	r1, [r3, #2]
 80119c4:	809a      	strh	r2, [r3, #4]
 80119c6:	80da      	strh	r2, [r3, #6]
 80119c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80119ca:	f023 0301 	bic.w	r3, r3, #1
 80119ce:	f043 0302 	orr.w	r3, r3, #2
 80119d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80119d4:	bd10      	pop	{r4, pc}
	...

080119d8 <_ZN8touchgfx7OutlineC1Ev>:
 80119d8:	4b0a      	ldr	r3, [pc, #40]	@ (8011a04 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80119da:	b510      	push	{r4, lr}
 80119dc:	6003      	str	r3, [r0, #0]
 80119de:	2300      	movs	r3, #0
 80119e0:	4604      	mov	r4, r0
 80119e2:	6243      	str	r3, [r0, #36]	@ 0x24
 80119e4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80119e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80119ec:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80119f0:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80119f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80119f8:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80119fc:	f7ff ffd0 	bl	80119a0 <_ZN8touchgfx7Outline5resetEv>
 8011a00:	4620      	mov	r0, r4
 8011a02:	bd10      	pop	{r4, pc}
 8011a04:	08026c7c 	.word	0x08026c7c

08011a08 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8011a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a0c:	b093      	sub	sp, #76	@ 0x4c
 8011a0e:	1156      	asrs	r6, r2, #5
 8011a10:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8011a12:	9305      	str	r3, [sp, #20]
 8011a14:	1153      	asrs	r3, r2, #5
 8011a16:	f004 051f 	and.w	r5, r4, #31
 8011a1a:	9303      	str	r3, [sp, #12]
 8011a1c:	1163      	asrs	r3, r4, #5
 8011a1e:	9504      	str	r5, [sp, #16]
 8011a20:	1165      	asrs	r5, r4, #5
 8011a22:	9306      	str	r3, [sp, #24]
 8011a24:	f002 031f 	and.w	r3, r2, #31
 8011a28:	42ae      	cmp	r6, r5
 8011a2a:	f040 80f4 	bne.w	8011c16 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8011a2e:	9c04      	ldr	r4, [sp, #16]
 8011a30:	9a05      	ldr	r2, [sp, #20]
 8011a32:	42a3      	cmp	r3, r4
 8011a34:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8011a38:	6902      	ldr	r2, [r0, #16]
 8011a3a:	d125      	bne.n	8011a88 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8011a3c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8011a40:	459e      	cmp	lr, r3
 8011a42:	d103      	bne.n	8011a4c <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8011a44:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8011a48:	429e      	cmp	r6, r3
 8011a4a:	d035      	beq.n	8011ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011a4c:	88d1      	ldrh	r1, [r2, #6]
 8011a4e:	8893      	ldrh	r3, [r2, #4]
 8011a50:	430b      	orrs	r3, r1
 8011a52:	d010      	beq.n	8011a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011a54:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	db0c      	blt.n	8011a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011a5c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011a5e:	428b      	cmp	r3, r1
 8011a60:	da09      	bge.n	8011a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011a62:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011a66:	428b      	cmp	r3, r1
 8011a68:	f103 0301 	add.w	r3, r3, #1
 8011a6c:	bf38      	it	cc
 8011a6e:	3208      	addcc	r2, #8
 8011a70:	6083      	str	r3, [r0, #8]
 8011a72:	bf38      	it	cc
 8011a74:	6102      	strcc	r2, [r0, #16]
 8011a76:	6903      	ldr	r3, [r0, #16]
 8011a78:	9a03      	ldr	r2, [sp, #12]
 8011a7a:	f8a3 e000 	strh.w	lr, [r3]
 8011a7e:	805a      	strh	r2, [r3, #2]
 8011a80:	2200      	movs	r2, #0
 8011a82:	809a      	strh	r2, [r3, #4]
 8011a84:	80da      	strh	r2, [r3, #6]
 8011a86:	e017      	b.n	8011ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011a88:	9c05      	ldr	r4, [sp, #20]
 8011a8a:	114e      	asrs	r6, r1, #5
 8011a8c:	f001 0c1f 	and.w	ip, r1, #31
 8011a90:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8011a94:	f004 041f 	and.w	r4, r4, #31
 8011a98:	4576      	cmp	r6, lr
 8011a9a:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8011a9e:	9402      	str	r4, [sp, #8]
 8011aa0:	9c04      	ldr	r4, [sp, #16]
 8011aa2:	eba4 0403 	sub.w	r4, r4, r3
 8011aa6:	d10a      	bne.n	8011abe <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8011aa8:	9b02      	ldr	r3, [sp, #8]
 8011aaa:	44a0      	add	r8, r4
 8011aac:	449c      	add	ip, r3
 8011aae:	f8a2 8004 	strh.w	r8, [r2, #4]
 8011ab2:	fb04 a40c 	mla	r4, r4, ip, sl
 8011ab6:	80d4      	strh	r4, [r2, #6]
 8011ab8:	b013      	add	sp, #76	@ 0x4c
 8011aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011abe:	9d05      	ldr	r5, [sp, #20]
 8011ac0:	1a69      	subs	r1, r5, r1
 8011ac2:	bf51      	iteee	pl
 8011ac4:	f1cc 0520 	rsbpl	r5, ip, #32
 8011ac8:	fb04 f40c 	mulmi.w	r4, r4, ip
 8011acc:	4249      	negmi	r1, r1
 8011ace:	2500      	movmi	r5, #0
 8011ad0:	bf5d      	ittte	pl
 8011ad2:	436c      	mulpl	r4, r5
 8011ad4:	2520      	movpl	r5, #32
 8011ad6:	f04f 0901 	movpl.w	r9, #1
 8011ada:	f04f 39ff 	movmi.w	r9, #4294967295
 8011ade:	9501      	str	r5, [sp, #4]
 8011ae0:	9f01      	ldr	r7, [sp, #4]
 8011ae2:	444e      	add	r6, r9
 8011ae4:	fb94 f5f1 	sdiv	r5, r4, r1
 8011ae8:	fb01 4415 	mls	r4, r1, r5, r4
 8011aec:	44bc      	add	ip, r7
 8011aee:	2c00      	cmp	r4, #0
 8011af0:	bfbc      	itt	lt
 8011af2:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8011af6:	1864      	addlt	r4, r4, r1
 8011af8:	44a8      	add	r8, r5
 8011afa:	fb05 ac0c 	mla	ip, r5, ip, sl
 8011afe:	f8a2 8004 	strh.w	r8, [r2, #4]
 8011b02:	f8a2 c006 	strh.w	ip, [r2, #6]
 8011b06:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011b0a:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8011b0e:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8011b12:	ea58 0202 	orrs.w	r2, r8, r2
 8011b16:	d011      	beq.n	8011b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011b18:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011b1c:	f1b8 0f00 	cmp.w	r8, #0
 8011b20:	db0c      	blt.n	8011b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011b22:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011b24:	4590      	cmp	r8, r2
 8011b26:	da09      	bge.n	8011b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011b28:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8011b2c:	4590      	cmp	r8, r2
 8011b2e:	bf3c      	itt	cc
 8011b30:	f10c 0208 	addcc.w	r2, ip, #8
 8011b34:	6102      	strcc	r2, [r0, #16]
 8011b36:	f108 0201 	add.w	r2, r8, #1
 8011b3a:	6082      	str	r2, [r0, #8]
 8011b3c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011b40:	2700      	movs	r7, #0
 8011b42:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011b46:	45b6      	cmp	lr, r6
 8011b48:	f8ac 6000 	strh.w	r6, [ip]
 8011b4c:	442b      	add	r3, r5
 8011b4e:	f8ac 2002 	strh.w	r2, [ip, #2]
 8011b52:	f8ac 7004 	strh.w	r7, [ip, #4]
 8011b56:	f8ac 7006 	strh.w	r7, [ip, #6]
 8011b5a:	d04b      	beq.n	8011bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8011b5c:	9f04      	ldr	r7, [sp, #16]
 8011b5e:	1a64      	subs	r4, r4, r1
 8011b60:	f04f 0a00 	mov.w	sl, #0
 8011b64:	1aff      	subs	r7, r7, r3
 8011b66:	443d      	add	r5, r7
 8011b68:	016d      	lsls	r5, r5, #5
 8011b6a:	fb95 f8f1 	sdiv	r8, r5, r1
 8011b6e:	fb01 5518 	mls	r5, r1, r8, r5
 8011b72:	2d00      	cmp	r5, #0
 8011b74:	bfbc      	itt	lt
 8011b76:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011b7a:	186d      	addlt	r5, r5, r1
 8011b7c:	f108 0701 	add.w	r7, r8, #1
 8011b80:	9703      	str	r7, [sp, #12]
 8011b82:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011b86:	1964      	adds	r4, r4, r5
 8011b88:	444e      	add	r6, r9
 8011b8a:	bf54      	ite	pl
 8011b8c:	9f03      	ldrpl	r7, [sp, #12]
 8011b8e:	4647      	movmi	r7, r8
 8011b90:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8011b94:	bf58      	it	pl
 8011b96:	1a64      	subpl	r4, r4, r1
 8011b98:	443b      	add	r3, r7
 8011b9a:	44bb      	add	fp, r7
 8011b9c:	f8ac b004 	strh.w	fp, [ip, #4]
 8011ba0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011ba4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011ba8:	f8ac b006 	strh.w	fp, [ip, #6]
 8011bac:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011bb0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011bb4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011bb8:	ea5b 0707 	orrs.w	r7, fp, r7
 8011bbc:	d011      	beq.n	8011be2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011bbe:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8011bc2:	f1bb 0f00 	cmp.w	fp, #0
 8011bc6:	db0c      	blt.n	8011be2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011bc8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011bca:	45bb      	cmp	fp, r7
 8011bcc:	da09      	bge.n	8011be2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011bce:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8011bd2:	45bb      	cmp	fp, r7
 8011bd4:	bf3c      	itt	cc
 8011bd6:	f10c 0708 	addcc.w	r7, ip, #8
 8011bda:	6107      	strcc	r7, [r0, #16]
 8011bdc:	f10b 0701 	add.w	r7, fp, #1
 8011be0:	6087      	str	r7, [r0, #8]
 8011be2:	6907      	ldr	r7, [r0, #16]
 8011be4:	45b6      	cmp	lr, r6
 8011be6:	803e      	strh	r6, [r7, #0]
 8011be8:	807a      	strh	r2, [r7, #2]
 8011bea:	f8a7 a004 	strh.w	sl, [r7, #4]
 8011bee:	f8a7 a006 	strh.w	sl, [r7, #6]
 8011bf2:	d1c6      	bne.n	8011b82 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8011bf4:	9a04      	ldr	r2, [sp, #16]
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	6902      	ldr	r2, [r0, #16]
 8011bfa:	8891      	ldrh	r1, [r2, #4]
 8011bfc:	88d6      	ldrh	r6, [r2, #6]
 8011bfe:	4419      	add	r1, r3
 8011c00:	8091      	strh	r1, [r2, #4]
 8011c02:	9902      	ldr	r1, [sp, #8]
 8011c04:	f101 0c20 	add.w	ip, r1, #32
 8011c08:	9901      	ldr	r1, [sp, #4]
 8011c0a:	ebac 0c01 	sub.w	ip, ip, r1
 8011c0e:	fb03 630c 	mla	r3, r3, ip, r6
 8011c12:	80d3      	strh	r3, [r2, #6]
 8011c14:	e750      	b.n	8011ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011c16:	9d05      	ldr	r5, [sp, #20]
 8011c18:	1aa2      	subs	r2, r4, r2
 8011c1a:	eba5 0501 	sub.w	r5, r5, r1
 8011c1e:	9202      	str	r2, [sp, #8]
 8011c20:	9508      	str	r5, [sp, #32]
 8011c22:	f140 8128 	bpl.w	8011e76 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8011c26:	9a03      	ldr	r2, [sp, #12]
 8011c28:	2a00      	cmp	r2, #0
 8011c2a:	f6ff af45 	blt.w	8011ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011c2e:	9a02      	ldr	r2, [sp, #8]
 8011c30:	f04f 34ff 	mov.w	r4, #4294967295
 8011c34:	4252      	negs	r2, r2
 8011c36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011c38:	2400      	movs	r4, #0
 8011c3a:	9202      	str	r2, [sp, #8]
 8011c3c:	9a06      	ldr	r2, [sp, #24]
 8011c3e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8011c42:	9206      	str	r2, [sp, #24]
 8011c44:	462a      	mov	r2, r5
 8011c46:	435a      	muls	r2, r3
 8011c48:	9401      	str	r4, [sp, #4]
 8011c4a:	9c02      	ldr	r4, [sp, #8]
 8011c4c:	9d02      	ldr	r5, [sp, #8]
 8011c4e:	fb92 f4f4 	sdiv	r4, r2, r4
 8011c52:	fb05 2214 	mls	r2, r5, r4, r2
 8011c56:	2a00      	cmp	r2, #0
 8011c58:	9207      	str	r2, [sp, #28]
 8011c5a:	bfbc      	itt	lt
 8011c5c:	1952      	addlt	r2, r2, r5
 8011c5e:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8011c62:	6905      	ldr	r5, [r0, #16]
 8011c64:	bfb8      	it	lt
 8011c66:	9207      	strlt	r2, [sp, #28]
 8011c68:	eb04 0901 	add.w	r9, r4, r1
 8011c6c:	9a01      	ldr	r2, [sp, #4]
 8011c6e:	ea4f 1669 	mov.w	r6, r9, asr #5
 8011c72:	429a      	cmp	r2, r3
 8011c74:	f040 8111 	bne.w	8011e9a <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8011c78:	f9b5 3000 	ldrsh.w	r3, [r5]
 8011c7c:	429e      	cmp	r6, r3
 8011c7e:	d104      	bne.n	8011c8a <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8011c80:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011c84:	9a03      	ldr	r2, [sp, #12]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d01b      	beq.n	8011cc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011c8a:	88ea      	ldrh	r2, [r5, #6]
 8011c8c:	88ab      	ldrh	r3, [r5, #4]
 8011c8e:	4313      	orrs	r3, r2
 8011c90:	d010      	beq.n	8011cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011c92:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011c96:	2a00      	cmp	r2, #0
 8011c98:	db0c      	blt.n	8011cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011c9a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	da09      	bge.n	8011cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011ca0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	f102 0201 	add.w	r2, r2, #1
 8011caa:	bf38      	it	cc
 8011cac:	3508      	addcc	r5, #8
 8011cae:	6082      	str	r2, [r0, #8]
 8011cb0:	bf38      	it	cc
 8011cb2:	6105      	strcc	r5, [r0, #16]
 8011cb4:	6903      	ldr	r3, [r0, #16]
 8011cb6:	9a03      	ldr	r2, [sp, #12]
 8011cb8:	801e      	strh	r6, [r3, #0]
 8011cba:	805a      	strh	r2, [r3, #2]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	809a      	strh	r2, [r3, #4]
 8011cc0:	80da      	strh	r2, [r3, #6]
 8011cc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011cc4:	9a03      	ldr	r2, [sp, #12]
 8011cc6:	6901      	ldr	r1, [r0, #16]
 8011cc8:	441a      	add	r2, r3
 8011cca:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011cce:	42b3      	cmp	r3, r6
 8011cd0:	d103      	bne.n	8011cda <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8011cd2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d01a      	beq.n	8011d10 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8011cda:	88cc      	ldrh	r4, [r1, #6]
 8011cdc:	888b      	ldrh	r3, [r1, #4]
 8011cde:	4323      	orrs	r3, r4
 8011ce0:	d010      	beq.n	8011d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011ce2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011ce6:	2c00      	cmp	r4, #0
 8011ce8:	db0c      	blt.n	8011d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011cea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011cec:	429c      	cmp	r4, r3
 8011cee:	da09      	bge.n	8011d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011cf0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011cf4:	429c      	cmp	r4, r3
 8011cf6:	f104 0401 	add.w	r4, r4, #1
 8011cfa:	bf38      	it	cc
 8011cfc:	3108      	addcc	r1, #8
 8011cfe:	6084      	str	r4, [r0, #8]
 8011d00:	bf38      	it	cc
 8011d02:	6101      	strcc	r1, [r0, #16]
 8011d04:	6903      	ldr	r3, [r0, #16]
 8011d06:	2100      	movs	r1, #0
 8011d08:	801e      	strh	r6, [r3, #0]
 8011d0a:	805a      	strh	r2, [r3, #2]
 8011d0c:	8099      	strh	r1, [r3, #4]
 8011d0e:	80d9      	strh	r1, [r3, #6]
 8011d10:	9b06      	ldr	r3, [sp, #24]
 8011d12:	4293      	cmp	r3, r2
 8011d14:	f000 8082 	beq.w	8011e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8011d18:	9b08      	ldr	r3, [sp, #32]
 8011d1a:	9902      	ldr	r1, [sp, #8]
 8011d1c:	015b      	lsls	r3, r3, #5
 8011d1e:	9c02      	ldr	r4, [sp, #8]
 8011d20:	fb93 f1f1 	sdiv	r1, r3, r1
 8011d24:	fb04 3311 	mls	r3, r4, r1, r3
 8011d28:	9103      	str	r1, [sp, #12]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	9308      	str	r3, [sp, #32]
 8011d2e:	da04      	bge.n	8011d3a <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8011d30:	1e4b      	subs	r3, r1, #1
 8011d32:	9303      	str	r3, [sp, #12]
 8011d34:	9b08      	ldr	r3, [sp, #32]
 8011d36:	4423      	add	r3, r4
 8011d38:	9308      	str	r3, [sp, #32]
 8011d3a:	9b07      	ldr	r3, [sp, #28]
 8011d3c:	464f      	mov	r7, r9
 8011d3e:	9902      	ldr	r1, [sp, #8]
 8011d40:	2600      	movs	r6, #0
 8011d42:	1a5b      	subs	r3, r3, r1
 8011d44:	9307      	str	r3, [sp, #28]
 8011d46:	9b01      	ldr	r3, [sp, #4]
 8011d48:	f1c3 0320 	rsb	r3, r3, #32
 8011d4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8011d4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011d50:	9b01      	ldr	r3, [sp, #4]
 8011d52:	1a5b      	subs	r3, r3, r1
 8011d54:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d56:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8011d5a:	185b      	adds	r3, r3, r1
 8011d5c:	bf58      	it	pl
 8011d5e:	9902      	ldrpl	r1, [sp, #8]
 8011d60:	9307      	str	r3, [sp, #28]
 8011d62:	bf57      	itett	pl
 8011d64:	1a5b      	subpl	r3, r3, r1
 8011d66:	9903      	ldrmi	r1, [sp, #12]
 8011d68:	9307      	strpl	r3, [sp, #28]
 8011d6a:	9b03      	ldrpl	r3, [sp, #12]
 8011d6c:	bf58      	it	pl
 8011d6e:	1c59      	addpl	r1, r3, #1
 8011d70:	2a00      	cmp	r2, #0
 8011d72:	4489      	add	r9, r1
 8011d74:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8011d78:	db2e      	blt.n	8011dd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011d7a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011d7c:	4293      	cmp	r3, r2
 8011d7e:	dd2b      	ble.n	8011dd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011d80:	9c01      	ldr	r4, [sp, #4]
 8011d82:	6905      	ldr	r5, [r0, #16]
 8011d84:	46a0      	mov	r8, r4
 8011d86:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8011d88:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8011d8c:	45a0      	cmp	r8, r4
 8011d8e:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8011d92:	f040 814c 	bne.w	801202e <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8011d96:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011d9a:	4551      	cmp	r1, sl
 8011d9c:	d103      	bne.n	8011da6 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8011d9e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011da2:	4291      	cmp	r1, r2
 8011da4:	d018      	beq.n	8011dd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011da6:	ea5c 010e 	orrs.w	r1, ip, lr
 8011daa:	d00f      	beq.n	8011dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011dac:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011db0:	2900      	cmp	r1, #0
 8011db2:	db0b      	blt.n	8011dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011db4:	428b      	cmp	r3, r1
 8011db6:	dd09      	ble.n	8011dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011db8:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8011dbc:	4299      	cmp	r1, r3
 8011dbe:	f101 0101 	add.w	r1, r1, #1
 8011dc2:	bf38      	it	cc
 8011dc4:	3508      	addcc	r5, #8
 8011dc6:	6081      	str	r1, [r0, #8]
 8011dc8:	bf38      	it	cc
 8011dca:	6105      	strcc	r5, [r0, #16]
 8011dcc:	6903      	ldr	r3, [r0, #16]
 8011dce:	f8a3 a000 	strh.w	sl, [r3]
 8011dd2:	805a      	strh	r2, [r3, #2]
 8011dd4:	809e      	strh	r6, [r3, #4]
 8011dd6:	80de      	strh	r6, [r3, #6]
 8011dd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011dda:	6901      	ldr	r1, [r0, #16]
 8011ddc:	441a      	add	r2, r3
 8011dde:	88cc      	ldrh	r4, [r1, #6]
 8011de0:	888b      	ldrh	r3, [r1, #4]
 8011de2:	4323      	orrs	r3, r4
 8011de4:	d010      	beq.n	8011e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011de6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011dea:	2c00      	cmp	r4, #0
 8011dec:	db0c      	blt.n	8011e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011dee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011df0:	429c      	cmp	r4, r3
 8011df2:	da09      	bge.n	8011e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011df4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011df8:	429c      	cmp	r4, r3
 8011dfa:	f104 0401 	add.w	r4, r4, #1
 8011dfe:	bf38      	it	cc
 8011e00:	3108      	addcc	r1, #8
 8011e02:	6084      	str	r4, [r0, #8]
 8011e04:	bf38      	it	cc
 8011e06:	6101      	strcc	r1, [r0, #16]
 8011e08:	6903      	ldr	r3, [r0, #16]
 8011e0a:	464f      	mov	r7, r9
 8011e0c:	f8a3 a000 	strh.w	sl, [r3]
 8011e10:	805a      	strh	r2, [r3, #2]
 8011e12:	809e      	strh	r6, [r3, #4]
 8011e14:	80de      	strh	r6, [r3, #6]
 8011e16:	9b06      	ldr	r3, [sp, #24]
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d19c      	bne.n	8011d56 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8011e1c:	9b01      	ldr	r3, [sp, #4]
 8011e1e:	6907      	ldr	r7, [r0, #16]
 8011e20:	f1c3 0620 	rsb	r6, r3, #32
 8011e24:	9b05      	ldr	r3, [sp, #20]
 8011e26:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8011e2a:	9b04      	ldr	r3, [sp, #16]
 8011e2c:	429e      	cmp	r6, r3
 8011e2e:	f040 81c7 	bne.w	80121c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8011e32:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011e36:	459e      	cmp	lr, r3
 8011e38:	d104      	bne.n	8011e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8011e3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	f43f ae3a 	beq.w	8011ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011e44:	88f9      	ldrh	r1, [r7, #6]
 8011e46:	88bb      	ldrh	r3, [r7, #4]
 8011e48:	430b      	orrs	r3, r1
 8011e4a:	d010      	beq.n	8011e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	db0c      	blt.n	8011e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011e54:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011e56:	428b      	cmp	r3, r1
 8011e58:	da09      	bge.n	8011e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011e5a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011e5e:	428b      	cmp	r3, r1
 8011e60:	f103 0301 	add.w	r3, r3, #1
 8011e64:	bf38      	it	cc
 8011e66:	3708      	addcc	r7, #8
 8011e68:	6083      	str	r3, [r0, #8]
 8011e6a:	bf38      	it	cc
 8011e6c:	6107      	strcc	r7, [r0, #16]
 8011e6e:	6903      	ldr	r3, [r0, #16]
 8011e70:	f8a3 e000 	strh.w	lr, [r3]
 8011e74:	e603      	b.n	8011a7e <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8011e76:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011e78:	9c03      	ldr	r4, [sp, #12]
 8011e7a:	42a2      	cmp	r2, r4
 8011e7c:	f6ff ae1c 	blt.w	8011ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011e80:	9c06      	ldr	r4, [sp, #24]
 8011e82:	42a2      	cmp	r2, r4
 8011e84:	9c08      	ldr	r4, [sp, #32]
 8011e86:	bfbc      	itt	lt
 8011e88:	3201      	addlt	r2, #1
 8011e8a:	9206      	strlt	r2, [sp, #24]
 8011e8c:	f1c3 0220 	rsb	r2, r3, #32
 8011e90:	4362      	muls	r2, r4
 8011e92:	2401      	movs	r4, #1
 8011e94:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011e96:	2420      	movs	r4, #32
 8011e98:	e6d6      	b.n	8011c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8011e9a:	ea4f 1861 	mov.w	r8, r1, asr #5
 8011e9e:	f009 021f 	and.w	r2, r9, #31
 8011ea2:	f001 011f 	and.w	r1, r1, #31
 8011ea6:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8011eaa:	920c      	str	r2, [sp, #48]	@ 0x30
 8011eac:	45b0      	cmp	r8, r6
 8011eae:	9a01      	ldr	r2, [sp, #4]
 8011eb0:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8011eb4:	eba2 0203 	sub.w	r2, r2, r3
 8011eb8:	d108      	bne.n	8011ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8011eba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ebc:	4496      	add	lr, r2
 8011ebe:	4419      	add	r1, r3
 8011ec0:	f8a5 e004 	strh.w	lr, [r5, #4]
 8011ec4:	fb02 a101 	mla	r1, r2, r1, sl
 8011ec8:	80e9      	strh	r1, [r5, #6]
 8011eca:	e6fa      	b.n	8011cc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011ecc:	2c00      	cmp	r4, #0
 8011ece:	f2c0 80a7 	blt.w	8012020 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8011ed2:	2701      	movs	r7, #1
 8011ed4:	f1c1 0c20 	rsb	ip, r1, #32
 8011ed8:	970a      	str	r7, [sp, #40]	@ 0x28
 8011eda:	2720      	movs	r7, #32
 8011edc:	fb02 f20c 	mul.w	r2, r2, ip
 8011ee0:	9709      	str	r7, [sp, #36]	@ 0x24
 8011ee2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8011ee4:	fb92 fcf4 	sdiv	ip, r2, r4
 8011ee8:	fb04 221c 	mls	r2, r4, ip, r2
 8011eec:	4439      	add	r1, r7
 8011eee:	2a00      	cmp	r2, #0
 8011ef0:	bfbc      	itt	lt
 8011ef2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8011ef6:	1912      	addlt	r2, r2, r4
 8011ef8:	fb0c a101 	mla	r1, ip, r1, sl
 8011efc:	44e6      	add	lr, ip
 8011efe:	80e9      	strh	r1, [r5, #6]
 8011f00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011f02:	f8a5 e004 	strh.w	lr, [r5, #4]
 8011f06:	eb08 0501 	add.w	r5, r8, r1
 8011f0a:	6901      	ldr	r1, [r0, #16]
 8011f0c:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8011f10:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8011f14:	ea58 070e 	orrs.w	r7, r8, lr
 8011f18:	d010      	beq.n	8011f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011f1a:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8011f1e:	f1be 0f00 	cmp.w	lr, #0
 8011f22:	db0b      	blt.n	8011f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011f24:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011f26:	45be      	cmp	lr, r7
 8011f28:	da08      	bge.n	8011f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011f2a:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8011f2e:	45be      	cmp	lr, r7
 8011f30:	bf3c      	itt	cc
 8011f32:	3108      	addcc	r1, #8
 8011f34:	6101      	strcc	r1, [r0, #16]
 8011f36:	f10e 0101 	add.w	r1, lr, #1
 8011f3a:	6081      	str	r1, [r0, #8]
 8011f3c:	6901      	ldr	r1, [r0, #16]
 8011f3e:	f04f 0e00 	mov.w	lr, #0
 8011f42:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8011f46:	42ae      	cmp	r6, r5
 8011f48:	800d      	strh	r5, [r1, #0]
 8011f4a:	4463      	add	r3, ip
 8011f4c:	f8a1 8002 	strh.w	r8, [r1, #2]
 8011f50:	f8a1 e004 	strh.w	lr, [r1, #4]
 8011f54:	f8a1 e006 	strh.w	lr, [r1, #6]
 8011f58:	d053      	beq.n	8012002 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8011f5a:	9901      	ldr	r1, [sp, #4]
 8011f5c:	1b12      	subs	r2, r2, r4
 8011f5e:	1ac9      	subs	r1, r1, r3
 8011f60:	4461      	add	r1, ip
 8011f62:	0149      	lsls	r1, r1, #5
 8011f64:	fb91 fef4 	sdiv	lr, r1, r4
 8011f68:	fb04 111e 	mls	r1, r4, lr, r1
 8011f6c:	2900      	cmp	r1, #0
 8011f6e:	bfbc      	itt	lt
 8011f70:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8011f74:	1909      	addlt	r1, r1, r4
 8011f76:	f10e 0701 	add.w	r7, lr, #1
 8011f7a:	970d      	str	r7, [sp, #52]	@ 0x34
 8011f7c:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8011f80:	1852      	adds	r2, r2, r1
 8011f82:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8011f84:	bf54      	ite	pl
 8011f86:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8011f8a:	46f4      	movmi	ip, lr
 8011f8c:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8011f90:	bf58      	it	pl
 8011f92:	1b12      	subpl	r2, r2, r4
 8011f94:	4463      	add	r3, ip
 8011f96:	443d      	add	r5, r7
 8011f98:	44e3      	add	fp, ip
 8011f9a:	f8aa b004 	strh.w	fp, [sl, #4]
 8011f9e:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8011fa2:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8011fa6:	f8aa b006 	strh.w	fp, [sl, #6]
 8011faa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011fae:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011fb2:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8011fb6:	ea5b 070a 	orrs.w	r7, fp, sl
 8011fba:	d014      	beq.n	8011fe6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8011fbc:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8011fc0:	f1ba 0f00 	cmp.w	sl, #0
 8011fc4:	db0f      	blt.n	8011fe6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8011fc6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011fc8:	45ba      	cmp	sl, r7
 8011fca:	da0c      	bge.n	8011fe6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8011fcc:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8011fd0:	45ba      	cmp	sl, r7
 8011fd2:	f10a 0a01 	add.w	sl, sl, #1
 8011fd6:	bf38      	it	cc
 8011fd8:	f10c 0c08 	addcc.w	ip, ip, #8
 8011fdc:	f8c0 a008 	str.w	sl, [r0, #8]
 8011fe0:	bf38      	it	cc
 8011fe2:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8011fe6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011fea:	f04f 0700 	mov.w	r7, #0
 8011fee:	42ae      	cmp	r6, r5
 8011ff0:	f8ac 5000 	strh.w	r5, [ip]
 8011ff4:	f8ac 8002 	strh.w	r8, [ip, #2]
 8011ff8:	f8ac 7004 	strh.w	r7, [ip, #4]
 8011ffc:	f8ac 7006 	strh.w	r7, [ip, #6]
 8012000:	d1bc      	bne.n	8011f7c <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8012002:	6904      	ldr	r4, [r0, #16]
 8012004:	9a01      	ldr	r2, [sp, #4]
 8012006:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012008:	1ad3      	subs	r3, r2, r3
 801200a:	88a2      	ldrh	r2, [r4, #4]
 801200c:	3120      	adds	r1, #32
 801200e:	441a      	add	r2, r3
 8012010:	80a2      	strh	r2, [r4, #4]
 8012012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012014:	1a89      	subs	r1, r1, r2
 8012016:	88e2      	ldrh	r2, [r4, #6]
 8012018:	fb03 2301 	mla	r3, r3, r1, r2
 801201c:	80e3      	strh	r3, [r4, #6]
 801201e:	e650      	b.n	8011cc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012020:	f04f 37ff 	mov.w	r7, #4294967295
 8012024:	434a      	muls	r2, r1
 8012026:	4264      	negs	r4, r4
 8012028:	970a      	str	r7, [sp, #40]	@ 0x28
 801202a:	2700      	movs	r7, #0
 801202c:	e758      	b.n	8011ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801202e:	ea4f 1867 	mov.w	r8, r7, asr #5
 8012032:	f009 031f 	and.w	r3, r9, #31
 8012036:	f007 071f 	and.w	r7, r7, #31
 801203a:	fa1f fc8c 	uxth.w	ip, ip
 801203e:	45d0      	cmp	r8, sl
 8012040:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012042:	fa1f fe8e 	uxth.w	lr, lr
 8012046:	d10a      	bne.n	801205e <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8012048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801204a:	449c      	add	ip, r3
 801204c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801204e:	441f      	add	r7, r3
 8012050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012052:	f8a5 c004 	strh.w	ip, [r5, #4]
 8012056:	fb03 e707 	mla	r7, r3, r7, lr
 801205a:	80ef      	strh	r7, [r5, #6]
 801205c:	e6bc      	b.n	8011dd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801205e:	2900      	cmp	r1, #0
 8012060:	f2c0 80a6 	blt.w	80121b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8012064:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012066:	f1c7 0320 	rsb	r3, r7, #32
 801206a:	4363      	muls	r3, r4
 801206c:	2401      	movs	r4, #1
 801206e:	940d      	str	r4, [sp, #52]	@ 0x34
 8012070:	2420      	movs	r4, #32
 8012072:	940c      	str	r4, [sp, #48]	@ 0x30
 8012074:	fb93 f4f1 	sdiv	r4, r3, r1
 8012078:	fb01 3b14 	mls	fp, r1, r4, r3
 801207c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801207e:	f1bb 0f00 	cmp.w	fp, #0
 8012082:	441f      	add	r7, r3
 8012084:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012086:	bfbc      	itt	lt
 8012088:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801208c:	448b      	addlt	fp, r1
 801208e:	fb04 e707 	mla	r7, r4, r7, lr
 8012092:	44a4      	add	ip, r4
 8012094:	80ef      	strh	r7, [r5, #6]
 8012096:	f8a5 c004 	strh.w	ip, [r5, #4]
 801209a:	eb08 0503 	add.w	r5, r8, r3
 801209e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80120a2:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80120a6:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80120aa:	ea5e 0307 	orrs.w	r3, lr, r7
 80120ae:	d011      	beq.n	80120d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80120b0:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80120b4:	f1be 0f00 	cmp.w	lr, #0
 80120b8:	db0c      	blt.n	80120d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80120ba:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80120bc:	45be      	cmp	lr, r7
 80120be:	da09      	bge.n	80120d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80120c0:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80120c4:	45be      	cmp	lr, r7
 80120c6:	bf3c      	itt	cc
 80120c8:	f10c 0708 	addcc.w	r7, ip, #8
 80120cc:	6107      	strcc	r7, [r0, #16]
 80120ce:	f10e 0701 	add.w	r7, lr, #1
 80120d2:	6087      	str	r7, [r0, #8]
 80120d4:	6907      	ldr	r7, [r0, #16]
 80120d6:	b213      	sxth	r3, r2
 80120d8:	4555      	cmp	r5, sl
 80120da:	9310      	str	r3, [sp, #64]	@ 0x40
 80120dc:	807b      	strh	r3, [r7, #2]
 80120de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120e0:	803d      	strh	r5, [r7, #0]
 80120e2:	80be      	strh	r6, [r7, #4]
 80120e4:	eb04 0c03 	add.w	ip, r4, r3
 80120e8:	80fe      	strh	r6, [r7, #6]
 80120ea:	d050      	beq.n	801218e <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80120ec:	9b01      	ldr	r3, [sp, #4]
 80120ee:	eba3 070c 	sub.w	r7, r3, ip
 80120f2:	ebab 0301 	sub.w	r3, fp, r1
 80120f6:	443c      	add	r4, r7
 80120f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80120fa:	0164      	lsls	r4, r4, #5
 80120fc:	fb94 f8f1 	sdiv	r8, r4, r1
 8012100:	fb01 4418 	mls	r4, r1, r8, r4
 8012104:	2c00      	cmp	r4, #0
 8012106:	bfbc      	itt	lt
 8012108:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801210c:	1864      	addlt	r4, r4, r1
 801210e:	f108 0701 	add.w	r7, r8, #1
 8012112:	9711      	str	r7, [sp, #68]	@ 0x44
 8012114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012116:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801211a:	191b      	adds	r3, r3, r4
 801211c:	f8be b004 	ldrh.w	fp, [lr, #4]
 8012120:	bf54      	ite	pl
 8012122:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8012124:	4647      	movmi	r7, r8
 8012126:	9309      	str	r3, [sp, #36]	@ 0x24
 8012128:	bf58      	it	pl
 801212a:	1a5b      	subpl	r3, r3, r1
 801212c:	44bb      	add	fp, r7
 801212e:	44bc      	add	ip, r7
 8012130:	bf58      	it	pl
 8012132:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8012134:	f8ae b004 	strh.w	fp, [lr, #4]
 8012138:	f8be b006 	ldrh.w	fp, [lr, #6]
 801213c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012140:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8012142:	f8ae b006 	strh.w	fp, [lr, #6]
 8012146:	443d      	add	r5, r7
 8012148:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801214c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8012150:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8012154:	ea5b 0307 	orrs.w	r3, fp, r7
 8012158:	d011      	beq.n	801217e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801215a:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801215e:	f1bb 0f00 	cmp.w	fp, #0
 8012162:	db0c      	blt.n	801217e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012164:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012166:	45bb      	cmp	fp, r7
 8012168:	da09      	bge.n	801217e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801216a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801216e:	45bb      	cmp	fp, r7
 8012170:	bf3c      	itt	cc
 8012172:	f10e 0708 	addcc.w	r7, lr, #8
 8012176:	6107      	strcc	r7, [r0, #16]
 8012178:	f10b 0701 	add.w	r7, fp, #1
 801217c:	6087      	str	r7, [r0, #8]
 801217e:	6907      	ldr	r7, [r0, #16]
 8012180:	4555      	cmp	r5, sl
 8012182:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012184:	803d      	strh	r5, [r7, #0]
 8012186:	807b      	strh	r3, [r7, #2]
 8012188:	80be      	strh	r6, [r7, #4]
 801218a:	80fe      	strh	r6, [r7, #6]
 801218c:	d1c2      	bne.n	8012114 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801218e:	9b01      	ldr	r3, [sp, #4]
 8012190:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8012192:	eba3 0c0c 	sub.w	ip, r3, ip
 8012196:	6903      	ldr	r3, [r0, #16]
 8012198:	3720      	adds	r7, #32
 801219a:	8899      	ldrh	r1, [r3, #4]
 801219c:	4461      	add	r1, ip
 801219e:	8099      	strh	r1, [r3, #4]
 80121a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80121a2:	1a7f      	subs	r7, r7, r1
 80121a4:	88d9      	ldrh	r1, [r3, #6]
 80121a6:	fb0c 1c07 	mla	ip, ip, r7, r1
 80121aa:	f8a3 c006 	strh.w	ip, [r3, #6]
 80121ae:	e613      	b.n	8011dd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80121b0:	f04f 34ff 	mov.w	r4, #4294967295
 80121b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80121b6:	4249      	negs	r1, r1
 80121b8:	940d      	str	r4, [sp, #52]	@ 0x34
 80121ba:	2400      	movs	r4, #0
 80121bc:	437b      	muls	r3, r7
 80121be:	e758      	b.n	8012072 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80121c0:	9905      	ldr	r1, [sp, #20]
 80121c2:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80121c6:	f009 0c1f 	and.w	ip, r9, #31
 80121ca:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80121ce:	f001 011f 	and.w	r1, r1, #31
 80121d2:	45f3      	cmp	fp, lr
 80121d4:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80121d8:	9102      	str	r1, [sp, #8]
 80121da:	9904      	ldr	r1, [sp, #16]
 80121dc:	eba1 0406 	sub.w	r4, r1, r6
 80121e0:	d108      	bne.n	80121f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80121e2:	9b02      	ldr	r3, [sp, #8]
 80121e4:	44a0      	add	r8, r4
 80121e6:	449c      	add	ip, r3
 80121e8:	f8a7 8004 	strh.w	r8, [r7, #4]
 80121ec:	fb04 a40c 	mla	r4, r4, ip, sl
 80121f0:	80fc      	strh	r4, [r7, #6]
 80121f2:	e461      	b.n	8011ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80121f4:	9905      	ldr	r1, [sp, #20]
 80121f6:	ebb1 0109 	subs.w	r1, r1, r9
 80121fa:	bf51      	iteee	pl
 80121fc:	f1cc 0520 	rsbpl	r5, ip, #32
 8012200:	fb04 f40c 	mulmi.w	r4, r4, ip
 8012204:	4249      	negmi	r1, r1
 8012206:	2500      	movmi	r5, #0
 8012208:	bf5d      	ittte	pl
 801220a:	436c      	mulpl	r4, r5
 801220c:	2520      	movpl	r5, #32
 801220e:	f04f 0901 	movpl.w	r9, #1
 8012212:	f04f 39ff 	movmi.w	r9, #4294967295
 8012216:	9501      	str	r5, [sp, #4]
 8012218:	9b01      	ldr	r3, [sp, #4]
 801221a:	fb94 f5f1 	sdiv	r5, r4, r1
 801221e:	fb01 4415 	mls	r4, r1, r5, r4
 8012222:	449c      	add	ip, r3
 8012224:	eb0b 0309 	add.w	r3, fp, r9
 8012228:	2c00      	cmp	r4, #0
 801222a:	bfbc      	itt	lt
 801222c:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8012230:	1864      	addlt	r4, r4, r1
 8012232:	44a8      	add	r8, r5
 8012234:	fb05 ac0c 	mla	ip, r5, ip, sl
 8012238:	f8a7 8004 	strh.w	r8, [r7, #4]
 801223c:	f8a7 c006 	strh.w	ip, [r7, #6]
 8012240:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012244:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8012248:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801224c:	ea58 0707 	orrs.w	r7, r8, r7
 8012250:	d011      	beq.n	8012276 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8012252:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8012256:	f1b8 0f00 	cmp.w	r8, #0
 801225a:	db0c      	blt.n	8012276 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801225c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801225e:	45b8      	cmp	r8, r7
 8012260:	da09      	bge.n	8012276 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8012262:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8012266:	45b8      	cmp	r8, r7
 8012268:	bf3c      	itt	cc
 801226a:	f10c 0708 	addcc.w	r7, ip, #8
 801226e:	6107      	strcc	r7, [r0, #16]
 8012270:	f108 0701 	add.w	r7, r8, #1
 8012274:	6087      	str	r7, [r0, #8]
 8012276:	6907      	ldr	r7, [r0, #16]
 8012278:	f04f 0c00 	mov.w	ip, #0
 801227c:	b212      	sxth	r2, r2
 801227e:	459e      	cmp	lr, r3
 8012280:	803b      	strh	r3, [r7, #0]
 8012282:	442e      	add	r6, r5
 8012284:	807a      	strh	r2, [r7, #2]
 8012286:	f8a7 c004 	strh.w	ip, [r7, #4]
 801228a:	f8a7 c006 	strh.w	ip, [r7, #6]
 801228e:	d04b      	beq.n	8012328 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8012290:	9f04      	ldr	r7, [sp, #16]
 8012292:	1a64      	subs	r4, r4, r1
 8012294:	f04f 0a00 	mov.w	sl, #0
 8012298:	1bbf      	subs	r7, r7, r6
 801229a:	443d      	add	r5, r7
 801229c:	016d      	lsls	r5, r5, #5
 801229e:	fb95 f8f1 	sdiv	r8, r5, r1
 80122a2:	fb01 5518 	mls	r5, r1, r8, r5
 80122a6:	4565      	cmp	r5, ip
 80122a8:	bfbc      	itt	lt
 80122aa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80122ae:	186d      	addlt	r5, r5, r1
 80122b0:	f108 0701 	add.w	r7, r8, #1
 80122b4:	9703      	str	r7, [sp, #12]
 80122b6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80122ba:	1964      	adds	r4, r4, r5
 80122bc:	444b      	add	r3, r9
 80122be:	bf54      	ite	pl
 80122c0:	9f03      	ldrpl	r7, [sp, #12]
 80122c2:	4647      	movmi	r7, r8
 80122c4:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80122c8:	bf58      	it	pl
 80122ca:	1a64      	subpl	r4, r4, r1
 80122cc:	443e      	add	r6, r7
 80122ce:	44bb      	add	fp, r7
 80122d0:	f8ac b004 	strh.w	fp, [ip, #4]
 80122d4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80122d8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80122dc:	f8ac b006 	strh.w	fp, [ip, #6]
 80122e0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80122e4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80122e8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80122ec:	ea5b 0707 	orrs.w	r7, fp, r7
 80122f0:	d011      	beq.n	8012316 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80122f2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80122f6:	f1bb 0f00 	cmp.w	fp, #0
 80122fa:	db0c      	blt.n	8012316 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80122fc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80122fe:	45bb      	cmp	fp, r7
 8012300:	da09      	bge.n	8012316 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012302:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8012306:	45bb      	cmp	fp, r7
 8012308:	bf3c      	itt	cc
 801230a:	f10c 0708 	addcc.w	r7, ip, #8
 801230e:	6107      	strcc	r7, [r0, #16]
 8012310:	f10b 0701 	add.w	r7, fp, #1
 8012314:	6087      	str	r7, [r0, #8]
 8012316:	6907      	ldr	r7, [r0, #16]
 8012318:	459e      	cmp	lr, r3
 801231a:	803b      	strh	r3, [r7, #0]
 801231c:	807a      	strh	r2, [r7, #2]
 801231e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8012322:	f8a7 a006 	strh.w	sl, [r7, #6]
 8012326:	d1c6      	bne.n	80122b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8012328:	9b04      	ldr	r3, [sp, #16]
 801232a:	1b9e      	subs	r6, r3, r6
 801232c:	6903      	ldr	r3, [r0, #16]
 801232e:	889a      	ldrh	r2, [r3, #4]
 8012330:	4432      	add	r2, r6
 8012332:	809a      	strh	r2, [r3, #4]
 8012334:	9a02      	ldr	r2, [sp, #8]
 8012336:	f102 0c20 	add.w	ip, r2, #32
 801233a:	9a01      	ldr	r2, [sp, #4]
 801233c:	ebac 0c02 	sub.w	ip, ip, r2
 8012340:	88da      	ldrh	r2, [r3, #6]
 8012342:	fb06 260c 	mla	r6, r6, ip, r2
 8012346:	80de      	strh	r6, [r3, #6]
 8012348:	f7ff bbb6 	b.w	8011ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

0801234c <_ZN8touchgfx7Outline6lineToEii>:
 801234c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801234e:	079b      	lsls	r3, r3, #30
 8012350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012352:	460e      	mov	r6, r1
 8012354:	4615      	mov	r5, r2
 8012356:	d511      	bpl.n	801237c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8012358:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801235c:	ea86 0701 	eor.w	r7, r6, r1
 8012360:	ea85 0302 	eor.w	r3, r5, r2
 8012364:	433b      	orrs	r3, r7
 8012366:	d009      	beq.n	801237c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8012368:	4633      	mov	r3, r6
 801236a:	9500      	str	r5, [sp, #0]
 801236c:	f7ff fb4c 	bl	8011a08 <_ZN8touchgfx7Outline10renderLineEiiii>
 8012370:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012372:	f043 0301 	orr.w	r3, r3, #1
 8012376:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801237a:	6243      	str	r3, [r0, #36]	@ 0x24
 801237c:	b003      	add	sp, #12
 801237e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012380 <_ZN8touchgfx7Outline6moveToEii>:
 8012380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012382:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012384:	4615      	mov	r5, r2
 8012386:	4604      	mov	r4, r0
 8012388:	460e      	mov	r6, r1
 801238a:	079a      	lsls	r2, r3, #30
 801238c:	d401      	bmi.n	8012392 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801238e:	f7ff fb07 	bl	80119a0 <_ZN8touchgfx7Outline5resetEv>
 8012392:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012394:	07db      	lsls	r3, r3, #31
 8012396:	d504      	bpl.n	80123a2 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8012398:	4620      	mov	r0, r4
 801239a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801239e:	f7ff ffd5 	bl	801234c <_ZN8touchgfx7Outline6lineToEii>
 80123a2:	6923      	ldr	r3, [r4, #16]
 80123a4:	1170      	asrs	r0, r6, #5
 80123a6:	1169      	asrs	r1, r5, #5
 80123a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80123ac:	4290      	cmp	r0, r2
 80123ae:	d103      	bne.n	80123b8 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80123b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80123b4:	4291      	cmp	r1, r2
 80123b6:	d01a      	beq.n	80123ee <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80123b8:	88df      	ldrh	r7, [r3, #6]
 80123ba:	889a      	ldrh	r2, [r3, #4]
 80123bc:	433a      	orrs	r2, r7
 80123be:	d010      	beq.n	80123e2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80123c0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80123c4:	2a00      	cmp	r2, #0
 80123c6:	db0c      	blt.n	80123e2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80123c8:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80123ca:	42ba      	cmp	r2, r7
 80123cc:	da09      	bge.n	80123e2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80123ce:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80123d2:	42ba      	cmp	r2, r7
 80123d4:	f102 0201 	add.w	r2, r2, #1
 80123d8:	bf38      	it	cc
 80123da:	3308      	addcc	r3, #8
 80123dc:	60a2      	str	r2, [r4, #8]
 80123de:	bf38      	it	cc
 80123e0:	6123      	strcc	r3, [r4, #16]
 80123e2:	6923      	ldr	r3, [r4, #16]
 80123e4:	2200      	movs	r2, #0
 80123e6:	8018      	strh	r0, [r3, #0]
 80123e8:	8059      	strh	r1, [r3, #2]
 80123ea:	809a      	strh	r2, [r3, #4]
 80123ec:	80da      	strh	r2, [r3, #6]
 80123ee:	6166      	str	r6, [r4, #20]
 80123f0:	6225      	str	r5, [r4, #32]
 80123f2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80123f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080123f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80123f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123fc:	b0d0      	sub	sp, #320	@ 0x140
 80123fe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012402:	466c      	mov	r4, sp
 8012404:	4627      	mov	r7, r4
 8012406:	1a0d      	subs	r5, r1, r0
 8012408:	f100 0308 	add.w	r3, r0, #8
 801240c:	2d48      	cmp	r5, #72	@ 0x48
 801240e:	f340 80d5 	ble.w	80125bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012412:	112d      	asrs	r5, r5, #4
 8012414:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8012418:	f9b0 9000 	ldrsh.w	r9, [r0]
 801241c:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8012420:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8012424:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012428:	6816      	ldr	r6, [r2, #0]
 801242a:	6006      	str	r6, [r0, #0]
 801242c:	6856      	ldr	r6, [r2, #4]
 801242e:	6046      	str	r6, [r0, #4]
 8012430:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012434:	f8a2 8002 	strh.w	r8, [r2, #2]
 8012438:	f8a2 e004 	strh.w	lr, [r2, #4]
 801243c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012440:	f1a1 0208 	sub.w	r2, r1, #8
 8012444:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8012448:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801244c:	4565      	cmp	r5, ip
 801244e:	db06      	blt.n	801245e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8012450:	d119      	bne.n	8012486 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8012452:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8012456:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801245a:	42ae      	cmp	r6, r5
 801245c:	dd13      	ble.n	8012486 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801245e:	460e      	mov	r6, r1
 8012460:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8012464:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8012468:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801246c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8012470:	601d      	str	r5, [r3, #0]
 8012472:	6875      	ldr	r5, [r6, #4]
 8012474:	605d      	str	r5, [r3, #4]
 8012476:	f821 9c08 	strh.w	r9, [r1, #-8]
 801247a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801247e:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012482:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012486:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801248a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801248e:	42ae      	cmp	r6, r5
 8012490:	db06      	blt.n	80124a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8012492:	d116      	bne.n	80124c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8012494:	f9b0 c000 	ldrsh.w	ip, [r0]
 8012498:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801249c:	45ac      	cmp	ip, r5
 801249e:	da10      	bge.n	80124c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80124a0:	681d      	ldr	r5, [r3, #0]
 80124a2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80124a6:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80124aa:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80124ae:	6005      	str	r5, [r0, #0]
 80124b0:	685d      	ldr	r5, [r3, #4]
 80124b2:	f8a0 8008 	strh.w	r8, [r0, #8]
 80124b6:	6045      	str	r5, [r0, #4]
 80124b8:	8146      	strh	r6, [r0, #10]
 80124ba:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80124be:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80124c2:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80124c6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80124ca:	4565      	cmp	r5, ip
 80124cc:	db06      	blt.n	80124dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80124ce:	d119      	bne.n	8012504 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80124d0:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80124d4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80124d8:	42ae      	cmp	r6, r5
 80124da:	da13      	bge.n	8012504 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80124dc:	460e      	mov	r6, r1
 80124de:	f9b0 9000 	ldrsh.w	r9, [r0]
 80124e2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80124e6:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80124ea:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80124ee:	6005      	str	r5, [r0, #0]
 80124f0:	6875      	ldr	r5, [r6, #4]
 80124f2:	6045      	str	r5, [r0, #4]
 80124f4:	f821 9c08 	strh.w	r9, [r1, #-8]
 80124f8:	f821 cc06 	strh.w	ip, [r1, #-6]
 80124fc:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012500:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012504:	3308      	adds	r3, #8
 8012506:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801250a:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801250e:	45e6      	cmp	lr, ip
 8012510:	dbf8      	blt.n	8012504 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012512:	d105      	bne.n	8012520 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012514:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012518:	f9b0 5000 	ldrsh.w	r5, [r0]
 801251c:	42ae      	cmp	r6, r5
 801251e:	dbf1      	blt.n	8012504 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012520:	4615      	mov	r5, r2
 8012522:	3a08      	subs	r2, #8
 8012524:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8012528:	45b4      	cmp	ip, r6
 801252a:	dbf9      	blt.n	8012520 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801252c:	d105      	bne.n	801253a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801252e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012532:	f9b2 6000 	ldrsh.w	r6, [r2]
 8012536:	45b0      	cmp	r8, r6
 8012538:	dbf2      	blt.n	8012520 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801253a:	4293      	cmp	r3, r2
 801253c:	f1a5 0608 	sub.w	r6, r5, #8
 8012540:	d816      	bhi.n	8012570 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8012542:	f8d6 c000 	ldr.w	ip, [r6]
 8012546:	f9b3 a000 	ldrsh.w	sl, [r3]
 801254a:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801254e:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8012552:	f8c3 c000 	str.w	ip, [r3]
 8012556:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801255a:	f8c3 c004 	str.w	ip, [r3, #4]
 801255e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8012562:	f825 ec06 	strh.w	lr, [r5, #-6]
 8012566:	f825 9c04 	strh.w	r9, [r5, #-4]
 801256a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801256e:	e7c9      	b.n	8012504 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012570:	f8d6 e000 	ldr.w	lr, [r6]
 8012574:	f9b0 a000 	ldrsh.w	sl, [r0]
 8012578:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801257c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8012580:	f8c0 e000 	str.w	lr, [r0]
 8012584:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8012588:	1a16      	subs	r6, r2, r0
 801258a:	f8c0 e004 	str.w	lr, [r0, #4]
 801258e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8012592:	f825 cc06 	strh.w	ip, [r5, #-6]
 8012596:	f825 9c04 	strh.w	r9, [r5, #-4]
 801259a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801259e:	1acd      	subs	r5, r1, r3
 80125a0:	10ed      	asrs	r5, r5, #3
 80125a2:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80125a6:	bfb5      	itete	lt
 80125a8:	e9c4 0200 	strdlt	r0, r2, [r4]
 80125ac:	e9c4 3100 	strdge	r3, r1, [r4]
 80125b0:	460a      	movlt	r2, r1
 80125b2:	4603      	movge	r3, r0
 80125b4:	3408      	adds	r4, #8
 80125b6:	4618      	mov	r0, r3
 80125b8:	4611      	mov	r1, r2
 80125ba:	e724      	b.n	8012406 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80125bc:	4299      	cmp	r1, r3
 80125be:	d927      	bls.n	8012610 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80125c0:	f1a3 0210 	sub.w	r2, r3, #16
 80125c4:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80125c8:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80125cc:	45ac      	cmp	ip, r5
 80125ce:	db06      	blt.n	80125de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80125d0:	d11c      	bne.n	801260c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80125d2:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80125d6:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80125da:	42ae      	cmp	r6, r5
 80125dc:	da16      	bge.n	801260c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80125de:	4615      	mov	r5, r2
 80125e0:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 80125e4:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 80125e8:	3a08      	subs	r2, #8
 80125ea:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80125ee:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80125f2:	6196      	str	r6, [r2, #24]
 80125f4:	42a8      	cmp	r0, r5
 80125f6:	686e      	ldr	r6, [r5, #4]
 80125f8:	f8a2 9010 	strh.w	r9, [r2, #16]
 80125fc:	61d6      	str	r6, [r2, #28]
 80125fe:	f8a2 c012 	strh.w	ip, [r2, #18]
 8012602:	f8a2 8014 	strh.w	r8, [r2, #20]
 8012606:	f8a2 e016 	strh.w	lr, [r2, #22]
 801260a:	d1db      	bne.n	80125c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801260c:	3308      	adds	r3, #8
 801260e:	e7d5      	b.n	80125bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012610:	42bc      	cmp	r4, r7
 8012612:	d903      	bls.n	801261c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8012614:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8012618:	3c08      	subs	r4, #8
 801261a:	e6f4      	b.n	8012406 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801261c:	b050      	add	sp, #320	@ 0x140
 801261e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012622 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8012622:	b510      	push	{r4, lr}
 8012624:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012626:	4604      	mov	r4, r0
 8012628:	07da      	lsls	r2, r3, #31
 801262a:	d507      	bpl.n	801263c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801262c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8012630:	f7ff fe8c 	bl	801234c <_ZN8touchgfx7Outline6lineToEii>
 8012634:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012636:	f023 0301 	bic.w	r3, r3, #1
 801263a:	6243      	str	r3, [r0, #36]	@ 0x24
 801263c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801263e:	079b      	lsls	r3, r3, #30
 8012640:	d521      	bpl.n	8012686 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8012642:	6923      	ldr	r3, [r4, #16]
 8012644:	88d9      	ldrh	r1, [r3, #6]
 8012646:	889a      	ldrh	r2, [r3, #4]
 8012648:	430a      	orrs	r2, r1
 801264a:	d010      	beq.n	801266e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801264c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012650:	2a00      	cmp	r2, #0
 8012652:	db0c      	blt.n	801266e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012654:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012656:	428a      	cmp	r2, r1
 8012658:	da09      	bge.n	801266e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801265a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801265e:	4291      	cmp	r1, r2
 8012660:	f102 0201 	add.w	r2, r2, #1
 8012664:	bf88      	it	hi
 8012666:	3308      	addhi	r3, #8
 8012668:	60a2      	str	r2, [r4, #8]
 801266a:	bf88      	it	hi
 801266c:	6123      	strhi	r3, [r4, #16]
 801266e:	68a1      	ldr	r1, [r4, #8]
 8012670:	b129      	cbz	r1, 801267e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8012672:	6863      	ldr	r3, [r4, #4]
 8012674:	4299      	cmp	r1, r3
 8012676:	d802      	bhi.n	801267e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8012678:	68e0      	ldr	r0, [r4, #12]
 801267a:	f7ff febd 	bl	80123f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801267e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012680:	f023 0302 	bic.w	r3, r3, #2
 8012684:	6263      	str	r3, [r4, #36]	@ 0x24
 8012686:	68e0      	ldr	r0, [r4, #12]
 8012688:	bd10      	pop	{r4, pc}
	...

0801268c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801268c:	4b01      	ldr	r3, [pc, #4]	@ (8012694 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801268e:	6818      	ldr	r0, [r3, #0]
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
 8012694:	240251f8 	.word	0x240251f8

08012698 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8012698:	4b01      	ldr	r3, [pc, #4]	@ (80126a0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801269a:	6818      	ldr	r0, [r3, #0]
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	240251fc 	.word	0x240251fc

080126a4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80126a4:	b510      	push	{r4, lr}
 80126a6:	6803      	ldr	r3, [r0, #0]
 80126a8:	460c      	mov	r4, r1
 80126aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126ac:	4798      	blx	r3
 80126ae:	1b03      	subs	r3, r0, r4
 80126b0:	4258      	negs	r0, r3
 80126b2:	4158      	adcs	r0, r3
 80126b4:	bd10      	pop	{r4, pc}
	...

080126b8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80126b8:	4b01      	ldr	r3, [pc, #4]	@ (80126c0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80126ba:	6019      	str	r1, [r3, #0]
 80126bc:	4770      	bx	lr
 80126be:	bf00      	nop
 80126c0:	24025200 	.word	0x24025200

080126c4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80126c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c8:	4696      	mov	lr, r2
 80126ca:	b097      	sub	sp, #92	@ 0x5c
 80126cc:	4605      	mov	r5, r0
 80126ce:	4614      	mov	r4, r2
 80126d0:	460e      	mov	r6, r1
 80126d2:	461f      	mov	r7, r3
 80126d4:	f10d 0c1c 	add.w	ip, sp, #28
 80126d8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80126dc:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80126e0:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80126e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80126e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126ec:	f8de 3000 	ldr.w	r3, [lr]
 80126f0:	f104 0e14 	add.w	lr, r4, #20
 80126f4:	f8cc 3000 	str.w	r3, [ip]
 80126f8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80126fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012704:	f8de 3000 	ldr.w	r3, [lr]
 8012708:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801270c:	f8cc 3000 	str.w	r3, [ip]
 8012710:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012714:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801271c:	f8de 3000 	ldr.w	r3, [lr]
 8012720:	4631      	mov	r1, r6
 8012722:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012724:	4628      	mov	r0, r5
 8012726:	f8cc 3000 	str.w	r3, [ip]
 801272a:	682b      	ldr	r3, [r5, #0]
 801272c:	9201      	str	r2, [sp, #4]
 801272e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012730:	f8cd 8008 	str.w	r8, [sp, #8]
 8012734:	9200      	str	r2, [sp, #0]
 8012736:	aa07      	add	r2, sp, #28
 8012738:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801273c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8012740:	463b      	mov	r3, r7
 8012742:	47d8      	blx	fp
 8012744:	46a6      	mov	lr, r4
 8012746:	f10d 0c1c 	add.w	ip, sp, #28
 801274a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801274e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012752:	f8de 3000 	ldr.w	r3, [lr]
 8012756:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801275a:	343c      	adds	r4, #60	@ 0x3c
 801275c:	f8cc 3000 	str.w	r3, [ip]
 8012760:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012764:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801276c:	f8de 3000 	ldr.w	r3, [lr]
 8012770:	f8cc 3000 	str.w	r3, [ip]
 8012774:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801277a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801277e:	6823      	ldr	r3, [r4, #0]
 8012780:	4631      	mov	r1, r6
 8012782:	4628      	mov	r0, r5
 8012784:	f8cc 3000 	str.w	r3, [ip]
 8012788:	682b      	ldr	r3, [r5, #0]
 801278a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801278e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012790:	f8cd 8008 	str.w	r8, [sp, #8]
 8012794:	9201      	str	r2, [sp, #4]
 8012796:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012798:	9200      	str	r2, [sp, #0]
 801279a:	aa07      	add	r2, sp, #28
 801279c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801279e:	463b      	mov	r3, r7
 80127a0:	47a0      	blx	r4
 80127a2:	b017      	add	sp, #92	@ 0x5c
 80127a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080127a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80127a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ac:	b08d      	sub	sp, #52	@ 0x34
 80127ae:	4688      	mov	r8, r1
 80127b0:	f8d3 c000 	ldr.w	ip, [r3]
 80127b4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80127b6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80127ba:	680f      	ldr	r7, [r1, #0]
 80127bc:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80127c0:	eba7 070c 	sub.w	r7, r7, ip
 80127c4:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80127c8:	edd3 6a07 	vldr	s13, [r3, #28]
 80127cc:	42bc      	cmp	r4, r7
 80127ce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80127d0:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80127d4:	bfa8      	it	ge
 80127d6:	463c      	movge	r4, r7
 80127d8:	f9b1 9000 	ldrsh.w	r9, [r1]
 80127dc:	f9ba 1000 	ldrsh.w	r1, [sl]
 80127e0:	ee07 4a90 	vmov	s15, r4
 80127e4:	eb09 0e0c 	add.w	lr, r9, ip
 80127e8:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80127ec:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80127f0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80127f4:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80127f8:	4571      	cmp	r1, lr
 80127fa:	ee25 4a04 	vmul.f32	s8, s10, s8
 80127fe:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012802:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012806:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801280a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801280e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012812:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012816:	ee36 0a84 	vadd.f32	s0, s13, s8
 801281a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801281e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012822:	f340 808c 	ble.w	801293e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8012826:	eba1 060e 	sub.w	r6, r1, lr
 801282a:	fb96 f5f4 	sdiv	r5, r6, r4
 801282e:	ee07 5a10 	vmov	s14, r5
 8012832:	2d00      	cmp	r5, #0
 8012834:	fb04 6615 	mls	r6, r4, r5, r6
 8012838:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801283c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8012840:	eee7 0a24 	vfma.f32	s1, s14, s9
 8012844:	eea7 1a05 	vfma.f32	s2, s14, s10
 8012848:	dd12      	ble.n	8012870 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801284a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801284e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8012852:	ee31 2a45 	vsub.f32	s4, s2, s10
 8012856:	eef5 6a40 	vcmp.f32	s13, #0.0
 801285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801285e:	bf14      	ite	ne
 8012860:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8012864:	eeb0 7a67 	vmoveq.f32	s14, s15
 8012868:	ee61 1a87 	vmul.f32	s3, s3, s14
 801286c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012870:	fb05 f204 	mul.w	r2, r5, r4
 8012874:	1abf      	subs	r7, r7, r2
 8012876:	4494      	add	ip, r2
 8012878:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801287c:	4411      	add	r1, r2
 801287e:	eb09 020c 	add.w	r2, r9, ip
 8012882:	b209      	sxth	r1, r1
 8012884:	443a      	add	r2, r7
 8012886:	428a      	cmp	r2, r1
 8012888:	bfc4      	itt	gt
 801288a:	eba1 0209 	subgt.w	r2, r1, r9
 801288e:	eba2 070c 	subgt.w	r7, r2, ip
 8012892:	2f00      	cmp	r7, #0
 8012894:	dd50      	ble.n	8012938 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8012896:	fb97 f1f4 	sdiv	r1, r7, r4
 801289a:	fb04 7211 	mls	r2, r4, r1, r7
 801289e:	b90a      	cbnz	r2, 80128a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80128a0:	3901      	subs	r1, #1
 80128a2:	4622      	mov	r2, r4
 80128a4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80128a8:	6840      	ldr	r0, [r0, #4]
 80128aa:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80128ae:	44b6      	add	lr, r6
 80128b0:	f8d0 a000 	ldr.w	sl, [r0]
 80128b4:	2900      	cmp	r1, #0
 80128b6:	bfcc      	ite	gt
 80128b8:	46a1      	movgt	r9, r4
 80128ba:	4691      	movle	r9, r2
 80128bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80128be:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80128c0:	fb04 e505 	mla	r5, r4, r5, lr
 80128c4:	eef0 6a42 	vmov.f32	s13, s4
 80128c8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80128cc:	9008      	str	r0, [sp, #32]
 80128ce:	eeb0 7a61 	vmov.f32	s14, s3
 80128d2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80128d4:	695b      	ldr	r3, [r3, #20]
 80128d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80128da:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80128de:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80128e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80128e4:	445b      	add	r3, fp
 80128e6:	9307      	str	r3, [sp, #28]
 80128e8:	ee16 3a90 	vmov	r3, s13
 80128ec:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80128f0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80128f4:	ee21 3a23 	vmul.f32	s6, s2, s7
 80128f8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80128fc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012900:	ee17 7a90 	vmov	r7, s15
 8012904:	ee73 7a42 	vsub.f32	s15, s6, s4
 8012908:	fb97 f7f4 	sdiv	r7, r7, r4
 801290c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012910:	ee17 ca90 	vmov	ip, s15
 8012914:	fb9c fcf4 	sdiv	ip, ip, r4
 8012918:	fb0c 3306 	mla	r3, ip, r6, r3
 801291c:	9302      	str	r3, [sp, #8]
 801291e:	ee17 3a10 	vmov	r3, s14
 8012922:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8012926:	fb07 3706 	mla	r7, r7, r6, r3
 801292a:	eba9 0306 	sub.w	r3, r9, r6
 801292e:	e9cd 4700 	strd	r4, r7, [sp]
 8012932:	f8da 4008 	ldr.w	r4, [sl, #8]
 8012936:	47a0      	blx	r4
 8012938:	b00d      	add	sp, #52	@ 0x34
 801293a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801293e:	2500      	movs	r5, #0
 8012940:	462e      	mov	r6, r5
 8012942:	e799      	b.n	8012878 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08012944 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012948:	b0db      	sub	sp, #364	@ 0x16c
 801294a:	461d      	mov	r5, r3
 801294c:	4614      	mov	r4, r2
 801294e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8012952:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012954:	4629      	mov	r1, r5
 8012956:	930a      	str	r3, [sp, #40]	@ 0x28
 8012958:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801295c:	9009      	str	r0, [sp, #36]	@ 0x24
 801295e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012960:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8012964:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8012968:	9310      	str	r3, [sp, #64]	@ 0x40
 801296a:	6803      	ldr	r3, [r0, #0]
 801296c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801296e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012972:	47b8      	blx	r7
 8012974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012976:	6058      	str	r0, [r3, #4]
 8012978:	2800      	cmp	r0, #0
 801297a:	f000 83a1 	beq.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801297e:	682b      	ldr	r3, [r5, #0]
 8012980:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8012984:	ed94 7a02 	vldr	s14, [r4, #8]
 8012988:	9314      	str	r3, [sp, #80]	@ 0x50
 801298a:	686b      	ldr	r3, [r5, #4]
 801298c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012990:	9315      	str	r3, [sp, #84]	@ 0x54
 8012992:	4bc1      	ldr	r3, [pc, #772]	@ (8012c98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012994:	7819      	ldrb	r1, [r3, #0]
 8012996:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801299a:	2900      	cmp	r1, #0
 801299c:	bf16      	itet	ne
 801299e:	4619      	movne	r1, r3
 80129a0:	4611      	moveq	r1, r2
 80129a2:	4613      	movne	r3, r2
 80129a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a8:	9116      	str	r1, [sp, #88]	@ 0x58
 80129aa:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80129ae:	f240 8387 	bls.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129b2:	ed94 7a07 	vldr	s14, [r4, #28]
 80129b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129be:	f240 837f 	bls.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129c2:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80129c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ce:	f240 8377 	bls.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129d2:	6822      	ldr	r2, [r4, #0]
 80129d4:	4bb1      	ldr	r3, [pc, #708]	@ (8012c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80129d6:	429a      	cmp	r2, r3
 80129d8:	f2c0 8372 	blt.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129dc:	49b0      	ldr	r1, [pc, #704]	@ (8012ca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80129de:	6963      	ldr	r3, [r4, #20]
 80129e0:	428a      	cmp	r2, r1
 80129e2:	f300 836d 	bgt.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129e6:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80129ea:	48ae      	ldr	r0, [pc, #696]	@ (8012ca4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80129ec:	33ff      	adds	r3, #255	@ 0xff
 80129ee:	4283      	cmp	r3, r0
 80129f0:	f200 8366 	bhi.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80129f6:	4dac      	ldr	r5, [pc, #688]	@ (8012ca8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80129f8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80129fc:	33ff      	adds	r3, #255	@ 0xff
 80129fe:	42ab      	cmp	r3, r5
 8012a00:	f200 835e 	bhi.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a04:	6862      	ldr	r2, [r4, #4]
 8012a06:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8012a0a:	33ff      	adds	r3, #255	@ 0xff
 8012a0c:	4283      	cmp	r3, r0
 8012a0e:	f200 8357 	bhi.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a12:	69a1      	ldr	r1, [r4, #24]
 8012a14:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8012a18:	33ff      	adds	r3, #255	@ 0xff
 8012a1a:	4283      	cmp	r3, r0
 8012a1c:	f200 8350 	bhi.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012a22:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8012a26:	30ff      	adds	r0, #255	@ 0xff
 8012a28:	42a8      	cmp	r0, r5
 8012a2a:	f200 8349 	bhi.w	80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a2e:	428a      	cmp	r2, r1
 8012a30:	f280 8110 	bge.w	8012c54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8012a34:	429a      	cmp	r2, r3
 8012a36:	f300 8119 	bgt.w	8012c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8012a3a:	4299      	cmp	r1, r3
 8012a3c:	f280 811d 	bge.w	8012c7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8012a40:	2502      	movs	r5, #2
 8012a42:	2701      	movs	r7, #1
 8012a44:	46a9      	mov	r9, r5
 8012a46:	46b8      	mov	r8, r7
 8012a48:	f04f 0a00 	mov.w	sl, #0
 8012a4c:	4621      	mov	r1, r4
 8012a4e:	a849      	add	r0, sp, #292	@ 0x124
 8012a50:	f004 fa26 	bl	8016ea0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8012a54:	4622      	mov	r2, r4
 8012a56:	4653      	mov	r3, sl
 8012a58:	a949      	add	r1, sp, #292	@ 0x124
 8012a5a:	f8cd 9000 	str.w	r9, [sp]
 8012a5e:	a819      	add	r0, sp, #100	@ 0x64
 8012a60:	f004 fb4e 	bl	8017100 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012a64:	4622      	mov	r2, r4
 8012a66:	4653      	mov	r3, sl
 8012a68:	a949      	add	r1, sp, #292	@ 0x124
 8012a6a:	f8cd 8000 	str.w	r8, [sp]
 8012a6e:	a829      	add	r0, sp, #164	@ 0xa4
 8012a70:	f004 fb46 	bl	8017100 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012a74:	4643      	mov	r3, r8
 8012a76:	4622      	mov	r2, r4
 8012a78:	a949      	add	r1, sp, #292	@ 0x124
 8012a7a:	f8cd 9000 	str.w	r9, [sp]
 8012a7e:	a839      	add	r0, sp, #228	@ 0xe4
 8012a80:	f004 fb3e 	bl	8017100 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012a84:	42af      	cmp	r7, r5
 8012a86:	af12      	add	r7, sp, #72	@ 0x48
 8012a88:	bfb7      	itett	lt
 8012a8a:	2300      	movlt	r3, #0
 8012a8c:	2301      	movge	r3, #1
 8012a8e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8012a90:	ac19      	addlt	r4, sp, #100	@ 0x64
 8012a92:	bfb1      	iteee	lt
 8012a94:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8012a96:	ad19      	addge	r5, sp, #100	@ 0x64
 8012a98:	930e      	strge	r3, [sp, #56]	@ 0x38
 8012a9a:	ac29      	addge	r4, sp, #164	@ 0xa4
 8012a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012aa2:	e887 0003 	stmia.w	r7, {r0, r1}
 8012aa6:	b928      	cbnz	r0, 8012ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8012aa8:	4b80      	ldr	r3, [pc, #512]	@ (8012cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8012aaa:	6818      	ldr	r0, [r3, #0]
 8012aac:	6803      	ldr	r3, [r0, #0]
 8012aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ab0:	4798      	blx	r3
 8012ab2:	6038      	str	r0, [r7, #0]
 8012ab4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012ab6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012aba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012abe:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8012ac0:	930c      	str	r3, [sp, #48]	@ 0x30
 8012ac2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012ac4:	6963      	ldr	r3, [r4, #20]
 8012ac6:	440b      	add	r3, r1
 8012ac8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012acc:	4408      	add	r0, r1
 8012ace:	b200      	sxth	r0, r0
 8012ad0:	4283      	cmp	r3, r0
 8012ad2:	900d      	str	r0, [sp, #52]	@ 0x34
 8012ad4:	f280 80dd 	bge.w	8012c92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8012ad8:	428b      	cmp	r3, r1
 8012ada:	da08      	bge.n	8012aee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012adc:	2a00      	cmp	r2, #0
 8012ade:	dd06      	ble.n	8012aee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012ae0:	1acb      	subs	r3, r1, r3
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	f2c0 80e4 	blt.w	8012cb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	f300 80e2 	bgt.w	8012cb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8012aee:	6967      	ldr	r7, [r4, #20]
 8012af0:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8012af4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012af6:	443b      	add	r3, r7
 8012af8:	461f      	mov	r7, r3
 8012afa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012afc:	1bdf      	subs	r7, r3, r7
 8012afe:	4297      	cmp	r7, r2
 8012b00:	bfa8      	it	ge
 8012b02:	4617      	movge	r7, r2
 8012b04:	2f00      	cmp	r7, #0
 8012b06:	f340 8166 	ble.w	8012dd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8012b0a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012b0c:	6829      	ldr	r1, [r5, #0]
 8012b0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b12:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012b16:	4411      	add	r1, r2
 8012b18:	6820      	ldr	r0, [r4, #0]
 8012b1a:	4299      	cmp	r1, r3
 8012b1c:	dd1a      	ble.n	8012b54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012b1e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012b22:	4402      	add	r2, r0
 8012b24:	440b      	add	r3, r1
 8012b26:	b21b      	sxth	r3, r3
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	dc13      	bgt.n	8012b54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012b2c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012b2e:	a912      	add	r1, sp, #72	@ 0x48
 8012b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	9206      	str	r2, [sp, #24]
 8012b38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012b3a:	9500      	str	r5, [sp, #0]
 8012b3c:	9205      	str	r2, [sp, #20]
 8012b3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012b40:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012b44:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8012b46:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012b4a:	aa49      	add	r2, sp, #292	@ 0x124
 8012b4c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8012b50:	4623      	mov	r3, r4
 8012b52:	47c8      	blx	r9
 8012b54:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8012b58:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8012b5c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8012b60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b64:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8012b68:	68a1      	ldr	r1, [r4, #8]
 8012b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b6e:	ed94 6a08 	vldr	s12, [r4, #32]
 8012b72:	edd4 6a07 	vldr	s13, [r4, #28]
 8012b76:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012b7a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012b7e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012b82:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012b86:	edc4 6a07 	vstr	s13, [r4, #28]
 8012b8a:	441a      	add	r2, r3
 8012b8c:	6963      	ldr	r3, [r4, #20]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	6022      	str	r2, [r4, #0]
 8012b92:	6163      	str	r3, [r4, #20]
 8012b94:	69a3      	ldr	r3, [r4, #24]
 8012b96:	3b01      	subs	r3, #1
 8012b98:	61a3      	str	r3, [r4, #24]
 8012b9a:	6923      	ldr	r3, [r4, #16]
 8012b9c:	440b      	add	r3, r1
 8012b9e:	68e1      	ldr	r1, [r4, #12]
 8012ba0:	428b      	cmp	r3, r1
 8012ba2:	6123      	str	r3, [r4, #16]
 8012ba4:	db15      	blt.n	8012bd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8012ba6:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8012baa:	3201      	adds	r2, #1
 8012bac:	1a5b      	subs	r3, r3, r1
 8012bae:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012bb2:	6022      	str	r2, [r4, #0]
 8012bb4:	6123      	str	r3, [r4, #16]
 8012bb6:	edc4 6a07 	vstr	s13, [r4, #28]
 8012bba:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8012bbe:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012bc2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012bc6:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8012bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bce:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012bd2:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8012bd6:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8012bda:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8012bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012be2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8012be6:	68a9      	ldr	r1, [r5, #8]
 8012be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012bec:	ed95 6a08 	vldr	s12, [r5, #32]
 8012bf0:	edd5 6a07 	vldr	s13, [r5, #28]
 8012bf4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012bf8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012bfc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012c00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c04:	edc5 6a07 	vstr	s13, [r5, #28]
 8012c08:	441a      	add	r2, r3
 8012c0a:	696b      	ldr	r3, [r5, #20]
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	602a      	str	r2, [r5, #0]
 8012c10:	616b      	str	r3, [r5, #20]
 8012c12:	69ab      	ldr	r3, [r5, #24]
 8012c14:	3b01      	subs	r3, #1
 8012c16:	61ab      	str	r3, [r5, #24]
 8012c18:	692b      	ldr	r3, [r5, #16]
 8012c1a:	440b      	add	r3, r1
 8012c1c:	68e9      	ldr	r1, [r5, #12]
 8012c1e:	428b      	cmp	r3, r1
 8012c20:	612b      	str	r3, [r5, #16]
 8012c22:	db15      	blt.n	8012c50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8012c24:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8012c28:	3201      	adds	r2, #1
 8012c2a:	1a5b      	subs	r3, r3, r1
 8012c2c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012c30:	602a      	str	r2, [r5, #0]
 8012c32:	612b      	str	r3, [r5, #16]
 8012c34:	edc5 6a07 	vstr	s13, [r5, #28]
 8012c38:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8012c3c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012c40:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012c44:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8012c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c4c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012c50:	3f01      	subs	r7, #1
 8012c52:	e757      	b.n	8012b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8012c54:	4299      	cmp	r1, r3
 8012c56:	dc13      	bgt.n	8012c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	da14      	bge.n	8012c86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8012c5c:	2502      	movs	r5, #2
 8012c5e:	2703      	movs	r7, #3
 8012c60:	f04f 0800 	mov.w	r8, #0
 8012c64:	46a9      	mov	r9, r5
 8012c66:	f04f 0a01 	mov.w	sl, #1
 8012c6a:	e6ef      	b.n	8012a4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012c6c:	2501      	movs	r5, #1
 8012c6e:	2700      	movs	r7, #0
 8012c70:	46a9      	mov	r9, r5
 8012c72:	46b8      	mov	r8, r7
 8012c74:	f04f 0a02 	mov.w	sl, #2
 8012c78:	e6e8      	b.n	8012a4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012c7a:	2501      	movs	r5, #1
 8012c7c:	2702      	movs	r7, #2
 8012c7e:	e6e1      	b.n	8012a44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8012c80:	2500      	movs	r5, #0
 8012c82:	2701      	movs	r7, #1
 8012c84:	e7f4      	b.n	8012c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8012c86:	2702      	movs	r7, #2
 8012c88:	2503      	movs	r5, #3
 8012c8a:	f04f 0900 	mov.w	r9, #0
 8012c8e:	46b8      	mov	r8, r7
 8012c90:	e7e9      	b.n	8012c66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8012c92:	4613      	mov	r3, r2
 8012c94:	e728      	b.n	8012ae8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8012c96:	bf00      	nop
 8012c98:	240251e8 	.word	0x240251e8
 8012c9c:	fffd8f01 	.word	0xfffd8f01
 8012ca0:	00027100 	.word	0x00027100
 8012ca4:	0004e1ff 	.word	0x0004e1ff
 8012ca8:	0004e1fe 	.word	0x0004e1fe
 8012cac:	240251f0 	.word	0x240251f0
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012cb4:	469e      	mov	lr, r3
 8012cb6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8012cb8:	469c      	mov	ip, r3
 8012cba:	9111      	str	r1, [sp, #68]	@ 0x44
 8012cbc:	f04f 0900 	mov.w	r9, #0
 8012cc0:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8012cc4:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8012cc8:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8012ccc:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8012cd0:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8012cd4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012cd8:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8012cdc:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8012ce0:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8012ce4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8012ce8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8012cec:	f1bc 0f00 	cmp.w	ip, #0
 8012cf0:	d147      	bne.n	8012d82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8012cf2:	eb03 0c07 	add.w	ip, r3, r7
 8012cf6:	1ad7      	subs	r7, r2, r3
 8012cf8:	f1b9 0f00 	cmp.w	r9, #0
 8012cfc:	d009      	beq.n	8012d12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012cfe:	9029      	str	r0, [sp, #164]	@ 0xa4
 8012d00:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8012d04:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8012d08:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8012d0c:	912d      	str	r1, [sp, #180]	@ 0xb4
 8012d0e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8012d12:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8012d14:	f04f 0800 	mov.w	r8, #0
 8012d18:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012d1c:	9111      	str	r1, [sp, #68]	@ 0x44
 8012d1e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8012d22:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8012d26:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8012d2a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8012d2e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8012d32:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8012d36:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8012d3a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8012d3e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8012d42:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8012d46:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8012d4a:	f1be 0f00 	cmp.w	lr, #0
 8012d4e:	d031      	beq.n	8012db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012d50:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012d52:	4450      	add	r0, sl
 8012d54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012d58:	4431      	add	r1, r6
 8012d5a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012d5e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012d62:	4549      	cmp	r1, r9
 8012d64:	db08      	blt.n	8012d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8012d66:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012d6a:	3001      	adds	r0, #1
 8012d6c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012d70:	eba1 0109 	sub.w	r1, r1, r9
 8012d74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012d78:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012d7c:	f04f 0801 	mov.w	r8, #1
 8012d80:	e7e3      	b.n	8012d4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8012d82:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012d84:	4450      	add	r0, sl
 8012d86:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012d8a:	4431      	add	r1, r6
 8012d8c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012d90:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012d94:	4541      	cmp	r1, r8
 8012d96:	db08      	blt.n	8012daa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8012d98:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012d9c:	3001      	adds	r0, #1
 8012d9e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012da2:	eba1 0108 	sub.w	r1, r1, r8
 8012da6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012daa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012dae:	f04f 0901 	mov.w	r9, #1
 8012db2:	e79b      	b.n	8012cec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012db4:	449c      	add	ip, r3
 8012db6:	1aff      	subs	r7, r7, r3
 8012db8:	f1b8 0f00 	cmp.w	r8, #0
 8012dbc:	d009      	beq.n	8012dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8012dbe:	9019      	str	r0, [sp, #100]	@ 0x64
 8012dc0:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8012dc4:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8012dc8:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8012dcc:	911d      	str	r1, [sp, #116]	@ 0x74
 8012dce:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8012dd2:	1ad2      	subs	r2, r2, r3
 8012dd4:	e68b      	b.n	8012aee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012dd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dd8:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f000 80d1 	beq.w	8012f82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012de0:	ad19      	add	r5, sp, #100	@ 0x64
 8012de2:	ac39      	add	r4, sp, #228	@ 0xe4
 8012de4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012de6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012dea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012dee:	930c      	str	r3, [sp, #48]	@ 0x30
 8012df0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012df2:	6963      	ldr	r3, [r4, #20]
 8012df4:	440b      	add	r3, r1
 8012df6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012dfa:	4408      	add	r0, r1
 8012dfc:	b200      	sxth	r0, r0
 8012dfe:	4283      	cmp	r3, r0
 8012e00:	900d      	str	r0, [sp, #52]	@ 0x34
 8012e02:	f280 80c1 	bge.w	8012f88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8012e06:	428b      	cmp	r3, r1
 8012e08:	da08      	bge.n	8012e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012e0a:	2a00      	cmp	r2, #0
 8012e0c:	dd06      	ble.n	8012e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012e0e:	1acb      	subs	r3, r1, r3
 8012e10:	429a      	cmp	r2, r3
 8012e12:	f2c0 80bb 	blt.w	8012f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	f300 80b9 	bgt.w	8012f8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012e1c:	6967      	ldr	r7, [r4, #20]
 8012e1e:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8012e22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e24:	443b      	add	r3, r7
 8012e26:	461f      	mov	r7, r3
 8012e28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e2a:	1bdf      	subs	r7, r3, r7
 8012e2c:	4297      	cmp	r7, r2
 8012e2e:	bfa8      	it	ge
 8012e30:	4617      	movge	r7, r2
 8012e32:	2f00      	cmp	r7, #0
 8012e34:	f340 813c 	ble.w	80130b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8012e38:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012e3a:	6829      	ldr	r1, [r5, #0]
 8012e3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e40:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012e44:	4411      	add	r1, r2
 8012e46:	6820      	ldr	r0, [r4, #0]
 8012e48:	4299      	cmp	r1, r3
 8012e4a:	dd1a      	ble.n	8012e82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012e4c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012e50:	4402      	add	r2, r0
 8012e52:	440b      	add	r3, r1
 8012e54:	b21b      	sxth	r3, r3
 8012e56:	429a      	cmp	r2, r3
 8012e58:	dc13      	bgt.n	8012e82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012e5a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012e5c:	a912      	add	r1, sp, #72	@ 0x48
 8012e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	9206      	str	r2, [sp, #24]
 8012e66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012e68:	9500      	str	r5, [sp, #0]
 8012e6a:	9205      	str	r2, [sp, #20]
 8012e6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012e6e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012e72:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8012e74:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012e78:	aa49      	add	r2, sp, #292	@ 0x124
 8012e7a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8012e7e:	4623      	mov	r3, r4
 8012e80:	47c8      	blx	r9
 8012e82:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8012e86:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8012e8a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8012e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e92:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8012e96:	68a1      	ldr	r1, [r4, #8]
 8012e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e9c:	ed94 6a08 	vldr	s12, [r4, #32]
 8012ea0:	edd4 6a07 	vldr	s13, [r4, #28]
 8012ea4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012ea8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012eac:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012eb0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012eb4:	edc4 6a07 	vstr	s13, [r4, #28]
 8012eb8:	441a      	add	r2, r3
 8012eba:	6963      	ldr	r3, [r4, #20]
 8012ebc:	3301      	adds	r3, #1
 8012ebe:	6022      	str	r2, [r4, #0]
 8012ec0:	6163      	str	r3, [r4, #20]
 8012ec2:	69a3      	ldr	r3, [r4, #24]
 8012ec4:	3b01      	subs	r3, #1
 8012ec6:	61a3      	str	r3, [r4, #24]
 8012ec8:	6923      	ldr	r3, [r4, #16]
 8012eca:	440b      	add	r3, r1
 8012ecc:	68e1      	ldr	r1, [r4, #12]
 8012ece:	428b      	cmp	r3, r1
 8012ed0:	6123      	str	r3, [r4, #16]
 8012ed2:	db15      	blt.n	8012f00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012ed4:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8012ed8:	3201      	adds	r2, #1
 8012eda:	1a5b      	subs	r3, r3, r1
 8012edc:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012ee0:	6022      	str	r2, [r4, #0]
 8012ee2:	6123      	str	r3, [r4, #16]
 8012ee4:	edc4 6a07 	vstr	s13, [r4, #28]
 8012ee8:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8012eec:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012ef0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012ef4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8012ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012efc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012f00:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8012f04:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8012f08:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8012f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f10:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8012f14:	68a9      	ldr	r1, [r5, #8]
 8012f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f1a:	ed95 6a08 	vldr	s12, [r5, #32]
 8012f1e:	edd5 6a07 	vldr	s13, [r5, #28]
 8012f22:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012f26:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012f2a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012f2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f32:	edc5 6a07 	vstr	s13, [r5, #28]
 8012f36:	441a      	add	r2, r3
 8012f38:	696b      	ldr	r3, [r5, #20]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	602a      	str	r2, [r5, #0]
 8012f3e:	616b      	str	r3, [r5, #20]
 8012f40:	69ab      	ldr	r3, [r5, #24]
 8012f42:	3b01      	subs	r3, #1
 8012f44:	61ab      	str	r3, [r5, #24]
 8012f46:	692b      	ldr	r3, [r5, #16]
 8012f48:	440b      	add	r3, r1
 8012f4a:	68e9      	ldr	r1, [r5, #12]
 8012f4c:	428b      	cmp	r3, r1
 8012f4e:	612b      	str	r3, [r5, #16]
 8012f50:	db15      	blt.n	8012f7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8012f52:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8012f56:	3201      	adds	r2, #1
 8012f58:	1a5b      	subs	r3, r3, r1
 8012f5a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012f5e:	602a      	str	r2, [r5, #0]
 8012f60:	612b      	str	r3, [r5, #16]
 8012f62:	edc5 6a07 	vstr	s13, [r5, #28]
 8012f66:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8012f6a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012f6e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012f72:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8012f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f7a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012f7e:	3f01      	subs	r7, #1
 8012f80:	e757      	b.n	8012e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8012f82:	ad39      	add	r5, sp, #228	@ 0xe4
 8012f84:	ac19      	add	r4, sp, #100	@ 0x64
 8012f86:	e72d      	b.n	8012de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8012f88:	4613      	mov	r3, r2
 8012f8a:	e744      	b.n	8012e16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8012f90:	469e      	mov	lr, r3
 8012f92:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8012f96:	461f      	mov	r7, r3
 8012f98:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8012f9c:	f04f 0900 	mov.w	r9, #0
 8012fa0:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8012fa4:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8012fa8:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8012fac:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8012fb0:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8012fb4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8012fb6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8012fba:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8012fbe:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8012fc2:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8012fc6:	960e      	str	r6, [sp, #56]	@ 0x38
 8012fc8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8012fcc:	2f00      	cmp	r7, #0
 8012fce:	d146      	bne.n	801305e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8012fd0:	449c      	add	ip, r3
 8012fd2:	1ad7      	subs	r7, r2, r3
 8012fd4:	f1b9 0f00 	cmp.w	r9, #0
 8012fd8:	d009      	beq.n	8012fee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8012fda:	9039      	str	r0, [sp, #228]	@ 0xe4
 8012fdc:	913d      	str	r1, [sp, #244]	@ 0xf4
 8012fde:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8012fe2:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8012fe6:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8012fea:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8012fee:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8012ff0:	f04f 0800 	mov.w	r8, #0
 8012ff4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012ff8:	910e      	str	r1, [sp, #56]	@ 0x38
 8012ffa:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8012ffe:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8013002:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8013006:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801300a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801300e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8013012:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8013016:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801301a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801301e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8013022:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8013026:	f1be 0f00 	cmp.w	lr, #0
 801302a:	d030      	beq.n	801308e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801302c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801302e:	4450      	add	r0, sl
 8013030:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013034:	4431      	add	r1, r6
 8013036:	ee37 7a04 	vadd.f32	s14, s14, s8
 801303a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801303e:	4549      	cmp	r1, r9
 8013040:	db08      	blt.n	8013054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8013042:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013046:	3001      	adds	r0, #1
 8013048:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801304c:	eba1 0109 	sub.w	r1, r1, r9
 8013050:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013054:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013058:	f04f 0801 	mov.w	r8, #1
 801305c:	e7e3      	b.n	8013026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801305e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013060:	4450      	add	r0, sl
 8013062:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013066:	4431      	add	r1, r6
 8013068:	ee77 7a84 	vadd.f32	s15, s15, s8
 801306c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013070:	4541      	cmp	r1, r8
 8013072:	db08      	blt.n	8013086 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8013074:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013078:	3001      	adds	r0, #1
 801307a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801307e:	eba1 0108 	sub.w	r1, r1, r8
 8013082:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013086:	3f01      	subs	r7, #1
 8013088:	f04f 0901 	mov.w	r9, #1
 801308c:	e79e      	b.n	8012fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801308e:	449c      	add	ip, r3
 8013090:	1aff      	subs	r7, r7, r3
 8013092:	f1b8 0f00 	cmp.w	r8, #0
 8013096:	d009      	beq.n	80130ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8013098:	9019      	str	r0, [sp, #100]	@ 0x64
 801309a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801309e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80130a2:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80130a6:	911d      	str	r1, [sp, #116]	@ 0x74
 80130a8:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80130ac:	1ad2      	subs	r2, r2, r3
 80130ae:	e6b5      	b.n	8012e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80130b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	b923      	cbnz	r3, 80130c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80130b6:	4b04      	ldr	r3, [pc, #16]	@ (80130c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80130b8:	6818      	ldr	r0, [r3, #0]
 80130ba:	6803      	ldr	r3, [r0, #0]
 80130bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130be:	4798      	blx	r3
 80130c0:	b05b      	add	sp, #364	@ 0x16c
 80130c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c6:	bf00      	nop
 80130c8:	240251f0 	.word	0x240251f0

080130cc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80130cc:	b570      	push	{r4, r5, r6, lr}
 80130ce:	4604      	mov	r4, r0
 80130d0:	2500      	movs	r5, #0
 80130d2:	9805      	ldr	r0, [sp, #20]
 80130d4:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80130d8:	6061      	str	r1, [r4, #4]
 80130da:	8263      	strh	r3, [r4, #18]
 80130dc:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80130e0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80130e4:	8025      	strh	r5, [r4, #0]
 80130e6:	7221      	strb	r1, [r4, #8]
 80130e8:	7266      	strb	r6, [r4, #9]
 80130ea:	60e0      	str	r0, [r4, #12]
 80130ec:	8222      	strh	r2, [r4, #16]
 80130ee:	82a3      	strh	r3, [r4, #20]
 80130f0:	82e5      	strh	r5, [r4, #22]
 80130f2:	8325      	strh	r5, [r4, #24]
 80130f4:	8365      	strh	r5, [r4, #26]
 80130f6:	83a5      	strh	r5, [r4, #28]
 80130f8:	83e5      	strh	r5, [r4, #30]
 80130fa:	8425      	strh	r5, [r4, #32]
 80130fc:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8013100:	b32e      	cbz	r6, 801314e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013102:	6803      	ldr	r3, [r0, #0]
 8013104:	695b      	ldr	r3, [r3, #20]
 8013106:	4798      	blx	r3
 8013108:	4606      	mov	r6, r0
 801310a:	b300      	cbz	r0, 801314e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801310c:	68e0      	ldr	r0, [r4, #12]
 801310e:	4631      	mov	r1, r6
 8013110:	6803      	ldr	r3, [r0, #0]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	4798      	blx	r3
 8013116:	4605      	mov	r5, r0
 8013118:	b1c8      	cbz	r0, 801314e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801311a:	7b43      	ldrb	r3, [r0, #13]
 801311c:	7a82      	ldrb	r2, [r0, #10]
 801311e:	005b      	lsls	r3, r3, #1
 8013120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013124:	4313      	orrs	r3, r2
 8013126:	8423      	strh	r3, [r4, #32]
 8013128:	7a63      	ldrb	r3, [r4, #9]
 801312a:	2b06      	cmp	r3, #6
 801312c:	d10f      	bne.n	801314e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801312e:	68e0      	ldr	r0, [r4, #12]
 8013130:	462a      	mov	r2, r5
 8013132:	4631      	mov	r1, r6
 8013134:	6803      	ldr	r3, [r0, #0]
 8013136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013138:	4798      	blx	r3
 801313a:	7b6b      	ldrb	r3, [r5, #13]
 801313c:	005b      	lsls	r3, r3, #1
 801313e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013142:	7aab      	ldrb	r3, [r5, #10]
 8013144:	4313      	orrs	r3, r2
 8013146:	4418      	add	r0, r3
 8013148:	8c23      	ldrh	r3, [r4, #32]
 801314a:	4418      	add	r0, r3
 801314c:	8420      	strh	r0, [r4, #32]
 801314e:	4620      	mov	r0, r4
 8013150:	bd70      	pop	{r4, r5, r6, pc}

08013152 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8013152:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013156:	2400      	movs	r4, #0
 8013158:	b085      	sub	sp, #20
 801315a:	4681      	mov	r9, r0
 801315c:	4688      	mov	r8, r1
 801315e:	4692      	mov	sl, r2
 8013160:	469b      	mov	fp, r3
 8013162:	4627      	mov	r7, r4
 8013164:	4625      	mov	r5, r4
 8013166:	4626      	mov	r6, r4
 8013168:	4554      	cmp	r4, sl
 801316a:	da2a      	bge.n	80131c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801316c:	2300      	movs	r3, #0
 801316e:	9303      	str	r3, [sp, #12]
 8013170:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013174:	429d      	cmp	r5, r3
 8013176:	d004      	beq.n	8013182 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8013178:	f242 030b 	movw	r3, #8203	@ 0x200b
 801317c:	429d      	cmp	r5, r3
 801317e:	bf18      	it	ne
 8013180:	462f      	movne	r7, r5
 8013182:	ab03      	add	r3, sp, #12
 8013184:	4642      	mov	r2, r8
 8013186:	4659      	mov	r1, fp
 8013188:	4648      	mov	r0, r9
 801318a:	f003 fc9f 	bl	8016acc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801318e:	4605      	mov	r5, r0
 8013190:	b1b8      	cbz	r0, 80131c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013192:	280a      	cmp	r0, #10
 8013194:	d015      	beq.n	80131c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013196:	9a03      	ldr	r2, [sp, #12]
 8013198:	b18a      	cbz	r2, 80131be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801319a:	7b50      	ldrb	r0, [r2, #13]
 801319c:	4639      	mov	r1, r7
 801319e:	7a93      	ldrb	r3, [r2, #10]
 80131a0:	0040      	lsls	r0, r0, #1
 80131a2:	8895      	ldrh	r5, [r2, #4]
 80131a4:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80131a8:	4303      	orrs	r3, r0
 80131aa:	4640      	mov	r0, r8
 80131ac:	9301      	str	r3, [sp, #4]
 80131ae:	f8d8 3000 	ldr.w	r3, [r8]
 80131b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131b4:	4798      	blx	r3
 80131b6:	9b01      	ldr	r3, [sp, #4]
 80131b8:	4418      	add	r0, r3
 80131ba:	4406      	add	r6, r0
 80131bc:	b2b6      	uxth	r6, r6
 80131be:	3401      	adds	r4, #1
 80131c0:	e7d2      	b.n	8013168 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80131c2:	4630      	mov	r0, r6
 80131c4:	b005      	add	sp, #20
 80131c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080131ca <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80131ca:	2a02      	cmp	r2, #2
 80131cc:	b530      	push	{r4, r5, lr}
 80131ce:	d011      	beq.n	80131f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80131d0:	2a03      	cmp	r2, #3
 80131d2:	d01c      	beq.n	801320e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80131d4:	2a01      	cmp	r2, #1
 80131d6:	d10c      	bne.n	80131f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80131d8:	888b      	ldrh	r3, [r1, #4]
 80131da:	8801      	ldrh	r1, [r0, #0]
 80131dc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80131e0:	1a5b      	subs	r3, r3, r1
 80131e2:	8844      	ldrh	r4, [r0, #2]
 80131e4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80131e8:	1a9b      	subs	r3, r3, r2
 80131ea:	8004      	strh	r4, [r0, #0]
 80131ec:	8081      	strh	r1, [r0, #4]
 80131ee:	8043      	strh	r3, [r0, #2]
 80131f0:	80c2      	strh	r2, [r0, #6]
 80131f2:	bd30      	pop	{r4, r5, pc}
 80131f4:	88cb      	ldrh	r3, [r1, #6]
 80131f6:	8842      	ldrh	r2, [r0, #2]
 80131f8:	1a9b      	subs	r3, r3, r2
 80131fa:	88c2      	ldrh	r2, [r0, #6]
 80131fc:	1a9b      	subs	r3, r3, r2
 80131fe:	888a      	ldrh	r2, [r1, #4]
 8013200:	8801      	ldrh	r1, [r0, #0]
 8013202:	8043      	strh	r3, [r0, #2]
 8013204:	1a52      	subs	r2, r2, r1
 8013206:	8881      	ldrh	r1, [r0, #4]
 8013208:	1a52      	subs	r2, r2, r1
 801320a:	8002      	strh	r2, [r0, #0]
 801320c:	e7f1      	b.n	80131f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801320e:	88cb      	ldrh	r3, [r1, #6]
 8013210:	8841      	ldrh	r1, [r0, #2]
 8013212:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013216:	1a5b      	subs	r3, r3, r1
 8013218:	f9b0 5000 	ldrsh.w	r5, [r0]
 801321c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8013220:	1a9b      	subs	r3, r3, r2
 8013222:	8045      	strh	r5, [r0, #2]
 8013224:	8082      	strh	r2, [r0, #4]
 8013226:	8003      	strh	r3, [r0, #0]
 8013228:	80c4      	strh	r4, [r0, #6]
 801322a:	e7e2      	b.n	80131f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801322c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013230:	b09f      	sub	sp, #124	@ 0x7c
 8013232:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013234:	9312      	str	r3, [sp, #72]	@ 0x48
 8013236:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013238:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801323a:	8812      	ldrh	r2, [r2, #0]
 801323c:	889b      	ldrh	r3, [r3, #4]
 801323e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8013240:	4413      	add	r3, r2
 8013242:	900e      	str	r0, [sp, #56]	@ 0x38
 8013244:	6828      	ldr	r0, [r5, #0]
 8013246:	b21b      	sxth	r3, r3
 8013248:	9117      	str	r1, [sp, #92]	@ 0x5c
 801324a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801324e:	9311      	str	r3, [sp, #68]	@ 0x44
 8013250:	6803      	ldr	r3, [r0, #0]
 8013252:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8013256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013258:	4798      	blx	r3
 801325a:	682b      	ldr	r3, [r5, #0]
 801325c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801325e:	7b1a      	ldrb	r2, [r3, #12]
 8013260:	7adb      	ldrb	r3, [r3, #11]
 8013262:	9215      	str	r2, [sp, #84]	@ 0x54
 8013264:	9316      	str	r3, [sp, #88]	@ 0x58
 8013266:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801326a:	2c00      	cmp	r4, #0
 801326c:	d067      	beq.n	801333e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801326e:	7c2b      	ldrb	r3, [r5, #16]
 8013270:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8013272:	2b06      	cmp	r3, #6
 8013274:	bf14      	ite	ne
 8013276:	2301      	movne	r3, #1
 8013278:	2302      	moveq	r3, #2
 801327a:	4413      	add	r3, r2
 801327c:	f04f 0900 	mov.w	r9, #0
 8013280:	9310      	str	r3, [sp, #64]	@ 0x40
 8013282:	464c      	mov	r4, r9
 8013284:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8013288:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 801328c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801328e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013290:	4293      	cmp	r3, r2
 8013292:	f280 808b 	bge.w	80133ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8013296:	2300      	movs	r3, #0
 8013298:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 801329c:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 80132a0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80132a4:	429c      	cmp	r4, r3
 80132a6:	d006      	beq.n	80132b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 80132a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80132aa:	f242 020b 	movw	r2, #8203	@ 0x200b
 80132ae:	4294      	cmp	r4, r2
 80132b0:	bf18      	it	ne
 80132b2:	4623      	movne	r3, r4
 80132b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80132b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80132b8:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80132ba:	682a      	ldr	r2, [r5, #0]
 80132bc:	428b      	cmp	r3, r1
 80132be:	db40      	blt.n	8013342 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80132c0:	6813      	ldr	r3, [r2, #0]
 80132c2:	4610      	mov	r0, r2
 80132c4:	695b      	ldr	r3, [r3, #20]
 80132c6:	4798      	blx	r3
 80132c8:	4604      	mov	r4, r0
 80132ca:	6828      	ldr	r0, [r5, #0]
 80132cc:	aa1d      	add	r2, sp, #116	@ 0x74
 80132ce:	4621      	mov	r1, r4
 80132d0:	6803      	ldr	r3, [r0, #0]
 80132d2:	689f      	ldr	r7, [r3, #8]
 80132d4:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80132d8:	47b8      	blx	r7
 80132da:	901c      	str	r0, [sp, #112]	@ 0x70
 80132dc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80132e0:	429c      	cmp	r4, r3
 80132e2:	f000 80eb 	beq.w	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80132e6:	f242 030b 	movw	r3, #8203	@ 0x200b
 80132ea:	429c      	cmp	r4, r3
 80132ec:	f000 80e6 	beq.w	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80132f0:	2c00      	cmp	r4, #0
 80132f2:	f000 810d 	beq.w	8013510 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80132f6:	2c0a      	cmp	r4, #10
 80132f8:	d05e      	beq.n	80133b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80132fa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80132fc:	b36a      	cbz	r2, 801335a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80132fe:	8894      	ldrh	r4, [r2, #4]
 8013300:	f1bb 0f00 	cmp.w	fp, #0
 8013304:	d03a      	beq.n	801337c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8013306:	f892 900d 	ldrb.w	r9, [r2, #13]
 801330a:	f1bb 0f01 	cmp.w	fp, #1
 801330e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8013312:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8013316:	f892 900a 	ldrb.w	r9, [r2, #10]
 801331a:	ea49 0903 	orr.w	r9, r9, r3
 801331e:	d133      	bne.n	8013388 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8013320:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013322:	eba6 0609 	sub.w	r6, r6, r9
 8013326:	2b00      	cmp	r3, #0
 8013328:	d14d      	bne.n	80133c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801332a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801332c:	eb09 0306 	add.w	r3, r9, r6
 8013330:	4413      	add	r3, r2
 8013332:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013334:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013338:	4293      	cmp	r3, r2
 801333a:	da4e      	bge.n	80133da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801333c:	e036      	b.n	80133ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801333e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8013340:	e79c      	b.n	801327c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8013342:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8013346:	4659      	mov	r1, fp
 8013348:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801334a:	9301      	str	r3, [sp, #4]
 801334c:	ab1d      	add	r3, sp, #116	@ 0x74
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	ab1c      	add	r3, sp, #112	@ 0x70
 8013352:	f003 fc04 	bl	8016b5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8013356:	4604      	mov	r4, r0
 8013358:	e7c0      	b.n	80132dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801335a:	6828      	ldr	r0, [r5, #0]
 801335c:	6803      	ldr	r3, [r0, #0]
 801335e:	691b      	ldr	r3, [r3, #16]
 8013360:	4798      	blx	r3
 8013362:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013366:	4298      	cmp	r0, r3
 8013368:	f000 80a8 	beq.w	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801336c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013370:	4298      	cmp	r0, r3
 8013372:	f000 80a3 	beq.w	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013376:	f1bb 0f00 	cmp.w	fp, #0
 801337a:	d100      	bne.n	801337e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801337c:	444e      	add	r6, r9
 801337e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013380:	2a00      	cmp	r2, #0
 8013382:	d1c0      	bne.n	8013306 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8013384:	4691      	mov	r9, r2
 8013386:	e099      	b.n	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801338a:	2b00      	cmp	r3, #0
 801338c:	f000 80c2 	beq.w	8013514 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8013390:	f1bb 0f00 	cmp.w	fp, #0
 8013394:	d117      	bne.n	80133c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8013396:	6828      	ldr	r0, [r5, #0]
 8013398:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801339a:	6803      	ldr	r3, [r0, #0]
 801339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801339e:	4798      	blx	r3
 80133a0:	4406      	add	r6, r0
 80133a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80133a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80133a6:	1af3      	subs	r3, r6, r3
 80133a8:	4293      	cmp	r3, r2
 80133aa:	dd16      	ble.n	80133da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80133ac:	2c00      	cmp	r4, #0
 80133ae:	f000 80af 	beq.w	8013510 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80133b2:	2c0a      	cmp	r4, #10
 80133b4:	f040 809d 	bne.w	80134f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 80133b8:	240a      	movs	r4, #10
 80133ba:	fab4 f084 	clz	r0, r4
 80133be:	0940      	lsrs	r0, r0, #5
 80133c0:	b01f      	add	sp, #124	@ 0x7c
 80133c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133c6:	6828      	ldr	r0, [r5, #0]
 80133c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80133ca:	6803      	ldr	r3, [r0, #0]
 80133cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133ce:	4798      	blx	r3
 80133d0:	f1bb 0f01 	cmp.w	fp, #1
 80133d4:	eba6 0600 	sub.w	r6, r6, r0
 80133d8:	d0a7      	beq.n	801332a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80133da:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80133dc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80133de:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80133e2:	f9b3 8000 	ldrsh.w	r8, [r3]
 80133e6:	7b43      	ldrb	r3, [r0, #13]
 80133e8:	4431      	add	r1, r6
 80133ea:	015b      	lsls	r3, r3, #5
 80133ec:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80133f0:	7983      	ldrb	r3, [r0, #6]
 80133f2:	4313      	orrs	r3, r2
 80133f4:	440b      	add	r3, r1
 80133f6:	4543      	cmp	r3, r8
 80133f8:	db60      	blt.n	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80133fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80133fc:	4299      	cmp	r1, r3
 80133fe:	da5d      	bge.n	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013400:	6828      	ldr	r0, [r5, #0]
 8013402:	45b0      	cmp	r8, r6
 8013404:	6803      	ldr	r3, [r0, #0]
 8013406:	bfcc      	ite	gt
 8013408:	eba8 0806 	subgt.w	r8, r8, r6
 801340c:	f04f 0800 	movle.w	r8, #0
 8013410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013412:	bfc8      	it	gt
 8013414:	fa1f f888 	uxthgt.w	r8, r8
 8013418:	4798      	blx	r3
 801341a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801341c:	7b53      	ldrb	r3, [r2, #13]
 801341e:	00d9      	lsls	r1, r3, #3
 8013420:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8013424:	7a11      	ldrb	r1, [r2, #8]
 8013426:	4339      	orrs	r1, r7
 8013428:	065f      	lsls	r7, r3, #25
 801342a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801342c:	bf48      	it	mi
 801342e:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8013432:	4407      	add	r7, r0
 8013434:	bf48      	it	mi
 8013436:	b209      	sxthmi	r1, r1
 8013438:	1a7f      	subs	r7, r7, r1
 801343a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801343c:	b2bf      	uxth	r7, r7
 801343e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013442:	fa0f fa87 	sxth.w	sl, r7
 8013446:	4551      	cmp	r1, sl
 8013448:	dd3c      	ble.n	80134c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801344a:	011b      	lsls	r3, r3, #4
 801344c:	79d0      	ldrb	r0, [r2, #7]
 801344e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013452:	4303      	orrs	r3, r0
 8013454:	449a      	add	sl, r3
 8013456:	4551      	cmp	r1, sl
 8013458:	dc30      	bgt.n	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801345a:	1bcf      	subs	r7, r1, r7
 801345c:	468a      	mov	sl, r1
 801345e:	b23f      	sxth	r7, r7
 8013460:	9219      	str	r2, [sp, #100]	@ 0x64
 8013462:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013464:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013466:	6828      	ldr	r0, [r5, #0]
 8013468:	2a00      	cmp	r2, #0
 801346a:	d12d      	bne.n	80134c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801346c:	9318      	str	r3, [sp, #96]	@ 0x60
 801346e:	b2bf      	uxth	r7, r7
 8013470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013472:	6819      	ldr	r1, [r3, #0]
 8013474:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8013476:	6801      	ldr	r1, [r0, #0]
 8013478:	9314      	str	r3, [sp, #80]	@ 0x50
 801347a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801347c:	4788      	blx	r1
 801347e:	79a9      	ldrb	r1, [r5, #6]
 8013480:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013482:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013484:	7ba9      	ldrb	r1, [r5, #14]
 8013486:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013488:	910a      	str	r1, [sp, #40]	@ 0x28
 801348a:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801348e:	9109      	str	r1, [sp, #36]	@ 0x24
 8013490:	68a9      	ldr	r1, [r5, #8]
 8013492:	9306      	str	r3, [sp, #24]
 8013494:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8013496:	9205      	str	r2, [sp, #20]
 8013498:	9304      	str	r3, [sp, #16]
 801349a:	f8cd a004 	str.w	sl, [sp, #4]
 801349e:	e9cd 8702 	strd	r8, r7, [sp, #8]
 80134a2:	44b0      	add	r8, r6
 80134a4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80134a6:	fa0f f388 	sxth.w	r3, r8
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134ae:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80134b2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80134b4:	681a      	ldr	r2, [r3, #0]
 80134b6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	47b8      	blx	r7
 80134bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80134be:	3301      	adds	r3, #1
 80134c0:	930d      	str	r3, [sp, #52]	@ 0x34
 80134c2:	e6e3      	b.n	801328c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 80134c4:	2700      	movs	r7, #0
 80134c6:	e7cb      	b.n	8013460 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 80134c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80134ca:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80134ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80134d0:	f8dc 1000 	ldr.w	r1, [ip]
 80134d4:	e9cd 6204 	strd	r6, r2, [sp, #16]
 80134d8:	79aa      	ldrb	r2, [r5, #6]
 80134da:	9203      	str	r2, [sp, #12]
 80134dc:	7baa      	ldrb	r2, [r5, #14]
 80134de:	9202      	str	r2, [sp, #8]
 80134e0:	68aa      	ldr	r2, [r5, #8]
 80134e2:	e9cd 0200 	strd	r0, r2, [sp]
 80134e6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80134e8:	4660      	mov	r0, ip
 80134ea:	688f      	ldr	r7, [r1, #8]
 80134ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80134ee:	47b8      	blx	r7
 80134f0:	e7e4      	b.n	80134bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80134f2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80134f4:	3501      	adds	r5, #1
 80134f6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80134f8:	429d      	cmp	r5, r3
 80134fa:	f6bf af5e 	bge.w	80133ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80134fe:	4659      	mov	r1, fp
 8013500:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8013502:	f7f0 ff6b 	bl	80043dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013506:	4604      	mov	r4, r0
 8013508:	b110      	cbz	r0, 8013510 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801350a:	280a      	cmp	r0, #10
 801350c:	d1f2      	bne.n	80134f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 801350e:	e753      	b.n	80133b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013510:	2400      	movs	r4, #0
 8013512:	e752      	b.n	80133ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013514:	f1bb 0f00 	cmp.w	fp, #0
 8013518:	f43f af43 	beq.w	80133a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801351c:	e75d      	b.n	80133da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801351e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801351e:	b530      	push	{r4, r5, lr}
 8013520:	8ac4      	ldrh	r4, [r0, #22]
 8013522:	8b45      	ldrh	r5, [r0, #26]
 8013524:	8343      	strh	r3, [r0, #26]
 8013526:	442c      	add	r4, r5
 8013528:	1ae4      	subs	r4, r4, r3
 801352a:	8b83      	ldrh	r3, [r0, #28]
 801352c:	82c4      	strh	r4, [r0, #22]
 801352e:	8b04      	ldrh	r4, [r0, #24]
 8013530:	4422      	add	r2, r4
 8013532:	440c      	add	r4, r1
 8013534:	1a59      	subs	r1, r3, r1
 8013536:	83c2      	strh	r2, [r0, #30]
 8013538:	8304      	strh	r4, [r0, #24]
 801353a:	8381      	strh	r1, [r0, #28]
 801353c:	bd30      	pop	{r4, r5, pc}

0801353e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801353e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013542:	4604      	mov	r4, r0
 8013544:	8a47      	ldrh	r7, [r0, #18]
 8013546:	68c0      	ldr	r0, [r0, #12]
 8013548:	b085      	sub	sp, #20
 801354a:	6803      	ldr	r3, [r0, #0]
 801354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801354e:	4798      	blx	r3
 8013550:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8013554:	7a63      	ldrb	r3, [r4, #9]
 8013556:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801355a:	3b01      	subs	r3, #1
 801355c:	42b7      	cmp	r7, r6
 801355e:	bfac      	ite	ge
 8013560:	f04f 0900 	movge.w	r9, #0
 8013564:	f04f 0901 	movlt.w	r9, #1
 8013568:	2b05      	cmp	r3, #5
 801356a:	d804      	bhi.n	8013576 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801356c:	e8df f003 	tbb	[pc, r3]
 8013570:	470f0854 	.word	0x470f0854
 8013574:	4c4c      	.short	0x4c4c
 8013576:	2500      	movs	r5, #0
 8013578:	46a9      	mov	r9, r5
 801357a:	462e      	mov	r6, r5
 801357c:	462f      	mov	r7, r5
 801357e:	e00e      	b.n	801359e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013580:	42b7      	cmp	r7, r6
 8013582:	f04f 0500 	mov.w	r5, #0
 8013586:	bfb4      	ite	lt
 8013588:	2600      	movlt	r6, #0
 801358a:	2601      	movge	r6, #1
 801358c:	e7f6      	b.n	801357c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801358e:	42b7      	cmp	r7, r6
 8013590:	464d      	mov	r5, r9
 8013592:	f04f 0900 	mov.w	r9, #0
 8013596:	bfb4      	ite	lt
 8013598:	2600      	movlt	r6, #0
 801359a:	2601      	movge	r6, #1
 801359c:	464f      	mov	r7, r9
 801359e:	f04f 0800 	mov.w	r8, #0
 80135a2:	f8a4 8016 	strh.w	r8, [r4, #22]
 80135a6:	f8a4 8018 	strh.w	r8, [r4, #24]
 80135aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80135ae:	2300      	movs	r3, #0
 80135b0:	9303      	str	r3, [sp, #12]
 80135b2:	8823      	ldrh	r3, [r4, #0]
 80135b4:	2b20      	cmp	r3, #32
 80135b6:	d033      	beq.n	8013620 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80135b8:	f242 010b 	movw	r1, #8203	@ 0x200b
 80135bc:	1a5a      	subs	r2, r3, r1
 80135be:	f1d2 0a00 	rsbs	sl, r2, #0
 80135c2:	eb4a 0a02 	adc.w	sl, sl, r2
 80135c6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d008      	beq.n	80135e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80135ce:	428b      	cmp	r3, r1
 80135d0:	9a01      	ldr	r2, [sp, #4]
 80135d2:	bf0e      	itee	eq
 80135d4:	f04f 0a01 	moveq.w	sl, #1
 80135d8:	461a      	movne	r2, r3
 80135da:	f04f 0a00 	movne.w	sl, #0
 80135de:	9201      	str	r2, [sp, #4]
 80135e0:	ab03      	add	r3, sp, #12
 80135e2:	68e2      	ldr	r2, [r4, #12]
 80135e4:	7a21      	ldrb	r1, [r4, #8]
 80135e6:	6860      	ldr	r0, [r4, #4]
 80135e8:	f003 fa70 	bl	8016acc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80135ec:	8020      	strh	r0, [r4, #0]
 80135ee:	b9d8      	cbnz	r0, 8013628 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80135f0:	8ba2      	ldrh	r2, [r4, #28]
 80135f2:	2300      	movs	r3, #0
 80135f4:	4611      	mov	r1, r2
 80135f6:	4620      	mov	r0, r4
 80135f8:	f7ff ff91 	bl	801351e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80135fc:	e06e      	b.n	80136dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80135fe:	2500      	movs	r5, #0
 8013600:	2701      	movs	r7, #1
 8013602:	46a9      	mov	r9, r5
 8013604:	462e      	mov	r6, r5
 8013606:	e7ca      	b.n	801359e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013608:	42b7      	cmp	r7, r6
 801360a:	f04f 0500 	mov.w	r5, #0
 801360e:	bfb4      	ite	lt
 8013610:	2700      	movlt	r7, #0
 8013612:	2701      	movge	r7, #1
 8013614:	462e      	mov	r6, r5
 8013616:	e7c2      	b.n	801359e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013618:	2500      	movs	r5, #0
 801361a:	2601      	movs	r6, #1
 801361c:	46a9      	mov	r9, r5
 801361e:	e7ad      	b.n	801357c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8013620:	9301      	str	r3, [sp, #4]
 8013622:	f04f 0a01 	mov.w	sl, #1
 8013626:	e7db      	b.n	80135e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8013628:	8b63      	ldrh	r3, [r4, #26]
 801362a:	280a      	cmp	r0, #10
 801362c:	f103 0301 	add.w	r3, r3, #1
 8013630:	8363      	strh	r3, [r4, #26]
 8013632:	d0dd      	beq.n	80135f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8013634:	9a03      	ldr	r2, [sp, #12]
 8013636:	bb62      	cbnz	r2, 8013692 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8013638:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801363c:	4298      	cmp	r0, r3
 801363e:	d003      	beq.n	8013648 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8013640:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013644:	4298      	cmp	r0, r3
 8013646:	d1b2      	bne.n	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013648:	8823      	ldrh	r3, [r4, #0]
 801364a:	8ba1      	ldrh	r1, [r4, #28]
 801364c:	2b20      	cmp	r3, #32
 801364e:	d003      	beq.n	8013658 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8013650:	f242 000b 	movw	r0, #8203	@ 0x200b
 8013654:	4283      	cmp	r3, r0
 8013656:	d131      	bne.n	80136bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8013658:	f1ba 0f00 	cmp.w	sl, #0
 801365c:	bf0a      	itet	eq
 801365e:	4688      	moveq	r8, r1
 8013660:	4650      	movne	r0, sl
 8013662:	2001      	moveq	r0, #1
 8013664:	440a      	add	r2, r1
 8013666:	8b23      	ldrh	r3, [r4, #24]
 8013668:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801366c:	b292      	uxth	r2, r2
 801366e:	83a2      	strh	r2, [r4, #28]
 8013670:	4413      	add	r3, r2
 8013672:	f1b9 0f00 	cmp.w	r9, #0
 8013676:	d102      	bne.n	801367e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8013678:	2d00      	cmp	r5, #0
 801367a:	d042      	beq.n	8013702 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801367c:	b300      	cbz	r0, 80136c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801367e:	8c21      	ldrh	r1, [r4, #32]
 8013680:	4419      	add	r1, r3
 8013682:	458c      	cmp	ip, r1
 8013684:	da37      	bge.n	80136f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8013686:	8ae1      	ldrh	r1, [r4, #22]
 8013688:	2900      	cmp	r1, #0
 801368a:	d034      	beq.n	80136f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801368c:	4563      	cmp	r3, ip
 801368e:	dd8e      	ble.n	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013690:	e01d      	b.n	80136ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8013692:	8893      	ldrh	r3, [r2, #4]
 8013694:	9901      	ldr	r1, [sp, #4]
 8013696:	8023      	strh	r3, [r4, #0]
 8013698:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801369c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80136a0:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 80136a4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80136a8:	ea4b 0b00 	orr.w	fp, fp, r0
 80136ac:	68e0      	ldr	r0, [r4, #12]
 80136ae:	6803      	ldr	r3, [r0, #0]
 80136b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80136b2:	4798      	blx	r3
 80136b4:	eb0b 0200 	add.w	r2, fp, r0
 80136b8:	b292      	uxth	r2, r2
 80136ba:	e7c5      	b.n	8013648 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80136bc:	2000      	movs	r0, #0
 80136be:	e7d1      	b.n	8013664 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80136c0:	4563      	cmp	r3, ip
 80136c2:	f77f af74 	ble.w	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80136c6:	8ae3      	ldrh	r3, [r4, #22]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f43f af70 	beq.w	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80136ce:	2301      	movs	r3, #1
 80136d0:	8c22      	ldrh	r2, [r4, #32]
 80136d2:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 80136d6:	8be3      	ldrh	r3, [r4, #30]
 80136d8:	4413      	add	r3, r2
 80136da:	83e3      	strh	r3, [r4, #30]
 80136dc:	68e0      	ldr	r0, [r4, #12]
 80136de:	6803      	ldr	r3, [r0, #0]
 80136e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136e2:	4798      	blx	r3
 80136e4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80136e8:	4418      	add	r0, r3
 80136ea:	8a63      	ldrh	r3, [r4, #18]
 80136ec:	1a18      	subs	r0, r3, r0
 80136ee:	8260      	strh	r0, [r4, #18]
 80136f0:	b005      	add	sp, #20
 80136f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f6:	2300      	movs	r3, #0
 80136f8:	4611      	mov	r1, r2
 80136fa:	4620      	mov	r0, r4
 80136fc:	f7ff ff0f 	bl	801351e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013700:	e755      	b.n	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013702:	4563      	cmp	r3, ip
 8013704:	dd14      	ble.n	8013730 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8013706:	b117      	cbz	r7, 801370e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8013708:	2301      	movs	r3, #1
 801370a:	460a      	mov	r2, r1
 801370c:	e772      	b.n	80135f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801370e:	2e00      	cmp	r6, #0
 8013710:	f43f af4d 	beq.w	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013714:	2800      	cmp	r0, #0
 8013716:	f47f af4a 	bne.w	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801371a:	f1ba 0f00 	cmp.w	sl, #0
 801371e:	d002      	beq.n	8013726 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8013720:	2301      	movs	r3, #1
 8013722:	4642      	mov	r2, r8
 8013724:	e767      	b.n	80135f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8013726:	8ae3      	ldrh	r3, [r4, #22]
 8013728:	2b00      	cmp	r3, #0
 801372a:	f43f af40 	beq.w	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801372e:	e7d5      	b.n	80136dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8013730:	2800      	cmp	r0, #0
 8013732:	f47f af3c 	bne.w	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013736:	f1ba 0f00 	cmp.w	sl, #0
 801373a:	f43f af38 	beq.w	80135ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801373e:	2301      	movs	r3, #1
 8013740:	4642      	mov	r2, r8
 8013742:	e7da      	b.n	80136fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08013744 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8013744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013746:	4605      	mov	r5, r0
 8013748:	b08f      	sub	sp, #60	@ 0x3c
 801374a:	4617      	mov	r7, r2
 801374c:	461c      	mov	r4, r3
 801374e:	460e      	mov	r6, r1
 8013750:	b1d1      	cbz	r1, 8013788 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	4620      	mov	r0, r4
 8013756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013758:	4798      	blx	r3
 801375a:	4240      	negs	r0, r0
 801375c:	9603      	str	r6, [sp, #12]
 801375e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013762:	b200      	sxth	r0, r0
 8013764:	9700      	str	r7, [sp, #0]
 8013766:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801376a:	4629      	mov	r1, r5
 801376c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8013770:	2401      	movs	r4, #1
 8013772:	a805      	add	r0, sp, #20
 8013774:	f7ff fcaa 	bl	80130cc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8013778:	a805      	add	r0, sp, #20
 801377a:	f7ff fee0 	bl	801353e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801377e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8013782:	b163      	cbz	r3, 801379e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8013784:	3401      	adds	r4, #1
 8013786:	e7f7      	b.n	8013778 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8013788:	2401      	movs	r4, #1
 801378a:	f003 fa6b 	bl	8016c64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801378e:	280a      	cmp	r0, #10
 8013790:	4628      	mov	r0, r5
 8013792:	bf08      	it	eq
 8013794:	3401      	addeq	r4, #1
 8013796:	f003 fa65 	bl	8016c64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801379a:	2800      	cmp	r0, #0
 801379c:	d1f7      	bne.n	801378e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801379e:	b2a0      	uxth	r0, r4
 80137a0:	b00f      	add	sp, #60	@ 0x3c
 80137a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080137a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80137a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a8:	b0e3      	sub	sp, #396	@ 0x18c
 80137aa:	461c      	mov	r4, r3
 80137ac:	4683      	mov	fp, r0
 80137ae:	4688      	mov	r8, r1
 80137b0:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f000 8112 	beq.w	80139dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80137b8:	6823      	ldr	r3, [r4, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	f000 810e 	beq.w	80139dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80137c0:	7ba3      	ldrb	r3, [r4, #14]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f000 810a 	beq.w	80139dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80137c8:	ad0a      	add	r5, sp, #40	@ 0x28
 80137ca:	6810      	ldr	r0, [r2, #0]
 80137cc:	6851      	ldr	r1, [r2, #4]
 80137ce:	462b      	mov	r3, r5
 80137d0:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80137d4:	c303      	stmia	r3!, {r0, r1}
 80137d6:	2100      	movs	r1, #0
 80137d8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80137dc:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80137e0:	4628      	mov	r0, r5
 80137e2:	910c      	str	r1, [sp, #48]	@ 0x30
 80137e4:	a90c      	add	r1, sp, #48	@ 0x30
 80137e6:	79a2      	ldrb	r2, [r4, #6]
 80137e8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80137ec:	f7ff fced 	bl	80131ca <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80137f0:	a90c      	add	r1, sp, #48	@ 0x30
 80137f2:	79a2      	ldrb	r2, [r4, #6]
 80137f4:	4608      	mov	r0, r1
 80137f6:	f7ff fce8 	bl	80131ca <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80137fa:	a817      	add	r0, sp, #92	@ 0x5c
 80137fc:	f002 fdf0 	bl	80163e0 <_ZN8touchgfx12TextProviderC1Ev>
 8013800:	6820      	ldr	r0, [r4, #0]
 8013802:	6803      	ldr	r3, [r0, #0]
 8013804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013806:	4798      	blx	r3
 8013808:	4606      	mov	r6, r0
 801380a:	6820      	ldr	r0, [r4, #0]
 801380c:	6803      	ldr	r3, [r0, #0]
 801380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013810:	4798      	blx	r3
 8013812:	4633      	mov	r3, r6
 8013814:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013816:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013818:	9000      	str	r0, [sp, #0]
 801381a:	a817      	add	r0, sp, #92	@ 0x5c
 801381c:	f002 fe33 	bl	8016486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013820:	6820      	ldr	r0, [r4, #0]
 8013822:	f894 a004 	ldrb.w	sl, [r4, #4]
 8013826:	6803      	ldr	r3, [r0, #0]
 8013828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801382a:	4798      	blx	r3
 801382c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8013830:	6823      	ldr	r3, [r4, #0]
 8013832:	4607      	mov	r7, r0
 8013834:	4406      	add	r6, r0
 8013836:	a830      	add	r0, sp, #192	@ 0xc0
 8013838:	f893 9009 	ldrb.w	r9, [r3, #9]
 801383c:	f002 fdd0 	bl	80163e0 <_ZN8touchgfx12TextProviderC1Ev>
 8013840:	7c23      	ldrb	r3, [r4, #16]
 8013842:	b17b      	cbz	r3, 8013864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8013844:	6820      	ldr	r0, [r4, #0]
 8013846:	6803      	ldr	r3, [r0, #0]
 8013848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801384a:	4798      	blx	r3
 801384c:	9009      	str	r0, [sp, #36]	@ 0x24
 801384e:	6820      	ldr	r0, [r4, #0]
 8013850:	6802      	ldr	r2, [r0, #0]
 8013852:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013854:	4790      	blx	r2
 8013856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013858:	9000      	str	r0, [sp, #0]
 801385a:	a830      	add	r0, sp, #192	@ 0xc0
 801385c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801385e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013860:	f002 fe11 	bl	8016486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013864:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8013868:	a80e      	add	r0, sp, #56	@ 0x38
 801386a:	7be2      	ldrb	r2, [r4, #15]
 801386c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8013870:	1a8a      	subs	r2, r1, r2
 8013872:	7c21      	ldrb	r1, [r4, #16]
 8013874:	9103      	str	r1, [sp, #12]
 8013876:	b292      	uxth	r2, r2
 8013878:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801387c:	9102      	str	r1, [sp, #8]
 801387e:	6821      	ldr	r1, [r4, #0]
 8013880:	9101      	str	r1, [sp, #4]
 8013882:	7961      	ldrb	r1, [r4, #5]
 8013884:	9100      	str	r1, [sp, #0]
 8013886:	a930      	add	r1, sp, #192	@ 0xc0
 8013888:	f7ff fc20 	bl	80130cc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801388c:	2e00      	cmp	r6, #0
 801388e:	dc5b      	bgt.n	8013948 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8013890:	af17      	add	r7, sp, #92	@ 0x5c
 8013892:	f04f 0900 	mov.w	r9, #0
 8013896:	7c23      	ldrb	r3, [r4, #16]
 8013898:	2b00      	cmp	r3, #0
 801389a:	f000 80b1 	beq.w	8013a00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801389e:	a80e      	add	r0, sp, #56	@ 0x38
 80138a0:	f7ff fe4d 	bl	801353e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80138a4:	f1ba 0f00 	cmp.w	sl, #0
 80138a8:	f000 80a5 	beq.w	80139f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80138ac:	7c23      	ldrb	r3, [r4, #16]
 80138ae:	2264      	movs	r2, #100	@ 0x64
 80138b0:	4639      	mov	r1, r7
 80138b2:	a849      	add	r0, sp, #292	@ 0x124
 80138b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80138b6:	f00f fea8 	bl	802360a <memcpy>
 80138ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138bc:	2b00      	cmp	r3, #0
 80138be:	f000 80a7 	beq.w	8013a10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80138c2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80138c6:	7922      	ldrb	r2, [r4, #4]
 80138c8:	2a01      	cmp	r2, #1
 80138ca:	f040 808a 	bne.w	80139e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80138ce:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 80138d2:	1ac0      	subs	r0, r0, r3
 80138d4:	2302      	movs	r3, #2
 80138d6:	fb90 f0f3 	sdiv	r0, r0, r3
 80138da:	b200      	sxth	r0, r0
 80138dc:	7c23      	ldrb	r3, [r4, #16]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	f000 808b 	beq.w	80139fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80138e4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 80138e8:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 80138ec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80138f0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80138f4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80138f8:	2100      	movs	r1, #0
 80138fa:	4410      	add	r0, r2
 80138fc:	4642      	mov	r2, r8
 80138fe:	b200      	sxth	r0, r0
 8013900:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8013904:	9000      	str	r0, [sp, #0]
 8013906:	4658      	mov	r0, fp
 8013908:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801390c:	f7ff fc8e 	bl	801322c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8013910:	2800      	cmp	r0, #0
 8013912:	d163      	bne.n	80139dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013914:	b2b2      	uxth	r2, r6
 8013916:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801391a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801391e:	4413      	add	r3, r2
 8013920:	1a8a      	subs	r2, r1, r2
 8013922:	b21b      	sxth	r3, r3
 8013924:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8013928:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 801392c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013930:	2a00      	cmp	r2, #0
 8013932:	d153      	bne.n	80139dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013934:	6822      	ldr	r2, [r4, #0]
 8013936:	8869      	ldrh	r1, [r5, #2]
 8013938:	7a12      	ldrb	r2, [r2, #8]
 801393a:	1a9b      	subs	r3, r3, r2
 801393c:	88ea      	ldrh	r2, [r5, #6]
 801393e:	440a      	add	r2, r1
 8013940:	b212      	sxth	r2, r2
 8013942:	4293      	cmp	r3, r2
 8013944:	dda7      	ble.n	8013896 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8013946:	e049      	b.n	80139dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013948:	7c23      	ldrb	r3, [r4, #16]
 801394a:	444f      	add	r7, r9
 801394c:	b1c3      	cbz	r3, 8013980 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801394e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8013952:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013956:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801395a:	443b      	add	r3, r7
 801395c:	4293      	cmp	r3, r2
 801395e:	da97      	bge.n	8013890 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8013960:	a80e      	add	r0, sp, #56	@ 0x38
 8013962:	f7ff fdec 	bl	801353e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013966:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801396a:	3b01      	subs	r3, #1
 801396c:	b29b      	uxth	r3, r3
 801396e:	454b      	cmp	r3, r9
 8013970:	9309      	str	r3, [sp, #36]	@ 0x24
 8013972:	d021      	beq.n	80139b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8013974:	7961      	ldrb	r1, [r4, #5]
 8013976:	a817      	add	r0, sp, #92	@ 0x5c
 8013978:	f7f0 fd30 	bl	80043dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801397c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801397e:	e7f4      	b.n	801396a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8013980:	fa1f f986 	uxth.w	r9, r6
 8013984:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013988:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801398c:	443b      	add	r3, r7
 801398e:	4293      	cmp	r3, r2
 8013990:	f6bf af7e 	bge.w	8013890 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8013994:	a817      	add	r0, sp, #92	@ 0x5c
 8013996:	f003 f965 	bl	8016c64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801399a:	b1f8      	cbz	r0, 80139dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801399c:	280a      	cmp	r0, #10
 801399e:	d1f1      	bne.n	8013984 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80139a0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80139a4:	444b      	add	r3, r9
 80139a6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80139aa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80139ae:	eba3 0309 	sub.w	r3, r3, r9
 80139b2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80139b6:	e7e5      	b.n	8013984 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80139b8:	b2b3      	uxth	r3, r6
 80139ba:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80139be:	441a      	add	r2, r3
 80139c0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80139c4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 80139c8:	1ad3      	subs	r3, r2, r3
 80139ca:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80139ce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80139d2:	b11b      	cbz	r3, 80139dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80139d4:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d0ba      	beq.n	8013952 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80139dc:	b063      	add	sp, #396	@ 0x18c
 80139de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e2:	2a02      	cmp	r2, #2
 80139e4:	d105      	bne.n	80139f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80139e6:	7be2      	ldrb	r2, [r4, #15]
 80139e8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80139ec:	1a80      	subs	r0, r0, r2
 80139ee:	1ac0      	subs	r0, r0, r3
 80139f0:	e773      	b.n	80138da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80139f2:	2000      	movs	r0, #0
 80139f4:	e772      	b.n	80138dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80139f6:	7be0      	ldrb	r0, [r4, #15]
 80139f8:	e770      	b.n	80138dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80139fa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80139fe:	e773      	b.n	80138e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8013a00:	f1ba 0f00 	cmp.w	sl, #0
 8013a04:	d0f7      	beq.n	80139f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8013a06:	2264      	movs	r2, #100	@ 0x64
 8013a08:	4639      	mov	r1, r7
 8013a0a:	a849      	add	r0, sp, #292	@ 0x124
 8013a0c:	f00f fdfd 	bl	802360a <memcpy>
 8013a10:	2300      	movs	r3, #0
 8013a12:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013a16:	6821      	ldr	r1, [r4, #0]
 8013a18:	a849      	add	r0, sp, #292	@ 0x124
 8013a1a:	f7ff fb9a 	bl	8013152 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013a1e:	b203      	sxth	r3, r0
 8013a20:	e751      	b.n	80138c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08013a22 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8013a22:	2b03      	cmp	r3, #3
 8013a24:	d818      	bhi.n	8013a58 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8013a26:	e8df f003 	tbb	[pc, r3]
 8013a2a:	0602      	.short	0x0602
 8013a2c:	130d      	.short	0x130d
 8013a2e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013a32:	1850      	adds	r0, r2, r1
 8013a34:	4770      	bx	lr
 8013a36:	8803      	ldrh	r3, [r0, #0]
 8013a38:	8880      	ldrh	r0, [r0, #4]
 8013a3a:	4418      	add	r0, r3
 8013a3c:	b200      	sxth	r0, r0
 8013a3e:	1a80      	subs	r0, r0, r2
 8013a40:	3801      	subs	r0, #1
 8013a42:	4770      	bx	lr
 8013a44:	8803      	ldrh	r3, [r0, #0]
 8013a46:	8880      	ldrh	r0, [r0, #4]
 8013a48:	4418      	add	r0, r3
 8013a4a:	b200      	sxth	r0, r0
 8013a4c:	1a40      	subs	r0, r0, r1
 8013a4e:	e7f7      	b.n	8013a40 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8013a50:	f9b0 0000 	ldrsh.w	r0, [r0]
 8013a54:	4410      	add	r0, r2
 8013a56:	4770      	bx	lr
 8013a58:	2000      	movs	r0, #0
 8013a5a:	4770      	bx	lr

08013a5c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8013a5c:	2b03      	cmp	r3, #3
 8013a5e:	d817      	bhi.n	8013a90 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8013a60:	e8df f003 	tbb	[pc, r3]
 8013a64:	10090602 	.word	0x10090602
 8013a68:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013a6c:	1850      	adds	r0, r2, r1
 8013a6e:	4770      	bx	lr
 8013a70:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013a74:	e7fa      	b.n	8013a6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8013a76:	8843      	ldrh	r3, [r0, #2]
 8013a78:	88c0      	ldrh	r0, [r0, #6]
 8013a7a:	4418      	add	r0, r3
 8013a7c:	b200      	sxth	r0, r0
 8013a7e:	1a80      	subs	r0, r0, r2
 8013a80:	3801      	subs	r0, #1
 8013a82:	4770      	bx	lr
 8013a84:	8843      	ldrh	r3, [r0, #2]
 8013a86:	88c0      	ldrh	r0, [r0, #6]
 8013a88:	4418      	add	r0, r3
 8013a8a:	b200      	sxth	r0, r0
 8013a8c:	1a40      	subs	r0, r0, r1
 8013a8e:	e7f7      	b.n	8013a80 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8013a90:	2000      	movs	r0, #0
 8013a92:	4770      	bx	lr

08013a94 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8013a94:	4b01      	ldr	r3, [pc, #4]	@ (8013a9c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8013a96:	2200      	movs	r2, #0
 8013a98:	601a      	str	r2, [r3, #0]
 8013a9a:	4770      	bx	lr
 8013a9c:	24025200 	.word	0x24025200

08013aa0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	b1c8      	cbz	r0, 8013ad8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8013aa4:	0c02      	lsrs	r2, r0, #16
 8013aa6:	0412      	lsls	r2, r2, #16
 8013aa8:	b9a2      	cbnz	r2, 8013ad4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8013aaa:	0403      	lsls	r3, r0, #16
 8013aac:	2010      	movs	r0, #16
 8013aae:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8013ab2:	bf04      	itt	eq
 8013ab4:	021b      	lsleq	r3, r3, #8
 8013ab6:	3008      	addeq	r0, #8
 8013ab8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8013abc:	bf04      	itt	eq
 8013abe:	011b      	lsleq	r3, r3, #4
 8013ac0:	3004      	addeq	r0, #4
 8013ac2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8013ac6:	bf04      	itt	eq
 8013ac8:	009b      	lsleq	r3, r3, #2
 8013aca:	3002      	addeq	r0, #2
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	db04      	blt.n	8013ada <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8013ad0:	3001      	adds	r0, #1
 8013ad2:	4770      	bx	lr
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	e7ea      	b.n	8013aae <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8013ad8:	2020      	movs	r0, #32
 8013ada:	4770      	bx	lr

08013adc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8013adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae0:	b087      	sub	sp, #28
 8013ae2:	460d      	mov	r5, r1
 8013ae4:	4616      	mov	r6, r2
 8013ae6:	4698      	mov	r8, r3
 8013ae8:	4601      	mov	r1, r0
 8013aea:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8013aee:	b120      	cbz	r0, 8013afa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013af0:	b11a      	cbz	r2, 8013afa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013af2:	2d1f      	cmp	r5, #31
 8013af4:	d801      	bhi.n	8013afa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013af6:	2b1f      	cmp	r3, #31
 8013af8:	d904      	bls.n	8013b04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8013afa:	2000      	movs	r0, #0
 8013afc:	6038      	str	r0, [r7, #0]
 8013afe:	b007      	add	sp, #28
 8013b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b04:	b97d      	cbnz	r5, 8013b26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8013b06:	b143      	cbz	r3, 8013b1a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8013b08:	4602      	mov	r2, r0
 8013b0a:	462b      	mov	r3, r5
 8013b0c:	4641      	mov	r1, r8
 8013b0e:	4630      	mov	r0, r6
 8013b10:	e9cd 4700 	strd	r4, r7, [sp]
 8013b14:	f7ff ffe2 	bl	8013adc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013b18:	e7f1      	b.n	8013afe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8013b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b1e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013b22:	603b      	str	r3, [r7, #0]
 8013b24:	e7eb      	b.n	8013afe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8013b26:	fa32 fa05 	lsrs.w	sl, r2, r5
 8013b2a:	d106      	bne.n	8013b3a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8013b2c:	4346      	muls	r6, r0
 8013b2e:	fbb6 f0f4 	udiv	r0, r6, r4
 8013b32:	fb04 6610 	mls	r6, r4, r0, r6
 8013b36:	603e      	str	r6, [r7, #0]
 8013b38:	e7e1      	b.n	8013afe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	fa00 fb05 	lsl.w	fp, r0, r5
 8013b40:	40aa      	lsls	r2, r5
 8013b42:	fbbb f9f4 	udiv	r9, fp, r4
 8013b46:	3a01      	subs	r2, #1
 8013b48:	fb0a f309 	mul.w	r3, sl, r9
 8013b4c:	fb04 b919 	mls	r9, r4, r9, fp
 8013b50:	4016      	ands	r6, r2
 8013b52:	9303      	str	r3, [sp, #12]
 8013b54:	4630      	mov	r0, r6
 8013b56:	f7ff ffa3 	bl	8013aa0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013b5a:	462b      	mov	r3, r5
 8013b5c:	460a      	mov	r2, r1
 8013b5e:	4601      	mov	r1, r0
 8013b60:	4630      	mov	r0, r6
 8013b62:	e9cd 4700 	strd	r4, r7, [sp]
 8013b66:	f7ff ffb9 	bl	8013adc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013b6a:	4606      	mov	r6, r0
 8013b6c:	4648      	mov	r0, r9
 8013b6e:	eb05 0108 	add.w	r1, r5, r8
 8013b72:	f7ff ff95 	bl	8013aa0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013b76:	ab05      	add	r3, sp, #20
 8013b78:	464a      	mov	r2, r9
 8013b7a:	e9cd 4300 	strd	r4, r3, [sp]
 8013b7e:	4603      	mov	r3, r0
 8013b80:	4650      	mov	r0, sl
 8013b82:	f7ff ffab 	bl	8013adc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013b86:	6839      	ldr	r1, [r7, #0]
 8013b88:	9a05      	ldr	r2, [sp, #20]
 8013b8a:	9b03      	ldr	r3, [sp, #12]
 8013b8c:	4411      	add	r1, r2
 8013b8e:	fbb1 f2f4 	udiv	r2, r1, r4
 8013b92:	18d3      	adds	r3, r2, r3
 8013b94:	fb04 1412 	mls	r4, r4, r2, r1
 8013b98:	441e      	add	r6, r3
 8013b9a:	603c      	str	r4, [r7, #0]
 8013b9c:	4430      	add	r0, r6
 8013b9e:	e7ae      	b.n	8013afe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08013ba0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8013ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ba4:	b085      	sub	sp, #20
 8013ba6:	f1b0 0900 	subs.w	r9, r0, #0
 8013baa:	461d      	mov	r5, r3
 8013bac:	4617      	mov	r7, r2
 8013bae:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8013bb0:	bfbb      	ittet	lt
 8013bb2:	f1c9 0900 	rsblt	r9, r9, #0
 8013bb6:	f04f 36ff 	movlt.w	r6, #4294967295
 8013bba:	2601      	movge	r6, #1
 8013bbc:	6823      	ldrlt	r3, [r4, #0]
 8013bbe:	bfbc      	itt	lt
 8013bc0:	425b      	neglt	r3, r3
 8013bc2:	6023      	strlt	r3, [r4, #0]
 8013bc4:	2a00      	cmp	r2, #0
 8013bc6:	da04      	bge.n	8013bd2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8013bc8:	6823      	ldr	r3, [r4, #0]
 8013bca:	4257      	negs	r7, r2
 8013bcc:	4276      	negs	r6, r6
 8013bce:	425b      	negs	r3, r3
 8013bd0:	6023      	str	r3, [r4, #0]
 8013bd2:	2d00      	cmp	r5, #0
 8013bd4:	4638      	mov	r0, r7
 8013bd6:	bfba      	itte	lt
 8013bd8:	426d      	neglt	r5, r5
 8013bda:	f04f 38ff 	movlt.w	r8, #4294967295
 8013bde:	f04f 0801 	movge.w	r8, #1
 8013be2:	f7ff ff5d 	bl	8013aa0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013be6:	ab03      	add	r3, sp, #12
 8013be8:	463a      	mov	r2, r7
 8013bea:	e9cd 5300 	strd	r5, r3, [sp]
 8013bee:	4603      	mov	r3, r0
 8013bf0:	4648      	mov	r0, r9
 8013bf2:	f7ff ff73 	bl	8013adc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013bf6:	6823      	ldr	r3, [r4, #0]
 8013bf8:	9a03      	ldr	r2, [sp, #12]
 8013bfa:	4546      	cmp	r6, r8
 8013bfc:	441a      	add	r2, r3
 8013bfe:	fb92 f3f5 	sdiv	r3, r2, r5
 8013c02:	4418      	add	r0, r3
 8013c04:	fb05 2313 	mls	r3, r5, r3, r2
 8013c08:	bf18      	it	ne
 8013c0a:	4240      	negne	r0, r0
 8013c0c:	1c72      	adds	r2, r6, #1
 8013c0e:	6023      	str	r3, [r4, #0]
 8013c10:	d105      	bne.n	8013c1e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f1c3 0200 	rsb	r2, r3, #0
 8013c18:	db0b      	blt.n	8013c32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8013c1a:	6022      	str	r2, [r4, #0]
 8013c1c:	e006      	b.n	8013c2c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013c1e:	2e01      	cmp	r6, #1
 8013c20:	d104      	bne.n	8013c2c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	da02      	bge.n	8013c2c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013c26:	442b      	add	r3, r5
 8013c28:	3801      	subs	r0, #1
 8013c2a:	6023      	str	r3, [r4, #0]
 8013c2c:	b005      	add	sp, #20
 8013c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c32:	3801      	subs	r0, #1
 8013c34:	1b52      	subs	r2, r2, r5
 8013c36:	e7f0      	b.n	8013c1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08013c38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8013c38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013c3c:	4c1c      	ldr	r4, [pc, #112]	@ (8013cb0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8013c3e:	4605      	mov	r5, r0
 8013c40:	6807      	ldr	r7, [r0, #0]
 8013c42:	69a3      	ldr	r3, [r4, #24]
 8013c44:	b92b      	cbnz	r3, 8013c52 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8013c46:	6840      	ldr	r0, [r0, #4]
 8013c48:	e9c5 7000 	strd	r7, r0, [r5]
 8013c4c:	b004      	add	sp, #16
 8013c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c52:	f04f 0802 	mov.w	r8, #2
 8013c56:	68a2      	ldr	r2, [r4, #8]
 8013c58:	ae04      	add	r6, sp, #16
 8013c5a:	6820      	ldr	r0, [r4, #0]
 8013c5c:	fb93 f1f8 	sdiv	r1, r3, r8
 8013c60:	440a      	add	r2, r1
 8013c62:	69e1      	ldr	r1, [r4, #28]
 8013c64:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013c68:	463a      	mov	r2, r7
 8013c6a:	9600      	str	r6, [sp, #0]
 8013c6c:	f7ff ff98 	bl	8013ba0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013c70:	69a3      	ldr	r3, [r4, #24]
 8013c72:	4607      	mov	r7, r0
 8013c74:	686a      	ldr	r2, [r5, #4]
 8013c76:	6a21      	ldr	r1, [r4, #32]
 8013c78:	9600      	str	r6, [sp, #0]
 8013c7a:	6860      	ldr	r0, [r4, #4]
 8013c7c:	f7ff ff90 	bl	8013ba0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013c80:	69a3      	ldr	r3, [r4, #24]
 8013c82:	6962      	ldr	r2, [r4, #20]
 8013c84:	4407      	add	r7, r0
 8013c86:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013c88:	9600      	str	r6, [sp, #0]
 8013c8a:	68e0      	ldr	r0, [r4, #12]
 8013c8c:	fb93 f8f8 	sdiv	r8, r3, r8
 8013c90:	4442      	add	r2, r8
 8013c92:	9203      	str	r2, [sp, #12]
 8013c94:	682a      	ldr	r2, [r5, #0]
 8013c96:	f7ff ff83 	bl	8013ba0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013c9a:	4680      	mov	r8, r0
 8013c9c:	9600      	str	r6, [sp, #0]
 8013c9e:	69a3      	ldr	r3, [r4, #24]
 8013ca0:	686a      	ldr	r2, [r5, #4]
 8013ca2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013ca4:	6920      	ldr	r0, [r4, #16]
 8013ca6:	f7ff ff7b 	bl	8013ba0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013caa:	4440      	add	r0, r8
 8013cac:	e7cc      	b.n	8013c48 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8013cae:	bf00      	nop
 8013cb0:	24025204 	.word	0x24025204

08013cb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8013cb4:	4b07      	ldr	r3, [pc, #28]	@ (8013cd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	2b01      	cmp	r3, #1
 8013cba:	d109      	bne.n	8013cd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8013cbc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013cc0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013cc4:	8003      	strh	r3, [r0, #0]
 8013cc6:	4b04      	ldr	r3, [pc, #16]	@ (8013cd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8013cc8:	881b      	ldrh	r3, [r3, #0]
 8013cca:	3b01      	subs	r3, #1
 8013ccc:	1a9b      	subs	r3, r3, r2
 8013cce:	800b      	strh	r3, [r1, #0]
 8013cd0:	4770      	bx	lr
 8013cd2:	bf00      	nop
 8013cd4:	240251e8 	.word	0x240251e8
 8013cd8:	240251e4 	.word	0x240251e4

08013cdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8013cdc:	4b07      	ldr	r3, [pc, #28]	@ (8013cfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8013cde:	b510      	push	{r4, lr}
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	2b01      	cmp	r3, #1
 8013ce4:	d108      	bne.n	8013cf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8013ce6:	4b06      	ldr	r3, [pc, #24]	@ (8013d00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8013ce8:	880c      	ldrh	r4, [r1, #0]
 8013cea:	881b      	ldrh	r3, [r3, #0]
 8013cec:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013cf0:	3b01      	subs	r3, #1
 8013cf2:	1b1b      	subs	r3, r3, r4
 8013cf4:	8003      	strh	r3, [r0, #0]
 8013cf6:	800a      	strh	r2, [r1, #0]
 8013cf8:	bd10      	pop	{r4, pc}
 8013cfa:	bf00      	nop
 8013cfc:	240251e8 	.word	0x240251e8
 8013d00:	240251e4 	.word	0x240251e4

08013d04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8013d04:	4b0a      	ldr	r3, [pc, #40]	@ (8013d30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8013d06:	b510      	push	{r4, lr}
 8013d08:	781b      	ldrb	r3, [r3, #0]
 8013d0a:	2b01      	cmp	r3, #1
 8013d0c:	d10e      	bne.n	8013d2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8013d0e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013d12:	8843      	ldrh	r3, [r0, #2]
 8013d14:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013d18:	18ca      	adds	r2, r1, r3
 8013d1a:	4b06      	ldr	r3, [pc, #24]	@ (8013d34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8013d1c:	8044      	strh	r4, [r0, #2]
 8013d1e:	881b      	ldrh	r3, [r3, #0]
 8013d20:	1a9b      	subs	r3, r3, r2
 8013d22:	8003      	strh	r3, [r0, #0]
 8013d24:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013d28:	8081      	strh	r1, [r0, #4]
 8013d2a:	80c3      	strh	r3, [r0, #6]
 8013d2c:	bd10      	pop	{r4, pc}
 8013d2e:	bf00      	nop
 8013d30:	240251e8 	.word	0x240251e8
 8013d34:	240251e4 	.word	0x240251e4

08013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8013d38:	4b08      	ldr	r3, [pc, #32]	@ (8013d5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	2b01      	cmp	r3, #1
 8013d3e:	d10c      	bne.n	8013d5a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013d40:	8803      	ldrh	r3, [r0, #0]
 8013d42:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013d46:	8842      	ldrh	r2, [r0, #2]
 8013d48:	8002      	strh	r2, [r0, #0]
 8013d4a:	185a      	adds	r2, r3, r1
 8013d4c:	4b04      	ldr	r3, [pc, #16]	@ (8013d60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8013d4e:	881b      	ldrh	r3, [r3, #0]
 8013d50:	1a9b      	subs	r3, r3, r2
 8013d52:	8043      	strh	r3, [r0, #2]
 8013d54:	88c3      	ldrh	r3, [r0, #6]
 8013d56:	80c1      	strh	r1, [r0, #6]
 8013d58:	8083      	strh	r3, [r0, #4]
 8013d5a:	4770      	bx	lr
 8013d5c:	240251e8 	.word	0x240251e8
 8013d60:	240251e4 	.word	0x240251e4

08013d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013d64:	4b07      	ldr	r3, [pc, #28]	@ (8013d84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8013d66:	b510      	push	{r4, lr}
 8013d68:	781b      	ldrb	r3, [r3, #0]
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d108      	bne.n	8013d80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8013d6e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013d72:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013d76:	8003      	strh	r3, [r0, #0]
 8013d78:	8893      	ldrh	r3, [r2, #4]
 8013d7a:	3b01      	subs	r3, #1
 8013d7c:	1b1b      	subs	r3, r3, r4
 8013d7e:	800b      	strh	r3, [r1, #0]
 8013d80:	bd10      	pop	{r4, pc}
 8013d82:	bf00      	nop
 8013d84:	240251e8 	.word	0x240251e8

08013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013d88:	4b0a      	ldr	r3, [pc, #40]	@ (8013db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8013d8a:	460a      	mov	r2, r1
 8013d8c:	b510      	push	{r4, lr}
 8013d8e:	781b      	ldrb	r3, [r3, #0]
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d10d      	bne.n	8013db0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013d94:	8881      	ldrh	r1, [r0, #4]
 8013d96:	8803      	ldrh	r3, [r0, #0]
 8013d98:	440b      	add	r3, r1
 8013d9a:	4601      	mov	r1, r0
 8013d9c:	3b01      	subs	r3, #1
 8013d9e:	f821 3b02 	strh.w	r3, [r1], #2
 8013da2:	f7ff ffdf 	bl	8013d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013da6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013daa:	88c2      	ldrh	r2, [r0, #6]
 8013dac:	80c3      	strh	r3, [r0, #6]
 8013dae:	8082      	strh	r2, [r0, #4]
 8013db0:	bd10      	pop	{r4, pc}
 8013db2:	bf00      	nop
 8013db4:	240251e8 	.word	0x240251e8

08013db8 <_ZN8touchgfx11Application13requestRedrawEv>:
 8013db8:	4b06      	ldr	r3, [pc, #24]	@ (8013dd4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8013dba:	2100      	movs	r1, #0
 8013dbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013dc0:	4b05      	ldr	r3, [pc, #20]	@ (8013dd8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8013dc2:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8013dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013dca:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8013dce:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8013dd2:	4770      	bx	lr
 8013dd4:	240251e4 	.word	0x240251e4
 8013dd8:	240251e6 	.word	0x240251e6

08013ddc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8013ddc:	4b03      	ldr	r3, [pc, #12]	@ (8013dec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8013dde:	6818      	ldr	r0, [r3, #0]
 8013de0:	b110      	cbz	r0, 8013de8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8013de2:	6803      	ldr	r3, [r0, #0]
 8013de4:	699b      	ldr	r3, [r3, #24]
 8013de6:	4718      	bx	r3
 8013de8:	4770      	bx	lr
 8013dea:	bf00      	nop
 8013dec:	24025234 	.word	0x24025234

08013df0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8013df0:	4770      	bx	lr
	...

08013df4 <_ZN8touchgfx11Application4drawEv>:
 8013df4:	4b09      	ldr	r3, [pc, #36]	@ (8013e1c <_ZN8touchgfx11Application4drawEv+0x28>)
 8013df6:	b507      	push	{r0, r1, r2, lr}
 8013df8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	4b08      	ldr	r3, [pc, #32]	@ (8013e20 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8013e00:	9100      	str	r1, [sp, #0]
 8013e02:	4669      	mov	r1, sp
 8013e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e08:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013e0c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e10:	6803      	ldr	r3, [r0, #0]
 8013e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013e14:	4798      	blx	r3
 8013e16:	b003      	add	sp, #12
 8013e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e1c:	240251e4 	.word	0x240251e4
 8013e20:	240251e6 	.word	0x240251e6

08013e24 <_ZN8touchgfx11Application10invalidateEv>:
 8013e24:	4b09      	ldr	r3, [pc, #36]	@ (8013e4c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8013e26:	b082      	sub	sp, #8
 8013e28:	2100      	movs	r1, #0
 8013e2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013e2e:	4b08      	ldr	r3, [pc, #32]	@ (8013e50 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8013e30:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013e34:	aa02      	add	r2, sp, #8
 8013e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e3a:	9100      	str	r1, [sp, #0]
 8013e3c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e40:	6803      	ldr	r3, [r0, #0]
 8013e42:	e912 0006 	ldmdb	r2, {r1, r2}
 8013e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e48:	b002      	add	sp, #8
 8013e4a:	4718      	bx	r3
 8013e4c:	240251e4 	.word	0x240251e4
 8013e50:	240251e6 	.word	0x240251e6

08013e54 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8013e54:	4b03      	ldr	r3, [pc, #12]	@ (8013e64 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8013e56:	6818      	ldr	r0, [r3, #0]
 8013e58:	b110      	cbz	r0, 8013e60 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8013e5a:	6803      	ldr	r3, [r0, #0]
 8013e5c:	69db      	ldr	r3, [r3, #28]
 8013e5e:	4718      	bx	r3
 8013e60:	4770      	bx	lr
 8013e62:	bf00      	nop
 8013e64:	24025234 	.word	0x24025234

08013e68 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8013e68:	4b03      	ldr	r3, [pc, #12]	@ (8013e78 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8013e6a:	6818      	ldr	r0, [r3, #0]
 8013e6c:	b110      	cbz	r0, 8013e74 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8013e6e:	6803      	ldr	r3, [r0, #0]
 8013e70:	6a1b      	ldr	r3, [r3, #32]
 8013e72:	4718      	bx	r3
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop
 8013e78:	24025234 	.word	0x24025234

08013e7c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8013e82:	4770      	bx	lr

08013e84 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013e84:	4b03      	ldr	r3, [pc, #12]	@ (8013e94 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013e86:	6818      	ldr	r0, [r3, #0]
 8013e88:	b110      	cbz	r0, 8013e90 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8013e8a:	6803      	ldr	r3, [r0, #0]
 8013e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e8e:	4718      	bx	r3
 8013e90:	4770      	bx	lr
 8013e92:	bf00      	nop
 8013e94:	24025234 	.word	0x24025234

08013e98 <_ZN8touchgfx11ApplicationD1Ev>:
 8013e98:	4770      	bx	lr

08013e9a <_ZN8touchgfx11ApplicationD0Ev>:
 8013e9a:	b510      	push	{r4, lr}
 8013e9c:	4604      	mov	r4, r0
 8013e9e:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8013ea2:	f00e fcbe 	bl	8022822 <_ZdlPvj>
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	bd10      	pop	{r4, pc}

08013eaa <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013eaa:	b510      	push	{r4, lr}
 8013eac:	f9b1 4000 	ldrsh.w	r4, [r1]
 8013eb0:	888a      	ldrh	r2, [r1, #4]
 8013eb2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013eb6:	4422      	add	r2, r4
 8013eb8:	b212      	sxth	r2, r2
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	da15      	bge.n	8013eea <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013ebe:	8882      	ldrh	r2, [r0, #4]
 8013ec0:	4413      	add	r3, r2
 8013ec2:	b21b      	sxth	r3, r3
 8013ec4:	429c      	cmp	r4, r3
 8013ec6:	da10      	bge.n	8013eea <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013ec8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013ecc:	88c9      	ldrh	r1, [r1, #6]
 8013ece:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013ed2:	4419      	add	r1, r3
 8013ed4:	b209      	sxth	r1, r1
 8013ed6:	428a      	cmp	r2, r1
 8013ed8:	da07      	bge.n	8013eea <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013eda:	88c0      	ldrh	r0, [r0, #6]
 8013edc:	4410      	add	r0, r2
 8013ede:	b200      	sxth	r0, r0
 8013ee0:	4283      	cmp	r3, r0
 8013ee2:	bfac      	ite	ge
 8013ee4:	2000      	movge	r0, #0
 8013ee6:	2001      	movlt	r0, #1
 8013ee8:	bd10      	pop	{r4, pc}
 8013eea:	2000      	movs	r0, #0
 8013eec:	e7fc      	b.n	8013ee8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08013eee <_ZN8touchgfx4Rect10restrictToEss>:
 8013eee:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	b510      	push	{r4, lr}
 8013ef6:	da04      	bge.n	8013f02 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8013ef8:	8884      	ldrh	r4, [r0, #4]
 8013efa:	4423      	add	r3, r4
 8013efc:	8083      	strh	r3, [r0, #4]
 8013efe:	2300      	movs	r3, #0
 8013f00:	8003      	strh	r3, [r0, #0]
 8013f02:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013f06:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013f0a:	1b09      	subs	r1, r1, r4
 8013f0c:	428b      	cmp	r3, r1
 8013f0e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013f12:	bfc8      	it	gt
 8013f14:	8081      	strhgt	r1, [r0, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	da04      	bge.n	8013f24 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8013f1a:	88c1      	ldrh	r1, [r0, #6]
 8013f1c:	440b      	add	r3, r1
 8013f1e:	80c3      	strh	r3, [r0, #6]
 8013f20:	2300      	movs	r3, #0
 8013f22:	8043      	strh	r3, [r0, #2]
 8013f24:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013f28:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013f2c:	1a52      	subs	r2, r2, r1
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	bfc8      	it	gt
 8013f32:	80c2      	strhgt	r2, [r0, #6]
 8013f34:	bd10      	pop	{r4, pc}
	...

08013f38 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8013f38:	4b10      	ldr	r3, [pc, #64]	@ (8013f7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8013f3a:	b510      	push	{r4, lr}
 8013f3c:	460c      	mov	r4, r1
 8013f3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013f42:	4b0f      	ldr	r3, [pc, #60]	@ (8013f80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8013f44:	4620      	mov	r0, r4
 8013f46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013f4a:	f7ff ffd0 	bl	8013eee <_ZN8touchgfx4Rect10restrictToEss>
 8013f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8013f84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8013f50:	6818      	ldr	r0, [r3, #0]
 8013f52:	b190      	cbz	r0, 8013f7a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8013f54:	6803      	ldr	r3, [r0, #0]
 8013f56:	4621      	mov	r1, r4
 8013f58:	689b      	ldr	r3, [r3, #8]
 8013f5a:	4798      	blx	r3
 8013f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8013f88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8013f5e:	6818      	ldr	r0, [r3, #0]
 8013f60:	b118      	cbz	r0, 8013f6a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8013f62:	6803      	ldr	r3, [r0, #0]
 8013f64:	4621      	mov	r1, r4
 8013f66:	689b      	ldr	r3, [r3, #8]
 8013f68:	4798      	blx	r3
 8013f6a:	4b08      	ldr	r3, [pc, #32]	@ (8013f8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8013f6c:	4621      	mov	r1, r4
 8013f6e:	6818      	ldr	r0, [r3, #0]
 8013f70:	6803      	ldr	r3, [r0, #0]
 8013f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f76:	69db      	ldr	r3, [r3, #28]
 8013f78:	4718      	bx	r3
 8013f7a:	bd10      	pop	{r4, pc}
 8013f7c:	240251e6 	.word	0x240251e6
 8013f80:	240251e4 	.word	0x240251e4
 8013f84:	24025234 	.word	0x24025234
 8013f88:	24025230 	.word	0x24025230
 8013f8c:	240251f0 	.word	0x240251f0

08013f90 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8013f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f92:	4606      	mov	r6, r0
 8013f94:	4608      	mov	r0, r1
 8013f96:	460f      	mov	r7, r1
 8013f98:	f7fa fe53 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f9c:	b9e8      	cbnz	r0, 8013fda <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013f9e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8013fa2:	f9b6 4000 	ldrsh.w	r4, [r6]
 8013fa6:	42a5      	cmp	r5, r4
 8013fa8:	db17      	blt.n	8013fda <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013faa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013fae:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	db11      	blt.n	8013fda <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013fb6:	88b9      	ldrh	r1, [r7, #4]
 8013fb8:	440d      	add	r5, r1
 8013fba:	88b1      	ldrh	r1, [r6, #4]
 8013fbc:	440c      	add	r4, r1
 8013fbe:	b22d      	sxth	r5, r5
 8013fc0:	b224      	sxth	r4, r4
 8013fc2:	42a5      	cmp	r5, r4
 8013fc4:	dc09      	bgt.n	8013fda <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013fc6:	88f8      	ldrh	r0, [r7, #6]
 8013fc8:	4410      	add	r0, r2
 8013fca:	88f2      	ldrh	r2, [r6, #6]
 8013fcc:	4413      	add	r3, r2
 8013fce:	b200      	sxth	r0, r0
 8013fd0:	b21b      	sxth	r3, r3
 8013fd2:	4298      	cmp	r0, r3
 8013fd4:	bfcc      	ite	gt
 8013fd6:	2000      	movgt	r0, #0
 8013fd8:	2001      	movle	r0, #1
 8013fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013fdc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fde:	4604      	mov	r4, r0
 8013fe0:	4608      	mov	r0, r1
 8013fe2:	460d      	mov	r5, r1
 8013fe4:	f7fa fe2d 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013fe8:	b978      	cbnz	r0, 801400a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013fea:	4620      	mov	r0, r4
 8013fec:	f7fa fe29 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ff0:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013ff4:	b150      	cbz	r0, 801400c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013ff6:	8026      	strh	r6, [r4, #0]
 8013ff8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013ffc:	8063      	strh	r3, [r4, #2]
 8013ffe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8014002:	80a3      	strh	r3, [r4, #4]
 8014004:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014008:	80e3      	strh	r3, [r4, #6]
 801400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801400c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014010:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014014:	42b1      	cmp	r1, r6
 8014016:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801401a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801401e:	460f      	mov	r7, r1
 8014020:	88ed      	ldrh	r5, [r5, #6]
 8014022:	bfa8      	it	ge
 8014024:	4637      	movge	r7, r6
 8014026:	4293      	cmp	r3, r2
 8014028:	4618      	mov	r0, r3
 801402a:	4466      	add	r6, ip
 801402c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014030:	bfa8      	it	ge
 8014032:	4610      	movge	r0, r2
 8014034:	442a      	add	r2, r5
 8014036:	88e5      	ldrh	r5, [r4, #6]
 8014038:	4461      	add	r1, ip
 801403a:	b236      	sxth	r6, r6
 801403c:	8027      	strh	r7, [r4, #0]
 801403e:	442b      	add	r3, r5
 8014040:	b209      	sxth	r1, r1
 8014042:	b212      	sxth	r2, r2
 8014044:	8060      	strh	r0, [r4, #2]
 8014046:	b21b      	sxth	r3, r3
 8014048:	428e      	cmp	r6, r1
 801404a:	bfac      	ite	ge
 801404c:	ebc7 0106 	rsbge	r1, r7, r6
 8014050:	ebc7 0101 	rsblt	r1, r7, r1
 8014054:	429a      	cmp	r2, r3
 8014056:	bfac      	ite	ge
 8014058:	ebc0 0202 	rsbge	r2, r0, r2
 801405c:	ebc0 0203 	rsblt	r2, r0, r3
 8014060:	80a1      	strh	r1, [r4, #4]
 8014062:	80e2      	strh	r2, [r4, #6]
 8014064:	e7d1      	b.n	801400a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08014068 <_ZN8touchgfx11Application11getInstanceEv>:
 8014068:	4b01      	ldr	r3, [pc, #4]	@ (8014070 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801406a:	6818      	ldr	r0, [r3, #0]
 801406c:	4770      	bx	lr
 801406e:	bf00      	nop
 8014070:	24025244 	.word	0x24025244

08014074 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8014074:	2300      	movs	r3, #0
 8014076:	b510      	push	{r4, lr}
 8014078:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801407c:	4604      	mov	r4, r0
 801407e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014082:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8014086:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801408a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801408e:	429a      	cmp	r2, r3
 8014090:	d90e      	bls.n	80140b0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8014092:	18e2      	adds	r2, r4, r3
 8014094:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8014098:	b122      	cbz	r2, 80140a4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801409a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801409e:	6803      	ldr	r3, [r0, #0]
 80140a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80140a2:	4798      	blx	r3
 80140a4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80140a8:	3301      	adds	r3, #1
 80140aa:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80140ae:	e7ea      	b.n	8014086 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80140b0:	bd10      	pop	{r4, pc}

080140b2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80140b2:	2300      	movs	r3, #0
 80140b4:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80140b8:	30a4      	adds	r0, #164	@ 0xa4
 80140ba:	f820 3c24 	strh.w	r3, [r0, #-36]
 80140be:	f802 3b01 	strb.w	r3, [r2], #1
 80140c2:	4282      	cmp	r2, r0
 80140c4:	d1fb      	bne.n	80140be <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80140c6:	4770      	bx	lr

080140c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80140c8:	b570      	push	{r4, r5, r6, lr}
 80140ca:	4c0b      	ldr	r4, [pc, #44]	@ (80140f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80140cc:	4605      	mov	r5, r0
 80140ce:	460e      	mov	r6, r1
 80140d0:	6820      	ldr	r0, [r4, #0]
 80140d2:	b110      	cbz	r0, 80140da <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80140d4:	6803      	ldr	r3, [r0, #0]
 80140d6:	695b      	ldr	r3, [r3, #20]
 80140d8:	4798      	blx	r3
 80140da:	1d28      	adds	r0, r5, #4
 80140dc:	f7ff ffe9 	bl	80140b2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80140e0:	6026      	str	r6, [r4, #0]
 80140e2:	6833      	ldr	r3, [r6, #0]
 80140e4:	4630      	mov	r0, r6
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	4798      	blx	r3
 80140ea:	682b      	ldr	r3, [r5, #0]
 80140ec:	4628      	mov	r0, r5
 80140ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80140f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140f4:	4718      	bx	r3
 80140f6:	bf00      	nop
 80140f8:	24025234 	.word	0x24025234

080140fc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80140fc:	2300      	movs	r3, #0
 80140fe:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8014102:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8014106:	461a      	mov	r2, r3
 8014108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801410a:	461c      	mov	r4, r3
 801410c:	461d      	mov	r5, r3
 801410e:	459c      	cmp	ip, r3
 8014110:	dd1a      	ble.n	8014148 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8014112:	18c6      	adds	r6, r0, r3
 8014114:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8014118:	b16e      	cbz	r6, 8014136 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801411a:	429a      	cmp	r2, r3
 801411c:	d008      	beq.n	8014130 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801411e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8014122:	fa1f fe82 	uxth.w	lr, r2
 8014126:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801412a:	1887      	adds	r7, r0, r2
 801412c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8014130:	3201      	adds	r2, #1
 8014132:	3301      	adds	r3, #1
 8014134:	e7eb      	b.n	801410e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8014136:	4299      	cmp	r1, r3
 8014138:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801413c:	bfa8      	it	ge
 801413e:	3501      	addge	r5, #1
 8014140:	429e      	cmp	r6, r3
 8014142:	bfc8      	it	gt
 8014144:	3401      	addgt	r4, #1
 8014146:	e7f4      	b.n	8014132 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8014148:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801414c:	1b49      	subs	r1, r1, r5
 801414e:	1b1b      	subs	r3, r3, r4
 8014150:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8014154:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8014158:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801415c:	4293      	cmp	r3, r2
 801415e:	dd03      	ble.n	8014168 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8014160:	3b01      	subs	r3, #1
 8014162:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8014166:	e7f7      	b.n	8014158 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8014168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801416c <_ZN8touchgfx11Application15handleTickEventEv>:
 801416c:	b570      	push	{r4, r5, r6, lr}
 801416e:	4d16      	ldr	r5, [pc, #88]	@ (80141c8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8014170:	4604      	mov	r4, r0
 8014172:	6828      	ldr	r0, [r5, #0]
 8014174:	b140      	cbz	r0, 8014188 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014176:	7a03      	ldrb	r3, [r0, #8]
 8014178:	b933      	cbnz	r3, 8014188 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801417a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801417e:	6803      	ldr	r3, [r0, #0]
 8014180:	689b      	ldr	r3, [r3, #8]
 8014182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014186:	4718      	bx	r3
 8014188:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801418c:	4e0f      	ldr	r6, [pc, #60]	@ (80141cc <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801418e:	b973      	cbnz	r3, 80141ae <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014190:	b168      	cbz	r0, 80141ae <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014192:	7a03      	ldrb	r3, [r0, #8]
 8014194:	b15b      	cbz	r3, 80141ae <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014196:	6830      	ldr	r0, [r6, #0]
 8014198:	b110      	cbz	r0, 80141a0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801419a:	6803      	ldr	r3, [r0, #0]
 801419c:	691b      	ldr	r3, [r3, #16]
 801419e:	4798      	blx	r3
 80141a0:	6828      	ldr	r0, [r5, #0]
 80141a2:	6803      	ldr	r3, [r0, #0]
 80141a4:	68db      	ldr	r3, [r3, #12]
 80141a6:	4798      	blx	r3
 80141a8:	2301      	movs	r3, #1
 80141aa:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80141ae:	3404      	adds	r4, #4
 80141b0:	4620      	mov	r0, r4
 80141b2:	f7ff ff5f 	bl	8014074 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80141b6:	4620      	mov	r0, r4
 80141b8:	f7ff ffa0 	bl	80140fc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80141bc:	6830      	ldr	r0, [r6, #0]
 80141be:	b110      	cbz	r0, 80141c6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80141c0:	6803      	ldr	r3, [r0, #0]
 80141c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141c4:	e7dd      	b.n	8014182 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80141c6:	bd70      	pop	{r4, r5, r6, pc}
 80141c8:	24025238 	.word	0x24025238
 80141cc:	24025234 	.word	0x24025234

080141d0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80141d0:	4603      	mov	r3, r0
 80141d2:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80141d6:	2200      	movs	r2, #0
 80141d8:	801a      	strh	r2, [r3, #0]
 80141da:	3308      	adds	r3, #8
 80141dc:	f823 2c06 	strh.w	r2, [r3, #-6]
 80141e0:	f823 2c04 	strh.w	r2, [r3, #-4]
 80141e4:	f823 2c02 	strh.w	r2, [r3, #-2]
 80141e8:	428b      	cmp	r3, r1
 80141ea:	d1f5      	bne.n	80141d8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80141ec:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80141f0:	4770      	bx	lr
	...

080141f4 <_ZN8touchgfx11ApplicationC1Ev>:
 80141f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141f6:	4b1d      	ldr	r3, [pc, #116]	@ (801426c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80141f8:	4606      	mov	r6, r0
 80141fa:	4604      	mov	r4, r0
 80141fc:	2500      	movs	r5, #0
 80141fe:	f846 3b04 	str.w	r3, [r6], #4
 8014202:	22a8      	movs	r2, #168	@ 0xa8
 8014204:	2100      	movs	r1, #0
 8014206:	4630      	mov	r0, r6
 8014208:	f00f f91e 	bl	8023448 <memset>
 801420c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8014210:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014214:	4f16      	ldr	r7, [pc, #88]	@ (8014270 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8014216:	f7ff ffdb 	bl	80141d0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801421a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801421e:	f7ff ffd7 	bl	80141d0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014222:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8014226:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801422a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801422e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8014232:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8014236:	490f      	ldr	r1, [pc, #60]	@ (8014274 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8014238:	480f      	ldr	r0, [pc, #60]	@ (8014278 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801423a:	f00d fc81 	bl	8021b40 <CRC_Lock>
 801423e:	4b0f      	ldr	r3, [pc, #60]	@ (801427c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8014240:	b158      	cbz	r0, 801425a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8014242:	801d      	strh	r5, [r3, #0]
 8014244:	2300      	movs	r3, #0
 8014246:	4a0e      	ldr	r2, [pc, #56]	@ (8014280 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8014248:	4630      	mov	r0, r6
 801424a:	6013      	str	r3, [r2, #0]
 801424c:	4a0d      	ldr	r2, [pc, #52]	@ (8014284 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801424e:	603b      	str	r3, [r7, #0]
 8014250:	6013      	str	r3, [r2, #0]
 8014252:	f7ff ff2e 	bl	80140b2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8014256:	4620      	mov	r0, r4
 8014258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801425a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801425e:	2002      	movs	r0, #2
 8014260:	801a      	strh	r2, [r3, #0]
 8014262:	6038      	str	r0, [r7, #0]
 8014264:	f001 ff42 	bl	80160ec <_ZN8touchgfx6Screen4drawEv>
 8014268:	e7ec      	b.n	8014244 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801426a:	bf00      	nop
 801426c:	08026c8c 	.word	0x08026c8c
 8014270:	24025234 	.word	0x24025234
 8014274:	b5e8b5cd 	.word	0xb5e8b5cd
 8014278:	f407a5c2 	.word	0xf407a5c2
 801427c:	2400007c 	.word	0x2400007c
 8014280:	24025244 	.word	0x24025244
 8014284:	24025238 	.word	0x24025238

08014288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8014288:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801428c:	3b01      	subs	r3, #1
 801428e:	b29b      	uxth	r3, r3
 8014290:	428b      	cmp	r3, r1
 8014292:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8014296:	b510      	push	{r4, lr}
 8014298:	d908      	bls.n	80142ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801429a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801429e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80142a2:	681a      	ldr	r2, [r3, #0]
 80142a4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80142a8:	685a      	ldr	r2, [r3, #4]
 80142aa:	6062      	str	r2, [r4, #4]
 80142ac:	bd10      	pop	{r4, pc}
	...

080142b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80142b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b4:	b08f      	sub	sp, #60	@ 0x3c
 80142b6:	4b92      	ldr	r3, [pc, #584]	@ (8014500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 80142b8:	4683      	mov	fp, r0
 80142ba:	ac0a      	add	r4, sp, #40	@ 0x28
 80142bc:	e884 0006 	stmia.w	r4, {r1, r2}
 80142c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80142c4:	4620      	mov	r0, r4
 80142c6:	4b8f      	ldr	r3, [pc, #572]	@ (8014504 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 80142c8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80142cc:	f7ff fe0f 	bl	8013eee <_ZN8touchgfx4Rect10restrictToEss>
 80142d0:	4620      	mov	r0, r4
 80142d2:	f7fa fcb6 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 80142d6:	2800      	cmp	r0, #0
 80142d8:	d170      	bne.n	80143bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80142da:	4b8b      	ldr	r3, [pc, #556]	@ (8014508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80142e2:	2b02      	cmp	r3, #2
 80142e4:	d06a      	beq.n	80143bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80142e6:	9403      	str	r4, [sp, #12]
 80142e8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80142ec:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80142f0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80142f4:	9301      	str	r3, [sp, #4]
 80142f6:	35a4      	adds	r5, #164	@ 0xa4
 80142f8:	b15c      	cbz	r4, 8014312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80142fa:	4629      	mov	r1, r5
 80142fc:	9803      	ldr	r0, [sp, #12]
 80142fe:	f7ff fe47 	bl	8013f90 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014302:	3c01      	subs	r4, #1
 8014304:	b118      	cbz	r0, 801430e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8014306:	b2a1      	uxth	r1, r4
 8014308:	9801      	ldr	r0, [sp, #4]
 801430a:	f7ff ffbd 	bl	8014288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801430e:	3d08      	subs	r5, #8
 8014310:	e7f2      	b.n	80142f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8014312:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8014316:	f10a 33ff 	add.w	r3, sl, #4294967295
 801431a:	f8cd a010 	str.w	sl, [sp, #16]
 801431e:	9302      	str	r3, [sp, #8]
 8014320:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014324:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8014328:	9306      	str	r3, [sp, #24]
 801432a:	445c      	add	r4, fp
 801432c:	2500      	movs	r5, #0
 801432e:	4626      	mov	r6, r4
 8014330:	f8cd a014 	str.w	sl, [sp, #20]
 8014334:	462f      	mov	r7, r5
 8014336:	9b05      	ldr	r3, [sp, #20]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d073      	beq.n	8014424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 801433c:	9903      	ldr	r1, [sp, #12]
 801433e:	4630      	mov	r0, r6
 8014340:	f7ff fdb3 	bl	8013eaa <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014344:	b350      	cbz	r0, 801439c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8014346:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801434a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801434e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8014352:	45e6      	cmp	lr, ip
 8014354:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8014358:	db33      	blt.n	80143c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 801435a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801435e:	88b3      	ldrh	r3, [r6, #4]
 8014360:	4472      	add	r2, lr
 8014362:	4463      	add	r3, ip
 8014364:	b212      	sxth	r2, r2
 8014366:	b21b      	sxth	r3, r3
 8014368:	429a      	cmp	r2, r3
 801436a:	dc2a      	bgt.n	80143c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 801436c:	fa1f f289 	uxth.w	r2, r9
 8014370:	88f3      	ldrh	r3, [r6, #6]
 8014372:	45c8      	cmp	r8, r9
 8014374:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8014378:	4413      	add	r3, r2
 801437a:	fa1f fc88 	uxth.w	ip, r8
 801437e:	b29b      	uxth	r3, r3
 8014380:	fa0f fe83 	sxth.w	lr, r3
 8014384:	db0f      	blt.n	80143a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 8014386:	eba3 030c 	sub.w	r3, r3, ip
 801438a:	1ac9      	subs	r1, r1, r3
 801438c:	b209      	sxth	r1, r1
 801438e:	2900      	cmp	r1, #0
 8014390:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014394:	dd12      	ble.n	80143bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014396:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801439a:	4605      	mov	r5, r0
 801439c:	9b05      	ldr	r3, [sp, #20]
 801439e:	3e08      	subs	r6, #8
 80143a0:	3b01      	subs	r3, #1
 80143a2:	9305      	str	r3, [sp, #20]
 80143a4:	e7c7      	b.n	8014336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 80143a6:	4461      	add	r1, ip
 80143a8:	b209      	sxth	r1, r1
 80143aa:	4571      	cmp	r1, lr
 80143ac:	dc38      	bgt.n	8014420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80143ae:	eba2 020c 	sub.w	r2, r2, ip
 80143b2:	b212      	sxth	r2, r2
 80143b4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80143b8:	2a00      	cmp	r2, #0
 80143ba:	dcee      	bgt.n	801439a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80143bc:	b00f      	add	sp, #60	@ 0x3c
 80143be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c2:	45c8      	cmp	r8, r9
 80143c4:	db2c      	blt.n	8014420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80143c6:	88f3      	ldrh	r3, [r6, #6]
 80143c8:	4499      	add	r9, r3
 80143ca:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80143ce:	4498      	add	r8, r3
 80143d0:	fa0f f989 	sxth.w	r9, r9
 80143d4:	fa0f f888 	sxth.w	r8, r8
 80143d8:	45c1      	cmp	r9, r8
 80143da:	db21      	blt.n	8014420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80143dc:	fa1f f28c 	uxth.w	r2, ip
 80143e0:	88b3      	ldrh	r3, [r6, #4]
 80143e2:	45e6      	cmp	lr, ip
 80143e4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80143e8:	4413      	add	r3, r2
 80143ea:	fa1f f88e 	uxth.w	r8, lr
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	fa0f f983 	sxth.w	r9, r3
 80143f4:	db0a      	blt.n	801440c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 80143f6:	eba3 0308 	sub.w	r3, r3, r8
 80143fa:	1ac9      	subs	r1, r1, r3
 80143fc:	b209      	sxth	r1, r1
 80143fe:	2900      	cmp	r1, #0
 8014400:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8014404:	ddda      	ble.n	80143bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014406:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801440a:	e7c6      	b.n	801439a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801440c:	4441      	add	r1, r8
 801440e:	b209      	sxth	r1, r1
 8014410:	4549      	cmp	r1, r9
 8014412:	dc05      	bgt.n	8014420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014414:	eba2 0208 	sub.w	r2, r2, r8
 8014418:	b212      	sxth	r2, r2
 801441a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801441e:	e7cb      	b.n	80143b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8014420:	4607      	mov	r7, r0
 8014422:	e7bb      	b.n	801439c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8014424:	2d00      	cmp	r5, #0
 8014426:	d181      	bne.n	801432c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8014428:	2f00      	cmp	r7, #0
 801442a:	f000 81df 	beq.w	80147ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801442e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8014432:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8014436:	b2b3      	uxth	r3, r6
 8014438:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801443c:	9305      	str	r3, [sp, #20]
 801443e:	9a05      	ldr	r2, [sp, #20]
 8014440:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014444:	4413      	add	r3, r2
 8014446:	b2ba      	uxth	r2, r7
 8014448:	4492      	add	sl, r2
 801444a:	b29b      	uxth	r3, r3
 801444c:	fa1f fa8a 	uxth.w	sl, sl
 8014450:	fa0f f883 	sxth.w	r8, r3
 8014454:	fa0f f98a 	sxth.w	r9, sl
 8014458:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801445c:	9b04      	ldr	r3, [sp, #16]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d054      	beq.n	801450c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8014462:	9903      	ldr	r1, [sp, #12]
 8014464:	4620      	mov	r0, r4
 8014466:	f7ff fd20 	bl	8013eaa <_ZNK8touchgfx4Rect9intersectERKS0_>
 801446a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801446e:	b1c0      	cbz	r0, 80144a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014470:	f9b4 e000 	ldrsh.w	lr, [r4]
 8014474:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014478:	4576      	cmp	r6, lr
 801447a:	dc22      	bgt.n	80144c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 801447c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014480:	44f4      	add	ip, lr
 8014482:	fa0f fc8c 	sxth.w	ip, ip
 8014486:	45e0      	cmp	r8, ip
 8014488:	db1b      	blt.n	80144c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 801448a:	428f      	cmp	r7, r1
 801448c:	fa1f fc81 	uxth.w	ip, r1
 8014490:	88e1      	ldrh	r1, [r4, #6]
 8014492:	dc0d      	bgt.n	80144b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8014494:	ebaa 0c0c 	sub.w	ip, sl, ip
 8014498:	f8a4 9002 	strh.w	r9, [r4, #2]
 801449c:	eba1 010c 	sub.w	r1, r1, ip
 80144a0:	80e1      	strh	r1, [r4, #6]
 80144a2:	4628      	mov	r0, r5
 80144a4:	9904      	ldr	r1, [sp, #16]
 80144a6:	3c08      	subs	r4, #8
 80144a8:	4605      	mov	r5, r0
 80144aa:	3901      	subs	r1, #1
 80144ac:	9104      	str	r1, [sp, #16]
 80144ae:	e7d3      	b.n	8014458 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 80144b0:	4461      	add	r1, ip
 80144b2:	b209      	sxth	r1, r1
 80144b4:	4549      	cmp	r1, r9
 80144b6:	dcf5      	bgt.n	80144a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80144b8:	eba2 0c0c 	sub.w	ip, r2, ip
 80144bc:	f8a4 c006 	strh.w	ip, [r4, #6]
 80144c0:	e7ef      	b.n	80144a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80144c2:	428f      	cmp	r7, r1
 80144c4:	dcee      	bgt.n	80144a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80144c6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80144ca:	4461      	add	r1, ip
 80144cc:	b209      	sxth	r1, r1
 80144ce:	4589      	cmp	r9, r1
 80144d0:	dbe8      	blt.n	80144a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80144d2:	4576      	cmp	r6, lr
 80144d4:	fa1f fc8e 	uxth.w	ip, lr
 80144d8:	88a1      	ldrh	r1, [r4, #4]
 80144da:	dc07      	bgt.n	80144ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 80144dc:	eba3 0c0c 	sub.w	ip, r3, ip
 80144e0:	f8a4 8000 	strh.w	r8, [r4]
 80144e4:	eba1 010c 	sub.w	r1, r1, ip
 80144e8:	80a1      	strh	r1, [r4, #4]
 80144ea:	e7da      	b.n	80144a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80144ec:	4461      	add	r1, ip
 80144ee:	b209      	sxth	r1, r1
 80144f0:	4588      	cmp	r8, r1
 80144f2:	dbd7      	blt.n	80144a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80144f4:	9905      	ldr	r1, [sp, #20]
 80144f6:	eba1 0c0c 	sub.w	ip, r1, ip
 80144fa:	f8a4 c004 	strh.w	ip, [r4, #4]
 80144fe:	e7d0      	b.n	80144a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014500:	240251e6 	.word	0x240251e6
 8014504:	240251e4 	.word	0x240251e4
 8014508:	240251f0 	.word	0x240251f0
 801450c:	2d00      	cmp	r5, #0
 801450e:	f000 816d 	beq.w	80147ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014512:	9b06      	ldr	r3, [sp, #24]
 8014514:	445b      	add	r3, fp
 8014516:	461c      	mov	r4, r3
 8014518:	9b02      	ldr	r3, [sp, #8]
 801451a:	3301      	adds	r3, #1
 801451c:	f000 8166 	beq.w	80147ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014520:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8014524:	9803      	ldr	r0, [sp, #12]
 8014526:	4629      	mov	r1, r5
 8014528:	f7ff fd32 	bl	8013f90 <_ZNK8touchgfx4Rect8includesERKS0_>
 801452c:	b120      	cbz	r0, 8014538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 801452e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014532:	9801      	ldr	r0, [sp, #4]
 8014534:	f7ff fea8 	bl	8014288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014538:	9903      	ldr	r1, [sp, #12]
 801453a:	4628      	mov	r0, r5
 801453c:	f7ff fcb5 	bl	8013eaa <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014540:	2800      	cmp	r0, #0
 8014542:	f000 809c 	beq.w	801467e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8014546:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801454a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801454e:	fa1f f189 	uxth.w	r1, r9
 8014552:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014556:	9309      	str	r3, [sp, #36]	@ 0x24
 8014558:	eb01 0c03 	add.w	ip, r1, r3
 801455c:	b283      	uxth	r3, r0
 801455e:	4548      	cmp	r0, r9
 8014560:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8014564:	fa1f fa8c 	uxth.w	sl, ip
 8014568:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801456c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8014570:	eb03 050c 	add.w	r5, r3, ip
 8014574:	b2ad      	uxth	r5, r5
 8014576:	9505      	str	r5, [sp, #20]
 8014578:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801457c:	9504      	str	r5, [sp, #16]
 801457e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8014582:	f340 8099 	ble.w	80146b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8014586:	1a5b      	subs	r3, r3, r1
 8014588:	4596      	cmp	lr, r2
 801458a:	fa0f f08a 	sxth.w	r0, sl
 801458e:	b29b      	uxth	r3, r3
 8014590:	b21e      	sxth	r6, r3
 8014592:	dd2e      	ble.n	80145f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8014594:	9f02      	ldr	r7, [sp, #8]
 8014596:	fa1f fe8e 	uxth.w	lr, lr
 801459a:	b292      	uxth	r2, r2
 801459c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 80145a0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80145a4:	9f04      	ldr	r7, [sp, #16]
 80145a6:	ebae 0102 	sub.w	r1, lr, r2
 80145aa:	44a6      	add	lr, r4
 80145ac:	1a3f      	subs	r7, r7, r0
 80145ae:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 80145b2:	b289      	uxth	r1, r1
 80145b4:	4402      	add	r2, r0
 80145b6:	fa0f fe8e 	sxth.w	lr, lr
 80145ba:	b20d      	sxth	r5, r1
 80145bc:	b212      	sxth	r2, r2
 80145be:	436f      	muls	r7, r5
 80145c0:	ebae 0202 	sub.w	r2, lr, r2
 80145c4:	4372      	muls	r2, r6
 80145c6:	4297      	cmp	r7, r2
 80145c8:	db09      	blt.n	80145de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 80145ca:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 80145ce:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 80145d2:	449c      	add	ip, r3
 80145d4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80145d8:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80145dc:	e684      	b.n	80142e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80145de:	4421      	add	r1, r4
 80145e0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 80145e4:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 80145e8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80145ec:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80145f0:	e67a      	b.n	80142e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80145f2:	9f04      	ldr	r7, [sp, #16]
 80145f4:	42b8      	cmp	r0, r7
 80145f6:	da27      	bge.n	8014648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 80145f8:	9902      	ldr	r1, [sp, #8]
 80145fa:	1a3f      	subs	r7, r7, r0
 80145fc:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8014600:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8014604:	eb05 010e 	add.w	r1, r5, lr
 8014608:	fa1f f881 	uxth.w	r8, r1
 801460c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8014610:	4411      	add	r1, r2
 8014612:	fa0f f988 	sxth.w	r9, r8
 8014616:	eba2 020e 	sub.w	r2, r2, lr
 801461a:	eba1 0108 	sub.w	r1, r1, r8
 801461e:	4372      	muls	r2, r6
 8014620:	b289      	uxth	r1, r1
 8014622:	fa0f f881 	sxth.w	r8, r1
 8014626:	fb08 f707 	mul.w	r7, r8, r7
 801462a:	42ba      	cmp	r2, r7
 801462c:	dc06      	bgt.n	801463c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 801462e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8014632:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8014636:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801463a:	e7ca      	b.n	80145d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801463c:	4429      	add	r1, r5
 801463e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8014642:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014646:	e64f      	b.n	80142e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014648:	9805      	ldr	r0, [sp, #20]
 801464a:	2d06      	cmp	r5, #6
 801464c:	ebaa 0000 	sub.w	r0, sl, r0
 8014650:	b280      	uxth	r0, r0
 8014652:	fa0f fe80 	sxth.w	lr, r0
 8014656:	d817      	bhi.n	8014688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8014658:	9b04      	ldr	r3, [sp, #16]
 801465a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801465e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014662:	1c6b      	adds	r3, r5, #1
 8014664:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8014668:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801466c:	9b01      	ldr	r3, [sp, #4]
 801466e:	9801      	ldr	r0, [sp, #4]
 8014670:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014674:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014678:	805a      	strh	r2, [r3, #2]
 801467a:	809e      	strh	r6, [r3, #4]
 801467c:	80d9      	strh	r1, [r3, #6]
 801467e:	9b02      	ldr	r3, [sp, #8]
 8014680:	3c08      	subs	r4, #8
 8014682:	3b01      	subs	r3, #1
 8014684:	9302      	str	r3, [sp, #8]
 8014686:	e747      	b.n	8014518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 8014688:	9a02      	ldr	r2, [sp, #8]
 801468a:	45b6      	cmp	lr, r6
 801468c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014690:	db0d      	blt.n	80146ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8014692:	449c      	add	ip, r3
 8014694:	445a      	add	r2, fp
 8014696:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801469a:	fa1f fc8c 	uxth.w	ip, ip
 801469e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 80146a2:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80146a6:	448c      	add	ip, r1
 80146a8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 80146ac:	e61c      	b.n	80142e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80146ae:	445a      	add	r2, fp
 80146b0:	4484      	add	ip, r0
 80146b2:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 80146b6:	e78f      	b.n	80145d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80146b8:	fa1f f18e 	uxth.w	r1, lr
 80146bc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 80146c0:	b293      	uxth	r3, r2
 80146c2:	4596      	cmp	lr, r2
 80146c4:	eb01 0806 	add.w	r8, r1, r6
 80146c8:	9306      	str	r3, [sp, #24]
 80146ca:	fa1f f888 	uxth.w	r8, r8
 80146ce:	9f06      	ldr	r7, [sp, #24]
 80146d0:	fa0f f388 	sxth.w	r3, r8
 80146d4:	9307      	str	r3, [sp, #28]
 80146d6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80146da:	443b      	add	r3, r7
 80146dc:	b29b      	uxth	r3, r3
 80146de:	9308      	str	r3, [sp, #32]
 80146e0:	da24      	bge.n	801472c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 80146e2:	9905      	ldr	r1, [sp, #20]
 80146e4:	eba3 0308 	sub.w	r3, r3, r8
 80146e8:	eba2 020e 	sub.w	r2, r2, lr
 80146ec:	eba9 0000 	sub.w	r0, r9, r0
 80146f0:	ebaa 0401 	sub.w	r4, sl, r1
 80146f4:	b29b      	uxth	r3, r3
 80146f6:	b2a4      	uxth	r4, r4
 80146f8:	b219      	sxth	r1, r3
 80146fa:	b225      	sxth	r5, r4
 80146fc:	4348      	muls	r0, r1
 80146fe:	436a      	muls	r2, r5
 8014700:	4282      	cmp	r2, r0
 8014702:	9a02      	ldr	r2, [sp, #8]
 8014704:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014708:	445a      	add	r2, fp
 801470a:	dc06      	bgt.n	801471a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801470c:	9b07      	ldr	r3, [sp, #28]
 801470e:	44a4      	add	ip, r4
 8014710:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8014714:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8014718:	e75e      	b.n	80145d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801471a:	9904      	ldr	r1, [sp, #16]
 801471c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8014720:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8014724:	4433      	add	r3, r6
 8014726:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801472a:	e5dd      	b.n	80142e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801472c:	9f06      	ldr	r7, [sp, #24]
 801472e:	9b04      	ldr	r3, [sp, #16]
 8014730:	1bc9      	subs	r1, r1, r7
 8014732:	fa0f f78a 	sxth.w	r7, sl
 8014736:	b289      	uxth	r1, r1
 8014738:	429f      	cmp	r7, r3
 801473a:	fa0f fe81 	sxth.w	lr, r1
 801473e:	dd23      	ble.n	8014788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8014740:	9a05      	ldr	r2, [sp, #20]
 8014742:	eba9 0000 	sub.w	r0, r9, r0
 8014746:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801474a:	ebaa 0202 	sub.w	r2, sl, r2
 801474e:	9d07      	ldr	r5, [sp, #28]
 8014750:	fb0e f000 	mul.w	r0, lr, r0
 8014754:	b292      	uxth	r2, r2
 8014756:	eba5 0a03 	sub.w	sl, r5, r3
 801475a:	9b02      	ldr	r3, [sp, #8]
 801475c:	b214      	sxth	r4, r2
 801475e:	00db      	lsls	r3, r3, #3
 8014760:	fb04 fa0a 	mul.w	sl, r4, sl
 8014764:	445b      	add	r3, fp
 8014766:	4550      	cmp	r0, sl
 8014768:	db03      	blt.n	8014772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 801476a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801476e:	4494      	add	ip, r2
 8014770:	e732      	b.n	80145d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014772:	9a04      	ldr	r2, [sp, #16]
 8014774:	4431      	add	r1, r6
 8014776:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801477a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801477e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8014782:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014786:	e75c      	b.n	8014642 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8014788:	9b08      	ldr	r3, [sp, #32]
 801478a:	2d06      	cmp	r5, #6
 801478c:	eba3 0308 	sub.w	r3, r3, r8
 8014790:	b29b      	uxth	r3, r3
 8014792:	b218      	sxth	r0, r3
 8014794:	d813      	bhi.n	80147be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8014796:	9b07      	ldr	r3, [sp, #28]
 8014798:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801479c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 80147a0:	1c6b      	adds	r3, r5, #1
 80147a2:	9901      	ldr	r1, [sp, #4]
 80147a4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80147a8:	9b01      	ldr	r3, [sp, #4]
 80147aa:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80147ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80147b2:	805a      	strh	r2, [r3, #2]
 80147b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80147b6:	f8a3 e006 	strh.w	lr, [r3, #6]
 80147ba:	809a      	strh	r2, [r3, #4]
 80147bc:	e75f      	b.n	801467e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 80147be:	9c02      	ldr	r4, [sp, #8]
 80147c0:	4570      	cmp	r0, lr
 80147c2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80147c6:	db0d      	blt.n	80147e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 80147c8:	4431      	add	r1, r6
 80147ca:	9b06      	ldr	r3, [sp, #24]
 80147cc:	445c      	add	r4, fp
 80147ce:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80147d2:	b289      	uxth	r1, r1
 80147d4:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 80147d8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80147dc:	4419      	add	r1, r3
 80147de:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 80147e2:	e581      	b.n	80142e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80147e4:	445c      	add	r4, fp
 80147e6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 80147ea:	e79b      	b.n	8014724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 80147ec:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80147f0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80147f4:	1e65      	subs	r5, r4, #1
 80147f6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80147fa:	b2ad      	uxth	r5, r5
 80147fc:	42b5      	cmp	r5, r6
 80147fe:	d044      	beq.n	801488a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 8014800:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8014804:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8014808:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801480c:	4282      	cmp	r2, r0
 801480e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8014812:	d11f      	bne.n	8014854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8014814:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8014818:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801481c:	459c      	cmp	ip, r3
 801481e:	d119      	bne.n	8014854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8014820:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8014824:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8014828:	19d8      	adds	r0, r3, r7
 801482a:	b200      	sxth	r0, r0
 801482c:	4288      	cmp	r0, r1
 801482e:	d109      	bne.n	8014844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8014830:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8014834:	4413      	add	r3, r2
 8014836:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801483a:	4629      	mov	r1, r5
 801483c:	9801      	ldr	r0, [sp, #4]
 801483e:	f7ff fd23 	bl	8014288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014842:	e003      	b.n	801484c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014844:	4411      	add	r1, r2
 8014846:	b209      	sxth	r1, r1
 8014848:	42b9      	cmp	r1, r7
 801484a:	d0f3      	beq.n	8014834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801484c:	3d01      	subs	r5, #1
 801484e:	3c08      	subs	r4, #8
 8014850:	b2ad      	uxth	r5, r5
 8014852:	e7d3      	b.n	80147fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8014854:	42b9      	cmp	r1, r7
 8014856:	d1f9      	bne.n	801484c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014858:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801485c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014860:	4299      	cmp	r1, r3
 8014862:	d1f3      	bne.n	801484c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014864:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014868:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801486c:	181f      	adds	r7, r3, r0
 801486e:	b23f      	sxth	r7, r7
 8014870:	42ba      	cmp	r2, r7
 8014872:	d105      	bne.n	8014880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 8014874:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8014878:	440b      	add	r3, r1
 801487a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801487e:	e7dc      	b.n	801483a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8014880:	440a      	add	r2, r1
 8014882:	b212      	sxth	r2, r2
 8014884:	4290      	cmp	r0, r2
 8014886:	d1e1      	bne.n	801484c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014888:	e7f6      	b.n	8014878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 801488a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801488e:	2e07      	cmp	r6, #7
 8014890:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8014894:	d812      	bhi.n	80148bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 8014896:	1c75      	adds	r5, r6, #1
 8014898:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801489c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80148a0:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 80148a4:	9d01      	ldr	r5, [sp, #4]
 80148a6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80148aa:	442c      	add	r4, r5
 80148ac:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80148b0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80148b4:	8061      	strh	r1, [r4, #2]
 80148b6:	80a2      	strh	r2, [r4, #4]
 80148b8:	80e3      	strh	r3, [r4, #6]
 80148ba:	e57f      	b.n	80143bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80148bc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80148c0:	3e01      	subs	r6, #1
 80148c2:	445c      	add	r4, fp
 80148c4:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80148c8:	f04f 37ff 	mov.w	r7, #4294967295
 80148cc:	2500      	movs	r5, #0
 80148ce:	9305      	str	r3, [sp, #20]
 80148d0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80148d4:	1e72      	subs	r2, r6, #1
 80148d6:	9302      	str	r3, [sp, #8]
 80148d8:	4691      	mov	r9, r2
 80148da:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80148de:	9304      	str	r3, [sp, #16]
 80148e0:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 80148e4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80148e8:	6818      	ldr	r0, [r3, #0]
 80148ea:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80148ee:	9207      	str	r2, [sp, #28]
 80148f0:	bf16      	itet	ne
 80148f2:	9905      	ldrne	r1, [sp, #20]
 80148f4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80148f8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80148fc:	9306      	str	r3, [sp, #24]
 80148fe:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8014902:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8014906:	fb18 f801 	smulbb	r8, r8, r1
 801490a:	6859      	ldr	r1, [r3, #4]
 801490c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014910:	4671      	mov	r1, lr
 8014912:	a80c      	add	r0, sp, #48	@ 0x30
 8014914:	f7ff fb62 	bl	8013fdc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014918:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801491c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8014920:	f04f 0c08 	mov.w	ip, #8
 8014924:	9b04      	ldr	r3, [sp, #16]
 8014926:	9a02      	ldr	r2, [sp, #8]
 8014928:	fb10 f001 	smulbb	r0, r0, r1
 801492c:	fb02 8803 	mla	r8, r2, r3, r8
 8014930:	eba0 0108 	sub.w	r1, r0, r8
 8014934:	fb90 f0fc 	sdiv	r0, r0, ip
 8014938:	4288      	cmp	r0, r1
 801493a:	dc20      	bgt.n	801497e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 801493c:	4551      	cmp	r1, sl
 801493e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014942:	da03      	bge.n	801494c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 8014944:	b1d9      	cbz	r1, 801497e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8014946:	468a      	mov	sl, r1
 8014948:	464f      	mov	r7, r9
 801494a:	4635      	mov	r5, r6
 801494c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014950:	f119 0f02 	cmn.w	r9, #2
 8014954:	d1c6      	bne.n	80148e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8014956:	4616      	mov	r6, r2
 8014958:	3201      	adds	r2, #1
 801495a:	f1a4 0408 	sub.w	r4, r4, #8
 801495e:	d1b7      	bne.n	80148d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8014960:	9b01      	ldr	r3, [sp, #4]
 8014962:	b2ac      	uxth	r4, r5
 8014964:	00ed      	lsls	r5, r5, #3
 8014966:	1958      	adds	r0, r3, r5
 8014968:	1c7b      	adds	r3, r7, #1
 801496a:	d10b      	bne.n	8014984 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 801496c:	4601      	mov	r1, r0
 801496e:	9803      	ldr	r0, [sp, #12]
 8014970:	f7ff fb34 	bl	8013fdc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014974:	4621      	mov	r1, r4
 8014976:	9801      	ldr	r0, [sp, #4]
 8014978:	f7ff fc86 	bl	8014288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801497c:	e4b4      	b.n	80142e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801497e:	464f      	mov	r7, r9
 8014980:	4635      	mov	r5, r6
 8014982:	e7ed      	b.n	8014960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 8014984:	9b01      	ldr	r3, [sp, #4]
 8014986:	00ff      	lsls	r7, r7, #3
 8014988:	445d      	add	r5, fp
 801498a:	19d9      	adds	r1, r3, r7
 801498c:	445f      	add	r7, fp
 801498e:	f7ff fb25 	bl	8013fdc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014992:	9b03      	ldr	r3, [sp, #12]
 8014994:	cb03      	ldmia	r3!, {r0, r1}
 8014996:	9b03      	ldr	r3, [sp, #12]
 8014998:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801499c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80149a0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80149a4:	6869      	ldr	r1, [r5, #4]
 80149a6:	c303      	stmia	r3!, {r0, r1}
 80149a8:	e7e4      	b.n	8014974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 80149aa:	bf00      	nop

080149ac <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80149ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b0:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 80149b4:	b0a1      	sub	sp, #132	@ 0x84
 80149b6:	4604      	mov	r4, r0
 80149b8:	4630      	mov	r0, r6
 80149ba:	f7fa f942 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 80149be:	4605      	mov	r5, r0
 80149c0:	b948      	cbnz	r0, 80149d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80149c2:	6823      	ldr	r3, [r4, #0]
 80149c4:	4620      	mov	r0, r4
 80149c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80149c8:	e896 0006 	ldmia.w	r6, {r1, r2}
 80149cc:	4798      	blx	r3
 80149ce:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80149d2:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80149d6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d149      	bne.n	8014a72 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 80149de:	4bb2      	ldr	r3, [pc, #712]	@ (8014ca8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 80149e6:	1ebb      	subs	r3, r7, #2
 80149e8:	425f      	negs	r7, r3
 80149ea:	415f      	adcs	r7, r3
 80149ec:	4baf      	ldr	r3, [pc, #700]	@ (8014cac <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d040      	beq.n	8014a76 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 80149f4:	4dae      	ldr	r5, [pc, #696]	@ (8014cb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 80149f6:	4628      	mov	r0, r5
 80149f8:	f7fa f923 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 80149fc:	4606      	mov	r6, r0
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d139      	bne.n	8014a76 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8014a02:	4628      	mov	r0, r5
 8014a04:	f7ff f97e 	bl	8013d04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014a08:	6823      	ldr	r3, [r4, #0]
 8014a0a:	6829      	ldr	r1, [r5, #0]
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a10:	686a      	ldr	r2, [r5, #4]
 8014a12:	4798      	blx	r3
 8014a14:	802e      	strh	r6, [r5, #0]
 8014a16:	806e      	strh	r6, [r5, #2]
 8014a18:	80ae      	strh	r6, [r5, #4]
 8014a1a:	80ee      	strh	r6, [r5, #6]
 8014a1c:	af0f      	add	r7, sp, #60	@ 0x3c
 8014a1e:	4ea5      	ldr	r6, [pc, #660]	@ (8014cb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 8014a20:	4638      	mov	r0, r7
 8014a22:	f7ff fbd5 	bl	80141d0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014a26:	8835      	ldrh	r5, [r6, #0]
 8014a28:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 8014a2c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014a30:	462b      	mov	r3, r5
 8014a32:	4563      	cmp	r3, ip
 8014a34:	d224      	bcs.n	8014a80 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8014a36:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8014a3a:	2907      	cmp	r1, #7
 8014a3c:	d816      	bhi.n	8014a6c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8014a3e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8014a42:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8014a46:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8014a4a:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 8014a4e:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8014a52:	1c4a      	adds	r2, r1, #1
 8014a54:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 8014a58:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 8014a5c:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 8014a60:	f8a2 a002 	strh.w	sl, [r2, #2]
 8014a64:	f8a2 8004 	strh.w	r8, [r2, #4]
 8014a68:	f8a2 e006 	strh.w	lr, [r2, #6]
 8014a6c:	3301      	adds	r3, #1
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	e7df      	b.n	8014a32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8014a72:	2701      	movs	r7, #1
 8014a74:	e7ba      	b.n	80149ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 8014a76:	2f00      	cmp	r7, #0
 8014a78:	d1d0      	bne.n	8014a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 8014a7a:	b021      	add	sp, #132	@ 0x84
 8014a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a80:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8014a84:	42ab      	cmp	r3, r5
 8014a86:	d90c      	bls.n	8014aa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 8014a88:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8014a8c:	6822      	ldr	r2, [r4, #0]
 8014a8e:	3501      	adds	r5, #1
 8014a90:	4620      	mov	r0, r4
 8014a92:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8014a94:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8014a98:	b2ad      	uxth	r5, r5
 8014a9a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8014a9e:	47b8      	blx	r7
 8014aa0:	e7ee      	b.n	8014a80 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8014aa2:	4d81      	ldr	r5, [pc, #516]	@ (8014ca8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8014aa4:	6828      	ldr	r0, [r5, #0]
 8014aa6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8014aaa:	2b01      	cmp	r3, #1
 8014aac:	f040 813d 	bne.w	8014d2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8014ab0:	4a81      	ldr	r2, [pc, #516]	@ (8014cb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8014ab2:	8833      	ldrh	r3, [r6, #0]
 8014ab4:	7812      	ldrb	r2, [r2, #0]
 8014ab6:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 8014aba:	2a01      	cmp	r2, #1
 8014abc:	d014      	beq.n	8014ae8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8014abe:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8014ac2:	f04f 0900 	mov.w	r9, #0
 8014ac6:	32ae      	adds	r2, #174	@ 0xae
 8014ac8:	4283      	cmp	r3, r0
 8014aca:	f102 0208 	add.w	r2, r2, #8
 8014ace:	f280 8083 	bge.w	8014bd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8014ad2:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 8014adc:	4439      	add	r1, r7
 8014ade:	b209      	sxth	r1, r1
 8014ae0:	4589      	cmp	r9, r1
 8014ae2:	bfb8      	it	lt
 8014ae4:	4689      	movlt	r9, r1
 8014ae6:	e7ef      	b.n	8014ac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8014ae8:	4f74      	ldr	r7, [pc, #464]	@ (8014cbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 8014aea:	883a      	ldrh	r2, [r7, #0]
 8014aec:	4693      	mov	fp, r2
 8014aee:	4283      	cmp	r3, r0
 8014af0:	da08      	bge.n	8014b04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 8014af2:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8014af6:	3301      	adds	r3, #1
 8014af8:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 8014afc:	458b      	cmp	fp, r1
 8014afe:	bfa8      	it	ge
 8014b00:	468b      	movge	fp, r1
 8014b02:	e7f4      	b.n	8014aee <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8014b04:	2a0f      	cmp	r2, #15
 8014b06:	f04f 0300 	mov.w	r3, #0
 8014b0a:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8014cc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 8014b0e:	bf8c      	ite	hi
 8014b10:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 8014b14:	f04f 0801 	movls.w	r8, #1
 8014b18:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8014b1c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014b20:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8014b24:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014b28:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8014b2c:	6828      	ldr	r0, [r5, #0]
 8014b2e:	455b      	cmp	r3, fp
 8014b30:	f340 80c8 	ble.w	8014cc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8014b34:	6803      	ldr	r3, [r0, #0]
 8014b36:	f8b7 a000 	ldrh.w	sl, [r7]
 8014b3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014b3e:	4798      	blx	r3
 8014b40:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8014b44:	ebaa 0000 	sub.w	r0, sl, r0
 8014b48:	682b      	ldr	r3, [r5, #0]
 8014b4a:	ebac 0e08 	sub.w	lr, ip, r8
 8014b4e:	b280      	uxth	r0, r0
 8014b50:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8014b54:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8014b58:	4570      	cmp	r0, lr
 8014b5a:	dd05      	ble.n	8014b68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8014b5c:	4558      	cmp	r0, fp
 8014b5e:	dd03      	ble.n	8014b68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8014b60:	b901      	cbnz	r1, 8014b64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8014b62:	b392      	cbz	r2, 8014bca <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 8014b64:	4658      	mov	r0, fp
 8014b66:	e006      	b.n	8014b76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 8014b68:	2900      	cmp	r1, #0
 8014b6a:	d1fb      	bne.n	8014b64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8014b6c:	2a00      	cmp	r2, #0
 8014b6e:	d1f9      	bne.n	8014b64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8014b70:	4558      	cmp	r0, fp
 8014b72:	bfb8      	it	lt
 8014b74:	4658      	movlt	r0, fp
 8014b76:	f9b9 3000 	ldrsh.w	r3, [r9]
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8014b80:	ebac 0000 	sub.w	r0, ip, r0
 8014b84:	f8b6 a000 	ldrh.w	sl, [r6]
 8014b88:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8014b8c:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8014b90:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014b94:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014b98:	4553      	cmp	r3, sl
 8014b9a:	ddc5      	ble.n	8014b28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8014b9c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8014ba0:	ab0d      	add	r3, sp, #52	@ 0x34
 8014ba2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8014ba6:	6851      	ldr	r1, [r2, #4]
 8014ba8:	c303      	stmia	r3!, {r0, r1}
 8014baa:	a80d      	add	r0, sp, #52	@ 0x34
 8014bac:	a90b      	add	r1, sp, #44	@ 0x2c
 8014bae:	f7fa f805 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 8014bb2:	a80d      	add	r0, sp, #52	@ 0x34
 8014bb4:	f7fa f845 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014bb8:	b920      	cbnz	r0, 8014bc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 8014bba:	6823      	ldr	r3, [r4, #0]
 8014bbc:	a90d      	add	r1, sp, #52	@ 0x34
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014bc2:	4798      	blx	r3
 8014bc4:	f10a 0a01 	add.w	sl, sl, #1
 8014bc8:	e7e4      	b.n	8014b94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 8014bca:	681a      	ldr	r2, [r3, #0]
 8014bcc:	2101      	movs	r1, #1
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8014bd4:	4790      	blx	r2
 8014bd6:	e7a7      	b.n	8014b28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8014bd8:	4b39      	ldr	r3, [pc, #228]	@ (8014cc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 8014bda:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8014cbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 8014bde:	881f      	ldrh	r7, [r3, #0]
 8014be0:	2300      	movs	r3, #0
 8014be2:	2f0f      	cmp	r7, #15
 8014be4:	bf8c      	ite	hi
 8014be6:	08ff      	lsrhi	r7, r7, #3
 8014be8:	2701      	movls	r7, #1
 8014bea:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8014bee:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8014bf2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8014bf6:	6828      	ldr	r0, [r5, #0]
 8014bf8:	4413      	add	r3, r2
 8014bfa:	b21b      	sxth	r3, r3
 8014bfc:	454b      	cmp	r3, r9
 8014bfe:	da61      	bge.n	8014cc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8014c00:	6803      	ldr	r3, [r0, #0]
 8014c02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014c06:	4798      	blx	r3
 8014c08:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 8014c0c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8014c10:	682a      	ldr	r2, [r5, #0]
 8014c12:	4473      	add	r3, lr
 8014c14:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 8014c18:	b21b      	sxth	r3, r3
 8014c1a:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 8014c1e:	eb03 0e07 	add.w	lr, r3, r7
 8014c22:	4570      	cmp	r0, lr
 8014c24:	da0d      	bge.n	8014c42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8014c26:	4548      	cmp	r0, r9
 8014c28:	da0b      	bge.n	8014c42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8014c2a:	f1bc 0f00 	cmp.w	ip, #0
 8014c2e:	d138      	bne.n	8014ca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014c30:	2900      	cmp	r1, #0
 8014c32:	d136      	bne.n	8014ca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014c34:	6813      	ldr	r3, [r2, #0]
 8014c36:	2101      	movs	r1, #1
 8014c38:	4610      	mov	r0, r2
 8014c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014c3e:	4798      	blx	r3
 8014c40:	e7d5      	b.n	8014bee <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8014c42:	f1bc 0f00 	cmp.w	ip, #0
 8014c46:	d12c      	bne.n	8014ca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014c48:	bb59      	cbnz	r1, 8014ca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014c4a:	4548      	cmp	r0, r9
 8014c4c:	bfa8      	it	ge
 8014c4e:	4648      	movge	r0, r9
 8014c50:	f9b8 2000 	ldrsh.w	r2, [r8]
 8014c54:	2100      	movs	r1, #0
 8014c56:	1ac0      	subs	r0, r0, r3
 8014c58:	f8b6 a000 	ldrh.w	sl, [r6]
 8014c5c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8014c60:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014c64:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8014c68:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8014c6c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014c70:	4553      	cmp	r3, sl
 8014c72:	ddbc      	ble.n	8014bee <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8014c74:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8014c78:	ab0d      	add	r3, sp, #52	@ 0x34
 8014c7a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8014c7e:	6851      	ldr	r1, [r2, #4]
 8014c80:	c303      	stmia	r3!, {r0, r1}
 8014c82:	a80d      	add	r0, sp, #52	@ 0x34
 8014c84:	a90b      	add	r1, sp, #44	@ 0x2c
 8014c86:	f7f9 ff99 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 8014c8a:	a80d      	add	r0, sp, #52	@ 0x34
 8014c8c:	f7f9 ffd9 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014c90:	b920      	cbnz	r0, 8014c9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 8014c92:	6823      	ldr	r3, [r4, #0]
 8014c94:	a90d      	add	r1, sp, #52	@ 0x34
 8014c96:	4620      	mov	r0, r4
 8014c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014c9a:	4798      	blx	r3
 8014c9c:	f10a 0a01 	add.w	sl, sl, #1
 8014ca0:	e7e4      	b.n	8014c6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 8014ca2:	4648      	mov	r0, r9
 8014ca4:	e7d4      	b.n	8014c50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 8014ca6:	bf00      	nop
 8014ca8:	240251f0 	.word	0x240251f0
 8014cac:	24025230 	.word	0x24025230
 8014cb0:	2402523c 	.word	0x2402523c
 8014cb4:	2400007c 	.word	0x2400007c
 8014cb8:	240251e8 	.word	0x240251e8
 8014cbc:	240251e4 	.word	0x240251e4
 8014cc0:	240251e6 	.word	0x240251e6
 8014cc4:	6828      	ldr	r0, [r5, #0]
 8014cc6:	6803      	ldr	r3, [r0, #0]
 8014cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cca:	4798      	blx	r3
 8014ccc:	4ba4      	ldr	r3, [pc, #656]	@ (8014f60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	f43f aed2 	beq.w	8014a7a <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 8014cdc:	a80f      	add	r0, sp, #60	@ 0x3c
 8014cde:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 8014ce2:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8014ce6:	4b9f      	ldr	r3, [pc, #636]	@ (8014f64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8014ce8:	881b      	ldrh	r3, [r3, #0]
 8014cea:	42b3      	cmp	r3, r6
 8014cec:	f4bf aec5 	bcs.w	8014a7a <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8014cf0:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8014cf4:	2907      	cmp	r1, #7
 8014cf6:	d815      	bhi.n	8014d24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 8014cf8:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8014cfc:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8014d00:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8014d04:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8014d08:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8014d0c:	1c4a      	adds	r2, r1, #1
 8014d0e:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8014d12:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 8014d16:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 8014d1a:	f8a2 e002 	strh.w	lr, [r2, #2]
 8014d1e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8014d22:	80d7      	strh	r7, [r2, #6]
 8014d24:	3301      	adds	r3, #1
 8014d26:	b29b      	uxth	r3, r3
 8014d28:	e7df      	b.n	8014cea <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 8014d2a:	2b02      	cmp	r3, #2
 8014d2c:	f040 80ce 	bne.w	8014ecc <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8014d30:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014d34:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 8014d38:	9308      	str	r3, [sp, #32]
 8014d3a:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 8014d3e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014d42:	9307      	str	r3, [sp, #28]
 8014d44:	b2bf      	uxth	r7, r7
 8014d46:	6803      	ldr	r3, [r0, #0]
 8014d48:	fa0f f887 	sxth.w	r8, r7
 8014d4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014d50:	4798      	blx	r3
 8014d52:	4b85      	ldr	r3, [pc, #532]	@ (8014f68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8014d54:	4682      	mov	sl, r0
 8014d56:	2000      	movs	r0, #0
 8014d58:	881b      	ldrh	r3, [r3, #0]
 8014d5a:	9302      	str	r3, [sp, #8]
 8014d5c:	4b83      	ldr	r3, [pc, #524]	@ (8014f6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 8014d5e:	881e      	ldrh	r6, [r3, #0]
 8014d60:	4b83      	ldr	r3, [pc, #524]	@ (8014f70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	bf1e      	ittt	ne
 8014d68:	9b02      	ldrne	r3, [sp, #8]
 8014d6a:	9602      	strne	r6, [sp, #8]
 8014d6c:	461e      	movne	r6, r3
 8014d6e:	f7ec fe45 	bl	80019fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014d72:	fb96 fbfb 	sdiv	fp, r6, fp
 8014d76:	fb0b f808 	mul.w	r8, fp, r8
 8014d7a:	45c2      	cmp	sl, r8
 8014d7c:	da0c      	bge.n	8014d98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 8014d7e:	6828      	ldr	r0, [r5, #0]
 8014d80:	210a      	movs	r1, #10
 8014d82:	6803      	ldr	r3, [r0, #0]
 8014d84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014d88:	4798      	blx	r3
 8014d8a:	6828      	ldr	r0, [r5, #0]
 8014d8c:	6803      	ldr	r3, [r0, #0]
 8014d8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014d92:	4798      	blx	r3
 8014d94:	4682      	mov	sl, r0
 8014d96:	e7f0      	b.n	8014d7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 8014d98:	2000      	movs	r0, #0
 8014d9a:	f04f 0800 	mov.w	r8, #0
 8014d9e:	f7ec fe5d 	bl	8001a5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014da2:	fa1f f38b 	uxth.w	r3, fp
 8014da6:	4645      	mov	r5, r8
 8014da8:	fb17 f703 	smulbb	r7, r7, r3
 8014dac:	9304      	str	r3, [sp, #16]
 8014dae:	b2bb      	uxth	r3, r7
 8014db0:	4f70      	ldr	r7, [pc, #448]	@ (8014f74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 8014db2:	9305      	str	r3, [sp, #20]
 8014db4:	0973      	lsrs	r3, r6, #5
 8014db6:	9306      	str	r3, [sp, #24]
 8014db8:	42b5      	cmp	r5, r6
 8014dba:	d087      	beq.n	8014ccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8014dbc:	6838      	ldr	r0, [r7, #0]
 8014dbe:	6803      	ldr	r3, [r0, #0]
 8014dc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014dc4:	4798      	blx	r3
 8014dc6:	4582      	cmp	sl, r0
 8014dc8:	4681      	mov	r9, r0
 8014dca:	d907      	bls.n	8014ddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 8014dcc:	f1b8 0f00 	cmp.w	r8, #0
 8014dd0:	d007      	beq.n	8014de2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 8014dd2:	6838      	ldr	r0, [r7, #0]
 8014dd4:	6803      	ldr	r3, [r0, #0]
 8014dd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014dda:	e776      	b.n	8014cca <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8014ddc:	f1b8 0f00 	cmp.w	r8, #0
 8014de0:	d003      	beq.n	8014dea <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 8014de2:	454d      	cmp	r5, r9
 8014de4:	d3f5      	bcc.n	8014dd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 8014de6:	f04f 0801 	mov.w	r8, #1
 8014dea:	9a04      	ldr	r2, [sp, #16]
 8014dec:	fb95 f3fb 	sdiv	r3, r5, fp
 8014df0:	9303      	str	r3, [sp, #12]
 8014df2:	3301      	adds	r3, #1
 8014df4:	fb13 f302 	smulbb	r3, r3, r2
 8014df8:	b299      	uxth	r1, r3
 8014dfa:	f1b8 0f00 	cmp.w	r8, #0
 8014dfe:	d04d      	beq.n	8014e9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 8014e00:	eb09 030b 	add.w	r3, r9, fp
 8014e04:	42b3      	cmp	r3, r6
 8014e06:	bfa8      	it	ge
 8014e08:	4633      	movge	r3, r6
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	9807      	ldr	r0, [sp, #28]
 8014e0e:	428b      	cmp	r3, r1
 8014e10:	bf94      	ite	ls
 8014e12:	ebc5 0203 	rsbls	r2, r5, r3
 8014e16:	ebc5 0201 	rsbhi	r2, r5, r1
 8014e1a:	4282      	cmp	r2, r0
 8014e1c:	bfa8      	it	ge
 8014e1e:	4602      	movge	r2, r0
 8014e20:	9808      	ldr	r0, [sp, #32]
 8014e22:	fa1f fa82 	uxth.w	sl, r2
 8014e26:	4582      	cmp	sl, r0
 8014e28:	d205      	bcs.n	8014e36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8014e2a:	fa15 f082 	uxtah	r0, r5, r2
 8014e2e:	4286      	cmp	r6, r0
 8014e30:	d001      	beq.n	8014e36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8014e32:	4299      	cmp	r1, r3
 8014e34:	d23f      	bcs.n	8014eb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 8014e36:	2001      	movs	r0, #1
 8014e38:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e3a:	f7ec fddf 	bl	80019fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014e3e:	6838      	ldr	r0, [r7, #0]
 8014e40:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8014e44:	6803      	ldr	r3, [r0, #0]
 8014e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014e4a:	4798      	blx	r3
 8014e4c:	4b48      	ldr	r3, [pc, #288]	@ (8014f70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8014e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e50:	2000      	movs	r0, #0
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8014e58:	b212      	sxth	r2, r2
 8014e5a:	2b01      	cmp	r3, #1
 8014e5c:	d122      	bne.n	8014ea4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 8014e5e:	1b73      	subs	r3, r6, r5
 8014e60:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 8014e64:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8014e68:	eba3 030a 	sub.w	r3, r3, sl
 8014e6c:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 8014e70:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8014e74:	6823      	ldr	r3, [r4, #0]
 8014e76:	a90d      	add	r1, sp, #52	@ 0x34
 8014e78:	4620      	mov	r0, r4
 8014e7a:	4455      	add	r5, sl
 8014e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e7e:	4798      	blx	r3
 8014e80:	6838      	ldr	r0, [r7, #0]
 8014e82:	9b03      	ldr	r3, [sp, #12]
 8014e84:	b2ad      	uxth	r5, r5
 8014e86:	4259      	negs	r1, r3
 8014e88:	6803      	ldr	r3, [r0, #0]
 8014e8a:	b209      	sxth	r1, r1
 8014e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014e90:	4798      	blx	r3
 8014e92:	2001      	movs	r0, #1
 8014e94:	f7ec fde2 	bl	8001a5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014e98:	46ca      	mov	sl, r9
 8014e9a:	e78d      	b.n	8014db8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 8014e9c:	9b05      	ldr	r3, [sp, #20]
 8014e9e:	eba9 0303 	sub.w	r3, r9, r3
 8014ea2:	e7b2      	b.n	8014e0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8014ea4:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8014ea8:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 8014eac:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8014eb0:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 8014eb4:	e7de      	b.n	8014e74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 8014eb6:	6838      	ldr	r0, [r7, #0]
 8014eb8:	6803      	ldr	r3, [r0, #0]
 8014eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ebc:	4798      	blx	r3
 8014ebe:	6838      	ldr	r0, [r7, #0]
 8014ec0:	9906      	ldr	r1, [sp, #24]
 8014ec2:	6803      	ldr	r3, [r0, #0]
 8014ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014ec8:	4798      	blx	r3
 8014eca:	e7e5      	b.n	8014e98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 8014ecc:	2b03      	cmp	r3, #3
 8014ece:	f040 8133 	bne.w	8015138 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 8014ed2:	4b27      	ldr	r3, [pc, #156]	@ (8014f70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8014ed4:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8014ed8:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 8014edc:	781b      	ldrb	r3, [r3, #0]
 8014ede:	2b01      	cmp	r3, #1
 8014ee0:	f000 8095 	beq.w	801500e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8014ee4:	8832      	ldrh	r2, [r6, #0]
 8014ee6:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8014eea:	3201      	adds	r2, #1
 8014eec:	b292      	uxth	r2, r2
 8014eee:	2900      	cmp	r1, #0
 8014ef0:	f43f aeec 	beq.w	8014ccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8014ef4:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 8014ef8:	4694      	mov	ip, r2
 8014efa:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 8014efe:	f04f 0800 	mov.w	r8, #0
 8014f02:	441d      	add	r5, r3
 8014f04:	b22d      	sxth	r5, r5
 8014f06:	fa1f f38c 	uxth.w	r3, ip
 8014f0a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8014f0e:	4299      	cmp	r1, r3
 8014f10:	f240 80bc 	bls.w	801508c <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 8014f14:	4427      	add	r7, r4
 8014f16:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8014f1a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8014f1e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8014f22:	4283      	cmp	r3, r0
 8014f24:	f340 809e 	ble.w	8015064 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 8014f28:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 8014f2c:	46e0      	mov	r8, ip
 8014f2e:	4405      	add	r5, r0
 8014f30:	b22d      	sxth	r5, r5
 8014f32:	429d      	cmp	r5, r3
 8014f34:	bfa8      	it	ge
 8014f36:	461d      	movge	r5, r3
 8014f38:	f10c 0c01 	add.w	ip, ip, #1
 8014f3c:	e7e3      	b.n	8014f06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 8014f3e:	d10a      	bne.n	8014f56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 8014f40:	4562      	cmp	r2, ip
 8014f42:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 8014f46:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8014f4a:	bfb8      	it	lt
 8014f4c:	4662      	movlt	r2, ip
 8014f4e:	4288      	cmp	r0, r1
 8014f50:	bfb8      	it	lt
 8014f52:	4698      	movlt	r8, r3
 8014f54:	e084      	b.n	8015060 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 8014f56:	428a      	cmp	r2, r1
 8014f58:	bfb8      	it	lt
 8014f5a:	460a      	movlt	r2, r1
 8014f5c:	e080      	b.n	8015060 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 8014f5e:	bf00      	nop
 8014f60:	240251ee 	.word	0x240251ee
 8014f64:	2400007c 	.word	0x2400007c
 8014f68:	240251e6 	.word	0x240251e6
 8014f6c:	240251e4 	.word	0x240251e4
 8014f70:	240251e8 	.word	0x240251e8
 8014f74:	240251f0 	.word	0x240251f0
 8014f78:	19e1      	adds	r1, r4, r7
 8014f7a:	ab0d      	add	r3, sp, #52	@ 0x34
 8014f7c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8014f80:	6849      	ldr	r1, [r1, #4]
 8014f82:	c303      	stmia	r3!, {r0, r1}
 8014f84:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 8014f88:	a80d      	add	r0, sp, #52	@ 0x34
 8014f8a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8014f8e:	454b      	cmp	r3, r9
 8014f90:	440b      	add	r3, r1
 8014f92:	bfb8      	it	lt
 8014f94:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 8014f98:	1a9b      	subs	r3, r3, r2
 8014f9a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8014f9e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8014fa2:	f7fe fec9 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014fa6:	a80d      	add	r0, sp, #52	@ 0x34
 8014fa8:	f7f9 fe4b 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014fac:	bb78      	cbnz	r0, 801500e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8014fae:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 8014fb2:	4427      	add	r7, r4
 8014fb4:	6828      	ldr	r0, [r5, #0]
 8014fb6:	45cc      	cmp	ip, r9
 8014fb8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8014fbc:	f8d0 e000 	ldr.w	lr, [r0]
 8014fc0:	bfd8      	it	le
 8014fc2:	fa1f fc8c 	uxthle.w	ip, ip
 8014fc6:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8014fca:	bfc8      	it	gt
 8014fcc:	fa1f fc89 	uxthgt.w	ip, r9
 8014fd0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8014fd4:	f8cd c000 	str.w	ip, [sp]
 8014fd8:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 8014fdc:	47d8      	blx	fp
 8014fde:	4683      	mov	fp, r0
 8014fe0:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8014fe4:	a80d      	add	r0, sp, #52	@ 0x34
 8014fe6:	f7fe fe8d 	bl	8013d04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014fea:	6823      	ldr	r3, [r4, #0]
 8014fec:	4620      	mov	r0, r4
 8014fee:	a90d      	add	r1, sp, #52	@ 0x34
 8014ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014ff2:	4798      	blx	r3
 8014ff4:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 8014ff8:	eba0 000b 	sub.w	r0, r0, fp
 8014ffc:	b200      	sxth	r0, r0
 8014ffe:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 8015002:	b920      	cbnz	r0, 801500e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8015004:	fa1f f188 	uxth.w	r1, r8
 8015008:	4650      	mov	r0, sl
 801500a:	f7ff f93d 	bl	8014288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801500e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8015012:	f1bb 0f00 	cmp.w	fp, #0
 8015016:	f43f ae59 	beq.w	8014ccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801501a:	8833      	ldrh	r3, [r6, #0]
 801501c:	f04f 0800 	mov.w	r8, #0
 8015020:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8015024:	3301      	adds	r3, #1
 8015026:	b29b      	uxth	r3, r3
 8015028:	b299      	uxth	r1, r3
 801502a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801502e:	458b      	cmp	fp, r1
 8015030:	d9a2      	bls.n	8014f78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 8015032:	4427      	add	r7, r4
 8015034:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8015038:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 801503c:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 8015040:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8015044:	4408      	add	r0, r1
 8015046:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801504a:	4461      	add	r1, ip
 801504c:	b200      	sxth	r0, r0
 801504e:	b209      	sxth	r1, r1
 8015050:	4288      	cmp	r0, r1
 8015052:	f6bf af74 	bge.w	8014f3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 8015056:	4584      	cmp	ip, r0
 8015058:	4662      	mov	r2, ip
 801505a:	4698      	mov	r8, r3
 801505c:	bfb8      	it	lt
 801505e:	4602      	movlt	r2, r0
 8015060:	3301      	adds	r3, #1
 8015062:	e7e1      	b.n	8015028 <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 8015064:	d10e      	bne.n	8015084 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 8015066:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801506a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801506e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8015072:	4473      	add	r3, lr
 8015074:	b21b      	sxth	r3, r3
 8015076:	429d      	cmp	r5, r3
 8015078:	bfa8      	it	ge
 801507a:	461d      	movge	r5, r3
 801507c:	4287      	cmp	r7, r0
 801507e:	bfb8      	it	lt
 8015080:	46e0      	movlt	r8, ip
 8015082:	e759      	b.n	8014f38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8015084:	4285      	cmp	r5, r0
 8015086:	bfa8      	it	ge
 8015088:	4605      	movge	r5, r0
 801508a:	e755      	b.n	8014f38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 801508c:	eb0a 0007 	add.w	r0, sl, r7
 8015090:	4427      	add	r7, r4
 8015092:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8015096:	45cb      	cmp	fp, r9
 8015098:	bfbc      	itt	lt
 801509a:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 801509e:	445d      	addlt	r5, fp
 80150a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80150a4:	bfb8      	it	lt
 80150a6:	b22d      	sxthlt	r5, r5
 80150a8:	f7f9 fdcb 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 80150ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80150b0:	2800      	cmp	r0, #0
 80150b2:	f47f af1c 	bne.w	8014eee <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 80150b6:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80150ba:	fa1f fb8b 	uxth.w	fp, fp
 80150be:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80150c2:	1aad      	subs	r5, r5, r2
 80150c4:	4829      	ldr	r0, [pc, #164]	@ (801516c <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 80150c6:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80150ca:	454d      	cmp	r5, r9
 80150cc:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80150d0:	6800      	ldr	r0, [r0, #0]
 80150d2:	bfa8      	it	ge
 80150d4:	464d      	movge	r5, r9
 80150d6:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 80150da:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80150de:	b289      	uxth	r1, r1
 80150e0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80150e4:	b2ad      	uxth	r5, r5
 80150e6:	f8d0 c000 	ldr.w	ip, [r0]
 80150ea:	b292      	uxth	r2, r2
 80150ec:	455d      	cmp	r5, fp
 80150ee:	bf94      	ite	ls
 80150f0:	9500      	strls	r5, [sp, #0]
 80150f2:	f8cd b000 	strhi.w	fp, [sp]
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 80150fc:	47a8      	blx	r5
 80150fe:	6823      	ldr	r3, [r4, #0]
 8015100:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8015104:	a90d      	add	r1, sp, #52	@ 0x34
 8015106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015108:	4620      	mov	r0, r4
 801510a:	4798      	blx	r3
 801510c:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 8015110:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8015114:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8015118:	1a5b      	subs	r3, r3, r1
 801511a:	440a      	add	r2, r1
 801511c:	b21b      	sxth	r3, r3
 801511e:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8015122:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8015126:	2b00      	cmp	r3, #0
 8015128:	f47f aedc 	bne.w	8014ee4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 801512c:	fa1f f188 	uxth.w	r1, r8
 8015130:	4650      	mov	r0, sl
 8015132:	f7ff f8a9 	bl	8014288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015136:	e6d5      	b.n	8014ee4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8015138:	8835      	ldrh	r5, [r6, #0]
 801513a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801513e:	42ab      	cmp	r3, r5
 8015140:	f67f adc4 	bls.w	8014ccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8015144:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015148:	ab0d      	add	r3, sp, #52	@ 0x34
 801514a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801514e:	6851      	ldr	r1, [r2, #4]
 8015150:	c303      	stmia	r3!, {r0, r1}
 8015152:	a80d      	add	r0, sp, #52	@ 0x34
 8015154:	f7f9 fd75 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015158:	b920      	cbnz	r0, 8015164 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 801515a:	6823      	ldr	r3, [r4, #0]
 801515c:	a90d      	add	r1, sp, #52	@ 0x34
 801515e:	4620      	mov	r0, r4
 8015160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015162:	4798      	blx	r3
 8015164:	3501      	adds	r5, #1
 8015166:	b2ad      	uxth	r5, r5
 8015168:	e7e7      	b.n	801513a <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 801516a:	bf00      	nop
 801516c:	240251f0 	.word	0x240251f0

08015170 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8015170:	4b03      	ldr	r3, [pc, #12]	@ (8015180 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8015172:	2200      	movs	r2, #0
 8015174:	801a      	strh	r2, [r3, #0]
 8015176:	805a      	strh	r2, [r3, #2]
 8015178:	809a      	strh	r2, [r3, #4]
 801517a:	80da      	strh	r2, [r3, #6]
 801517c:	4770      	bx	lr
 801517e:	bf00      	nop
 8015180:	2402523c 	.word	0x2402523c

08015184 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015188:	b09d      	sub	sp, #116	@ 0x74
 801518a:	4606      	mov	r6, r0
 801518c:	4614      	mov	r4, r2
 801518e:	468a      	mov	sl, r1
 8015190:	a803      	add	r0, sp, #12
 8015192:	461d      	mov	r5, r3
 8015194:	f001 f924 	bl	80163e0 <_ZN8touchgfx12TextProviderC1Ev>
 8015198:	6833      	ldr	r3, [r6, #0]
 801519a:	4630      	mov	r0, r6
 801519c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80151a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80151a2:	4798      	blx	r3
 80151a4:	6833      	ldr	r3, [r6, #0]
 80151a6:	4607      	mov	r7, r0
 80151a8:	4630      	mov	r0, r6
 80151aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80151ac:	4798      	blx	r3
 80151ae:	462a      	mov	r2, r5
 80151b0:	2500      	movs	r5, #0
 80151b2:	4621      	mov	r1, r4
 80151b4:	9000      	str	r0, [sp, #0]
 80151b6:	463b      	mov	r3, r7
 80151b8:	462c      	mov	r4, r5
 80151ba:	46a9      	mov	r9, r5
 80151bc:	46a8      	mov	r8, r5
 80151be:	a803      	add	r0, sp, #12
 80151c0:	f001 f961 	bl	8016486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80151c4:	2300      	movs	r3, #0
 80151c6:	9302      	str	r3, [sp, #8]
 80151c8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80151cc:	429c      	cmp	r4, r3
 80151ce:	d002      	beq.n	80151d6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80151d0:	455c      	cmp	r4, fp
 80151d2:	bf18      	it	ne
 80151d4:	4625      	movne	r5, r4
 80151d6:	ab02      	add	r3, sp, #8
 80151d8:	4632      	mov	r2, r6
 80151da:	4651      	mov	r1, sl
 80151dc:	a803      	add	r0, sp, #12
 80151de:	f001 fc75 	bl	8016acc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80151e2:	4604      	mov	r4, r0
 80151e4:	b108      	cbz	r0, 80151ea <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80151e6:	280a      	cmp	r0, #10
 80151e8:	d10a      	bne.n	8015200 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80151ea:	45c1      	cmp	r9, r8
 80151ec:	bf38      	it	cc
 80151ee:	46c1      	movcc	r9, r8
 80151f0:	f04f 0800 	mov.w	r8, #0
 80151f4:	2c00      	cmp	r4, #0
 80151f6:	d1e5      	bne.n	80151c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80151f8:	4648      	mov	r0, r9
 80151fa:	b01d      	add	sp, #116	@ 0x74
 80151fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015200:	9a02      	ldr	r2, [sp, #8]
 8015202:	2a00      	cmp	r2, #0
 8015204:	d0de      	beq.n	80151c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015206:	7b57      	ldrb	r7, [r2, #13]
 8015208:	4629      	mov	r1, r5
 801520a:	6833      	ldr	r3, [r6, #0]
 801520c:	007f      	lsls	r7, r7, #1
 801520e:	8894      	ldrh	r4, [r2, #4]
 8015210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015212:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8015216:	7a97      	ldrb	r7, [r2, #10]
 8015218:	4307      	orrs	r7, r0
 801521a:	4630      	mov	r0, r6
 801521c:	4798      	blx	r3
 801521e:	4438      	add	r0, r7
 8015220:	4480      	add	r8, r0
 8015222:	fa1f f888 	uxth.w	r8, r8
 8015226:	e7e5      	b.n	80151f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08015228 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015228:	b508      	push	{r3, lr}
 801522a:	6803      	ldr	r3, [r0, #0]
 801522c:	68db      	ldr	r3, [r3, #12]
 801522e:	4798      	blx	r3
 8015230:	b128      	cbz	r0, 801523e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8015232:	7b43      	ldrb	r3, [r0, #13]
 8015234:	7a80      	ldrb	r0, [r0, #10]
 8015236:	005b      	lsls	r3, r3, #1
 8015238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801523c:	4318      	orrs	r0, r3
 801523e:	bd08      	pop	{r3, pc}

08015240 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8015240:	b40e      	push	{r1, r2, r3}
 8015242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015244:	b09e      	sub	sp, #120	@ 0x78
 8015246:	4605      	mov	r5, r0
 8015248:	ab23      	add	r3, sp, #140	@ 0x8c
 801524a:	a805      	add	r0, sp, #20
 801524c:	f853 4b04 	ldr.w	r4, [r3], #4
 8015250:	9303      	str	r3, [sp, #12]
 8015252:	f001 f8c5 	bl	80163e0 <_ZN8touchgfx12TextProviderC1Ev>
 8015256:	682b      	ldr	r3, [r5, #0]
 8015258:	4628      	mov	r0, r5
 801525a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801525c:	4798      	blx	r3
 801525e:	682b      	ldr	r3, [r5, #0]
 8015260:	4606      	mov	r6, r0
 8015262:	4628      	mov	r0, r5
 8015264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015266:	4798      	blx	r3
 8015268:	4633      	mov	r3, r6
 801526a:	4621      	mov	r1, r4
 801526c:	ae1e      	add	r6, sp, #120	@ 0x78
 801526e:	2400      	movs	r4, #0
 8015270:	9000      	str	r0, [sp, #0]
 8015272:	9a03      	ldr	r2, [sp, #12]
 8015274:	a805      	add	r0, sp, #20
 8015276:	f001 f906 	bl	8016486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801527a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801527e:	462a      	mov	r2, r5
 8015280:	4633      	mov	r3, r6
 8015282:	4621      	mov	r1, r4
 8015284:	a805      	add	r0, sp, #20
 8015286:	f001 fc21 	bl	8016acc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801528a:	b300      	cbz	r0, 80152ce <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801528c:	280a      	cmp	r0, #10
 801528e:	d01a      	beq.n	80152c6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015290:	9f04      	ldr	r7, [sp, #16]
 8015292:	b1c7      	cbz	r7, 80152c6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015294:	7b78      	ldrb	r0, [r7, #13]
 8015296:	7a3b      	ldrb	r3, [r7, #8]
 8015298:	00c1      	lsls	r1, r0, #3
 801529a:	88ea      	ldrh	r2, [r5, #6]
 801529c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80152a0:	4319      	orrs	r1, r3
 80152a2:	0643      	lsls	r3, r0, #25
 80152a4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80152a8:	bf48      	it	mi
 80152aa:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80152ae:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80152b2:	bf48      	it	mi
 80152b4:	b219      	sxthmi	r1, r3
 80152b6:	79fb      	ldrb	r3, [r7, #7]
 80152b8:	4303      	orrs	r3, r0
 80152ba:	4413      	add	r3, r2
 80152bc:	1a5b      	subs	r3, r3, r1
 80152be:	b21b      	sxth	r3, r3
 80152c0:	429c      	cmp	r4, r3
 80152c2:	bfb8      	it	lt
 80152c4:	461c      	movlt	r4, r3
 80152c6:	4633      	mov	r3, r6
 80152c8:	462a      	mov	r2, r5
 80152ca:	2100      	movs	r1, #0
 80152cc:	e7da      	b.n	8015284 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80152ce:	b2a0      	uxth	r0, r4
 80152d0:	b01e      	add	sp, #120	@ 0x78
 80152d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80152d6:	b003      	add	sp, #12
 80152d8:	4770      	bx	lr

080152da <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80152da:	7a43      	ldrb	r3, [r0, #9]
 80152dc:	8880      	ldrh	r0, [r0, #4]
 80152de:	4418      	add	r0, r3
 80152e0:	b280      	uxth	r0, r0
 80152e2:	4770      	bx	lr

080152e4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80152e4:	6803      	ldr	r3, [r0, #0]
 80152e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152e8:	4718      	bx	r3

080152ea <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80152ea:	b40e      	push	{r1, r2, r3}
 80152ec:	b570      	push	{r4, r5, r6, lr}
 80152ee:	b09d      	sub	sp, #116	@ 0x74
 80152f0:	4604      	mov	r4, r0
 80152f2:	ab21      	add	r3, sp, #132	@ 0x84
 80152f4:	a803      	add	r0, sp, #12
 80152f6:	f853 5b04 	ldr.w	r5, [r3], #4
 80152fa:	9302      	str	r3, [sp, #8]
 80152fc:	f001 f870 	bl	80163e0 <_ZN8touchgfx12TextProviderC1Ev>
 8015300:	6823      	ldr	r3, [r4, #0]
 8015302:	4620      	mov	r0, r4
 8015304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015306:	4798      	blx	r3
 8015308:	6823      	ldr	r3, [r4, #0]
 801530a:	4606      	mov	r6, r0
 801530c:	4620      	mov	r0, r4
 801530e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015310:	2401      	movs	r4, #1
 8015312:	4798      	blx	r3
 8015314:	4633      	mov	r3, r6
 8015316:	9000      	str	r0, [sp, #0]
 8015318:	4629      	mov	r1, r5
 801531a:	9a02      	ldr	r2, [sp, #8]
 801531c:	a803      	add	r0, sp, #12
 801531e:	f001 f8b2 	bl	8016486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015322:	a803      	add	r0, sp, #12
 8015324:	f001 fc9e 	bl	8016c64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015328:	b2a3      	uxth	r3, r4
 801532a:	b138      	cbz	r0, 801533c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801532c:	280a      	cmp	r0, #10
 801532e:	a803      	add	r0, sp, #12
 8015330:	bf04      	itt	eq
 8015332:	3301      	addeq	r3, #1
 8015334:	b21c      	sxtheq	r4, r3
 8015336:	f001 fc95 	bl	8016c64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801533a:	e7f5      	b.n	8015328 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801533c:	4618      	mov	r0, r3
 801533e:	b01d      	add	sp, #116	@ 0x74
 8015340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015344:	b003      	add	sp, #12
 8015346:	4770      	bx	lr

08015348 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8015348:	b40e      	push	{r1, r2, r3}
 801534a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801534c:	b09e      	sub	sp, #120	@ 0x78
 801534e:	4604      	mov	r4, r0
 8015350:	ab23      	add	r3, sp, #140	@ 0x8c
 8015352:	a805      	add	r0, sp, #20
 8015354:	f853 5b04 	ldr.w	r5, [r3], #4
 8015358:	9303      	str	r3, [sp, #12]
 801535a:	f001 f841 	bl	80163e0 <_ZN8touchgfx12TextProviderC1Ev>
 801535e:	6823      	ldr	r3, [r4, #0]
 8015360:	4620      	mov	r0, r4
 8015362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015364:	4798      	blx	r3
 8015366:	6823      	ldr	r3, [r4, #0]
 8015368:	4606      	mov	r6, r0
 801536a:	4620      	mov	r0, r4
 801536c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801536e:	4798      	blx	r3
 8015370:	4633      	mov	r3, r6
 8015372:	4629      	mov	r1, r5
 8015374:	9000      	str	r0, [sp, #0]
 8015376:	9a03      	ldr	r2, [sp, #12]
 8015378:	a805      	add	r0, sp, #20
 801537a:	f001 f884 	bl	8016486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801537e:	ad1e      	add	r5, sp, #120	@ 0x78
 8015380:	2100      	movs	r1, #0
 8015382:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8015386:	4622      	mov	r2, r4
 8015388:	a805      	add	r0, sp, #20
 801538a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801538e:	462b      	mov	r3, r5
 8015390:	f001 fb9c 	bl	8016acc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015394:	b1d8      	cbz	r0, 80153ce <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8015396:	280a      	cmp	r0, #10
 8015398:	d012      	beq.n	80153c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801539a:	9804      	ldr	r0, [sp, #16]
 801539c:	b180      	cbz	r0, 80153c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801539e:	7b47      	ldrb	r7, [r0, #13]
 80153a0:	88e2      	ldrh	r2, [r4, #6]
 80153a2:	00fb      	lsls	r3, r7, #3
 80153a4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80153a8:	7a03      	ldrb	r3, [r0, #8]
 80153aa:	430b      	orrs	r3, r1
 80153ac:	0679      	lsls	r1, r7, #25
 80153ae:	bf44      	itt	mi
 80153b0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80153b4:	b21b      	sxthmi	r3, r3
 80153b6:	1ad3      	subs	r3, r2, r3
 80153b8:	b21b      	sxth	r3, r3
 80153ba:	429e      	cmp	r6, r3
 80153bc:	bfa8      	it	ge
 80153be:	461e      	movge	r6, r3
 80153c0:	462b      	mov	r3, r5
 80153c2:	4622      	mov	r2, r4
 80153c4:	2100      	movs	r1, #0
 80153c6:	a805      	add	r0, sp, #20
 80153c8:	f001 fb80 	bl	8016acc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80153cc:	e7e2      	b.n	8015394 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80153ce:	4630      	mov	r0, r6
 80153d0:	b01e      	add	sp, #120	@ 0x78
 80153d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80153d6:	b003      	add	sp, #12
 80153d8:	4770      	bx	lr

080153da <_ZNK8touchgfx8Drawable10invalidateEv>:
 80153da:	b513      	push	{r0, r1, r4, lr}
 80153dc:	6803      	ldr	r3, [r0, #0]
 80153de:	2400      	movs	r4, #0
 80153e0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80153e4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80153e8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80153ec:	4669      	mov	r1, sp
 80153ee:	691b      	ldr	r3, [r3, #16]
 80153f0:	9400      	str	r4, [sp, #0]
 80153f2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80153f6:	4798      	blx	r3
 80153f8:	b002      	add	sp, #8
 80153fa:	bd10      	pop	{r4, pc}

080153fc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80153fc:	b538      	push	{r3, r4, r5, lr}
 80153fe:	680b      	ldr	r3, [r1, #0]
 8015400:	460c      	mov	r4, r1
 8015402:	4605      	mov	r5, r0
 8015404:	68db      	ldr	r3, [r3, #12]
 8015406:	4798      	blx	r3
 8015408:	6823      	ldr	r3, [r4, #0]
 801540a:	4620      	mov	r0, r4
 801540c:	4629      	mov	r1, r5
 801540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015410:	4798      	blx	r3
 8015412:	4628      	mov	r0, r5
 8015414:	bd38      	pop	{r3, r4, r5, pc}

08015416 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8015416:	b410      	push	{r4}
 8015418:	880a      	ldrh	r2, [r1, #0]
 801541a:	8884      	ldrh	r4, [r0, #4]
 801541c:	4422      	add	r2, r4
 801541e:	800a      	strh	r2, [r1, #0]
 8015420:	884a      	ldrh	r2, [r1, #2]
 8015422:	88c4      	ldrh	r4, [r0, #6]
 8015424:	4422      	add	r2, r4
 8015426:	804a      	strh	r2, [r1, #2]
 8015428:	6940      	ldr	r0, [r0, #20]
 801542a:	b120      	cbz	r0, 8015436 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801542c:	6803      	ldr	r3, [r0, #0]
 801542e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015434:	4718      	bx	r3
 8015436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801543a:	4770      	bx	lr

0801543c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801543c:	b570      	push	{r4, r5, r6, lr}
 801543e:	8882      	ldrh	r2, [r0, #4]
 8015440:	460c      	mov	r4, r1
 8015442:	880b      	ldrh	r3, [r1, #0]
 8015444:	4605      	mov	r5, r0
 8015446:	4413      	add	r3, r2
 8015448:	800b      	strh	r3, [r1, #0]
 801544a:	884b      	ldrh	r3, [r1, #2]
 801544c:	88c2      	ldrh	r2, [r0, #6]
 801544e:	4413      	add	r3, r2
 8015450:	804b      	strh	r3, [r1, #2]
 8015452:	1d01      	adds	r1, r0, #4
 8015454:	4620      	mov	r0, r4
 8015456:	f7f9 fbb1 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 801545a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801545e:	2b00      	cmp	r3, #0
 8015460:	dd0b      	ble.n	801547a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015462:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015466:	2b00      	cmp	r3, #0
 8015468:	dd07      	ble.n	801547a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801546a:	6968      	ldr	r0, [r5, #20]
 801546c:	b128      	cbz	r0, 801547a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801546e:	6803      	ldr	r3, [r0, #0]
 8015470:	4621      	mov	r1, r4
 8015472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015478:	4718      	bx	r3
 801547a:	bd70      	pop	{r4, r5, r6, pc}

0801547c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801547c:	b570      	push	{r4, r5, r6, lr}
 801547e:	8882      	ldrh	r2, [r0, #4]
 8015480:	460c      	mov	r4, r1
 8015482:	880b      	ldrh	r3, [r1, #0]
 8015484:	4605      	mov	r5, r0
 8015486:	4413      	add	r3, r2
 8015488:	800b      	strh	r3, [r1, #0]
 801548a:	884b      	ldrh	r3, [r1, #2]
 801548c:	88c2      	ldrh	r2, [r0, #6]
 801548e:	4413      	add	r3, r2
 8015490:	804b      	strh	r3, [r1, #2]
 8015492:	1d01      	adds	r1, r0, #4
 8015494:	4620      	mov	r0, r4
 8015496:	f7f9 fb91 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 801549a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	dd19      	ble.n	80154d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80154a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	dd15      	ble.n	80154d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80154aa:	6968      	ldr	r0, [r5, #20]
 80154ac:	b128      	cbz	r0, 80154ba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80154ae:	6803      	ldr	r3, [r0, #0]
 80154b0:	4621      	mov	r1, r4
 80154b2:	691b      	ldr	r3, [r3, #16]
 80154b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154b8:	4718      	bx	r3
 80154ba:	4b07      	ldr	r3, [pc, #28]	@ (80154d8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	3304      	adds	r3, #4
 80154c0:	429d      	cmp	r5, r3
 80154c2:	d108      	bne.n	80154d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80154c4:	f7fe fdd0 	bl	8014068 <_ZN8touchgfx11Application11getInstanceEv>
 80154c8:	6803      	ldr	r3, [r0, #0]
 80154ca:	6821      	ldr	r1, [r4, #0]
 80154cc:	6862      	ldr	r2, [r4, #4]
 80154ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154d4:	4718      	bx	r3
 80154d6:	bd70      	pop	{r4, r5, r6, pc}
 80154d8:	24025234 	.word	0x24025234

080154dc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80154dc:	b570      	push	{r4, r5, r6, lr}
 80154de:	4604      	mov	r4, r0
 80154e0:	4616      	mov	r6, r2
 80154e2:	460d      	mov	r5, r1
 80154e4:	b901      	cbnz	r1, 80154e8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80154e6:	b192      	cbz	r2, 801550e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80154e8:	6823      	ldr	r3, [r4, #0]
 80154ea:	4620      	mov	r0, r4
 80154ec:	699b      	ldr	r3, [r3, #24]
 80154ee:	4798      	blx	r3
 80154f0:	88e2      	ldrh	r2, [r4, #6]
 80154f2:	88a1      	ldrh	r1, [r4, #4]
 80154f4:	4620      	mov	r0, r4
 80154f6:	4432      	add	r2, r6
 80154f8:	4429      	add	r1, r5
 80154fa:	b212      	sxth	r2, r2
 80154fc:	b209      	sxth	r1, r1
 80154fe:	f7ee fd56 	bl	8003fae <_ZN8touchgfx8Drawable5setXYEss>
 8015502:	6823      	ldr	r3, [r4, #0]
 8015504:	4620      	mov	r0, r4
 8015506:	699b      	ldr	r3, [r3, #24]
 8015508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801550c:	4718      	bx	r3
 801550e:	bd70      	pop	{r4, r5, r6, pc}

08015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8015510:	b510      	push	{r4, lr}
 8015512:	2300      	movs	r3, #0
 8015514:	4604      	mov	r4, r0
 8015516:	4608      	mov	r0, r1
 8015518:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801551c:	8023      	strh	r3, [r4, #0]
 801551e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015522:	8063      	strh	r3, [r4, #2]
 8015524:	6803      	ldr	r3, [r0, #0]
 8015526:	80a1      	strh	r1, [r4, #4]
 8015528:	4621      	mov	r1, r4
 801552a:	80e2      	strh	r2, [r4, #6]
 801552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801552e:	4798      	blx	r3
 8015530:	4620      	mov	r0, r4
 8015532:	bd10      	pop	{r4, pc}

08015534 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8015534:	4770      	bx	lr

08015536 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8015536:	b510      	push	{r4, lr}
 8015538:	4604      	mov	r4, r0
 801553a:	211c      	movs	r1, #28
 801553c:	f00d f971 	bl	8022822 <_ZdlPvj>
 8015540:	4620      	mov	r0, r4
 8015542:	bd10      	pop	{r4, pc}

08015544 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8015544:	4a04      	ldr	r2, [pc, #16]	@ (8015558 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8015546:	6002      	str	r2, [r0, #0]
 8015548:	2200      	movs	r2, #0
 801554a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801554e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015552:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015556:	4770      	bx	lr
 8015558:	08026ce0 	.word	0x08026ce0

0801555c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015560:	4604      	mov	r4, r0
 8015562:	b087      	sub	sp, #28
 8015564:	8b45      	ldrh	r5, [r0, #26]
 8015566:	f8b2 c000 	ldrh.w	ip, [r2]
 801556a:	9105      	str	r1, [sp, #20]
 801556c:	1c68      	adds	r0, r5, #1
 801556e:	68e1      	ldr	r1, [r4, #12]
 8015570:	9203      	str	r2, [sp, #12]
 8015572:	b280      	uxth	r0, r0
 8015574:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015578:	f01c 0501 	ands.w	r5, ip, #1
 801557c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015580:	9502      	str	r5, [sp, #8]
 8015582:	d07d      	beq.n	8015680 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 8015584:	ee07 2a90 	vmov	s15, r2
 8015588:	8360      	strh	r0, [r4, #26]
 801558a:	f04f 0e00 	mov.w	lr, #0
 801558e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015592:	ee06 ea10 	vmov	s12, lr
 8015596:	edc1 6a00 	vstr	s13, [r1]
 801559a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801559e:	8b61      	ldrh	r1, [r4, #26]
 80155a0:	ee07 2a10 	vmov	s14, r2
 80155a4:	68e2      	ldr	r2, [r4, #12]
 80155a6:	1c48      	adds	r0, r1, #1
 80155a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80155ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80155b0:	8360      	strh	r0, [r4, #26]
 80155b2:	ed82 7a00 	vstr	s14, [r2]
 80155b6:	8b21      	ldrh	r1, [r4, #24]
 80155b8:	2501      	movs	r5, #1
 80155ba:	68a2      	ldr	r2, [r4, #8]
 80155bc:	3304      	adds	r3, #4
 80155be:	1c48      	adds	r0, r1, #1
 80155c0:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80155c4:	9300      	str	r3, [sp, #0]
 80155c6:	46aa      	mov	sl, r5
 80155c8:	8320      	strh	r0, [r4, #24]
 80155ca:	462e      	mov	r6, r5
 80155cc:	5455      	strb	r5, [r2, r1]
 80155ce:	2200      	movs	r2, #0
 80155d0:	ee07 2a90 	vmov	s15, r2
 80155d4:	4613      	mov	r3, r2
 80155d6:	4611      	mov	r1, r2
 80155d8:	9201      	str	r2, [sp, #4]
 80155da:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 80155de:	9805      	ldr	r0, [sp, #20]
 80155e0:	f108 0701 	add.w	r7, r8, #1
 80155e4:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80155e8:	42a8      	cmp	r0, r5
 80155ea:	b2bf      	uxth	r7, r7
 80155ec:	eb0b 0908 	add.w	r9, fp, r8
 80155f0:	f340 80db 	ble.w	80157aa <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 80155f4:	fa4c f906 	asr.w	r9, ip, r6
 80155f8:	f009 0901 	and.w	r9, r9, #1
 80155fc:	fa5f f389 	uxtb.w	r3, r9
 8015600:	9304      	str	r3, [sp, #16]
 8015602:	9b00      	ldr	r3, [sp, #0]
 8015604:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015608:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801560c:	f1b9 0f00 	cmp.w	r9, #0
 8015610:	d07d      	beq.n	801570e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 8015612:	ee05 1a10 	vmov	s10, r1
 8015616:	8327      	strh	r7, [r4, #24]
 8015618:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 801561c:	ee05 3a10 	vmov	s10, r3
 8015620:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015624:	f1ba 0f00 	cmp.w	sl, #0
 8015628:	d050      	beq.n	80156cc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 801562a:	f04f 0002 	mov.w	r0, #2
 801562e:	f80b 0008 	strb.w	r0, [fp, r8]
 8015632:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015636:	68e7      	ldr	r7, [r4, #12]
 8015638:	f108 0901 	add.w	r9, r8, #1
 801563c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015640:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015644:	edc7 4a00 	vstr	s9, [r7]
 8015648:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801564c:	68e7      	ldr	r7, [r4, #12]
 801564e:	f108 0901 	add.w	r9, r8, #1
 8015652:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015656:	f8a4 901a 	strh.w	r9, [r4, #26]
 801565a:	ed87 5a00 	vstr	s10, [r7]
 801565e:	3601      	adds	r6, #1
 8015660:	2e10      	cmp	r6, #16
 8015662:	d106      	bne.n	8015672 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 8015664:	9e01      	ldr	r6, [sp, #4]
 8015666:	9803      	ldr	r0, [sp, #12]
 8015668:	3601      	adds	r6, #1
 801566a:	9601      	str	r6, [sp, #4]
 801566c:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 8015670:	2600      	movs	r6, #0
 8015672:	9800      	ldr	r0, [sp, #0]
 8015674:	3501      	adds	r5, #1
 8015676:	f8dd a010 	ldr.w	sl, [sp, #16]
 801567a:	3004      	adds	r0, #4
 801567c:	9000      	str	r0, [sp, #0]
 801567e:	e7ac      	b.n	80155da <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 8015680:	ee06 2a10 	vmov	s12, r2
 8015684:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015688:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801568c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015690:	ee16 5a10 	vmov	r5, s12
 8015694:	442a      	add	r2, r5
 8015696:	ee06 2a90 	vmov	s13, r2
 801569a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801569e:	8360      	strh	r0, [r4, #26]
 80156a0:	4472      	add	r2, lr
 80156a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80156a6:	ee07 2a10 	vmov	s14, r2
 80156aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80156ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80156b2:	edc1 6a00 	vstr	s13, [r1]
 80156b6:	8b61      	ldrh	r1, [r4, #26]
 80156b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80156bc:	68e2      	ldr	r2, [r4, #12]
 80156be:	1c48      	adds	r0, r1, #1
 80156c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80156c4:	8360      	strh	r0, [r4, #26]
 80156c6:	ed82 7a00 	vstr	s14, [r2]
 80156ca:	e774      	b.n	80155b6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 80156cc:	f04f 0005 	mov.w	r0, #5
 80156d0:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 80156d4:	f80b 0008 	strb.w	r0, [fp, r8]
 80156d8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80156dc:	68e7      	ldr	r7, [r4, #12]
 80156de:	f108 0901 	add.w	r9, r8, #1
 80156e2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80156e6:	f8a4 901a 	strh.w	r9, [r4, #26]
 80156ea:	ed87 4a00 	vstr	s8, [r7]
 80156ee:	ee04 2a10 	vmov	s8, r2
 80156f2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80156f6:	68e7      	ldr	r7, [r4, #12]
 80156f8:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80156fc:	f108 0901 	add.w	r9, r8, #1
 8015700:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015704:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015708:	ed87 4a00 	vstr	s8, [r7]
 801570c:	e791      	b.n	8015632 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 801570e:	f1ba 0f00 	cmp.w	sl, #0
 8015712:	d146      	bne.n	80157a2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 8015714:	f04f 0005 	mov.w	r0, #5
 8015718:	8327      	strh	r7, [r4, #24]
 801571a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801571e:	f80b 0008 	strb.w	r0, [fp, r8]
 8015722:	ee17 0a90 	vmov	r0, s15
 8015726:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801572a:	68e7      	ldr	r7, [r4, #12]
 801572c:	4408      	add	r0, r1
 801572e:	f108 0901 	add.w	r9, r8, #1
 8015732:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015736:	ee07 0a90 	vmov	s15, r0
 801573a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801573e:	ed87 5a00 	vstr	s10, [r7]
 8015742:	ee05 2a10 	vmov	s10, r2
 8015746:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801574a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801574e:	68e7      	ldr	r7, [r4, #12]
 8015750:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015754:	f108 0901 	add.w	r9, r8, #1
 8015758:	441a      	add	r2, r3
 801575a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801575e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015762:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015766:	ed87 5a00 	vstr	s10, [r7]
 801576a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801576e:	68e7      	ldr	r7, [r4, #12]
 8015770:	f108 0901 	add.w	r9, r8, #1
 8015774:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015778:	f8a4 901a 	strh.w	r9, [r4, #26]
 801577c:	edc7 7a00 	vstr	s15, [r7]
 8015780:	ee07 2a90 	vmov	s15, r2
 8015784:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801578c:	68e7      	ldr	r7, [r4, #12]
 801578e:	f108 0901 	add.w	r9, r8, #1
 8015792:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015796:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801579a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801579e:	edc7 7a00 	vstr	s15, [r7]
 80157a2:	461a      	mov	r2, r3
 80157a4:	ee07 1a90 	vmov	s15, r1
 80157a8:	e759      	b.n	801565e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 80157aa:	f1ba 0f00 	cmp.w	sl, #0
 80157ae:	d045      	beq.n	801583c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 80157b0:	ee05 1a90 	vmov	s11, r1
 80157b4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80157b8:	eef4 5a66 	vcmp.f32	s11, s13
 80157bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157c0:	d108      	bne.n	80157d4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 80157c2:	ee05 3a90 	vmov	s11, r3
 80157c6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80157ca:	eef4 5a47 	vcmp.f32	s11, s14
 80157ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157d2:	d033      	beq.n	801583c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 80157d4:	9b02      	ldr	r3, [sp, #8]
 80157d6:	8327      	strh	r7, [r4, #24]
 80157d8:	b1b3      	cbz	r3, 8015808 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 80157da:	2302      	movs	r3, #2
 80157dc:	f889 3000 	strb.w	r3, [r9]
 80157e0:	8b62      	ldrh	r2, [r4, #26]
 80157e2:	68e3      	ldr	r3, [r4, #12]
 80157e4:	1c51      	adds	r1, r2, #1
 80157e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80157ea:	8361      	strh	r1, [r4, #26]
 80157ec:	edc3 6a00 	vstr	s13, [r3]
 80157f0:	8b62      	ldrh	r2, [r4, #26]
 80157f2:	68e3      	ldr	r3, [r4, #12]
 80157f4:	1c51      	adds	r1, r2, #1
 80157f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80157fa:	8361      	strh	r1, [r4, #26]
 80157fc:	ed83 7a00 	vstr	s14, [r3]
 8015800:	9800      	ldr	r0, [sp, #0]
 8015802:	b007      	add	sp, #28
 8015804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015808:	2305      	movs	r3, #5
 801580a:	f889 3000 	strb.w	r3, [r9]
 801580e:	8b62      	ldrh	r2, [r4, #26]
 8015810:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015814:	68e3      	ldr	r3, [r4, #12]
 8015816:	ee07 ea90 	vmov	s15, lr
 801581a:	1c51      	adds	r1, r2, #1
 801581c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015824:	8361      	strh	r1, [r4, #26]
 8015826:	ed83 6a00 	vstr	s12, [r3]
 801582a:	8b62      	ldrh	r2, [r4, #26]
 801582c:	68e3      	ldr	r3, [r4, #12]
 801582e:	1c51      	adds	r1, r2, #1
 8015830:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015834:	8361      	strh	r1, [r4, #26]
 8015836:	edc3 7a00 	vstr	s15, [r3]
 801583a:	e7d1      	b.n	80157e0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801583c:	ee05 2a90 	vmov	s11, r2
 8015840:	2305      	movs	r3, #5
 8015842:	9902      	ldr	r1, [sp, #8]
 8015844:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015848:	8327      	strh	r7, [r4, #24]
 801584a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801584e:	f889 3000 	strb.w	r3, [r9]
 8015852:	b181      	cbz	r1, 8015876 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 8015854:	8b62      	ldrh	r2, [r4, #26]
 8015856:	68e3      	ldr	r3, [r4, #12]
 8015858:	1c51      	adds	r1, r2, #1
 801585a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801585e:	8361      	strh	r1, [r4, #26]
 8015860:	ed83 5a00 	vstr	s10, [r3]
 8015864:	8b62      	ldrh	r2, [r4, #26]
 8015866:	68e3      	ldr	r3, [r4, #12]
 8015868:	1c51      	adds	r1, r2, #1
 801586a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801586e:	8361      	strh	r1, [r4, #26]
 8015870:	edc3 5a00 	vstr	s11, [r3]
 8015874:	e7b4      	b.n	80157e0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8015876:	8b65      	ldrh	r5, [r4, #26]
 8015878:	ee17 0a90 	vmov	r0, s15
 801587c:	68e1      	ldr	r1, [r4, #12]
 801587e:	4472      	add	r2, lr
 8015880:	1c6e      	adds	r6, r5, #1
 8015882:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015886:	8366      	strh	r6, [r4, #26]
 8015888:	ed81 5a00 	vstr	s10, [r1]
 801588c:	8b65      	ldrh	r5, [r4, #26]
 801588e:	68e1      	ldr	r1, [r4, #12]
 8015890:	1c6e      	adds	r6, r5, #1
 8015892:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015896:	8366      	strh	r6, [r4, #26]
 8015898:	edc1 5a00 	vstr	s11, [r1]
 801589c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80158a0:	8b65      	ldrh	r5, [r4, #26]
 80158a2:	68e1      	ldr	r1, [r4, #12]
 80158a4:	1c6e      	adds	r6, r5, #1
 80158a6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80158aa:	ee16 5a10 	vmov	r5, s12
 80158ae:	8366      	strh	r6, [r4, #26]
 80158b0:	4428      	add	r0, r5
 80158b2:	ee07 0a90 	vmov	s15, r0
 80158b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80158ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80158be:	edc1 7a00 	vstr	s15, [r1]
 80158c2:	ee07 2a90 	vmov	s15, r2
 80158c6:	8b61      	ldrh	r1, [r4, #26]
 80158c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80158cc:	68e5      	ldr	r5, [r4, #12]
 80158ce:	1c4e      	adds	r6, r1, #1
 80158d0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80158d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80158d8:	8366      	strh	r6, [r4, #26]
 80158da:	edc1 7a00 	vstr	s15, [r1]
 80158de:	8b22      	ldrh	r2, [r4, #24]
 80158e0:	68a1      	ldr	r1, [r4, #8]
 80158e2:	1c55      	adds	r5, r2, #1
 80158e4:	8325      	strh	r5, [r4, #24]
 80158e6:	548b      	strb	r3, [r1, r2]
 80158e8:	e791      	b.n	801580e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

080158ec <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 80158ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158f0:	4604      	mov	r4, r0
 80158f2:	b08e      	sub	sp, #56	@ 0x38
 80158f4:	4699      	mov	r9, r3
 80158f6:	4688      	mov	r8, r1
 80158f8:	4615      	mov	r5, r2
 80158fa:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80158fc:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8015900:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015902:	f7ed ffbb 	bl	800387c <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8015906:	6060      	str	r0, [r4, #4]
 8015908:	f1b9 0f00 	cmp.w	r9, #0
 801590c:	f000 80e8 	beq.w	8015ae0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015910:	2800      	cmp	r0, #0
 8015912:	f000 80e5 	beq.w	8015ae0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015916:	a805      	add	r0, sp, #20
 8015918:	f000 f8f9 	bl	8015b0e <_ZN8touchgfx9Matrix3x3C1Ev>
 801591c:	6833      	ldr	r3, [r6, #0]
 801591e:	4630      	mov	r0, r6
 8015920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015922:	4798      	blx	r3
 8015924:	a805      	add	r0, sp, #20
 8015926:	eef0 0a40 	vmov.f32	s1, s0
 801592a:	f000 f8f4 	bl	8015b16 <_ZN8touchgfx9Matrix3x35scaleEff>
 801592e:	6860      	ldr	r0, [r4, #4]
 8015930:	f1ba 0f03 	cmp.w	sl, #3
 8015934:	d83b      	bhi.n	80159ae <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8015936:	e8df f00a 	tbb	[pc, sl]
 801593a:	1002      	.short	0x1002
 801593c:	9f71      	.short	0x9f71
 801593e:	6803      	ldr	r3, [r0, #0]
 8015940:	462a      	mov	r2, r5
 8015942:	4641      	mov	r1, r8
 8015944:	689b      	ldr	r3, [r3, #8]
 8015946:	4798      	blx	r3
 8015948:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801594c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015950:	ee07 7a90 	vmov	s15, r7
 8015954:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8015958:	e026      	b.n	80159a8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801595a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801595e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015962:	8869      	ldrh	r1, [r5, #2]
 8015964:	1a9b      	subs	r3, r3, r2
 8015966:	f8ad 2010 	strh.w	r2, [sp, #16]
 801596a:	aa03      	add	r2, sp, #12
 801596c:	1a5b      	subs	r3, r3, r1
 801596e:	4641      	mov	r1, r8
 8015970:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015974:	882b      	ldrh	r3, [r5, #0]
 8015976:	f8ad 300e 	strh.w	r3, [sp, #14]
 801597a:	88ab      	ldrh	r3, [r5, #4]
 801597c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015980:	6803      	ldr	r3, [r0, #0]
 8015982:	689b      	ldr	r3, [r3, #8]
 8015984:	4798      	blx	r3
 8015986:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8015ae8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801598a:	a805      	add	r0, sp, #20
 801598c:	f000 f8e8 	bl	8015b60 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015990:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8015994:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015996:	ee07 7a90 	vmov	s15, r7
 801599a:	1a9b      	subs	r3, r3, r2
 801599c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80159a0:	ee00 3a10 	vmov	s0, r3
 80159a4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80159a8:	a805      	add	r0, sp, #20
 80159aa:	f000 f927 	bl	8015bfc <_ZN8touchgfx9Matrix3x39translateEff>
 80159ae:	6860      	ldr	r0, [r4, #4]
 80159b0:	a905      	add	r1, sp, #20
 80159b2:	2500      	movs	r5, #0
 80159b4:	f109 0602 	add.w	r6, r9, #2
 80159b8:	6803      	ldr	r3, [r0, #0]
 80159ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80159bc:	4798      	blx	r3
 80159be:	6860      	ldr	r0, [r4, #4]
 80159c0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80159c2:	6803      	ldr	r3, [r0, #0]
 80159c4:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80159c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159ca:	4798      	blx	r3
 80159cc:	6860      	ldr	r0, [r4, #4]
 80159ce:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 80159d2:	6803      	ldr	r3, [r0, #0]
 80159d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159d6:	4798      	blx	r3
 80159d8:	6860      	ldr	r0, [r4, #4]
 80159da:	2101      	movs	r1, #1
 80159dc:	6803      	ldr	r3, [r0, #0]
 80159de:	68db      	ldr	r3, [r3, #12]
 80159e0:	4798      	blx	r3
 80159e2:	f8b9 7000 	ldrh.w	r7, [r9]
 80159e6:	f104 0310 	add.w	r3, r4, #16
 80159ea:	61a5      	str	r5, [r4, #24]
 80159ec:	f104 0208 	add.w	r2, r4, #8
 80159f0:	f104 0114 	add.w	r1, r4, #20
 80159f4:	f104 000c 	add.w	r0, r4, #12
 80159f8:	f7ee fda4 	bl	8004544 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 80159fc:	42af      	cmp	r7, r5
 80159fe:	dd60      	ble.n	8015ac2 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8015a00:	8831      	ldrh	r1, [r6, #0]
 8015a02:	1cb2      	adds	r2, r6, #2
 8015a04:	4620      	mov	r0, r4
 8015a06:	3501      	adds	r5, #1
 8015a08:	f101 030f 	add.w	r3, r1, #15
 8015a0c:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8015a10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015a14:	f7ff fda2 	bl	801555c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8015a18:	4606      	mov	r6, r0
 8015a1a:	e7ef      	b.n	80159fc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8015a1c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015a20:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015a24:	8829      	ldrh	r1, [r5, #0]
 8015a26:	1a9b      	subs	r3, r3, r2
 8015a28:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015a2c:	aa03      	add	r2, sp, #12
 8015a2e:	1a5b      	subs	r3, r3, r1
 8015a30:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015a34:	886d      	ldrh	r5, [r5, #2]
 8015a36:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015a3a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015a3e:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015a42:	1a5b      	subs	r3, r3, r1
 8015a44:	4641      	mov	r1, r8
 8015a46:	1b5b      	subs	r3, r3, r5
 8015a48:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015a4c:	6803      	ldr	r3, [r0, #0]
 8015a4e:	689b      	ldr	r3, [r3, #8]
 8015a50:	4798      	blx	r3
 8015a52:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8015aec <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8015a56:	a805      	add	r0, sp, #20
 8015a58:	f000 f882 	bl	8015b60 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015a5c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015a60:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015a62:	1a9b      	subs	r3, r3, r2
 8015a64:	ee00 3a90 	vmov	s1, r3
 8015a68:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8015a6c:	1bdb      	subs	r3, r3, r7
 8015a6e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8015a72:	ee00 3a10 	vmov	s0, r3
 8015a76:	e795      	b.n	80159a4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8015a78:	886b      	ldrh	r3, [r5, #2]
 8015a7a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015a7e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015a82:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015a86:	8829      	ldrh	r1, [r5, #0]
 8015a88:	1a9b      	subs	r3, r3, r2
 8015a8a:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015a8e:	aa03      	add	r2, sp, #12
 8015a90:	1a5b      	subs	r3, r3, r1
 8015a92:	4641      	mov	r1, r8
 8015a94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015a98:	88eb      	ldrh	r3, [r5, #6]
 8015a9a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8015a9e:	6803      	ldr	r3, [r0, #0]
 8015aa0:	689b      	ldr	r3, [r3, #8]
 8015aa2:	4798      	blx	r3
 8015aa4:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8015af0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8015aa8:	a805      	add	r0, sp, #20
 8015aaa:	f000 f859 	bl	8015b60 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015aae:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015ab2:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8015ab6:	1bdb      	subs	r3, r3, r7
 8015ab8:	ee00 3a90 	vmov	s1, r3
 8015abc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8015ac0:	e748      	b.n	8015954 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8015ac2:	6860      	ldr	r0, [r4, #4]
 8015ac4:	2100      	movs	r1, #0
 8015ac6:	8b22      	ldrh	r2, [r4, #24]
 8015ac8:	6803      	ldr	r3, [r0, #0]
 8015aca:	9101      	str	r1, [sp, #4]
 8015acc:	8b61      	ldrh	r1, [r4, #26]
 8015ace:	9100      	str	r1, [sp, #0]
 8015ad0:	6a1d      	ldr	r5, [r3, #32]
 8015ad2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8015ad6:	47a8      	blx	r5
 8015ad8:	6860      	ldr	r0, [r4, #4]
 8015ada:	6803      	ldr	r3, [r0, #0]
 8015adc:	69db      	ldr	r3, [r3, #28]
 8015ade:	4798      	blx	r3
 8015ae0:	b00e      	add	sp, #56	@ 0x38
 8015ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ae6:	bf00      	nop
 8015ae8:	42b40000 	.word	0x42b40000
 8015aec:	43340000 	.word	0x43340000
 8015af0:	43870000 	.word	0x43870000

08015af4 <_ZN8touchgfx9Matrix3x35resetEv>:
 8015af4:	2300      	movs	r3, #0
 8015af6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8015afa:	6043      	str	r3, [r0, #4]
 8015afc:	6002      	str	r2, [r0, #0]
 8015afe:	6083      	str	r3, [r0, #8]
 8015b00:	60c3      	str	r3, [r0, #12]
 8015b02:	6102      	str	r2, [r0, #16]
 8015b04:	6143      	str	r3, [r0, #20]
 8015b06:	6183      	str	r3, [r0, #24]
 8015b08:	61c3      	str	r3, [r0, #28]
 8015b0a:	6202      	str	r2, [r0, #32]
 8015b0c:	4770      	bx	lr

08015b0e <_ZN8touchgfx9Matrix3x3C1Ev>:
 8015b0e:	b508      	push	{r3, lr}
 8015b10:	f7ff fff0 	bl	8015af4 <_ZN8touchgfx9Matrix3x35resetEv>
 8015b14:	bd08      	pop	{r3, pc}

08015b16 <_ZN8touchgfx9Matrix3x35scaleEff>:
 8015b16:	edd0 7a00 	vldr	s15, [r0]
 8015b1a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015b1e:	edc0 7a00 	vstr	s15, [r0]
 8015b22:	edd0 7a01 	vldr	s15, [r0, #4]
 8015b26:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015b2a:	edc0 7a01 	vstr	s15, [r0, #4]
 8015b2e:	edd0 7a02 	vldr	s15, [r0, #8]
 8015b32:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015b36:	edd0 7a03 	vldr	s15, [r0, #12]
 8015b3a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8015b3e:	ed80 0a02 	vstr	s0, [r0, #8]
 8015b42:	edc0 7a03 	vstr	s15, [r0, #12]
 8015b46:	edd0 7a04 	vldr	s15, [r0, #16]
 8015b4a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8015b4e:	edc0 7a04 	vstr	s15, [r0, #16]
 8015b52:	edd0 7a05 	vldr	s15, [r0, #20]
 8015b56:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8015b5a:	edc0 0a05 	vstr	s1, [r0, #20]
 8015b5e:	4770      	bx	lr

08015b60 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8015b60:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8015bf4 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8015b64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015b68:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8015bf8 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8015b6c:	b510      	push	{r4, lr}
 8015b6e:	ed2d 8b02 	vpush	{d8}
 8015b72:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8015b76:	4604      	mov	r4, r0
 8015b78:	eeb0 0a68 	vmov.f32	s0, s17
 8015b7c:	f00c ff88 	bl	8022a90 <cosf>
 8015b80:	eeb0 8a40 	vmov.f32	s16, s0
 8015b84:	eeb0 0a68 	vmov.f32	s0, s17
 8015b88:	f00c febe 	bl	8022908 <sinf>
 8015b8c:	edd4 6a03 	vldr	s13, [r4, #12]
 8015b90:	edd4 4a00 	vldr	s9, [r4]
 8015b94:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8015b98:	ed94 7a04 	vldr	s14, [r4, #16]
 8015b9c:	ed94 5a01 	vldr	s10, [r4, #4]
 8015ba0:	ee66 6a88 	vmul.f32	s13, s13, s16
 8015ba4:	edd4 5a02 	vldr	s11, [r4, #8]
 8015ba8:	eee8 7a24 	vfma.f32	s15, s16, s9
 8015bac:	eee0 6a24 	vfma.f32	s13, s0, s9
 8015bb0:	edc4 7a00 	vstr	s15, [r4]
 8015bb4:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8015bb8:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015bbc:	edc4 6a03 	vstr	s13, [r4, #12]
 8015bc0:	eee8 7a05 	vfma.f32	s15, s16, s10
 8015bc4:	eea0 7a05 	vfma.f32	s14, s0, s10
 8015bc8:	edc4 7a01 	vstr	s15, [r4, #4]
 8015bcc:	edd4 7a05 	vldr	s15, [r4, #20]
 8015bd0:	ed84 7a04 	vstr	s14, [r4, #16]
 8015bd4:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8015bd8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015bdc:	eea8 6a25 	vfma.f32	s12, s16, s11
 8015be0:	eee0 7a25 	vfma.f32	s15, s0, s11
 8015be4:	ecbd 8b02 	vpop	{d8}
 8015be8:	ed84 6a02 	vstr	s12, [r4, #8]
 8015bec:	edc4 7a05 	vstr	s15, [r4, #20]
 8015bf0:	bd10      	pop	{r4, pc}
 8015bf2:	bf00      	nop
 8015bf4:	40490fdb 	.word	0x40490fdb
 8015bf8:	43340000 	.word	0x43340000

08015bfc <_ZN8touchgfx9Matrix3x39translateEff>:
 8015bfc:	ed90 6a06 	vldr	s12, [r0, #24]
 8015c00:	edd0 7a00 	vldr	s15, [r0]
 8015c04:	edd0 6a07 	vldr	s13, [r0, #28]
 8015c08:	eee6 7a00 	vfma.f32	s15, s12, s0
 8015c0c:	ed90 7a08 	vldr	s14, [r0, #32]
 8015c10:	edc0 7a00 	vstr	s15, [r0]
 8015c14:	edd0 7a01 	vldr	s15, [r0, #4]
 8015c18:	eee6 7a80 	vfma.f32	s15, s13, s0
 8015c1c:	edc0 7a01 	vstr	s15, [r0, #4]
 8015c20:	edd0 7a02 	vldr	s15, [r0, #8]
 8015c24:	eee7 7a00 	vfma.f32	s15, s14, s0
 8015c28:	edc0 7a02 	vstr	s15, [r0, #8]
 8015c2c:	edd0 7a03 	vldr	s15, [r0, #12]
 8015c30:	eee6 7a20 	vfma.f32	s15, s12, s1
 8015c34:	edc0 7a03 	vstr	s15, [r0, #12]
 8015c38:	edd0 7a04 	vldr	s15, [r0, #16]
 8015c3c:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8015c40:	edc0 7a04 	vstr	s15, [r0, #16]
 8015c44:	edd0 7a05 	vldr	s15, [r0, #20]
 8015c48:	eee7 7a20 	vfma.f32	s15, s14, s1
 8015c4c:	edc0 7a05 	vstr	s15, [r0, #20]
 8015c50:	4770      	bx	lr

08015c52 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8015c52:	edd0 6a01 	vldr	s13, [r0, #4]
 8015c56:	b084      	sub	sp, #16
 8015c58:	edd0 7a04 	vldr	s15, [r0, #16]
 8015c5c:	ed90 7a03 	vldr	s14, [r0, #12]
 8015c60:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8015c64:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8015c68:	edd0 6a00 	vldr	s13, [r0]
 8015c6c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8015c70:	ed90 7a05 	vldr	s14, [r0, #20]
 8015c74:	eee6 0a80 	vfma.f32	s1, s13, s0
 8015c78:	ed90 0a02 	vldr	s0, [r0, #8]
 8015c7c:	ee30 0a80 	vadd.f32	s0, s1, s0
 8015c80:	ee77 0a87 	vadd.f32	s1, s15, s14
 8015c84:	b004      	add	sp, #16
 8015c86:	4770      	bx	lr

08015c88 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8015c88:	b530      	push	{r4, r5, lr}
 8015c8a:	8083      	strh	r3, [r0, #4]
 8015c8c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015c90:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8015c94:	80c3      	strh	r3, [r0, #6]
 8015c96:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8015c9a:	6141      	str	r1, [r0, #20]
 8015c9c:	7203      	strb	r3, [r0, #8]
 8015c9e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015ca2:	8302      	strh	r2, [r0, #24]
 8015ca4:	7243      	strb	r3, [r0, #9]
 8015ca6:	7a83      	ldrb	r3, [r0, #10]
 8015ca8:	f365 0306 	bfi	r3, r5, #0, #7
 8015cac:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8015cb0:	f365 13c7 	bfi	r3, r5, #7, #1
 8015cb4:	7283      	strb	r3, [r0, #10]
 8015cb6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8015cba:	72c3      	strb	r3, [r0, #11]
 8015cbc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015cc0:	7303      	strb	r3, [r0, #12]
 8015cc2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8015cc6:	81c3      	strh	r3, [r0, #14]
 8015cc8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8015ccc:	8203      	strh	r3, [r0, #16]
 8015cce:	4b01      	ldr	r3, [pc, #4]	@ (8015cd4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8015cd0:	6003      	str	r3, [r0, #0]
 8015cd2:	bd30      	pop	{r4, r5, pc}
 8015cd4:	08026cf4 	.word	0x08026cf4

08015cd8 <_ZNK8touchgfx9ConstFont4findEt>:
 8015cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cda:	6944      	ldr	r4, [r0, #20]
 8015cdc:	b3bc      	cbz	r4, 8015d4e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015cde:	88a3      	ldrh	r3, [r4, #4]
 8015ce0:	8b02      	ldrh	r2, [r0, #24]
 8015ce2:	1acb      	subs	r3, r1, r3
 8015ce4:	f102 32ff 	add.w	r2, r2, #4294967295
 8015ce8:	d431      	bmi.n	8015d4e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015cea:	4293      	cmp	r3, r2
 8015cec:	dd0c      	ble.n	8015d08 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8015cee:	230e      	movs	r3, #14
 8015cf0:	fb03 4302 	mla	r3, r3, r2, r4
 8015cf4:	889b      	ldrh	r3, [r3, #4]
 8015cf6:	1a5b      	subs	r3, r3, r1
 8015cf8:	1ad3      	subs	r3, r2, r3
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	db27      	blt.n	8015d4e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	bfbc      	itt	lt
 8015d02:	2302      	movlt	r3, #2
 8015d04:	fb92 f3f3 	sdivlt	r3, r2, r3
 8015d08:	2500      	movs	r5, #0
 8015d0a:	260e      	movs	r6, #14
 8015d0c:	4295      	cmp	r5, r2
 8015d0e:	dc1e      	bgt.n	8015d4e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015d10:	fb06 4003 	mla	r0, r6, r3, r4
 8015d14:	8887      	ldrh	r7, [r0, #4]
 8015d16:	42b9      	cmp	r1, r7
 8015d18:	d01a      	beq.n	8015d50 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8015d1a:	d20d      	bcs.n	8015d38 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8015d1c:	1e5a      	subs	r2, r3, #1
 8015d1e:	4295      	cmp	r5, r2
 8015d20:	dc15      	bgt.n	8015d4e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015d22:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8015d26:	1a5b      	subs	r3, r3, r1
 8015d28:	1ad3      	subs	r3, r2, r3
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	db0f      	blt.n	8015d4e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015d2e:	429d      	cmp	r5, r3
 8015d30:	ddec      	ble.n	8015d0c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015d32:	1953      	adds	r3, r2, r5
 8015d34:	105b      	asrs	r3, r3, #1
 8015d36:	e7e9      	b.n	8015d0c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015d38:	1c5d      	adds	r5, r3, #1
 8015d3a:	42aa      	cmp	r2, r5
 8015d3c:	db07      	blt.n	8015d4e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015d3e:	8a43      	ldrh	r3, [r0, #18]
 8015d40:	1acb      	subs	r3, r1, r3
 8015d42:	442b      	add	r3, r5
 8015d44:	429d      	cmp	r5, r3
 8015d46:	dc02      	bgt.n	8015d4e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	dadf      	bge.n	8015d0c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015d4c:	e7f1      	b.n	8015d32 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8015d4e:	2000      	movs	r0, #0
 8015d50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d52 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8015d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d54:	4604      	mov	r4, r0
 8015d56:	4617      	mov	r7, r2
 8015d58:	461e      	mov	r6, r3
 8015d5a:	b911      	cbnz	r1, 8015d62 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8015d5c:	2500      	movs	r5, #0
 8015d5e:	4628      	mov	r0, r5
 8015d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d62:	290a      	cmp	r1, #10
 8015d64:	d0fa      	beq.n	8015d5c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015d66:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015d6a:	4291      	cmp	r1, r2
 8015d6c:	d0f6      	beq.n	8015d5c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015d6e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8015d72:	4291      	cmp	r1, r2
 8015d74:	d0f2      	beq.n	8015d5c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015d76:	f7ff ffaf 	bl	8015cd8 <_ZNK8touchgfx9ConstFont4findEt>
 8015d7a:	4605      	mov	r5, r0
 8015d7c:	b950      	cbnz	r0, 8015d94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8015d7e:	6823      	ldr	r3, [r4, #0]
 8015d80:	4620      	mov	r0, r4
 8015d82:	691b      	ldr	r3, [r3, #16]
 8015d84:	4798      	blx	r3
 8015d86:	4601      	mov	r1, r0
 8015d88:	4620      	mov	r0, r4
 8015d8a:	f7ff ffa5 	bl	8015cd8 <_ZNK8touchgfx9ConstFont4findEt>
 8015d8e:	4605      	mov	r5, r0
 8015d90:	2800      	cmp	r0, #0
 8015d92:	d0e3      	beq.n	8015d5c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015d94:	6823      	ldr	r3, [r4, #0]
 8015d96:	4629      	mov	r1, r5
 8015d98:	4620      	mov	r0, r4
 8015d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015d9c:	4798      	blx	r3
 8015d9e:	6038      	str	r0, [r7, #0]
 8015da0:	6823      	ldr	r3, [r4, #0]
 8015da2:	4620      	mov	r0, r4
 8015da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015da6:	4798      	blx	r3
 8015da8:	7030      	strb	r0, [r6, #0]
 8015daa:	e7d8      	b.n	8015d5e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08015dac <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8015dac:	2000      	movs	r0, #0
 8015dae:	4770      	bx	lr

08015db0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8015db0:	2001      	movs	r0, #1
 8015db2:	4770      	bx	lr

08015db4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8015db4:	2002      	movs	r0, #2
 8015db6:	4770      	bx	lr

08015db8 <_ZN8touchgfx6ScreenD1Ev>:
 8015db8:	4770      	bx	lr

08015dba <_ZN8touchgfx12GestureEventD1Ev>:
 8015dba:	4770      	bx	lr

08015dbc <_ZN8touchgfx9DragEventD1Ev>:
 8015dbc:	4770      	bx	lr

08015dbe <_ZN8touchgfx10ClickEventD1Ev>:
 8015dbe:	4770      	bx	lr

08015dc0 <_ZN8touchgfx10ClickEventD0Ev>:
 8015dc0:	b510      	push	{r4, lr}
 8015dc2:	4604      	mov	r4, r0
 8015dc4:	210c      	movs	r1, #12
 8015dc6:	f00c fd2c 	bl	8022822 <_ZdlPvj>
 8015dca:	4620      	mov	r0, r4
 8015dcc:	bd10      	pop	{r4, pc}

08015dce <_ZN8touchgfx9DragEventD0Ev>:
 8015dce:	b510      	push	{r4, lr}
 8015dd0:	4604      	mov	r4, r0
 8015dd2:	2110      	movs	r1, #16
 8015dd4:	f00c fd25 	bl	8022822 <_ZdlPvj>
 8015dd8:	4620      	mov	r0, r4
 8015dda:	bd10      	pop	{r4, pc}

08015ddc <_ZN8touchgfx12GestureEventD0Ev>:
 8015ddc:	b510      	push	{r4, lr}
 8015dde:	4604      	mov	r4, r0
 8015de0:	210c      	movs	r1, #12
 8015de2:	f00c fd1e 	bl	8022822 <_ZdlPvj>
 8015de6:	4620      	mov	r0, r4
 8015de8:	bd10      	pop	{r4, pc}

08015dea <_ZN8touchgfx6ScreenD0Ev>:
 8015dea:	b510      	push	{r4, lr}
 8015dec:	4604      	mov	r4, r0
 8015dee:	213c      	movs	r1, #60	@ 0x3c
 8015df0:	f00c fd17 	bl	8022822 <_ZdlPvj>
 8015df4:	4620      	mov	r0, r4
 8015df6:	bd10      	pop	{r4, pc}

08015df8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8015df8:	b530      	push	{r4, r5, lr}
 8015dfa:	460d      	mov	r5, r1
 8015dfc:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8015dfe:	b087      	sub	sp, #28
 8015e00:	4604      	mov	r4, r0
 8015e02:	b301      	cbz	r1, 8015e46 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8015e04:	a801      	add	r0, sp, #4
 8015e06:	f7ff fb83 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e0a:	892a      	ldrh	r2, [r5, #8]
 8015e0c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015e10:	7928      	ldrb	r0, [r5, #4]
 8015e12:	1ad2      	subs	r2, r2, r3
 8015e14:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015e16:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015e1a:	441a      	add	r2, r3
 8015e1c:	896b      	ldrh	r3, [r5, #10]
 8015e1e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8015e22:	f88d 0010 	strb.w	r0, [sp, #16]
 8015e26:	1b5b      	subs	r3, r3, r5
 8015e28:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8015e2a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015e2c:	442b      	add	r3, r5
 8015e2e:	4d07      	ldr	r5, [pc, #28]	@ (8015e4c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8015e30:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015e34:	a903      	add	r1, sp, #12
 8015e36:	9503      	str	r5, [sp, #12]
 8015e38:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015e3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e40:	6803      	ldr	r3, [r0, #0]
 8015e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015e44:	4798      	blx	r3
 8015e46:	b007      	add	sp, #28
 8015e48:	bd30      	pop	{r4, r5, pc}
 8015e4a:	bf00      	nop
 8015e4c:	08026d84 	.word	0x08026d84

08015e50 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8015e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e54:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e56:	b08a      	sub	sp, #40	@ 0x28
 8015e58:	4604      	mov	r4, r0
 8015e5a:	460d      	mov	r5, r1
 8015e5c:	b113      	cbz	r3, 8015e64 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8015e5e:	790b      	ldrb	r3, [r1, #4]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d044      	beq.n	8015eee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015e64:	f104 0804 	add.w	r8, r4, #4
 8015e68:	a803      	add	r0, sp, #12
 8015e6a:	4641      	mov	r1, r8
 8015e6c:	f7ff fb50 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e70:	792b      	ldrb	r3, [r5, #4]
 8015e72:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8015e76:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8015e7a:	b983      	cbnz	r3, 8015e9e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8015e7c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8015e80:	892a      	ldrh	r2, [r5, #8]
 8015e82:	88e9      	ldrh	r1, [r5, #6]
 8015e84:	4640      	mov	r0, r8
 8015e86:	1b92      	subs	r2, r2, r6
 8015e88:	9301      	str	r3, [sp, #4]
 8015e8a:	1bc9      	subs	r1, r1, r7
 8015e8c:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8015e90:	b212      	sxth	r2, r2
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	b209      	sxth	r1, r1
 8015e96:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8015e9a:	f7f8 fdad 	bl	800e9f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8015e9e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015ea0:	b329      	cbz	r1, 8015eee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015ea2:	a805      	add	r0, sp, #20
 8015ea4:	f7ff fb34 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015ea8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015eac:	792b      	ldrb	r3, [r5, #4]
 8015eae:	a907      	add	r1, sp, #28
 8015eb0:	1abf      	subs	r7, r7, r2
 8015eb2:	88ea      	ldrh	r2, [r5, #6]
 8015eb4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015eb6:	4417      	add	r7, r2
 8015eb8:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8015eba:	f88d 3020 	strb.w	r3, [sp, #32]
 8015ebe:	4417      	add	r7, r2
 8015ec0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015ec4:	1ab6      	subs	r6, r6, r2
 8015ec6:	892a      	ldrh	r2, [r5, #8]
 8015ec8:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8015ecc:	4416      	add	r6, r2
 8015ece:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015ed0:	4416      	add	r6, r2
 8015ed2:	4a08      	ldr	r2, [pc, #32]	@ (8015ef4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8015ed4:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8015ed8:	2600      	movs	r6, #0
 8015eda:	9207      	str	r2, [sp, #28]
 8015edc:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8015ee0:	6803      	ldr	r3, [r0, #0]
 8015ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ee4:	4798      	blx	r3
 8015ee6:	792b      	ldrb	r3, [r5, #4]
 8015ee8:	b10b      	cbz	r3, 8015eee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015eea:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8015eee:	b00a      	add	sp, #40	@ 0x28
 8015ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ef4:	08026d5c 	.word	0x08026d5c

08015ef8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8015ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015efc:	460c      	mov	r4, r1
 8015efe:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8015f00:	b088      	sub	sp, #32
 8015f02:	4605      	mov	r5, r0
 8015f04:	2900      	cmp	r1, #0
 8015f06:	d06d      	beq.n	8015fe4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8015f08:	4668      	mov	r0, sp
 8015f0a:	f7ff fb01 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015f0e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8015f10:	88e3      	ldrh	r3, [r4, #6]
 8015f12:	f9bd 8000 	ldrsh.w	r8, [sp]
 8015f16:	440b      	add	r3, r1
 8015f18:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8015f1c:	b21b      	sxth	r3, r3
 8015f1e:	4543      	cmp	r3, r8
 8015f20:	db31      	blt.n	8015f86 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015f22:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8015f26:	44c4      	add	ip, r8
 8015f28:	fa0f fc8c 	sxth.w	ip, ip
 8015f2c:	4563      	cmp	r3, ip
 8015f2e:	da2a      	bge.n	8015f86 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015f30:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8015f32:	8926      	ldrh	r6, [r4, #8]
 8015f34:	4416      	add	r6, r2
 8015f36:	b236      	sxth	r6, r6
 8015f38:	42be      	cmp	r6, r7
 8015f3a:	db24      	blt.n	8015f86 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015f3c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015f40:	4438      	add	r0, r7
 8015f42:	b200      	sxth	r0, r0
 8015f44:	4286      	cmp	r6, r0
 8015f46:	da1e      	bge.n	8015f86 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015f48:	8963      	ldrh	r3, [r4, #10]
 8015f4a:	4419      	add	r1, r3
 8015f4c:	b209      	sxth	r1, r1
 8015f4e:	4541      	cmp	r1, r8
 8015f50:	db08      	blt.n	8015f64 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015f52:	4561      	cmp	r1, ip
 8015f54:	da06      	bge.n	8015f64 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015f56:	89a3      	ldrh	r3, [r4, #12]
 8015f58:	441a      	add	r2, r3
 8015f5a:	b212      	sxth	r2, r2
 8015f5c:	42ba      	cmp	r2, r7
 8015f5e:	db01      	blt.n	8015f64 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015f60:	4282      	cmp	r2, r0
 8015f62:	db10      	blt.n	8015f86 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015f64:	4b21      	ldr	r3, [pc, #132]	@ (8015fec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8015f66:	a904      	add	r1, sp, #16
 8015f68:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8015f6a:	9304      	str	r3, [sp, #16]
 8015f6c:	2302      	movs	r3, #2
 8015f6e:	f88d 3014 	strb.w	r3, [sp, #20]
 8015f72:	2300      	movs	r3, #0
 8015f74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f78:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f7c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f80:	6803      	ldr	r3, [r0, #0]
 8015f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f84:	4798      	blx	r3
 8015f86:	1d29      	adds	r1, r5, #4
 8015f88:	a802      	add	r0, sp, #8
 8015f8a:	f7ff fac1 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015f8e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015f92:	88e0      	ldrh	r0, [r4, #6]
 8015f94:	eba3 0808 	sub.w	r8, r3, r8
 8015f98:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015f9c:	7921      	ldrb	r1, [r4, #4]
 8015f9e:	fa1f f888 	uxth.w	r8, r8
 8015fa2:	1bdf      	subs	r7, r3, r7
 8015fa4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8015fa8:	b2bb      	uxth	r3, r7
 8015faa:	4440      	add	r0, r8
 8015fac:	8922      	ldrh	r2, [r4, #8]
 8015fae:	8967      	ldrh	r7, [r4, #10]
 8015fb0:	4460      	add	r0, ip
 8015fb2:	89a4      	ldrh	r4, [r4, #12]
 8015fb4:	441a      	add	r2, r3
 8015fb6:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8015fb8:	44b8      	add	r8, r7
 8015fba:	4423      	add	r3, r4
 8015fbc:	f8ad 0016 	strh.w	r0, [sp, #22]
 8015fc0:	4432      	add	r2, r6
 8015fc2:	44e0      	add	r8, ip
 8015fc4:	4433      	add	r3, r6
 8015fc6:	4c0a      	ldr	r4, [pc, #40]	@ (8015ff0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8015fc8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8015fca:	f88d 1014 	strb.w	r1, [sp, #20]
 8015fce:	a904      	add	r1, sp, #16
 8015fd0:	9404      	str	r4, [sp, #16]
 8015fd2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015fd6:	f8ad 801a 	strh.w	r8, [sp, #26]
 8015fda:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015fde:	6803      	ldr	r3, [r0, #0]
 8015fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015fe2:	4798      	blx	r3
 8015fe4:	b008      	add	sp, #32
 8015fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fea:	bf00      	nop
 8015fec:	08026d5c 	.word	0x08026d5c
 8015ff0:	08026d70 	.word	0x08026d70

08015ff4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8015ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ff6:	4604      	mov	r4, r0
 8015ff8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8015ffc:	3201      	adds	r2, #1
 8015ffe:	d112      	bne.n	8016026 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016000:	2500      	movs	r5, #0
 8016002:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016006:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801600a:	6803      	ldr	r3, [r0, #0]
 801600c:	9500      	str	r5, [sp, #0]
 801600e:	466d      	mov	r5, sp
 8016010:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016014:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016018:	4629      	mov	r1, r5
 801601a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801601c:	4798      	blx	r3
 801601e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016022:	e884 0003 	stmia.w	r4, {r0, r1}
 8016026:	4620      	mov	r0, r4
 8016028:	b003      	add	sp, #12
 801602a:	bd30      	pop	{r4, r5, pc}

0801602c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801602c:	b513      	push	{r0, r1, r4, lr}
 801602e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016032:	4604      	mov	r4, r0
 8016034:	3301      	adds	r3, #1
 8016036:	d109      	bne.n	801604c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016038:	4601      	mov	r1, r0
 801603a:	4668      	mov	r0, sp
 801603c:	f7ff fa68 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016040:	f8bd 3000 	ldrh.w	r3, [sp]
 8016044:	8423      	strh	r3, [r4, #32]
 8016046:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801604a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801604c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016050:	b002      	add	sp, #8
 8016052:	bd10      	pop	{r4, pc}

08016054 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8016054:	b513      	push	{r0, r1, r4, lr}
 8016056:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801605a:	4604      	mov	r4, r0
 801605c:	3301      	adds	r3, #1
 801605e:	d109      	bne.n	8016074 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016060:	4601      	mov	r1, r0
 8016062:	4668      	mov	r0, sp
 8016064:	f7ff fa54 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016068:	f8bd 3000 	ldrh.w	r3, [sp]
 801606c:	8423      	strh	r3, [r4, #32]
 801606e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016072:	8463      	strh	r3, [r4, #34]	@ 0x22
 8016074:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8016078:	b002      	add	sp, #8
 801607a:	bd10      	pop	{r4, pc}

0801607c <_ZN8touchgfx6ScreenC1Ev>:
 801607c:	b570      	push	{r4, r5, r6, lr}
 801607e:	4b17      	ldr	r3, [pc, #92]	@ (80160dc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8016080:	4605      	mov	r5, r0
 8016082:	4a17      	ldr	r2, [pc, #92]	@ (80160e0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8016084:	2101      	movs	r1, #1
 8016086:	f845 3b04 	str.w	r3, [r5], #4
 801608a:	2300      	movs	r3, #0
 801608c:	6042      	str	r2, [r0, #4]
 801608e:	4604      	mov	r4, r0
 8016090:	8103      	strh	r3, [r0, #8]
 8016092:	8143      	strh	r3, [r0, #10]
 8016094:	8183      	strh	r3, [r0, #12]
 8016096:	81c3      	strh	r3, [r0, #14]
 8016098:	8203      	strh	r3, [r0, #16]
 801609a:	8243      	strh	r3, [r0, #18]
 801609c:	8283      	strh	r3, [r0, #20]
 801609e:	82c3      	strh	r3, [r0, #22]
 80160a0:	6203      	str	r3, [r0, #32]
 80160a2:	8483      	strh	r3, [r0, #36]	@ 0x24
 80160a4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80160a6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80160aa:	6343      	str	r3, [r0, #52]	@ 0x34
 80160ac:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80160b0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80160b4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80160b8:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80160bc:	4b09      	ldr	r3, [pc, #36]	@ (80160e4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80160be:	4628      	mov	r0, r5
 80160c0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80160c4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80160c6:	4a08      	ldr	r2, [pc, #32]	@ (80160e8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80160c8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80160cc:	4798      	blx	r3
 80160ce:	6863      	ldr	r3, [r4, #4]
 80160d0:	4628      	mov	r0, r5
 80160d2:	4631      	mov	r1, r6
 80160d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80160d6:	4798      	blx	r3
 80160d8:	4620      	mov	r0, r4
 80160da:	bd70      	pop	{r4, r5, r6, pc}
 80160dc:	08026d98 	.word	0x08026d98
 80160e0:	080269b8 	.word	0x080269b8
 80160e4:	240251e6 	.word	0x240251e6
 80160e8:	240251e4 	.word	0x240251e4

080160ec <_ZN8touchgfx6Screen4drawEv>:
 80160ec:	4b09      	ldr	r3, [pc, #36]	@ (8016114 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80160ee:	b507      	push	{r0, r1, r2, lr}
 80160f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80160f4:	2100      	movs	r1, #0
 80160f6:	4b08      	ldr	r3, [pc, #32]	@ (8016118 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80160f8:	9100      	str	r1, [sp, #0]
 80160fa:	4669      	mov	r1, sp
 80160fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016100:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016104:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016108:	6803      	ldr	r3, [r0, #0]
 801610a:	689b      	ldr	r3, [r3, #8]
 801610c:	4798      	blx	r3
 801610e:	b003      	add	sp, #12
 8016110:	f85d fb04 	ldr.w	pc, [sp], #4
 8016114:	240251e4 	.word	0x240251e4
 8016118:	240251e6 	.word	0x240251e6

0801611c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016120:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016124:	b089      	sub	sp, #36	@ 0x24
 8016126:	4680      	mov	r8, r0
 8016128:	460c      	mov	r4, r1
 801612a:	2b00      	cmp	r3, #0
 801612c:	4615      	mov	r5, r2
 801612e:	dd0e      	ble.n	801614e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016130:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016134:	2b00      	cmp	r3, #0
 8016136:	dd0a      	ble.n	801614e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016138:	4628      	mov	r0, r5
 801613a:	f7ff ff5b 	bl	8015ff4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801613e:	4621      	mov	r1, r4
 8016140:	f7fd feb3 	bl	8013eaa <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016144:	69eb      	ldr	r3, [r5, #28]
 8016146:	b928      	cbnz	r0, 8016154 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8016148:	461d      	mov	r5, r3
 801614a:	2b00      	cmp	r3, #0
 801614c:	d1f4      	bne.n	8016138 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801614e:	b009      	add	sp, #36	@ 0x24
 8016150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016154:	ae04      	add	r6, sp, #16
 8016156:	2b00      	cmp	r3, #0
 8016158:	f000 80b5 	beq.w	80162c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801615c:	682b      	ldr	r3, [r5, #0]
 801615e:	4629      	mov	r1, r5
 8016160:	a802      	add	r0, sp, #8
 8016162:	68db      	ldr	r3, [r3, #12]
 8016164:	4798      	blx	r3
 8016166:	4628      	mov	r0, r5
 8016168:	f7ff ff60 	bl	801602c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801616c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016170:	4407      	add	r7, r0
 8016172:	4628      	mov	r0, r5
 8016174:	f7ff ff6e 	bl	8016054 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016178:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801617c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016180:	b23f      	sxth	r7, r7
 8016182:	4418      	add	r0, r3
 8016184:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016188:	4621      	mov	r1, r4
 801618a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801618e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016192:	4630      	mov	r0, r6
 8016194:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016198:	f8ad 7010 	strh.w	r7, [sp, #16]
 801619c:	f7f8 fd0e 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 80161a0:	4628      	mov	r0, r5
 80161a2:	f7ff ff27 	bl	8015ff4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80161a6:	ab06      	add	r3, sp, #24
 80161a8:	4602      	mov	r2, r0
 80161aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80161ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80161b2:	4611      	mov	r1, r2
 80161b4:	4618      	mov	r0, r3
 80161b6:	f7f8 fd01 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 80161ba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80161be:	f9b4 1000 	ldrsh.w	r1, [r4]
 80161c2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80161c6:	4299      	cmp	r1, r3
 80161c8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80161cc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80161d0:	d10b      	bne.n	80161ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80161d2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80161d6:	4552      	cmp	r2, sl
 80161d8:	d107      	bne.n	80161ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80161da:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80161de:	455a      	cmp	r2, fp
 80161e0:	d103      	bne.n	80161ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80161e2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80161e6:	454a      	cmp	r2, r9
 80161e8:	d06d      	beq.n	80162c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80161ea:	f1bb 0f00 	cmp.w	fp, #0
 80161ee:	dd65      	ble.n	80162bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80161f0:	f1b9 0f00 	cmp.w	r9, #0
 80161f4:	dd62      	ble.n	80162bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80161f6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80161fa:	fa1f f08a 	uxth.w	r0, sl
 80161fe:	4552      	cmp	r2, sl
 8016200:	9000      	str	r0, [sp, #0]
 8016202:	da12      	bge.n	801622a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8016204:	9301      	str	r3, [sp, #4]
 8016206:	9b00      	ldr	r3, [sp, #0]
 8016208:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801620c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016210:	1a9a      	subs	r2, r3, r2
 8016212:	f8ad 1010 	strh.w	r1, [sp, #16]
 8016216:	4631      	mov	r1, r6
 8016218:	f8ad 0014 	strh.w	r0, [sp, #20]
 801621c:	4640      	mov	r0, r8
 801621e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016222:	69ea      	ldr	r2, [r5, #28]
 8016224:	f7ff ff7a 	bl	801611c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016228:	9b01      	ldr	r3, [sp, #4]
 801622a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801622e:	b29f      	uxth	r7, r3
 8016230:	429a      	cmp	r2, r3
 8016232:	da0d      	bge.n	8016250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8016234:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016238:	1aba      	subs	r2, r7, r2
 801623a:	f8ad a012 	strh.w	sl, [sp, #18]
 801623e:	4631      	mov	r1, r6
 8016240:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016244:	4640      	mov	r0, r8
 8016246:	f8ad 9016 	strh.w	r9, [sp, #22]
 801624a:	69ea      	ldr	r2, [r5, #28]
 801624c:	f7ff ff66 	bl	801611c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016250:	8822      	ldrh	r2, [r4, #0]
 8016252:	445f      	add	r7, fp
 8016254:	88a3      	ldrh	r3, [r4, #4]
 8016256:	b2bf      	uxth	r7, r7
 8016258:	4413      	add	r3, r2
 801625a:	b23a      	sxth	r2, r7
 801625c:	b29b      	uxth	r3, r3
 801625e:	b219      	sxth	r1, r3
 8016260:	4291      	cmp	r1, r2
 8016262:	dd0d      	ble.n	8016280 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8016264:	1bdb      	subs	r3, r3, r7
 8016266:	f8ad 2010 	strh.w	r2, [sp, #16]
 801626a:	f8ad a012 	strh.w	sl, [sp, #18]
 801626e:	4631      	mov	r1, r6
 8016270:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016274:	4640      	mov	r0, r8
 8016276:	f8ad 9016 	strh.w	r9, [sp, #22]
 801627a:	69ea      	ldr	r2, [r5, #28]
 801627c:	f7ff ff4e 	bl	801611c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016280:	88e2      	ldrh	r2, [r4, #6]
 8016282:	8863      	ldrh	r3, [r4, #2]
 8016284:	4413      	add	r3, r2
 8016286:	9a00      	ldr	r2, [sp, #0]
 8016288:	444a      	add	r2, r9
 801628a:	b29b      	uxth	r3, r3
 801628c:	fa1f f982 	uxth.w	r9, r2
 8016290:	b219      	sxth	r1, r3
 8016292:	fa0f f289 	sxth.w	r2, r9
 8016296:	428a      	cmp	r2, r1
 8016298:	da15      	bge.n	80162c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801629a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801629e:	eba3 0309 	sub.w	r3, r3, r9
 80162a2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80162a6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80162aa:	4631      	mov	r1, r6
 80162ac:	f8ad 0010 	strh.w	r0, [sp, #16]
 80162b0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80162b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80162b8:	69ea      	ldr	r2, [r5, #28]
 80162ba:	e001      	b.n	80162c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80162bc:	69ea      	ldr	r2, [r5, #28]
 80162be:	4621      	mov	r1, r4
 80162c0:	4640      	mov	r0, r8
 80162c2:	f7ff ff2b 	bl	801611c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80162c6:	4628      	mov	r0, r5
 80162c8:	f7ff fe94 	bl	8015ff4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80162cc:	6861      	ldr	r1, [r4, #4]
 80162ce:	4602      	mov	r2, r0
 80162d0:	4633      	mov	r3, r6
 80162d2:	6820      	ldr	r0, [r4, #0]
 80162d4:	c303      	stmia	r3!, {r0, r1}
 80162d6:	4611      	mov	r1, r2
 80162d8:	4630      	mov	r0, r6
 80162da:	f7f8 fc6f 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 80162de:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	f77f af33 	ble.w	801614e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80162e8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	f77f af2e 	ble.w	801614e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80162f2:	4628      	mov	r0, r5
 80162f4:	f7ff fe9a 	bl	801602c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80162f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80162fc:	1a18      	subs	r0, r3, r0
 80162fe:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016302:	4628      	mov	r0, r5
 8016304:	f7ff fea6 	bl	8016054 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016308:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801630c:	4631      	mov	r1, r6
 801630e:	1a18      	subs	r0, r3, r0
 8016310:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016314:	4628      	mov	r0, r5
 8016316:	682b      	ldr	r3, [r5, #0]
 8016318:	689b      	ldr	r3, [r3, #8]
 801631a:	4798      	blx	r3
 801631c:	e717      	b.n	801614e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801631e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801631e:	b570      	push	{r4, r5, r6, lr}
 8016320:	1d06      	adds	r6, r0, #4
 8016322:	b086      	sub	sp, #24
 8016324:	460c      	mov	r4, r1
 8016326:	2300      	movs	r3, #0
 8016328:	4631      	mov	r1, r6
 801632a:	4605      	mov	r5, r0
 801632c:	a802      	add	r0, sp, #8
 801632e:	9301      	str	r3, [sp, #4]
 8016330:	f7ff f8ee 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016334:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016338:	8822      	ldrh	r2, [r4, #0]
 801633a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801633e:	1ad2      	subs	r2, r2, r3
 8016340:	8863      	ldrh	r3, [r4, #2]
 8016342:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016346:	1a5b      	subs	r3, r3, r1
 8016348:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801634c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016350:	aa01      	add	r2, sp, #4
 8016352:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016356:	4630      	mov	r0, r6
 8016358:	f8ad 1016 	strh.w	r1, [sp, #22]
 801635c:	a904      	add	r1, sp, #16
 801635e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016362:	f7f8 fd03 	bl	800ed6c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8016366:	9a01      	ldr	r2, [sp, #4]
 8016368:	b11a      	cbz	r2, 8016372 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801636a:	4621      	mov	r1, r4
 801636c:	4628      	mov	r0, r5
 801636e:	f7ff fed5 	bl	801611c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016372:	b006      	add	sp, #24
 8016374:	bd70      	pop	{r4, r5, r6, pc}

08016376 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016376:	4602      	mov	r2, r0
 8016378:	b530      	push	{r4, r5, lr}
 801637a:	4604      	mov	r4, r0
 801637c:	b085      	sub	sp, #20
 801637e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8016382:	460d      	mov	r5, r1
 8016384:	466b      	mov	r3, sp
 8016386:	6851      	ldr	r1, [r2, #4]
 8016388:	c303      	stmia	r3!, {r0, r1}
 801638a:	4629      	mov	r1, r5
 801638c:	4668      	mov	r0, sp
 801638e:	f7f8 fc15 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 8016392:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016396:	b12b      	cbz	r3, 80163a4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8016398:	4669      	mov	r1, sp
 801639a:	4620      	mov	r0, r4
 801639c:	f7ff ffbf 	bl	801631e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80163a0:	b005      	add	sp, #20
 80163a2:	bd30      	pop	{r4, r5, pc}
 80163a4:	3404      	adds	r4, #4
 80163a6:	a802      	add	r0, sp, #8
 80163a8:	4621      	mov	r1, r4
 80163aa:	f7ff f8b1 	bl	8015510 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80163ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80163b2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80163b6:	4669      	mov	r1, sp
 80163b8:	4620      	mov	r0, r4
 80163ba:	1a9b      	subs	r3, r3, r2
 80163bc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80163c0:	f8ad 3000 	strh.w	r3, [sp]
 80163c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80163c8:	1a9b      	subs	r3, r3, r2
 80163ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 80163ce:	f7f8 fc94 	bl	800ecfa <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80163d2:	e7e5      	b.n	80163a0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080163d4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80163d4:	460b      	mov	r3, r1
 80163d6:	680a      	ldr	r2, [r1, #0]
 80163d8:	1d01      	adds	r1, r0, #4
 80163da:	6992      	ldr	r2, [r2, #24]
 80163dc:	4618      	mov	r0, r3
 80163de:	4710      	bx	r2

080163e0 <_ZN8touchgfx12TextProviderC1Ev>:
 80163e0:	b538      	push	{r3, r4, r5, lr}
 80163e2:	2500      	movs	r5, #0
 80163e4:	2302      	movs	r3, #2
 80163e6:	4604      	mov	r4, r0
 80163e8:	220e      	movs	r2, #14
 80163ea:	7403      	strb	r3, [r0, #16]
 80163ec:	4629      	mov	r1, r5
 80163ee:	6145      	str	r5, [r0, #20]
 80163f0:	7605      	strb	r5, [r0, #24]
 80163f2:	83c5      	strh	r5, [r0, #30]
 80163f4:	8405      	strh	r5, [r0, #32]
 80163f6:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80163f8:	8705      	strh	r5, [r0, #56]	@ 0x38
 80163fa:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80163fc:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8016400:	e9c0 5500 	strd	r5, r5, [r0]
 8016404:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8016408:	304c      	adds	r0, #76	@ 0x4c
 801640a:	f00d f81d 	bl	8023448 <memset>
 801640e:	2301      	movs	r3, #1
 8016410:	4620      	mov	r0, r4
 8016412:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8016416:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801641a:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801641e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8016422:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8016426:	f7ee f81b 	bl	8004460 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801642a:	4620      	mov	r0, r4
 801642c:	bd38      	pop	{r3, r4, r5, pc}

0801642e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801642e:	b530      	push	{r4, r5, lr}
 8016430:	2500      	movs	r5, #0
 8016432:	2401      	movs	r4, #1
 8016434:	6843      	ldr	r3, [r0, #4]
 8016436:	b913      	cbnz	r3, 801643e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016438:	6803      	ldr	r3, [r0, #0]
 801643a:	b313      	cbz	r3, 8016482 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801643c:	6043      	str	r3, [r0, #4]
 801643e:	7e03      	ldrb	r3, [r0, #24]
 8016440:	b143      	cbz	r3, 8016454 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016442:	6943      	ldr	r3, [r0, #20]
 8016444:	b12b      	cbz	r3, 8016452 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016446:	881a      	ldrh	r2, [r3, #0]
 8016448:	b11a      	cbz	r2, 8016452 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801644a:	1c9a      	adds	r2, r3, #2
 801644c:	6142      	str	r2, [r0, #20]
 801644e:	8818      	ldrh	r0, [r3, #0]
 8016450:	bd30      	pop	{r4, r5, pc}
 8016452:	7605      	strb	r5, [r0, #24]
 8016454:	6843      	ldr	r3, [r0, #4]
 8016456:	8819      	ldrh	r1, [r3, #0]
 8016458:	b199      	cbz	r1, 8016482 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801645a:	1c9a      	adds	r2, r3, #2
 801645c:	2902      	cmp	r1, #2
 801645e:	6042      	str	r2, [r0, #4]
 8016460:	d1f5      	bne.n	801644e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016462:	7c03      	ldrb	r3, [r0, #16]
 8016464:	2b01      	cmp	r3, #1
 8016466:	d8e5      	bhi.n	8016434 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016468:	1c5a      	adds	r2, r3, #1
 801646a:	3302      	adds	r3, #2
 801646c:	7402      	strb	r2, [r0, #16]
 801646e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8016472:	6143      	str	r3, [r0, #20]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d0dd      	beq.n	8016434 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016478:	881b      	ldrh	r3, [r3, #0]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d0da      	beq.n	8016434 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801647e:	7604      	strb	r4, [r0, #24]
 8016480:	e7d8      	b.n	8016434 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016482:	2000      	movs	r0, #0
 8016484:	e7e4      	b.n	8016450 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08016486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8016486:	6001      	str	r1, [r0, #0]
 8016488:	2100      	movs	r1, #0
 801648a:	b430      	push	{r4, r5}
 801648c:	6041      	str	r1, [r0, #4]
 801648e:	6815      	ldr	r5, [r2, #0]
 8016490:	6085      	str	r5, [r0, #8]
 8016492:	6852      	ldr	r2, [r2, #4]
 8016494:	6443      	str	r3, [r0, #68]	@ 0x44
 8016496:	9b02      	ldr	r3, [sp, #8]
 8016498:	60c2      	str	r2, [r0, #12]
 801649a:	7401      	strb	r1, [r0, #16]
 801649c:	6141      	str	r1, [r0, #20]
 801649e:	7601      	strb	r1, [r0, #24]
 80164a0:	8701      	strh	r1, [r0, #56]	@ 0x38
 80164a2:	8401      	strh	r1, [r0, #32]
 80164a4:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80164a8:	6483      	str	r3, [r0, #72]	@ 0x48
 80164aa:	bc30      	pop	{r4, r5}
 80164ac:	f7ed bfd8 	b.w	8004460 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080164b0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80164b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164b2:	4605      	mov	r5, r0
 80164b4:	4608      	mov	r0, r1
 80164b6:	b1f1      	cbz	r1, 80164f6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80164b8:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80164bc:	460b      	mov	r3, r1
 80164be:	f101 0708 	add.w	r7, r1, #8
 80164c2:	4622      	mov	r2, r4
 80164c4:	6818      	ldr	r0, [r3, #0]
 80164c6:	3308      	adds	r3, #8
 80164c8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80164cc:	4626      	mov	r6, r4
 80164ce:	42bb      	cmp	r3, r7
 80164d0:	c603      	stmia	r6!, {r0, r1}
 80164d2:	4634      	mov	r4, r6
 80164d4:	d1f6      	bne.n	80164c4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80164d6:	6818      	ldr	r0, [r3, #0]
 80164d8:	6030      	str	r0, [r6, #0]
 80164da:	4610      	mov	r0, r2
 80164dc:	889b      	ldrh	r3, [r3, #4]
 80164de:	80b3      	strh	r3, [r6, #4]
 80164e0:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80164e4:	015b      	lsls	r3, r3, #5
 80164e6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80164ea:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 80164ee:	430b      	orrs	r3, r1
 80164f0:	425b      	negs	r3, r3
 80164f2:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80164f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164f8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80164f8:	b538      	push	{r3, r4, r5, lr}
 80164fa:	460c      	mov	r4, r1
 80164fc:	6811      	ldr	r1, [r2, #0]
 80164fe:	4610      	mov	r0, r2
 8016500:	68cd      	ldr	r5, [r1, #12]
 8016502:	4619      	mov	r1, r3
 8016504:	47a8      	blx	r5
 8016506:	2800      	cmp	r0, #0
 8016508:	bf08      	it	eq
 801650a:	4620      	moveq	r0, r4
 801650c:	bd38      	pop	{r3, r4, r5, pc}
	...

08016510 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016514:	468c      	mov	ip, r1
 8016516:	4605      	mov	r5, r0
 8016518:	4614      	mov	r4, r2
 801651a:	b942      	cbnz	r2, 801652e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801651c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8016520:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8016524:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8016528:	4620      	mov	r0, r4
 801652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801652e:	7b50      	ldrb	r0, [r2, #13]
 8016530:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8016534:	8893      	ldrh	r3, [r2, #4]
 8016536:	0106      	lsls	r6, r0, #4
 8016538:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801653c:	79e6      	ldrb	r6, [r4, #7]
 801653e:	4316      	orrs	r6, r2
 8016540:	185a      	adds	r2, r3, r1
 8016542:	b291      	uxth	r1, r2
 8016544:	b2b7      	uxth	r7, r6
 8016546:	291d      	cmp	r1, #29
 8016548:	d87f      	bhi.n	801664a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801654a:	2201      	movs	r2, #1
 801654c:	10f6      	asrs	r6, r6, #3
 801654e:	408a      	lsls	r2, r1
 8016550:	498b      	ldr	r1, [pc, #556]	@ (8016780 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8016552:	420a      	tst	r2, r1
 8016554:	d12e      	bne.n	80165b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8016556:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801655a:	d076      	beq.n	801664a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801655c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016560:	4623      	mov	r3, r4
 8016562:	f104 0e08 	add.w	lr, r4, #8
 8016566:	4614      	mov	r4, r2
 8016568:	6818      	ldr	r0, [r3, #0]
 801656a:	3308      	adds	r3, #8
 801656c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016570:	4694      	mov	ip, r2
 8016572:	4573      	cmp	r3, lr
 8016574:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016578:	4662      	mov	r2, ip
 801657a:	d1f5      	bne.n	8016568 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801657c:	6818      	ldr	r0, [r3, #0]
 801657e:	f8cc 0000 	str.w	r0, [ip]
 8016582:	889b      	ldrh	r3, [r3, #4]
 8016584:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016588:	b2b3      	uxth	r3, r6
 801658a:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801658e:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8016592:	1aca      	subs	r2, r1, r3
 8016594:	1bcf      	subs	r7, r1, r7
 8016596:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801659a:	b292      	uxth	r2, r2
 801659c:	1afb      	subs	r3, r7, r3
 801659e:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 80165a2:	10d2      	asrs	r2, r2, #3
 80165a4:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80165a8:	4302      	orrs	r2, r0
 80165aa:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 80165ae:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 80165b2:	e7b9      	b.n	8016528 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80165b4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80165b8:	4623      	mov	r3, r4
 80165ba:	f104 0808 	add.w	r8, r4, #8
 80165be:	4614      	mov	r4, r2
 80165c0:	6818      	ldr	r0, [r3, #0]
 80165c2:	3308      	adds	r3, #8
 80165c4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80165c8:	4696      	mov	lr, r2
 80165ca:	4543      	cmp	r3, r8
 80165cc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80165d0:	4672      	mov	r2, lr
 80165d2:	d1f5      	bne.n	80165c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 80165d4:	6818      	ldr	r0, [r3, #0]
 80165d6:	f8ce 0000 	str.w	r0, [lr]
 80165da:	889b      	ldrh	r3, [r3, #4]
 80165dc:	f8ae 3004 	strh.w	r3, [lr, #4]
 80165e0:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 80165e2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80165e6:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80165e8:	f640 6333 	movw	r3, #3635	@ 0xe33
 80165ec:	4299      	cmp	r1, r3
 80165ee:	d111      	bne.n	8016614 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 80165f0:	f8dc 3000 	ldr.w	r3, [ip]
 80165f4:	4660      	mov	r0, ip
 80165f6:	68db      	ldr	r3, [r3, #12]
 80165f8:	4798      	blx	r3
 80165fa:	7b41      	ldrb	r1, [r0, #13]
 80165fc:	00cb      	lsls	r3, r1, #3
 80165fe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016602:	7a03      	ldrb	r3, [r0, #8]
 8016604:	4313      	orrs	r3, r2
 8016606:	064a      	lsls	r2, r1, #25
 8016608:	bf44      	itt	mi
 801660a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801660e:	b21b      	sxthmi	r3, r3
 8016610:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016614:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8016618:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801661c:	443b      	add	r3, r7
 801661e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016622:	4433      	add	r3, r6
 8016624:	b29b      	uxth	r3, r3
 8016626:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801662a:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801662e:	10db      	asrs	r3, r3, #3
 8016630:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016634:	4313      	orrs	r3, r2
 8016636:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801663a:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801663e:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8016642:	1a9b      	subs	r3, r3, r2
 8016644:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8016648:	e76e      	b.n	8016528 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801664a:	f023 0204 	bic.w	r2, r3, #4
 801664e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8016652:	428a      	cmp	r2, r1
 8016654:	d003      	beq.n	801665e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8016656:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801665a:	4293      	cmp	r3, r2
 801665c:	d138      	bne.n	80166d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 801665e:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8016662:	4622      	mov	r2, r4
 8016664:	f104 0808 	add.w	r8, r4, #8
 8016668:	4634      	mov	r4, r6
 801666a:	6810      	ldr	r0, [r2, #0]
 801666c:	3208      	adds	r2, #8
 801666e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016672:	46b6      	mov	lr, r6
 8016674:	4542      	cmp	r2, r8
 8016676:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801667a:	4676      	mov	r6, lr
 801667c:	d1f5      	bne.n	801666a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 801667e:	6810      	ldr	r0, [r2, #0]
 8016680:	3b01      	subs	r3, #1
 8016682:	4621      	mov	r1, r4
 8016684:	f8ce 0000 	str.w	r0, [lr]
 8016688:	b29b      	uxth	r3, r3
 801668a:	8892      	ldrh	r2, [r2, #4]
 801668c:	4628      	mov	r0, r5
 801668e:	f8ae 2004 	strh.w	r2, [lr, #4]
 8016692:	4662      	mov	r2, ip
 8016694:	f7ff ff30 	bl	80164f8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016698:	7b41      	ldrb	r1, [r0, #13]
 801669a:	00cb      	lsls	r3, r1, #3
 801669c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80166a0:	7a03      	ldrb	r3, [r0, #8]
 80166a2:	0648      	lsls	r0, r1, #25
 80166a4:	ea43 0302 	orr.w	r3, r3, r2
 80166a8:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80166ac:	bf44      	itt	mi
 80166ae:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80166b2:	b21b      	sxthmi	r3, r3
 80166b4:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80166b8:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80166bc:	005b      	lsls	r3, r3, #1
 80166be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80166c2:	4313      	orrs	r3, r2
 80166c4:	115a      	asrs	r2, r3, #5
 80166c6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80166ca:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 80166ce:	e047      	b.n	8016760 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 80166d0:	00c2      	lsls	r2, r0, #3
 80166d2:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80166d6:	7a22      	ldrb	r2, [r4, #8]
 80166d8:	430a      	orrs	r2, r1
 80166da:	0641      	lsls	r1, r0, #25
 80166dc:	f640 6109 	movw	r1, #3593	@ 0xe09
 80166e0:	bf44      	itt	mi
 80166e2:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80166e6:	b212      	sxthmi	r2, r2
 80166e8:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 80166ec:	f023 0210 	bic.w	r2, r3, #16
 80166f0:	428a      	cmp	r2, r1
 80166f2:	d003      	beq.n	80166fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 80166f4:	f640 6213 	movw	r2, #3603	@ 0xe13
 80166f8:	4293      	cmp	r3, r2
 80166fa:	d13e      	bne.n	801677a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 80166fc:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016700:	f104 0808 	add.w	r8, r4, #8
 8016704:	4696      	mov	lr, r2
 8016706:	6820      	ldr	r0, [r4, #0]
 8016708:	3408      	adds	r4, #8
 801670a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801670e:	4616      	mov	r6, r2
 8016710:	4544      	cmp	r4, r8
 8016712:	c603      	stmia	r6!, {r0, r1}
 8016714:	4632      	mov	r2, r6
 8016716:	d1f6      	bne.n	8016706 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8016718:	6820      	ldr	r0, [r4, #0]
 801671a:	6030      	str	r0, [r6, #0]
 801671c:	4628      	mov	r0, r5
 801671e:	88a1      	ldrh	r1, [r4, #4]
 8016720:	4674      	mov	r4, lr
 8016722:	80b1      	strh	r1, [r6, #4]
 8016724:	4671      	mov	r1, lr
 8016726:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801672a:	0076      	lsls	r6, r6, #1
 801672c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016730:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8016734:	4316      	orrs	r6, r2
 8016736:	f640 6213 	movw	r2, #3603	@ 0xe13
 801673a:	4293      	cmp	r3, r2
 801673c:	4662      	mov	r2, ip
 801673e:	bf16      	itet	ne
 8016740:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016744:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8016748:	b29b      	uxthne	r3, r3
 801674a:	f7ff fed5 	bl	80164f8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801674e:	7b43      	ldrb	r3, [r0, #13]
 8016750:	7a82      	ldrb	r2, [r0, #10]
 8016752:	005b      	lsls	r3, r3, #1
 8016754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016758:	4313      	orrs	r3, r2
 801675a:	1af6      	subs	r6, r6, r3
 801675c:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8016760:	7b61      	ldrb	r1, [r4, #13]
 8016762:	00cb      	lsls	r3, r1, #3
 8016764:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016768:	7a23      	ldrb	r3, [r4, #8]
 801676a:	4313      	orrs	r3, r2
 801676c:	064a      	lsls	r2, r1, #25
 801676e:	bf44      	itt	mi
 8016770:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016774:	b21b      	sxthmi	r3, r3
 8016776:	1bdb      	subs	r3, r3, r7
 8016778:	e719      	b.n	80165ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801677a:	2300      	movs	r3, #0
 801677c:	e7a5      	b.n	80166ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801677e:	bf00      	nop
 8016780:	3fc00079 	.word	0x3fc00079

08016784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016788:	4604      	mov	r4, r0
 801678a:	b942      	cbnz	r2, 801679e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801678c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016790:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8016794:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8016798:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801679c:	e047      	b.n	801682e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801679e:	7b51      	ldrb	r1, [r2, #13]
 80167a0:	8893      	ldrh	r3, [r2, #4]
 80167a2:	010d      	lsls	r5, r1, #4
 80167a4:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80167a8:	79d5      	ldrb	r5, [r2, #7]
 80167aa:	4305      	orrs	r5, r0
 80167ac:	2d04      	cmp	r5, #4
 80167ae:	bfcc      	ite	gt
 80167b0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80167b4:	f04f 0e01 	movle.w	lr, #1
 80167b8:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80167bc:	f200 80ab 	bhi.w	8016916 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80167c0:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80167c4:	4283      	cmp	r3, r0
 80167c6:	d216      	bcs.n	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80167c8:	f240 605b 	movw	r0, #1627	@ 0x65b
 80167cc:	4283      	cmp	r3, r0
 80167ce:	d859      	bhi.n	8016884 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80167d0:	f240 6057 	movw	r0, #1623	@ 0x657
 80167d4:	4283      	cmp	r3, r0
 80167d6:	d20e      	bcs.n	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80167d8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80167dc:	d24a      	bcs.n	8016874 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80167de:	f240 604e 	movw	r0, #1614	@ 0x64e
 80167e2:	4283      	cmp	r3, r0
 80167e4:	d207      	bcs.n	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80167e6:	f240 601a 	movw	r0, #1562	@ 0x61a
 80167ea:	4283      	cmp	r3, r0
 80167ec:	d02a      	beq.n	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80167ee:	d821      	bhi.n	8016834 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80167f0:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80167f4:	d35b      	bcc.n	80168ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80167f6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80167fa:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80167fe:	f040 80d0 	bne.w	80169a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016802:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8016806:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801680a:	f040 80ca 	bne.w	80169a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801680e:	00cb      	lsls	r3, r1, #3
 8016810:	0649      	lsls	r1, r1, #25
 8016812:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016816:	7a13      	ldrb	r3, [r2, #8]
 8016818:	ea43 0300 	orr.w	r3, r3, r0
 801681c:	bf44      	itt	mi
 801681e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016822:	b21b      	sxthmi	r3, r3
 8016824:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016828:	1b5d      	subs	r5, r3, r5
 801682a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801682e:	4610      	mov	r0, r2
 8016830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016834:	f240 604b 	movw	r0, #1611	@ 0x64b
 8016838:	4283      	cmp	r3, r0
 801683a:	d338      	bcc.n	80168ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801683c:	f240 604c 	movw	r0, #1612	@ 0x64c
 8016840:	4283      	cmp	r3, r0
 8016842:	d9d8      	bls.n	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016844:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8016848:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801684c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016850:	f040 80f3 	bne.w	8016a3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016854:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016858:	f040 80ef 	bne.w	8016a3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801685c:	00cb      	lsls	r3, r1, #3
 801685e:	064e      	lsls	r6, r1, #25
 8016860:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016864:	7a13      	ldrb	r3, [r2, #8]
 8016866:	ea43 0300 	orr.w	r3, r3, r0
 801686a:	bf44      	itt	mi
 801686c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016870:	b21b      	sxthmi	r3, r3
 8016872:	e7d9      	b.n	8016828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016874:	f240 6054 	movw	r0, #1620	@ 0x654
 8016878:	4283      	cmp	r3, r0
 801687a:	d8e3      	bhi.n	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801687c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016880:	d9e0      	bls.n	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016882:	e7b8      	b.n	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016884:	f240 6074 	movw	r0, #1652	@ 0x674
 8016888:	4283      	cmp	r3, r0
 801688a:	d0b4      	beq.n	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801688c:	d82d      	bhi.n	80168ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801688e:	f240 605e 	movw	r0, #1630	@ 0x65e
 8016892:	4283      	cmp	r3, r0
 8016894:	d804      	bhi.n	80168a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016896:	f240 605d 	movw	r0, #1629	@ 0x65d
 801689a:	4283      	cmp	r3, r0
 801689c:	d3d2      	bcc.n	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801689e:	e7aa      	b.n	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80168a0:	f240 605f 	movw	r0, #1631	@ 0x65f
 80168a4:	4283      	cmp	r3, r0
 80168a6:	d0cd      	beq.n	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80168a8:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80168ac:	d0a3      	beq.n	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80168ae:	00cb      	lsls	r3, r1, #3
 80168b0:	0649      	lsls	r1, r1, #25
 80168b2:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80168b6:	7a13      	ldrb	r3, [r2, #8]
 80168b8:	ea43 0300 	orr.w	r3, r3, r0
 80168bc:	bf44      	itt	mi
 80168be:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80168c2:	b21b      	sxthmi	r3, r3
 80168c4:	1b5d      	subs	r5, r3, r5
 80168c6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80168ca:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80168ce:	7b53      	ldrb	r3, [r2, #13]
 80168d0:	015b      	lsls	r3, r3, #5
 80168d2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80168d6:	7993      	ldrb	r3, [r2, #6]
 80168d8:	430b      	orrs	r3, r1
 80168da:	2105      	movs	r1, #5
 80168dc:	005b      	lsls	r3, r3, #1
 80168de:	fb93 f3f1 	sdiv	r3, r3, r1
 80168e2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80168e6:	440b      	add	r3, r1
 80168e8:	e756      	b.n	8016798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80168ea:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80168ee:	4283      	cmp	r3, r0
 80168f0:	d809      	bhi.n	8016906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80168f2:	f240 60df 	movw	r0, #1759	@ 0x6df
 80168f6:	4283      	cmp	r3, r0
 80168f8:	f4bf af7d 	bcs.w	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80168fc:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8016900:	2b05      	cmp	r3, #5
 8016902:	d8d4      	bhi.n	80168ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016904:	e777      	b.n	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016906:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801690a:	4283      	cmp	r3, r0
 801690c:	d09a      	beq.n	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801690e:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8016912:	4283      	cmp	r3, r0
 8016914:	e7ca      	b.n	80168ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016916:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801691a:	d22b      	bcs.n	8016974 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801691c:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8016920:	4283      	cmp	r3, r0
 8016922:	d28f      	bcs.n	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016924:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8016928:	4283      	cmp	r3, r0
 801692a:	d816      	bhi.n	801695a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801692c:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8016930:	4283      	cmp	r3, r0
 8016932:	f4bf af60 	bcs.w	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016936:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801693a:	4283      	cmp	r3, r0
 801693c:	d80a      	bhi.n	8016954 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801693e:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8016942:	4283      	cmp	r3, r0
 8016944:	f4bf af57 	bcs.w	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016948:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801694c:	4283      	cmp	r3, r0
 801694e:	f43f af79 	beq.w	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016952:	e7ac      	b.n	80168ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016954:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8016958:	e7f8      	b.n	801694c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801695a:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801695e:	4283      	cmp	r3, r0
 8016960:	d802      	bhi.n	8016968 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016962:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8016966:	e798      	b.n	801689a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016968:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801696c:	4283      	cmp	r3, r0
 801696e:	f47f af42 	bne.w	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016972:	e767      	b.n	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016974:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8016978:	4283      	cmp	r3, r0
 801697a:	f43f af63 	beq.w	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801697e:	d802      	bhi.n	8016986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016980:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8016984:	e7f2      	b.n	801696c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016986:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801698a:	4283      	cmp	r3, r0
 801698c:	d805      	bhi.n	801699a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801698e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8016992:	4283      	cmp	r3, r0
 8016994:	f4ff af2f 	bcc.w	80167f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016998:	e754      	b.n	8016844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801699a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801699e:	4283      	cmp	r3, r0
 80169a0:	e7af      	b.n	8016902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80169a2:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80169a6:	4617      	mov	r7, r2
 80169a8:	f102 0808 	add.w	r8, r2, #8
 80169ac:	4666      	mov	r6, ip
 80169ae:	6838      	ldr	r0, [r7, #0]
 80169b0:	3708      	adds	r7, #8
 80169b2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80169b6:	46e6      	mov	lr, ip
 80169b8:	4547      	cmp	r7, r8
 80169ba:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80169be:	46f4      	mov	ip, lr
 80169c0:	d1f5      	bne.n	80169ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80169c2:	6838      	ldr	r0, [r7, #0]
 80169c4:	f8ce 0000 	str.w	r0, [lr]
 80169c8:	88b9      	ldrh	r1, [r7, #4]
 80169ca:	f8ae 1004 	strh.w	r1, [lr, #4]
 80169ce:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80169d2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80169d6:	d009      	beq.n	80169ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80169d8:	7b51      	ldrb	r1, [r2, #13]
 80169da:	7992      	ldrb	r2, [r2, #6]
 80169dc:	0149      	lsls	r1, r1, #5
 80169de:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80169e2:	4311      	orrs	r1, r2
 80169e4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80169e8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80169ec:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80169f0:	b2ad      	uxth	r5, r5
 80169f2:	d00d      	beq.n	8016a10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80169f4:	442b      	add	r3, r5
 80169f6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80169fa:	b29b      	uxth	r3, r3
 80169fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016a00:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016a04:	10db      	asrs	r3, r3, #3
 8016a06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016a0a:	4313      	orrs	r3, r2
 8016a0c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8016a10:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8016a14:	00cb      	lsls	r3, r1, #3
 8016a16:	064f      	lsls	r7, r1, #25
 8016a18:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016a1c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8016a20:	ea43 0302 	orr.w	r3, r3, r2
 8016a24:	bf44      	itt	mi
 8016a26:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016a2a:	b21b      	sxthmi	r3, r3
 8016a2c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016a30:	1b5b      	subs	r3, r3, r5
 8016a32:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8016a36:	4632      	mov	r2, r6
 8016a38:	e6f9      	b.n	801682e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016a3a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8016a3e:	4617      	mov	r7, r2
 8016a40:	f102 0908 	add.w	r9, r2, #8
 8016a44:	4666      	mov	r6, ip
 8016a46:	6838      	ldr	r0, [r7, #0]
 8016a48:	3708      	adds	r7, #8
 8016a4a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016a4e:	46e0      	mov	r8, ip
 8016a50:	454f      	cmp	r7, r9
 8016a52:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8016a56:	46c4      	mov	ip, r8
 8016a58:	d1f5      	bne.n	8016a46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8016a5a:	6838      	ldr	r0, [r7, #0]
 8016a5c:	f8c8 0000 	str.w	r0, [r8]
 8016a60:	88b9      	ldrh	r1, [r7, #4]
 8016a62:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016a66:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8016a6a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016a6e:	d009      	beq.n	8016a84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8016a70:	7b51      	ldrb	r1, [r2, #13]
 8016a72:	7992      	ldrb	r2, [r2, #6]
 8016a74:	0149      	lsls	r1, r1, #5
 8016a76:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8016a7a:	4311      	orrs	r1, r2
 8016a7c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016a80:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8016a84:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016a88:	d00e      	beq.n	8016aa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8016a8a:	eba3 030e 	sub.w	r3, r3, lr
 8016a8e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016a98:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016a9c:	10db      	asrs	r3, r3, #3
 8016a9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016aa2:	4313      	orrs	r3, r2
 8016aa4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8016aa8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8016aac:	00cb      	lsls	r3, r1, #3
 8016aae:	0648      	lsls	r0, r1, #25
 8016ab0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016ab4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8016ab8:	ea43 0302 	orr.w	r3, r3, r2
 8016abc:	bf44      	itt	mi
 8016abe:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016ac2:	b21b      	sxthmi	r3, r3
 8016ac4:	1b5d      	subs	r5, r3, r5
 8016ac6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016aca:	e7b4      	b.n	8016a36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08016acc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ad0:	461e      	mov	r6, r3
 8016ad2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	4617      	mov	r7, r2
 8016ad8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016adc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016ae0:	f7ed fc7c 	bl	80043dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016ae4:	4605      	mov	r5, r0
 8016ae6:	b918      	cbnz	r0, 8016af0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8016ae8:	6030      	str	r0, [r6, #0]
 8016aea:	4628      	mov	r0, r5
 8016aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	4601      	mov	r1, r0
 8016af4:	4638      	mov	r0, r7
 8016af6:	68db      	ldr	r3, [r3, #12]
 8016af8:	4798      	blx	r3
 8016afa:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8016afe:	4602      	mov	r2, r0
 8016b00:	6030      	str	r0, [r6, #0]
 8016b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016b06:	d213      	bcs.n	8016b30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8016b08:	4643      	mov	r3, r8
 8016b0a:	4639      	mov	r1, r7
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f7ff fe39 	bl	8016784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016b12:	6030      	str	r0, [r6, #0]
 8016b14:	6833      	ldr	r3, [r6, #0]
 8016b16:	b143      	cbz	r3, 8016b2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8016b18:	7b5a      	ldrb	r2, [r3, #13]
 8016b1a:	7a9b      	ldrb	r3, [r3, #10]
 8016b1c:	0052      	lsls	r2, r2, #1
 8016b1e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8016b22:	4313      	orrs	r3, r2
 8016b24:	bf0c      	ite	eq
 8016b26:	2301      	moveq	r3, #1
 8016b28:	2300      	movne	r3, #0
 8016b2a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8016b2e:	e7dc      	b.n	8016aea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8016b30:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8016b38:	d804      	bhi.n	8016b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8016b3a:	4639      	mov	r1, r7
 8016b3c:	4620      	mov	r0, r4
 8016b3e:	f7ff fce7 	bl	8016510 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016b42:	e7e6      	b.n	8016b12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8016b44:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d0e3      	beq.n	8016b14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016b4c:	f640 1302 	movw	r3, #2306	@ 0x902
 8016b50:	429d      	cmp	r5, r3
 8016b52:	d1df      	bne.n	8016b14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016b54:	4601      	mov	r1, r0
 8016b56:	4620      	mov	r0, r4
 8016b58:	f7ff fcaa 	bl	80164b0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016b5c:	e7d9      	b.n	8016b12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08016b5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8016b5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b62:	461e      	mov	r6, r3
 8016b64:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016b66:	4604      	mov	r4, r0
 8016b68:	4617      	mov	r7, r2
 8016b6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016b6e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016b72:	f7ed fc33 	bl	80043dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016b76:	4605      	mov	r5, r0
 8016b78:	b918      	cbnz	r0, 8016b82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8016b7a:	6030      	str	r0, [r6, #0]
 8016b7c:	4628      	mov	r0, r5
 8016b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	4601      	mov	r1, r0
 8016b86:	4638      	mov	r0, r7
 8016b88:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8016b8c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016b90:	47c8      	blx	r9
 8016b92:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8016b96:	4602      	mov	r2, r0
 8016b98:	6030      	str	r0, [r6, #0]
 8016b9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016b9e:	d213      	bcs.n	8016bc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8016ba0:	4643      	mov	r3, r8
 8016ba2:	4639      	mov	r1, r7
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f7ff fded 	bl	8016784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016baa:	6030      	str	r0, [r6, #0]
 8016bac:	6833      	ldr	r3, [r6, #0]
 8016bae:	b143      	cbz	r3, 8016bc2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8016bb0:	7b5a      	ldrb	r2, [r3, #13]
 8016bb2:	7a9b      	ldrb	r3, [r3, #10]
 8016bb4:	0052      	lsls	r2, r2, #1
 8016bb6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8016bba:	4313      	orrs	r3, r2
 8016bbc:	bf0c      	ite	eq
 8016bbe:	2301      	moveq	r3, #1
 8016bc0:	2300      	movne	r3, #0
 8016bc2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8016bc6:	e7d9      	b.n	8016b7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8016bc8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8016bcc:	b29b      	uxth	r3, r3
 8016bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8016bd0:	d804      	bhi.n	8016bdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8016bd2:	4639      	mov	r1, r7
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	f7ff fc9b 	bl	8016510 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016bda:	e7e6      	b.n	8016baa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8016bdc:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d0e3      	beq.n	8016bac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016be4:	f640 1302 	movw	r3, #2306	@ 0x902
 8016be8:	429d      	cmp	r5, r3
 8016bea:	d1df      	bne.n	8016bac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016bec:	4601      	mov	r1, r0
 8016bee:	4620      	mov	r0, r4
 8016bf0:	f7ff fc5e 	bl	80164b0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016bf4:	e7d9      	b.n	8016baa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08016bf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8016bf6:	b510      	push	{r4, lr}
 8016bf8:	4604      	mov	r4, r0
 8016bfa:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8016bfe:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016c00:	b1e1      	cbz	r1, 8016c3c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016c02:	2b0a      	cmp	r3, #10
 8016c04:	d02d      	beq.n	8016c62 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016c06:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8016c08:	3901      	subs	r1, #1
 8016c0a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016c0e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8016c10:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8016c14:	1c51      	adds	r1, r2, #1
 8016c16:	b289      	uxth	r1, r1
 8016c18:	2901      	cmp	r1, #1
 8016c1a:	bf8a      	itet	hi
 8016c1c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016c20:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8016c22:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8016c24:	1c5a      	adds	r2, r3, #1
 8016c26:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016c28:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016c2a:	4413      	add	r3, r2
 8016c2c:	b29b      	uxth	r3, r3
 8016c2e:	2b09      	cmp	r3, #9
 8016c30:	bf88      	it	hi
 8016c32:	3b0a      	subhi	r3, #10
 8016c34:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016c38:	8458      	strh	r0, [r3, #34]	@ 0x22
 8016c3a:	e7de      	b.n	8016bfa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8016c3c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016c3e:	2b0a      	cmp	r3, #10
 8016c40:	d00f      	beq.n	8016c62 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016c42:	4620      	mov	r0, r4
 8016c44:	f7ff fbf3 	bl	801642e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8016c48:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016c4a:	1c5a      	adds	r2, r3, #1
 8016c4c:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016c4e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016c50:	4413      	add	r3, r2
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	2b09      	cmp	r3, #9
 8016c56:	bf88      	it	hi
 8016c58:	3b0a      	subhi	r3, #10
 8016c5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016c5e:	8458      	strh	r0, [r3, #34]	@ 0x22
 8016c60:	e7ec      	b.n	8016c3c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016c62:	bd10      	pop	{r4, pc}

08016c64 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8016c64:	b538      	push	{r3, r4, r5, lr}
 8016c66:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016c68:	4604      	mov	r4, r0
 8016c6a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8016c6e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8016c70:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8016c72:	3a01      	subs	r2, #1
 8016c74:	8702      	strh	r2, [r0, #56]	@ 0x38
 8016c76:	1c5a      	adds	r2, r3, #1
 8016c78:	b292      	uxth	r2, r2
 8016c7a:	2a09      	cmp	r2, #9
 8016c7c:	bf8a      	itet	hi
 8016c7e:	3b09      	subhi	r3, #9
 8016c80:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8016c82:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8016c84:	f7ff ffb7 	bl	8016bf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8016c88:	8c23      	ldrh	r3, [r4, #32]
 8016c8a:	2b01      	cmp	r3, #1
 8016c8c:	bf9c      	itt	ls
 8016c8e:	3301      	addls	r3, #1
 8016c90:	8423      	strhls	r3, [r4, #32]
 8016c92:	8be3      	ldrh	r3, [r4, #30]
 8016c94:	b90b      	cbnz	r3, 8016c9a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8016c96:	2302      	movs	r3, #2
 8016c98:	83e3      	strh	r3, [r4, #30]
 8016c9a:	8be3      	ldrh	r3, [r4, #30]
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	3b01      	subs	r3, #1
 8016ca0:	b29b      	uxth	r3, r3
 8016ca2:	83e3      	strh	r3, [r4, #30]
 8016ca4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016ca8:	8365      	strh	r5, [r4, #26]
 8016caa:	bd38      	pop	{r3, r4, r5, pc}

08016cac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8016cac:	428a      	cmp	r2, r1
 8016cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cb2:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8016cb4:	d932      	bls.n	8016d1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8016cb6:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8016cb8:	1a54      	subs	r4, r2, r1
 8016cba:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8016cbe:	19ee      	adds	r6, r5, r7
 8016cc0:	fa1f fe84 	uxth.w	lr, r4
 8016cc4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8016cc8:	3e01      	subs	r6, #1
 8016cca:	b2b4      	uxth	r4, r6
 8016ccc:	eba4 090e 	sub.w	r9, r4, lr
 8016cd0:	fa1f f989 	uxth.w	r9, r9
 8016cd4:	2c09      	cmp	r4, #9
 8016cd6:	4626      	mov	r6, r4
 8016cd8:	bf88      	it	hi
 8016cda:	f1a4 060a 	subhi.w	r6, r4, #10
 8016cde:	f1bc 0f00 	cmp.w	ip, #0
 8016ce2:	f104 34ff 	add.w	r4, r4, #4294967295
 8016ce6:	bf08      	it	eq
 8016ce8:	f04f 0c02 	moveq.w	ip, #2
 8016cec:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016cf0:	b2a4      	uxth	r4, r4
 8016cf2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016cf6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8016cfa:	454c      	cmp	r4, r9
 8016cfc:	fa1f fc8c 	uxth.w	ip, ip
 8016d00:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8016d04:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8016d08:	d1e4      	bne.n	8016cd4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8016d0a:	eba5 050e 	sub.w	r5, r5, lr
 8016d0e:	eb0e 0408 	add.w	r4, lr, r8
 8016d12:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8016d16:	8705      	strh	r5, [r0, #56]	@ 0x38
 8016d18:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8016d1c:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8016d1e:	250a      	movs	r5, #10
 8016d20:	1a64      	subs	r4, r4, r1
 8016d22:	4439      	add	r1, r7
 8016d24:	b289      	uxth	r1, r1
 8016d26:	8704      	strh	r4, [r0, #56]	@ 0x38
 8016d28:	2909      	cmp	r1, #9
 8016d2a:	bf88      	it	hi
 8016d2c:	390a      	subhi	r1, #10
 8016d2e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8016d30:	b18a      	cbz	r2, 8016d56 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8016d32:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8016d34:	3a01      	subs	r2, #1
 8016d36:	3101      	adds	r1, #1
 8016d38:	b292      	uxth	r2, r2
 8016d3a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8016d3e:	8701      	strh	r1, [r0, #56]	@ 0x38
 8016d40:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8016d42:	b901      	cbnz	r1, 8016d46 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8016d44:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8016d46:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8016d48:	3901      	subs	r1, #1
 8016d4a:	b289      	uxth	r1, r1
 8016d4c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8016d4e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016d52:	844c      	strh	r4, [r1, #34]	@ 0x22
 8016d54:	e7ec      	b.n	8016d30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8016d56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d5a:	f7ff bf4c 	b.w	8016bf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08016d5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8016d5e:	b570      	push	{r4, r5, r6, lr}
 8016d60:	2500      	movs	r5, #0
 8016d62:	4295      	cmp	r5, r2
 8016d64:	d011      	beq.n	8016d8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8016d66:	8bc4      	ldrh	r4, [r0, #30]
 8016d68:	f831 6b02 	ldrh.w	r6, [r1], #2
 8016d6c:	4414      	add	r4, r2
 8016d6e:	3c01      	subs	r4, #1
 8016d70:	1b64      	subs	r4, r4, r5
 8016d72:	b2a4      	uxth	r4, r4
 8016d74:	2c01      	cmp	r4, #1
 8016d76:	bf88      	it	hi
 8016d78:	3c02      	subhi	r4, #2
 8016d7a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8016d7e:	8b64      	ldrh	r4, [r4, #26]
 8016d80:	42b4      	cmp	r4, r6
 8016d82:	d117      	bne.n	8016db4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8016d84:	3501      	adds	r5, #1
 8016d86:	b2ad      	uxth	r5, r5
 8016d88:	e7eb      	b.n	8016d62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8016d8a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8016d8e:	2400      	movs	r4, #0
 8016d90:	4413      	add	r3, r2
 8016d92:	b2a2      	uxth	r2, r4
 8016d94:	429a      	cmp	r2, r3
 8016d96:	da0f      	bge.n	8016db8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8016d98:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8016d9a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8016d9e:	3401      	adds	r4, #1
 8016da0:	4432      	add	r2, r6
 8016da2:	b292      	uxth	r2, r2
 8016da4:	2a09      	cmp	r2, #9
 8016da6:	bf88      	it	hi
 8016da8:	3a0a      	subhi	r2, #10
 8016daa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8016dae:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8016db0:	42aa      	cmp	r2, r5
 8016db2:	d0ee      	beq.n	8016d92 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8016db4:	2000      	movs	r0, #0
 8016db6:	bd70      	pop	{r4, r5, r6, pc}
 8016db8:	2001      	movs	r0, #1
 8016dba:	e7fc      	b.n	8016db6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08016dbc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8016dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc0:	4605      	mov	r5, r0
 8016dc2:	4616      	mov	r6, r2
 8016dc4:	1c8c      	adds	r4, r1, #2
 8016dc6:	8809      	ldrh	r1, [r1, #0]
 8016dc8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8016dcc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8016dd0:	42b3      	cmp	r3, r6
 8016dd2:	d124      	bne.n	8016e1e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8016dd4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8016dd8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8016ddc:	f001 070f 	and.w	r7, r1, #15
 8016de0:	4652      	mov	r2, sl
 8016de2:	f8cd 8000 	str.w	r8, [sp]
 8016de6:	464b      	mov	r3, r9
 8016de8:	4621      	mov	r1, r4
 8016dea:	4628      	mov	r0, r5
 8016dec:	f7ff ffb7 	bl	8016d5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016df0:	4683      	mov	fp, r0
 8016df2:	b168      	cbz	r0, 8016e10 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8016df4:	eb0a 0109 	add.w	r1, sl, r9
 8016df8:	463a      	mov	r2, r7
 8016dfa:	4628      	mov	r0, r5
 8016dfc:	4441      	add	r1, r8
 8016dfe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8016e02:	4649      	mov	r1, r9
 8016e04:	f7ff ff52 	bl	8016cac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8016e08:	4658      	mov	r0, fp
 8016e0a:	b003      	add	sp, #12
 8016e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e10:	eb07 010a 	add.w	r1, r7, sl
 8016e14:	4449      	add	r1, r9
 8016e16:	4441      	add	r1, r8
 8016e18:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8016e1c:	e7d2      	b.n	8016dc4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8016e1e:	f04f 0b00 	mov.w	fp, #0
 8016e22:	e7f1      	b.n	8016e08 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08016e24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016e24:	b570      	push	{r4, r5, r6, lr}
 8016e26:	8810      	ldrh	r0, [r2, #0]
 8016e28:	4298      	cmp	r0, r3
 8016e2a:	d817      	bhi.n	8016e5c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016e2c:	1e48      	subs	r0, r1, #1
 8016e2e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016e32:	4298      	cmp	r0, r3
 8016e34:	d312      	bcc.n	8016e5c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016e36:	2400      	movs	r4, #0
 8016e38:	428c      	cmp	r4, r1
 8016e3a:	d20f      	bcs.n	8016e5c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016e3c:	1860      	adds	r0, r4, r1
 8016e3e:	1040      	asrs	r0, r0, #1
 8016e40:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8016e44:	0085      	lsls	r5, r0, #2
 8016e46:	42b3      	cmp	r3, r6
 8016e48:	d902      	bls.n	8016e50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8016e4a:	3001      	adds	r0, #1
 8016e4c:	b284      	uxth	r4, r0
 8016e4e:	e7f3      	b.n	8016e38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016e50:	d201      	bcs.n	8016e56 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8016e52:	b281      	uxth	r1, r0
 8016e54:	e7f0      	b.n	8016e38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016e56:	442a      	add	r2, r5
 8016e58:	8850      	ldrh	r0, [r2, #2]
 8016e5a:	bd70      	pop	{r4, r5, r6, pc}
 8016e5c:	2000      	movs	r0, #0
 8016e5e:	e7fc      	b.n	8016e5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08016e60 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8016e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e64:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8016e66:	4604      	mov	r4, r0
 8016e68:	260b      	movs	r6, #11
 8016e6a:	886f      	ldrh	r7, [r5, #2]
 8016e6c:	087f      	lsrs	r7, r7, #1
 8016e6e:	3e01      	subs	r6, #1
 8016e70:	d013      	beq.n	8016e9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8016e72:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016e74:	462a      	mov	r2, r5
 8016e76:	4639      	mov	r1, r7
 8016e78:	4620      	mov	r0, r4
 8016e7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016e7e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016e82:	4643      	mov	r3, r8
 8016e84:	f7ff ffce 	bl	8016e24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8016e88:	b138      	cbz	r0, 8016e9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8016e8a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8016e8e:	4642      	mov	r2, r8
 8016e90:	4620      	mov	r0, r4
 8016e92:	f7ff ff93 	bl	8016dbc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8016e96:	2800      	cmp	r0, #0
 8016e98:	d1e9      	bne.n	8016e6e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8016e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016ea0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8016ea0:	b570      	push	{r4, r5, r6, lr}
 8016ea2:	694a      	ldr	r2, [r1, #20]
 8016ea4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8016ea6:	684b      	ldr	r3, [r1, #4]
 8016ea8:	1b54      	subs	r4, r2, r5
 8016eaa:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8016eac:	f000 8106 	beq.w	80170bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8016eb0:	1b9b      	subs	r3, r3, r6
 8016eb2:	d003      	beq.n	8016ebc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016eb4:	4363      	muls	r3, r4
 8016eb6:	2210      	movs	r2, #16
 8016eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8016ebc:	680c      	ldr	r4, [r1, #0]
 8016ebe:	698a      	ldr	r2, [r1, #24]
 8016ec0:	1b65      	subs	r5, r4, r5
 8016ec2:	f000 80fd 	beq.w	80170c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8016ec6:	1b92      	subs	r2, r2, r6
 8016ec8:	d003      	beq.n	8016ed2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016eca:	436a      	muls	r2, r5
 8016ecc:	2410      	movs	r4, #16
 8016ece:	fb92 f2f4 	sdiv	r2, r2, r4
 8016ed2:	1a9b      	subs	r3, r3, r2
 8016ed4:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 80170fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8016ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016edc:	460a      	mov	r2, r1
 8016ede:	ee07 3a90 	vmov	s15, r3
 8016ee2:	f100 040c 	add.w	r4, r0, #12
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eec:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016ef0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8016ef4:	eeb1 6a43 	vneg.f32	s12, s6
 8016ef8:	edd2 7a02 	vldr	s15, [r2, #8]
 8016efc:	3214      	adds	r2, #20
 8016efe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016f02:	ece3 6a01 	vstmia	r3!, {s13}
 8016f06:	429c      	cmp	r4, r3
 8016f08:	ed52 7a02 	vldr	s15, [r2, #-8]
 8016f0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f10:	edc3 7a02 	vstr	s15, [r3, #8]
 8016f14:	ed52 7a01 	vldr	s15, [r2, #-4]
 8016f18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f1c:	edc3 7a05 	vstr	s15, [r3, #20]
 8016f20:	d1ea      	bne.n	8016ef8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8016f22:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016f24:	698b      	ldr	r3, [r1, #24]
 8016f26:	edd0 4a02 	vldr	s9, [r0, #8]
 8016f2a:	1a9b      	subs	r3, r3, r2
 8016f2c:	edd0 3a00 	vldr	s7, [r0]
 8016f30:	edd0 6a01 	vldr	s13, [r0, #4]
 8016f34:	ee07 3a90 	vmov	s15, r3
 8016f38:	684b      	ldr	r3, [r1, #4]
 8016f3a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8016f3e:	ed90 5a05 	vldr	s10, [r0, #20]
 8016f42:	1a9b      	subs	r3, r3, r2
 8016f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f48:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8016f4c:	ed90 2a03 	vldr	s4, [r0, #12]
 8016f50:	ee07 3a10 	vmov	s14, r3
 8016f54:	edd0 5a04 	vldr	s11, [r0, #16]
 8016f58:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016f5c:	ed90 1a07 	vldr	s2, [r0, #28]
 8016f60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016f64:	edd0 2a06 	vldr	s5, [r0, #24]
 8016f68:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8016f6c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8016f70:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016f74:	ee32 5a45 	vsub.f32	s10, s4, s10
 8016f78:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016f7c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8016f80:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8016f84:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8016f86:	694a      	ldr	r2, [r1, #20]
 8016f88:	1b13      	subs	r3, r2, r4
 8016f8a:	ee07 3a10 	vmov	s14, r3
 8016f8e:	680b      	ldr	r3, [r1, #0]
 8016f90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016f94:	1b1b      	subs	r3, r3, r4
 8016f96:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016f9a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8016f9e:	ee07 3a10 	vmov	s14, r3
 8016fa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016fa6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016faa:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016fae:	ee64 4a86 	vmul.f32	s9, s9, s12
 8016fb2:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8016fb6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016fb8:	698b      	ldr	r3, [r1, #24]
 8016fba:	1a9b      	subs	r3, r3, r2
 8016fbc:	ee06 3a90 	vmov	s13, r3
 8016fc0:	684b      	ldr	r3, [r1, #4]
 8016fc2:	1a9b      	subs	r3, r3, r2
 8016fc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016fc8:	ee07 3a10 	vmov	s14, r3
 8016fcc:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016fd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016fd4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8016fd8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016fdc:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016fe0:	ee66 6a83 	vmul.f32	s13, s13, s6
 8016fe4:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8016fe8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8016fea:	694a      	ldr	r2, [r1, #20]
 8016fec:	1b13      	subs	r3, r2, r4
 8016fee:	ee07 3a10 	vmov	s14, r3
 8016ff2:	680b      	ldr	r3, [r1, #0]
 8016ff4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ff8:	1b1b      	subs	r3, r3, r4
 8016ffa:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016ffe:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8017002:	ee07 3a10 	vmov	s14, r3
 8017006:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801700a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801700e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017012:	edd0 5a08 	vldr	s11, [r0, #32]
 8017016:	ee31 1a65 	vsub.f32	s2, s2, s11
 801701a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801701e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8017022:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8017026:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017028:	698b      	ldr	r3, [r1, #24]
 801702a:	1a9b      	subs	r3, r3, r2
 801702c:	ee07 3a10 	vmov	s14, r3
 8017030:	684b      	ldr	r3, [r1, #4]
 8017032:	1a9b      	subs	r3, r3, r2
 8017034:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017038:	ee01 3a90 	vmov	s3, r3
 801703c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017040:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017044:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8017048:	ee61 1a84 	vmul.f32	s3, s3, s8
 801704c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8017050:	ee27 7a03 	vmul.f32	s14, s14, s6
 8017054:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8017058:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801705a:	694a      	ldr	r2, [r1, #20]
 801705c:	1b13      	subs	r3, r2, r4
 801705e:	ee03 3a10 	vmov	s6, r3
 8017062:	680b      	ldr	r3, [r1, #0]
 8017064:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017068:	1b1b      	subs	r3, r3, r4
 801706a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801706e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8017072:	ee03 3a10 	vmov	s6, r3
 8017076:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801707a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801707e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8017082:	ee25 6a86 	vmul.f32	s12, s11, s12
 8017086:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801708a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801708e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8017092:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8017096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801709a:	dd13      	ble.n	80170c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801709c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80170a0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80170a4:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80170a6:	eee3 7a87 	vfma.f32	s15, s7, s14
 80170aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80170ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170b2:	dd15      	ble.n	80170e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80170b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80170b8:	6403      	str	r3, [r0, #64]	@ 0x40
 80170ba:	bd70      	pop	{r4, r5, r6, pc}
 80170bc:	4623      	mov	r3, r4
 80170be:	e6fd      	b.n	8016ebc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80170c0:	462a      	mov	r2, r5
 80170c2:	e706      	b.n	8016ed2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80170c4:	d502      	bpl.n	80170cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80170c6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80170ca:	e7e9      	b.n	80170a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80170cc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80170d0:	eea3 2a85 	vfma.f32	s4, s7, s10
 80170d4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80170d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170dc:	dade      	bge.n	801709c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80170de:	e7f2      	b.n	80170c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80170e0:	d502      	bpl.n	80170e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80170e2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80170e6:	e7e7      	b.n	80170b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80170e8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80170ec:	eee3 4a86 	vfma.f32	s9, s7, s12
 80170f0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80170f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170f8:	dadc      	bge.n	80170b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80170fa:	e7f2      	b.n	80170e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80170fc:	3d800000 	.word	0x3d800000

08017100 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017104:	2714      	movs	r7, #20
 8017106:	435f      	muls	r7, r3
 8017108:	eb02 0c07 	add.w	ip, r2, r7
 801710c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017110:	f115 0e0f 	adds.w	lr, r5, #15
 8017114:	f100 80a2 	bmi.w	801725c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8017118:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801711c:	9c08      	ldr	r4, [sp, #32]
 801711e:	2614      	movs	r6, #20
 8017120:	f8c0 e014 	str.w	lr, [r0, #20]
 8017124:	4366      	muls	r6, r4
 8017126:	eb02 0806 	add.w	r8, r2, r6
 801712a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801712e:	f115 040f 	adds.w	r4, r5, #15
 8017132:	f100 809f 	bmi.w	8017274 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8017136:	1124      	asrs	r4, r4, #4
 8017138:	eba4 040e 	sub.w	r4, r4, lr
 801713c:	6184      	str	r4, [r0, #24]
 801713e:	2c00      	cmp	r4, #0
 8017140:	f000 808a 	beq.w	8017258 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8017144:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8017148:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801714c:	5995      	ldr	r5, [r2, r6]
 801714e:	eba4 0809 	sub.w	r8, r4, r9
 8017152:	59d4      	ldr	r4, [r2, r7]
 8017154:	eba5 0a04 	sub.w	sl, r5, r4
 8017158:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801715c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8017160:	fb0e fe05 	mul.w	lr, lr, r5
 8017164:	fb0a ee19 	mls	lr, sl, r9, lr
 8017168:	fb08 e404 	mla	r4, r8, r4, lr
 801716c:	3c01      	subs	r4, #1
 801716e:	19a4      	adds	r4, r4, r6
 8017170:	f100 808c 	bmi.w	801728c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8017174:	fb94 fef6 	sdiv	lr, r4, r6
 8017178:	fb06 441e 	mls	r4, r6, lr, r4
 801717c:	f8c0 e000 	str.w	lr, [r0]
 8017180:	6104      	str	r4, [r0, #16]
 8017182:	2d00      	cmp	r5, #0
 8017184:	f2c0 8095 	blt.w	80172b2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8017188:	fb95 f4f6 	sdiv	r4, r5, r6
 801718c:	fb06 5514 	mls	r5, r6, r4, r5
 8017190:	6044      	str	r4, [r0, #4]
 8017192:	6085      	str	r5, [r0, #8]
 8017194:	60c6      	str	r6, [r0, #12]
 8017196:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801719a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801719e:	6945      	ldr	r5, [r0, #20]
 80171a0:	59d2      	ldr	r2, [r2, r7]
 80171a2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80171a6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80172d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80171aa:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80171ae:	ee07 4a10 	vmov	s14, r4
 80171b2:	6804      	ldr	r4, [r0, #0]
 80171b4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80171b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80171bc:	ee07 2a90 	vmov	s15, r2
 80171c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80171c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80171cc:	edd3 6a00 	vldr	s13, [r3]
 80171d0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80171d4:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 80171d8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80171dc:	edc0 6a07 	vstr	s13, [r0, #28]
 80171e0:	edd0 6a01 	vldr	s13, [r0, #4]
 80171e4:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80171e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80171ec:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80171f0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80171f4:	ed80 6a08 	vstr	s12, [r0, #32]
 80171f8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80171fa:	6242      	str	r2, [r0, #36]	@ 0x24
 80171fc:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8017200:	ed93 6a03 	vldr	s12, [r3, #12]
 8017204:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017208:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801720c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8017210:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8017214:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8017218:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801721c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017220:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8017224:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017226:	6302      	str	r2, [r0, #48]	@ 0x30
 8017228:	ed93 6a06 	vldr	s12, [r3, #24]
 801722c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8017230:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017234:	eeb0 7a46 	vmov.f32	s14, s12
 8017238:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801723c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017240:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8017244:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8017248:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801724c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017250:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8017254:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8017256:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8017258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801725c:	2410      	movs	r4, #16
 801725e:	f1c5 0501 	rsb	r5, r5, #1
 8017262:	fb9e fef4 	sdiv	lr, lr, r4
 8017266:	f015 050f 	ands.w	r5, r5, #15
 801726a:	bf18      	it	ne
 801726c:	2501      	movne	r5, #1
 801726e:	ebae 0e05 	sub.w	lr, lr, r5
 8017272:	e753      	b.n	801711c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8017274:	f04f 0910 	mov.w	r9, #16
 8017278:	f1c5 0501 	rsb	r5, r5, #1
 801727c:	fb94 f4f9 	sdiv	r4, r4, r9
 8017280:	f015 050f 	ands.w	r5, r5, #15
 8017284:	bf18      	it	ne
 8017286:	2501      	movne	r5, #1
 8017288:	1b64      	subs	r4, r4, r5
 801728a:	e755      	b.n	8017138 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801728c:	4264      	negs	r4, r4
 801728e:	fb94 fef6 	sdiv	lr, r4, r6
 8017292:	f1ce 0800 	rsb	r8, lr, #0
 8017296:	fb06 441e 	mls	r4, r6, lr, r4
 801729a:	f8c0 8000 	str.w	r8, [r0]
 801729e:	6104      	str	r4, [r0, #16]
 80172a0:	2c00      	cmp	r4, #0
 80172a2:	f43f af6e 	beq.w	8017182 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80172a6:	ea6f 0e0e 	mvn.w	lr, lr
 80172aa:	1b34      	subs	r4, r6, r4
 80172ac:	f8c0 e000 	str.w	lr, [r0]
 80172b0:	e766      	b.n	8017180 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80172b2:	426d      	negs	r5, r5
 80172b4:	fb95 f4f6 	sdiv	r4, r5, r6
 80172b8:	f1c4 0e00 	rsb	lr, r4, #0
 80172bc:	fb06 5514 	mls	r5, r6, r4, r5
 80172c0:	f8c0 e004 	str.w	lr, [r0, #4]
 80172c4:	6085      	str	r5, [r0, #8]
 80172c6:	2d00      	cmp	r5, #0
 80172c8:	f43f af64 	beq.w	8017194 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80172cc:	43e4      	mvns	r4, r4
 80172ce:	1b75      	subs	r5, r6, r5
 80172d0:	6044      	str	r4, [r0, #4]
 80172d2:	e75e      	b.n	8017192 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80172d4:	3d800000 	.word	0x3d800000

080172d8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 80172d8:	4602      	mov	r2, r0
 80172da:	b148      	cbz	r0, 80172f0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80172dc:	2300      	movs	r3, #0
 80172de:	b298      	uxth	r0, r3
 80172e0:	3301      	adds	r3, #1
 80172e2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80172e6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80172ea:	2900      	cmp	r1, #0
 80172ec:	d1f7      	bne.n	80172de <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80172ee:	4770      	bx	lr
 80172f0:	4770      	bx	lr

080172f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80172f2:	b530      	push	{r4, r5, lr}
 80172f4:	4604      	mov	r4, r0
 80172f6:	b159      	cbz	r1, 8017310 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80172f8:	b148      	cbz	r0, 801730e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80172fa:	2300      	movs	r3, #0
 80172fc:	b298      	uxth	r0, r3
 80172fe:	4282      	cmp	r2, r0
 8017300:	d905      	bls.n	801730e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8017302:	5ccd      	ldrb	r5, [r1, r3]
 8017304:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8017308:	3301      	adds	r3, #1
 801730a:	2d00      	cmp	r5, #0
 801730c:	d1f6      	bne.n	80172fc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801730e:	bd30      	pop	{r4, r5, pc}
 8017310:	4608      	mov	r0, r1
 8017312:	e7fc      	b.n	801730e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08017314 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8017314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017316:	b08b      	sub	sp, #44	@ 0x2c
 8017318:	468c      	mov	ip, r1
 801731a:	4604      	mov	r4, r0
 801731c:	2100      	movs	r1, #0
 801731e:	261f      	movs	r6, #31
 8017320:	af01      	add	r7, sp, #4
 8017322:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8017326:	1e71      	subs	r1, r6, #1
 8017328:	fb94 fef3 	sdiv	lr, r4, r3
 801732c:	fb03 441e 	mls	r4, r3, lr, r4
 8017330:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8017334:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8017338:	b2ec      	uxtb	r4, r5
 801733a:	2d09      	cmp	r5, #9
 801733c:	bfd4      	ite	le
 801733e:	3430      	addle	r4, #48	@ 0x30
 8017340:	3457      	addgt	r4, #87	@ 0x57
 8017342:	b2e4      	uxtb	r4, r4
 8017344:	55bc      	strb	r4, [r7, r6]
 8017346:	4674      	mov	r4, lr
 8017348:	b974      	cbnz	r4, 8017368 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801734a:	2800      	cmp	r0, #0
 801734c:	da05      	bge.n	801735a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801734e:	ab0a      	add	r3, sp, #40	@ 0x28
 8017350:	4419      	add	r1, r3
 8017352:	232d      	movs	r3, #45	@ 0x2d
 8017354:	f801 3c24 	strb.w	r3, [r1, #-36]
 8017358:	1eb1      	subs	r1, r6, #2
 801735a:	3101      	adds	r1, #1
 801735c:	4660      	mov	r0, ip
 801735e:	4439      	add	r1, r7
 8017360:	f7ff ffc7 	bl	80172f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017364:	b00b      	add	sp, #44	@ 0x2c
 8017366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017368:	460e      	mov	r6, r1
 801736a:	e7dc      	b.n	8017326 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801736c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801736c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801736e:	468c      	mov	ip, r1
 8017370:	b08b      	sub	sp, #44	@ 0x2c
 8017372:	2100      	movs	r1, #0
 8017374:	ae01      	add	r6, sp, #4
 8017376:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801737a:	211f      	movs	r1, #31
 801737c:	fbb0 f7f3 	udiv	r7, r0, r3
 8017380:	fb03 0517 	mls	r5, r3, r7, r0
 8017384:	4638      	mov	r0, r7
 8017386:	b2ec      	uxtb	r4, r5
 8017388:	2d09      	cmp	r5, #9
 801738a:	bfd4      	ite	le
 801738c:	3430      	addle	r4, #48	@ 0x30
 801738e:	3457      	addgt	r4, #87	@ 0x57
 8017390:	b2e4      	uxtb	r4, r4
 8017392:	558c      	strb	r4, [r1, r6]
 8017394:	1e4c      	subs	r4, r1, #1
 8017396:	b92f      	cbnz	r7, 80173a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8017398:	4431      	add	r1, r6
 801739a:	4660      	mov	r0, ip
 801739c:	f7ff ffa9 	bl	80172f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80173a0:	b00b      	add	sp, #44	@ 0x2c
 80173a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173a4:	4621      	mov	r1, r4
 80173a6:	e7e9      	b.n	801737c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

080173a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 80173a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ac:	b085      	sub	sp, #20
 80173ae:	4691      	mov	r9, r2
 80173b0:	6802      	ldr	r2, [r0, #0]
 80173b2:	4688      	mov	r8, r1
 80173b4:	461c      	mov	r4, r3
 80173b6:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 80173ba:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 80173be:	4683      	mov	fp, r0
 80173c0:	4610      	mov	r0, r2
 80173c2:	9103      	str	r1, [sp, #12]
 80173c4:	9302      	str	r3, [sp, #8]
 80173c6:	9201      	str	r2, [sp, #4]
 80173c8:	f7ff ff86 	bl	80172d8 <_ZN8touchgfx7Unicode6strlenEPKt>
 80173cc:	f1b8 0f00 	cmp.w	r8, #0
 80173d0:	bf0c      	ite	eq
 80173d2:	4684      	moveq	ip, r0
 80173d4:	f100 0c01 	addne.w	ip, r0, #1
 80173d8:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 80173dc:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 80173e0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80173e2:	fa1f fc8c 	uxth.w	ip, ip
 80173e6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80173e8:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 80173ec:	9903      	ldr	r1, [sp, #12]
 80173ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80173f2:	d041      	beq.n	8017478 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80173f4:	d834      	bhi.n	8017460 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 80173f6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80173fa:	d059      	beq.n	80174b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 80173fc:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8017400:	d03a      	beq.n	8017478 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8017402:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 8017406:	d034      	beq.n	8017472 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8017408:	2400      	movs	r4, #0
 801740a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801740e:	3a01      	subs	r2, #1
 8017410:	b169      	cbz	r1, 801742e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017412:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017414:	458c      	cmp	ip, r1
 8017416:	da09      	bge.n	801742c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8017418:	eba1 010c 	sub.w	r1, r1, ip
 801741c:	b289      	uxth	r1, r1
 801741e:	b933      	cbnz	r3, 801742e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017420:	2e00      	cmp	r6, #0
 8017422:	d051      	beq.n	80174c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8017424:	2800      	cmp	r0, #0
 8017426:	d04f      	beq.n	80174c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8017428:	440c      	add	r4, r1
 801742a:	b2a4      	uxth	r4, r4
 801742c:	2100      	movs	r1, #0
 801742e:	682b      	ldr	r3, [r5, #0]
 8017430:	4293      	cmp	r3, r2
 8017432:	da07      	bge.n	8017444 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8017434:	f1b8 0f00 	cmp.w	r8, #0
 8017438:	d004      	beq.n	8017444 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801743a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801743e:	682b      	ldr	r3, [r5, #0]
 8017440:	3301      	adds	r3, #1
 8017442:	602b      	str	r3, [r5, #0]
 8017444:	2730      	movs	r7, #48	@ 0x30
 8017446:	2c00      	cmp	r4, #0
 8017448:	d04e      	beq.n	80174e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801744a:	682e      	ldr	r6, [r5, #0]
 801744c:	3c01      	subs	r4, #1
 801744e:	42b2      	cmp	r2, r6
 8017450:	b2a4      	uxth	r4, r4
 8017452:	dd49      	ble.n	80174e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8017454:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8017458:	682b      	ldr	r3, [r5, #0]
 801745a:	3301      	adds	r3, #1
 801745c:	602b      	str	r3, [r5, #0]
 801745e:	e7f2      	b.n	8017446 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8017460:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8017464:	d01d      	beq.n	80174a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8017466:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801746a:	d002      	beq.n	8017472 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801746c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 8017470:	e7c9      	b.n	8017406 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8017472:	4684      	mov	ip, r0
 8017474:	f04f 0800 	mov.w	r8, #0
 8017478:	2c00      	cmp	r4, #0
 801747a:	d0c6      	beq.n	801740a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801747c:	b947      	cbnz	r7, 8017490 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801747e:	2801      	cmp	r0, #1
 8017480:	d106      	bne.n	8017490 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8017482:	8814      	ldrh	r4, [r2, #0]
 8017484:	2c30      	cmp	r4, #48	@ 0x30
 8017486:	bf02      	ittt	eq
 8017488:	3202      	addeq	r2, #2
 801748a:	4638      	moveq	r0, r7
 801748c:	f8cb 2000 	streq.w	r2, [fp]
 8017490:	45bc      	cmp	ip, r7
 8017492:	da14      	bge.n	80174be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8017494:	b2bf      	uxth	r7, r7
 8017496:	eba7 040c 	sub.w	r4, r7, ip
 801749a:	46bc      	mov	ip, r7
 801749c:	b2a4      	uxth	r4, r4
 801749e:	2600      	movs	r6, #0
 80174a0:	e7b3      	b.n	801740a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80174a2:	4684      	mov	ip, r0
 80174a4:	b16c      	cbz	r4, 80174c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80174a6:	42b8      	cmp	r0, r7
 80174a8:	dd00      	ble.n	80174ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80174aa:	b2b8      	uxth	r0, r7
 80174ac:	2400      	movs	r4, #0
 80174ae:	e003      	b.n	80174b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80174b0:	f04f 0c01 	mov.w	ip, #1
 80174b4:	2400      	movs	r4, #0
 80174b6:	4660      	mov	r0, ip
 80174b8:	4626      	mov	r6, r4
 80174ba:	46a0      	mov	r8, r4
 80174bc:	e7a5      	b.n	801740a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80174be:	2400      	movs	r4, #0
 80174c0:	e7ed      	b.n	801749e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 80174c2:	4626      	mov	r6, r4
 80174c4:	46a0      	mov	r8, r4
 80174c6:	e7a0      	b.n	801740a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80174c8:	2900      	cmp	r1, #0
 80174ca:	d0b0      	beq.n	801742e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80174cc:	2720      	movs	r7, #32
 80174ce:	682e      	ldr	r6, [r5, #0]
 80174d0:	2900      	cmp	r1, #0
 80174d2:	d0ac      	beq.n	801742e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80174d4:	3901      	subs	r1, #1
 80174d6:	4296      	cmp	r6, r2
 80174d8:	b289      	uxth	r1, r1
 80174da:	daa7      	bge.n	801742c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80174dc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80174e0:	682b      	ldr	r3, [r5, #0]
 80174e2:	3301      	adds	r3, #1
 80174e4:	602b      	str	r3, [r5, #0]
 80174e6:	e7f2      	b.n	80174ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 80174e8:	b188      	cbz	r0, 801750e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80174ea:	682b      	ldr	r3, [r5, #0]
 80174ec:	3801      	subs	r0, #1
 80174ee:	429a      	cmp	r2, r3
 80174f0:	b280      	uxth	r0, r0
 80174f2:	dd0c      	ble.n	801750e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80174f4:	f8db 3000 	ldr.w	r3, [fp]
 80174f8:	1c9c      	adds	r4, r3, #2
 80174fa:	f8cb 4000 	str.w	r4, [fp]
 80174fe:	881c      	ldrh	r4, [r3, #0]
 8017500:	682b      	ldr	r3, [r5, #0]
 8017502:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8017506:	682b      	ldr	r3, [r5, #0]
 8017508:	3301      	adds	r3, #1
 801750a:	602b      	str	r3, [r5, #0]
 801750c:	e7ec      	b.n	80174e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801750e:	2620      	movs	r6, #32
 8017510:	b151      	cbz	r1, 8017528 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8017512:	6828      	ldr	r0, [r5, #0]
 8017514:	3901      	subs	r1, #1
 8017516:	4282      	cmp	r2, r0
 8017518:	b289      	uxth	r1, r1
 801751a:	dd05      	ble.n	8017528 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801751c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8017520:	682b      	ldr	r3, [r5, #0]
 8017522:	3301      	adds	r3, #1
 8017524:	602b      	str	r3, [r5, #0]
 8017526:	e7f3      	b.n	8017510 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8017528:	b005      	add	sp, #20
 801752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801752e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801752e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017532:	2400      	movs	r4, #0
 8017534:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8017538:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801753c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8017540:	8014      	strh	r4, [r2, #0]
 8017542:	701c      	strb	r4, [r3, #0]
 8017544:	f888 4000 	strb.w	r4, [r8]
 8017548:	f88c 4000 	strb.w	r4, [ip]
 801754c:	f88e 4000 	strb.w	r4, [lr]
 8017550:	703c      	strb	r4, [r7, #0]
 8017552:	6804      	ldr	r4, [r0, #0]
 8017554:	b1a4      	cbz	r4, 8017580 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8017556:	8824      	ldrh	r4, [r4, #0]
 8017558:	f04f 0901 	mov.w	r9, #1
 801755c:	b314      	cbz	r4, 80175a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801755e:	2c2b      	cmp	r4, #43	@ 0x2b
 8017560:	d001      	beq.n	8017566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8017562:	2c20      	cmp	r4, #32
 8017564:	d110      	bne.n	8017588 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8017566:	8014      	strh	r4, [r2, #0]
 8017568:	6804      	ldr	r4, [r0, #0]
 801756a:	b10c      	cbz	r4, 8017570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801756c:	3402      	adds	r4, #2
 801756e:	6004      	str	r4, [r0, #0]
 8017570:	680c      	ldr	r4, [r1, #0]
 8017572:	b10c      	cbz	r4, 8017578 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8017574:	3401      	adds	r4, #1
 8017576:	600c      	str	r4, [r1, #0]
 8017578:	6804      	ldr	r4, [r0, #0]
 801757a:	b17c      	cbz	r4, 801759c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801757c:	8824      	ldrh	r4, [r4, #0]
 801757e:	e7ed      	b.n	801755c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017580:	680c      	ldr	r4, [r1, #0]
 8017582:	b17c      	cbz	r4, 80175a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017584:	7824      	ldrb	r4, [r4, #0]
 8017586:	e7e7      	b.n	8017558 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8017588:	2c2d      	cmp	r4, #45	@ 0x2d
 801758a:	d102      	bne.n	8017592 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801758c:	f883 9000 	strb.w	r9, [r3]
 8017590:	e7ea      	b.n	8017568 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017592:	2c23      	cmp	r4, #35	@ 0x23
 8017594:	d107      	bne.n	80175a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8017596:	f888 9000 	strb.w	r9, [r8]
 801759a:	e7e5      	b.n	8017568 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801759c:	680c      	ldr	r4, [r1, #0]
 801759e:	b10c      	cbz	r4, 80175a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80175a0:	7824      	ldrb	r4, [r4, #0]
 80175a2:	e7db      	b.n	801755c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80175a4:	2400      	movs	r4, #0
 80175a6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80175aa:	2b09      	cmp	r3, #9
 80175ac:	d901      	bls.n	80175b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80175ae:	2c2a      	cmp	r4, #42	@ 0x2a
 80175b0:	d122      	bne.n	80175f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80175b2:	2301      	movs	r3, #1
 80175b4:	2c30      	cmp	r4, #48	@ 0x30
 80175b6:	f88e 3000 	strb.w	r3, [lr]
 80175ba:	d10d      	bne.n	80175d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80175bc:	f88c 3000 	strb.w	r3, [ip]
 80175c0:	6803      	ldr	r3, [r0, #0]
 80175c2:	b10b      	cbz	r3, 80175c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80175c4:	3302      	adds	r3, #2
 80175c6:	6003      	str	r3, [r0, #0]
 80175c8:	680b      	ldr	r3, [r1, #0]
 80175ca:	b10b      	cbz	r3, 80175d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 80175cc:	3301      	adds	r3, #1
 80175ce:	600b      	str	r3, [r1, #0]
 80175d0:	6803      	ldr	r3, [r0, #0]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d02f      	beq.n	8017636 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80175d6:	881c      	ldrh	r4, [r3, #0]
 80175d8:	2c2a      	cmp	r4, #42	@ 0x2a
 80175da:	d135      	bne.n	8017648 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80175dc:	f04f 33ff 	mov.w	r3, #4294967295
 80175e0:	6033      	str	r3, [r6, #0]
 80175e2:	6803      	ldr	r3, [r0, #0]
 80175e4:	b10b      	cbz	r3, 80175ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80175e6:	3302      	adds	r3, #2
 80175e8:	6003      	str	r3, [r0, #0]
 80175ea:	680b      	ldr	r3, [r1, #0]
 80175ec:	b10b      	cbz	r3, 80175f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80175ee:	3301      	adds	r3, #1
 80175f0:	600b      	str	r3, [r1, #0]
 80175f2:	6803      	ldr	r3, [r0, #0]
 80175f4:	b31b      	cbz	r3, 801763e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80175f6:	881c      	ldrh	r4, [r3, #0]
 80175f8:	2c2e      	cmp	r4, #46	@ 0x2e
 80175fa:	d11a      	bne.n	8017632 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80175fc:	2301      	movs	r3, #1
 80175fe:	703b      	strb	r3, [r7, #0]
 8017600:	6803      	ldr	r3, [r0, #0]
 8017602:	b10b      	cbz	r3, 8017608 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8017604:	3302      	adds	r3, #2
 8017606:	6003      	str	r3, [r0, #0]
 8017608:	680b      	ldr	r3, [r1, #0]
 801760a:	b10b      	cbz	r3, 8017610 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801760c:	3301      	adds	r3, #1
 801760e:	600b      	str	r3, [r1, #0]
 8017610:	6803      	ldr	r3, [r0, #0]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d036      	beq.n	8017684 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8017616:	881b      	ldrh	r3, [r3, #0]
 8017618:	2b2a      	cmp	r3, #42	@ 0x2a
 801761a:	d137      	bne.n	801768c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801761c:	f04f 33ff 	mov.w	r3, #4294967295
 8017620:	602b      	str	r3, [r5, #0]
 8017622:	6803      	ldr	r3, [r0, #0]
 8017624:	b10b      	cbz	r3, 801762a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8017626:	3302      	adds	r3, #2
 8017628:	6003      	str	r3, [r0, #0]
 801762a:	680b      	ldr	r3, [r1, #0]
 801762c:	b10b      	cbz	r3, 8017632 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801762e:	3301      	adds	r3, #1
 8017630:	600b      	str	r3, [r1, #0]
 8017632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017636:	680c      	ldr	r4, [r1, #0]
 8017638:	b134      	cbz	r4, 8017648 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801763a:	7824      	ldrb	r4, [r4, #0]
 801763c:	e7cc      	b.n	80175d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801763e:	680b      	ldr	r3, [r1, #0]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d0f6      	beq.n	8017632 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8017644:	781c      	ldrb	r4, [r3, #0]
 8017646:	e7d7      	b.n	80175f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017648:	2300      	movs	r3, #0
 801764a:	220a      	movs	r2, #10
 801764c:	6033      	str	r3, [r6, #0]
 801764e:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017652:	fa1f f38c 	uxth.w	r3, ip
 8017656:	2b09      	cmp	r3, #9
 8017658:	d8ce      	bhi.n	80175f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801765a:	6833      	ldr	r3, [r6, #0]
 801765c:	fb02 c303 	mla	r3, r2, r3, ip
 8017660:	6033      	str	r3, [r6, #0]
 8017662:	6803      	ldr	r3, [r0, #0]
 8017664:	b10b      	cbz	r3, 801766a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8017666:	3302      	adds	r3, #2
 8017668:	6003      	str	r3, [r0, #0]
 801766a:	680b      	ldr	r3, [r1, #0]
 801766c:	b10b      	cbz	r3, 8017672 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801766e:	3301      	adds	r3, #1
 8017670:	600b      	str	r3, [r1, #0]
 8017672:	6803      	ldr	r3, [r0, #0]
 8017674:	b10b      	cbz	r3, 801767a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8017676:	881c      	ldrh	r4, [r3, #0]
 8017678:	e7e9      	b.n	801764e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801767a:	680c      	ldr	r4, [r1, #0]
 801767c:	2c00      	cmp	r4, #0
 801767e:	d0e6      	beq.n	801764e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017680:	7824      	ldrb	r4, [r4, #0]
 8017682:	e7e4      	b.n	801764e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017684:	680b      	ldr	r3, [r1, #0]
 8017686:	b10b      	cbz	r3, 801768c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8017688:	781b      	ldrb	r3, [r3, #0]
 801768a:	e7c5      	b.n	8017618 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801768c:	2200      	movs	r2, #0
 801768e:	240a      	movs	r4, #10
 8017690:	602a      	str	r2, [r5, #0]
 8017692:	3b30      	subs	r3, #48	@ 0x30
 8017694:	682a      	ldr	r2, [r5, #0]
 8017696:	b29e      	uxth	r6, r3
 8017698:	2e09      	cmp	r6, #9
 801769a:	d813      	bhi.n	80176c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801769c:	fb04 3302 	mla	r3, r4, r2, r3
 80176a0:	602b      	str	r3, [r5, #0]
 80176a2:	6803      	ldr	r3, [r0, #0]
 80176a4:	b10b      	cbz	r3, 80176aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80176a6:	3302      	adds	r3, #2
 80176a8:	6003      	str	r3, [r0, #0]
 80176aa:	680b      	ldr	r3, [r1, #0]
 80176ac:	b10b      	cbz	r3, 80176b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80176ae:	3301      	adds	r3, #1
 80176b0:	600b      	str	r3, [r1, #0]
 80176b2:	6803      	ldr	r3, [r0, #0]
 80176b4:	b10b      	cbz	r3, 80176ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80176b6:	881b      	ldrh	r3, [r3, #0]
 80176b8:	e7eb      	b.n	8017692 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80176ba:	680b      	ldr	r3, [r1, #0]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d0e8      	beq.n	8017692 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	e7e6      	b.n	8017692 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80176c4:	2a06      	cmp	r2, #6
 80176c6:	bfa8      	it	ge
 80176c8:	2206      	movge	r2, #6
 80176ca:	602a      	str	r2, [r5, #0]
 80176cc:	e7b1      	b.n	8017632 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

080176ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 80176ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176d2:	b0a3      	sub	sp, #140	@ 0x8c
 80176d4:	2600      	movs	r6, #0
 80176d6:	4607      	mov	r7, r0
 80176d8:	4688      	mov	r8, r1
 80176da:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 80176de:	4631      	mov	r1, r6
 80176e0:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 80176e2:	4648      	mov	r0, r9
 80176e4:	960d      	str	r6, [sp, #52]	@ 0x34
 80176e6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80176ea:	2242      	movs	r2, #66	@ 0x42
 80176ec:	f00b feac 	bl	8023448 <memset>
 80176f0:	b15f      	cbz	r7, 801770a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80176f2:	f108 3aff 	add.w	sl, r8, #4294967295
 80176f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80176fa:	b152      	cbz	r2, 8017712 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80176fc:	8812      	ldrh	r2, [r2, #0]
 80176fe:	b10a      	cbz	r2, 8017704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017700:	459a      	cmp	sl, r3
 8017702:	dc2e      	bgt.n	8017762 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8017704:	2200      	movs	r2, #0
 8017706:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801770a:	4638      	mov	r0, r7
 801770c:	b023      	add	sp, #140	@ 0x8c
 801770e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017712:	9a08      	ldr	r2, [sp, #32]
 8017714:	2a00      	cmp	r2, #0
 8017716:	d0f5      	beq.n	8017704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017718:	7812      	ldrb	r2, [r2, #0]
 801771a:	e7f0      	b.n	80176fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801771c:	2d00      	cmp	r5, #0
 801771e:	d0ea      	beq.n	80176f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017720:	782a      	ldrb	r2, [r5, #0]
 8017722:	b142      	cbz	r2, 8017736 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8017724:	2a25      	cmp	r2, #37	@ 0x25
 8017726:	d001      	beq.n	801772c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8017728:	459a      	cmp	sl, r3
 801772a:	dc08      	bgt.n	801773e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801772c:	f1bb 0f00 	cmp.w	fp, #0
 8017730:	d121      	bne.n	8017776 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8017732:	2d00      	cmp	r5, #0
 8017734:	d0df      	beq.n	80176f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017736:	782a      	ldrb	r2, [r5, #0]
 8017738:	f04f 0b00 	mov.w	fp, #0
 801773c:	e01d      	b.n	801777a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801773e:	f1bb 0f00 	cmp.w	fp, #0
 8017742:	d077      	beq.n	8017834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8017744:	f8bb 2000 	ldrh.w	r2, [fp]
 8017748:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801774c:	f1bb 0f00 	cmp.w	fp, #0
 8017750:	d002      	beq.n	8017758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8017752:	f10b 0202 	add.w	r2, fp, #2
 8017756:	9209      	str	r2, [sp, #36]	@ 0x24
 8017758:	b10d      	cbz	r5, 801775e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801775a:	3501      	adds	r5, #1
 801775c:	9508      	str	r5, [sp, #32]
 801775e:	3301      	adds	r3, #1
 8017760:	930d      	str	r3, [sp, #52]	@ 0x34
 8017762:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017764:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8017768:	f1bb 0f00 	cmp.w	fp, #0
 801776c:	d0d6      	beq.n	801771c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801776e:	f8bb 2000 	ldrh.w	r2, [fp]
 8017772:	2a00      	cmp	r2, #0
 8017774:	d1d6      	bne.n	8017724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8017776:	f8bb 2000 	ldrh.w	r2, [fp]
 801777a:	2a00      	cmp	r2, #0
 801777c:	d0bb      	beq.n	80176f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801777e:	459a      	cmp	sl, r3
 8017780:	ddb9      	ble.n	80176f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017782:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8017786:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801778a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801778e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8017792:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8017796:	960e      	str	r6, [sp, #56]	@ 0x38
 8017798:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801779c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801779e:	f1bb 0f00 	cmp.w	fp, #0
 80177a2:	d002      	beq.n	80177aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80177a4:	f10b 0302 	add.w	r3, fp, #2
 80177a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80177aa:	b10d      	cbz	r5, 80177b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80177ac:	1c6b      	adds	r3, r5, #1
 80177ae:	9308      	str	r3, [sp, #32]
 80177b0:	ab0f      	add	r3, sp, #60	@ 0x3c
 80177b2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80177b6:	a908      	add	r1, sp, #32
 80177b8:	a809      	add	r0, sp, #36	@ 0x24
 80177ba:	9305      	str	r3, [sp, #20]
 80177bc:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 80177c0:	9304      	str	r3, [sp, #16]
 80177c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80177c4:	9303      	str	r3, [sp, #12]
 80177c6:	ab0c      	add	r3, sp, #48	@ 0x30
 80177c8:	9302      	str	r3, [sp, #8]
 80177ca:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80177ce:	9301      	str	r3, [sp, #4]
 80177d0:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 80177d4:	9300      	str	r3, [sp, #0]
 80177d6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 80177da:	f7ff fea8 	bl	801752e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80177de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	bfbf      	itttt	lt
 80177e4:	6823      	ldrlt	r3, [r4, #0]
 80177e6:	3404      	addlt	r4, #4
 80177e8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80177ec:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80177ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	bfbe      	ittt	lt
 80177f4:	6823      	ldrlt	r3, [r4, #0]
 80177f6:	3404      	addlt	r4, #4
 80177f8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80177fc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8017800:	bfb8      	it	lt
 8017802:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8017804:	b1d9      	cbz	r1, 801783e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8017806:	880b      	ldrh	r3, [r1, #0]
 8017808:	2b69      	cmp	r3, #105	@ 0x69
 801780a:	d01f      	beq.n	801784c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801780c:	d82f      	bhi.n	801786e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801780e:	2b58      	cmp	r3, #88	@ 0x58
 8017810:	d01c      	beq.n	801784c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017812:	d818      	bhi.n	8017846 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8017814:	2b25      	cmp	r3, #37	@ 0x25
 8017816:	d034      	beq.n	8017882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8017818:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801781a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801781e:	f1bb 0f00 	cmp.w	fp, #0
 8017822:	f000 80b7 	beq.w	8017994 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8017826:	f8bb 5000 	ldrh.w	r5, [fp]
 801782a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801782e:	3301      	adds	r3, #1
 8017830:	930d      	str	r3, [sp, #52]	@ 0x34
 8017832:	e029      	b.n	8017888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8017834:	b10d      	cbz	r5, 801783a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8017836:	782a      	ldrb	r2, [r5, #0]
 8017838:	e786      	b.n	8017748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801783a:	462a      	mov	r2, r5
 801783c:	e784      	b.n	8017748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801783e:	2a00      	cmp	r2, #0
 8017840:	d0ea      	beq.n	8017818 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017842:	7813      	ldrb	r3, [r2, #0]
 8017844:	e7e0      	b.n	8017808 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8017846:	3b63      	subs	r3, #99	@ 0x63
 8017848:	2b01      	cmp	r3, #1
 801784a:	d8e5      	bhi.n	8017818 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801784c:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8017850:	b329      	cbz	r1, 801789e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8017852:	880b      	ldrh	r3, [r1, #0]
 8017854:	2b69      	cmp	r3, #105	@ 0x69
 8017856:	d063      	beq.n	8017920 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017858:	d825      	bhi.n	80178a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801785a:	2b63      	cmp	r3, #99	@ 0x63
 801785c:	d038      	beq.n	80178d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801785e:	2b64      	cmp	r3, #100	@ 0x64
 8017860:	d05e      	beq.n	8017920 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017862:	2b58      	cmp	r3, #88	@ 0x58
 8017864:	d07a      	beq.n	801795c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8017866:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801786a:	4625      	mov	r5, r4
 801786c:	e036      	b.n	80178dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801786e:	2b73      	cmp	r3, #115	@ 0x73
 8017870:	d0ec      	beq.n	801784c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017872:	d802      	bhi.n	801787a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8017874:	2b6f      	cmp	r3, #111	@ 0x6f
 8017876:	d1cf      	bne.n	8017818 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017878:	e7e8      	b.n	801784c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801787a:	2b75      	cmp	r3, #117	@ 0x75
 801787c:	d0e6      	beq.n	801784c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801787e:	2b78      	cmp	r3, #120	@ 0x78
 8017880:	e7f9      	b.n	8017876 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8017882:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017884:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8017888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801788a:	b10b      	cbz	r3, 8017890 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801788c:	3302      	adds	r3, #2
 801788e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017890:	9b08      	ldr	r3, [sp, #32]
 8017892:	2b00      	cmp	r3, #0
 8017894:	f43f af2f 	beq.w	80176f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017898:	3301      	adds	r3, #1
 801789a:	9308      	str	r3, [sp, #32]
 801789c:	e72b      	b.n	80176f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801789e:	2a00      	cmp	r2, #0
 80178a0:	d0e1      	beq.n	8017866 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80178a2:	7813      	ldrb	r3, [r2, #0]
 80178a4:	e7d6      	b.n	8017854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 80178a6:	2b73      	cmp	r3, #115	@ 0x73
 80178a8:	d036      	beq.n	8017918 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 80178aa:	d807      	bhi.n	80178bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 80178ac:	2b6f      	cmp	r3, #111	@ 0x6f
 80178ae:	d1da      	bne.n	8017866 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80178b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80178b2:	1d25      	adds	r5, r4, #4
 80178b4:	2308      	movs	r3, #8
 80178b6:	eba8 0202 	sub.w	r2, r8, r2
 80178ba:	e049      	b.n	8017950 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80178bc:	2b75      	cmp	r3, #117	@ 0x75
 80178be:	d042      	beq.n	8017946 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80178c0:	2b78      	cmp	r3, #120	@ 0x78
 80178c2:	d1d0      	bne.n	8017866 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80178c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80178c6:	1d25      	adds	r5, r4, #4
 80178c8:	2310      	movs	r3, #16
 80178ca:	eba8 0202 	sub.w	r2, r8, r2
 80178ce:	e03f      	b.n	8017950 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80178d0:	6823      	ldr	r3, [r4, #0]
 80178d2:	1d25      	adds	r5, r4, #4
 80178d4:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 80178d8:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80178dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80178de:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d051      	beq.n	801798a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 80178e6:	881a      	ldrh	r2, [r3, #0]
 80178e8:	a80d      	add	r0, sp, #52	@ 0x34
 80178ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 80178ee:	462c      	mov	r4, r5
 80178f0:	9005      	str	r0, [sp, #20]
 80178f2:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 80178f6:	9004      	str	r0, [sp, #16]
 80178f8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80178fa:	9003      	str	r0, [sp, #12]
 80178fc:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8017900:	9002      	str	r0, [sp, #8]
 8017902:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8017904:	9001      	str	r0, [sp, #4]
 8017906:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801790a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801790e:	9000      	str	r0, [sp, #0]
 8017910:	a810      	add	r0, sp, #64	@ 0x40
 8017912:	f7ff fd49 	bl	80173a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8017916:	e7b7      	b.n	8017888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8017918:	1d25      	adds	r5, r4, #4
 801791a:	6823      	ldr	r3, [r4, #0]
 801791c:	9310      	str	r3, [sp, #64]	@ 0x40
 801791e:	e7dd      	b.n	80178dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017920:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017922:	230a      	movs	r3, #10
 8017924:	4649      	mov	r1, r9
 8017926:	6820      	ldr	r0, [r4, #0]
 8017928:	eba8 0202 	sub.w	r2, r8, r2
 801792c:	1d25      	adds	r5, r4, #4
 801792e:	b292      	uxth	r2, r2
 8017930:	f7ff fcf0 	bl	8017314 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8017934:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8017938:	2b2d      	cmp	r3, #45	@ 0x2d
 801793a:	d1cf      	bne.n	80178dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801793c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017940:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017942:	3302      	adds	r3, #2
 8017944:	e7ea      	b.n	801791c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8017946:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017948:	1d25      	adds	r5, r4, #4
 801794a:	230a      	movs	r3, #10
 801794c:	eba8 0202 	sub.w	r2, r8, r2
 8017950:	b292      	uxth	r2, r2
 8017952:	4649      	mov	r1, r9
 8017954:	6820      	ldr	r0, [r4, #0]
 8017956:	f7ff fd09 	bl	801736c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801795a:	e7bf      	b.n	80178dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801795c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801795e:	2310      	movs	r3, #16
 8017960:	4649      	mov	r1, r9
 8017962:	6820      	ldr	r0, [r4, #0]
 8017964:	eba8 0202 	sub.w	r2, r8, r2
 8017968:	1d25      	adds	r5, r4, #4
 801796a:	b292      	uxth	r2, r2
 801796c:	f7ff fcfe 	bl	801736c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8017970:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8017974:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8017978:	2b00      	cmp	r3, #0
 801797a:	d0af      	beq.n	80178dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801797c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8017980:	2919      	cmp	r1, #25
 8017982:	d8f7      	bhi.n	8017974 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8017984:	3b20      	subs	r3, #32
 8017986:	8013      	strh	r3, [r2, #0]
 8017988:	e7f4      	b.n	8017974 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801798a:	9a08      	ldr	r2, [sp, #32]
 801798c:	2a00      	cmp	r2, #0
 801798e:	d0ab      	beq.n	80178e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8017990:	7812      	ldrb	r2, [r2, #0]
 8017992:	e7a9      	b.n	80178e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8017994:	2d00      	cmp	r5, #0
 8017996:	f43f af48 	beq.w	801782a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801799a:	782d      	ldrb	r5, [r5, #0]
 801799c:	e745      	b.n	801782a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801799e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801799e:	b507      	push	{r0, r1, r2, lr}
 80179a0:	9300      	str	r3, [sp, #0]
 80179a2:	4613      	mov	r3, r2
 80179a4:	2200      	movs	r2, #0
 80179a6:	f7ff fe92 	bl	80176ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80179aa:	b003      	add	sp, #12
 80179ac:	f85d fb04 	ldr.w	pc, [sp], #4

080179b0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80179b0:	b40c      	push	{r2, r3}
 80179b2:	b507      	push	{r0, r1, r2, lr}
 80179b4:	ab04      	add	r3, sp, #16
 80179b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80179ba:	9301      	str	r3, [sp, #4]
 80179bc:	f7ff ffef 	bl	801799e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80179c0:	b003      	add	sp, #12
 80179c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80179c6:	b002      	add	sp, #8
 80179c8:	4770      	bx	lr
	...

080179cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80179cc:	4b01      	ldr	r3, [pc, #4]	@ (80179d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80179ce:	6018      	str	r0, [r3, #0]
 80179d0:	4770      	bx	lr
 80179d2:	bf00      	nop
 80179d4:	24025258 	.word	0x24025258

080179d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80179d8:	4b06      	ldr	r3, [pc, #24]	@ (80179f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80179da:	881a      	ldrh	r2, [r3, #0]
 80179dc:	4282      	cmp	r2, r0
 80179de:	d807      	bhi.n	80179f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80179e0:	4b05      	ldr	r3, [pc, #20]	@ (80179f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80179e2:	881b      	ldrh	r3, [r3, #0]
 80179e4:	4413      	add	r3, r2
 80179e6:	4298      	cmp	r0, r3
 80179e8:	bfac      	ite	ge
 80179ea:	2000      	movge	r0, #0
 80179ec:	2001      	movlt	r0, #1
 80179ee:	4770      	bx	lr
 80179f0:	2000      	movs	r0, #0
 80179f2:	4770      	bx	lr
 80179f4:	24025278 	.word	0x24025278
 80179f8:	2402527c 	.word	0x2402527c

080179fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80179fc:	b508      	push	{r3, lr}
 80179fe:	4601      	mov	r1, r0
 8017a00:	f7ff ffea 	bl	80179d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017a04:	b118      	cbz	r0, 8017a0e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8017a06:	4b02      	ldr	r3, [pc, #8]	@ (8017a10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8017a0e:	bd08      	pop	{r3, pc}
 8017a10:	2402525c 	.word	0x2402525c

08017a14 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8017a14:	b538      	push	{r3, r4, r5, lr}
 8017a16:	4604      	mov	r4, r0
 8017a18:	f7ff ffde 	bl	80179d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017a1c:	b1d8      	cbz	r0, 8017a56 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8017a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8017a5c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8017a20:	881b      	ldrh	r3, [r3, #0]
 8017a22:	1ae4      	subs	r4, r4, r3
 8017a24:	230e      	movs	r3, #14
 8017a26:	4363      	muls	r3, r4
 8017a28:	4c0d      	ldr	r4, [pc, #52]	@ (8017a60 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8017a2a:	6825      	ldr	r5, [r4, #0]
 8017a2c:	18ea      	adds	r2, r5, r3
 8017a2e:	7b12      	ldrb	r2, [r2, #12]
 8017a30:	f012 0220 	ands.w	r2, r2, #32
 8017a34:	d010      	beq.n	8017a58 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8017a36:	f9b1 2000 	ldrsh.w	r2, [r1]
 8017a3a:	52ea      	strh	r2, [r5, r3]
 8017a3c:	6822      	ldr	r2, [r4, #0]
 8017a3e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017a42:	441a      	add	r2, r3
 8017a44:	8055      	strh	r5, [r2, #2]
 8017a46:	6822      	ldr	r2, [r4, #0]
 8017a48:	4413      	add	r3, r2
 8017a4a:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8017a4e:	809a      	strh	r2, [r3, #4]
 8017a50:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8017a54:	80da      	strh	r2, [r3, #6]
 8017a56:	bd38      	pop	{r3, r4, r5, pc}
 8017a58:	4610      	mov	r0, r2
 8017a5a:	e7fc      	b.n	8017a56 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8017a5c:	24025278 	.word	0x24025278
 8017a60:	24025260 	.word	0x24025260

08017a64 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8017a64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a68:	4606      	mov	r6, r0
 8017a6a:	460c      	mov	r4, r1
 8017a6c:	f7ff ffb4 	bl	80179d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017a70:	b918      	cbnz	r0, 8017a7a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8017a72:	2000      	movs	r0, #0
 8017a74:	b002      	add	sp, #8
 8017a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a7a:	4608      	mov	r0, r1
 8017a7c:	f7f7 f8e1 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a80:	2800      	cmp	r0, #0
 8017a82:	d1f6      	bne.n	8017a72 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017a84:	4b3f      	ldr	r3, [pc, #252]	@ (8017b84 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8017a86:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8017b88 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8017a8a:	881d      	ldrh	r5, [r3, #0]
 8017a8c:	f8d9 a000 	ldr.w	sl, [r9]
 8017a90:	46c8      	mov	r8, r9
 8017a92:	1b73      	subs	r3, r6, r5
 8017a94:	250e      	movs	r5, #14
 8017a96:	435d      	muls	r5, r3
 8017a98:	eb0a 0705 	add.w	r7, sl, r5
 8017a9c:	7b3b      	ldrb	r3, [r7, #12]
 8017a9e:	f013 0f20 	tst.w	r3, #32
 8017aa2:	d0e6      	beq.n	8017a72 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017aa4:	4621      	mov	r1, r4
 8017aa6:	4638      	mov	r0, r7
 8017aa8:	f7fc fa72 	bl	8013f90 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017aac:	2800      	cmp	r0, #0
 8017aae:	d1e1      	bne.n	8017a74 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017ab0:	4639      	mov	r1, r7
 8017ab2:	4620      	mov	r0, r4
 8017ab4:	f7fc fa6c 	bl	8013f90 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017ab8:	b108      	cbz	r0, 8017abe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8017aba:	4621      	mov	r1, r4
 8017abc:	e020      	b.n	8017b00 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8017abe:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017ac2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8017ac6:	429a      	cmp	r2, r3
 8017ac8:	d11e      	bne.n	8017b08 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017aca:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017ace:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d118      	bne.n	8017b08 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017ad6:	6820      	ldr	r0, [r4, #0]
 8017ad8:	466b      	mov	r3, sp
 8017ada:	6861      	ldr	r1, [r4, #4]
 8017adc:	c303      	stmia	r3!, {r0, r1}
 8017ade:	4639      	mov	r1, r7
 8017ae0:	4668      	mov	r0, sp
 8017ae2:	f7fc fa7b 	bl	8013fdc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017ae6:	f8d9 3000 	ldr.w	r3, [r9]
 8017aea:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017aee:	442b      	add	r3, r5
 8017af0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017af4:	4413      	add	r3, r2
 8017af6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8017afa:	4293      	cmp	r3, r2
 8017afc:	dc04      	bgt.n	8017b08 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017afe:	4669      	mov	r1, sp
 8017b00:	4630      	mov	r0, r6
 8017b02:	f7ff ff87 	bl	8017a14 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8017b06:	e7b5      	b.n	8017a74 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017b08:	f8d8 3000 	ldr.w	r3, [r8]
 8017b0c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017b10:	442b      	add	r3, r5
 8017b12:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017b16:	4291      	cmp	r1, r2
 8017b18:	d119      	bne.n	8017b4e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8017b1a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017b1e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8017b22:	4291      	cmp	r1, r2
 8017b24:	d113      	bne.n	8017b4e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8017b26:	6820      	ldr	r0, [r4, #0]
 8017b28:	466a      	mov	r2, sp
 8017b2a:	6861      	ldr	r1, [r4, #4]
 8017b2c:	c203      	stmia	r2!, {r0, r1}
 8017b2e:	4619      	mov	r1, r3
 8017b30:	4668      	mov	r0, sp
 8017b32:	f7fc fa53 	bl	8013fdc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017b36:	f8d8 3000 	ldr.w	r3, [r8]
 8017b3a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017b3e:	442b      	add	r3, r5
 8017b40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017b44:	4413      	add	r3, r2
 8017b46:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017b4a:	4293      	cmp	r3, r2
 8017b4c:	ddd7      	ble.n	8017afe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8017b4e:	4620      	mov	r0, r4
 8017b50:	f7f7 f877 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b54:	b990      	cbnz	r0, 8017b7c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8017b56:	88a7      	ldrh	r7, [r4, #4]
 8017b58:	88e3      	ldrh	r3, [r4, #6]
 8017b5a:	fb17 f703 	smulbb	r7, r7, r3
 8017b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8017b62:	441d      	add	r5, r3
 8017b64:	4628      	mov	r0, r5
 8017b66:	f7f7 f86c 	bl	800ec42 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b6a:	b948      	cbnz	r0, 8017b80 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8017b6c:	88ab      	ldrh	r3, [r5, #4]
 8017b6e:	88ea      	ldrh	r2, [r5, #6]
 8017b70:	fb13 f302 	smulbb	r3, r3, r2
 8017b74:	42bb      	cmp	r3, r7
 8017b76:	f6bf af7c 	bge.w	8017a72 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017b7a:	e79e      	b.n	8017aba <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8017b7c:	2700      	movs	r7, #0
 8017b7e:	e7ee      	b.n	8017b5e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8017b80:	2300      	movs	r3, #0
 8017b82:	e7f7      	b.n	8017b74 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8017b84:	24025278 	.word	0x24025278
 8017b88:	24025260 	.word	0x24025260

08017b8c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8017b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b8e:	4c24      	ldr	r4, [pc, #144]	@ (8017c20 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8017b90:	6823      	ldr	r3, [r4, #0]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d042      	beq.n	8017c1c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017b96:	4a23      	ldr	r2, [pc, #140]	@ (8017c24 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8017b98:	4d23      	ldr	r5, [pc, #140]	@ (8017c28 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8017b9a:	8811      	ldrh	r1, [r2, #0]
 8017b9c:	f8b5 c000 	ldrh.w	ip, [r5]
 8017ba0:	4822      	ldr	r0, [pc, #136]	@ (8017c2c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8017ba2:	4461      	add	r1, ip
 8017ba4:	1c4a      	adds	r2, r1, #1
 8017ba6:	008f      	lsls	r7, r1, #2
 8017ba8:	f022 0201 	bic.w	r2, r2, #1
 8017bac:	19de      	adds	r6, r3, r7
 8017bae:	0412      	lsls	r2, r2, #16
 8017bb0:	6006      	str	r6, [r0, #0]
 8017bb2:	4e1f      	ldr	r6, [pc, #124]	@ (8017c30 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8017bb4:	0c12      	lsrs	r2, r2, #16
 8017bb6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8017bba:	19da      	adds	r2, r3, r7
 8017bbc:	6032      	str	r2, [r6, #0]
 8017bbe:	220e      	movs	r2, #14
 8017bc0:	fb02 f20c 	mul.w	r2, r2, ip
 8017bc4:	3203      	adds	r2, #3
 8017bc6:	f022 0203 	bic.w	r2, r2, #3
 8017bca:	443a      	add	r2, r7
 8017bcc:	4f19      	ldr	r7, [pc, #100]	@ (8017c34 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017bce:	4413      	add	r3, r2
 8017bd0:	603b      	str	r3, [r7, #0]
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	4f18      	ldr	r7, [pc, #96]	@ (8017c38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8017bd6:	469c      	mov	ip, r3
 8017bd8:	803b      	strh	r3, [r7, #0]
 8017bda:	4f18      	ldr	r7, [pc, #96]	@ (8017c3c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017bdc:	683f      	ldr	r7, [r7, #0]
 8017bde:	1aba      	subs	r2, r7, r2
 8017be0:	4f17      	ldr	r7, [pc, #92]	@ (8017c40 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8017be2:	603a      	str	r2, [r7, #0]
 8017be4:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8017be8:	4a16      	ldr	r2, [pc, #88]	@ (8017c44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8017bea:	8013      	strh	r3, [r2, #0]
 8017bec:	428b      	cmp	r3, r1
 8017bee:	d10d      	bne.n	8017c0c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8017bf0:	882d      	ldrh	r5, [r5, #0]
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	6830      	ldr	r0, [r6, #0]
 8017bf6:	240e      	movs	r4, #14
 8017bf8:	429d      	cmp	r5, r3
 8017bfa:	d90f      	bls.n	8017c1c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017bfc:	fb04 0203 	mla	r2, r4, r3, r0
 8017c00:	3301      	adds	r3, #1
 8017c02:	7b11      	ldrb	r1, [r2, #12]
 8017c04:	f36f 1145 	bfc	r1, #5, #1
 8017c08:	7311      	strb	r1, [r2, #12]
 8017c0a:	e7f5      	b.n	8017bf8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8017c0c:	6822      	ldr	r2, [r4, #0]
 8017c0e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8017c12:	6802      	ldr	r2, [r0, #0]
 8017c14:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8017c18:	3301      	adds	r3, #1
 8017c1a:	e7e7      	b.n	8017bec <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8017c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c1e:	bf00      	nop
 8017c20:	2402525c 	.word	0x2402525c
 8017c24:	24025278 	.word	0x24025278
 8017c28:	2402527c 	.word	0x2402527c
 8017c2c:	24025270 	.word	0x24025270
 8017c30:	24025260 	.word	0x24025260
 8017c34:	24025268 	.word	0x24025268
 8017c38:	2402527a 	.word	0x2402527a
 8017c3c:	24025264 	.word	0x24025264
 8017c40:	24025274 	.word	0x24025274
 8017c44:	2402526c 	.word	0x2402526c

08017c48 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017c48:	4b06      	ldr	r3, [pc, #24]	@ (8017c64 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	b943      	cbnz	r3, 8017c60 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017c4e:	b139      	cbz	r1, 8017c60 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017c50:	4b05      	ldr	r3, [pc, #20]	@ (8017c68 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8017c52:	801a      	strh	r2, [r3, #0]
 8017c54:	4b05      	ldr	r3, [pc, #20]	@ (8017c6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8017c56:	6019      	str	r1, [r3, #0]
 8017c58:	4b05      	ldr	r3, [pc, #20]	@ (8017c70 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8017c5a:	6018      	str	r0, [r3, #0]
 8017c5c:	f7ff bf96 	b.w	8017b8c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017c60:	4770      	bx	lr
 8017c62:	bf00      	nop
 8017c64:	24025268 	.word	0x24025268
 8017c68:	2402527c 	.word	0x2402527c
 8017c6c:	24025264 	.word	0x24025264
 8017c70:	2402525c 	.word	0x2402525c

08017c74 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8017c74:	b470      	push	{r4, r5, r6}
 8017c76:	4c07      	ldr	r4, [pc, #28]	@ (8017c94 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8017c78:	4605      	mov	r5, r0
 8017c7a:	4610      	mov	r0, r2
 8017c7c:	9a03      	ldr	r2, [sp, #12]
 8017c7e:	6826      	ldr	r6, [r4, #0]
 8017c80:	b936      	cbnz	r6, 8017c90 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8017c82:	6025      	str	r5, [r4, #0]
 8017c84:	4c04      	ldr	r4, [pc, #16]	@ (8017c98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8017c86:	8021      	strh	r1, [r4, #0]
 8017c88:	4619      	mov	r1, r3
 8017c8a:	bc70      	pop	{r4, r5, r6}
 8017c8c:	f7ff bfdc 	b.w	8017c48 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8017c90:	bc70      	pop	{r4, r5, r6}
 8017c92:	4770      	bx	lr
 8017c94:	24025280 	.word	0x24025280
 8017c98:	24025278 	.word	0x24025278

08017c9c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8017c9c:	4a12      	ldr	r2, [pc, #72]	@ (8017ce8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8017c9e:	8803      	ldrh	r3, [r0, #0]
 8017ca0:	8812      	ldrh	r2, [r2, #0]
 8017ca2:	4293      	cmp	r3, r2
 8017ca4:	d207      	bcs.n	8017cb6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8017ca6:	4a11      	ldr	r2, [pc, #68]	@ (8017cec <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8017ca8:	2114      	movs	r1, #20
 8017caa:	6812      	ldr	r2, [r2, #0]
 8017cac:	fb01 2303 	mla	r3, r1, r3, r2
 8017cb0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8017cb4:	4770      	bx	lr
 8017cb6:	490e      	ldr	r1, [pc, #56]	@ (8017cf0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8017cb8:	8809      	ldrh	r1, [r1, #0]
 8017cba:	4411      	add	r1, r2
 8017cbc:	428b      	cmp	r3, r1
 8017cbe:	da04      	bge.n	8017cca <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8017cc0:	1a9b      	subs	r3, r3, r2
 8017cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8017cf4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8017cc4:	210e      	movs	r1, #14
 8017cc6:	6812      	ldr	r2, [r2, #0]
 8017cc8:	e7f0      	b.n	8017cac <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8017cca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017cce:	4293      	cmp	r3, r2
 8017cd0:	d108      	bne.n	8017ce4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8017cd2:	4b09      	ldr	r3, [pc, #36]	@ (8017cf8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	b91b      	cbnz	r3, 8017ce0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8017cd8:	4b08      	ldr	r3, [pc, #32]	@ (8017cfc <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8017cda:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017cde:	4770      	bx	lr
 8017ce0:	4b07      	ldr	r3, [pc, #28]	@ (8017d00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8017ce2:	e7fa      	b.n	8017cda <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8017ce4:	2000      	movs	r0, #0
 8017ce6:	4770      	bx	lr
 8017ce8:	24025278 	.word	0x24025278
 8017cec:	24025280 	.word	0x24025280
 8017cf0:	2402527c 	.word	0x2402527c
 8017cf4:	24025260 	.word	0x24025260
 8017cf8:	240251e8 	.word	0x240251e8
 8017cfc:	240251ea 	.word	0x240251ea
 8017d00:	240251ec 	.word	0x240251ec

08017d04 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017d04:	4a12      	ldr	r2, [pc, #72]	@ (8017d50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8017d06:	8803      	ldrh	r3, [r0, #0]
 8017d08:	8812      	ldrh	r2, [r2, #0]
 8017d0a:	4293      	cmp	r3, r2
 8017d0c:	d207      	bcs.n	8017d1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8017d0e:	4a11      	ldr	r2, [pc, #68]	@ (8017d54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017d10:	2114      	movs	r1, #20
 8017d12:	6812      	ldr	r2, [r2, #0]
 8017d14:	fb01 2303 	mla	r3, r1, r3, r2
 8017d18:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8017d1c:	4770      	bx	lr
 8017d1e:	490e      	ldr	r1, [pc, #56]	@ (8017d58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017d20:	8809      	ldrh	r1, [r1, #0]
 8017d22:	4411      	add	r1, r2
 8017d24:	428b      	cmp	r3, r1
 8017d26:	da04      	bge.n	8017d32 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8017d28:	1a9b      	subs	r3, r3, r2
 8017d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8017d5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017d2c:	210e      	movs	r1, #14
 8017d2e:	6812      	ldr	r2, [r2, #0]
 8017d30:	e7f0      	b.n	8017d14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8017d32:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017d36:	4293      	cmp	r3, r2
 8017d38:	d108      	bne.n	8017d4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8017d3a:	4b09      	ldr	r3, [pc, #36]	@ (8017d60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017d3c:	781b      	ldrb	r3, [r3, #0]
 8017d3e:	b91b      	cbnz	r3, 8017d48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017d40:	4b08      	ldr	r3, [pc, #32]	@ (8017d64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8017d42:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017d46:	4770      	bx	lr
 8017d48:	4b07      	ldr	r3, [pc, #28]	@ (8017d68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017d4a:	e7fa      	b.n	8017d42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017d4c:	2000      	movs	r0, #0
 8017d4e:	4770      	bx	lr
 8017d50:	24025278 	.word	0x24025278
 8017d54:	24025280 	.word	0x24025280
 8017d58:	2402527c 	.word	0x2402527c
 8017d5c:	24025260 	.word	0x24025260
 8017d60:	240251e8 	.word	0x240251e8
 8017d64:	240251ec 	.word	0x240251ec
 8017d68:	240251ea 	.word	0x240251ea

08017d6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8017d6c:	4a22      	ldr	r2, [pc, #136]	@ (8017df8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8017d6e:	b530      	push	{r4, r5, lr}
 8017d70:	880b      	ldrh	r3, [r1, #0]
 8017d72:	8812      	ldrh	r2, [r2, #0]
 8017d74:	4293      	cmp	r3, r2
 8017d76:	d213      	bcs.n	8017da0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8017d78:	4a20      	ldr	r2, [pc, #128]	@ (8017dfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8017d7a:	2114      	movs	r1, #20
 8017d7c:	6812      	ldr	r2, [r2, #0]
 8017d7e:	fb01 2303 	mla	r3, r1, r3, r2
 8017d82:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8017d86:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8017d8a:	8a1a      	ldrh	r2, [r3, #16]
 8017d8c:	8a5b      	ldrh	r3, [r3, #18]
 8017d8e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017d92:	8004      	strh	r4, [r0, #0]
 8017d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d98:	8041      	strh	r1, [r0, #2]
 8017d9a:	8082      	strh	r2, [r0, #4]
 8017d9c:	80c3      	strh	r3, [r0, #6]
 8017d9e:	e024      	b.n	8017dea <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8017da0:	4917      	ldr	r1, [pc, #92]	@ (8017e00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8017da2:	8809      	ldrh	r1, [r1, #0]
 8017da4:	4411      	add	r1, r2
 8017da6:	428b      	cmp	r3, r1
 8017da8:	da10      	bge.n	8017dcc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8017daa:	1a9b      	subs	r3, r3, r2
 8017dac:	220e      	movs	r2, #14
 8017dae:	4353      	muls	r3, r2
 8017db0:	4a14      	ldr	r2, [pc, #80]	@ (8017e04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8017db2:	6811      	ldr	r1, [r2, #0]
 8017db4:	18ca      	adds	r2, r1, r3
 8017db6:	5ecd      	ldrsh	r5, [r1, r3]
 8017db8:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8017dbc:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8017dc0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8017dc4:	8005      	strh	r5, [r0, #0]
 8017dc6:	8044      	strh	r4, [r0, #2]
 8017dc8:	8081      	strh	r1, [r0, #4]
 8017dca:	e7e7      	b.n	8017d9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017dcc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017dd0:	4293      	cmp	r3, r2
 8017dd2:	d10b      	bne.n	8017dec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8017dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8017e08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8017dd6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017dda:	4b0c      	ldr	r3, [pc, #48]	@ (8017e0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8017ddc:	8081      	strh	r1, [r0, #4]
 8017dde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017de2:	2300      	movs	r3, #0
 8017de4:	80c2      	strh	r2, [r0, #6]
 8017de6:	8003      	strh	r3, [r0, #0]
 8017de8:	8043      	strh	r3, [r0, #2]
 8017dea:	bd30      	pop	{r4, r5, pc}
 8017dec:	2300      	movs	r3, #0
 8017dee:	8003      	strh	r3, [r0, #0]
 8017df0:	8043      	strh	r3, [r0, #2]
 8017df2:	8083      	strh	r3, [r0, #4]
 8017df4:	e7d2      	b.n	8017d9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017df6:	bf00      	nop
 8017df8:	24025278 	.word	0x24025278
 8017dfc:	24025280 	.word	0x24025280
 8017e00:	2402527c 	.word	0x2402527c
 8017e04:	24025260 	.word	0x24025260
 8017e08:	240251e4 	.word	0x240251e4
 8017e0c:	240251e6 	.word	0x240251e6

08017e10 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017e10:	4a12      	ldr	r2, [pc, #72]	@ (8017e5c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8017e12:	8803      	ldrh	r3, [r0, #0]
 8017e14:	8811      	ldrh	r1, [r2, #0]
 8017e16:	428b      	cmp	r3, r1
 8017e18:	d20b      	bcs.n	8017e32 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8017e1a:	4a11      	ldr	r2, [pc, #68]	@ (8017e60 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017e1c:	6812      	ldr	r2, [r2, #0]
 8017e1e:	b112      	cbz	r2, 8017e26 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017e20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017e24:	b9c0      	cbnz	r0, 8017e58 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8017e26:	4a0f      	ldr	r2, [pc, #60]	@ (8017e64 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017e28:	6811      	ldr	r1, [r2, #0]
 8017e2a:	2214      	movs	r2, #20
 8017e2c:	4353      	muls	r3, r2
 8017e2e:	58c8      	ldr	r0, [r1, r3]
 8017e30:	4770      	bx	lr
 8017e32:	4a0d      	ldr	r2, [pc, #52]	@ (8017e68 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8017e34:	8812      	ldrh	r2, [r2, #0]
 8017e36:	440a      	add	r2, r1
 8017e38:	4293      	cmp	r3, r2
 8017e3a:	da04      	bge.n	8017e46 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8017e3c:	4a08      	ldr	r2, [pc, #32]	@ (8017e60 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017e3e:	6812      	ldr	r2, [r2, #0]
 8017e40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017e44:	4770      	bx	lr
 8017e46:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017e4a:	4293      	cmp	r3, r2
 8017e4c:	d103      	bne.n	8017e56 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017e4e:	4b07      	ldr	r3, [pc, #28]	@ (8017e6c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8017e54:	4770      	bx	lr
 8017e56:	2000      	movs	r0, #0
 8017e58:	4770      	bx	lr
 8017e5a:	bf00      	nop
 8017e5c:	24025278 	.word	0x24025278
 8017e60:	2402525c 	.word	0x2402525c
 8017e64:	24025280 	.word	0x24025280
 8017e68:	2402527c 	.word	0x2402527c
 8017e6c:	240251f0 	.word	0x240251f0

08017e70 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017e70:	4b24      	ldr	r3, [pc, #144]	@ (8017f04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8017e72:	8802      	ldrh	r2, [r0, #0]
 8017e74:	8818      	ldrh	r0, [r3, #0]
 8017e76:	4282      	cmp	r2, r0
 8017e78:	d221      	bcs.n	8017ebe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8017e7a:	4b23      	ldr	r3, [pc, #140]	@ (8017f08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017e7c:	6819      	ldr	r1, [r3, #0]
 8017e7e:	2314      	movs	r3, #20
 8017e80:	fb03 1302 	mla	r3, r3, r2, r1
 8017e84:	6858      	ldr	r0, [r3, #4]
 8017e86:	2800      	cmp	r0, #0
 8017e88:	d03a      	beq.n	8017f00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017e8a:	4920      	ldr	r1, [pc, #128]	@ (8017f0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017e8c:	6809      	ldr	r1, [r1, #0]
 8017e8e:	2900      	cmp	r1, #0
 8017e90:	d036      	beq.n	8017f00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017e92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017e96:	2900      	cmp	r1, #0
 8017e98:	d032      	beq.n	8017f00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017e9a:	891a      	ldrh	r2, [r3, #8]
 8017e9c:	8958      	ldrh	r0, [r3, #10]
 8017e9e:	4350      	muls	r0, r2
 8017ea0:	7c5a      	ldrb	r2, [r3, #17]
 8017ea2:	7cdb      	ldrb	r3, [r3, #19]
 8017ea4:	0952      	lsrs	r2, r2, #5
 8017ea6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017eaa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017eae:	2b0b      	cmp	r3, #11
 8017eb0:	bf18      	it	ne
 8017eb2:	0040      	lslne	r0, r0, #1
 8017eb4:	3003      	adds	r0, #3
 8017eb6:	f020 0003 	bic.w	r0, r0, #3
 8017eba:	4408      	add	r0, r1
 8017ebc:	4770      	bx	lr
 8017ebe:	4b14      	ldr	r3, [pc, #80]	@ (8017f10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017ec0:	881b      	ldrh	r3, [r3, #0]
 8017ec2:	4403      	add	r3, r0
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	da1a      	bge.n	8017efe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017ec8:	4b12      	ldr	r3, [pc, #72]	@ (8017f14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017eca:	1a10      	subs	r0, r2, r0
 8017ecc:	210e      	movs	r1, #14
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	fb01 3000 	mla	r0, r1, r0, r3
 8017ed4:	7b03      	ldrb	r3, [r0, #12]
 8017ed6:	f003 031f 	and.w	r3, r3, #31
 8017eda:	2b0b      	cmp	r3, #11
 8017edc:	d10b      	bne.n	8017ef6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8017ede:	8903      	ldrh	r3, [r0, #8]
 8017ee0:	8940      	ldrh	r0, [r0, #10]
 8017ee2:	4358      	muls	r0, r3
 8017ee4:	4b09      	ldr	r3, [pc, #36]	@ (8017f0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017ee6:	3003      	adds	r0, #3
 8017ee8:	6819      	ldr	r1, [r3, #0]
 8017eea:	f020 0303 	bic.w	r3, r0, #3
 8017eee:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017ef2:	4418      	add	r0, r3
 8017ef4:	4770      	bx	lr
 8017ef6:	2b0d      	cmp	r3, #13
 8017ef8:	d101      	bne.n	8017efe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017efa:	300d      	adds	r0, #13
 8017efc:	4770      	bx	lr
 8017efe:	2000      	movs	r0, #0
 8017f00:	4770      	bx	lr
 8017f02:	bf00      	nop
 8017f04:	24025278 	.word	0x24025278
 8017f08:	24025280 	.word	0x24025280
 8017f0c:	2402525c 	.word	0x2402525c
 8017f10:	2402527c 	.word	0x2402527c
 8017f14:	24025260 	.word	0x24025260

08017f18 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017f18:	4b1f      	ldr	r3, [pc, #124]	@ (8017f98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8017f1a:	b510      	push	{r4, lr}
 8017f1c:	8802      	ldrh	r2, [r0, #0]
 8017f1e:	881b      	ldrh	r3, [r3, #0]
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d21a      	bcs.n	8017f5a <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8017f24:	4b1d      	ldr	r3, [pc, #116]	@ (8017f9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8017f26:	2114      	movs	r1, #20
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	fb01 3102 	mla	r1, r1, r2, r3
 8017f2e:	7c4b      	ldrb	r3, [r1, #17]
 8017f30:	0958      	lsrs	r0, r3, #5
 8017f32:	7ccb      	ldrb	r3, [r1, #19]
 8017f34:	491a      	ldr	r1, [pc, #104]	@ (8017fa0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8017f36:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017f3a:	6809      	ldr	r1, [r1, #0]
 8017f3c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8017f40:	b2d8      	uxtb	r0, r3
 8017f42:	b149      	cbz	r1, 8017f58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8017f48:	b132      	cbz	r2, 8017f58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f4a:	2b0e      	cmp	r3, #14
 8017f4c:	d021      	beq.n	8017f92 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8017f4e:	280f      	cmp	r0, #15
 8017f50:	d01d      	beq.n	8017f8e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8017f52:	2810      	cmp	r0, #16
 8017f54:	bf08      	it	eq
 8017f56:	2002      	moveq	r0, #2
 8017f58:	bd10      	pop	{r4, pc}
 8017f5a:	4912      	ldr	r1, [pc, #72]	@ (8017fa4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8017f5c:	8809      	ldrh	r1, [r1, #0]
 8017f5e:	4419      	add	r1, r3
 8017f60:	428a      	cmp	r2, r1
 8017f62:	da09      	bge.n	8017f78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8017f64:	1ad3      	subs	r3, r2, r3
 8017f66:	4a10      	ldr	r2, [pc, #64]	@ (8017fa8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8017f68:	210e      	movs	r1, #14
 8017f6a:	6812      	ldr	r2, [r2, #0]
 8017f6c:	fb01 2303 	mla	r3, r1, r3, r2
 8017f70:	7b18      	ldrb	r0, [r3, #12]
 8017f72:	f000 001f 	and.w	r0, r0, #31
 8017f76:	e7ef      	b.n	8017f58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f78:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d108      	bne.n	8017f92 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8017f80:	f7eb fec8 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 8017f84:	6803      	ldr	r3, [r0, #0]
 8017f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f8c:	4718      	bx	r3
 8017f8e:	2001      	movs	r0, #1
 8017f90:	e7e2      	b.n	8017f58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f92:	2000      	movs	r0, #0
 8017f94:	e7e0      	b.n	8017f58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f96:	bf00      	nop
 8017f98:	24025278 	.word	0x24025278
 8017f9c:	24025280 	.word	0x24025280
 8017fa0:	2402525c 	.word	0x2402525c
 8017fa4:	2402527c 	.word	0x2402527c
 8017fa8:	24025260 	.word	0x24025260

08017fac <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8017fac:	2018      	movs	r0, #24
 8017fae:	4770      	bx	lr

08017fb0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8017fb0:	2001      	movs	r0, #1
 8017fb2:	4770      	bx	lr

08017fb4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8017fb4:	4b02      	ldr	r3, [pc, #8]	@ (8017fc0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8017fb6:	8818      	ldrh	r0, [r3, #0]
 8017fb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017fbc:	b280      	uxth	r0, r0
 8017fbe:	4770      	bx	lr
 8017fc0:	240251ea 	.word	0x240251ea

08017fc4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017fc4:	2bff      	cmp	r3, #255	@ 0xff
 8017fc6:	d04c      	beq.n	8018062 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017fc8:	2a2c      	cmp	r2, #44	@ 0x2c
 8017fca:	d030      	beq.n	801802e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8017fcc:	d80f      	bhi.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8017fce:	2a08      	cmp	r2, #8
 8017fd0:	d043      	beq.n	801805a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017fd2:	d805      	bhi.n	8017fe0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8017fd4:	2a04      	cmp	r2, #4
 8017fd6:	d03e      	beq.n	8018056 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017fd8:	2a05      	cmp	r2, #5
 8017fda:	d03a      	beq.n	8018052 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017fdc:	2300      	movs	r3, #0
 8017fde:	e024      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fe0:	2a0a      	cmp	r2, #10
 8017fe2:	d03a      	beq.n	801805a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017fe4:	d301      	bcc.n	8017fea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8017fe6:	2a0b      	cmp	r2, #11
 8017fe8:	d1f8      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017fea:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8017fec:	e01d      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fee:	2a30      	cmp	r2, #48	@ 0x30
 8017ff0:	d035      	beq.n	801805e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017ff2:	d80a      	bhi.n	801800a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 8017ff4:	2a2e      	cmp	r2, #46	@ 0x2e
 8017ff6:	684b      	ldr	r3, [r1, #4]
 8017ff8:	d023      	beq.n	8018042 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017ffa:	d90d      	bls.n	8018018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8017ffc:	781a      	ldrb	r2, [r3, #0]
 8017ffe:	785b      	ldrb	r3, [r3, #1]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d1eb      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018004:	b98a      	cbnz	r2, 801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018006:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018008:	e00f      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801800a:	2a32      	cmp	r2, #50	@ 0x32
 801800c:	d027      	beq.n	801805e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801800e:	d301      	bcc.n	8018014 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8018010:	2a33      	cmp	r2, #51	@ 0x33
 8018012:	d1e3      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018014:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8018016:	e008      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018018:	781a      	ldrb	r2, [r3, #0]
 801801a:	785b      	ldrb	r3, [r3, #1]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d1dd      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018020:	2a00      	cmp	r2, #0
 8018022:	d0f0      	beq.n	8018006 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8018024:	2a01      	cmp	r2, #1
 8018026:	d1d9      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018028:	6943      	ldr	r3, [r0, #20]
 801802a:	4618      	mov	r0, r3
 801802c:	4770      	bx	lr
 801802e:	684b      	ldr	r3, [r1, #4]
 8018030:	781a      	ldrb	r2, [r3, #0]
 8018032:	785b      	ldrb	r3, [r3, #1]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d1d1      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018038:	b14a      	cbz	r2, 801804e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801803a:	2a01      	cmp	r2, #1
 801803c:	bf08      	it	eq
 801803e:	68c3      	ldreq	r3, [r0, #12]
 8018040:	e7f3      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018042:	781a      	ldrb	r2, [r3, #0]
 8018044:	785b      	ldrb	r3, [r3, #1]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d1c8      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801804a:	2a00      	cmp	r2, #0
 801804c:	d1ed      	bne.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801804e:	69c3      	ldr	r3, [r0, #28]
 8018050:	e7eb      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018052:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8018054:	e7e9      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018056:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018058:	e7e7      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801805a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801805c:	e7e5      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801805e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018060:	e7e3      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018062:	2a2c      	cmp	r2, #44	@ 0x2c
 8018064:	d030      	beq.n	80180c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 8018066:	d80f      	bhi.n	8018088 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8018068:	2a08      	cmp	r2, #8
 801806a:	d042      	beq.n	80180f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801806c:	d805      	bhi.n	801807a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801806e:	2a04      	cmp	r2, #4
 8018070:	d03d      	beq.n	80180ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8018072:	2a05      	cmp	r2, #5
 8018074:	d1b2      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018076:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8018078:	e7d7      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801807a:	2a0a      	cmp	r2, #10
 801807c:	d039      	beq.n	80180f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801807e:	d301      	bcc.n	8018084 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8018080:	2a0b      	cmp	r2, #11
 8018082:	d1ab      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018084:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8018086:	e7d0      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018088:	2a30      	cmp	r2, #48	@ 0x30
 801808a:	d034      	beq.n	80180f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801808c:	d80b      	bhi.n	80180a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801808e:	2a2e      	cmp	r2, #46	@ 0x2e
 8018090:	684b      	ldr	r3, [r1, #4]
 8018092:	d023      	beq.n	80180dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8018094:	d90e      	bls.n	80180b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 8018096:	781a      	ldrb	r2, [r3, #0]
 8018098:	785b      	ldrb	r3, [r3, #1]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d19e      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801809e:	2a00      	cmp	r2, #0
 80180a0:	d1c3      	bne.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180a2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80180a4:	e7c1      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180a6:	2a32      	cmp	r2, #50	@ 0x32
 80180a8:	d025      	beq.n	80180f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80180aa:	d301      	bcc.n	80180b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80180ac:	2a33      	cmp	r2, #51	@ 0x33
 80180ae:	d195      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80180b0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80180b2:	e7ba      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180b4:	781a      	ldrb	r2, [r3, #0]
 80180b6:	785b      	ldrb	r3, [r3, #1]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d18f      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80180bc:	2a00      	cmp	r2, #0
 80180be:	d0f0      	beq.n	80180a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 80180c0:	2a01      	cmp	r2, #1
 80180c2:	d18b      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80180c4:	6983      	ldr	r3, [r0, #24]
 80180c6:	e7b0      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180c8:	684b      	ldr	r3, [r1, #4]
 80180ca:	781a      	ldrb	r2, [r3, #0]
 80180cc:	785b      	ldrb	r3, [r3, #1]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d184      	bne.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80180d2:	b152      	cbz	r2, 80180ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80180d4:	2a01      	cmp	r2, #1
 80180d6:	bf08      	it	eq
 80180d8:	6903      	ldreq	r3, [r0, #16]
 80180da:	e7a6      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180dc:	781a      	ldrb	r2, [r3, #0]
 80180de:	785b      	ldrb	r3, [r3, #1]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	f47f af7b 	bne.w	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80180e6:	2a00      	cmp	r2, #0
 80180e8:	d19f      	bne.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180ea:	6a03      	ldr	r3, [r0, #32]
 80180ec:	e79d      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80180f0:	e79b      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180f2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80180f4:	e799      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180f6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80180f8:	e797      	b.n	801802a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

080180fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180fe:	b085      	sub	sp, #20
 8018100:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8018102:	9203      	str	r2, [sp, #12]
 8018104:	6870      	ldr	r0, [r6, #4]
 8018106:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801810a:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801810e:	9101      	str	r1, [sp, #4]
 8018110:	fa1f f885 	uxth.w	r8, r5
 8018114:	43ed      	mvns	r5, r5
 8018116:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801811a:	b2ed      	uxtb	r5, r5
 801811c:	fb00 2404 	mla	r4, r0, r4, r2
 8018120:	6832      	ldr	r2, [r6, #0]
 8018122:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018126:	4414      	add	r4, r2
 8018128:	f8dc 2000 	ldr.w	r2, [ip]
 801812c:	9202      	str	r2, [sp, #8]
 801812e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018132:	f102 0e04 	add.w	lr, r2, #4
 8018136:	9a01      	ldr	r2, [sp, #4]
 8018138:	2a00      	cmp	r2, #0
 801813a:	dc03      	bgt.n	8018144 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801813c:	9a03      	ldr	r2, [sp, #12]
 801813e:	2a00      	cmp	r2, #0
 8018140:	f340 8116 	ble.w	8018370 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018144:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018146:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801814a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801814e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018150:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8018154:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018158:	2b00      	cmp	r3, #0
 801815a:	dd0e      	ble.n	801817a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801815c:	1406      	asrs	r6, r0, #16
 801815e:	d405      	bmi.n	801816c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018160:	4556      	cmp	r6, sl
 8018162:	da03      	bge.n	801816c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018164:	1416      	asrs	r6, r2, #16
 8018166:	d401      	bmi.n	801816c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018168:	454e      	cmp	r6, r9
 801816a:	db07      	blt.n	801817c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801816c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801816e:	3b01      	subs	r3, #1
 8018170:	3403      	adds	r4, #3
 8018172:	4430      	add	r0, r6
 8018174:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018176:	4432      	add	r2, r6
 8018178:	e7ee      	b.n	8018158 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801817a:	d063      	beq.n	8018244 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801817c:	1e5e      	subs	r6, r3, #1
 801817e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8018180:	fb07 0706 	mla	r7, r7, r6, r0
 8018184:	143f      	asrs	r7, r7, #16
 8018186:	d454      	bmi.n	8018232 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018188:	4557      	cmp	r7, sl
 801818a:	da52      	bge.n	8018232 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801818c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801818e:	fb07 2606 	mla	r6, r7, r6, r2
 8018192:	1436      	asrs	r6, r6, #16
 8018194:	d44d      	bmi.n	8018232 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018196:	454e      	cmp	r6, r9
 8018198:	da4b      	bge.n	8018232 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801819a:	1ce6      	adds	r6, r4, #3
 801819c:	4699      	mov	r9, r3
 801819e:	f1b9 0f00 	cmp.w	r9, #0
 80181a2:	f106 0603 	add.w	r6, r6, #3
 80181a6:	dd48      	ble.n	801823a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80181a8:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80181ac:	1417      	asrs	r7, r2, #16
 80181ae:	9902      	ldr	r1, [sp, #8]
 80181b0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80181b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80181b8:	fb0b 1707 	mla	r7, fp, r7, r1
 80181bc:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80181c0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80181c2:	f817 700a 	ldrb.w	r7, [r7, sl]
 80181c6:	fb1b fb05 	smulbb	fp, fp, r5
 80181ca:	4408      	add	r0, r1
 80181cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80181ce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80181d2:	440a      	add	r2, r1
 80181d4:	eb0e 0a07 	add.w	sl, lr, r7
 80181d8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80181dc:	fb07 b708 	mla	r7, r7, r8, fp
 80181e0:	b2bf      	uxth	r7, r7
 80181e2:	f107 0b01 	add.w	fp, r7, #1
 80181e6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80181ea:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80181ee:	fb1b fb05 	smulbb	fp, fp, r5
 80181f2:	123f      	asrs	r7, r7, #8
 80181f4:	f806 7c06 	strb.w	r7, [r6, #-6]
 80181f8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80181fc:	fb07 b708 	mla	r7, r7, r8, fp
 8018200:	b2bf      	uxth	r7, r7
 8018202:	f107 0b01 	add.w	fp, r7, #1
 8018206:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801820a:	123f      	asrs	r7, r7, #8
 801820c:	f806 7c05 	strb.w	r7, [r6, #-5]
 8018210:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018214:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018218:	fb1a fa05 	smulbb	sl, sl, r5
 801821c:	fb07 a708 	mla	r7, r7, r8, sl
 8018220:	b2bf      	uxth	r7, r7
 8018222:	f107 0a01 	add.w	sl, r7, #1
 8018226:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801822a:	123f      	asrs	r7, r7, #8
 801822c:	f806 7c04 	strb.w	r7, [r6, #-4]
 8018230:	e7b5      	b.n	801819e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8018232:	2700      	movs	r7, #0
 8018234:	1bde      	subs	r6, r3, r7
 8018236:	2e00      	cmp	r6, #0
 8018238:	dc42      	bgt.n	80182c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801823a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801823e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018242:	441c      	add	r4, r3
 8018244:	9b01      	ldr	r3, [sp, #4]
 8018246:	2b00      	cmp	r3, #0
 8018248:	f340 8092 	ble.w	8018370 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801824c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018252:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018256:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801825a:	eef0 6a62 	vmov.f32	s13, s5
 801825e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018262:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018266:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801826a:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801826e:	eef0 6a43 	vmov.f32	s13, s6
 8018272:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018276:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801827a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801827e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018282:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018286:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801828a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801828e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018292:	ee12 2a90 	vmov	r2, s5
 8018296:	eef0 2a47 	vmov.f32	s5, s14
 801829a:	fb92 f3f3 	sdiv	r3, r2, r3
 801829e:	ee13 2a10 	vmov	r2, s6
 80182a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80182a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182a6:	eeb0 3a67 	vmov.f32	s6, s15
 80182aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80182ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80182b0:	9b01      	ldr	r3, [sp, #4]
 80182b2:	9a03      	ldr	r2, [sp, #12]
 80182b4:	3b01      	subs	r3, #1
 80182b6:	9301      	str	r3, [sp, #4]
 80182b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182ba:	bf08      	it	eq
 80182bc:	4613      	moveq	r3, r2
 80182be:	e73a      	b.n	8018136 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80182c0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80182c4:	d44e      	bmi.n	8018364 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80182c6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80182ca:	4556      	cmp	r6, sl
 80182cc:	dd4a      	ble.n	8018364 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80182ce:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80182d2:	d447      	bmi.n	8018364 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80182d4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80182d8:	4559      	cmp	r1, fp
 80182da:	dd43      	ble.n	8018364 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80182dc:	fa0f f986 	sxth.w	r9, r6
 80182e0:	9902      	ldr	r1, [sp, #8]
 80182e2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80182e6:	fb0b 1909 	mla	r9, fp, r9, r1
 80182ea:	f814 b006 	ldrb.w	fp, [r4, r6]
 80182ee:	f819 900a 	ldrb.w	r9, [r9, sl]
 80182f2:	fb1b fb05 	smulbb	fp, fp, r5
 80182f6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80182fa:	eb0e 0a09 	add.w	sl, lr, r9
 80182fe:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8018302:	fb09 b908 	mla	r9, r9, r8, fp
 8018306:	fa1f f989 	uxth.w	r9, r9
 801830a:	f109 0b01 	add.w	fp, r9, #1
 801830e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018312:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018316:	f804 9006 	strb.w	r9, [r4, r6]
 801831a:	4426      	add	r6, r4
 801831c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018320:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018324:	fb1b fb05 	smulbb	fp, fp, r5
 8018328:	fb09 b908 	mla	r9, r9, r8, fp
 801832c:	fa1f f989 	uxth.w	r9, r9
 8018330:	f109 0b01 	add.w	fp, r9, #1
 8018334:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018338:	ea4f 2929 	mov.w	r9, r9, asr #8
 801833c:	f886 9001 	strb.w	r9, [r6, #1]
 8018340:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018344:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018348:	fb1a fa05 	smulbb	sl, sl, r5
 801834c:	fb09 a908 	mla	r9, r9, r8, sl
 8018350:	fa1f f989 	uxth.w	r9, r9
 8018354:	f109 0a01 	add.w	sl, r9, #1
 8018358:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801835c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018360:	f886 9002 	strb.w	r9, [r6, #2]
 8018364:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018366:	3701      	adds	r7, #1
 8018368:	4408      	add	r0, r1
 801836a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801836c:	440a      	add	r2, r1
 801836e:	e761      	b.n	8018234 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018370:	b005      	add	sp, #20
 8018372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018376 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018376:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801837a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801837c:	4693      	mov	fp, r2
 801837e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8018380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018384:	6868      	ldr	r0, [r5, #4]
 8018386:	6877      	ldr	r7, [r6, #4]
 8018388:	9100      	str	r1, [sp, #0]
 801838a:	3704      	adds	r7, #4
 801838c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018390:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8018394:	fb00 2404 	mla	r4, r0, r4, r2
 8018398:	682a      	ldr	r2, [r5, #0]
 801839a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801839e:	4414      	add	r4, r2
 80183a0:	6832      	ldr	r2, [r6, #0]
 80183a2:	9201      	str	r2, [sp, #4]
 80183a4:	9a00      	ldr	r2, [sp, #0]
 80183a6:	2a00      	cmp	r2, #0
 80183a8:	dc03      	bgt.n	80183b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80183aa:	f1bb 0f00 	cmp.w	fp, #0
 80183ae:	f340 80bc 	ble.w	801852a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80183b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80183b4:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80183b8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80183bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80183be:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80183c2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	dd0c      	ble.n	80183e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80183ca:	1405      	asrs	r5, r0, #16
 80183cc:	d405      	bmi.n	80183da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80183ce:	4555      	cmp	r5, sl
 80183d0:	da03      	bge.n	80183da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80183d2:	1415      	asrs	r5, r2, #16
 80183d4:	d401      	bmi.n	80183da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80183d6:	454d      	cmp	r5, r9
 80183d8:	db05      	blt.n	80183e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80183da:	4440      	add	r0, r8
 80183dc:	4472      	add	r2, lr
 80183de:	3b01      	subs	r3, #1
 80183e0:	3403      	adds	r4, #3
 80183e2:	e7f0      	b.n	80183c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80183e4:	d03f      	beq.n	8018466 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80183e6:	1e5d      	subs	r5, r3, #1
 80183e8:	fb08 0c05 	mla	ip, r8, r5, r0
 80183ec:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80183f0:	d42e      	bmi.n	8018450 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183f2:	45d4      	cmp	ip, sl
 80183f4:	da2c      	bge.n	8018450 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183f6:	fb0e 2505 	mla	r5, lr, r5, r2
 80183fa:	142d      	asrs	r5, r5, #16
 80183fc:	d428      	bmi.n	8018450 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183fe:	454d      	cmp	r5, r9
 8018400:	da26      	bge.n	8018450 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018402:	1ce5      	adds	r5, r4, #3
 8018404:	469c      	mov	ip, r3
 8018406:	f1bc 0f00 	cmp.w	ip, #0
 801840a:	f105 0503 	add.w	r5, r5, #3
 801840e:	dd25      	ble.n	801845c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8018410:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018414:	ea4f 4922 	mov.w	r9, r2, asr #16
 8018418:	f10c 3cff 	add.w	ip, ip, #4294967295
 801841c:	4472      	add	r2, lr
 801841e:	468a      	mov	sl, r1
 8018420:	9901      	ldr	r1, [sp, #4]
 8018422:	fb0a 1909 	mla	r9, sl, r9, r1
 8018426:	1401      	asrs	r1, r0, #16
 8018428:	4440      	add	r0, r8
 801842a:	f819 9001 	ldrb.w	r9, [r9, r1]
 801842e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018432:	eb07 0a09 	add.w	sl, r7, r9
 8018436:	f817 9009 	ldrb.w	r9, [r7, r9]
 801843a:	f805 9c06 	strb.w	r9, [r5, #-6]
 801843e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018442:	f805 9c05 	strb.w	r9, [r5, #-5]
 8018446:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801844a:	f805 9c04 	strb.w	r9, [r5, #-4]
 801844e:	e7da      	b.n	8018406 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018450:	2500      	movs	r5, #0
 8018452:	eba3 0c05 	sub.w	ip, r3, r5
 8018456:	f1bc 0f00 	cmp.w	ip, #0
 801845a:	dc3b      	bgt.n	80184d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801845c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018460:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018464:	441c      	add	r4, r3
 8018466:	9b00      	ldr	r3, [sp, #0]
 8018468:	2b00      	cmp	r3, #0
 801846a:	dd5e      	ble.n	801852a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801846c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018470:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018472:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018476:	eeb0 6a62 	vmov.f32	s12, s5
 801847a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801847e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018482:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018486:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801848a:	eeb0 6a43 	vmov.f32	s12, s6
 801848e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018492:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8018496:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801849a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801849e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80184a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80184a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80184aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80184ae:	ee12 2a90 	vmov	r2, s5
 80184b2:	eef0 2a47 	vmov.f32	s5, s14
 80184b6:	fb92 f8f3 	sdiv	r8, r2, r3
 80184ba:	ee13 2a10 	vmov	r2, s6
 80184be:	eeb0 3a67 	vmov.f32	s6, s15
 80184c2:	fb92 fef3 	sdiv	lr, r2, r3
 80184c6:	9b00      	ldr	r3, [sp, #0]
 80184c8:	3b01      	subs	r3, #1
 80184ca:	9300      	str	r3, [sp, #0]
 80184cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80184ce:	bf08      	it	eq
 80184d0:	465b      	moveq	r3, fp
 80184d2:	e767      	b.n	80183a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80184d4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80184d8:	d423      	bmi.n	8018522 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184da:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80184de:	45cc      	cmp	ip, r9
 80184e0:	dd1f      	ble.n	8018522 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184e2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80184e6:	d41c      	bmi.n	8018522 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184e8:	68f1      	ldr	r1, [r6, #12]
 80184ea:	4551      	cmp	r1, sl
 80184ec:	dd19      	ble.n	8018522 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184ee:	fa0f fc8c 	sxth.w	ip, ip
 80184f2:	9901      	ldr	r1, [sp, #4]
 80184f4:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80184f8:	f81c c009 	ldrb.w	ip, [ip, r9]
 80184fc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018500:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8018504:	eb07 090c 	add.w	r9, r7, ip
 8018508:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801850c:	f804 a00c 	strb.w	sl, [r4, ip]
 8018510:	44a4      	add	ip, r4
 8018512:	f899 a001 	ldrb.w	sl, [r9, #1]
 8018516:	f88c a001 	strb.w	sl, [ip, #1]
 801851a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801851e:	f88c 9002 	strb.w	r9, [ip, #2]
 8018522:	4440      	add	r0, r8
 8018524:	4472      	add	r2, lr
 8018526:	3501      	adds	r5, #1
 8018528:	e793      	b.n	8018452 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801852a:	b003      	add	sp, #12
 801852c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018530 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018534:	b085      	sub	sp, #20
 8018536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801853a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801853c:	9202      	str	r2, [sp, #8]
 801853e:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018542:	6860      	ldr	r0, [r4, #4]
 8018544:	9203      	str	r2, [sp, #12]
 8018546:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801854a:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801854e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8018552:	fb00 2505 	mla	r5, r0, r5, r2
 8018556:	6822      	ldr	r2, [r4, #0]
 8018558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801855c:	4415      	add	r5, r2
 801855e:	f8dc 2000 	ldr.w	r2, [ip]
 8018562:	9200      	str	r2, [sp, #0]
 8018564:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018568:	3204      	adds	r2, #4
 801856a:	9201      	str	r2, [sp, #4]
 801856c:	2900      	cmp	r1, #0
 801856e:	dc03      	bgt.n	8018578 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018570:	9a02      	ldr	r2, [sp, #8]
 8018572:	2a00      	cmp	r2, #0
 8018574:	f340 8127 	ble.w	80187c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018578:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801857a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801857e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018582:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018584:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018588:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801858c:	2b00      	cmp	r3, #0
 801858e:	dd0d      	ble.n	80185ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018590:	1422      	asrs	r2, r4, #16
 8018592:	d405      	bmi.n	80185a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018594:	4542      	cmp	r2, r8
 8018596:	da03      	bge.n	80185a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018598:	1402      	asrs	r2, r0, #16
 801859a:	d401      	bmi.n	80185a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801859c:	42ba      	cmp	r2, r7
 801859e:	db06      	blt.n	80185ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80185a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80185a2:	4474      	add	r4, lr
 80185a4:	3b01      	subs	r3, #1
 80185a6:	3503      	adds	r5, #3
 80185a8:	4410      	add	r0, r2
 80185aa:	e7ef      	b.n	801858c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80185ac:	d075      	beq.n	801869a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80185ae:	1e5a      	subs	r2, r3, #1
 80185b0:	fb0e 4602 	mla	r6, lr, r2, r4
 80185b4:	1436      	asrs	r6, r6, #16
 80185b6:	d465      	bmi.n	8018684 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80185b8:	4546      	cmp	r6, r8
 80185ba:	da63      	bge.n	8018684 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80185bc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80185be:	fb06 0202 	mla	r2, r6, r2, r0
 80185c2:	1412      	asrs	r2, r2, #16
 80185c4:	d45e      	bmi.n	8018684 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80185c6:	42ba      	cmp	r2, r7
 80185c8:	da5c      	bge.n	8018684 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80185ca:	1cef      	adds	r7, r5, #3
 80185cc:	4699      	mov	r9, r3
 80185ce:	f1b9 0f00 	cmp.w	r9, #0
 80185d2:	dd5d      	ble.n	8018690 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80185d4:	1402      	asrs	r2, r0, #16
 80185d6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80185da:	1426      	asrs	r6, r4, #16
 80185dc:	4692      	mov	sl, r2
 80185de:	9a00      	ldr	r2, [sp, #0]
 80185e0:	fb08 220a 	mla	r2, r8, sl, r2
 80185e4:	5d92      	ldrb	r2, [r2, r6]
 80185e6:	9e01      	ldr	r6, [sp, #4]
 80185e8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80185ec:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80185f0:	d041      	beq.n	8018676 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80185f2:	9a03      	ldr	r2, [sp, #12]
 80185f4:	fa5f fb86 	uxtb.w	fp, r6
 80185f8:	fb02 f808 	mul.w	r8, r2, r8
 80185fc:	f108 0201 	add.w	r2, r8, #1
 8018600:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018604:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018608:	1212      	asrs	r2, r2, #8
 801860a:	fa1f fa82 	uxth.w	sl, r2
 801860e:	43d2      	mvns	r2, r2
 8018610:	fb1b fb0a 	smulbb	fp, fp, sl
 8018614:	b2d2      	uxtb	r2, r2
 8018616:	fb08 b802 	mla	r8, r8, r2, fp
 801861a:	fa1f f888 	uxth.w	r8, r8
 801861e:	f108 0b01 	add.w	fp, r8, #1
 8018622:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018626:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801862a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801862e:	fb1b fb0a 	smulbb	fp, fp, sl
 8018632:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018636:	fb16 fa0a 	smulbb	sl, r6, sl
 801863a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801863e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018642:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018646:	fb06 aa02 	mla	sl, r6, r2, sl
 801864a:	fb08 b802 	mla	r8, r8, r2, fp
 801864e:	fa1f fa8a 	uxth.w	sl, sl
 8018652:	fa1f f888 	uxth.w	r8, r8
 8018656:	f10a 0601 	add.w	r6, sl, #1
 801865a:	f108 0b01 	add.w	fp, r8, #1
 801865e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018662:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018666:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801866a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801866e:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018672:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018676:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018678:	4474      	add	r4, lr
 801867a:	3703      	adds	r7, #3
 801867c:	f109 39ff 	add.w	r9, r9, #4294967295
 8018680:	4410      	add	r0, r2
 8018682:	e7a4      	b.n	80185ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018684:	f04f 0800 	mov.w	r8, #0
 8018688:	eba3 0208 	sub.w	r2, r3, r8
 801868c:	2a00      	cmp	r2, #0
 801868e:	dc3b      	bgt.n	8018708 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8018690:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018698:	441d      	add	r5, r3
 801869a:	2900      	cmp	r1, #0
 801869c:	f340 8093 	ble.w	80187c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80186a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80186a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80186a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80186aa:	3901      	subs	r1, #1
 80186ac:	eeb0 6a62 	vmov.f32	s12, s5
 80186b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80186b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80186b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186bc:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80186c0:	eeb0 6a43 	vmov.f32	s12, s6
 80186c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186c8:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80186cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80186d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80186d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80186d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80186dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80186e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80186e4:	ee12 2a90 	vmov	r2, s5
 80186e8:	eef0 2a47 	vmov.f32	s5, s14
 80186ec:	fb92 fef3 	sdiv	lr, r2, r3
 80186f0:	ee13 2a10 	vmov	r2, s6
 80186f4:	eeb0 3a67 	vmov.f32	s6, s15
 80186f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80186fc:	9a02      	ldr	r2, [sp, #8]
 80186fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8018700:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018702:	bf08      	it	eq
 8018704:	4613      	moveq	r3, r2
 8018706:	e731      	b.n	801856c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018708:	1427      	asrs	r7, r4, #16
 801870a:	d456      	bmi.n	80187ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801870c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018710:	42be      	cmp	r6, r7
 8018712:	dd52      	ble.n	80187ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018714:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018718:	d44f      	bmi.n	80187ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801871a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801871e:	454a      	cmp	r2, r9
 8018720:	dd4b      	ble.n	80187ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018722:	9a00      	ldr	r2, [sp, #0]
 8018724:	b236      	sxth	r6, r6
 8018726:	fb09 2606 	mla	r6, r9, r6, r2
 801872a:	5df2      	ldrb	r2, [r6, r7]
 801872c:	9e01      	ldr	r6, [sp, #4]
 801872e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8018732:	0e3a      	lsrs	r2, r7, #24
 8018734:	d041      	beq.n	80187ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018736:	9e03      	ldr	r6, [sp, #12]
 8018738:	fa5f fb87 	uxtb.w	fp, r7
 801873c:	4372      	muls	r2, r6
 801873e:	1c56      	adds	r6, r2, #1
 8018740:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018744:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018748:	1212      	asrs	r2, r2, #8
 801874a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801874e:	fa1f fa82 	uxth.w	sl, r2
 8018752:	43d2      	mvns	r2, r2
 8018754:	fb1b fb0a 	smulbb	fp, fp, sl
 8018758:	b2d2      	uxtb	r2, r2
 801875a:	fb09 b902 	mla	r9, r9, r2, fp
 801875e:	fa1f f989 	uxth.w	r9, r9
 8018762:	f109 0b01 	add.w	fp, r9, #1
 8018766:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801876a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801876e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018772:	fb1b fb0a 	smulbb	fp, fp, sl
 8018776:	ea4f 2929 	mov.w	r9, r9, asr #8
 801877a:	fb17 fa0a 	smulbb	sl, r7, sl
 801877e:	f805 9006 	strb.w	r9, [r5, r6]
 8018782:	442e      	add	r6, r5
 8018784:	78b7      	ldrb	r7, [r6, #2]
 8018786:	f896 9001 	ldrb.w	r9, [r6, #1]
 801878a:	fb07 aa02 	mla	sl, r7, r2, sl
 801878e:	fb09 b902 	mla	r9, r9, r2, fp
 8018792:	fa1f fa8a 	uxth.w	sl, sl
 8018796:	fa1f f989 	uxth.w	r9, r9
 801879a:	f10a 0701 	add.w	r7, sl, #1
 801879e:	f109 0b01 	add.w	fp, r9, #1
 80187a2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80187a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80187aa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80187ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 80187b2:	f886 a002 	strb.w	sl, [r6, #2]
 80187b6:	f886 9001 	strb.w	r9, [r6, #1]
 80187ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80187bc:	4474      	add	r4, lr
 80187be:	f108 0801 	add.w	r8, r8, #1
 80187c2:	4410      	add	r0, r2
 80187c4:	e760      	b.n	8018688 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80187c6:	b005      	add	sp, #20
 80187c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80187cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187d0:	b085      	sub	sp, #20
 80187d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80187d6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80187d8:	9203      	str	r2, [sp, #12]
 80187da:	6868      	ldr	r0, [r5, #4]
 80187dc:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80187e0:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80187e4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80187e8:	fb00 2404 	mla	r4, r0, r4, r2
 80187ec:	682a      	ldr	r2, [r5, #0]
 80187ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80187f2:	4414      	add	r4, r2
 80187f4:	f8dc 2000 	ldr.w	r2, [ip]
 80187f8:	9201      	str	r2, [sp, #4]
 80187fa:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80187fe:	3204      	adds	r2, #4
 8018800:	9202      	str	r2, [sp, #8]
 8018802:	2900      	cmp	r1, #0
 8018804:	dc03      	bgt.n	801880e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018806:	9a03      	ldr	r2, [sp, #12]
 8018808:	2a00      	cmp	r2, #0
 801880a:	f340 8137 	ble.w	8018a7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801880e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018810:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018814:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018818:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801881a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801881e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018822:	2b00      	cmp	r3, #0
 8018824:	dd0d      	ble.n	8018842 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018826:	1405      	asrs	r5, r0, #16
 8018828:	d405      	bmi.n	8018836 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801882a:	4545      	cmp	r5, r8
 801882c:	da03      	bge.n	8018836 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801882e:	1415      	asrs	r5, r2, #16
 8018830:	d401      	bmi.n	8018836 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018832:	42bd      	cmp	r5, r7
 8018834:	db06      	blt.n	8018844 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018836:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018838:	4470      	add	r0, lr
 801883a:	3b01      	subs	r3, #1
 801883c:	3403      	adds	r4, #3
 801883e:	442a      	add	r2, r5
 8018840:	e7ef      	b.n	8018822 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018842:	d070      	beq.n	8018926 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018844:	1e5d      	subs	r5, r3, #1
 8018846:	fb0e 0605 	mla	r6, lr, r5, r0
 801884a:	1436      	asrs	r6, r6, #16
 801884c:	d462      	bmi.n	8018914 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801884e:	4546      	cmp	r6, r8
 8018850:	da60      	bge.n	8018914 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018852:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018854:	fb06 2505 	mla	r5, r6, r5, r2
 8018858:	142d      	asrs	r5, r5, #16
 801885a:	d45b      	bmi.n	8018914 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801885c:	42bd      	cmp	r5, r7
 801885e:	da59      	bge.n	8018914 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018860:	1ce5      	adds	r5, r4, #3
 8018862:	469a      	mov	sl, r3
 8018864:	f1ba 0f00 	cmp.w	sl, #0
 8018868:	dd58      	ble.n	801891c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801886a:	1416      	asrs	r6, r2, #16
 801886c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018870:	1407      	asrs	r7, r0, #16
 8018872:	46b1      	mov	r9, r6
 8018874:	9e01      	ldr	r6, [sp, #4]
 8018876:	fb08 6609 	mla	r6, r8, r9, r6
 801887a:	5df6      	ldrb	r6, [r6, r7]
 801887c:	9f02      	ldr	r7, [sp, #8]
 801887e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8018882:	0e37      	lsrs	r7, r6, #24
 8018884:	2fff      	cmp	r7, #255	@ 0xff
 8018886:	f000 80f0 	beq.w	8018a6a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801888a:	fa5f f887 	uxtb.w	r8, r7
 801888e:	b3d7      	cbz	r7, 8018906 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018890:	fa1f f788 	uxth.w	r7, r8
 8018894:	ea6f 0808 	mvn.w	r8, r8
 8018898:	fa5f fb86 	uxtb.w	fp, r6
 801889c:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80188a0:	fa5f f888 	uxtb.w	r8, r8
 80188a4:	fb1b fb07 	smulbb	fp, fp, r7
 80188a8:	fb09 b908 	mla	r9, r9, r8, fp
 80188ac:	fa1f f989 	uxth.w	r9, r9
 80188b0:	f109 0b01 	add.w	fp, r9, #1
 80188b4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80188b8:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80188bc:	fb1b fb08 	smulbb	fp, fp, r8
 80188c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80188c4:	f805 9c03 	strb.w	r9, [r5, #-3]
 80188c8:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80188cc:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80188d0:	fb09 b907 	mla	r9, r9, r7, fp
 80188d4:	fa1f f989 	uxth.w	r9, r9
 80188d8:	f109 0b01 	add.w	fp, r9, #1
 80188dc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80188e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80188e4:	f805 9c02 	strb.w	r9, [r5, #-2]
 80188e8:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80188ec:	fb19 f808 	smulbb	r8, r9, r8
 80188f0:	fb06 8607 	mla	r6, r6, r7, r8
 80188f4:	b2b6      	uxth	r6, r6
 80188f6:	f106 0801 	add.w	r8, r6, #1
 80188fa:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80188fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018902:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018906:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018908:	4470      	add	r0, lr
 801890a:	3503      	adds	r5, #3
 801890c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018910:	4432      	add	r2, r6
 8018912:	e7a7      	b.n	8018864 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018914:	2600      	movs	r6, #0
 8018916:	1b9d      	subs	r5, r3, r6
 8018918:	2d00      	cmp	r5, #0
 801891a:	dc3b      	bgt.n	8018994 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801891c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018924:	441c      	add	r4, r3
 8018926:	2900      	cmp	r1, #0
 8018928:	f340 80a8 	ble.w	8018a7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801892c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018932:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018936:	3901      	subs	r1, #1
 8018938:	eeb0 6a62 	vmov.f32	s12, s5
 801893c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018940:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018944:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018948:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801894c:	eeb0 6a43 	vmov.f32	s12, s6
 8018950:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018954:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018958:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801895c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018960:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018964:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018968:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801896c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018970:	ee12 2a90 	vmov	r2, s5
 8018974:	eef0 2a47 	vmov.f32	s5, s14
 8018978:	fb92 fef3 	sdiv	lr, r2, r3
 801897c:	ee13 2a10 	vmov	r2, s6
 8018980:	eeb0 3a67 	vmov.f32	s6, s15
 8018984:	fb92 f3f3 	sdiv	r3, r2, r3
 8018988:	9a03      	ldr	r2, [sp, #12]
 801898a:	9312      	str	r3, [sp, #72]	@ 0x48
 801898c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801898e:	bf08      	it	eq
 8018990:	4613      	moveq	r3, r2
 8018992:	e736      	b.n	8018802 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018994:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018998:	d457      	bmi.n	8018a4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801899a:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801899e:	4547      	cmp	r7, r8
 80189a0:	dd53      	ble.n	8018a4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80189a2:	ea5f 4922 	movs.w	r9, r2, asr #16
 80189a6:	d450      	bmi.n	8018a4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80189a8:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80189ac:	454d      	cmp	r5, r9
 80189ae:	dd4c      	ble.n	8018a4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80189b0:	9d01      	ldr	r5, [sp, #4]
 80189b2:	b23f      	sxth	r7, r7
 80189b4:	fb09 5707 	mla	r7, r9, r7, r5
 80189b8:	f817 5008 	ldrb.w	r5, [r7, r8]
 80189bc:	9f02      	ldr	r7, [sp, #8]
 80189be:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80189c2:	0e2f      	lsrs	r7, r5, #24
 80189c4:	2fff      	cmp	r7, #255	@ 0xff
 80189c6:	d045      	beq.n	8018a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80189c8:	fa5f f987 	uxtb.w	r9, r7
 80189cc:	b3ef      	cbz	r7, 8018a4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80189ce:	fa1f f889 	uxth.w	r8, r9
 80189d2:	ea6f 0909 	mvn.w	r9, r9
 80189d6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80189da:	fa5f fb85 	uxtb.w	fp, r5
 80189de:	f814 a007 	ldrb.w	sl, [r4, r7]
 80189e2:	fa5f f989 	uxtb.w	r9, r9
 80189e6:	fb1b fb08 	smulbb	fp, fp, r8
 80189ea:	fb0a ba09 	mla	sl, sl, r9, fp
 80189ee:	fa1f fa8a 	uxth.w	sl, sl
 80189f2:	f10a 0b01 	add.w	fp, sl, #1
 80189f6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80189fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80189fe:	f804 a007 	strb.w	sl, [r4, r7]
 8018a02:	4427      	add	r7, r4
 8018a04:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018a08:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8018a0c:	f897 b001 	ldrb.w	fp, [r7, #1]
 8018a10:	fb1b fb09 	smulbb	fp, fp, r9
 8018a14:	fb0a ba08 	mla	sl, sl, r8, fp
 8018a18:	fa1f fa8a 	uxth.w	sl, sl
 8018a1c:	f10a 0b01 	add.w	fp, sl, #1
 8018a20:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8018a24:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018a28:	f887 a001 	strb.w	sl, [r7, #1]
 8018a2c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8018a30:	fb1a f909 	smulbb	r9, sl, r9
 8018a34:	fb05 9508 	mla	r5, r5, r8, r9
 8018a38:	b2ad      	uxth	r5, r5
 8018a3a:	f105 0901 	add.w	r9, r5, #1
 8018a3e:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8018a42:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018a46:	f887 9002 	strb.w	r9, [r7, #2]
 8018a4a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018a4c:	4470      	add	r0, lr
 8018a4e:	3601      	adds	r6, #1
 8018a50:	442a      	add	r2, r5
 8018a52:	e760      	b.n	8018916 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018a54:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018a58:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8018a5c:	55e5      	strb	r5, [r4, r7]
 8018a5e:	4427      	add	r7, r4
 8018a60:	0c2d      	lsrs	r5, r5, #16
 8018a62:	f887 8001 	strb.w	r8, [r7, #1]
 8018a66:	70bd      	strb	r5, [r7, #2]
 8018a68:	e7ef      	b.n	8018a4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018a6a:	0a37      	lsrs	r7, r6, #8
 8018a6c:	f805 6c03 	strb.w	r6, [r5, #-3]
 8018a70:	0c36      	lsrs	r6, r6, #16
 8018a72:	f805 7c02 	strb.w	r7, [r5, #-2]
 8018a76:	f805 6c01 	strb.w	r6, [r5, #-1]
 8018a7a:	e744      	b.n	8018906 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018a7c:	b005      	add	sp, #20
 8018a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a82 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a86:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018a88:	9201      	str	r2, [sp, #4]
 8018a8a:	6870      	ldr	r0, [r6, #4]
 8018a8c:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8018a90:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8018a94:	fa1f fe85 	uxth.w	lr, r5
 8018a98:	43ed      	mvns	r5, r5
 8018a9a:	f8dc 8000 	ldr.w	r8, [ip]
 8018a9e:	b2ed      	uxtb	r5, r5
 8018aa0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018aa4:	fb00 2404 	mla	r4, r0, r4, r2
 8018aa8:	6832      	ldr	r2, [r6, #0]
 8018aaa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018aae:	4414      	add	r4, r2
 8018ab0:	2900      	cmp	r1, #0
 8018ab2:	dc03      	bgt.n	8018abc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8018ab4:	9a01      	ldr	r2, [sp, #4]
 8018ab6:	2a00      	cmp	r2, #0
 8018ab8:	f340 810d 	ble.w	8018cd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018abc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018abe:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018ac2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018ac6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018ac8:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8018acc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	dd0e      	ble.n	8018af2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018ad4:	1406      	asrs	r6, r0, #16
 8018ad6:	d405      	bmi.n	8018ae4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018ad8:	4556      	cmp	r6, sl
 8018ada:	da03      	bge.n	8018ae4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018adc:	1416      	asrs	r6, r2, #16
 8018ade:	d401      	bmi.n	8018ae4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018ae0:	454e      	cmp	r6, r9
 8018ae2:	db07      	blt.n	8018af4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018ae4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018ae6:	3b01      	subs	r3, #1
 8018ae8:	3403      	adds	r4, #3
 8018aea:	4430      	add	r0, r6
 8018aec:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018aee:	4432      	add	r2, r6
 8018af0:	e7ee      	b.n	8018ad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8018af2:	d060      	beq.n	8018bb6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8018af4:	1e5e      	subs	r6, r3, #1
 8018af6:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018af8:	fb07 0706 	mla	r7, r7, r6, r0
 8018afc:	143f      	asrs	r7, r7, #16
 8018afe:	d451      	bmi.n	8018ba4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018b00:	4557      	cmp	r7, sl
 8018b02:	da4f      	bge.n	8018ba4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018b04:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018b06:	fb07 2606 	mla	r6, r7, r6, r2
 8018b0a:	1436      	asrs	r6, r6, #16
 8018b0c:	d44a      	bmi.n	8018ba4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018b0e:	454e      	cmp	r6, r9
 8018b10:	da48      	bge.n	8018ba4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018b12:	1ce6      	adds	r6, r4, #3
 8018b14:	4699      	mov	r9, r3
 8018b16:	f1b9 0f00 	cmp.w	r9, #0
 8018b1a:	f106 0603 	add.w	r6, r6, #3
 8018b1e:	dd45      	ble.n	8018bac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8018b20:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8018b24:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018b28:	1417      	asrs	r7, r2, #16
 8018b2a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018b2e:	fb0b a707 	mla	r7, fp, r7, sl
 8018b32:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018b36:	fb1b fb05 	smulbb	fp, fp, r5
 8018b3a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018b3e:	eb08 0a07 	add.w	sl, r8, r7
 8018b42:	f818 7007 	ldrb.w	r7, [r8, r7]
 8018b46:	fb07 b70e 	mla	r7, r7, lr, fp
 8018b4a:	b2bf      	uxth	r7, r7
 8018b4c:	f107 0b01 	add.w	fp, r7, #1
 8018b50:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018b54:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018b58:	fb1b fb05 	smulbb	fp, fp, r5
 8018b5c:	123f      	asrs	r7, r7, #8
 8018b5e:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018b62:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018b66:	fb07 b70e 	mla	r7, r7, lr, fp
 8018b6a:	b2bf      	uxth	r7, r7
 8018b6c:	f107 0b01 	add.w	fp, r7, #1
 8018b70:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018b74:	123f      	asrs	r7, r7, #8
 8018b76:	f806 7c05 	strb.w	r7, [r6, #-5]
 8018b7a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018b7e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018b82:	fb1a fa05 	smulbb	sl, sl, r5
 8018b86:	fb07 a70e 	mla	r7, r7, lr, sl
 8018b8a:	b2bf      	uxth	r7, r7
 8018b8c:	f107 0a01 	add.w	sl, r7, #1
 8018b90:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018b94:	123f      	asrs	r7, r7, #8
 8018b96:	f806 7c04 	strb.w	r7, [r6, #-4]
 8018b9a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018b9c:	4438      	add	r0, r7
 8018b9e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018ba0:	443a      	add	r2, r7
 8018ba2:	e7b8      	b.n	8018b16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018ba4:	2700      	movs	r7, #0
 8018ba6:	1bde      	subs	r6, r3, r7
 8018ba8:	2e00      	cmp	r6, #0
 8018baa:	dc3f      	bgt.n	8018c2c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018bac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018bb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018bb4:	441c      	add	r4, r3
 8018bb6:	2900      	cmp	r1, #0
 8018bb8:	f340 808d 	ble.w	8018cd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018bbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018bc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bc2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018bc6:	3901      	subs	r1, #1
 8018bc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018bcc:	eef0 6a62 	vmov.f32	s13, s5
 8018bd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018bd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018bd8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018bdc:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8018be0:	eef0 6a43 	vmov.f32	s13, s6
 8018be4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018be8:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8018bec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018bf0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018bf4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018bf8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018bfc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018c00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018c04:	ee12 2a90 	vmov	r2, s5
 8018c08:	eef0 2a47 	vmov.f32	s5, s14
 8018c0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018c10:	ee13 2a10 	vmov	r2, s6
 8018c14:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018c16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c18:	eeb0 3a67 	vmov.f32	s6, s15
 8018c1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018c20:	9a01      	ldr	r2, [sp, #4]
 8018c22:	9310      	str	r3, [sp, #64]	@ 0x40
 8018c24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c26:	bf08      	it	eq
 8018c28:	4613      	moveq	r3, r2
 8018c2a:	e741      	b.n	8018ab0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018c2c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018c30:	d44b      	bmi.n	8018cca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c32:	f8dc b008 	ldr.w	fp, [ip, #8]
 8018c36:	45cb      	cmp	fp, r9
 8018c38:	dd47      	ble.n	8018cca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c3a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018c3e:	d444      	bmi.n	8018cca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c40:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8018c44:	4556      	cmp	r6, sl
 8018c46:	dd40      	ble.n	8018cca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c48:	fa0f f68b 	sxth.w	r6, fp
 8018c4c:	fb0a 9906 	mla	r9, sl, r6, r9
 8018c50:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018c54:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018c58:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018c5c:	fb1b fb05 	smulbb	fp, fp, r5
 8018c60:	eb08 0a09 	add.w	sl, r8, r9
 8018c64:	f818 9009 	ldrb.w	r9, [r8, r9]
 8018c68:	fb09 b90e 	mla	r9, r9, lr, fp
 8018c6c:	fa1f f989 	uxth.w	r9, r9
 8018c70:	f109 0b01 	add.w	fp, r9, #1
 8018c74:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c78:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c7c:	f804 9006 	strb.w	r9, [r4, r6]
 8018c80:	4426      	add	r6, r4
 8018c82:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018c86:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018c8a:	fb1b fb05 	smulbb	fp, fp, r5
 8018c8e:	fb09 b90e 	mla	r9, r9, lr, fp
 8018c92:	fa1f f989 	uxth.w	r9, r9
 8018c96:	f109 0b01 	add.w	fp, r9, #1
 8018c9a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ca2:	f886 9001 	strb.w	r9, [r6, #1]
 8018ca6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018caa:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018cae:	fb1a fa05 	smulbb	sl, sl, r5
 8018cb2:	fb09 a90e 	mla	r9, r9, lr, sl
 8018cb6:	fa1f f989 	uxth.w	r9, r9
 8018cba:	f109 0a01 	add.w	sl, r9, #1
 8018cbe:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018cc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018cc6:	f886 9002 	strb.w	r9, [r6, #2]
 8018cca:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018ccc:	3701      	adds	r7, #1
 8018cce:	4430      	add	r0, r6
 8018cd0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018cd2:	4432      	add	r2, r6
 8018cd4:	e767      	b.n	8018ba6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8018cd6:	b003      	add	sp, #12
 8018cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018cdc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ce0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018ce6:	9201      	str	r2, [sp, #4]
 8018ce8:	6868      	ldr	r0, [r5, #4]
 8018cea:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8018cec:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018cf0:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8018cf4:	fb00 2404 	mla	r4, r0, r4, r2
 8018cf8:	682a      	ldr	r2, [r5, #0]
 8018cfa:	f8d7 8000 	ldr.w	r8, [r7]
 8018cfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018d02:	4414      	add	r4, r2
 8018d04:	2900      	cmp	r1, #0
 8018d06:	dc03      	bgt.n	8018d10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8018d08:	9a01      	ldr	r2, [sp, #4]
 8018d0a:	2a00      	cmp	r2, #0
 8018d0c:	f340 80af 	ble.w	8018e6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8018d10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018d12:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8018d16:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018d1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018d1c:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8018d20:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	dd0c      	ble.n	8018d42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018d28:	1405      	asrs	r5, r0, #16
 8018d2a:	d405      	bmi.n	8018d38 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d2c:	4555      	cmp	r5, sl
 8018d2e:	da03      	bge.n	8018d38 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d30:	1415      	asrs	r5, r2, #16
 8018d32:	d401      	bmi.n	8018d38 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d34:	454d      	cmp	r5, r9
 8018d36:	db05      	blt.n	8018d44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018d38:	4470      	add	r0, lr
 8018d3a:	4462      	add	r2, ip
 8018d3c:	3b01      	subs	r3, #1
 8018d3e:	3403      	adds	r4, #3
 8018d40:	e7f0      	b.n	8018d24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018d42:	d038      	beq.n	8018db6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018d44:	1e5d      	subs	r5, r3, #1
 8018d46:	fb0e 0605 	mla	r6, lr, r5, r0
 8018d4a:	1436      	asrs	r6, r6, #16
 8018d4c:	d42a      	bmi.n	8018da4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d4e:	4556      	cmp	r6, sl
 8018d50:	da28      	bge.n	8018da4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d52:	fb0c 2505 	mla	r5, ip, r5, r2
 8018d56:	142d      	asrs	r5, r5, #16
 8018d58:	d424      	bmi.n	8018da4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d5a:	454d      	cmp	r5, r9
 8018d5c:	da22      	bge.n	8018da4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d5e:	1ce6      	adds	r6, r4, #3
 8018d60:	4699      	mov	r9, r3
 8018d62:	f1b9 0f00 	cmp.w	r9, #0
 8018d66:	f106 0603 	add.w	r6, r6, #3
 8018d6a:	dd1f      	ble.n	8018dac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8018d6c:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8018d70:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018d74:	1415      	asrs	r5, r2, #16
 8018d76:	4470      	add	r0, lr
 8018d78:	4462      	add	r2, ip
 8018d7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018d7e:	fb0b a505 	mla	r5, fp, r5, sl
 8018d82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d86:	eb08 0a05 	add.w	sl, r8, r5
 8018d8a:	f818 5005 	ldrb.w	r5, [r8, r5]
 8018d8e:	f806 5c06 	strb.w	r5, [r6, #-6]
 8018d92:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018d96:	f806 5c05 	strb.w	r5, [r6, #-5]
 8018d9a:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8018d9e:	f806 5c04 	strb.w	r5, [r6, #-4]
 8018da2:	e7de      	b.n	8018d62 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8018da4:	2600      	movs	r6, #0
 8018da6:	1b9d      	subs	r5, r3, r6
 8018da8:	2d00      	cmp	r5, #0
 8018daa:	dc38      	bgt.n	8018e1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018dac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018db0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018db4:	441c      	add	r4, r3
 8018db6:	2900      	cmp	r1, #0
 8018db8:	dd59      	ble.n	8018e6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8018dba:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018dbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018dc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018dc4:	3901      	subs	r1, #1
 8018dc6:	eeb0 6a62 	vmov.f32	s12, s5
 8018dca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018dce:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018dd2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018dd6:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8018dda:	eeb0 6a43 	vmov.f32	s12, s6
 8018dde:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018de2:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8018de6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018dea:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018dee:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018df2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018df6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018dfa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018dfe:	ee12 2a90 	vmov	r2, s5
 8018e02:	eef0 2a47 	vmov.f32	s5, s14
 8018e06:	fb92 fef3 	sdiv	lr, r2, r3
 8018e0a:	ee13 2a10 	vmov	r2, s6
 8018e0e:	eeb0 3a67 	vmov.f32	s6, s15
 8018e12:	fb92 fcf3 	sdiv	ip, r2, r3
 8018e16:	9a01      	ldr	r2, [sp, #4]
 8018e18:	bf08      	it	eq
 8018e1a:	4613      	moveq	r3, r2
 8018e1c:	e772      	b.n	8018d04 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8018e1e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018e22:	d420      	bmi.n	8018e66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018e24:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8018e28:	45cb      	cmp	fp, r9
 8018e2a:	dd1c      	ble.n	8018e66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018e2c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018e30:	d419      	bmi.n	8018e66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018e32:	68fd      	ldr	r5, [r7, #12]
 8018e34:	4555      	cmp	r5, sl
 8018e36:	dd16      	ble.n	8018e66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018e38:	fa0f f58b 	sxth.w	r5, fp
 8018e3c:	fb0a 9505 	mla	r5, sl, r5, r9
 8018e40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e44:	f818 9005 	ldrb.w	r9, [r8, r5]
 8018e48:	eb08 0b05 	add.w	fp, r8, r5
 8018e4c:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8018e50:	f804 9005 	strb.w	r9, [r4, r5]
 8018e54:	4425      	add	r5, r4
 8018e56:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8018e5a:	f885 9001 	strb.w	r9, [r5, #1]
 8018e5e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018e62:	f885 9002 	strb.w	r9, [r5, #2]
 8018e66:	4470      	add	r0, lr
 8018e68:	4462      	add	r2, ip
 8018e6a:	3601      	adds	r6, #1
 8018e6c:	e79b      	b.n	8018da6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8018e6e:	b003      	add	sp, #12
 8018e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e78:	b085      	sub	sp, #20
 8018e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018e7e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018e80:	9202      	str	r2, [sp, #8]
 8018e82:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018e86:	6860      	ldr	r0, [r4, #4]
 8018e88:	9203      	str	r2, [sp, #12]
 8018e8a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018e8e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018e92:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8018e96:	fb00 2505 	mla	r5, r0, r5, r2
 8018e9a:	6822      	ldr	r2, [r4, #0]
 8018e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018ea0:	4415      	add	r5, r2
 8018ea2:	f8dc 2000 	ldr.w	r2, [ip]
 8018ea6:	9201      	str	r2, [sp, #4]
 8018ea8:	2900      	cmp	r1, #0
 8018eaa:	dc03      	bgt.n	8018eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018eac:	9a02      	ldr	r2, [sp, #8]
 8018eae:	2a00      	cmp	r2, #0
 8018eb0:	f340 8122 	ble.w	80190f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018eb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018eb6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018eba:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018ebe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018ec0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018ec4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	dd0d      	ble.n	8018ee8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018ecc:	1422      	asrs	r2, r4, #16
 8018ece:	d405      	bmi.n	8018edc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018ed0:	4542      	cmp	r2, r8
 8018ed2:	da03      	bge.n	8018edc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018ed4:	1402      	asrs	r2, r0, #16
 8018ed6:	d401      	bmi.n	8018edc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018ed8:	42ba      	cmp	r2, r7
 8018eda:	db06      	blt.n	8018eea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018edc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018ede:	4474      	add	r4, lr
 8018ee0:	3b01      	subs	r3, #1
 8018ee2:	3503      	adds	r5, #3
 8018ee4:	4410      	add	r0, r2
 8018ee6:	e7ef      	b.n	8018ec8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018ee8:	d072      	beq.n	8018fd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8018eea:	1e5a      	subs	r2, r3, #1
 8018eec:	fb0e 4602 	mla	r6, lr, r2, r4
 8018ef0:	1436      	asrs	r6, r6, #16
 8018ef2:	d462      	bmi.n	8018fba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ef4:	4546      	cmp	r6, r8
 8018ef6:	da60      	bge.n	8018fba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ef8:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018efa:	fb06 0202 	mla	r2, r6, r2, r0
 8018efe:	1412      	asrs	r2, r2, #16
 8018f00:	d45b      	bmi.n	8018fba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018f02:	42ba      	cmp	r2, r7
 8018f04:	da59      	bge.n	8018fba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018f06:	1cef      	adds	r7, r5, #3
 8018f08:	4699      	mov	r9, r3
 8018f0a:	f1b9 0f00 	cmp.w	r9, #0
 8018f0e:	dd5a      	ble.n	8018fc6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018f10:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018f14:	1426      	asrs	r6, r4, #16
 8018f16:	1402      	asrs	r2, r0, #16
 8018f18:	fb08 6202 	mla	r2, r8, r2, r6
 8018f1c:	9e01      	ldr	r6, [sp, #4]
 8018f1e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018f22:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018f26:	d041      	beq.n	8018fac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018f28:	9a03      	ldr	r2, [sp, #12]
 8018f2a:	fa5f fb86 	uxtb.w	fp, r6
 8018f2e:	fb02 f808 	mul.w	r8, r2, r8
 8018f32:	f108 0201 	add.w	r2, r8, #1
 8018f36:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018f3a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018f3e:	1212      	asrs	r2, r2, #8
 8018f40:	fa1f fa82 	uxth.w	sl, r2
 8018f44:	43d2      	mvns	r2, r2
 8018f46:	fb1b fb0a 	smulbb	fp, fp, sl
 8018f4a:	b2d2      	uxtb	r2, r2
 8018f4c:	fb08 b802 	mla	r8, r8, r2, fp
 8018f50:	fa1f f888 	uxth.w	r8, r8
 8018f54:	f108 0b01 	add.w	fp, r8, #1
 8018f58:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f5c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018f60:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018f64:	fb1b fb0a 	smulbb	fp, fp, sl
 8018f68:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f6c:	fb16 fa0a 	smulbb	sl, r6, sl
 8018f70:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018f74:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018f78:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018f7c:	fb06 aa02 	mla	sl, r6, r2, sl
 8018f80:	fb08 b802 	mla	r8, r8, r2, fp
 8018f84:	fa1f fa8a 	uxth.w	sl, sl
 8018f88:	fa1f f888 	uxth.w	r8, r8
 8018f8c:	f10a 0601 	add.w	r6, sl, #1
 8018f90:	f108 0b01 	add.w	fp, r8, #1
 8018f94:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018f98:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f9c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018fa0:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018fa4:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018fa8:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018fac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018fae:	4474      	add	r4, lr
 8018fb0:	3703      	adds	r7, #3
 8018fb2:	f109 39ff 	add.w	r9, r9, #4294967295
 8018fb6:	4410      	add	r0, r2
 8018fb8:	e7a7      	b.n	8018f0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018fba:	f04f 0800 	mov.w	r8, #0
 8018fbe:	eba3 0208 	sub.w	r2, r3, r8
 8018fc2:	2a00      	cmp	r2, #0
 8018fc4:	dc3b      	bgt.n	801903e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8018fc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018fca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018fce:	441d      	add	r5, r3
 8018fd0:	2900      	cmp	r1, #0
 8018fd2:	f340 8091 	ble.w	80190f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018fd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018fe0:	3901      	subs	r1, #1
 8018fe2:	eeb0 6a62 	vmov.f32	s12, s5
 8018fe6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018fea:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018fee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ff2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018ff6:	eeb0 6a43 	vmov.f32	s12, s6
 8018ffa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ffe:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8019002:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019006:	ee61 7a27 	vmul.f32	s15, s2, s15
 801900a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801900e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019012:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019016:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801901a:	ee12 2a90 	vmov	r2, s5
 801901e:	eef0 2a47 	vmov.f32	s5, s14
 8019022:	fb92 fef3 	sdiv	lr, r2, r3
 8019026:	ee13 2a10 	vmov	r2, s6
 801902a:	eeb0 3a67 	vmov.f32	s6, s15
 801902e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019032:	9a02      	ldr	r2, [sp, #8]
 8019034:	9312      	str	r3, [sp, #72]	@ 0x48
 8019036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019038:	bf08      	it	eq
 801903a:	4613      	moveq	r3, r2
 801903c:	e734      	b.n	8018ea8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801903e:	1427      	asrs	r7, r4, #16
 8019040:	d454      	bmi.n	80190ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019042:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019046:	42be      	cmp	r6, r7
 8019048:	dd50      	ble.n	80190ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801904a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801904e:	d44d      	bmi.n	80190ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019050:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019054:	454a      	cmp	r2, r9
 8019056:	dd49      	ble.n	80190ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019058:	b236      	sxth	r6, r6
 801905a:	9a01      	ldr	r2, [sp, #4]
 801905c:	fb09 7606 	mla	r6, r9, r6, r7
 8019060:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8019064:	0e3a      	lsrs	r2, r7, #24
 8019066:	d041      	beq.n	80190ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019068:	9e03      	ldr	r6, [sp, #12]
 801906a:	fa5f fb87 	uxtb.w	fp, r7
 801906e:	4372      	muls	r2, r6
 8019070:	1c56      	adds	r6, r2, #1
 8019072:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019076:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801907a:	1212      	asrs	r2, r2, #8
 801907c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019080:	fa1f fa82 	uxth.w	sl, r2
 8019084:	43d2      	mvns	r2, r2
 8019086:	fb1b fb0a 	smulbb	fp, fp, sl
 801908a:	b2d2      	uxtb	r2, r2
 801908c:	fb09 b902 	mla	r9, r9, r2, fp
 8019090:	fa1f f989 	uxth.w	r9, r9
 8019094:	f109 0b01 	add.w	fp, r9, #1
 8019098:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801909c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80190a0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80190a4:	fb1b fb0a 	smulbb	fp, fp, sl
 80190a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80190ac:	fb17 fa0a 	smulbb	sl, r7, sl
 80190b0:	f805 9006 	strb.w	r9, [r5, r6]
 80190b4:	442e      	add	r6, r5
 80190b6:	78b7      	ldrb	r7, [r6, #2]
 80190b8:	f896 9001 	ldrb.w	r9, [r6, #1]
 80190bc:	fb07 aa02 	mla	sl, r7, r2, sl
 80190c0:	fb09 b902 	mla	r9, r9, r2, fp
 80190c4:	fa1f fa8a 	uxth.w	sl, sl
 80190c8:	fa1f f989 	uxth.w	r9, r9
 80190cc:	f10a 0701 	add.w	r7, sl, #1
 80190d0:	f109 0b01 	add.w	fp, r9, #1
 80190d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80190d8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80190dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80190e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80190e4:	f886 a002 	strb.w	sl, [r6, #2]
 80190e8:	f886 9001 	strb.w	r9, [r6, #1]
 80190ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80190ee:	4474      	add	r4, lr
 80190f0:	f108 0801 	add.w	r8, r8, #1
 80190f4:	4410      	add	r0, r2
 80190f6:	e762      	b.n	8018fbe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80190f8:	b005      	add	sp, #20
 80190fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80190fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019102:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8019104:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019108:	9201      	str	r2, [sp, #4]
 801910a:	6860      	ldr	r0, [r4, #4]
 801910c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8019110:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8019114:	fb00 2505 	mla	r5, r0, r5, r2
 8019118:	6822      	ldr	r2, [r4, #0]
 801911a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801911e:	4415      	add	r5, r2
 8019120:	f8dc 2000 	ldr.w	r2, [ip]
 8019124:	9200      	str	r2, [sp, #0]
 8019126:	2900      	cmp	r1, #0
 8019128:	dc03      	bgt.n	8019132 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801912a:	9a01      	ldr	r2, [sp, #4]
 801912c:	2a00      	cmp	r2, #0
 801912e:	f340 812b 	ble.w	8019388 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019132:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019134:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019138:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801913c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801913e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019142:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019146:	2b00      	cmp	r3, #0
 8019148:	dd0e      	ble.n	8019168 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801914a:	1422      	asrs	r2, r4, #16
 801914c:	d405      	bmi.n	801915a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801914e:	4572      	cmp	r2, lr
 8019150:	da03      	bge.n	801915a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019152:	1402      	asrs	r2, r0, #16
 8019154:	d401      	bmi.n	801915a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019156:	42ba      	cmp	r2, r7
 8019158:	db07      	blt.n	801916a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801915a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801915c:	3b01      	subs	r3, #1
 801915e:	3503      	adds	r5, #3
 8019160:	4414      	add	r4, r2
 8019162:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019164:	4410      	add	r0, r2
 8019166:	e7ee      	b.n	8019146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019168:	d06f      	beq.n	801924a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801916a:	1e5a      	subs	r2, r3, #1
 801916c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801916e:	fb06 4602 	mla	r6, r6, r2, r4
 8019172:	1436      	asrs	r6, r6, #16
 8019174:	d45e      	bmi.n	8019234 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019176:	4576      	cmp	r6, lr
 8019178:	da5c      	bge.n	8019234 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801917a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801917c:	fb06 0202 	mla	r2, r6, r2, r0
 8019180:	1412      	asrs	r2, r2, #16
 8019182:	d457      	bmi.n	8019234 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019184:	42ba      	cmp	r2, r7
 8019186:	da55      	bge.n	8019234 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019188:	1cee      	adds	r6, r5, #3
 801918a:	469a      	mov	sl, r3
 801918c:	f1ba 0f00 	cmp.w	sl, #0
 8019190:	dd56      	ble.n	8019240 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019192:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019196:	1427      	asrs	r7, r4, #16
 8019198:	1402      	asrs	r2, r0, #16
 801919a:	fb0e 7202 	mla	r2, lr, r2, r7
 801919e:	9f00      	ldr	r7, [sp, #0]
 80191a0:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80191a4:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80191a8:	d03c      	beq.n	8019224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80191aa:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80191ae:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80191b2:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80191b6:	fa5f f28e 	uxtb.w	r2, lr
 80191ba:	b2ff      	uxtb	r7, r7
 80191bc:	f000 80dd 	beq.w	801937a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80191c0:	fa1f f882 	uxth.w	r8, r2
 80191c4:	43d2      	mvns	r2, r2
 80191c6:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80191ca:	fb17 f708 	smulbb	r7, r7, r8
 80191ce:	b2d2      	uxtb	r2, r2
 80191d0:	fb19 f908 	smulbb	r9, r9, r8
 80191d4:	fb0e 7702 	mla	r7, lr, r2, r7
 80191d8:	fb1b f808 	smulbb	r8, fp, r8
 80191dc:	b2bf      	uxth	r7, r7
 80191de:	f107 0e01 	add.w	lr, r7, #1
 80191e2:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80191e6:	123f      	asrs	r7, r7, #8
 80191e8:	f806 7c03 	strb.w	r7, [r6, #-3]
 80191ec:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80191f0:	fb07 9902 	mla	r9, r7, r2, r9
 80191f4:	fa1f f989 	uxth.w	r9, r9
 80191f8:	f109 0701 	add.w	r7, r9, #1
 80191fc:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019200:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019204:	fb07 8802 	mla	r8, r7, r2, r8
 8019208:	ea4f 2929 	mov.w	r9, r9, asr #8
 801920c:	fa1f f888 	uxth.w	r8, r8
 8019210:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019214:	f108 0201 	add.w	r2, r8, #1
 8019218:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801921c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019220:	f806 8c01 	strb.w	r8, [r6, #-1]
 8019224:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019226:	3603      	adds	r6, #3
 8019228:	f10a 3aff 	add.w	sl, sl, #4294967295
 801922c:	4414      	add	r4, r2
 801922e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019230:	4410      	add	r0, r2
 8019232:	e7ab      	b.n	801918c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019234:	f04f 0e00 	mov.w	lr, #0
 8019238:	eba3 020e 	sub.w	r2, r3, lr
 801923c:	2a00      	cmp	r2, #0
 801923e:	dc3d      	bgt.n	80192bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8019240:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019244:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019248:	441d      	add	r5, r3
 801924a:	2900      	cmp	r1, #0
 801924c:	f340 809c 	ble.w	8019388 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019250:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019254:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019256:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801925a:	3901      	subs	r1, #1
 801925c:	eeb0 6a62 	vmov.f32	s12, s5
 8019260:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019264:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019268:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801926c:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8019270:	eeb0 6a43 	vmov.f32	s12, s6
 8019274:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019278:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801927c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019280:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019284:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019288:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801928c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019290:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019294:	ee12 2a90 	vmov	r2, s5
 8019298:	eef0 2a47 	vmov.f32	s5, s14
 801929c:	fb92 f3f3 	sdiv	r3, r2, r3
 80192a0:	ee13 2a10 	vmov	r2, s6
 80192a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80192a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80192a8:	eeb0 3a67 	vmov.f32	s6, s15
 80192ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80192b0:	9a01      	ldr	r2, [sp, #4]
 80192b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80192b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80192b6:	bf08      	it	eq
 80192b8:	4613      	moveq	r3, r2
 80192ba:	e734      	b.n	8019126 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80192bc:	1427      	asrs	r7, r4, #16
 80192be:	d44d      	bmi.n	801935c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192c0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80192c4:	42be      	cmp	r6, r7
 80192c6:	dd49      	ble.n	801935c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192c8:	ea5f 4820 	movs.w	r8, r0, asr #16
 80192cc:	d446      	bmi.n	801935c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192ce:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80192d2:	4542      	cmp	r2, r8
 80192d4:	dd42      	ble.n	801935c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192d6:	b236      	sxth	r6, r6
 80192d8:	9a00      	ldr	r2, [sp, #0]
 80192da:	fb08 7606 	mla	r6, r8, r6, r7
 80192de:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80192e2:	0e3a      	lsrs	r2, r7, #24
 80192e4:	d03a      	beq.n	801935c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192e6:	2aff      	cmp	r2, #255	@ 0xff
 80192e8:	b2d6      	uxtb	r6, r2
 80192ea:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80192ee:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80192f2:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80192f6:	b2ff      	uxtb	r7, r7
 80192f8:	d037      	beq.n	801936a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80192fa:	fa1f f986 	uxth.w	r9, r6
 80192fe:	4472      	add	r2, lr
 8019300:	43f6      	mvns	r6, r6
 8019302:	f815 8002 	ldrb.w	r8, [r5, r2]
 8019306:	fb17 f709 	smulbb	r7, r7, r9
 801930a:	fb1a fa09 	smulbb	sl, sl, r9
 801930e:	b2f6      	uxtb	r6, r6
 8019310:	fb1b f909 	smulbb	r9, fp, r9
 8019314:	fb08 7706 	mla	r7, r8, r6, r7
 8019318:	b2bf      	uxth	r7, r7
 801931a:	f107 0801 	add.w	r8, r7, #1
 801931e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8019322:	123f      	asrs	r7, r7, #8
 8019324:	54af      	strb	r7, [r5, r2]
 8019326:	442a      	add	r2, r5
 8019328:	7857      	ldrb	r7, [r2, #1]
 801932a:	fb07 aa06 	mla	sl, r7, r6, sl
 801932e:	fa1f fa8a 	uxth.w	sl, sl
 8019332:	f10a 0701 	add.w	r7, sl, #1
 8019336:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801933a:	7897      	ldrb	r7, [r2, #2]
 801933c:	fb07 9906 	mla	r9, r7, r6, r9
 8019340:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019344:	fa1f f989 	uxth.w	r9, r9
 8019348:	f882 a001 	strb.w	sl, [r2, #1]
 801934c:	f109 0601 	add.w	r6, r9, #1
 8019350:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8019354:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019358:	f882 9002 	strb.w	r9, [r2, #2]
 801935c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801935e:	f10e 0e01 	add.w	lr, lr, #1
 8019362:	4414      	add	r4, r2
 8019364:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019366:	4410      	add	r0, r2
 8019368:	e766      	b.n	8019238 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801936a:	4472      	add	r2, lr
 801936c:	54af      	strb	r7, [r5, r2]
 801936e:	442a      	add	r2, r5
 8019370:	f882 a001 	strb.w	sl, [r2, #1]
 8019374:	f882 b002 	strb.w	fp, [r2, #2]
 8019378:	e7f0      	b.n	801935c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801937a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801937e:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019382:	f806 bc01 	strb.w	fp, [r6, #-1]
 8019386:	e74d      	b.n	8019224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019388:	b003      	add	sp, #12
 801938a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019390 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019394:	b087      	sub	sp, #28
 8019396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801939a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801939c:	9204      	str	r2, [sp, #16]
 801939e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80193a2:	6860      	ldr	r0, [r4, #4]
 80193a4:	9205      	str	r2, [sp, #20]
 80193a6:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 80193aa:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 80193ae:	9101      	str	r1, [sp, #4]
 80193b0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 80193b4:	fb00 2505 	mla	r5, r0, r5, r2
 80193b8:	6822      	ldr	r2, [r4, #0]
 80193ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80193be:	4415      	add	r5, r2
 80193c0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80193c4:	3201      	adds	r2, #1
 80193c6:	f022 0201 	bic.w	r2, r2, #1
 80193ca:	9202      	str	r2, [sp, #8]
 80193cc:	f8dc 2000 	ldr.w	r2, [ip]
 80193d0:	9203      	str	r2, [sp, #12]
 80193d2:	9a01      	ldr	r2, [sp, #4]
 80193d4:	2a00      	cmp	r2, #0
 80193d6:	dc03      	bgt.n	80193e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80193d8:	9a04      	ldr	r2, [sp, #16]
 80193da:	2a00      	cmp	r2, #0
 80193dc:	f340 8135 	ble.w	801964a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80193e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80193e2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80193e6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80193ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80193ec:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80193f0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	dd0d      	ble.n	8019414 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80193f8:	1422      	asrs	r2, r4, #16
 80193fa:	d405      	bmi.n	8019408 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80193fc:	4542      	cmp	r2, r8
 80193fe:	da03      	bge.n	8019408 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019400:	1402      	asrs	r2, r0, #16
 8019402:	d401      	bmi.n	8019408 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019404:	42ba      	cmp	r2, r7
 8019406:	db06      	blt.n	8019416 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019408:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801940a:	4474      	add	r4, lr
 801940c:	3b01      	subs	r3, #1
 801940e:	3503      	adds	r5, #3
 8019410:	4410      	add	r0, r2
 8019412:	e7ef      	b.n	80193f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019414:	d077      	beq.n	8019506 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8019416:	1e5a      	subs	r2, r3, #1
 8019418:	fb0e 4602 	mla	r6, lr, r2, r4
 801941c:	1436      	asrs	r6, r6, #16
 801941e:	d469      	bmi.n	80194f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019420:	4546      	cmp	r6, r8
 8019422:	da67      	bge.n	80194f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019424:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8019426:	fb06 0202 	mla	r2, r6, r2, r0
 801942a:	1412      	asrs	r2, r2, #16
 801942c:	d462      	bmi.n	80194f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801942e:	42ba      	cmp	r2, r7
 8019430:	da60      	bge.n	80194f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019432:	1cee      	adds	r6, r5, #3
 8019434:	4699      	mov	r9, r3
 8019436:	f1b9 0f00 	cmp.w	r9, #0
 801943a:	dd5f      	ble.n	80194fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801943c:	1422      	asrs	r2, r4, #16
 801943e:	9902      	ldr	r1, [sp, #8]
 8019440:	1407      	asrs	r7, r0, #16
 8019442:	fb01 2707 	mla	r7, r1, r7, r2
 8019446:	9903      	ldr	r1, [sp, #12]
 8019448:	087a      	lsrs	r2, r7, #1
 801944a:	5c8a      	ldrb	r2, [r1, r2]
 801944c:	07f9      	lsls	r1, r7, #31
 801944e:	bf54      	ite	pl
 8019450:	f002 020f 	andpl.w	r2, r2, #15
 8019454:	1112      	asrmi	r2, r2, #4
 8019456:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801945a:	b2d2      	uxtb	r2, r2
 801945c:	2a00      	cmp	r2, #0
 801945e:	d042      	beq.n	80194e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8019460:	497b      	ldr	r1, [pc, #492]	@ (8019650 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019462:	680f      	ldr	r7, [r1, #0]
 8019464:	9905      	ldr	r1, [sp, #20]
 8019466:	fa5f fb87 	uxtb.w	fp, r7
 801946a:	434a      	muls	r2, r1
 801946c:	f102 0801 	add.w	r8, r2, #1
 8019470:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8019474:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8019478:	1212      	asrs	r2, r2, #8
 801947a:	fa1f fa82 	uxth.w	sl, r2
 801947e:	43d2      	mvns	r2, r2
 8019480:	fb1b fb0a 	smulbb	fp, fp, sl
 8019484:	b2d2      	uxtb	r2, r2
 8019486:	fb08 b802 	mla	r8, r8, r2, fp
 801948a:	fa1f f888 	uxth.w	r8, r8
 801948e:	f108 0b01 	add.w	fp, r8, #1
 8019492:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019496:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801949a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801949e:	fb1b fb0a 	smulbb	fp, fp, sl
 80194a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80194a6:	fb17 fa0a 	smulbb	sl, r7, sl
 80194aa:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80194ae:	f806 8c03 	strb.w	r8, [r6, #-3]
 80194b2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80194b6:	fb07 aa02 	mla	sl, r7, r2, sl
 80194ba:	fb08 b802 	mla	r8, r8, r2, fp
 80194be:	fa1f fa8a 	uxth.w	sl, sl
 80194c2:	fa1f f888 	uxth.w	r8, r8
 80194c6:	f10a 0701 	add.w	r7, sl, #1
 80194ca:	f108 0b01 	add.w	fp, r8, #1
 80194ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80194d2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80194d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80194da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80194de:	f806 ac01 	strb.w	sl, [r6, #-1]
 80194e2:	f806 8c02 	strb.w	r8, [r6, #-2]
 80194e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80194e8:	4474      	add	r4, lr
 80194ea:	3603      	adds	r6, #3
 80194ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80194f0:	4410      	add	r0, r2
 80194f2:	e7a0      	b.n	8019436 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80194f4:	2700      	movs	r7, #0
 80194f6:	1bda      	subs	r2, r3, r7
 80194f8:	2a00      	cmp	r2, #0
 80194fa:	dc3e      	bgt.n	801957a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80194fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019500:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019504:	441d      	add	r5, r3
 8019506:	9b01      	ldr	r3, [sp, #4]
 8019508:	2b00      	cmp	r3, #0
 801950a:	f340 809e 	ble.w	801964a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801950e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019512:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019514:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019518:	eeb0 6a62 	vmov.f32	s12, s5
 801951c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019520:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019524:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019528:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801952c:	eeb0 6a43 	vmov.f32	s12, s6
 8019530:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019534:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8019538:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801953c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019540:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019544:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019548:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801954c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019550:	ee12 2a90 	vmov	r2, s5
 8019554:	eef0 2a47 	vmov.f32	s5, s14
 8019558:	fb92 fef3 	sdiv	lr, r2, r3
 801955c:	ee13 2a10 	vmov	r2, s6
 8019560:	eeb0 3a67 	vmov.f32	s6, s15
 8019564:	fb92 f3f3 	sdiv	r3, r2, r3
 8019568:	9314      	str	r3, [sp, #80]	@ 0x50
 801956a:	9b01      	ldr	r3, [sp, #4]
 801956c:	9a04      	ldr	r2, [sp, #16]
 801956e:	3b01      	subs	r3, #1
 8019570:	9301      	str	r3, [sp, #4]
 8019572:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019574:	bf08      	it	eq
 8019576:	4613      	moveq	r3, r2
 8019578:	e72b      	b.n	80193d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801957a:	1426      	asrs	r6, r4, #16
 801957c:	d460      	bmi.n	8019640 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801957e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019582:	42b2      	cmp	r2, r6
 8019584:	dd5c      	ble.n	8019640 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019586:	ea5f 4820 	movs.w	r8, r0, asr #16
 801958a:	d459      	bmi.n	8019640 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801958c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019590:	4542      	cmp	r2, r8
 8019592:	dd55      	ble.n	8019640 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019594:	9a02      	ldr	r2, [sp, #8]
 8019596:	9903      	ldr	r1, [sp, #12]
 8019598:	fb08 6602 	mla	r6, r8, r2, r6
 801959c:	0872      	lsrs	r2, r6, #1
 801959e:	07f6      	lsls	r6, r6, #31
 80195a0:	5c8a      	ldrb	r2, [r1, r2]
 80195a2:	bf54      	ite	pl
 80195a4:	f002 020f 	andpl.w	r2, r2, #15
 80195a8:	1112      	asrmi	r2, r2, #4
 80195aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80195ae:	b2d2      	uxtb	r2, r2
 80195b0:	2a00      	cmp	r2, #0
 80195b2:	d045      	beq.n	8019640 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80195b4:	4926      	ldr	r1, [pc, #152]	@ (8019650 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80195b6:	f8d1 8000 	ldr.w	r8, [r1]
 80195ba:	9905      	ldr	r1, [sp, #20]
 80195bc:	fa5f fb88 	uxtb.w	fp, r8
 80195c0:	434a      	muls	r2, r1
 80195c2:	1c56      	adds	r6, r2, #1
 80195c4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80195c8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80195cc:	1212      	asrs	r2, r2, #8
 80195ce:	f815 9006 	ldrb.w	r9, [r5, r6]
 80195d2:	fa1f fa82 	uxth.w	sl, r2
 80195d6:	43d2      	mvns	r2, r2
 80195d8:	fb1b fb0a 	smulbb	fp, fp, sl
 80195dc:	b2d2      	uxtb	r2, r2
 80195de:	fb09 b902 	mla	r9, r9, r2, fp
 80195e2:	fa1f f989 	uxth.w	r9, r9
 80195e6:	f109 0b01 	add.w	fp, r9, #1
 80195ea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80195ee:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80195f2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80195f6:	fb1b fb0a 	smulbb	fp, fp, sl
 80195fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80195fe:	fb18 fa0a 	smulbb	sl, r8, sl
 8019602:	f805 9006 	strb.w	r9, [r5, r6]
 8019606:	442e      	add	r6, r5
 8019608:	f896 8002 	ldrb.w	r8, [r6, #2]
 801960c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019610:	fb08 aa02 	mla	sl, r8, r2, sl
 8019614:	fb09 b902 	mla	r9, r9, r2, fp
 8019618:	fa1f fa8a 	uxth.w	sl, sl
 801961c:	fa1f f989 	uxth.w	r9, r9
 8019620:	f10a 0801 	add.w	r8, sl, #1
 8019624:	f109 0b01 	add.w	fp, r9, #1
 8019628:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801962c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019630:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019634:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019638:	f886 a002 	strb.w	sl, [r6, #2]
 801963c:	f886 9001 	strb.w	r9, [r6, #1]
 8019640:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019642:	4474      	add	r4, lr
 8019644:	3701      	adds	r7, #1
 8019646:	4410      	add	r0, r2
 8019648:	e755      	b.n	80194f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801964a:	b007      	add	sp, #28
 801964c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019650:	24025200 	.word	0x24025200

08019654 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019658:	b085      	sub	sp, #20
 801965a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801965e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019660:	9203      	str	r2, [sp, #12]
 8019662:	6860      	ldr	r0, [r4, #4]
 8019664:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8019668:	9100      	str	r1, [sp, #0]
 801966a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801966e:	fb00 2606 	mla	r6, r0, r6, r2
 8019672:	6822      	ldr	r2, [r4, #0]
 8019674:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019678:	4416      	add	r6, r2
 801967a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801967e:	3201      	adds	r2, #1
 8019680:	f022 0201 	bic.w	r2, r2, #1
 8019684:	9201      	str	r2, [sp, #4]
 8019686:	f8dc 2000 	ldr.w	r2, [ip]
 801968a:	9202      	str	r2, [sp, #8]
 801968c:	9a00      	ldr	r2, [sp, #0]
 801968e:	2a00      	cmp	r2, #0
 8019690:	dc03      	bgt.n	801969a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8019692:	9a03      	ldr	r2, [sp, #12]
 8019694:	2a00      	cmp	r2, #0
 8019696:	f340 8140 	ble.w	801991a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801969a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801969c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80196a0:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 80196a4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80196a6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80196aa:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	dd0e      	ble.n	80196d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80196b2:	142a      	asrs	r2, r5, #16
 80196b4:	d405      	bmi.n	80196c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80196b6:	4572      	cmp	r2, lr
 80196b8:	da03      	bge.n	80196c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80196ba:	1422      	asrs	r2, r4, #16
 80196bc:	d401      	bmi.n	80196c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80196be:	42ba      	cmp	r2, r7
 80196c0:	db07      	blt.n	80196d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80196c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80196c4:	3b01      	subs	r3, #1
 80196c6:	3603      	adds	r6, #3
 80196c8:	4415      	add	r5, r2
 80196ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80196cc:	4414      	add	r4, r2
 80196ce:	e7ee      	b.n	80196ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80196d0:	d072      	beq.n	80197b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80196d2:	1e5a      	subs	r2, r3, #1
 80196d4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80196d6:	fb00 5002 	mla	r0, r0, r2, r5
 80196da:	1400      	asrs	r0, r0, #16
 80196dc:	d463      	bmi.n	80197a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196de:	4570      	cmp	r0, lr
 80196e0:	da61      	bge.n	80197a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196e2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80196e4:	fb00 4202 	mla	r2, r0, r2, r4
 80196e8:	1412      	asrs	r2, r2, #16
 80196ea:	d45c      	bmi.n	80197a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196ec:	42ba      	cmp	r2, r7
 80196ee:	da5a      	bge.n	80197a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196f0:	1cf0      	adds	r0, r6, #3
 80196f2:	469a      	mov	sl, r3
 80196f4:	f1ba 0f00 	cmp.w	sl, #0
 80196f8:	dd59      	ble.n	80197ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80196fa:	142a      	asrs	r2, r5, #16
 80196fc:	9901      	ldr	r1, [sp, #4]
 80196fe:	1427      	asrs	r7, r4, #16
 8019700:	fb01 2707 	mla	r7, r1, r7, r2
 8019704:	9902      	ldr	r1, [sp, #8]
 8019706:	087a      	lsrs	r2, r7, #1
 8019708:	5c8a      	ldrb	r2, [r1, r2]
 801970a:	07f9      	lsls	r1, r7, #31
 801970c:	bf54      	ite	pl
 801970e:	f002 020f 	andpl.w	r2, r2, #15
 8019712:	1112      	asrmi	r2, r2, #4
 8019714:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019718:	b2d2      	uxtb	r2, r2
 801971a:	2a00      	cmp	r2, #0
 801971c:	d03b      	beq.n	8019796 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801971e:	4980      	ldr	r1, [pc, #512]	@ (8019920 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019720:	2aff      	cmp	r2, #255	@ 0xff
 8019722:	680f      	ldr	r7, [r1, #0]
 8019724:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019728:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801972c:	b2ff      	uxtb	r7, r7
 801972e:	f000 80ed 	beq.w	801990c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8019732:	fa1f f882 	uxth.w	r8, r2
 8019736:	43d2      	mvns	r2, r2
 8019738:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801973c:	fb17 f708 	smulbb	r7, r7, r8
 8019740:	b2d2      	uxtb	r2, r2
 8019742:	fb19 f908 	smulbb	r9, r9, r8
 8019746:	fb0e 7702 	mla	r7, lr, r2, r7
 801974a:	fb1b f808 	smulbb	r8, fp, r8
 801974e:	b2bf      	uxth	r7, r7
 8019750:	f107 0e01 	add.w	lr, r7, #1
 8019754:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019758:	123f      	asrs	r7, r7, #8
 801975a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801975e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8019762:	fb07 9902 	mla	r9, r7, r2, r9
 8019766:	fa1f f989 	uxth.w	r9, r9
 801976a:	f109 0701 	add.w	r7, r9, #1
 801976e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019772:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8019776:	fb07 8802 	mla	r8, r7, r2, r8
 801977a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801977e:	fa1f f888 	uxth.w	r8, r8
 8019782:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019786:	f108 0201 	add.w	r2, r8, #1
 801978a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801978e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019792:	f800 8c01 	strb.w	r8, [r0, #-1]
 8019796:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019798:	3003      	adds	r0, #3
 801979a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801979e:	4415      	add	r5, r2
 80197a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80197a2:	4414      	add	r4, r2
 80197a4:	e7a6      	b.n	80196f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80197a6:	2700      	movs	r7, #0
 80197a8:	1bda      	subs	r2, r3, r7
 80197aa:	2a00      	cmp	r2, #0
 80197ac:	dc40      	bgt.n	8019830 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80197ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80197b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80197b6:	441e      	add	r6, r3
 80197b8:	9b00      	ldr	r3, [sp, #0]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	f340 80ad 	ble.w	801991a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80197c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80197c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80197ca:	eeb0 6a62 	vmov.f32	s12, s5
 80197ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80197d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80197d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197da:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80197de:	eeb0 6a43 	vmov.f32	s12, s6
 80197e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197e6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80197ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80197ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80197f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80197f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80197fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80197fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019802:	ee12 2a90 	vmov	r2, s5
 8019806:	eef0 2a47 	vmov.f32	s5, s14
 801980a:	fb92 f3f3 	sdiv	r3, r2, r3
 801980e:	ee13 2a10 	vmov	r2, s6
 8019812:	9311      	str	r3, [sp, #68]	@ 0x44
 8019814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019816:	eeb0 3a67 	vmov.f32	s6, s15
 801981a:	fb92 f3f3 	sdiv	r3, r2, r3
 801981e:	9312      	str	r3, [sp, #72]	@ 0x48
 8019820:	9b00      	ldr	r3, [sp, #0]
 8019822:	9a03      	ldr	r2, [sp, #12]
 8019824:	3b01      	subs	r3, #1
 8019826:	9300      	str	r3, [sp, #0]
 8019828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801982a:	bf08      	it	eq
 801982c:	4613      	moveq	r3, r2
 801982e:	e72d      	b.n	801968c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019830:	1428      	asrs	r0, r5, #16
 8019832:	d45c      	bmi.n	80198ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019834:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019838:	4282      	cmp	r2, r0
 801983a:	dd58      	ble.n	80198ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801983c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019840:	d455      	bmi.n	80198ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019842:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019846:	4572      	cmp	r2, lr
 8019848:	dd51      	ble.n	80198ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801984a:	9a01      	ldr	r2, [sp, #4]
 801984c:	9902      	ldr	r1, [sp, #8]
 801984e:	fb0e 0002 	mla	r0, lr, r2, r0
 8019852:	0842      	lsrs	r2, r0, #1
 8019854:	07c0      	lsls	r0, r0, #31
 8019856:	5c8a      	ldrb	r2, [r1, r2]
 8019858:	bf54      	ite	pl
 801985a:	f002 020f 	andpl.w	r2, r2, #15
 801985e:	1112      	asrmi	r2, r2, #4
 8019860:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019864:	b2d2      	uxtb	r2, r2
 8019866:	2a00      	cmp	r2, #0
 8019868:	d041      	beq.n	80198ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801986a:	492d      	ldr	r1, [pc, #180]	@ (8019920 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801986c:	2aff      	cmp	r2, #255	@ 0xff
 801986e:	6808      	ldr	r0, [r1, #0]
 8019870:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8019874:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019878:	fa5f fe80 	uxtb.w	lr, r0
 801987c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8019880:	d03b      	beq.n	80198fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019882:	fa1f f982 	uxth.w	r9, r2
 8019886:	4438      	add	r0, r7
 8019888:	43d2      	mvns	r2, r2
 801988a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801988e:	fb1e fe09 	smulbb	lr, lr, r9
 8019892:	fb1a fa09 	smulbb	sl, sl, r9
 8019896:	b2d2      	uxtb	r2, r2
 8019898:	fb1b f909 	smulbb	r9, fp, r9
 801989c:	fb08 ee02 	mla	lr, r8, r2, lr
 80198a0:	fa1f fe8e 	uxth.w	lr, lr
 80198a4:	f10e 0801 	add.w	r8, lr, #1
 80198a8:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80198ac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80198b0:	f806 e000 	strb.w	lr, [r6, r0]
 80198b4:	4430      	add	r0, r6
 80198b6:	f890 e001 	ldrb.w	lr, [r0, #1]
 80198ba:	fb0e aa02 	mla	sl, lr, r2, sl
 80198be:	fa1f fa8a 	uxth.w	sl, sl
 80198c2:	f10a 0e01 	add.w	lr, sl, #1
 80198c6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80198ca:	f890 e002 	ldrb.w	lr, [r0, #2]
 80198ce:	fb0e 9902 	mla	r9, lr, r2, r9
 80198d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80198d6:	fa1f f989 	uxth.w	r9, r9
 80198da:	f880 a001 	strb.w	sl, [r0, #1]
 80198de:	f109 0201 	add.w	r2, r9, #1
 80198e2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80198e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198ea:	f880 9002 	strb.w	r9, [r0, #2]
 80198ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80198f0:	3701      	adds	r7, #1
 80198f2:	4415      	add	r5, r2
 80198f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80198f6:	4414      	add	r4, r2
 80198f8:	e756      	b.n	80197a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80198fa:	4438      	add	r0, r7
 80198fc:	f806 e000 	strb.w	lr, [r6, r0]
 8019900:	4430      	add	r0, r6
 8019902:	f880 a001 	strb.w	sl, [r0, #1]
 8019906:	f880 b002 	strb.w	fp, [r0, #2]
 801990a:	e7f0      	b.n	80198ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801990c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019910:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019914:	f800 bc01 	strb.w	fp, [r0, #-1]
 8019918:	e73d      	b.n	8019796 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801991a:	b005      	add	sp, #20
 801991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019920:	24025200 	.word	0x24025200

08019924 <_ZN8touchgfx8LCD24bppD1Ev>:
 8019924:	4770      	bx	lr

08019926 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8019926:	4770      	bx	lr

08019928 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8019928:	4770      	bx	lr

0801992a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801992a:	4770      	bx	lr

0801992c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801992c:	4770      	bx	lr

0801992e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801992e:	4770      	bx	lr

08019930 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019930:	4770      	bx	lr

08019932 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8019932:	4770      	bx	lr

08019934 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8019934:	4770      	bx	lr

08019936 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019936:	4770      	bx	lr

08019938 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019938:	4770      	bx	lr

0801993a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801993a:	4770      	bx	lr

0801993c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801993c:	4770      	bx	lr

0801993e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801993e:	4770      	bx	lr

08019940 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019940:	4770      	bx	lr

08019942 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019942:	4770      	bx	lr

08019944 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019944:	4770      	bx	lr

08019946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019946:	4770      	bx	lr

08019948 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019948:	4770      	bx	lr

0801994a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801994a:	4770      	bx	lr

0801994c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801994c:	4770      	bx	lr

0801994e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801994e:	4770      	bx	lr

08019950 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019950:	4770      	bx	lr

08019952 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019952:	4770      	bx	lr

08019954 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019954:	4770      	bx	lr
	...

08019958 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801995a:	4606      	mov	r6, r0
 801995c:	b087      	sub	sp, #28
 801995e:	4615      	mov	r5, r2
 8019960:	461f      	mov	r7, r3
 8019962:	b353      	cbz	r3, 80199ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019964:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019968:	2b00      	cmp	r3, #0
 801996a:	dd26      	ble.n	80199ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801996c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019970:	2b00      	cmp	r3, #0
 8019972:	dd22      	ble.n	80199ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019974:	6808      	ldr	r0, [r1, #0]
 8019976:	aa04      	add	r2, sp, #16
 8019978:	6849      	ldr	r1, [r1, #4]
 801997a:	4c1b      	ldr	r4, [pc, #108]	@ (80199e8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801997c:	c203      	stmia	r2!, {r0, r1}
 801997e:	a804      	add	r0, sp, #16
 8019980:	f7fa f9da 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019984:	6820      	ldr	r0, [r4, #0]
 8019986:	6803      	ldr	r3, [r0, #0]
 8019988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801998a:	4798      	blx	r3
 801998c:	2fff      	cmp	r7, #255	@ 0xff
 801998e:	d016      	beq.n	80199be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019990:	f010 0f08 	tst.w	r0, #8
 8019994:	6820      	ldr	r0, [r4, #0]
 8019996:	d015      	beq.n	80199c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8019998:	2400      	movs	r4, #0
 801999a:	6801      	ldr	r1, [r0, #0]
 801999c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80199a0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80199a4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80199a8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80199ac:	9401      	str	r4, [sp, #4]
 80199ae:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80199b2:	9400      	str	r4, [sp, #0]
 80199b4:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 80199b6:	4629      	mov	r1, r5
 80199b8:	47a0      	blx	r4
 80199ba:	b007      	add	sp, #28
 80199bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199be:	f010 0f02 	tst.w	r0, #2
 80199c2:	e7e7      	b.n	8019994 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80199c4:	6803      	ldr	r3, [r0, #0]
 80199c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80199c8:	4798      	blx	r3
 80199ca:	4b08      	ldr	r3, [pc, #32]	@ (80199ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80199cc:	4601      	mov	r1, r0
 80199ce:	4630      	mov	r0, r6
 80199d0:	881a      	ldrh	r2, [r3, #0]
 80199d2:	6833      	ldr	r3, [r6, #0]
 80199d4:	e9cd 5700 	strd	r5, r7, [sp]
 80199d8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80199da:	ab04      	add	r3, sp, #16
 80199dc:	47a8      	blx	r5
 80199de:	6820      	ldr	r0, [r4, #0]
 80199e0:	6803      	ldr	r3, [r0, #0]
 80199e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80199e4:	4798      	blx	r3
 80199e6:	e7e8      	b.n	80199ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80199e8:	240251f0 	.word	0x240251f0
 80199ec:	240251ea 	.word	0x240251ea

080199f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80199f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199f4:	b08b      	sub	sp, #44	@ 0x2c
 80199f6:	460d      	mov	r5, r1
 80199f8:	4616      	mov	r6, r2
 80199fa:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80199fe:	f1b8 0f00 	cmp.w	r8, #0
 8019a02:	d047      	beq.n	8019a94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019a04:	6810      	ldr	r0, [r2, #0]
 8019a06:	ac06      	add	r4, sp, #24
 8019a08:	6851      	ldr	r1, [r2, #4]
 8019a0a:	4f51      	ldr	r7, [pc, #324]	@ (8019b50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8019a0c:	c403      	stmia	r4!, {r0, r1}
 8019a0e:	6818      	ldr	r0, [r3, #0]
 8019a10:	ac08      	add	r4, sp, #32
 8019a12:	6859      	ldr	r1, [r3, #4]
 8019a14:	c403      	stmia	r4!, {r0, r1}
 8019a16:	a806      	add	r0, sp, #24
 8019a18:	f7fa f98e 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019a1c:	4631      	mov	r1, r6
 8019a1e:	a808      	add	r0, sp, #32
 8019a20:	f7fa f9b2 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019a24:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019a28:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8019a2c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019a30:	6838      	ldr	r0, [r7, #0]
 8019a32:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019a36:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8019a3a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8019a3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019a42:	440d      	add	r5, r1
 8019a44:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019a48:	440a      	add	r2, r1
 8019a4a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019a4e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019a52:	4413      	add	r3, r2
 8019a54:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019a58:	6803      	ldr	r3, [r0, #0]
 8019a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019a5c:	4798      	blx	r3
 8019a5e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019a62:	d01a      	beq.n	8019a9a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8019a64:	f010 0f04 	tst.w	r0, #4
 8019a68:	6838      	ldr	r0, [r7, #0]
 8019a6a:	d019      	beq.n	8019aa0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8019a6c:	2100      	movs	r1, #0
 8019a6e:	6807      	ldr	r7, [r0, #0]
 8019a70:	b2a4      	uxth	r4, r4
 8019a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a76:	b2b6      	uxth	r6, r6
 8019a78:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8019a7c:	9401      	str	r4, [sp, #4]
 8019a7e:	9600      	str	r6, [sp, #0]
 8019a80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019a84:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8019a88:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019a8c:	9102      	str	r1, [sp, #8]
 8019a8e:	4629      	mov	r1, r5
 8019a90:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8019a92:	47a0      	blx	r4
 8019a94:	b00b      	add	sp, #44	@ 0x2c
 8019a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a9a:	f010 0f01 	tst.w	r0, #1
 8019a9e:	e7e3      	b.n	8019a68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8019aa0:	6803      	ldr	r3, [r0, #0]
 8019aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019aa4:	4798      	blx	r3
 8019aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8019b54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8019aa8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8019aac:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019ab0:	8813      	ldrh	r3, [r2, #0]
 8019ab2:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8019ab6:	fb03 f404 	mul.w	r4, r3, r4
 8019aba:	fb03 c101 	mla	r1, r3, r1, ip
 8019abe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019ac2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019ac6:	4408      	add	r0, r1
 8019ac8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8019acc:	4404      	add	r4, r0
 8019ace:	d02e      	beq.n	8019b2e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8019ad0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8019ad4:	1b9b      	subs	r3, r3, r6
 8019ad6:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8019ada:	1b96      	subs	r6, r2, r6
 8019adc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ae0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019ae4:	42a0      	cmp	r0, r4
 8019ae6:	d22d      	bcs.n	8019b44 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019ae8:	eb00 0e01 	add.w	lr, r0, r1
 8019aec:	4570      	cmp	r0, lr
 8019aee:	d210      	bcs.n	8019b12 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8019af0:	f890 9000 	ldrb.w	r9, [r0]
 8019af4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8019af8:	fb19 f90c 	smulbb	r9, r9, ip
 8019afc:	fb02 9208 	mla	r2, r2, r8, r9
 8019b00:	b292      	uxth	r2, r2
 8019b02:	f102 0901 	add.w	r9, r2, #1
 8019b06:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8019b0a:	1212      	asrs	r2, r2, #8
 8019b0c:	f800 2b01 	strb.w	r2, [r0], #1
 8019b10:	e7ec      	b.n	8019aec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8019b12:	4418      	add	r0, r3
 8019b14:	4435      	add	r5, r6
 8019b16:	e7e5      	b.n	8019ae4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8019b18:	8813      	ldrh	r3, [r2, #0]
 8019b1a:	1b9b      	subs	r3, r3, r6
 8019b1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b20:	4418      	add	r0, r3
 8019b22:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019b26:	1b9b      	subs	r3, r3, r6
 8019b28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b2c:	441d      	add	r5, r3
 8019b2e:	42a0      	cmp	r0, r4
 8019b30:	d208      	bcs.n	8019b44 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019b32:	eb00 0c01 	add.w	ip, r0, r1
 8019b36:	4560      	cmp	r0, ip
 8019b38:	d2ee      	bcs.n	8019b18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8019b3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019b3e:	f800 3b01 	strb.w	r3, [r0], #1
 8019b42:	e7f8      	b.n	8019b36 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8019b44:	6838      	ldr	r0, [r7, #0]
 8019b46:	6803      	ldr	r3, [r0, #0]
 8019b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b4a:	4798      	blx	r3
 8019b4c:	e7a2      	b.n	8019a94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019b4e:	bf00      	nop
 8019b50:	240251f0 	.word	0x240251f0
 8019b54:	240251ea 	.word	0x240251ea

08019b58 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	b085      	sub	sp, #20
 8019b5e:	9300      	str	r3, [sp, #0]
 8019b60:	4b41      	ldr	r3, [pc, #260]	@ (8019c68 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8019b62:	781b      	ldrb	r3, [r3, #0]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d136      	bne.n	8019bd6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8019b68:	4a40      	ldr	r2, [pc, #256]	@ (8019c6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019b6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019b6e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d131      	bne.n	8019bda <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8019b76:	4b3e      	ldr	r3, [pc, #248]	@ (8019c70 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b7c:	ac02      	add	r4, sp, #8
 8019b7e:	6808      	ldr	r0, [r1, #0]
 8019b80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019b84:	ab02      	add	r3, sp, #8
 8019b86:	6849      	ldr	r1, [r1, #4]
 8019b88:	4d3a      	ldr	r5, [pc, #232]	@ (8019c74 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8019b8a:	c303      	stmia	r3!, {r0, r1}
 8019b8c:	4669      	mov	r1, sp
 8019b8e:	4620      	mov	r0, r4
 8019b90:	f7fa f8fa 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019b94:	4668      	mov	r0, sp
 8019b96:	f7fa f8cf 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b9a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019b9e:	f8bd 2000 	ldrh.w	r2, [sp]
 8019ba2:	462e      	mov	r6, r5
 8019ba4:	6828      	ldr	r0, [r5, #0]
 8019ba6:	4413      	add	r3, r2
 8019ba8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019bac:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019bb0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019bb4:	4413      	add	r3, r2
 8019bb6:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019bba:	6803      	ldr	r3, [r0, #0]
 8019bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019bbe:	4798      	blx	r3
 8019bc0:	f010 0f01 	tst.w	r0, #1
 8019bc4:	d00b      	beq.n	8019bde <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8019bc6:	6828      	ldr	r0, [r5, #0]
 8019bc8:	6803      	ldr	r3, [r0, #0]
 8019bca:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019bd0:	4798      	blx	r3
 8019bd2:	b005      	add	sp, #20
 8019bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bd6:	4a26      	ldr	r2, [pc, #152]	@ (8019c70 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019bd8:	e7c7      	b.n	8019b6a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8019bda:	4b24      	ldr	r3, [pc, #144]	@ (8019c6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019bdc:	e7cc      	b.n	8019b78 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019bde:	6830      	ldr	r0, [r6, #0]
 8019be0:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8019be4:	6803      	ldr	r3, [r0, #0]
 8019be6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8019bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019bec:	4798      	blx	r3
 8019bee:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8019bf2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019bf6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8019bfa:	fb14 3402 	smlabb	r4, r4, r2, r3
 8019bfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019c02:	4404      	add	r4, r0
 8019c04:	6830      	ldr	r0, [r6, #0]
 8019c06:	6803      	ldr	r3, [r0, #0]
 8019c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019c0a:	4798      	blx	r3
 8019c0c:	4917      	ldr	r1, [pc, #92]	@ (8019c6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019c0e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019c12:	880b      	ldrh	r3, [r1, #0]
 8019c14:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8019c18:	fb03 c202 	mla	r2, r3, r2, ip
 8019c1c:	437b      	muls	r3, r7
 8019c1e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8019c22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019c26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c2a:	4410      	add	r0, r2
 8019c2c:	18c2      	adds	r2, r0, r3
 8019c2e:	4290      	cmp	r0, r2
 8019c30:	d214      	bcs.n	8019c5c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8019c32:	eb00 0c07 	add.w	ip, r0, r7
 8019c36:	4560      	cmp	r0, ip
 8019c38:	d204      	bcs.n	8019c44 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8019c3a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019c3e:	f800 3b01 	strb.w	r3, [r0], #1
 8019c42:	e7f8      	b.n	8019c36 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8019c44:	880b      	ldrh	r3, [r1, #0]
 8019c46:	1b5b      	subs	r3, r3, r5
 8019c48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c4c:	4418      	add	r0, r3
 8019c4e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019c52:	1b5b      	subs	r3, r3, r5
 8019c54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c58:	441c      	add	r4, r3
 8019c5a:	e7e8      	b.n	8019c2e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8019c5c:	6830      	ldr	r0, [r6, #0]
 8019c5e:	6803      	ldr	r3, [r0, #0]
 8019c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c62:	4798      	blx	r3
 8019c64:	e7b5      	b.n	8019bd2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8019c66:	bf00      	nop
 8019c68:	240251e8 	.word	0x240251e8
 8019c6c:	240251ea 	.word	0x240251ea
 8019c70:	240251ec 	.word	0x240251ec
 8019c74:	240251f0 	.word	0x240251f0

08019c78 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8019c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c7c:	b08f      	sub	sp, #60	@ 0x3c
 8019c7e:	461c      	mov	r4, r3
 8019c80:	9203      	str	r2, [sp, #12]
 8019c82:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019c86:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019c88:	6820      	ldr	r0, [r4, #0]
 8019c8a:	9100      	str	r1, [sp, #0]
 8019c8c:	9204      	str	r2, [sp, #16]
 8019c8e:	aa0a      	add	r2, sp, #40	@ 0x28
 8019c90:	6861      	ldr	r1, [r4, #4]
 8019c92:	c203      	stmia	r2!, {r0, r1}
 8019c94:	6818      	ldr	r0, [r3, #0]
 8019c96:	aa0c      	add	r2, sp, #48	@ 0x30
 8019c98:	6859      	ldr	r1, [r3, #4]
 8019c9a:	c203      	stmia	r2!, {r0, r1}
 8019c9c:	a80a      	add	r0, sp, #40	@ 0x28
 8019c9e:	f7fa f84b 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019ca2:	4621      	mov	r1, r4
 8019ca4:	a80c      	add	r0, sp, #48	@ 0x30
 8019ca6:	f7fa f86f 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019caa:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8019cae:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8019cb2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8019cb6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8019cba:	bfdb      	ittet	le
 8019cbc:	b2b3      	uxthle	r3, r6
 8019cbe:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8019cc2:	2301      	movgt	r3, #1
 8019cc4:	fb92 f3f3 	sdivle	r3, r2, r3
 8019cc8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8019ccc:	441d      	add	r5, r3
 8019cce:	fb92 f1f3 	sdiv	r1, r2, r3
 8019cd2:	fa1f fc81 	uxth.w	ip, r1
 8019cd6:	3d01      	subs	r5, #1
 8019cd8:	fb0c 2413 	mls	r4, ip, r3, r2
 8019cdc:	4661      	mov	r1, ip
 8019cde:	fb14 f406 	smulbb	r4, r4, r6
 8019ce2:	4404      	add	r4, r0
 8019ce4:	fb95 f5f3 	sdiv	r5, r5, r3
 8019ce8:	b2a4      	uxth	r4, r4
 8019cea:	b131      	cbz	r1, 8019cfa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8019cec:	9b03      	ldr	r3, [sp, #12]
 8019cee:	9900      	ldr	r1, [sp, #0]
 8019cf0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019cf4:	ba1b      	rev	r3, r3
 8019cf6:	4419      	add	r1, r3
 8019cf8:	9100      	str	r1, [sp, #0]
 8019cfa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019cfe:	b2ad      	uxth	r5, r5
 8019d00:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8019d04:	4418      	add	r0, r3
 8019d06:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8019d0a:	00ad      	lsls	r5, r5, #2
 8019d0c:	441a      	add	r2, r3
 8019d0e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8019d12:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8019d16:	9301      	str	r3, [sp, #4]
 8019d18:	4b79      	ldr	r3, [pc, #484]	@ (8019f00 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8019d1a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019d1e:	6818      	ldr	r0, [r3, #0]
 8019d20:	6803      	ldr	r3, [r0, #0]
 8019d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d24:	4798      	blx	r3
 8019d26:	4a77      	ldr	r2, [pc, #476]	@ (8019f04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8019d28:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8019d2c:	2c00      	cmp	r4, #0
 8019d2e:	8813      	ldrh	r3, [r2, #0]
 8019d30:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8019d34:	9209      	str	r2, [sp, #36]	@ 0x24
 8019d36:	fb03 c101 	mla	r1, r3, r1, ip
 8019d3a:	fb06 f303 	mul.w	r3, r6, r3
 8019d3e:	bf18      	it	ne
 8019d40:	2600      	movne	r6, #0
 8019d42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019d46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d4a:	4408      	add	r0, r1
 8019d4c:	4403      	add	r3, r0
 8019d4e:	9306      	str	r3, [sp, #24]
 8019d50:	f105 0304 	add.w	r3, r5, #4
 8019d54:	9305      	str	r3, [sp, #20]
 8019d56:	9b01      	ldr	r3, [sp, #4]
 8019d58:	bf08      	it	eq
 8019d5a:	461e      	moveq	r6, r3
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	b2b6      	uxth	r6, r6
 8019d60:	9302      	str	r3, [sp, #8]
 8019d62:	9a06      	ldr	r2, [sp, #24]
 8019d64:	4290      	cmp	r0, r2
 8019d66:	f080 80c2 	bcs.w	8019eee <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8019d6a:	b963      	cbnz	r3, 8019d86 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019d6c:	9b00      	ldr	r3, [sp, #0]
 8019d6e:	781a      	ldrb	r2, [r3, #0]
 8019d70:	0993      	lsrs	r3, r2, #6
 8019d72:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019d76:	9202      	str	r2, [sp, #8]
 8019d78:	1e5a      	subs	r2, r3, #1
 8019d7a:	2a02      	cmp	r2, #2
 8019d7c:	d815      	bhi.n	8019daa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8019d7e:	9a00      	ldr	r2, [sp, #0]
 8019d80:	b29b      	uxth	r3, r3
 8019d82:	3201      	adds	r2, #1
 8019d84:	9200      	str	r2, [sp, #0]
 8019d86:	b1b4      	cbz	r4, 8019db6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8019d88:	429c      	cmp	r4, r3
 8019d8a:	bf91      	iteee	ls
 8019d8c:	1b1c      	subls	r4, r3, r4
 8019d8e:	1ae4      	subhi	r4, r4, r3
 8019d90:	4635      	movhi	r5, r6
 8019d92:	f04f 0e00 	movhi.w	lr, #0
 8019d96:	bf9b      	ittet	ls
 8019d98:	fa1f fe84 	uxthls.w	lr, r4
 8019d9c:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8019da0:	b2a4      	uxthhi	r4, r4
 8019da2:	2400      	movls	r4, #0
 8019da4:	4673      	mov	r3, lr
 8019da6:	462e      	mov	r6, r5
 8019da8:	e7db      	b.n	8019d62 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8019daa:	9a00      	ldr	r2, [sp, #0]
 8019dac:	9b00      	ldr	r3, [sp, #0]
 8019dae:	3202      	adds	r2, #2
 8019db0:	785b      	ldrb	r3, [r3, #1]
 8019db2:	9200      	str	r2, [sp, #0]
 8019db4:	e7e7      	b.n	8019d86 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019db6:	2204      	movs	r2, #4
 8019db8:	9905      	ldr	r1, [sp, #20]
 8019dba:	429e      	cmp	r6, r3
 8019dbc:	4615      	mov	r5, r2
 8019dbe:	9a02      	ldr	r2, [sp, #8]
 8019dc0:	bf94      	ite	ls
 8019dc2:	eba3 0e06 	subls.w	lr, r3, r6
 8019dc6:	46a6      	movhi	lr, r4
 8019dc8:	fb15 1202 	smlabb	r2, r5, r2, r1
 8019dcc:	9903      	ldr	r1, [sp, #12]
 8019dce:	bf8c      	ite	hi
 8019dd0:	1af5      	subhi	r5, r6, r3
 8019dd2:	fa1f fe8e 	uxthls.w	lr, lr
 8019dd6:	f851 c002 	ldr.w	ip, [r1, r2]
 8019dda:	bf9a      	itte	ls
 8019ddc:	4625      	movls	r5, r4
 8019dde:	4632      	movls	r2, r6
 8019de0:	b2ad      	uxthhi	r5, r5
 8019de2:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8019de6:	bf88      	it	hi
 8019de8:	461a      	movhi	r2, r3
 8019dea:	b179      	cbz	r1, 8019e0c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8019dec:	29ff      	cmp	r1, #255	@ 0xff
 8019dee:	fa5f f98c 	uxtb.w	r9, ip
 8019df2:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8019df6:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8019dfa:	d126      	bne.n	8019e4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8019dfc:	9f04      	ldr	r7, [sp, #16]
 8019dfe:	2fff      	cmp	r7, #255	@ 0xff
 8019e00:	d123      	bne.n	8019e4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8019e02:	4682      	mov	sl, r0
 8019e04:	4611      	mov	r1, r2
 8019e06:	f10a 0a03 	add.w	sl, sl, #3
 8019e0a:	b9a9      	cbnz	r1, 8019e38 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8019e0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019e10:	429e      	cmp	r6, r3
 8019e12:	4410      	add	r0, r2
 8019e14:	d8c6      	bhi.n	8019da4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8019e16:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8019e1a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8019e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e20:	1b64      	subs	r4, r4, r5
 8019e22:	9a01      	ldr	r2, [sp, #4]
 8019e24:	881b      	ldrh	r3, [r3, #0]
 8019e26:	b2a4      	uxth	r4, r4
 8019e28:	1a9b      	subs	r3, r3, r2
 8019e2a:	2c00      	cmp	r4, #0
 8019e2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e30:	bf18      	it	ne
 8019e32:	2500      	movne	r5, #0
 8019e34:	4418      	add	r0, r3
 8019e36:	e7b5      	b.n	8019da4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8019e38:	3901      	subs	r1, #1
 8019e3a:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8019e3e:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8019e42:	f80a cc01 	strb.w	ip, [sl, #-1]
 8019e46:	b289      	uxth	r1, r1
 8019e48:	e7dd      	b.n	8019e06 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8019e4a:	9f04      	ldr	r7, [sp, #16]
 8019e4c:	fb07 fa01 	mul.w	sl, r7, r1
 8019e50:	f10a 0101 	add.w	r1, sl, #1
 8019e54:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8019e58:	1209      	asrs	r1, r1, #8
 8019e5a:	ea6f 0a01 	mvn.w	sl, r1
 8019e5e:	b289      	uxth	r1, r1
 8019e60:	fb19 f901 	smulbb	r9, r9, r1
 8019e64:	fa5f fa8a 	uxtb.w	sl, sl
 8019e68:	fb18 f801 	smulbb	r8, r8, r1
 8019e6c:	fb1c f101 	smulbb	r1, ip, r1
 8019e70:	fa1f f789 	uxth.w	r7, r9
 8019e74:	4684      	mov	ip, r0
 8019e76:	4691      	mov	r9, r2
 8019e78:	9707      	str	r7, [sp, #28]
 8019e7a:	b289      	uxth	r1, r1
 8019e7c:	fa1f f788 	uxth.w	r7, r8
 8019e80:	9708      	str	r7, [sp, #32]
 8019e82:	f10c 0c03 	add.w	ip, ip, #3
 8019e86:	f1b9 0f00 	cmp.w	r9, #0
 8019e8a:	d0bf      	beq.n	8019e0c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8019e8c:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8019e90:	f109 39ff 	add.w	r9, r9, #4294967295
 8019e94:	9f07      	ldr	r7, [sp, #28]
 8019e96:	fa1f f989 	uxth.w	r9, r9
 8019e9a:	fb08 780a 	mla	r8, r8, sl, r7
 8019e9e:	9f08      	ldr	r7, [sp, #32]
 8019ea0:	fa1f f888 	uxth.w	r8, r8
 8019ea4:	f108 0b01 	add.w	fp, r8, #1
 8019ea8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019eac:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019eb0:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8019eb4:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8019eb8:	fb08 780a 	mla	r8, r8, sl, r7
 8019ebc:	fa1f f888 	uxth.w	r8, r8
 8019ec0:	f108 0b01 	add.w	fp, r8, #1
 8019ec4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019ec8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019ecc:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8019ed0:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8019ed4:	fb08 180a 	mla	r8, r8, sl, r1
 8019ed8:	fa1f f888 	uxth.w	r8, r8
 8019edc:	f108 0b01 	add.w	fp, r8, #1
 8019ee0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019ee4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019ee8:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8019eec:	e7c9      	b.n	8019e82 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8019eee:	4b04      	ldr	r3, [pc, #16]	@ (8019f00 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8019ef0:	6818      	ldr	r0, [r3, #0]
 8019ef2:	6803      	ldr	r3, [r0, #0]
 8019ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019ef6:	4798      	blx	r3
 8019ef8:	b00f      	add	sp, #60	@ 0x3c
 8019efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019efe:	bf00      	nop
 8019f00:	240251f0 	.word	0x240251f0
 8019f04:	240251ea 	.word	0x240251ea

08019f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f0c:	b089      	sub	sp, #36	@ 0x24
 8019f0e:	4607      	mov	r7, r0
 8019f10:	4689      	mov	r9, r1
 8019f12:	4692      	mov	sl, r2
 8019f14:	ac08      	add	r4, sp, #32
 8019f16:	461e      	mov	r6, r3
 8019f18:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	f7fd ff77 	bl	8017e10 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	4605      	mov	r5, r0
 8019f26:	4620      	mov	r0, r4
 8019f28:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8019f2c:	f7fd feb6 	bl	8017c9c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019f30:	4683      	mov	fp, r0
 8019f32:	4620      	mov	r0, r4
 8019f34:	f7fd fee6 	bl	8017d04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019f38:	4653      	mov	r3, sl
 8019f3a:	464a      	mov	r2, r9
 8019f3c:	4639      	mov	r1, r7
 8019f3e:	9500      	str	r5, [sp, #0]
 8019f40:	e9cd b001 	strd	fp, r0, [sp, #4]
 8019f44:	a806      	add	r0, sp, #24
 8019f46:	47c0      	blx	r8
 8019f48:	a906      	add	r1, sp, #24
 8019f4a:	4630      	mov	r0, r6
 8019f4c:	f7fd fd8a 	bl	8017a64 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8019f50:	4628      	mov	r0, r5
 8019f52:	b009      	add	sp, #36	@ 0x24
 8019f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f58 <_ZN8touchgfx8LCD24bppD0Ev>:
 8019f58:	b510      	push	{r4, lr}
 8019f5a:	4604      	mov	r4, r0
 8019f5c:	216c      	movs	r1, #108	@ 0x6c
 8019f5e:	f008 fc60 	bl	8022822 <_ZdlPvj>
 8019f62:	4620      	mov	r0, r4
 8019f64:	bd10      	pop	{r4, pc}

08019f66 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8019f66:	b510      	push	{r4, lr}
 8019f68:	4604      	mov	r4, r0
 8019f6a:	2104      	movs	r1, #4
 8019f6c:	f008 fc59 	bl	8022822 <_ZdlPvj>
 8019f70:	4620      	mov	r0, r4
 8019f72:	bd10      	pop	{r4, pc}

08019f74 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8019f74:	b510      	push	{r4, lr}
 8019f76:	4604      	mov	r4, r0
 8019f78:	2104      	movs	r1, #4
 8019f7a:	f008 fc52 	bl	8022822 <_ZdlPvj>
 8019f7e:	4620      	mov	r0, r4
 8019f80:	bd10      	pop	{r4, pc}

08019f82 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8019f82:	b510      	push	{r4, lr}
 8019f84:	4604      	mov	r4, r0
 8019f86:	f640 0144 	movw	r1, #2116	@ 0x844
 8019f8a:	f008 fc4a 	bl	8022822 <_ZdlPvj>
 8019f8e:	4620      	mov	r0, r4
 8019f90:	bd10      	pop	{r4, pc}

08019f92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8019f92:	b510      	push	{r4, lr}
 8019f94:	4604      	mov	r4, r0
 8019f96:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8019f9a:	f008 fc42 	bl	8022822 <_ZdlPvj>
 8019f9e:	4620      	mov	r0, r4
 8019fa0:	bd10      	pop	{r4, pc}

08019fa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019fa2:	b510      	push	{r4, lr}
 8019fa4:	4604      	mov	r4, r0
 8019fa6:	2104      	movs	r1, #4
 8019fa8:	f008 fc3b 	bl	8022822 <_ZdlPvj>
 8019fac:	4620      	mov	r0, r4
 8019fae:	bd10      	pop	{r4, pc}

08019fb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019fb0:	b510      	push	{r4, lr}
 8019fb2:	4604      	mov	r4, r0
 8019fb4:	2104      	movs	r1, #4
 8019fb6:	f008 fc34 	bl	8022822 <_ZdlPvj>
 8019fba:	4620      	mov	r0, r4
 8019fbc:	bd10      	pop	{r4, pc}

08019fbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019fbe:	b510      	push	{r4, lr}
 8019fc0:	4604      	mov	r4, r0
 8019fc2:	2104      	movs	r1, #4
 8019fc4:	f008 fc2d 	bl	8022822 <_ZdlPvj>
 8019fc8:	4620      	mov	r0, r4
 8019fca:	bd10      	pop	{r4, pc}

08019fcc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019fcc:	b510      	push	{r4, lr}
 8019fce:	4604      	mov	r4, r0
 8019fd0:	2104      	movs	r1, #4
 8019fd2:	f008 fc26 	bl	8022822 <_ZdlPvj>
 8019fd6:	4620      	mov	r0, r4
 8019fd8:	bd10      	pop	{r4, pc}

08019fda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019fda:	b510      	push	{r4, lr}
 8019fdc:	4604      	mov	r4, r0
 8019fde:	2104      	movs	r1, #4
 8019fe0:	f008 fc1f 	bl	8022822 <_ZdlPvj>
 8019fe4:	4620      	mov	r0, r4
 8019fe6:	bd10      	pop	{r4, pc}

08019fe8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019fe8:	b510      	push	{r4, lr}
 8019fea:	4604      	mov	r4, r0
 8019fec:	2104      	movs	r1, #4
 8019fee:	f008 fc18 	bl	8022822 <_ZdlPvj>
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	bd10      	pop	{r4, pc}

08019ff6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019ff6:	b510      	push	{r4, lr}
 8019ff8:	4604      	mov	r4, r0
 8019ffa:	2104      	movs	r1, #4
 8019ffc:	f008 fc11 	bl	8022822 <_ZdlPvj>
 801a000:	4620      	mov	r0, r4
 801a002:	bd10      	pop	{r4, pc}

0801a004 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a004:	b510      	push	{r4, lr}
 801a006:	4604      	mov	r4, r0
 801a008:	2104      	movs	r1, #4
 801a00a:	f008 fc0a 	bl	8022822 <_ZdlPvj>
 801a00e:	4620      	mov	r0, r4
 801a010:	bd10      	pop	{r4, pc}

0801a012 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a012:	b510      	push	{r4, lr}
 801a014:	4604      	mov	r4, r0
 801a016:	2104      	movs	r1, #4
 801a018:	f008 fc03 	bl	8022822 <_ZdlPvj>
 801a01c:	4620      	mov	r0, r4
 801a01e:	bd10      	pop	{r4, pc}

0801a020 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a020:	b510      	push	{r4, lr}
 801a022:	4604      	mov	r4, r0
 801a024:	2104      	movs	r1, #4
 801a026:	f008 fbfc 	bl	8022822 <_ZdlPvj>
 801a02a:	4620      	mov	r0, r4
 801a02c:	bd10      	pop	{r4, pc}

0801a02e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a02e:	b510      	push	{r4, lr}
 801a030:	4604      	mov	r4, r0
 801a032:	2104      	movs	r1, #4
 801a034:	f008 fbf5 	bl	8022822 <_ZdlPvj>
 801a038:	4620      	mov	r0, r4
 801a03a:	bd10      	pop	{r4, pc}

0801a03c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a03c:	b510      	push	{r4, lr}
 801a03e:	4604      	mov	r4, r0
 801a040:	2104      	movs	r1, #4
 801a042:	f008 fbee 	bl	8022822 <_ZdlPvj>
 801a046:	4620      	mov	r0, r4
 801a048:	bd10      	pop	{r4, pc}

0801a04a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a04a:	b510      	push	{r4, lr}
 801a04c:	4604      	mov	r4, r0
 801a04e:	2104      	movs	r1, #4
 801a050:	f008 fbe7 	bl	8022822 <_ZdlPvj>
 801a054:	4620      	mov	r0, r4
 801a056:	bd10      	pop	{r4, pc}

0801a058 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a058:	b510      	push	{r4, lr}
 801a05a:	4604      	mov	r4, r0
 801a05c:	2104      	movs	r1, #4
 801a05e:	f008 fbe0 	bl	8022822 <_ZdlPvj>
 801a062:	4620      	mov	r0, r4
 801a064:	bd10      	pop	{r4, pc}

0801a066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a066:	b510      	push	{r4, lr}
 801a068:	4604      	mov	r4, r0
 801a06a:	2104      	movs	r1, #4
 801a06c:	f008 fbd9 	bl	8022822 <_ZdlPvj>
 801a070:	4620      	mov	r0, r4
 801a072:	bd10      	pop	{r4, pc}

0801a074 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a074:	b510      	push	{r4, lr}
 801a076:	4604      	mov	r4, r0
 801a078:	2104      	movs	r1, #4
 801a07a:	f008 fbd2 	bl	8022822 <_ZdlPvj>
 801a07e:	4620      	mov	r0, r4
 801a080:	bd10      	pop	{r4, pc}

0801a082 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a082:	b510      	push	{r4, lr}
 801a084:	4604      	mov	r4, r0
 801a086:	2104      	movs	r1, #4
 801a088:	f008 fbcb 	bl	8022822 <_ZdlPvj>
 801a08c:	4620      	mov	r0, r4
 801a08e:	bd10      	pop	{r4, pc}

0801a090 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a090:	b510      	push	{r4, lr}
 801a092:	4604      	mov	r4, r0
 801a094:	2104      	movs	r1, #4
 801a096:	f008 fbc4 	bl	8022822 <_ZdlPvj>
 801a09a:	4620      	mov	r0, r4
 801a09c:	bd10      	pop	{r4, pc}

0801a09e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a09e:	b510      	push	{r4, lr}
 801a0a0:	4604      	mov	r4, r0
 801a0a2:	2104      	movs	r1, #4
 801a0a4:	f008 fbbd 	bl	8022822 <_ZdlPvj>
 801a0a8:	4620      	mov	r0, r4
 801a0aa:	bd10      	pop	{r4, pc}

0801a0ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a0ac:	b510      	push	{r4, lr}
 801a0ae:	4604      	mov	r4, r0
 801a0b0:	2104      	movs	r1, #4
 801a0b2:	f008 fbb6 	bl	8022822 <_ZdlPvj>
 801a0b6:	4620      	mov	r0, r4
 801a0b8:	bd10      	pop	{r4, pc}
	...

0801a0bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0c0:	b08f      	sub	sp, #60	@ 0x3c
 801a0c2:	461c      	mov	r4, r3
 801a0c4:	460e      	mov	r6, r1
 801a0c6:	9206      	str	r2, [sp, #24]
 801a0c8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a0cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a0ce:	9202      	str	r2, [sp, #8]
 801a0d0:	2a00      	cmp	r2, #0
 801a0d2:	f000 8128 	beq.w	801a326 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a0d6:	6820      	ldr	r0, [r4, #0]
 801a0d8:	aa0a      	add	r2, sp, #40	@ 0x28
 801a0da:	6861      	ldr	r1, [r4, #4]
 801a0dc:	c203      	stmia	r2!, {r0, r1}
 801a0de:	6818      	ldr	r0, [r3, #0]
 801a0e0:	aa0c      	add	r2, sp, #48	@ 0x30
 801a0e2:	6859      	ldr	r1, [r3, #4]
 801a0e4:	c203      	stmia	r2!, {r0, r1}
 801a0e6:	a80a      	add	r0, sp, #40	@ 0x28
 801a0e8:	f7f9 fe26 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0ec:	4621      	mov	r1, r4
 801a0ee:	a80c      	add	r0, sp, #48	@ 0x30
 801a0f0:	f7f9 fe4a 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a0f4:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801a0f8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a0fc:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801a100:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a104:	bfdb      	ittet	le
 801a106:	b2bb      	uxthle	r3, r7
 801a108:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a10c:	2301      	movgt	r3, #1
 801a10e:	fb92 f3f3 	sdivle	r3, r2, r3
 801a112:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a116:	441d      	add	r5, r3
 801a118:	fb92 f1f3 	sdiv	r1, r2, r3
 801a11c:	fa1f fc81 	uxth.w	ip, r1
 801a120:	3d01      	subs	r5, #1
 801a122:	fb0c 2413 	mls	r4, ip, r3, r2
 801a126:	4661      	mov	r1, ip
 801a128:	fb14 f407 	smulbb	r4, r4, r7
 801a12c:	4404      	add	r4, r0
 801a12e:	fb95 f5f3 	sdiv	r5, r5, r3
 801a132:	b2a4      	uxth	r4, r4
 801a134:	b121      	cbz	r1, 801a140 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801a136:	9b06      	ldr	r3, [sp, #24]
 801a138:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a13c:	ba1b      	rev	r3, r3
 801a13e:	441e      	add	r6, r3
 801a140:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a144:	b2ad      	uxth	r5, r5
 801a146:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801a14a:	4418      	add	r0, r3
 801a14c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a150:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801a154:	00ad      	lsls	r5, r5, #2
 801a156:	441a      	add	r2, r3
 801a158:	4b74      	ldr	r3, [pc, #464]	@ (801a32c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a15a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a15e:	6818      	ldr	r0, [r3, #0]
 801a160:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a164:	6803      	ldr	r3, [r0, #0]
 801a166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a168:	4798      	blx	r3
 801a16a:	4a71      	ldr	r2, [pc, #452]	@ (801a330 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801a16c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a170:	2c00      	cmp	r4, #0
 801a172:	8813      	ldrh	r3, [r2, #0]
 801a174:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a178:	9209      	str	r2, [sp, #36]	@ 0x24
 801a17a:	fb03 c101 	mla	r1, r3, r1, ip
 801a17e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a182:	fb03 f307 	mul.w	r3, r3, r7
 801a186:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a18a:	9204      	str	r2, [sp, #16]
 801a18c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a190:	9a02      	ldr	r2, [sp, #8]
 801a192:	4408      	add	r0, r1
 801a194:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801a198:	4403      	add	r3, r0
 801a19a:	b292      	uxth	r2, r2
 801a19c:	9307      	str	r3, [sp, #28]
 801a19e:	f105 0304 	add.w	r3, r5, #4
 801a1a2:	bf0c      	ite	eq
 801a1a4:	4645      	moveq	r5, r8
 801a1a6:	2500      	movne	r5, #0
 801a1a8:	9308      	str	r3, [sp, #32]
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	b2ad      	uxth	r5, r5
 801a1ae:	9205      	str	r2, [sp, #20]
 801a1b0:	9303      	str	r3, [sp, #12]
 801a1b2:	9a07      	ldr	r2, [sp, #28]
 801a1b4:	4282      	cmp	r2, r0
 801a1b6:	f240 80b1 	bls.w	801a31c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801a1ba:	b95b      	cbnz	r3, 801a1d4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801a1bc:	7832      	ldrb	r2, [r6, #0]
 801a1be:	0993      	lsrs	r3, r2, #6
 801a1c0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a1c4:	9203      	str	r2, [sp, #12]
 801a1c6:	1e5a      	subs	r2, r3, #1
 801a1c8:	2a02      	cmp	r2, #2
 801a1ca:	bf8d      	iteet	hi
 801a1cc:	7873      	ldrbhi	r3, [r6, #1]
 801a1ce:	3601      	addls	r6, #1
 801a1d0:	b29b      	uxthls	r3, r3
 801a1d2:	3602      	addhi	r6, #2
 801a1d4:	b184      	cbz	r4, 801a1f8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801a1d6:	429c      	cmp	r4, r3
 801a1d8:	bf91      	iteee	ls
 801a1da:	1b1c      	subls	r4, r3, r4
 801a1dc:	1ae4      	subhi	r4, r4, r3
 801a1de:	4629      	movhi	r1, r5
 801a1e0:	f04f 0e00 	movhi.w	lr, #0
 801a1e4:	bf9b      	ittet	ls
 801a1e6:	fa1f fe84 	uxthls.w	lr, r4
 801a1ea:	2400      	movls	r4, #0
 801a1ec:	b2a4      	uxthhi	r4, r4
 801a1ee:	fa1f f188 	uxthls.w	r1, r8
 801a1f2:	4673      	mov	r3, lr
 801a1f4:	460d      	mov	r5, r1
 801a1f6:	e7dc      	b.n	801a1b2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801a1f8:	2203      	movs	r2, #3
 801a1fa:	9908      	ldr	r1, [sp, #32]
 801a1fc:	42ab      	cmp	r3, r5
 801a1fe:	4617      	mov	r7, r2
 801a200:	9a03      	ldr	r2, [sp, #12]
 801a202:	bf24      	itt	cs
 801a204:	eba3 0e05 	subcs.w	lr, r3, r5
 801a208:	9501      	strcs	r5, [sp, #4]
 801a20a:	fb17 1702 	smlabb	r7, r7, r2, r1
 801a20e:	9a06      	ldr	r2, [sp, #24]
 801a210:	bf34      	ite	cc
 801a212:	1ae9      	subcc	r1, r5, r3
 801a214:	fa1f fe8e 	uxthcs.w	lr, lr
 801a218:	4417      	add	r7, r2
 801a21a:	9a02      	ldr	r2, [sp, #8]
 801a21c:	bf2f      	iteee	cs
 801a21e:	4621      	movcs	r1, r4
 801a220:	b289      	uxthcc	r1, r1
 801a222:	9301      	strcc	r3, [sp, #4]
 801a224:	46a6      	movcc	lr, r4
 801a226:	2aff      	cmp	r2, #255	@ 0xff
 801a228:	d11e      	bne.n	801a268 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801a22a:	4681      	mov	r9, r0
 801a22c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a230:	f109 0903 	add.w	r9, r9, #3
 801a234:	f1bc 0f00 	cmp.w	ip, #0
 801a238:	d15f      	bne.n	801a2fa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801a23a:	9a01      	ldr	r2, [sp, #4]
 801a23c:	42ab      	cmp	r3, r5
 801a23e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a242:	4410      	add	r0, r2
 801a244:	d3d5      	bcc.n	801a1f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a246:	fa1f f188 	uxth.w	r1, r8
 801a24a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a250:	1a64      	subs	r4, r4, r1
 801a252:	881b      	ldrh	r3, [r3, #0]
 801a254:	b2a4      	uxth	r4, r4
 801a256:	eba3 0308 	sub.w	r3, r3, r8
 801a25a:	2c00      	cmp	r4, #0
 801a25c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a260:	bf18      	it	ne
 801a262:	2100      	movne	r1, #0
 801a264:	4418      	add	r0, r3
 801a266:	e7c4      	b.n	801a1f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a268:	4684      	mov	ip, r0
 801a26a:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a26e:	f10c 0c03 	add.w	ip, ip, #3
 801a272:	f1ba 0f00 	cmp.w	sl, #0
 801a276:	d0e0      	beq.n	801a23a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801a278:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801a27c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a280:	9a05      	ldr	r2, [sp, #20]
 801a282:	f897 9000 	ldrb.w	r9, [r7]
 801a286:	fa1f fa8a 	uxth.w	sl, sl
 801a28a:	fb1b fb02 	smulbb	fp, fp, r2
 801a28e:	9a04      	ldr	r2, [sp, #16]
 801a290:	fb09 b902 	mla	r9, r9, r2, fp
 801a294:	9a05      	ldr	r2, [sp, #20]
 801a296:	fa1f f989 	uxth.w	r9, r9
 801a29a:	f109 0b01 	add.w	fp, r9, #1
 801a29e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2a2:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801a2a6:	fb1b fb02 	smulbb	fp, fp, r2
 801a2aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2ae:	9a04      	ldr	r2, [sp, #16]
 801a2b0:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801a2b4:	f897 9001 	ldrb.w	r9, [r7, #1]
 801a2b8:	fb09 b902 	mla	r9, r9, r2, fp
 801a2bc:	9a05      	ldr	r2, [sp, #20]
 801a2be:	fa1f f989 	uxth.w	r9, r9
 801a2c2:	f109 0b01 	add.w	fp, r9, #1
 801a2c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2ca:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801a2ce:	fb1b fb02 	smulbb	fp, fp, r2
 801a2d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2d6:	9a04      	ldr	r2, [sp, #16]
 801a2d8:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801a2dc:	f897 9002 	ldrb.w	r9, [r7, #2]
 801a2e0:	fb09 b902 	mla	r9, r9, r2, fp
 801a2e4:	fa1f f989 	uxth.w	r9, r9
 801a2e8:	f109 0b01 	add.w	fp, r9, #1
 801a2ec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2f4:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801a2f8:	e7b9      	b.n	801a26e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801a2fa:	f897 a000 	ldrb.w	sl, [r7]
 801a2fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a302:	f809 ac03 	strb.w	sl, [r9, #-3]
 801a306:	fa1f fc8c 	uxth.w	ip, ip
 801a30a:	f897 a001 	ldrb.w	sl, [r7, #1]
 801a30e:	f809 ac02 	strb.w	sl, [r9, #-2]
 801a312:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a316:	f809 ac01 	strb.w	sl, [r9, #-1]
 801a31a:	e789      	b.n	801a230 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801a31c:	4b03      	ldr	r3, [pc, #12]	@ (801a32c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a31e:	6818      	ldr	r0, [r3, #0]
 801a320:	6803      	ldr	r3, [r0, #0]
 801a322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a324:	4798      	blx	r3
 801a326:	b00f      	add	sp, #60	@ 0x3c
 801a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a32c:	240251f0 	.word	0x240251f0
 801a330:	240251ea 	.word	0x240251ea

0801a334 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a338:	b09b      	sub	sp, #108	@ 0x6c
 801a33a:	461d      	mov	r5, r3
 801a33c:	4604      	mov	r4, r0
 801a33e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a340:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801a344:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801a348:	9208      	str	r2, [sp, #32]
 801a34a:	2a00      	cmp	r2, #0
 801a34c:	f000 81f3 	beq.w	801a736 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801a350:	6828      	ldr	r0, [r5, #0]
 801a352:	aa16      	add	r2, sp, #88	@ 0x58
 801a354:	6869      	ldr	r1, [r5, #4]
 801a356:	c203      	stmia	r2!, {r0, r1}
 801a358:	6818      	ldr	r0, [r3, #0]
 801a35a:	aa18      	add	r2, sp, #96	@ 0x60
 801a35c:	6859      	ldr	r1, [r3, #4]
 801a35e:	c203      	stmia	r2!, {r0, r1}
 801a360:	a816      	add	r0, sp, #88	@ 0x58
 801a362:	f7f9 fce9 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a366:	4629      	mov	r1, r5
 801a368:	a818      	add	r0, sp, #96	@ 0x60
 801a36a:	f7f9 fd0d 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a36e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801a372:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801a376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a37a:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801a37e:	bfdb      	ittet	le
 801a380:	b29a      	uxthle	r2, r3
 801a382:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a386:	f04f 0a01 	movgt.w	sl, #1
 801a38a:	fb91 faf2 	sdivle	sl, r1, r2
 801a38e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801a392:	4456      	add	r6, sl
 801a394:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801a398:	3e01      	subs	r6, #1
 801a39a:	fb92 f0fa 	sdiv	r0, r2, sl
 801a39e:	b280      	uxth	r0, r0
 801a3a0:	fb00 281a 	mls	r8, r0, sl, r2
 801a3a4:	900e      	str	r0, [sp, #56]	@ 0x38
 801a3a6:	fb18 f803 	smulbb	r8, r8, r3
 801a3aa:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801a3ae:	4488      	add	r8, r1
 801a3b0:	4419      	add	r1, r3
 801a3b2:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801a3b6:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801a3ba:	fa1f f888 	uxth.w	r8, r8
 801a3be:	441a      	add	r2, r3
 801a3c0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801a3c4:	9303      	str	r3, [sp, #12]
 801a3c6:	4b9c      	ldr	r3, [pc, #624]	@ (801a638 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801a3c8:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801a3cc:	6818      	ldr	r0, [r3, #0]
 801a3ce:	6803      	ldr	r3, [r0, #0]
 801a3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a3d2:	4798      	blx	r3
 801a3d4:	4b99      	ldr	r3, [pc, #612]	@ (801a63c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801a3d6:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801a3da:	f1b8 0f00 	cmp.w	r8, #0
 801a3de:	881a      	ldrh	r2, [r3, #0]
 801a3e0:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801a3e4:	fb02 f505 	mul.w	r5, r2, r5
 801a3e8:	fb02 7101 	mla	r1, r2, r1, r7
 801a3ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3f0:	9314      	str	r3, [sp, #80]	@ 0x50
 801a3f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a3f6:	9b08      	ldr	r3, [sp, #32]
 801a3f8:	fb96 f6fa 	sdiv	r6, r6, sl
 801a3fc:	4408      	add	r0, r1
 801a3fe:	f106 0601 	add.w	r6, r6, #1
 801a402:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801a406:	f04f 0100 	mov.w	r1, #0
 801a40a:	eb00 0205 	add.w	r2, r0, r5
 801a40e:	b2b6      	uxth	r6, r6
 801a410:	b29b      	uxth	r3, r3
 801a412:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a414:	9209      	str	r2, [sp, #36]	@ 0x24
 801a416:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a418:	930d      	str	r3, [sp, #52]	@ 0x34
 801a41a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a41e:	4b88      	ldr	r3, [pc, #544]	@ (801a640 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801a420:	f106 0204 	add.w	r2, r6, #4
 801a424:	eba3 0304 	sub.w	r3, r3, r4
 801a428:	9205      	str	r2, [sp, #20]
 801a42a:	9a03      	ldr	r2, [sp, #12]
 801a42c:	bf18      	it	ne
 801a42e:	2200      	movne	r2, #0
 801a430:	9315      	str	r3, [sp, #84]	@ 0x54
 801a432:	b292      	uxth	r2, r2
 801a434:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a438:	fa11 f383 	uxtah	r3, r1, r3
 801a43c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a43e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a442:	3304      	adds	r3, #4
 801a444:	9306      	str	r3, [sp, #24]
 801a446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a448:	4283      	cmp	r3, r0
 801a44a:	f240 816f 	bls.w	801a72c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801a44e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801a452:	f04f 0900 	mov.w	r9, #0
 801a456:	9d06      	ldr	r5, [sp, #24]
 801a458:	fbb8 f3f3 	udiv	r3, r8, r3
 801a45c:	ebaa 0303 	sub.w	r3, sl, r3
 801a460:	782d      	ldrb	r5, [r5, #0]
 801a462:	b29b      	uxth	r3, r3
 801a464:	950f      	str	r5, [sp, #60]	@ 0x3c
 801a466:	3501      	adds	r5, #1
 801a468:	9312      	str	r3, [sp, #72]	@ 0x48
 801a46a:	9b06      	ldr	r3, [sp, #24]
 801a46c:	9504      	str	r5, [sp, #16]
 801a46e:	7859      	ldrb	r1, [r3, #1]
 801a470:	789b      	ldrb	r3, [r3, #2]
 801a472:	021b      	lsls	r3, r3, #8
 801a474:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a478:	9906      	ldr	r1, [sp, #24]
 801a47a:	78c9      	ldrb	r1, [r1, #3]
 801a47c:	430b      	orrs	r3, r1
 801a47e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801a480:	4419      	add	r1, r3
 801a482:	1c4d      	adds	r5, r1, #1
 801a484:	7849      	ldrb	r1, [r1, #1]
 801a486:	9502      	str	r5, [sp, #8]
 801a488:	0209      	lsls	r1, r1, #8
 801a48a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801a48c:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801a490:	5ceb      	ldrb	r3, [r5, r3]
 801a492:	4319      	orrs	r1, r3
 801a494:	b28b      	uxth	r3, r1
 801a496:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801a49a:	930a      	str	r3, [sp, #40]	@ 0x28
 801a49c:	2300      	movs	r3, #0
 801a49e:	9307      	str	r3, [sp, #28]
 801a4a0:	2301      	movs	r3, #1
 801a4a2:	e9cd 3300 	strd	r3, r3, [sp]
 801a4a6:	469c      	mov	ip, r3
 801a4a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a4ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801a4ae:	f1b8 0f00 	cmp.w	r8, #0
 801a4b2:	f000 8082 	beq.w	801a5ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801a4b6:	45c4      	cmp	ip, r8
 801a4b8:	d270      	bcs.n	801a59c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801a4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a4bc:	eba8 080c 	sub.w	r8, r8, ip
 801a4c0:	4611      	mov	r1, r2
 801a4c2:	4283      	cmp	r3, r0
 801a4c4:	fa1f f888 	uxth.w	r8, r8
 801a4c8:	d802      	bhi.n	801a4d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801a4ca:	e074      	b.n	801a5b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d15f      	bne.n	801a590 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801a4d0:	9b02      	ldr	r3, [sp, #8]
 801a4d2:	9a01      	ldr	r2, [sp, #4]
 801a4d4:	785b      	ldrb	r3, [r3, #1]
 801a4d6:	f1c2 0207 	rsb	r2, r2, #7
 801a4da:	9d01      	ldr	r5, [sp, #4]
 801a4dc:	4093      	lsls	r3, r2
 801a4de:	005b      	lsls	r3, r3, #1
 801a4e0:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801a4e4:	9b02      	ldr	r3, [sp, #8]
 801a4e6:	781b      	ldrb	r3, [r3, #0]
 801a4e8:	412b      	asrs	r3, r5
 801a4ea:	b2db      	uxtb	r3, r3
 801a4ec:	4313      	orrs	r3, r2
 801a4ee:	462a      	mov	r2, r5
 801a4f0:	3201      	adds	r2, #1
 801a4f2:	b29e      	uxth	r6, r3
 801a4f4:	b2d2      	uxtb	r2, r2
 801a4f6:	2a08      	cmp	r2, #8
 801a4f8:	9201      	str	r2, [sp, #4]
 801a4fa:	9a02      	ldr	r2, [sp, #8]
 801a4fc:	bf09      	itett	eq
 801a4fe:	3202      	addeq	r2, #2
 801a500:	3201      	addne	r2, #1
 801a502:	9202      	streq	r2, [sp, #8]
 801a504:	2200      	moveq	r2, #0
 801a506:	bf14      	ite	ne
 801a508:	9202      	strne	r2, [sp, #8]
 801a50a:	9201      	streq	r2, [sp, #4]
 801a50c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a50e:	42b2      	cmp	r2, r6
 801a510:	d309      	bcc.n	801a526 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801a512:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801a516:	2301      	movs	r3, #1
 801a518:	9a04      	ldr	r2, [sp, #16]
 801a51a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801a51e:	d30e      	bcc.n	801a53e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801a520:	9300      	str	r3, [sp, #0]
 801a522:	2500      	movs	r5, #0
 801a524:	e035      	b.n	801a592 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801a526:	9b04      	ldr	r3, [sp, #16]
 801a528:	429e      	cmp	r6, r3
 801a52a:	d318      	bcc.n	801a55e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801a52c:	9b00      	ldr	r3, [sp, #0]
 801a52e:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801a532:	18e3      	adds	r3, r4, r3
 801a534:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801a538:	9b00      	ldr	r3, [sp, #0]
 801a53a:	3301      	adds	r3, #1
 801a53c:	b29b      	uxth	r3, r3
 801a53e:	9a04      	ldr	r2, [sp, #16]
 801a540:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801a544:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a548:	9f00      	ldr	r7, [sp, #0]
 801a54a:	7115      	strb	r5, [r2, #4]
 801a54c:	3701      	adds	r7, #1
 801a54e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801a550:	7157      	strb	r7, [r2, #5]
 801a552:	80d5      	strh	r5, [r2, #6]
 801a554:	9a04      	ldr	r2, [sp, #16]
 801a556:	3201      	adds	r2, #1
 801a558:	b292      	uxth	r2, r2
 801a55a:	9204      	str	r2, [sp, #16]
 801a55c:	e7e0      	b.n	801a520 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801a55e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a562:	4632      	mov	r2, r6
 801a564:	795b      	ldrb	r3, [r3, #5]
 801a566:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801a56a:	4425      	add	r5, r4
 801a56c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801a56e:	eb07 0c05 	add.w	ip, r7, r5
 801a572:	f1bc 0f00 	cmp.w	ip, #0
 801a576:	dd07      	ble.n	801a588 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801a578:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a57c:	f892 c004 	ldrb.w	ip, [r2, #4]
 801a580:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801a584:	88d2      	ldrh	r2, [r2, #6]
 801a586:	e7f1      	b.n	801a56c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801a588:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801a58c:	b29b      	uxth	r3, r3
 801a58e:	e7c3      	b.n	801a518 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801a590:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a592:	460a      	mov	r2, r1
 801a594:	960a      	str	r6, [sp, #40]	@ 0x28
 801a596:	46a9      	mov	r9, r5
 801a598:	469c      	mov	ip, r3
 801a59a:	e788      	b.n	801a4ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801a59c:	ebac 0308 	sub.w	r3, ip, r8
 801a5a0:	eb09 0508 	add.w	r5, r9, r8
 801a5a4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a5a8:	b29b      	uxth	r3, r3
 801a5aa:	b2ad      	uxth	r5, r5
 801a5ac:	f04f 0800 	mov.w	r8, #0
 801a5b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a5b2:	4282      	cmp	r2, r0
 801a5b4:	d88a      	bhi.n	801a4cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801a5b6:	460a      	mov	r2, r1
 801a5b8:	e745      	b.n	801a446 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801a5ba:	4594      	cmp	ip, r2
 801a5bc:	9d08      	ldr	r5, [sp, #32]
 801a5be:	4686      	mov	lr, r0
 801a5c0:	bf27      	ittee	cs
 801a5c2:	ebac 0302 	subcs.w	r3, ip, r2
 801a5c6:	4616      	movcs	r6, r2
 801a5c8:	eba2 010c 	subcc.w	r1, r2, ip
 801a5cc:	4666      	movcc	r6, ip
 801a5ce:	bf27      	ittee	cs
 801a5d0:	b29b      	uxthcs	r3, r3
 801a5d2:	4641      	movcs	r1, r8
 801a5d4:	b289      	uxthcc	r1, r1
 801a5d6:	4643      	movcc	r3, r8
 801a5d8:	2dff      	cmp	r5, #255	@ 0xff
 801a5da:	eb09 0506 	add.w	r5, r9, r6
 801a5de:	b2ad      	uxth	r5, r5
 801a5e0:	d130      	bne.n	801a644 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801a5e2:	45a9      	cmp	r9, r5
 801a5e4:	f10e 0e03 	add.w	lr, lr, #3
 801a5e8:	d17a      	bne.n	801a6e0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801a5ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a5ee:	4594      	cmp	ip, r2
 801a5f0:	4430      	add	r0, r6
 801a5f2:	d3db      	bcc.n	801a5ac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801a5f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a5f6:	9903      	ldr	r1, [sp, #12]
 801a5f8:	8812      	ldrh	r2, [r2, #0]
 801a5fa:	1a52      	subs	r2, r2, r1
 801a5fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a5fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a602:	4410      	add	r0, r2
 801a604:	9a07      	ldr	r2, [sp, #28]
 801a606:	3201      	adds	r2, #1
 801a608:	428a      	cmp	r2, r1
 801a60a:	9207      	str	r2, [sp, #28]
 801a60c:	f040 8081 	bne.w	801a712 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801a610:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801a614:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801a618:	9b03      	ldr	r3, [sp, #12]
 801a61a:	eba8 080c 	sub.w	r8, r8, ip
 801a61e:	fa1f f888 	uxth.w	r8, r8
 801a622:	f1b8 0f00 	cmp.w	r8, #0
 801a626:	bf08      	it	eq
 801a628:	461a      	moveq	r2, r3
 801a62a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a62c:	bf18      	it	ne
 801a62e:	2200      	movne	r2, #0
 801a630:	3301      	adds	r3, #1
 801a632:	b292      	uxth	r2, r2
 801a634:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a636:	e6fd      	b.n	801a434 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801a638:	240251f0 	.word	0x240251f0
 801a63c:	240251ea 	.word	0x240251ea
 801a640:	fffff7fb 	.word	0xfffff7fb
 801a644:	45a9      	cmp	r9, r5
 801a646:	f10e 0e03 	add.w	lr, lr, #3
 801a64a:	d0ce      	beq.n	801a5ea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801a64c:	f109 0701 	add.w	r7, r9, #1
 801a650:	44a1      	add	r9, r4
 801a652:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801a656:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801a65a:	9713      	str	r7, [sp, #76]	@ 0x4c
 801a65c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a660:	9f05      	ldr	r7, [sp, #20]
 801a662:	eb07 0908 	add.w	r9, r7, r8
 801a666:	f817 8008 	ldrb.w	r8, [r7, r8]
 801a66a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a66c:	fb1b fb07 	smulbb	fp, fp, r7
 801a670:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a672:	fb08 b807 	mla	r8, r8, r7, fp
 801a676:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a678:	fa1f f888 	uxth.w	r8, r8
 801a67c:	f108 0b01 	add.w	fp, r8, #1
 801a680:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a684:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801a688:	fb1b fb07 	smulbb	fp, fp, r7
 801a68c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a690:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a692:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801a696:	f899 8001 	ldrb.w	r8, [r9, #1]
 801a69a:	fb08 b807 	mla	r8, r8, r7, fp
 801a69e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a6a0:	fa1f f888 	uxth.w	r8, r8
 801a6a4:	f108 0b01 	add.w	fp, r8, #1
 801a6a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a6ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a6b0:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801a6b4:	f899 8002 	ldrb.w	r8, [r9, #2]
 801a6b8:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801a6bc:	fb19 f907 	smulbb	r9, r9, r7
 801a6c0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a6c2:	fb08 9807 	mla	r8, r8, r7, r9
 801a6c6:	fa1f f888 	uxth.w	r8, r8
 801a6ca:	f108 0901 	add.w	r9, r8, #1
 801a6ce:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801a6d2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801a6d6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a6da:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801a6de:	e7b1      	b.n	801a644 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801a6e0:	f109 0b01 	add.w	fp, r9, #1
 801a6e4:	44a1      	add	r9, r4
 801a6e6:	9f05      	ldr	r7, [sp, #20]
 801a6e8:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801a6ec:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a6f0:	eb07 0908 	add.w	r9, r7, r8
 801a6f4:	f817 8008 	ldrb.w	r8, [r7, r8]
 801a6f8:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801a6fc:	f899 8001 	ldrb.w	r8, [r9, #1]
 801a700:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801a704:	f899 8002 	ldrb.w	r8, [r9, #2]
 801a708:	fa1f f98b 	uxth.w	r9, fp
 801a70c:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801a710:	e767      	b.n	801a5e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801a712:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a716:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801a71a:	eba8 0801 	sub.w	r8, r8, r1
 801a71e:	fa1f f888 	uxth.w	r8, r8
 801a722:	f1b8 0f00 	cmp.w	r8, #0
 801a726:	bf18      	it	ne
 801a728:	2100      	movne	r1, #0
 801a72a:	e741      	b.n	801a5b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801a72c:	4b03      	ldr	r3, [pc, #12]	@ (801a73c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801a72e:	6818      	ldr	r0, [r3, #0]
 801a730:	6803      	ldr	r3, [r0, #0]
 801a732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a734:	4798      	blx	r3
 801a736:	b01b      	add	sp, #108	@ 0x6c
 801a738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a73c:	240251f0 	.word	0x240251f0

0801a740 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a744:	b09d      	sub	sp, #116	@ 0x74
 801a746:	461d      	mov	r5, r3
 801a748:	4604      	mov	r4, r0
 801a74a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a74c:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801a750:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801a754:	920c      	str	r2, [sp, #48]	@ 0x30
 801a756:	2a00      	cmp	r2, #0
 801a758:	f000 81de 	beq.w	801ab18 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801a75c:	6828      	ldr	r0, [r5, #0]
 801a75e:	aa18      	add	r2, sp, #96	@ 0x60
 801a760:	6869      	ldr	r1, [r5, #4]
 801a762:	c203      	stmia	r2!, {r0, r1}
 801a764:	6818      	ldr	r0, [r3, #0]
 801a766:	aa1a      	add	r2, sp, #104	@ 0x68
 801a768:	6859      	ldr	r1, [r3, #4]
 801a76a:	c203      	stmia	r2!, {r0, r1}
 801a76c:	a818      	add	r0, sp, #96	@ 0x60
 801a76e:	f7f9 fae3 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a772:	4629      	mov	r1, r5
 801a774:	a81a      	add	r0, sp, #104	@ 0x68
 801a776:	f7f9 fb07 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a77a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801a77e:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801a782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a786:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801a78a:	bfdb      	ittet	le
 801a78c:	b29a      	uxthle	r2, r3
 801a78e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a792:	2201      	movgt	r2, #1
 801a794:	fb91 f2f2 	sdivle	r2, r1, r2
 801a798:	9201      	str	r2, [sp, #4]
 801a79a:	9801      	ldr	r0, [sp, #4]
 801a79c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801a7a0:	9901      	ldr	r1, [sp, #4]
 801a7a2:	fb92 f0f0 	sdiv	r0, r2, r0
 801a7a6:	b280      	uxth	r0, r0
 801a7a8:	440f      	add	r7, r1
 801a7aa:	900d      	str	r0, [sp, #52]	@ 0x34
 801a7ac:	3f01      	subs	r7, #1
 801a7ae:	9801      	ldr	r0, [sp, #4]
 801a7b0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a7b2:	fb05 2510 	mls	r5, r5, r0, r2
 801a7b6:	fb97 f7f1 	sdiv	r7, r7, r1
 801a7ba:	fb15 f503 	smulbb	r5, r5, r3
 801a7be:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801a7c2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801a7c6:	3701      	adds	r7, #1
 801a7c8:	440d      	add	r5, r1
 801a7ca:	4419      	add	r1, r3
 801a7cc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801a7d0:	b2bf      	uxth	r7, r7
 801a7d2:	441a      	add	r2, r3
 801a7d4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801a7d8:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801a7dc:	00bf      	lsls	r7, r7, #2
 801a7de:	9304      	str	r3, [sp, #16]
 801a7e0:	b2ad      	uxth	r5, r5
 801a7e2:	4bb0      	ldr	r3, [pc, #704]	@ (801aaa4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801a7e4:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801a7e8:	6818      	ldr	r0, [r3, #0]
 801a7ea:	6803      	ldr	r3, [r0, #0]
 801a7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a7ee:	4798      	blx	r3
 801a7f0:	4bad      	ldr	r3, [pc, #692]	@ (801aaa8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801a7f2:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801a7f6:	2d00      	cmp	r5, #0
 801a7f8:	881a      	ldrh	r2, [r3, #0]
 801a7fa:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801a7fe:	fb02 f606 	mul.w	r6, r2, r6
 801a802:	fb02 c101 	mla	r1, r2, r1, ip
 801a806:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a80a:	9316      	str	r3, [sp, #88]	@ 0x58
 801a80c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a810:	4ba6      	ldr	r3, [pc, #664]	@ (801aaac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801a812:	eb00 0801 	add.w	r8, r0, r1
 801a816:	bf18      	it	ne
 801a818:	2100      	movne	r1, #0
 801a81a:	eba3 0304 	sub.w	r3, r3, r4
 801a81e:	eb08 0206 	add.w	r2, r8, r6
 801a822:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a824:	9208      	str	r2, [sp, #32]
 801a826:	f107 0204 	add.w	r2, r7, #4
 801a82a:	9211      	str	r2, [sp, #68]	@ 0x44
 801a82c:	9a04      	ldr	r2, [sp, #16]
 801a82e:	bf08      	it	eq
 801a830:	4611      	moveq	r1, r2
 801a832:	2200      	movs	r2, #0
 801a834:	b289      	uxth	r1, r1
 801a836:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a838:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a83a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a83c:	fa12 f383 	uxtah	r3, r2, r3
 801a840:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a842:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a846:	3304      	adds	r3, #4
 801a848:	9306      	str	r3, [sp, #24]
 801a84a:	9b08      	ldr	r3, [sp, #32]
 801a84c:	4543      	cmp	r3, r8
 801a84e:	f240 815e 	bls.w	801ab0e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801a852:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801a856:	f04f 0b01 	mov.w	fp, #1
 801a85a:	9a01      	ldr	r2, [sp, #4]
 801a85c:	9806      	ldr	r0, [sp, #24]
 801a85e:	465e      	mov	r6, fp
 801a860:	f8cd b008 	str.w	fp, [sp, #8]
 801a864:	7800      	ldrb	r0, [r0, #0]
 801a866:	fbb5 f3f3 	udiv	r3, r5, r3
 801a86a:	1ad3      	subs	r3, r2, r3
 801a86c:	900e      	str	r0, [sp, #56]	@ 0x38
 801a86e:	3001      	adds	r0, #1
 801a870:	b29b      	uxth	r3, r3
 801a872:	9005      	str	r0, [sp, #20]
 801a874:	9312      	str	r3, [sp, #72]	@ 0x48
 801a876:	9b06      	ldr	r3, [sp, #24]
 801a878:	785a      	ldrb	r2, [r3, #1]
 801a87a:	789b      	ldrb	r3, [r3, #2]
 801a87c:	021b      	lsls	r3, r3, #8
 801a87e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a882:	9a06      	ldr	r2, [sp, #24]
 801a884:	78d2      	ldrb	r2, [r2, #3]
 801a886:	4313      	orrs	r3, r2
 801a888:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a88a:	441a      	add	r2, r3
 801a88c:	1c50      	adds	r0, r2, #1
 801a88e:	7852      	ldrb	r2, [r2, #1]
 801a890:	9003      	str	r0, [sp, #12]
 801a892:	0212      	lsls	r2, r2, #8
 801a894:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801a896:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801a89a:	5cc3      	ldrb	r3, [r0, r3]
 801a89c:	431a      	orrs	r2, r3
 801a89e:	b293      	uxth	r3, r2
 801a8a0:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801a8a4:	930a      	str	r3, [sp, #40]	@ 0x28
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	461a      	mov	r2, r3
 801a8aa:	9307      	str	r3, [sp, #28]
 801a8ac:	2d00      	cmp	r5, #0
 801a8ae:	d07c      	beq.n	801a9aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a8b0:	42ae      	cmp	r6, r5
 801a8b2:	d26c      	bcs.n	801a98e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801a8b4:	9b08      	ldr	r3, [sp, #32]
 801a8b6:	1bad      	subs	r5, r5, r6
 801a8b8:	4608      	mov	r0, r1
 801a8ba:	4543      	cmp	r3, r8
 801a8bc:	b2ad      	uxth	r5, r5
 801a8be:	d802      	bhi.n	801a8c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801a8c0:	e071      	b.n	801a9a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d15d      	bne.n	801a982 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801a8c6:	9b03      	ldr	r3, [sp, #12]
 801a8c8:	9a02      	ldr	r2, [sp, #8]
 801a8ca:	785b      	ldrb	r3, [r3, #1]
 801a8cc:	f1c2 0207 	rsb	r2, r2, #7
 801a8d0:	9902      	ldr	r1, [sp, #8]
 801a8d2:	4093      	lsls	r3, r2
 801a8d4:	005b      	lsls	r3, r3, #1
 801a8d6:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801a8da:	9b03      	ldr	r3, [sp, #12]
 801a8dc:	781b      	ldrb	r3, [r3, #0]
 801a8de:	410b      	asrs	r3, r1
 801a8e0:	3101      	adds	r1, #1
 801a8e2:	b2c9      	uxtb	r1, r1
 801a8e4:	b2db      	uxtb	r3, r3
 801a8e6:	2908      	cmp	r1, #8
 801a8e8:	9102      	str	r1, [sp, #8]
 801a8ea:	9903      	ldr	r1, [sp, #12]
 801a8ec:	ea43 0302 	orr.w	r3, r3, r2
 801a8f0:	bf0c      	ite	eq
 801a8f2:	3102      	addeq	r1, #2
 801a8f4:	3101      	addne	r1, #1
 801a8f6:	b29a      	uxth	r2, r3
 801a8f8:	bf05      	ittet	eq
 801a8fa:	9103      	streq	r1, [sp, #12]
 801a8fc:	2100      	moveq	r1, #0
 801a8fe:	9103      	strne	r1, [sp, #12]
 801a900:	9102      	streq	r1, [sp, #8]
 801a902:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a904:	4291      	cmp	r1, r2
 801a906:	d30a      	bcc.n	801a91e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801a908:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801a90c:	2301      	movs	r3, #1
 801a90e:	9905      	ldr	r1, [sp, #20]
 801a910:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801a914:	d30f      	bcc.n	801a936 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801a916:	469b      	mov	fp, r3
 801a918:	f04f 0c00 	mov.w	ip, #0
 801a91c:	e032      	b.n	801a984 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801a91e:	9b05      	ldr	r3, [sp, #20]
 801a920:	429a      	cmp	r2, r3
 801a922:	d318      	bcc.n	801a956 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801a924:	eb04 030b 	add.w	r3, r4, fp
 801a928:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801a92c:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801a930:	f10b 0301 	add.w	r3, fp, #1
 801a934:	b29b      	uxth	r3, r3
 801a936:	9905      	ldr	r1, [sp, #20]
 801a938:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801a93c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a940:	710e      	strb	r6, [r1, #4]
 801a942:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a944:	80ce      	strh	r6, [r1, #6]
 801a946:	f10b 0601 	add.w	r6, fp, #1
 801a94a:	714e      	strb	r6, [r1, #5]
 801a94c:	9905      	ldr	r1, [sp, #20]
 801a94e:	3101      	adds	r1, #1
 801a950:	b289      	uxth	r1, r1
 801a952:	9105      	str	r1, [sp, #20]
 801a954:	e7df      	b.n	801a916 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801a956:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a95a:	4611      	mov	r1, r2
 801a95c:	795b      	ldrb	r3, [r3, #5]
 801a95e:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801a962:	4426      	add	r6, r4
 801a964:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801a966:	4437      	add	r7, r6
 801a968:	2f00      	cmp	r7, #0
 801a96a:	dd06      	ble.n	801a97a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801a96c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a970:	790f      	ldrb	r7, [r1, #4]
 801a972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a976:	88c9      	ldrh	r1, [r1, #6]
 801a978:	e7f4      	b.n	801a964 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801a97a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801a97e:	b29b      	uxth	r3, r3
 801a980:	e7c5      	b.n	801a90e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801a982:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a984:	920a      	str	r2, [sp, #40]	@ 0x28
 801a986:	4601      	mov	r1, r0
 801a988:	4662      	mov	r2, ip
 801a98a:	461e      	mov	r6, r3
 801a98c:	e78e      	b.n	801a8ac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801a98e:	1b73      	subs	r3, r6, r5
 801a990:	eb02 0c05 	add.w	ip, r2, r5
 801a994:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801a998:	b29b      	uxth	r3, r3
 801a99a:	fa1f fc8c 	uxth.w	ip, ip
 801a99e:	2500      	movs	r5, #0
 801a9a0:	9a08      	ldr	r2, [sp, #32]
 801a9a2:	4542      	cmp	r2, r8
 801a9a4:	d88d      	bhi.n	801a8c2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801a9a6:	4601      	mov	r1, r0
 801a9a8:	e74f      	b.n	801a84a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801a9aa:	428e      	cmp	r6, r1
 801a9ac:	bf2b      	itete	cs
 801a9ae:	468e      	movcs	lr, r1
 801a9b0:	46b6      	movcc	lr, r6
 801a9b2:	1a73      	subcs	r3, r6, r1
 801a9b4:	1b88      	subcc	r0, r1, r6
 801a9b6:	eb02 0c0e 	add.w	ip, r2, lr
 801a9ba:	bf2b      	itete	cs
 801a9bc:	4628      	movcs	r0, r5
 801a9be:	462b      	movcc	r3, r5
 801a9c0:	b29b      	uxthcs	r3, r3
 801a9c2:	b280      	uxthcc	r0, r0
 801a9c4:	f108 0503 	add.w	r5, r8, #3
 801a9c8:	fa1f fc8c 	uxth.w	ip, ip
 801a9cc:	4562      	cmp	r2, ip
 801a9ce:	d06f      	beq.n	801aab0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801a9d0:	1c57      	adds	r7, r2, #1
 801a9d2:	4422      	add	r2, r4
 801a9d4:	b2bf      	uxth	r7, r7
 801a9d6:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801a9da:	9713      	str	r7, [sp, #76]	@ 0x4c
 801a9dc:	2704      	movs	r7, #4
 801a9de:	46b9      	mov	r9, r7
 801a9e0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801a9e2:	fb19 7202 	smlabb	r2, r9, r2, r7
 801a9e6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a9e8:	58bf      	ldr	r7, [r7, r2]
 801a9ea:	0e3a      	lsrs	r2, r7, #24
 801a9ec:	9209      	str	r2, [sp, #36]	@ 0x24
 801a9ee:	d016      	beq.n	801aa1e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801a9f0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a9f4:	fa5f fa87 	uxtb.w	sl, r7
 801a9f8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a9fc:	fa5f f289 	uxtb.w	r2, r9
 801aa00:	9214      	str	r2, [sp, #80]	@ 0x50
 801aa02:	b2fa      	uxtb	r2, r7
 801aa04:	9215      	str	r2, [sp, #84]	@ 0x54
 801aa06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa08:	2aff      	cmp	r2, #255	@ 0xff
 801aa0a:	d10b      	bne.n	801aa24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801aa0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa0e:	2aff      	cmp	r2, #255	@ 0xff
 801aa10:	d108      	bne.n	801aa24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801aa12:	f805 ac03 	strb.w	sl, [r5, #-3]
 801aa16:	f805 9c02 	strb.w	r9, [r5, #-2]
 801aa1a:	f805 7c01 	strb.w	r7, [r5, #-1]
 801aa1e:	3503      	adds	r5, #3
 801aa20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801aa22:	e7d3      	b.n	801a9cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801aa24:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801aa26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa28:	437a      	muls	r2, r7
 801aa2a:	1c57      	adds	r7, r2, #1
 801aa2c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801aa30:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801aa34:	1212      	asrs	r2, r2, #8
 801aa36:	fa1f f982 	uxth.w	r9, r2
 801aa3a:	43d2      	mvns	r2, r2
 801aa3c:	fb1a fa09 	smulbb	sl, sl, r9
 801aa40:	b2d2      	uxtb	r2, r2
 801aa42:	fb07 a702 	mla	r7, r7, r2, sl
 801aa46:	9209      	str	r2, [sp, #36]	@ 0x24
 801aa48:	b2bf      	uxth	r7, r7
 801aa4a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801aa4c:	f107 0a01 	add.w	sl, r7, #1
 801aa50:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801aa54:	fb12 fa09 	smulbb	sl, r2, r9
 801aa58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa5a:	123f      	asrs	r7, r7, #8
 801aa5c:	f805 7c03 	strb.w	r7, [r5, #-3]
 801aa60:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801aa64:	fb07 aa02 	mla	sl, r7, r2, sl
 801aa68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801aa6a:	fb12 f909 	smulbb	r9, r2, r9
 801aa6e:	fa1f fa8a 	uxth.w	sl, sl
 801aa72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa74:	f10a 0701 	add.w	r7, sl, #1
 801aa78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aa7c:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801aa80:	fb07 9902 	mla	r9, r7, r2, r9
 801aa84:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aa88:	fa1f f989 	uxth.w	r9, r9
 801aa8c:	f805 ac02 	strb.w	sl, [r5, #-2]
 801aa90:	f109 0201 	add.w	r2, r9, #1
 801aa94:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801aa98:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa9c:	f805 9c01 	strb.w	r9, [r5, #-1]
 801aaa0:	e7bd      	b.n	801aa1e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801aaa2:	bf00      	nop
 801aaa4:	240251f0 	.word	0x240251f0
 801aaa8:	240251ea 	.word	0x240251ea
 801aaac:	fffff7fb 	.word	0xfffff7fb
 801aab0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801aab4:	428e      	cmp	r6, r1
 801aab6:	44f0      	add	r8, lr
 801aab8:	f4ff af71 	bcc.w	801a99e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801aabc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801aabe:	9904      	ldr	r1, [sp, #16]
 801aac0:	8812      	ldrh	r2, [r2, #0]
 801aac2:	1a52      	subs	r2, r2, r1
 801aac4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801aac6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aaca:	4490      	add	r8, r2
 801aacc:	9a07      	ldr	r2, [sp, #28]
 801aace:	3201      	adds	r2, #1
 801aad0:	428a      	cmp	r2, r1
 801aad2:	9207      	str	r2, [sp, #28]
 801aad4:	d111      	bne.n	801aafa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801aad6:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801aada:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801aade:	9b04      	ldr	r3, [sp, #16]
 801aae0:	eba5 050c 	sub.w	r5, r5, ip
 801aae4:	b2ad      	uxth	r5, r5
 801aae6:	2d00      	cmp	r5, #0
 801aae8:	bf08      	it	eq
 801aaea:	4619      	moveq	r1, r3
 801aaec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aaee:	bf18      	it	ne
 801aaf0:	2100      	movne	r1, #0
 801aaf2:	3301      	adds	r3, #1
 801aaf4:	b289      	uxth	r1, r1
 801aaf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aaf8:	e69e      	b.n	801a838 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801aafa:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801aafe:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801ab02:	1a2d      	subs	r5, r5, r0
 801ab04:	b2ad      	uxth	r5, r5
 801ab06:	2d00      	cmp	r5, #0
 801ab08:	bf18      	it	ne
 801ab0a:	2000      	movne	r0, #0
 801ab0c:	e748      	b.n	801a9a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801ab0e:	4b04      	ldr	r3, [pc, #16]	@ (801ab20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801ab10:	6818      	ldr	r0, [r3, #0]
 801ab12:	6803      	ldr	r3, [r0, #0]
 801ab14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ab16:	4798      	blx	r3
 801ab18:	b01d      	add	sp, #116	@ 0x74
 801ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab1e:	bf00      	nop
 801ab20:	240251f0 	.word	0x240251f0

0801ab24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab28:	b08f      	sub	sp, #60	@ 0x3c
 801ab2a:	4616      	mov	r6, r2
 801ab2c:	4681      	mov	r9, r0
 801ab2e:	460d      	mov	r5, r1
 801ab30:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801ab34:	9205      	str	r2, [sp, #20]
 801ab36:	2a00      	cmp	r2, #0
 801ab38:	f000 82a8 	beq.w	801b08c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801ab3c:	6830      	ldr	r0, [r6, #0]
 801ab3e:	ac0a      	add	r4, sp, #40	@ 0x28
 801ab40:	6871      	ldr	r1, [r6, #4]
 801ab42:	c403      	stmia	r4!, {r0, r1}
 801ab44:	6818      	ldr	r0, [r3, #0]
 801ab46:	ac0c      	add	r4, sp, #48	@ 0x30
 801ab48:	6859      	ldr	r1, [r3, #4]
 801ab4a:	c403      	stmia	r4!, {r0, r1}
 801ab4c:	a80a      	add	r0, sp, #40	@ 0x28
 801ab4e:	f7f9 f8f3 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab52:	4631      	mov	r1, r6
 801ab54:	a80c      	add	r0, sp, #48	@ 0x30
 801ab56:	f7f9 f917 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ab5a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801ab5e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801ab62:	bfdb      	ittet	le
 801ab64:	b293      	uxthle	r3, r2
 801ab66:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ab6a:	2301      	movgt	r3, #1
 801ab6c:	fb91 f3f3 	sdivle	r3, r1, r3
 801ab70:	9300      	str	r3, [sp, #0]
 801ab72:	f105 0308 	add.w	r3, r5, #8
 801ab76:	9900      	ldr	r1, [sp, #0]
 801ab78:	9306      	str	r3, [sp, #24]
 801ab7a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801ab7e:	440b      	add	r3, r1
 801ab80:	3b01      	subs	r3, #1
 801ab82:	fb93 f3f1 	sdiv	r3, r3, r1
 801ab86:	3b01      	subs	r3, #1
 801ab88:	9906      	ldr	r1, [sp, #24]
 801ab8a:	b29b      	uxth	r3, r3
 801ab8c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ab90:	9900      	ldr	r1, [sp, #0]
 801ab92:	9307      	str	r3, [sp, #28]
 801ab94:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801ab98:	fb93 f0f1 	sdiv	r0, r3, r1
 801ab9c:	b284      	uxth	r4, r0
 801ab9e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801aba2:	b280      	uxth	r0, r0
 801aba4:	9402      	str	r4, [sp, #8]
 801aba6:	9d02      	ldr	r5, [sp, #8]
 801aba8:	9c00      	ldr	r4, [sp, #0]
 801abaa:	fb05 3514 	mls	r5, r5, r4, r3
 801abae:	fb15 f502 	smulbb	r5, r5, r2
 801abb2:	440d      	add	r5, r1
 801abb4:	b2ad      	uxth	r5, r5
 801abb6:	2800      	cmp	r0, #0
 801abb8:	d071      	beq.n	801ac9e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801abba:	1e42      	subs	r2, r0, #1
 801abbc:	9806      	ldr	r0, [sp, #24]
 801abbe:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801abc2:	9a07      	ldr	r2, [sp, #28]
 801abc4:	fa98 f888 	rev.w	r8, r8
 801abc8:	4490      	add	r8, r2
 801abca:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801abce:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801abd2:	4411      	add	r1, r2
 801abd4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801abd8:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801af24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801abdc:	4413      	add	r3, r2
 801abde:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801abe2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801abe6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801abea:	9301      	str	r3, [sp, #4]
 801abec:	4bcb      	ldr	r3, [pc, #812]	@ (801af1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801abee:	6818      	ldr	r0, [r3, #0]
 801abf0:	6803      	ldr	r3, [r0, #0]
 801abf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abf4:	4798      	blx	r3
 801abf6:	4bca      	ldr	r3, [pc, #808]	@ (801af20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801abf8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801abfc:	881b      	ldrh	r3, [r3, #0]
 801abfe:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801ac02:	fb03 2707 	mla	r7, r3, r7, r2
 801ac06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ac0a:	4363      	muls	r3, r4
 801ac0c:	2400      	movs	r4, #0
 801ac0e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ac12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ac16:	4621      	mov	r1, r4
 801ac18:	4407      	add	r7, r0
 801ac1a:	18fb      	adds	r3, r7, r3
 801ac1c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac1e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801ac22:	fb95 f3f3 	sdiv	r3, r5, r3
 801ac26:	9304      	str	r3, [sp, #16]
 801ac28:	f109 0304 	add.w	r3, r9, #4
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	9308      	str	r3, [sp, #32]
 801ac30:	f008 fc0a 	bl	8023448 <memset>
 801ac34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac36:	42bb      	cmp	r3, r7
 801ac38:	f240 8223 	bls.w	801b082 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801ac3c:	2003      	movs	r0, #3
 801ac3e:	f04f 0c07 	mov.w	ip, #7
 801ac42:	f04f 0e0b 	mov.w	lr, #11
 801ac46:	2d00      	cmp	r5, #0
 801ac48:	f000 813c 	beq.w	801aec4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801ac4c:	f898 3000 	ldrb.w	r3, [r8]
 801ac50:	b2db      	uxtb	r3, r3
 801ac52:	2bfe      	cmp	r3, #254	@ 0xfe
 801ac54:	d126      	bne.n	801aca4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801ac56:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ac5a:	f108 0604 	add.w	r6, r8, #4
 801ac5e:	f898 2002 	ldrb.w	r2, [r8, #2]
 801ac62:	3d01      	subs	r5, #1
 801ac64:	b2c9      	uxtb	r1, r1
 801ac66:	f898 8003 	ldrb.w	r8, [r8, #3]
 801ac6a:	b2d2      	uxtb	r2, r2
 801ac6c:	f361 0407 	bfi	r4, r1, #0, #8
 801ac70:	fa5f f888 	uxtb.w	r8, r8
 801ac74:	b2ad      	uxth	r5, r5
 801ac76:	f362 240f 	bfi	r4, r2, #8, #8
 801ac7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ac7e:	fb10 2208 	smlabb	r2, r0, r8, r2
 801ac82:	f368 4417 	bfi	r4, r8, #16, #8
 801ac86:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801ac8a:	0e23      	lsrs	r3, r4, #24
 801ac8c:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801ac90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ac94:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ac98:	605c      	str	r4, [r3, #4]
 801ac9a:	46b0      	mov	r8, r6
 801ac9c:	e7d3      	b.n	801ac46 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801ac9e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801aca2:	e792      	b.n	801abca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801aca4:	2bff      	cmp	r3, #255	@ 0xff
 801aca6:	d127      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801aca8:	f898 2001 	ldrb.w	r2, [r8, #1]
 801acac:	f108 0605 	add.w	r6, r8, #5
 801acb0:	f898 3002 	ldrb.w	r3, [r8, #2]
 801acb4:	3d01      	subs	r5, #1
 801acb6:	b2d2      	uxtb	r2, r2
 801acb8:	f898 1003 	ldrb.w	r1, [r8, #3]
 801acbc:	b2db      	uxtb	r3, r3
 801acbe:	f898 8004 	ldrb.w	r8, [r8, #4]
 801acc2:	f362 0407 	bfi	r4, r2, #0, #8
 801acc6:	b2c9      	uxtb	r1, r1
 801acc8:	fa5f f888 	uxtb.w	r8, r8
 801accc:	f363 240f 	bfi	r4, r3, #8, #8
 801acd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801acd4:	b2ad      	uxth	r5, r5
 801acd6:	fb10 3301 	smlabb	r3, r0, r1, r3
 801acda:	f361 4417 	bfi	r4, r1, #16, #8
 801acde:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801ace2:	f368 641f 	bfi	r4, r8, #24, #8
 801ace6:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801acea:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801acee:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801acf2:	f8c8 4004 	str.w	r4, [r8, #4]
 801acf6:	e7d0      	b.n	801ac9a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801acf8:	119a      	asrs	r2, r3, #6
 801acfa:	f108 0601 	add.w	r6, r8, #1
 801acfe:	d107      	bne.n	801ad10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801ad00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ad04:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ad08:	685c      	ldr	r4, [r3, #4]
 801ad0a:	3d01      	subs	r5, #1
 801ad0c:	b2ad      	uxth	r5, r5
 801ad0e:	e7c4      	b.n	801ac9a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801ad10:	2a01      	cmp	r2, #1
 801ad12:	d129      	bne.n	801ad68 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801ad14:	f003 0203 	and.w	r2, r3, #3
 801ad18:	1ea1      	subs	r1, r4, #2
 801ad1a:	4411      	add	r1, r2
 801ad1c:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801ad20:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801ad24:	b2c9      	uxtb	r1, r1
 801ad26:	3a02      	subs	r2, #2
 801ad28:	3b02      	subs	r3, #2
 801ad2a:	f361 0407 	bfi	r4, r1, #0, #8
 801ad2e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ad32:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801ad36:	f362 240f 	bfi	r4, r2, #8, #8
 801ad3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ad3e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801ad42:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801ad46:	fb10 2203 	smlabb	r2, r0, r3, r2
 801ad4a:	f363 4417 	bfi	r4, r3, #16, #8
 801ad4e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801ad52:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801ad56:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801ad5a:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801ad5e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801ad62:	f8c8 4004 	str.w	r4, [r8, #4]
 801ad66:	e7d0      	b.n	801ad0a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801ad68:	2a02      	cmp	r2, #2
 801ad6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ad6e:	d12e      	bne.n	801adce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801ad70:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ad74:	f1a3 0a20 	sub.w	sl, r3, #32
 801ad78:	f108 0602 	add.w	r6, r8, #2
 801ad7c:	b2d2      	uxtb	r2, r2
 801ad7e:	f002 010f 	and.w	r1, r2, #15
 801ad82:	1112      	asrs	r2, r2, #4
 801ad84:	3908      	subs	r1, #8
 801ad86:	3a08      	subs	r2, #8
 801ad88:	4451      	add	r1, sl
 801ad8a:	4492      	add	sl, r2
 801ad8c:	4421      	add	r1, r4
 801ad8e:	b2c9      	uxtb	r1, r1
 801ad90:	f361 0407 	bfi	r4, r1, #0, #8
 801ad94:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801ad98:	f1a8 0820 	sub.w	r8, r8, #32
 801ad9c:	4443      	add	r3, r8
 801ad9e:	b2db      	uxtb	r3, r3
 801ada0:	f363 240f 	bfi	r4, r3, #8, #8
 801ada4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ada8:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801adac:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801adb0:	fb10 330a 	smlabb	r3, r0, sl, r3
 801adb4:	f36a 4417 	bfi	r4, sl, #16, #8
 801adb8:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801adbc:	0e22      	lsrs	r2, r4, #24
 801adbe:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801adc2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801adc6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801adca:	6054      	str	r4, [r2, #4]
 801adcc:	e79d      	b.n	801ad0a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801adce:	3301      	adds	r3, #1
 801add0:	42ab      	cmp	r3, r5
 801add2:	dd59      	ble.n	801ae88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801add4:	1b5d      	subs	r5, r3, r5
 801add6:	2d00      	cmp	r5, #0
 801add8:	dc58      	bgt.n	801ae8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801adda:	f8dd a004 	ldr.w	sl, [sp, #4]
 801adde:	f04f 0800 	mov.w	r8, #0
 801ade2:	f1ba 0f00 	cmp.w	sl, #0
 801ade6:	f340 8108 	ble.w	801affa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801adea:	1c73      	adds	r3, r6, #1
 801adec:	9303      	str	r3, [sp, #12]
 801adee:	7833      	ldrb	r3, [r6, #0]
 801adf0:	b2db      	uxtb	r3, r3
 801adf2:	2bfe      	cmp	r3, #254	@ 0xfe
 801adf4:	d16a      	bne.n	801aecc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801adf6:	7871      	ldrb	r1, [r6, #1]
 801adf8:	1d33      	adds	r3, r6, #4
 801adfa:	78b2      	ldrb	r2, [r6, #2]
 801adfc:	b2c9      	uxtb	r1, r1
 801adfe:	78f0      	ldrb	r0, [r6, #3]
 801ae00:	b2d2      	uxtb	r2, r2
 801ae02:	9303      	str	r3, [sp, #12]
 801ae04:	f361 0407 	bfi	r4, r1, #0, #8
 801ae08:	b2c0      	uxtb	r0, r0
 801ae0a:	2303      	movs	r3, #3
 801ae0c:	f362 240f 	bfi	r4, r2, #8, #8
 801ae10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ae14:	fb13 2200 	smlabb	r2, r3, r0, r2
 801ae18:	f360 4417 	bfi	r4, r0, #16, #8
 801ae1c:	2307      	movs	r3, #7
 801ae1e:	0e25      	lsrs	r5, r4, #24
 801ae20:	fb13 2101 	smlabb	r1, r3, r1, r2
 801ae24:	230b      	movs	r3, #11
 801ae26:	fb13 1305 	smlabb	r3, r3, r5, r1
 801ae2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ae2e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ae32:	605c      	str	r4, [r3, #4]
 801ae34:	2501      	movs	r5, #1
 801ae36:	462e      	mov	r6, r5
 801ae38:	eb06 0308 	add.w	r3, r6, r8
 801ae3c:	ebaa 0a06 	sub.w	sl, sl, r6
 801ae40:	1bad      	subs	r5, r5, r6
 801ae42:	2b40      	cmp	r3, #64	@ 0x40
 801ae44:	dd16      	ble.n	801ae74 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801ae46:	4658      	mov	r0, fp
 801ae48:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801ae4c:	f7e8 f8aa 	bl	8002fa4 <_ZN8touchgfx5paint9flushLineEPmi>
 801ae50:	4659      	mov	r1, fp
 801ae52:	9b05      	ldr	r3, [sp, #20]
 801ae54:	4642      	mov	r2, r8
 801ae56:	4638      	mov	r0, r7
 801ae58:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ae5c:	f7e8 f90a 	bl	8003074 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801ae60:	4b30      	ldr	r3, [pc, #192]	@ (801af24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801ae62:	4447      	add	r7, r8
 801ae64:	f04f 0800 	mov.w	r8, #0
 801ae68:	459b      	cmp	fp, r3
 801ae6a:	bf0c      	ite	eq
 801ae6c:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801af28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801ae70:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801af24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801ae74:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801ae78:	4633      	mov	r3, r6
 801ae7a:	3b01      	subs	r3, #1
 801ae7c:	f842 4b04 	str.w	r4, [r2], #4
 801ae80:	d1fb      	bne.n	801ae7a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801ae82:	44b0      	add	r8, r6
 801ae84:	9e03      	ldr	r6, [sp, #12]
 801ae86:	e7ac      	b.n	801ade2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801ae88:	1aed      	subs	r5, r5, r3
 801ae8a:	e73f      	b.n	801ad0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801ae8c:	9b01      	ldr	r3, [sp, #4]
 801ae8e:	42ab      	cmp	r3, r5
 801ae90:	bfa8      	it	ge
 801ae92:	462b      	movge	r3, r5
 801ae94:	4698      	mov	r8, r3
 801ae96:	9b01      	ldr	r3, [sp, #4]
 801ae98:	eba3 0a08 	sub.w	sl, r3, r8
 801ae9c:	0e23      	lsrs	r3, r4, #24
 801ae9e:	eba5 0508 	sub.w	r5, r5, r8
 801aea2:	d00b      	beq.n	801aebc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801aea4:	9a05      	ldr	r2, [sp, #20]
 801aea6:	4641      	mov	r1, r8
 801aea8:	4638      	mov	r0, r7
 801aeaa:	4353      	muls	r3, r2
 801aeac:	1c5a      	adds	r2, r3, #1
 801aeae:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801aeb2:	4622      	mov	r2, r4
 801aeb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801aeb8:	f7e8 f88e 	bl	8002fd8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801aebc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801aec0:	4447      	add	r7, r8
 801aec2:	e78c      	b.n	801adde <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801aec4:	f8dd a004 	ldr.w	sl, [sp, #4]
 801aec8:	4646      	mov	r6, r8
 801aeca:	e788      	b.n	801adde <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801aecc:	2bff      	cmp	r3, #255	@ 0xff
 801aece:	d11d      	bne.n	801af0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801aed0:	7870      	ldrb	r0, [r6, #1]
 801aed2:	1d73      	adds	r3, r6, #5
 801aed4:	78b2      	ldrb	r2, [r6, #2]
 801aed6:	b2c0      	uxtb	r0, r0
 801aed8:	78f5      	ldrb	r5, [r6, #3]
 801aeda:	b2d2      	uxtb	r2, r2
 801aedc:	9303      	str	r3, [sp, #12]
 801aede:	f360 0407 	bfi	r4, r0, #0, #8
 801aee2:	7933      	ldrb	r3, [r6, #4]
 801aee4:	b2ed      	uxtb	r5, r5
 801aee6:	b2d9      	uxtb	r1, r3
 801aee8:	f362 240f 	bfi	r4, r2, #8, #8
 801aeec:	2303      	movs	r3, #3
 801aeee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801aef2:	f365 4417 	bfi	r4, r5, #16, #8
 801aef6:	fb13 2205 	smlabb	r2, r3, r5, r2
 801aefa:	2307      	movs	r3, #7
 801aefc:	f361 641f 	bfi	r4, r1, #24, #8
 801af00:	fb13 2000 	smlabb	r0, r3, r0, r2
 801af04:	230b      	movs	r3, #11
 801af06:	fb13 0301 	smlabb	r3, r3, r1, r0
 801af0a:	e78e      	b.n	801ae2a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801af0c:	119d      	asrs	r5, r3, #6
 801af0e:	d10d      	bne.n	801af2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801af10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801af14:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801af18:	685c      	ldr	r4, [r3, #4]
 801af1a:	e78b      	b.n	801ae34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801af1c:	240251f0 	.word	0x240251f0
 801af20:	240251ea 	.word	0x240251ea
 801af24:	24009740 	.word	0x24009740
 801af28:	24009840 	.word	0x24009840
 801af2c:	2d01      	cmp	r5, #1
 801af2e:	d12a      	bne.n	801af86 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801af30:	f003 0203 	and.w	r2, r3, #3
 801af34:	1ea1      	subs	r1, r4, #2
 801af36:	2603      	movs	r6, #3
 801af38:	4411      	add	r1, r2
 801af3a:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801af3e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801af42:	b2c9      	uxtb	r1, r1
 801af44:	3a02      	subs	r2, #2
 801af46:	3b02      	subs	r3, #2
 801af48:	f361 0407 	bfi	r4, r1, #0, #8
 801af4c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801af50:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801af54:	f362 240f 	bfi	r4, r2, #8, #8
 801af58:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801af5c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801af60:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801af64:	fb16 2203 	smlabb	r2, r6, r3, r2
 801af68:	f363 4417 	bfi	r4, r3, #16, #8
 801af6c:	2307      	movs	r3, #7
 801af6e:	0e20      	lsrs	r0, r4, #24
 801af70:	fb13 2101 	smlabb	r1, r3, r1, r2
 801af74:	230b      	movs	r3, #11
 801af76:	fb13 1300 	smlabb	r3, r3, r0, r1
 801af7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801af7e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801af82:	605c      	str	r4, [r3, #4]
 801af84:	e757      	b.n	801ae36 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801af86:	2d02      	cmp	r5, #2
 801af88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801af8c:	d12f      	bne.n	801afee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801af8e:	1cb2      	adds	r2, r6, #2
 801af90:	f1a3 0020 	sub.w	r0, r3, #32
 801af94:	9203      	str	r2, [sp, #12]
 801af96:	7872      	ldrb	r2, [r6, #1]
 801af98:	b2d2      	uxtb	r2, r2
 801af9a:	f002 010f 	and.w	r1, r2, #15
 801af9e:	1112      	asrs	r2, r2, #4
 801afa0:	3908      	subs	r1, #8
 801afa2:	3a08      	subs	r2, #8
 801afa4:	4401      	add	r1, r0
 801afa6:	4402      	add	r2, r0
 801afa8:	4421      	add	r1, r4
 801afaa:	b2c9      	uxtb	r1, r1
 801afac:	f361 0407 	bfi	r4, r1, #0, #8
 801afb0:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801afb4:	3d20      	subs	r5, #32
 801afb6:	442b      	add	r3, r5
 801afb8:	2503      	movs	r5, #3
 801afba:	b2db      	uxtb	r3, r3
 801afbc:	f363 240f 	bfi	r4, r3, #8, #8
 801afc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801afc4:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801afc8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801afcc:	fb15 3302 	smlabb	r3, r5, r2, r3
 801afd0:	f362 4417 	bfi	r4, r2, #16, #8
 801afd4:	2207      	movs	r2, #7
 801afd6:	0e20      	lsrs	r0, r4, #24
 801afd8:	fb12 3201 	smlabb	r2, r2, r1, r3
 801afdc:	210b      	movs	r1, #11
 801afde:	fb11 2100 	smlabb	r1, r1, r0, r2
 801afe2:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801afe6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801afea:	604c      	str	r4, [r1, #4]
 801afec:	e722      	b.n	801ae34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801afee:	1c5d      	adds	r5, r3, #1
 801aff0:	4656      	mov	r6, sl
 801aff2:	45aa      	cmp	sl, r5
 801aff4:	bfa8      	it	ge
 801aff6:	462e      	movge	r6, r5
 801aff8:	e71e      	b.n	801ae38 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801affa:	f1b8 0f00 	cmp.w	r8, #0
 801affe:	d00d      	beq.n	801b01c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801b000:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801b004:	4658      	mov	r0, fp
 801b006:	f7e7 ffcd 	bl	8002fa4 <_ZN8touchgfx5paint9flushLineEPmi>
 801b00a:	4642      	mov	r2, r8
 801b00c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b010:	4638      	mov	r0, r7
 801b012:	9b05      	ldr	r3, [sp, #20]
 801b014:	4659      	mov	r1, fp
 801b016:	4447      	add	r7, r8
 801b018:	f7e8 f82c 	bl	8003074 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801b01c:	4b1d      	ldr	r3, [pc, #116]	@ (801b094 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801b01e:	9a01      	ldr	r2, [sp, #4]
 801b020:	881b      	ldrh	r3, [r3, #0]
 801b022:	1a9b      	subs	r3, r3, r2
 801b024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b028:	441f      	add	r7, r3
 801b02a:	9b04      	ldr	r3, [sp, #16]
 801b02c:	3301      	adds	r3, #1
 801b02e:	9304      	str	r3, [sp, #16]
 801b030:	9a04      	ldr	r2, [sp, #16]
 801b032:	9b00      	ldr	r3, [sp, #0]
 801b034:	4293      	cmp	r3, r2
 801b036:	d11d      	bne.n	801b074 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801b038:	9b02      	ldr	r3, [sp, #8]
 801b03a:	2400      	movs	r4, #0
 801b03c:	9a02      	ldr	r2, [sp, #8]
 801b03e:	f103 0801 	add.w	r8, r3, #1
 801b042:	9b06      	ldr	r3, [sp, #24]
 801b044:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801b048:	4621      	mov	r1, r4
 801b04a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b04e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b052:	9b07      	ldr	r3, [sp, #28]
 801b054:	ba36      	rev	r6, r6
 801b056:	9808      	ldr	r0, [sp, #32]
 801b058:	441e      	add	r6, r3
 801b05a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b05e:	1aed      	subs	r5, r5, r3
 801b060:	f008 f9f2 	bl	8023448 <memset>
 801b064:	f8cd 8008 	str.w	r8, [sp, #8]
 801b068:	b2ad      	uxth	r5, r5
 801b06a:	9404      	str	r4, [sp, #16]
 801b06c:	f7e7 ff90 	bl	8002f90 <_ZN8touchgfx5paint8tearDownEv>
 801b070:	46b0      	mov	r8, r6
 801b072:	e5df      	b.n	801ac34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801b074:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b078:	9a01      	ldr	r2, [sp, #4]
 801b07a:	1a9b      	subs	r3, r3, r2
 801b07c:	1b5d      	subs	r5, r3, r5
 801b07e:	b2ad      	uxth	r5, r5
 801b080:	e7f4      	b.n	801b06c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801b082:	4b05      	ldr	r3, [pc, #20]	@ (801b098 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801b084:	6818      	ldr	r0, [r3, #0]
 801b086:	6803      	ldr	r3, [r0, #0]
 801b088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b08a:	4798      	blx	r3
 801b08c:	b00f      	add	sp, #60	@ 0x3c
 801b08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b092:	bf00      	nop
 801b094:	240251ea 	.word	0x240251ea
 801b098:	240251f0 	.word	0x240251f0

0801b09c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801b09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0a0:	b093      	sub	sp, #76	@ 0x4c
 801b0a2:	460d      	mov	r5, r1
 801b0a4:	4616      	mov	r6, r2
 801b0a6:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801b0aa:	9000      	str	r0, [sp, #0]
 801b0ac:	f1bb 0f00 	cmp.w	fp, #0
 801b0b0:	f000 82ac 	beq.w	801b60c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801b0b4:	6810      	ldr	r0, [r2, #0]
 801b0b6:	ac0e      	add	r4, sp, #56	@ 0x38
 801b0b8:	6851      	ldr	r1, [r2, #4]
 801b0ba:	c403      	stmia	r4!, {r0, r1}
 801b0bc:	6818      	ldr	r0, [r3, #0]
 801b0be:	ac10      	add	r4, sp, #64	@ 0x40
 801b0c0:	6859      	ldr	r1, [r3, #4]
 801b0c2:	c403      	stmia	r4!, {r0, r1}
 801b0c4:	a80e      	add	r0, sp, #56	@ 0x38
 801b0c6:	f7f8 fe37 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b0ca:	4631      	mov	r1, r6
 801b0cc:	a810      	add	r0, sp, #64	@ 0x40
 801b0ce:	f7f8 fe5b 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b0d2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801b0d6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b0da:	bfdb      	ittet	le
 801b0dc:	b293      	uxthle	r3, r2
 801b0de:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801b0e2:	2301      	movgt	r3, #1
 801b0e4:	fb91 f3f3 	sdivle	r3, r1, r3
 801b0e8:	9301      	str	r3, [sp, #4]
 801b0ea:	f105 0308 	add.w	r3, r5, #8
 801b0ee:	9901      	ldr	r1, [sp, #4]
 801b0f0:	9305      	str	r3, [sp, #20]
 801b0f2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b0f6:	440b      	add	r3, r1
 801b0f8:	3b01      	subs	r3, #1
 801b0fa:	fb93 f3f1 	sdiv	r3, r3, r1
 801b0fe:	3b01      	subs	r3, #1
 801b100:	9905      	ldr	r1, [sp, #20]
 801b102:	b29b      	uxth	r3, r3
 801b104:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b108:	9901      	ldr	r1, [sp, #4]
 801b10a:	9306      	str	r3, [sp, #24]
 801b10c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801b110:	fb93 f0f1 	sdiv	r0, r3, r1
 801b114:	b284      	uxth	r4, r0
 801b116:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801b11a:	9403      	str	r4, [sp, #12]
 801b11c:	9d03      	ldr	r5, [sp, #12]
 801b11e:	9c01      	ldr	r4, [sp, #4]
 801b120:	fb05 3714 	mls	r7, r5, r4, r3
 801b124:	fb17 f702 	smulbb	r7, r7, r2
 801b128:	440f      	add	r7, r1
 801b12a:	b2bf      	uxth	r7, r7
 801b12c:	2d00      	cmp	r5, #0
 801b12e:	d06b      	beq.n	801b208 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801b130:	1e6a      	subs	r2, r5, #1
 801b132:	9805      	ldr	r0, [sp, #20]
 801b134:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801b138:	9a06      	ldr	r2, [sp, #24]
 801b13a:	fa99 f989 	rev.w	r9, r9
 801b13e:	4491      	add	r9, r2
 801b140:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801b144:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801b148:	4411      	add	r1, r2
 801b14a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801b14e:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801b4ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801b152:	4413      	add	r3, r2
 801b154:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b158:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b15c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801b160:	9302      	str	r3, [sp, #8]
 801b162:	4bd0      	ldr	r3, [pc, #832]	@ (801b4a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801b164:	6818      	ldr	r0, [r3, #0]
 801b166:	6803      	ldr	r3, [r0, #0]
 801b168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b16a:	4798      	blx	r3
 801b16c:	4bce      	ldr	r3, [pc, #824]	@ (801b4a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801b16e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801b172:	881b      	ldrh	r3, [r3, #0]
 801b174:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801b178:	fb03 2404 	mla	r4, r3, r4, r2
 801b17c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b180:	436b      	muls	r3, r5
 801b182:	2500      	movs	r5, #0
 801b184:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b188:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b18c:	4629      	mov	r1, r5
 801b18e:	4404      	add	r4, r0
 801b190:	18e3      	adds	r3, r4, r3
 801b192:	930d      	str	r3, [sp, #52]	@ 0x34
 801b194:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801b198:	fb97 f3f3 	sdiv	r3, r7, r3
 801b19c:	9304      	str	r3, [sp, #16]
 801b19e:	9b00      	ldr	r3, [sp, #0]
 801b1a0:	3304      	adds	r3, #4
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b1a6:	f008 f94f 	bl	8023448 <memset>
 801b1aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b1ac:	42a3      	cmp	r3, r4
 801b1ae:	f240 8228 	bls.w	801b602 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801b1b2:	2003      	movs	r0, #3
 801b1b4:	2607      	movs	r6, #7
 801b1b6:	2f00      	cmp	r7, #0
 801b1b8:	f000 80cb 	beq.w	801b352 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801b1bc:	f899 3000 	ldrb.w	r3, [r9]
 801b1c0:	b2db      	uxtb	r3, r3
 801b1c2:	2bfe      	cmp	r3, #254	@ 0xfe
 801b1c4:	d123      	bne.n	801b20e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801b1c6:	f899 3001 	ldrb.w	r3, [r9, #1]
 801b1ca:	3f01      	subs	r7, #1
 801b1cc:	f899 2002 	ldrb.w	r2, [r9, #2]
 801b1d0:	f109 0804 	add.w	r8, r9, #4
 801b1d4:	b2db      	uxtb	r3, r3
 801b1d6:	f899 1003 	ldrb.w	r1, [r9, #3]
 801b1da:	b2d2      	uxtb	r2, r2
 801b1dc:	f363 0507 	bfi	r5, r3, #0, #8
 801b1e0:	b2c9      	uxtb	r1, r1
 801b1e2:	b2bf      	uxth	r7, r7
 801b1e4:	f362 250f 	bfi	r5, r2, #8, #8
 801b1e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b1ec:	fb10 2201 	smlabb	r2, r0, r1, r2
 801b1f0:	f361 4517 	bfi	r5, r1, #16, #8
 801b1f4:	fb16 2303 	smlabb	r3, r6, r3, r2
 801b1f8:	9a00      	ldr	r2, [sp, #0]
 801b1fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b1fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b202:	605d      	str	r5, [r3, #4]
 801b204:	46c1      	mov	r9, r8
 801b206:	e7d6      	b.n	801b1b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801b208:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801b20c:	e798      	b.n	801b140 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801b20e:	119a      	asrs	r2, r3, #6
 801b210:	f109 0801 	add.w	r8, r9, #1
 801b214:	d108      	bne.n	801b228 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801b216:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b21a:	9a00      	ldr	r2, [sp, #0]
 801b21c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b220:	685d      	ldr	r5, [r3, #4]
 801b222:	3f01      	subs	r7, #1
 801b224:	b2bf      	uxth	r7, r7
 801b226:	e7ed      	b.n	801b204 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801b228:	2a01      	cmp	r2, #1
 801b22a:	d125      	bne.n	801b278 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801b22c:	f003 0103 	and.w	r1, r3, #3
 801b230:	1eaa      	subs	r2, r5, #2
 801b232:	440a      	add	r2, r1
 801b234:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801b238:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b23c:	b2d2      	uxtb	r2, r2
 801b23e:	3902      	subs	r1, #2
 801b240:	3b02      	subs	r3, #2
 801b242:	f362 0507 	bfi	r5, r2, #0, #8
 801b246:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801b24a:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801b24e:	f361 250f 	bfi	r5, r1, #8, #8
 801b252:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801b256:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801b25a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801b25e:	fb10 1103 	smlabb	r1, r0, r3, r1
 801b262:	f363 4517 	bfi	r5, r3, #16, #8
 801b266:	9b00      	ldr	r3, [sp, #0]
 801b268:	fb16 1202 	smlabb	r2, r6, r2, r1
 801b26c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b270:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801b274:	6055      	str	r5, [r2, #4]
 801b276:	e7d4      	b.n	801b222 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801b278:	2a02      	cmp	r2, #2
 801b27a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b27e:	d12c      	bne.n	801b2da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801b280:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b284:	f1a3 0c20 	sub.w	ip, r3, #32
 801b288:	f109 0802 	add.w	r8, r9, #2
 801b28c:	b2d2      	uxtb	r2, r2
 801b28e:	f002 010f 	and.w	r1, r2, #15
 801b292:	1112      	asrs	r2, r2, #4
 801b294:	3908      	subs	r1, #8
 801b296:	3a08      	subs	r2, #8
 801b298:	4461      	add	r1, ip
 801b29a:	4494      	add	ip, r2
 801b29c:	4429      	add	r1, r5
 801b29e:	b2c9      	uxtb	r1, r1
 801b2a0:	f361 0507 	bfi	r5, r1, #0, #8
 801b2a4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801b2a8:	f1ae 0e20 	sub.w	lr, lr, #32
 801b2ac:	4473      	add	r3, lr
 801b2ae:	b2db      	uxtb	r3, r3
 801b2b0:	f363 250f 	bfi	r5, r3, #8, #8
 801b2b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b2b8:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801b2bc:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801b2c0:	fb10 330c 	smlabb	r3, r0, ip, r3
 801b2c4:	f36c 4517 	bfi	r5, ip, #16, #8
 801b2c8:	fb16 3101 	smlabb	r1, r6, r1, r3
 801b2cc:	9b00      	ldr	r3, [sp, #0]
 801b2ce:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801b2d2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801b2d6:	604d      	str	r5, [r1, #4]
 801b2d8:	e7a3      	b.n	801b222 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801b2da:	3301      	adds	r3, #1
 801b2dc:	42bb      	cmp	r3, r7
 801b2de:	dd23      	ble.n	801b328 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801b2e0:	eba3 0907 	sub.w	r9, r3, r7
 801b2e4:	f1b9 0f00 	cmp.w	r9, #0
 801b2e8:	dc20      	bgt.n	801b32c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801b2ea:	9e02      	ldr	r6, [sp, #8]
 801b2ec:	2700      	movs	r7, #0
 801b2ee:	2e00      	cmp	r6, #0
 801b2f0:	f340 8142 	ble.w	801b578 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801b2f4:	f108 0301 	add.w	r3, r8, #1
 801b2f8:	9307      	str	r3, [sp, #28]
 801b2fa:	f898 3000 	ldrb.w	r3, [r8]
 801b2fe:	b2db      	uxtb	r3, r3
 801b300:	119a      	asrs	r2, r3, #6
 801b302:	d12a      	bne.n	801b35a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801b304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b308:	9a00      	ldr	r2, [sp, #0]
 801b30a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b30e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b312:	685d      	ldr	r5, [r3, #4]
 801b314:	f040 811f 	bne.w	801b556 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b318:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b31c:	7025      	strb	r5, [r4, #0]
 801b31e:	7063      	strb	r3, [r4, #1]
 801b320:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b324:	70a3      	strb	r3, [r4, #2]
 801b326:	e04e      	b.n	801b3c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b328:	1aff      	subs	r7, r7, r3
 801b32a:	e77b      	b.n	801b224 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801b32c:	9b02      	ldr	r3, [sp, #8]
 801b32e:	4620      	mov	r0, r4
 801b330:	462a      	mov	r2, r5
 801b332:	454b      	cmp	r3, r9
 801b334:	bfa8      	it	ge
 801b336:	464b      	movge	r3, r9
 801b338:	461f      	mov	r7, r3
 801b33a:	9b02      	ldr	r3, [sp, #8]
 801b33c:	4639      	mov	r1, r7
 801b33e:	1bde      	subs	r6, r3, r7
 801b340:	eba9 0907 	sub.w	r9, r9, r7
 801b344:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b348:	465b      	mov	r3, fp
 801b34a:	f7e7 fe45 	bl	8002fd8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801b34e:	443c      	add	r4, r7
 801b350:	e7cc      	b.n	801b2ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801b352:	46c8      	mov	r8, r9
 801b354:	9e02      	ldr	r6, [sp, #8]
 801b356:	46b9      	mov	r9, r7
 801b358:	e7c8      	b.n	801b2ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801b35a:	2a01      	cmp	r2, #1
 801b35c:	d136      	bne.n	801b3cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801b35e:	f003 0103 	and.w	r1, r3, #3
 801b362:	1ea8      	subs	r0, r5, #2
 801b364:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b368:	4408      	add	r0, r1
 801b36a:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801b36e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b372:	b2c0      	uxtb	r0, r0
 801b374:	f1a1 0102 	sub.w	r1, r1, #2
 801b378:	f1a3 0302 	sub.w	r3, r3, #2
 801b37c:	f360 0507 	bfi	r5, r0, #0, #8
 801b380:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801b384:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801b388:	f361 250f 	bfi	r5, r1, #8, #8
 801b38c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801b390:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801b394:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801b398:	f04f 0303 	mov.w	r3, #3
 801b39c:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801b3a0:	f04f 0c07 	mov.w	ip, #7
 801b3a4:	9b00      	ldr	r3, [sp, #0]
 801b3a6:	f368 4517 	bfi	r5, r8, #16, #8
 801b3aa:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801b3ae:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801b3b2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801b3b6:	f8cc 5004 	str.w	r5, [ip, #4]
 801b3ba:	f040 80cd 	bne.w	801b558 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801b3be:	7020      	strb	r0, [r4, #0]
 801b3c0:	7061      	strb	r1, [r4, #1]
 801b3c2:	f884 8002 	strb.w	r8, [r4, #2]
 801b3c6:	3e01      	subs	r6, #1
 801b3c8:	3403      	adds	r4, #3
 801b3ca:	e0c1      	b.n	801b550 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801b3cc:	2a02      	cmp	r2, #2
 801b3ce:	d13d      	bne.n	801b44c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801b3d0:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b3d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b3d8:	f108 0202 	add.w	r2, r8, #2
 801b3dc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b3e0:	b2c9      	uxtb	r1, r1
 801b3e2:	f1a3 0c20 	sub.w	ip, r3, #32
 801b3e6:	9207      	str	r2, [sp, #28]
 801b3e8:	f001 000f 	and.w	r0, r1, #15
 801b3ec:	f1a0 0008 	sub.w	r0, r0, #8
 801b3f0:	4460      	add	r0, ip
 801b3f2:	4428      	add	r0, r5
 801b3f4:	b2c0      	uxtb	r0, r0
 801b3f6:	f360 0507 	bfi	r5, r0, #0, #8
 801b3fa:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801b3fe:	f1a2 0220 	sub.w	r2, r2, #32
 801b402:	4413      	add	r3, r2
 801b404:	ea4f 1221 	mov.w	r2, r1, asr #4
 801b408:	b2db      	uxtb	r3, r3
 801b40a:	f1a2 0208 	sub.w	r2, r2, #8
 801b40e:	f363 250f 	bfi	r5, r3, #8, #8
 801b412:	4462      	add	r2, ip
 801b414:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801b418:	f04f 0c03 	mov.w	ip, #3
 801b41c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801b420:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b424:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801b428:	f04f 0107 	mov.w	r1, #7
 801b42c:	f362 4517 	bfi	r5, r2, #16, #8
 801b430:	fb11 c100 	smlabb	r1, r1, r0, ip
 801b434:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801b438:	9900      	ldr	r1, [sp, #0]
 801b43a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801b43e:	604d      	str	r5, [r1, #4]
 801b440:	f040 8089 	bne.w	801b556 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b444:	7020      	strb	r0, [r4, #0]
 801b446:	7063      	strb	r3, [r4, #1]
 801b448:	70a2      	strb	r2, [r4, #2]
 801b44a:	e7bc      	b.n	801b3c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b44c:	2bfe      	cmp	r3, #254	@ 0xfe
 801b44e:	d12f      	bne.n	801b4b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801b450:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b454:	f108 0304 	add.w	r3, r8, #4
 801b458:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b45c:	f04f 0c03 	mov.w	ip, #3
 801b460:	f898 1003 	ldrb.w	r1, [r8, #3]
 801b464:	b2c0      	uxtb	r0, r0
 801b466:	b2d2      	uxtb	r2, r2
 801b468:	9307      	str	r3, [sp, #28]
 801b46a:	b2c9      	uxtb	r1, r1
 801b46c:	f360 0507 	bfi	r5, r0, #0, #8
 801b470:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801b474:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b478:	f362 250f 	bfi	r5, r2, #8, #8
 801b47c:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801b480:	f04f 0307 	mov.w	r3, #7
 801b484:	f361 4517 	bfi	r5, r1, #16, #8
 801b488:	fb13 c300 	smlabb	r3, r3, r0, ip
 801b48c:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801b490:	9b00      	ldr	r3, [sp, #0]
 801b492:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801b496:	605d      	str	r5, [r3, #4]
 801b498:	d15d      	bne.n	801b556 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b49a:	7020      	strb	r0, [r4, #0]
 801b49c:	7062      	strb	r2, [r4, #1]
 801b49e:	70a1      	strb	r1, [r4, #2]
 801b4a0:	e791      	b.n	801b3c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b4a2:	bf00      	nop
 801b4a4:	240251f0 	.word	0x240251f0
 801b4a8:	240251ea 	.word	0x240251ea
 801b4ac:	24009740 	.word	0x24009740
 801b4b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b4b4:	1c5a      	adds	r2, r3, #1
 801b4b6:	b94b      	cbnz	r3, 801b4cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801b4b8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b4bc:	d14c      	bne.n	801b558 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801b4be:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801b4c2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b4c6:	7025      	strb	r5, [r4, #0]
 801b4c8:	7062      	strb	r2, [r4, #1]
 801b4ca:	e72b      	b.n	801b324 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801b4cc:	4296      	cmp	r6, r2
 801b4ce:	46b0      	mov	r8, r6
 801b4d0:	bfa8      	it	ge
 801b4d2:	4690      	movge	r8, r2
 801b4d4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b4d8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b4dc:	eba6 0608 	sub.w	r6, r6, r8
 801b4e0:	eba2 0908 	sub.w	r9, r2, r8
 801b4e4:	9308      	str	r3, [sp, #32]
 801b4e6:	b2eb      	uxtb	r3, r5
 801b4e8:	930c      	str	r3, [sp, #48]	@ 0x30
 801b4ea:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b4ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b4f0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b4f4:	930a      	str	r3, [sp, #40]	@ 0x28
 801b4f6:	9b08      	ldr	r3, [sp, #32]
 801b4f8:	d030      	beq.n	801b55c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801b4fa:	18fb      	adds	r3, r7, r3
 801b4fc:	2bc0      	cmp	r3, #192	@ 0xc0
 801b4fe:	dd15      	ble.n	801b52c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801b500:	4650      	mov	r0, sl
 801b502:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801b506:	f7e7 fd4d 	bl	8002fa4 <_ZN8touchgfx5paint9flushLineEPmi>
 801b50a:	2203      	movs	r2, #3
 801b50c:	4651      	mov	r1, sl
 801b50e:	465b      	mov	r3, fp
 801b510:	4620      	mov	r0, r4
 801b512:	443c      	add	r4, r7
 801b514:	fb97 f2f2 	sdiv	r2, r7, r2
 801b518:	f7e7 fd88 	bl	800302c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801b51c:	4b3d      	ldr	r3, [pc, #244]	@ (801b614 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801b51e:	2700      	movs	r7, #0
 801b520:	459a      	cmp	sl, r3
 801b522:	bf0c      	ite	eq
 801b524:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801b620 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801b528:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801b614 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801b52c:	eb0a 0307 	add.w	r3, sl, r7
 801b530:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b532:	f1b8 0801 	subs.w	r8, r8, #1
 801b536:	f103 0303 	add.w	r3, r3, #3
 801b53a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801b53e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b540:	f803 2c02 	strb.w	r2, [r3, #-2]
 801b544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b546:	f803 2c01 	strb.w	r2, [r3, #-1]
 801b54a:	d1f1      	bne.n	801b530 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801b54c:	9b08      	ldr	r3, [sp, #32]
 801b54e:	441f      	add	r7, r3
 801b550:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b554:	e6cb      	b.n	801b2ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801b556:	2201      	movs	r2, #1
 801b558:	4690      	mov	r8, r2
 801b55a:	e7bb      	b.n	801b4d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801b55c:	4423      	add	r3, r4
 801b55e:	42a3      	cmp	r3, r4
 801b560:	d9f6      	bls.n	801b550 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801b562:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b564:	3403      	adds	r4, #3
 801b566:	f804 2c03 	strb.w	r2, [r4, #-3]
 801b56a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b56c:	f804 2c02 	strb.w	r2, [r4, #-2]
 801b570:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b572:	f804 2c01 	strb.w	r2, [r4, #-1]
 801b576:	e7f2      	b.n	801b55e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801b578:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b57c:	d00e      	beq.n	801b59c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801b57e:	b16f      	cbz	r7, 801b59c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801b580:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801b584:	4650      	mov	r0, sl
 801b586:	f7e7 fd0d 	bl	8002fa4 <_ZN8touchgfx5paint9flushLineEPmi>
 801b58a:	2203      	movs	r2, #3
 801b58c:	4620      	mov	r0, r4
 801b58e:	443c      	add	r4, r7
 801b590:	465b      	mov	r3, fp
 801b592:	4651      	mov	r1, sl
 801b594:	fb97 f2f2 	sdiv	r2, r7, r2
 801b598:	f7e7 fd48 	bl	800302c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801b59c:	4b1e      	ldr	r3, [pc, #120]	@ (801b618 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801b59e:	9a02      	ldr	r2, [sp, #8]
 801b5a0:	881b      	ldrh	r3, [r3, #0]
 801b5a2:	1a9b      	subs	r3, r3, r2
 801b5a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5a8:	441c      	add	r4, r3
 801b5aa:	9b04      	ldr	r3, [sp, #16]
 801b5ac:	3301      	adds	r3, #1
 801b5ae:	9304      	str	r3, [sp, #16]
 801b5b0:	9a04      	ldr	r2, [sp, #16]
 801b5b2:	9b01      	ldr	r3, [sp, #4]
 801b5b4:	4293      	cmp	r3, r2
 801b5b6:	d11c      	bne.n	801b5f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801b5b8:	9b03      	ldr	r3, [sp, #12]
 801b5ba:	2500      	movs	r5, #0
 801b5bc:	9a03      	ldr	r2, [sp, #12]
 801b5be:	1c5e      	adds	r6, r3, #1
 801b5c0:	9b05      	ldr	r3, [sp, #20]
 801b5c2:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801b5c6:	4629      	mov	r1, r5
 801b5c8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801b5cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b5d0:	9b06      	ldr	r3, [sp, #24]
 801b5d2:	fa98 f888 	rev.w	r8, r8
 801b5d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b5d8:	4498      	add	r8, r3
 801b5da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b5de:	1aff      	subs	r7, r7, r3
 801b5e0:	f007 ff32 	bl	8023448 <memset>
 801b5e4:	b2bf      	uxth	r7, r7
 801b5e6:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801b5ea:	f7e7 fcd1 	bl	8002f90 <_ZN8touchgfx5paint8tearDownEv>
 801b5ee:	46c1      	mov	r9, r8
 801b5f0:	e5db      	b.n	801b1aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801b5f2:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801b5f6:	9b02      	ldr	r3, [sp, #8]
 801b5f8:	1aff      	subs	r7, r7, r3
 801b5fa:	eba7 0709 	sub.w	r7, r7, r9
 801b5fe:	b2bf      	uxth	r7, r7
 801b600:	e7f3      	b.n	801b5ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801b602:	4b06      	ldr	r3, [pc, #24]	@ (801b61c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801b604:	6818      	ldr	r0, [r3, #0]
 801b606:	6803      	ldr	r3, [r0, #0]
 801b608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b60a:	4798      	blx	r3
 801b60c:	b013      	add	sp, #76	@ 0x4c
 801b60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b612:	bf00      	nop
 801b614:	24009740 	.word	0x24009740
 801b618:	240251ea 	.word	0x240251ea
 801b61c:	240251f0 	.word	0x240251f0
 801b620:	24009840 	.word	0x24009840

0801b624 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b628:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801b62c:	9c06      	ldr	r4, [sp, #24]
 801b62e:	2800      	cmp	r0, #0
 801b630:	d06e      	beq.n	801b710 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b632:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801b636:	2d00      	cmp	r5, #0
 801b638:	dd6a      	ble.n	801b710 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b63a:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801b63e:	f1bc 0f00 	cmp.w	ip, #0
 801b642:	dd65      	ble.n	801b710 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b644:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801b648:	28ff      	cmp	r0, #255	@ 0xff
 801b64a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b64e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801b652:	fb02 3306 	mla	r3, r2, r6, r3
 801b656:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801b65a:	b2e4      	uxtb	r4, r4
 801b65c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b660:	4419      	add	r1, r3
 801b662:	fb02 f30c 	mul.w	r3, r2, ip
 801b666:	eba2 0205 	sub.w	r2, r2, r5
 801b66a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b66e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b672:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b676:	440b      	add	r3, r1
 801b678:	d03e      	beq.n	801b6f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801b67a:	fa1f fc80 	uxth.w	ip, r0
 801b67e:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801b682:	fb06 f60c 	mul.w	r6, r6, ip
 801b686:	b280      	uxth	r0, r0
 801b688:	fb07 f70c 	mul.w	r7, r7, ip
 801b68c:	fb04 f40c 	mul.w	r4, r4, ip
 801b690:	4299      	cmp	r1, r3
 801b692:	d23d      	bcs.n	801b710 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b694:	eb01 0c05 	add.w	ip, r1, r5
 801b698:	458c      	cmp	ip, r1
 801b69a:	f101 0e03 	add.w	lr, r1, #3
 801b69e:	d928      	bls.n	801b6f2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801b6a0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b6a4:	fb11 f100 	smulbb	r1, r1, r0
 801b6a8:	4421      	add	r1, r4
 801b6aa:	b289      	uxth	r1, r1
 801b6ac:	f101 0801 	add.w	r8, r1, #1
 801b6b0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b6b4:	1209      	asrs	r1, r1, #8
 801b6b6:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b6ba:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801b6be:	fb11 f100 	smulbb	r1, r1, r0
 801b6c2:	4439      	add	r1, r7
 801b6c4:	b289      	uxth	r1, r1
 801b6c6:	f101 0801 	add.w	r8, r1, #1
 801b6ca:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b6ce:	1209      	asrs	r1, r1, #8
 801b6d0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b6d4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b6d8:	fb11 f100 	smulbb	r1, r1, r0
 801b6dc:	4431      	add	r1, r6
 801b6de:	b289      	uxth	r1, r1
 801b6e0:	f101 0801 	add.w	r8, r1, #1
 801b6e4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b6e8:	1209      	asrs	r1, r1, #8
 801b6ea:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801b6ee:	4671      	mov	r1, lr
 801b6f0:	e7d2      	b.n	801b698 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801b6f2:	4411      	add	r1, r2
 801b6f4:	e7cc      	b.n	801b690 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801b6f6:	4411      	add	r1, r2
 801b6f8:	4299      	cmp	r1, r3
 801b6fa:	d209      	bcs.n	801b710 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b6fc:	1948      	adds	r0, r1, r5
 801b6fe:	4281      	cmp	r1, r0
 801b700:	d2f9      	bcs.n	801b6f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801b702:	700c      	strb	r4, [r1, #0]
 801b704:	3103      	adds	r1, #3
 801b706:	f801 7c02 	strb.w	r7, [r1, #-2]
 801b70a:	f801 6c01 	strb.w	r6, [r1, #-1]
 801b70e:	e7f6      	b.n	801b6fe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801b710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b714 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b718:	b093      	sub	sp, #76	@ 0x4c
 801b71a:	4699      	mov	r9, r3
 801b71c:	4617      	mov	r7, r2
 801b71e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b722:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801b726:	4604      	mov	r4, r0
 801b728:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b72c:	a80c      	add	r0, sp, #48	@ 0x30
 801b72e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801b732:	460d      	mov	r5, r1
 801b734:	4649      	mov	r1, r9
 801b736:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801b73a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b73e:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801b742:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801b746:	f7f3 fa39 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 801b74a:	4639      	mov	r1, r7
 801b74c:	a80c      	add	r0, sp, #48	@ 0x30
 801b74e:	f7f3 fa35 	bl	800ebbc <_ZN8touchgfx4RectaNERKS0_>
 801b752:	4b78      	ldr	r3, [pc, #480]	@ (801b934 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801b754:	8818      	ldrh	r0, [r3, #0]
 801b756:	4b78      	ldr	r3, [pc, #480]	@ (801b938 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801b758:	b202      	sxth	r2, r0
 801b75a:	8819      	ldrh	r1, [r3, #0]
 801b75c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801b760:	b20f      	sxth	r7, r1
 801b762:	2b00      	cmp	r3, #0
 801b764:	da07      	bge.n	801b776 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801b766:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801b76a:	4463      	add	r3, ip
 801b76c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801b770:	2300      	movs	r3, #0
 801b772:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801b776:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801b77a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801b77e:	1ad2      	subs	r2, r2, r3
 801b780:	4594      	cmp	ip, r2
 801b782:	bfc4      	itt	gt
 801b784:	1ac2      	subgt	r2, r0, r3
 801b786:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801b78a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801b78e:	2a00      	cmp	r2, #0
 801b790:	da07      	bge.n	801b7a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801b792:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801b796:	4462      	add	r2, ip
 801b798:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801b79c:	2200      	movs	r2, #0
 801b79e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801b7a2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801b7a6:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801b7aa:	1abf      	subs	r7, r7, r2
 801b7ac:	45bc      	cmp	ip, r7
 801b7ae:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801b940 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801b7b2:	bfc8      	it	gt
 801b7b4:	1a8f      	subgt	r7, r1, r2
 801b7b6:	f89c c000 	ldrb.w	ip, [ip]
 801b7ba:	bfc8      	it	gt
 801b7bc:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801b7c0:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801b7c4:	f1bc 0f00 	cmp.w	ip, #0
 801b7c8:	d176      	bne.n	801b8b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801b7ca:	4287      	cmp	r7, r0
 801b7cc:	bf14      	ite	ne
 801b7ce:	2100      	movne	r1, #0
 801b7d0:	2101      	moveq	r1, #1
 801b7d2:	2f00      	cmp	r7, #0
 801b7d4:	9107      	str	r1, [sp, #28]
 801b7d6:	dd73      	ble.n	801b8c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b7d8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801b7dc:	2900      	cmp	r1, #0
 801b7de:	9104      	str	r1, [sp, #16]
 801b7e0:	dd6e      	ble.n	801b8c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b7e2:	f8b9 1000 	ldrh.w	r1, [r9]
 801b7e6:	a80e      	add	r0, sp, #56	@ 0x38
 801b7e8:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801b7ec:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801b7f0:	1a5b      	subs	r3, r3, r1
 801b7f2:	a910      	add	r1, sp, #64	@ 0x40
 801b7f4:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801b7f8:	b21b      	sxth	r3, r3
 801b7fa:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801b7fe:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801b944 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b802:	9305      	str	r3, [sp, #20]
 801b804:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801b808:	1ad2      	subs	r2, r2, r3
 801b80a:	b213      	sxth	r3, r2
 801b80c:	9306      	str	r3, [sp, #24]
 801b80e:	9b05      	ldr	r3, [sp, #20]
 801b810:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801b814:	9b06      	ldr	r3, [sp, #24]
 801b816:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b81a:	9b04      	ldr	r3, [sp, #16]
 801b81c:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b820:	2300      	movs	r3, #0
 801b822:	9310      	str	r3, [sp, #64]	@ 0x40
 801b824:	f7f8 fab0 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b828:	4640      	mov	r0, r8
 801b82a:	f7f8 fa85 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b82e:	a810      	add	r0, sp, #64	@ 0x40
 801b830:	f7f8 fa82 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b834:	4b41      	ldr	r3, [pc, #260]	@ (801b93c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801b836:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801b83a:	4628      	mov	r0, r5
 801b83c:	881b      	ldrh	r3, [r3, #0]
 801b83e:	9308      	str	r3, [sp, #32]
 801b840:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801b844:	b21b      	sxth	r3, r3
 801b846:	9303      	str	r3, [sp, #12]
 801b848:	682b      	ldr	r3, [r5, #0]
 801b84a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b84c:	4798      	blx	r3
 801b84e:	9a03      	ldr	r2, [sp, #12]
 801b850:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801b854:	4681      	mov	r9, r0
 801b856:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801b85a:	fb13 f302 	smulbb	r3, r3, r2
 801b85e:	2203      	movs	r2, #3
 801b860:	f8da 0000 	ldr.w	r0, [sl]
 801b864:	fb15 3302 	smlabb	r3, r5, r2, r3
 801b868:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801b86a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b86c:	441d      	add	r5, r3
 801b86e:	6803      	ldr	r3, [r0, #0]
 801b870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b872:	4798      	blx	r3
 801b874:	9009      	str	r0, [sp, #36]	@ 0x24
 801b876:	f8da 0000 	ldr.w	r0, [sl]
 801b87a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801b87e:	6803      	ldr	r3, [r0, #0]
 801b880:	910a      	str	r1, [sp, #40]	@ 0x28
 801b882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b884:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801b888:	4798      	blx	r3
 801b88a:	f010 0f01 	tst.w	r0, #1
 801b88e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801b892:	d01e      	beq.n	801b8d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801b894:	f8da 0000 	ldr.w	r0, [sl]
 801b898:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801b89c:	6803      	ldr	r3, [r0, #0]
 801b89e:	9200      	str	r2, [sp, #0]
 801b8a0:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801b8a2:	462b      	mov	r3, r5
 801b8a4:	e898 0006 	ldmia.w	r8, {r1, r2}
 801b8a8:	47b0      	blx	r6
 801b8aa:	9b05      	ldr	r3, [sp, #20]
 801b8ac:	80a7      	strh	r7, [r4, #4]
 801b8ae:	8023      	strh	r3, [r4, #0]
 801b8b0:	9b06      	ldr	r3, [sp, #24]
 801b8b2:	8063      	strh	r3, [r4, #2]
 801b8b4:	9b04      	ldr	r3, [sp, #16]
 801b8b6:	e007      	b.n	801b8c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801b8b8:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801b8bc:	4288      	cmp	r0, r1
 801b8be:	e785      	b.n	801b7cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801b8c0:	2300      	movs	r3, #0
 801b8c2:	8023      	strh	r3, [r4, #0]
 801b8c4:	8063      	strh	r3, [r4, #2]
 801b8c6:	80a3      	strh	r3, [r4, #4]
 801b8c8:	4620      	mov	r0, r4
 801b8ca:	80e3      	strh	r3, [r4, #6]
 801b8cc:	b013      	add	sp, #76	@ 0x4c
 801b8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8d2:	fb09 f606 	mul.w	r6, r9, r6
 801b8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8d8:	fb11 6602 	smlabb	r6, r1, r2, r6
 801b8dc:	9a07      	ldr	r2, [sp, #28]
 801b8de:	4433      	add	r3, r6
 801b8e0:	461e      	mov	r6, r3
 801b8e2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b8e6:	b16a      	cbz	r2, 801b904 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b8e8:	9a08      	ldr	r2, [sp, #32]
 801b8ea:	4593      	cmp	fp, r2
 801b8ec:	d10a      	bne.n	801b904 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b8ee:	f8da 0000 	ldr.w	r0, [sl]
 801b8f2:	fb09 f303 	mul.w	r3, r9, r3
 801b8f6:	4629      	mov	r1, r5
 801b8f8:	6802      	ldr	r2, [r0, #0]
 801b8fa:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801b8fe:	4632      	mov	r2, r6
 801b900:	47d0      	blx	sl
 801b902:	e7d2      	b.n	801b8aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b904:	9a03      	ldr	r2, [sp, #12]
 801b906:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801b944 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b90a:	fb02 5803 	mla	r8, r2, r3, r5
 801b90e:	4545      	cmp	r5, r8
 801b910:	d2cb      	bcs.n	801b8aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b912:	f8db 0000 	ldr.w	r0, [fp]
 801b916:	4629      	mov	r1, r5
 801b918:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801b91c:	6802      	ldr	r2, [r0, #0]
 801b91e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b922:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801b926:	4632      	mov	r2, r6
 801b928:	47d0      	blx	sl
 801b92a:	9b03      	ldr	r3, [sp, #12]
 801b92c:	444e      	add	r6, r9
 801b92e:	441d      	add	r5, r3
 801b930:	e7ed      	b.n	801b90e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801b932:	bf00      	nop
 801b934:	240251e4 	.word	0x240251e4
 801b938:	240251e6 	.word	0x240251e6
 801b93c:	240251ea 	.word	0x240251ea
 801b940:	240251e8 	.word	0x240251e8
 801b944:	240251f0 	.word	0x240251f0

0801b948 <_ZN8touchgfx8LCD24bppC1Ev>:
 801b948:	2200      	movs	r2, #0
 801b94a:	490e      	ldr	r1, [pc, #56]	@ (801b984 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801b94c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801b950:	6001      	str	r1, [r0, #0]
 801b952:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b956:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b95a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801b95e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801b962:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801b966:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801b96a:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801b96e:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801b972:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801b976:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801b97a:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801b97e:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801b982:	4770      	bx	lr
 801b984:	08026fbc 	.word	0x08026fbc

0801b988 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b98c:	b091      	sub	sp, #68	@ 0x44
 801b98e:	4607      	mov	r7, r0
 801b990:	4688      	mov	r8, r1
 801b992:	6810      	ldr	r0, [r2, #0]
 801b994:	6851      	ldr	r1, [r2, #4]
 801b996:	ac0c      	add	r4, sp, #48	@ 0x30
 801b998:	4616      	mov	r6, r2
 801b99a:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801b99e:	4d64      	ldr	r5, [pc, #400]	@ (801bb30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801b9a0:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801bb34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801b9a4:	c403      	stmia	r4!, {r0, r1}
 801b9a6:	6818      	ldr	r0, [r3, #0]
 801b9a8:	ac0e      	add	r4, sp, #56	@ 0x38
 801b9aa:	6859      	ldr	r1, [r3, #4]
 801b9ac:	c403      	stmia	r4!, {r0, r1}
 801b9ae:	a80c      	add	r0, sp, #48	@ 0x30
 801b9b0:	f7f8 f9c2 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b9b4:	4631      	mov	r1, r6
 801b9b6:	a80e      	add	r0, sp, #56	@ 0x38
 801b9b8:	f7f8 f9e6 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b9bc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801b9c0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801b9c4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801b9c8:	6828      	ldr	r0, [r5, #0]
 801b9ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b9ce:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801b9d2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801b9d6:	440f      	add	r7, r1
 801b9d8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801b9dc:	440a      	add	r2, r1
 801b9de:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801b9e2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801b9e6:	4413      	add	r3, r2
 801b9e8:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b9ec:	6803      	ldr	r3, [r0, #0]
 801b9ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b9f0:	4798      	blx	r3
 801b9f2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801b9f6:	6828      	ldr	r0, [r5, #0]
 801b9f8:	d01f      	beq.n	801ba3a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801b9fa:	2201      	movs	r2, #1
 801b9fc:	2500      	movs	r5, #0
 801b9fe:	6801      	ldr	r1, [r0, #0]
 801ba00:	b2a4      	uxth	r4, r4
 801ba02:	b2b6      	uxth	r6, r6
 801ba04:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801ba08:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801ba0c:	250b      	movs	r5, #11
 801ba0e:	9507      	str	r5, [sp, #28]
 801ba10:	f8ba 5000 	ldrh.w	r5, [sl]
 801ba14:	f8cd 9010 	str.w	r9, [sp, #16]
 801ba18:	9602      	str	r6, [sp, #8]
 801ba1a:	9401      	str	r4, [sp, #4]
 801ba1c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801ba20:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801ba24:	9203      	str	r2, [sp, #12]
 801ba26:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801ba2a:	9200      	str	r2, [sp, #0]
 801ba2c:	4642      	mov	r2, r8
 801ba2e:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 801ba30:	4639      	mov	r1, r7
 801ba32:	47a0      	blx	r4
 801ba34:	b011      	add	sp, #68	@ 0x44
 801ba36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba3a:	6803      	ldr	r3, [r0, #0]
 801ba3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba3e:	4798      	blx	r3
 801ba40:	f8ba 5000 	ldrh.w	r5, [sl]
 801ba44:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ba48:	f04f 0e04 	mov.w	lr, #4
 801ba4c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ba50:	436e      	muls	r6, r5
 801ba52:	fb05 2303 	mla	r3, r5, r3, r2
 801ba56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ba5a:	1b2d      	subs	r5, r5, r4
 801ba5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba64:	4418      	add	r0, r3
 801ba66:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ba6a:	1982      	adds	r2, r0, r6
 801ba6c:	1b1b      	subs	r3, r3, r4
 801ba6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ba72:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ba74:	4290      	cmp	r0, r2
 801ba76:	d254      	bcs.n	801bb22 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ba78:	eb00 0a04 	add.w	sl, r0, r4
 801ba7c:	4550      	cmp	r0, sl
 801ba7e:	d24c      	bcs.n	801bb1a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801ba80:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ba84:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ba88:	eb08 0c01 	add.w	ip, r8, r1
 801ba8c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ba90:	b173      	cbz	r3, 801bab0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ba92:	2bff      	cmp	r3, #255	@ 0xff
 801ba94:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ba98:	d10c      	bne.n	801bab4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ba9a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ba9e:	d109      	bne.n	801bab4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801baa0:	f880 b000 	strb.w	fp, [r0]
 801baa4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801baa8:	7043      	strb	r3, [r0, #1]
 801baaa:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801baae:	7083      	strb	r3, [r0, #2]
 801bab0:	3003      	adds	r0, #3
 801bab2:	e7e3      	b.n	801ba7c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801bab4:	fb09 f103 	mul.w	r1, r9, r3
 801bab8:	1c4b      	adds	r3, r1, #1
 801baba:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801babe:	7801      	ldrb	r1, [r0, #0]
 801bac0:	121b      	asrs	r3, r3, #8
 801bac2:	b29e      	uxth	r6, r3
 801bac4:	43db      	mvns	r3, r3
 801bac6:	fb1b fb06 	smulbb	fp, fp, r6
 801baca:	b2db      	uxtb	r3, r3
 801bacc:	fb01 b103 	mla	r1, r1, r3, fp
 801bad0:	b289      	uxth	r1, r1
 801bad2:	f101 0b01 	add.w	fp, r1, #1
 801bad6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801bada:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bade:	fb1b fb03 	smulbb	fp, fp, r3
 801bae2:	1209      	asrs	r1, r1, #8
 801bae4:	7001      	strb	r1, [r0, #0]
 801bae6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801baea:	fb01 b106 	mla	r1, r1, r6, fp
 801baee:	b289      	uxth	r1, r1
 801baf0:	f101 0b01 	add.w	fp, r1, #1
 801baf4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801baf8:	1209      	asrs	r1, r1, #8
 801bafa:	7041      	strb	r1, [r0, #1]
 801bafc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801bb00:	f890 c002 	ldrb.w	ip, [r0, #2]
 801bb04:	fb1c f303 	smulbb	r3, ip, r3
 801bb08:	fb01 3606 	mla	r6, r1, r6, r3
 801bb0c:	b2b6      	uxth	r6, r6
 801bb0e:	1c73      	adds	r3, r6, #1
 801bb10:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801bb14:	1236      	asrs	r6, r6, #8
 801bb16:	7086      	strb	r6, [r0, #2]
 801bb18:	e7ca      	b.n	801bab0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801bb1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bb1c:	4428      	add	r0, r5
 801bb1e:	441f      	add	r7, r3
 801bb20:	e7a8      	b.n	801ba74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801bb22:	4b03      	ldr	r3, [pc, #12]	@ (801bb30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801bb24:	6818      	ldr	r0, [r3, #0]
 801bb26:	6803      	ldr	r3, [r0, #0]
 801bb28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb2a:	4798      	blx	r3
 801bb2c:	e782      	b.n	801ba34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801bb2e:	bf00      	nop
 801bb30:	240251f0 	.word	0x240251f0
 801bb34:	240251ea 	.word	0x240251ea

0801bb38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb3c:	b091      	sub	sp, #68	@ 0x44
 801bb3e:	4680      	mov	r8, r0
 801bb40:	460e      	mov	r6, r1
 801bb42:	6810      	ldr	r0, [r2, #0]
 801bb44:	6851      	ldr	r1, [r2, #4]
 801bb46:	ad0c      	add	r5, sp, #48	@ 0x30
 801bb48:	4614      	mov	r4, r2
 801bb4a:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801bb4e:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801bce8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801bb52:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801bcec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801bb56:	c503      	stmia	r5!, {r0, r1}
 801bb58:	6818      	ldr	r0, [r3, #0]
 801bb5a:	ad0e      	add	r5, sp, #56	@ 0x38
 801bb5c:	6859      	ldr	r1, [r3, #4]
 801bb5e:	c503      	stmia	r5!, {r0, r1}
 801bb60:	a80c      	add	r0, sp, #48	@ 0x30
 801bb62:	f7f8 f8e9 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb66:	4621      	mov	r1, r4
 801bb68:	a80e      	add	r0, sp, #56	@ 0x38
 801bb6a:	f7f8 f90d 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bb6e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801bb72:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801bb76:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801bb7a:	f8d9 0000 	ldr.w	r0, [r9]
 801bb7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bb82:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801bb86:	eb08 0401 	add.w	r4, r8, r1
 801bb8a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801bb8e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801bb92:	440a      	add	r2, r1
 801bb94:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801bb98:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801bb9c:	4413      	add	r3, r2
 801bb9e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801bba2:	6803      	ldr	r3, [r0, #0]
 801bba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bba6:	4798      	blx	r3
 801bba8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801bbac:	f8d9 0000 	ldr.w	r0, [r9]
 801bbb0:	d022      	beq.n	801bbf8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801bbb2:	2200      	movs	r2, #0
 801bbb4:	f04f 0c01 	mov.w	ip, #1
 801bbb8:	6801      	ldr	r1, [r0, #0]
 801bbba:	b2ad      	uxth	r5, r5
 801bbbc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801bbc0:	e9cd c208 	strd	ip, r2, [sp, #32]
 801bbc4:	f04f 0c0b 	mov.w	ip, #11
 801bbc8:	f8cd c01c 	str.w	ip, [sp, #28]
 801bbcc:	f8ba c000 	ldrh.w	ip, [sl]
 801bbd0:	9704      	str	r7, [sp, #16]
 801bbd2:	9502      	str	r5, [sp, #8]
 801bbd4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801bbd8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801bbdc:	9203      	str	r2, [sp, #12]
 801bbde:	fa1f f288 	uxth.w	r2, r8
 801bbe2:	9201      	str	r2, [sp, #4]
 801bbe4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801bbe8:	9200      	str	r2, [sp, #0]
 801bbea:	4632      	mov	r2, r6
 801bbec:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 801bbee:	4621      	mov	r1, r4
 801bbf0:	47a8      	blx	r5
 801bbf2:	b011      	add	sp, #68	@ 0x44
 801bbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbf8:	6803      	ldr	r3, [r0, #0]
 801bbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbfc:	4798      	blx	r3
 801bbfe:	f8ba 2000 	ldrh.w	r2, [sl]
 801bc02:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801bc06:	f04f 0e03 	mov.w	lr, #3
 801bc0a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801bc0e:	4355      	muls	r5, r2
 801bc10:	fa1f fc87 	uxth.w	ip, r7
 801bc14:	fb02 1303 	mla	r3, r2, r3, r1
 801bc18:	eba2 0208 	sub.w	r2, r2, r8
 801bc1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bc28:	4418      	add	r0, r3
 801bc2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bc2c:	1943      	adds	r3, r0, r5
 801bc2e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801bc32:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801bc36:	eba2 0208 	sub.w	r2, r2, r8
 801bc3a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bc3e:	b2ad      	uxth	r5, r5
 801bc40:	4298      	cmp	r0, r3
 801bc42:	d24a      	bcs.n	801bcda <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801bc44:	eb00 0908 	add.w	r9, r0, r8
 801bc48:	4621      	mov	r1, r4
 801bc4a:	4548      	cmp	r0, r9
 801bc4c:	460c      	mov	r4, r1
 801bc4e:	d240      	bcs.n	801bcd2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801bc50:	f04f 0a04 	mov.w	sl, #4
 801bc54:	7824      	ldrb	r4, [r4, #0]
 801bc56:	2fff      	cmp	r7, #255	@ 0xff
 801bc58:	f101 0101 	add.w	r1, r1, #1
 801bc5c:	fb1e a404 	smlabb	r4, lr, r4, sl
 801bc60:	eb06 0a04 	add.w	sl, r6, r4
 801bc64:	f816 b004 	ldrb.w	fp, [r6, r4]
 801bc68:	d02b      	beq.n	801bcc2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801bc6a:	7804      	ldrb	r4, [r0, #0]
 801bc6c:	fb14 f405 	smulbb	r4, r4, r5
 801bc70:	fb0b 440c 	mla	r4, fp, ip, r4
 801bc74:	b2a4      	uxth	r4, r4
 801bc76:	f104 0b01 	add.w	fp, r4, #1
 801bc7a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801bc7e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bc82:	fb1b fb05 	smulbb	fp, fp, r5
 801bc86:	1224      	asrs	r4, r4, #8
 801bc88:	7004      	strb	r4, [r0, #0]
 801bc8a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801bc8e:	fb04 b40c 	mla	r4, r4, ip, fp
 801bc92:	b2a4      	uxth	r4, r4
 801bc94:	f104 0b01 	add.w	fp, r4, #1
 801bc98:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801bc9c:	1224      	asrs	r4, r4, #8
 801bc9e:	7044      	strb	r4, [r0, #1]
 801bca0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801bca4:	f890 a002 	ldrb.w	sl, [r0, #2]
 801bca8:	fb1a fa05 	smulbb	sl, sl, r5
 801bcac:	fb04 a40c 	mla	r4, r4, ip, sl
 801bcb0:	b2a4      	uxth	r4, r4
 801bcb2:	f104 0a01 	add.w	sl, r4, #1
 801bcb6:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801bcba:	1224      	asrs	r4, r4, #8
 801bcbc:	7084      	strb	r4, [r0, #2]
 801bcbe:	3003      	adds	r0, #3
 801bcc0:	e7c3      	b.n	801bc4a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801bcc2:	f880 b000 	strb.w	fp, [r0]
 801bcc6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801bcca:	7044      	strb	r4, [r0, #1]
 801bccc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801bcd0:	e7f4      	b.n	801bcbc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801bcd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bcd4:	4420      	add	r0, r4
 801bcd6:	188c      	adds	r4, r1, r2
 801bcd8:	e7b2      	b.n	801bc40 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801bcda:	4b03      	ldr	r3, [pc, #12]	@ (801bce8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801bcdc:	6818      	ldr	r0, [r3, #0]
 801bcde:	6803      	ldr	r3, [r0, #0]
 801bce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bce2:	4798      	blx	r3
 801bce4:	e785      	b.n	801bbf2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801bce6:	bf00      	nop
 801bce8:	240251f0 	.word	0x240251f0
 801bcec:	240251ea 	.word	0x240251ea

0801bcf0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801bcf0:	b4f0      	push	{r4, r5, r6, r7}
 801bcf2:	460c      	mov	r4, r1
 801bcf4:	4611      	mov	r1, r2
 801bcf6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801bcfa:	461a      	mov	r2, r3
 801bcfc:	780f      	ldrb	r7, [r1, #0]
 801bcfe:	9b04      	ldr	r3, [sp, #16]
 801bd00:	784e      	ldrb	r6, [r1, #1]
 801bd02:	b11f      	cbz	r7, 801bd0c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801bd04:	2f01      	cmp	r7, #1
 801bd06:	d01d      	beq.n	801bd44 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801bd08:	bcf0      	pop	{r4, r5, r6, r7}
 801bd0a:	4770      	bx	lr
 801bd0c:	2e03      	cmp	r6, #3
 801bd0e:	d8fb      	bhi.n	801bd08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bd10:	e8df f006 	tbb	[pc, r6]
 801bd14:	16140702 	.word	0x16140702
 801bd18:	9504      	str	r5, [sp, #16]
 801bd1a:	4620      	mov	r0, r4
 801bd1c:	bcf0      	pop	{r4, r5, r6, r7}
 801bd1e:	f7ff be33 	b.w	801b988 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801bd22:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801bd24:	2800      	cmp	r0, #0
 801bd26:	d0ef      	beq.n	801bd08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bd28:	6806      	ldr	r6, [r0, #0]
 801bd2a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801bd2e:	68f5      	ldr	r5, [r6, #12]
 801bd30:	4613      	mov	r3, r2
 801bd32:	46ac      	mov	ip, r5
 801bd34:	460a      	mov	r2, r1
 801bd36:	4621      	mov	r1, r4
 801bd38:	bcf0      	pop	{r4, r5, r6, r7}
 801bd3a:	4760      	bx	ip
 801bd3c:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801bd3e:	e7f1      	b.n	801bd24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801bd40:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801bd42:	e7ef      	b.n	801bd24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801bd44:	2e03      	cmp	r6, #3
 801bd46:	d8df      	bhi.n	801bd08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bd48:	e8df f006 	tbb	[pc, r6]
 801bd4c:	110f0702 	.word	0x110f0702
 801bd50:	9504      	str	r5, [sp, #16]
 801bd52:	4620      	mov	r0, r4
 801bd54:	bcf0      	pop	{r4, r5, r6, r7}
 801bd56:	f7ff beef 	b.w	801bb38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801bd5a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801bd5c:	2800      	cmp	r0, #0
 801bd5e:	d0d3      	beq.n	801bd08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bd60:	6806      	ldr	r6, [r0, #0]
 801bd62:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801bd66:	68b5      	ldr	r5, [r6, #8]
 801bd68:	e7e2      	b.n	801bd30 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801bd6a:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801bd6c:	e7f6      	b.n	801bd5c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801bd6e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801bd70:	e7f4      	b.n	801bd5c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801bd74 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801bd74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd78:	4605      	mov	r5, r0
 801bd7a:	b08f      	sub	sp, #60	@ 0x3c
 801bd7c:	460c      	mov	r4, r1
 801bd7e:	461f      	mov	r7, r3
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d052      	beq.n	801be2a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801bd84:	6808      	ldr	r0, [r1, #0]
 801bd86:	ab0a      	add	r3, sp, #40	@ 0x28
 801bd88:	6849      	ldr	r1, [r1, #4]
 801bd8a:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801bf54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801bd8e:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801bf58 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801bd92:	c303      	stmia	r3!, {r0, r1}
 801bd94:	6810      	ldr	r0, [r2, #0]
 801bd96:	ab0c      	add	r3, sp, #48	@ 0x30
 801bd98:	6851      	ldr	r1, [r2, #4]
 801bd9a:	c303      	stmia	r3!, {r0, r1}
 801bd9c:	a80a      	add	r0, sp, #40	@ 0x28
 801bd9e:	f7f7 ffcb 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bda2:	4621      	mov	r1, r4
 801bda4:	a80c      	add	r0, sp, #48	@ 0x30
 801bda6:	f7f7 ffef 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bdaa:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801bdae:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801bdb2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801bdb6:	f8d8 0000 	ldr.w	r0, [r8]
 801bdba:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bdbe:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801bdc2:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801bdc6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801bdca:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801bdce:	440a      	add	r2, r1
 801bdd0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801bdd4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801bdd8:	4413      	add	r3, r2
 801bdda:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801bdde:	6803      	ldr	r3, [r0, #0]
 801bde0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bde2:	4798      	blx	r3
 801bde4:	2fff      	cmp	r7, #255	@ 0xff
 801bde6:	d023      	beq.n	801be30 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801bde8:	f010 0f04 	tst.w	r0, #4
 801bdec:	f8d8 0000 	ldr.w	r0, [r8]
 801bdf0:	d021      	beq.n	801be36 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801bdf2:	2100      	movs	r1, #0
 801bdf4:	f04f 0e01 	mov.w	lr, #1
 801bdf8:	f8d0 c000 	ldr.w	ip, [r0]
 801bdfc:	b2a4      	uxth	r4, r4
 801bdfe:	9106      	str	r1, [sp, #24]
 801be00:	b2b6      	uxth	r6, r6
 801be02:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801be06:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801be0a:	e9cd e107 	strd	lr, r1, [sp, #28]
 801be0e:	f8b9 e000 	ldrh.w	lr, [r9]
 801be12:	9703      	str	r7, [sp, #12]
 801be14:	9401      	str	r4, [sp, #4]
 801be16:	9600      	str	r6, [sp, #0]
 801be18:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801be1c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801be20:	9102      	str	r1, [sp, #8]
 801be22:	4629      	mov	r1, r5
 801be24:	f8dc 4044 	ldr.w	r4, [ip, #68]	@ 0x44
 801be28:	47a0      	blx	r4
 801be2a:	b00f      	add	sp, #60	@ 0x3c
 801be2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be30:	f010 0f01 	tst.w	r0, #1
 801be34:	e7da      	b.n	801bdec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801be36:	6803      	ldr	r3, [r0, #0]
 801be38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be3a:	4798      	blx	r3
 801be3c:	f8b9 1000 	ldrh.w	r1, [r9]
 801be40:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801be44:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801be48:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801be4c:	434c      	muls	r4, r1
 801be4e:	2fff      	cmp	r7, #255	@ 0xff
 801be50:	fb01 2303 	mla	r3, r1, r3, r2
 801be54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801be58:	eba1 0106 	sub.w	r1, r1, r6
 801be5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801be64:	4418      	add	r0, r3
 801be66:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801be6a:	eba3 0606 	sub.w	r6, r3, r6
 801be6e:	4404      	add	r4, r0
 801be70:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801be74:	d04a      	beq.n	801bf0c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801be76:	43fa      	mvns	r2, r7
 801be78:	b2bb      	uxth	r3, r7
 801be7a:	b2d7      	uxtb	r7, r2
 801be7c:	42a0      	cmp	r0, r4
 801be7e:	d263      	bcs.n	801bf48 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801be80:	eb00 0e0c 	add.w	lr, r0, ip
 801be84:	4586      	cmp	lr, r0
 801be86:	f100 0803 	add.w	r8, r0, #3
 801be8a:	d93a      	bls.n	801bf02 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801be8c:	f835 2b02 	ldrh.w	r2, [r5], #2
 801be90:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801be94:	00d0      	lsls	r0, r2, #3
 801be96:	fb19 f907 	smulbb	r9, r9, r7
 801be9a:	b2c0      	uxtb	r0, r0
 801be9c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801bea0:	fb00 9003 	mla	r0, r0, r3, r9
 801bea4:	b280      	uxth	r0, r0
 801bea6:	f100 0901 	add.w	r9, r0, #1
 801beaa:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801beae:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801beb2:	fb19 f907 	smulbb	r9, r9, r7
 801beb6:	1200      	asrs	r0, r0, #8
 801beb8:	f808 0c03 	strb.w	r0, [r8, #-3]
 801bebc:	10d0      	asrs	r0, r2, #3
 801bebe:	1212      	asrs	r2, r2, #8
 801bec0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801bec4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801bec8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801becc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bed0:	fb00 9003 	mla	r0, r0, r3, r9
 801bed4:	b280      	uxth	r0, r0
 801bed6:	f100 0901 	add.w	r9, r0, #1
 801beda:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801bede:	1200      	asrs	r0, r0, #8
 801bee0:	f808 0c02 	strb.w	r0, [r8, #-2]
 801bee4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801bee8:	fb10 f007 	smulbb	r0, r0, r7
 801beec:	fb02 0203 	mla	r2, r2, r3, r0
 801bef0:	b292      	uxth	r2, r2
 801bef2:	1c50      	adds	r0, r2, #1
 801bef4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bef8:	4640      	mov	r0, r8
 801befa:	1212      	asrs	r2, r2, #8
 801befc:	f808 2c01 	strb.w	r2, [r8, #-1]
 801bf00:	e7c0      	b.n	801be84 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801bf02:	4408      	add	r0, r1
 801bf04:	4435      	add	r5, r6
 801bf06:	e7b9      	b.n	801be7c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801bf08:	4408      	add	r0, r1
 801bf0a:	4435      	add	r5, r6
 801bf0c:	42a0      	cmp	r0, r4
 801bf0e:	d21b      	bcs.n	801bf48 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801bf10:	eb00 070c 	add.w	r7, r0, ip
 801bf14:	42b8      	cmp	r0, r7
 801bf16:	d2f7      	bcs.n	801bf08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801bf18:	f835 3b02 	ldrh.w	r3, [r5], #2
 801bf1c:	3003      	adds	r0, #3
 801bf1e:	00da      	lsls	r2, r3, #3
 801bf20:	b2d2      	uxtb	r2, r2
 801bf22:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bf26:	f800 2c03 	strb.w	r2, [r0, #-3]
 801bf2a:	10da      	asrs	r2, r3, #3
 801bf2c:	121b      	asrs	r3, r3, #8
 801bf2e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801bf32:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801bf36:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801bf3a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801bf3e:	f800 2c02 	strb.w	r2, [r0, #-2]
 801bf42:	f800 3c01 	strb.w	r3, [r0, #-1]
 801bf46:	e7e5      	b.n	801bf14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801bf48:	4b02      	ldr	r3, [pc, #8]	@ (801bf54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801bf4a:	6818      	ldr	r0, [r3, #0]
 801bf4c:	6803      	ldr	r3, [r0, #0]
 801bf4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bf50:	4798      	blx	r3
 801bf52:	e76a      	b.n	801be2a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801bf54:	240251f0 	.word	0x240251f0
 801bf58:	240251ea 	.word	0x240251ea

0801bf5c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801bf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf60:	b08a      	sub	sp, #40	@ 0x28
 801bf62:	460d      	mov	r5, r1
 801bf64:	4604      	mov	r4, r0
 801bf66:	461e      	mov	r6, r3
 801bf68:	6808      	ldr	r0, [r1, #0]
 801bf6a:	ab06      	add	r3, sp, #24
 801bf6c:	6849      	ldr	r1, [r1, #4]
 801bf6e:	4f5d      	ldr	r7, [pc, #372]	@ (801c0e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801bf70:	c303      	stmia	r3!, {r0, r1}
 801bf72:	6810      	ldr	r0, [r2, #0]
 801bf74:	ab08      	add	r3, sp, #32
 801bf76:	6851      	ldr	r1, [r2, #4]
 801bf78:	c303      	stmia	r3!, {r0, r1}
 801bf7a:	a806      	add	r0, sp, #24
 801bf7c:	f7f7 fedc 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bf80:	4629      	mov	r1, r5
 801bf82:	a808      	add	r0, sp, #32
 801bf84:	f7f7 ff00 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bf88:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bf8c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801bf90:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bf94:	6838      	ldr	r0, [r7, #0]
 801bf96:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bf9a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801bf9e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801bfa2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801bfa6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801bfaa:	440a      	add	r2, r1
 801bfac:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bfb0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bfb4:	4413      	add	r3, r2
 801bfb6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bfba:	6803      	ldr	r3, [r0, #0]
 801bfbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bfbe:	4798      	blx	r3
 801bfc0:	2eff      	cmp	r6, #255	@ 0xff
 801bfc2:	d119      	bne.n	801bff8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801bfc4:	f010 0f20 	tst.w	r0, #32
 801bfc8:	6838      	ldr	r0, [r7, #0]
 801bfca:	d018      	beq.n	801bffe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801bfcc:	b2ad      	uxth	r5, r5
 801bfce:	2700      	movs	r7, #0
 801bfd0:	6801      	ldr	r1, [r0, #0]
 801bfd2:	9501      	str	r5, [sp, #4]
 801bfd4:	fa1f f588 	uxth.w	r5, r8
 801bfd8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801bfdc:	9500      	str	r5, [sp, #0]
 801bfde:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bfe2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801bfe6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801bfea:	9602      	str	r6, [sp, #8]
 801bfec:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801bfee:	4621      	mov	r1, r4
 801bff0:	47a8      	blx	r5
 801bff2:	b00a      	add	sp, #40	@ 0x28
 801bff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bff8:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801bffc:	e7e4      	b.n	801bfc8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801bffe:	6803      	ldr	r3, [r0, #0]
 801c000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c002:	4798      	blx	r3
 801c004:	4b38      	ldr	r3, [pc, #224]	@ (801c0e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801c006:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c00a:	f8b3 c000 	ldrh.w	ip, [r3]
 801c00e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c012:	fb0c f505 	mul.w	r5, ip, r5
 801c016:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801c01a:	fb0c 2303 	mla	r3, ip, r3, r2
 801c01e:	ebac 0c08 	sub.w	ip, ip, r8
 801c022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c026:	ebae 0e08 	sub.w	lr, lr, r8
 801c02a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c02e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c032:	4418      	add	r0, r3
 801c034:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801c038:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801c03c:	4405      	add	r5, r0
 801c03e:	42a8      	cmp	r0, r5
 801c040:	d24a      	bcs.n	801c0d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801c042:	eb00 0803 	add.w	r8, r0, r3
 801c046:	4540      	cmp	r0, r8
 801c048:	d243      	bcs.n	801c0d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801c04a:	78e2      	ldrb	r2, [r4, #3]
 801c04c:	b15a      	cbz	r2, 801c066 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c04e:	2aff      	cmp	r2, #255	@ 0xff
 801c050:	f894 9000 	ldrb.w	r9, [r4]
 801c054:	d10a      	bne.n	801c06c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c056:	2eff      	cmp	r6, #255	@ 0xff
 801c058:	d108      	bne.n	801c06c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c05a:	f880 9000 	strb.w	r9, [r0]
 801c05e:	7862      	ldrb	r2, [r4, #1]
 801c060:	7042      	strb	r2, [r0, #1]
 801c062:	78a2      	ldrb	r2, [r4, #2]
 801c064:	7082      	strb	r2, [r0, #2]
 801c066:	3003      	adds	r0, #3
 801c068:	3404      	adds	r4, #4
 801c06a:	e7ec      	b.n	801c046 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801c06c:	4372      	muls	r2, r6
 801c06e:	1c51      	adds	r1, r2, #1
 801c070:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801c074:	1209      	asrs	r1, r1, #8
 801c076:	fa1f fa81 	uxth.w	sl, r1
 801c07a:	43c9      	mvns	r1, r1
 801c07c:	fb19 f90a 	smulbb	r9, r9, sl
 801c080:	b2ca      	uxtb	r2, r1
 801c082:	7801      	ldrb	r1, [r0, #0]
 801c084:	fb01 9902 	mla	r9, r1, r2, r9
 801c088:	fa1f f989 	uxth.w	r9, r9
 801c08c:	f109 0101 	add.w	r1, r9, #1
 801c090:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801c094:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c098:	f880 9000 	strb.w	r9, [r0]
 801c09c:	f890 9001 	ldrb.w	r9, [r0, #1]
 801c0a0:	7861      	ldrb	r1, [r4, #1]
 801c0a2:	fb19 f902 	smulbb	r9, r9, r2
 801c0a6:	fb01 910a 	mla	r1, r1, sl, r9
 801c0aa:	b289      	uxth	r1, r1
 801c0ac:	f101 0901 	add.w	r9, r1, #1
 801c0b0:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801c0b4:	1209      	asrs	r1, r1, #8
 801c0b6:	7041      	strb	r1, [r0, #1]
 801c0b8:	7881      	ldrb	r1, [r0, #2]
 801c0ba:	f894 9002 	ldrb.w	r9, [r4, #2]
 801c0be:	fb11 f202 	smulbb	r2, r1, r2
 801c0c2:	fb09 220a 	mla	r2, r9, sl, r2
 801c0c6:	b292      	uxth	r2, r2
 801c0c8:	1c51      	adds	r1, r2, #1
 801c0ca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c0ce:	1212      	asrs	r2, r2, #8
 801c0d0:	e7c8      	b.n	801c064 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801c0d2:	4460      	add	r0, ip
 801c0d4:	4474      	add	r4, lr
 801c0d6:	e7b2      	b.n	801c03e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801c0d8:	6838      	ldr	r0, [r7, #0]
 801c0da:	6803      	ldr	r3, [r0, #0]
 801c0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c0de:	4798      	blx	r3
 801c0e0:	e787      	b.n	801bff2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801c0e2:	bf00      	nop
 801c0e4:	240251f0 	.word	0x240251f0
 801c0e8:	240251ea 	.word	0x240251ea

0801c0ec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c0f0:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801c0f4:	4607      	mov	r7, r0
 801c0f6:	460c      	mov	r4, r1
 801c0f8:	4692      	mov	sl, r2
 801c0fa:	4699      	mov	r9, r3
 801c0fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c0fe:	b335      	cbz	r5, 801c14e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c100:	4608      	mov	r0, r1
 801c102:	f7fb fdcb 	bl	8017c9c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c106:	4680      	mov	r8, r0
 801c108:	4620      	mov	r0, r4
 801c10a:	f7fb fdfb 	bl	8017d04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c10e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c112:	4620      	mov	r0, r4
 801c114:	f8ad a008 	strh.w	sl, [sp, #8]
 801c118:	f8ad 900a 	strh.w	r9, [sp, #10]
 801c11c:	f8ad 800c 	strh.w	r8, [sp, #12]
 801c120:	f7fb fefa 	bl	8017f18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c124:	2810      	cmp	r0, #16
 801c126:	d812      	bhi.n	801c14e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c128:	e8df f000 	tbb	[pc, r0]
 801c12c:	11092d24 	.word	0x11092d24
 801c130:	11111111 	.word	0x11111111
 801c134:	14111111 	.word	0x14111111
 801c138:	4c111111 	.word	0x4c111111
 801c13c:	3c          	.byte	0x3c
 801c13d:	00          	.byte	0x00
 801c13e:	4620      	mov	r0, r4
 801c140:	f7fb fe66 	bl	8017e10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c144:	462b      	mov	r3, r5
 801c146:	4632      	mov	r2, r6
 801c148:	a902      	add	r1, sp, #8
 801c14a:	f7ff ff07 	bl	801bf5c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c14e:	b004      	add	sp, #16
 801c150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c154:	4620      	mov	r0, r4
 801c156:	f7fb fe5b 	bl	8017e10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c15a:	4680      	mov	r8, r0
 801c15c:	4620      	mov	r0, r4
 801c15e:	f7fb fe87 	bl	8017e70 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c162:	ab02      	add	r3, sp, #8
 801c164:	4602      	mov	r2, r0
 801c166:	4641      	mov	r1, r8
 801c168:	4638      	mov	r0, r7
 801c16a:	e9cd 6500 	strd	r6, r5, [sp]
 801c16e:	f7ff fdbf 	bl	801bcf0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c172:	e7ec      	b.n	801c14e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c174:	4620      	mov	r0, r4
 801c176:	f7fb fe4b 	bl	8017e10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c17a:	462b      	mov	r3, r5
 801c17c:	4632      	mov	r2, r6
 801c17e:	a902      	add	r1, sp, #8
 801c180:	f7ff fdf8 	bl	801bd74 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c184:	e7e3      	b.n	801c14e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c186:	683b      	ldr	r3, [r7, #0]
 801c188:	4620      	mov	r0, r4
 801c18a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c18e:	f7fb fe3f 	bl	8017e10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c192:	2300      	movs	r3, #0
 801c194:	4601      	mov	r1, r0
 801c196:	aa02      	add	r2, sp, #8
 801c198:	4638      	mov	r0, r7
 801c19a:	e9cd 5300 	strd	r5, r3, [sp]
 801c19e:	4633      	mov	r3, r6
 801c1a0:	47c0      	blx	r8
 801c1a2:	e7d4      	b.n	801c14e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c1a4:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c1a6:	2f00      	cmp	r7, #0
 801c1a8:	d0d1      	beq.n	801c14e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c1aa:	683b      	ldr	r3, [r7, #0]
 801c1ac:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	f7fb fe2d 	bl	8017e10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c1b6:	9500      	str	r5, [sp, #0]
 801c1b8:	4601      	mov	r1, r0
 801c1ba:	4633      	mov	r3, r6
 801c1bc:	aa02      	add	r2, sp, #8
 801c1be:	4638      	mov	r0, r7
 801c1c0:	47c0      	blx	r8
 801c1c2:	e7c4      	b.n	801c14e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c1c4:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c1c6:	2f00      	cmp	r7, #0
 801c1c8:	d0c1      	beq.n	801c14e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c1d0:	e7ee      	b.n	801c1b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801c1d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c1d2:	b4f0      	push	{r4, r5, r6, r7}
 801c1d4:	4616      	mov	r6, r2
 801c1d6:	461c      	mov	r4, r3
 801c1d8:	460d      	mov	r5, r1
 801c1da:	9a04      	ldr	r2, [sp, #16]
 801c1dc:	2e01      	cmp	r6, #1
 801c1de:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c1e2:	d00e      	beq.n	801c202 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801c1e4:	d303      	bcc.n	801c1ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801c1e6:	2e02      	cmp	r6, #2
 801c1e8:	d006      	beq.n	801c1f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801c1ea:	bcf0      	pop	{r4, r5, r6, r7}
 801c1ec:	4770      	bx	lr
 801c1ee:	4621      	mov	r1, r4
 801c1f0:	4628      	mov	r0, r5
 801c1f2:	bcf0      	pop	{r4, r5, r6, r7}
 801c1f4:	f7ff bdbe 	b.w	801bd74 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c1f8:	4621      	mov	r1, r4
 801c1fa:	4628      	mov	r0, r5
 801c1fc:	bcf0      	pop	{r4, r5, r6, r7}
 801c1fe:	f7ff bead 	b.w	801bf5c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c202:	6805      	ldr	r5, [r0, #0]
 801c204:	2600      	movs	r6, #0
 801c206:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c20a:	68ed      	ldr	r5, [r5, #12]
 801c20c:	4613      	mov	r3, r2
 801c20e:	4622      	mov	r2, r4
 801c210:	46ac      	mov	ip, r5
 801c212:	bcf0      	pop	{r4, r5, r6, r7}
 801c214:	4760      	bx	ip
	...

0801c218 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801c218:	b160      	cbz	r0, 801c234 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801c21a:	2903      	cmp	r1, #3
 801c21c:	d818      	bhi.n	801c250 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c21e:	e8df f001 	tbb	[pc, r1]
 801c222:	1902      	.short	0x1902
 801c224:	1b06      	.short	0x1b06
 801c226:	4b0e      	ldr	r3, [pc, #56]	@ (801c260 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c228:	8818      	ldrh	r0, [r3, #0]
 801c22a:	4240      	negs	r0, r0
 801c22c:	4770      	bx	lr
 801c22e:	4b0c      	ldr	r3, [pc, #48]	@ (801c260 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c230:	8818      	ldrh	r0, [r3, #0]
 801c232:	4770      	bx	lr
 801c234:	2903      	cmp	r1, #3
 801c236:	d80b      	bhi.n	801c250 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c238:	a301      	add	r3, pc, #4	@ (adr r3, 801c240 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801c23a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c23e:	bf00      	nop
 801c240:	0801c255 	.word	0x0801c255
 801c244:	0801c22f 	.word	0x0801c22f
 801c248:	0801c259 	.word	0x0801c259
 801c24c:	0801c227 	.word	0x0801c227
 801c250:	2000      	movs	r0, #0
 801c252:	4770      	bx	lr
 801c254:	2001      	movs	r0, #1
 801c256:	4770      	bx	lr
 801c258:	f04f 30ff 	mov.w	r0, #4294967295
 801c25c:	4770      	bx	lr
 801c25e:	bf00      	nop
 801c260:	240251ea 	.word	0x240251ea

0801c264 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801c264:	b160      	cbz	r0, 801c280 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801c266:	2903      	cmp	r1, #3
 801c268:	d818      	bhi.n	801c29c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c26a:	e8df f001 	tbb	[pc, r1]
 801c26e:	0219      	.short	0x0219
 801c270:	051b      	.short	0x051b
 801c272:	4b0e      	ldr	r3, [pc, #56]	@ (801c2ac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c274:	8818      	ldrh	r0, [r3, #0]
 801c276:	4770      	bx	lr
 801c278:	4b0c      	ldr	r3, [pc, #48]	@ (801c2ac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c27a:	8818      	ldrh	r0, [r3, #0]
 801c27c:	4240      	negs	r0, r0
 801c27e:	4770      	bx	lr
 801c280:	2903      	cmp	r1, #3
 801c282:	d80b      	bhi.n	801c29c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c284:	a301      	add	r3, pc, #4	@ (adr r3, 801c28c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801c286:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c28a:	bf00      	nop
 801c28c:	0801c273 	.word	0x0801c273
 801c290:	0801c2a5 	.word	0x0801c2a5
 801c294:	0801c279 	.word	0x0801c279
 801c298:	0801c2a1 	.word	0x0801c2a1
 801c29c:	2000      	movs	r0, #0
 801c29e:	4770      	bx	lr
 801c2a0:	2001      	movs	r0, #1
 801c2a2:	4770      	bx	lr
 801c2a4:	f04f 30ff 	mov.w	r0, #4294967295
 801c2a8:	4770      	bx	lr
 801c2aa:	bf00      	nop
 801c2ac:	240251ea 	.word	0x240251ea

0801c2b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2b4:	b097      	sub	sp, #92	@ 0x5c
 801c2b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c2b8:	a912      	add	r1, sp, #72	@ 0x48
 801c2ba:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801c2be:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801c2c2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801c2c6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801c2ca:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801c2ce:	e881 000c 	stmia.w	r1, {r2, r3}
 801c2d2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801c2d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2d8:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801c2dc:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801c2e0:	9311      	str	r3, [sp, #68]	@ 0x44
 801c2e2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801c2e6:	798d      	ldrb	r5, [r1, #6]
 801c2e8:	930c      	str	r3, [sp, #48]	@ 0x30
 801c2ea:	7b4b      	ldrb	r3, [r1, #13]
 801c2ec:	0158      	lsls	r0, r3, #5
 801c2ee:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801c2f2:	4328      	orrs	r0, r5
 801c2f4:	9009      	str	r0, [sp, #36]	@ 0x24
 801c2f6:	f000 817c 	beq.w	801c5f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c2fa:	011b      	lsls	r3, r3, #4
 801c2fc:	79c8      	ldrb	r0, [r1, #7]
 801c2fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c302:	4303      	orrs	r3, r0
 801c304:	930e      	str	r3, [sp, #56]	@ 0x38
 801c306:	f000 8174 	beq.w	801c5f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c30a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c30e:	b29b      	uxth	r3, r3
 801c310:	2f00      	cmp	r7, #0
 801c312:	f000 8116 	beq.w	801c542 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801c316:	1aff      	subs	r7, r7, r3
 801c318:	b2bf      	uxth	r7, r7
 801c31a:	043b      	lsls	r3, r7, #16
 801c31c:	d502      	bpl.n	801c324 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c31e:	1bf6      	subs	r6, r6, r7
 801c320:	2700      	movs	r7, #0
 801c322:	b236      	sxth	r6, r6
 801c324:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c328:	a812      	add	r0, sp, #72	@ 0x48
 801c32a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801c32e:	428e      	cmp	r6, r1
 801c330:	b28b      	uxth	r3, r1
 801c332:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801c336:	bfbf      	itttt	lt
 801c338:	18ff      	addlt	r7, r7, r3
 801c33a:	1bbe      	sublt	r6, r7, r6
 801c33c:	b2b7      	uxthlt	r7, r6
 801c33e:	460e      	movlt	r6, r1
 801c340:	8891      	ldrh	r1, [r2, #4]
 801c342:	440b      	add	r3, r1
 801c344:	4631      	mov	r1, r6
 801c346:	b21b      	sxth	r3, r3
 801c348:	9310      	str	r3, [sp, #64]	@ 0x40
 801c34a:	88d3      	ldrh	r3, [r2, #6]
 801c34c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c34e:	449a      	add	sl, r3
 801c350:	fa0f f38a 	sxth.w	r3, sl
 801c354:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801c358:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c35a:	4bb5      	ldr	r3, [pc, #724]	@ (801c630 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801c35c:	f893 b000 	ldrb.w	fp, [r3]
 801c360:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c364:	f1dc 0300 	rsbs	r3, ip, #0
 801c368:	eb43 030c 	adc.w	r3, r3, ip
 801c36c:	930d      	str	r3, [sp, #52]	@ 0x34
 801c36e:	464b      	mov	r3, r9
 801c370:	f7f7 fb57 	bl	8013a22 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c374:	4631      	mov	r1, r6
 801c376:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801c37a:	464b      	mov	r3, r9
 801c37c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c37e:	a812      	add	r0, sp, #72	@ 0x48
 801c380:	f7f7 fb6c 	bl	8013a5c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c384:	a916      	add	r1, sp, #88	@ 0x58
 801c386:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c38a:	a815      	add	r0, sp, #84	@ 0x54
 801c38c:	f7f7 fc92 	bl	8013cb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c390:	f1b9 0f00 	cmp.w	r9, #0
 801c394:	f040 80d8 	bne.w	801c548 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801c398:	f1bb 0f01 	cmp.w	fp, #1
 801c39c:	f040 80dc 	bne.w	801c558 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801c3a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c3a2:	b153      	cbz	r3, 801c3ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801c3a4:	2508      	movs	r5, #8
 801c3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c3a8:	fb95 f3f8 	sdiv	r3, r5, r8
 801c3ac:	1e5d      	subs	r5, r3, #1
 801c3ae:	4415      	add	r5, r2
 801c3b0:	fb95 f5f3 	sdiv	r5, r5, r3
 801c3b4:	fb15 f503 	smulbb	r5, r5, r3
 801c3b8:	b2ad      	uxth	r5, r5
 801c3ba:	b907      	cbnz	r7, 801c3be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801c3bc:	b16c      	cbz	r4, 801c3da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801c3be:	fb04 7305 	mla	r3, r4, r5, r7
 801c3c2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c3c4:	ebaa 0a04 	sub.w	sl, sl, r4
 801c3c8:	fb08 f303 	mul.w	r3, r8, r3
 801c3cc:	fa1f fa8a 	uxth.w	sl, sl
 801c3d0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801c3d4:	f003 0407 	and.w	r4, r3, #7
 801c3d8:	9226      	str	r2, [sp, #152]	@ 0x98
 801c3da:	4649      	mov	r1, r9
 801c3dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c3de:	f7ff ff1b 	bl	801c218 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801c3e2:	4683      	mov	fp, r0
 801c3e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c3e6:	f7ff ff3d 	bl	801c264 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801c3ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c3ee:	4681      	mov	r9, r0
 801c3f0:	1a9b      	subs	r3, r3, r2
 801c3f2:	459a      	cmp	sl, r3
 801c3f4:	bfa8      	it	ge
 801c3f6:	469a      	movge	sl, r3
 801c3f8:	f1ba 0f00 	cmp.w	sl, #0
 801c3fc:	f340 80f9 	ble.w	801c5f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c400:	1bf6      	subs	r6, r6, r7
 801c402:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c404:	1b9e      	subs	r6, r3, r6
 801c406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c408:	429e      	cmp	r6, r3
 801c40a:	bfd4      	ite	le
 801c40c:	ebc7 0706 	rsble	r7, r7, r6
 801c410:	ebc7 0703 	rsbgt	r7, r7, r3
 801c414:	2f00      	cmp	r7, #0
 801c416:	f340 80ec 	ble.w	801c5f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c41a:	1bed      	subs	r5, r5, r7
 801c41c:	fb08 f305 	mul.w	r3, r8, r5
 801c420:	930d      	str	r3, [sp, #52]	@ 0x34
 801c422:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c424:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c428:	930e      	str	r3, [sp, #56]	@ 0x38
 801c42a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c42c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c430:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c432:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c434:	b2db      	uxtb	r3, r3
 801c436:	9310      	str	r3, [sp, #64]	@ 0x40
 801c438:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	f040 80de 	bne.w	801c5fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801c440:	4b7c      	ldr	r3, [pc, #496]	@ (801c634 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801c442:	6818      	ldr	r0, [r3, #0]
 801c444:	6803      	ldr	r3, [r0, #0]
 801c446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c448:	4798      	blx	r3
 801c44a:	2301      	movs	r3, #1
 801c44c:	4a7a      	ldr	r2, [pc, #488]	@ (801c638 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801c44e:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801c452:	fb07 9b1b 	mls	fp, r7, fp, r9
 801c456:	fa03 f308 	lsl.w	r3, r3, r8
 801c45a:	8811      	ldrh	r1, [r2, #0]
 801c45c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801c460:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801c464:	3b01      	subs	r3, #1
 801c466:	fb06 bb07 	mla	fp, r6, r7, fp
 801c46a:	b2db      	uxtb	r3, r3
 801c46c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c46e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801c472:	fb01 2303 	mla	r3, r1, r3, r2
 801c476:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c47a:	18c3      	adds	r3, r0, r3
 801c47c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c47e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c480:	781a      	ldrb	r2, [r3, #0]
 801c482:	4122      	asrs	r2, r4
 801c484:	b2d2      	uxtb	r2, r2
 801c486:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801c48a:	f0c0 80d7 	bcc.w	801c63c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801c48e:	46be      	mov	lr, r7
 801c490:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c492:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801c496:	f0c0 80ba 	bcc.w	801c60e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801c49a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c49c:	4013      	ands	r3, r2
 801c49e:	d041      	beq.n	801c524 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c4a0:	20ff      	movs	r0, #255	@ 0xff
 801c4a2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c4a4:	fb90 f5f5 	sdiv	r5, r0, r5
 801c4a8:	436b      	muls	r3, r5
 801c4aa:	2bfe      	cmp	r3, #254	@ 0xfe
 801c4ac:	dd03      	ble.n	801c4b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801c4ae:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c4b0:	4285      	cmp	r5, r0
 801c4b2:	f000 80a5 	beq.w	801c600 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801c4b6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c4b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c4ba:	fb15 f303 	smulbb	r3, r5, r3
 801c4be:	b29b      	uxth	r3, r3
 801c4c0:	1c5d      	adds	r5, r3, #1
 801c4c2:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c4c6:	780d      	ldrb	r5, [r1, #0]
 801c4c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c4cc:	fa1f fc83 	uxth.w	ip, r3
 801c4d0:	43db      	mvns	r3, r3
 801c4d2:	fb10 f90c 	smulbb	r9, r0, ip
 801c4d6:	b2db      	uxtb	r3, r3
 801c4d8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c4da:	fb05 9503 	mla	r5, r5, r3, r9
 801c4de:	b2ad      	uxth	r5, r5
 801c4e0:	f105 0901 	add.w	r9, r5, #1
 801c4e4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c4e8:	fb10 f90c 	smulbb	r9, r0, ip
 801c4ec:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801c4ee:	122d      	asrs	r5, r5, #8
 801c4f0:	fb10 fc0c 	smulbb	ip, r0, ip
 801c4f4:	700d      	strb	r5, [r1, #0]
 801c4f6:	784d      	ldrb	r5, [r1, #1]
 801c4f8:	fb05 9503 	mla	r5, r5, r3, r9
 801c4fc:	b2ad      	uxth	r5, r5
 801c4fe:	f105 0901 	add.w	r9, r5, #1
 801c502:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c506:	122d      	asrs	r5, r5, #8
 801c508:	704d      	strb	r5, [r1, #1]
 801c50a:	788d      	ldrb	r5, [r1, #2]
 801c50c:	fb05 cc03 	mla	ip, r5, r3, ip
 801c510:	fa1f fc8c 	uxth.w	ip, ip
 801c514:	f10c 0301 	add.w	r3, ip, #1
 801c518:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c51c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c520:	f881 c002 	strb.w	ip, [r1, #2]
 801c524:	4444      	add	r4, r8
 801c526:	4431      	add	r1, r6
 801c528:	b2a4      	uxth	r4, r4
 801c52a:	2c07      	cmp	r4, #7
 801c52c:	bf89      	itett	hi
 801c52e:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801c530:	fa42 f208 	asrls.w	r2, r2, r8
 801c534:	2400      	movhi	r4, #0
 801c536:	785a      	ldrbhi	r2, [r3, #1]
 801c538:	bf8a      	itet	hi
 801c53a:	3301      	addhi	r3, #1
 801c53c:	b2d2      	uxtbls	r2, r2
 801c53e:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801c540:	e7a7      	b.n	801c492 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801c542:	441e      	add	r6, r3
 801c544:	b236      	sxth	r6, r6
 801c546:	e6ed      	b.n	801c324 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c548:	f1b9 0f01 	cmp.w	r9, #1
 801c54c:	f47f af28 	bne.w	801c3a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c550:	f1bb 0f01 	cmp.w	fp, #1
 801c554:	f47f af24 	bne.w	801c3a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c558:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801c634 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801c55c:	f8db 0000 	ldr.w	r0, [fp]
 801c560:	6803      	ldr	r3, [r0, #0]
 801c562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c564:	4798      	blx	r3
 801c566:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801c56a:	465a      	mov	r2, fp
 801c56c:	d006      	beq.n	801c57c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c56e:	f1b8 0f04 	cmp.w	r8, #4
 801c572:	d141      	bne.n	801c5f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801c574:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c576:	3300      	adds	r3, #0
 801c578:	bf18      	it	ne
 801c57a:	2301      	movne	r3, #1
 801c57c:	0580      	lsls	r0, r0, #22
 801c57e:	d566      	bpl.n	801c64e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c580:	f1b8 0f08 	cmp.w	r8, #8
 801c584:	d163      	bne.n	801c64e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c586:	2b00      	cmp	r3, #0
 801c588:	bf0c      	ite	eq
 801c58a:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801c58e:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801c592:	2f00      	cmp	r7, #0
 801c594:	f47f af04 	bne.w	801c3a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c598:	2c00      	cmp	r4, #0
 801c59a:	f47f af01 	bne.w	801c3a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c5a2:	18f3      	adds	r3, r6, r3
 801c5a4:	4283      	cmp	r3, r0
 801c5a6:	f73f aefb 	bgt.w	801c3a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c5aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c5ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c5ae:	4403      	add	r3, r0
 801c5b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c5b2:	4283      	cmp	r3, r0
 801c5b4:	f73f aef4 	bgt.w	801c3a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c5b8:	f1b8 0f08 	cmp.w	r8, #8
 801c5bc:	6810      	ldr	r0, [r2, #0]
 801c5be:	f04f 0600 	mov.w	r6, #0
 801c5c2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801c5c6:	bf18      	it	ne
 801c5c8:	3501      	addne	r5, #1
 801c5ca:	6804      	ldr	r4, [r0, #0]
 801c5cc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801c5d0:	bf18      	it	ne
 801c5d2:	f025 0501 	bicne.w	r5, r5, #1
 801c5d6:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801c5da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c5dc:	bf18      	it	ne
 801c5de:	b2ad      	uxthne	r5, r5
 801c5e0:	9104      	str	r1, [sp, #16]
 801c5e2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c5e4:	e9cd 5a00 	strd	r5, sl, [sp]
 801c5e8:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801c5ec:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801c5ee:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 801c5f0:	47a0      	blx	r4
 801c5f2:	b017      	add	sp, #92	@ 0x5c
 801c5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5f8:	2300      	movs	r3, #0
 801c5fa:	e7bf      	b.n	801c57c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c5fc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c5fe:	e724      	b.n	801c44a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801c600:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c602:	700b      	strb	r3, [r1, #0]
 801c604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c606:	704b      	strb	r3, [r1, #1]
 801c608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c60a:	708b      	strb	r3, [r1, #2]
 801c60c:	e78a      	b.n	801c524 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c60e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c610:	b153      	cbz	r3, 801c628 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801c612:	441c      	add	r4, r3
 801c614:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c616:	b2a4      	uxth	r4, r4
 801c618:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c61c:	f004 0407 	and.w	r4, r4, #7
 801c620:	781a      	ldrb	r2, [r3, #0]
 801c622:	9326      	str	r3, [sp, #152]	@ 0x98
 801c624:	4122      	asrs	r2, r4
 801c626:	b2d2      	uxtb	r2, r2
 801c628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c62a:	445b      	add	r3, fp
 801c62c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c62e:	e72a      	b.n	801c486 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801c630:	240251e8 	.word	0x240251e8
 801c634:	240251f0 	.word	0x240251f0
 801c638:	240251ea 	.word	0x240251ea
 801c63c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d1d7      	bne.n	801c5f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c642:	4b06      	ldr	r3, [pc, #24]	@ (801c65c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801c644:	6818      	ldr	r0, [r3, #0]
 801c646:	6803      	ldr	r3, [r0, #0]
 801c648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c64a:	4798      	blx	r3
 801c64c:	e7d1      	b.n	801c5f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c64e:	2b00      	cmp	r3, #0
 801c650:	f43f aea6 	beq.w	801c3a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c654:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c658:	e79b      	b.n	801c592 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801c65a:	bf00      	nop
 801c65c:	240251f0 	.word	0x240251f0

0801c660 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c660:	b538      	push	{r3, r4, r5, lr}
 801c662:	4c15      	ldr	r4, [pc, #84]	@ (801c6b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c664:	4605      	mov	r5, r0
 801c666:	7823      	ldrb	r3, [r4, #0]
 801c668:	f3bf 8f5b 	dmb	ish
 801c66c:	07da      	lsls	r2, r3, #31
 801c66e:	d40b      	bmi.n	801c688 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c670:	4620      	mov	r0, r4
 801c672:	f006 f8d8 	bl	8022826 <__cxa_guard_acquire>
 801c676:	b138      	cbz	r0, 801c688 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c678:	4620      	mov	r0, r4
 801c67a:	f006 f8e0 	bl	802283e <__cxa_guard_release>
 801c67e:	4a0f      	ldr	r2, [pc, #60]	@ (801c6bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c680:	490f      	ldr	r1, [pc, #60]	@ (801c6c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c682:	4810      	ldr	r0, [pc, #64]	@ (801c6c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c684:	f006 f8c8 	bl	8022818 <__aeabi_atexit>
 801c688:	4c0f      	ldr	r4, [pc, #60]	@ (801c6c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c68a:	7823      	ldrb	r3, [r4, #0]
 801c68c:	f3bf 8f5b 	dmb	ish
 801c690:	07db      	lsls	r3, r3, #31
 801c692:	d40b      	bmi.n	801c6ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c694:	4620      	mov	r0, r4
 801c696:	f006 f8c6 	bl	8022826 <__cxa_guard_acquire>
 801c69a:	b138      	cbz	r0, 801c6ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c69c:	4620      	mov	r0, r4
 801c69e:	f006 f8ce 	bl	802283e <__cxa_guard_release>
 801c6a2:	4a06      	ldr	r2, [pc, #24]	@ (801c6bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c6a4:	4909      	ldr	r1, [pc, #36]	@ (801c6cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c6a6:	480a      	ldr	r0, [pc, #40]	@ (801c6d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c6a8:	f006 f8b6 	bl	8022818 <__aeabi_atexit>
 801c6ac:	4b05      	ldr	r3, [pc, #20]	@ (801c6c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c6ae:	616b      	str	r3, [r5, #20]
 801c6b0:	4b07      	ldr	r3, [pc, #28]	@ (801c6d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c6b2:	61ab      	str	r3, [r5, #24]
 801c6b4:	bd38      	pop	{r3, r4, r5, pc}
 801c6b6:	bf00      	nop
 801c6b8:	240252d4 	.word	0x240252d4
 801c6bc:	24000000 	.word	0x24000000
 801c6c0:	08019951 	.word	0x08019951
 801c6c4:	240000c8 	.word	0x240000c8
 801c6c8:	240252d8 	.word	0x240252d8
 801c6cc:	0801994f 	.word	0x0801994f
 801c6d0:	240000cc 	.word	0x240000cc

0801c6d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c6d4:	b538      	push	{r3, r4, r5, lr}
 801c6d6:	4c15      	ldr	r4, [pc, #84]	@ (801c72c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c6d8:	4605      	mov	r5, r0
 801c6da:	7823      	ldrb	r3, [r4, #0]
 801c6dc:	f3bf 8f5b 	dmb	ish
 801c6e0:	07da      	lsls	r2, r3, #31
 801c6e2:	d40b      	bmi.n	801c6fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c6e4:	4620      	mov	r0, r4
 801c6e6:	f006 f89e 	bl	8022826 <__cxa_guard_acquire>
 801c6ea:	b138      	cbz	r0, 801c6fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c6ec:	4620      	mov	r0, r4
 801c6ee:	f006 f8a6 	bl	802283e <__cxa_guard_release>
 801c6f2:	4a0f      	ldr	r2, [pc, #60]	@ (801c730 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c6f4:	490f      	ldr	r1, [pc, #60]	@ (801c734 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c6f6:	4810      	ldr	r0, [pc, #64]	@ (801c738 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c6f8:	f006 f88e 	bl	8022818 <__aeabi_atexit>
 801c6fc:	4c0f      	ldr	r4, [pc, #60]	@ (801c73c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c6fe:	7823      	ldrb	r3, [r4, #0]
 801c700:	f3bf 8f5b 	dmb	ish
 801c704:	07db      	lsls	r3, r3, #31
 801c706:	d40b      	bmi.n	801c720 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c708:	4620      	mov	r0, r4
 801c70a:	f006 f88c 	bl	8022826 <__cxa_guard_acquire>
 801c70e:	b138      	cbz	r0, 801c720 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c710:	4620      	mov	r0, r4
 801c712:	f006 f894 	bl	802283e <__cxa_guard_release>
 801c716:	4a06      	ldr	r2, [pc, #24]	@ (801c730 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c718:	4909      	ldr	r1, [pc, #36]	@ (801c740 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c71a:	480a      	ldr	r0, [pc, #40]	@ (801c744 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c71c:	f006 f87c 	bl	8022818 <__aeabi_atexit>
 801c720:	4b05      	ldr	r3, [pc, #20]	@ (801c738 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c722:	60eb      	str	r3, [r5, #12]
 801c724:	4b07      	ldr	r3, [pc, #28]	@ (801c744 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c726:	612b      	str	r3, [r5, #16]
 801c728:	bd38      	pop	{r3, r4, r5, pc}
 801c72a:	bf00      	nop
 801c72c:	240252b4 	.word	0x240252b4
 801c730:	24000000 	.word	0x24000000
 801c734:	08019955 	.word	0x08019955
 801c738:	240000a8 	.word	0x240000a8
 801c73c:	240252b8 	.word	0x240252b8
 801c740:	08019953 	.word	0x08019953
 801c744:	240000ac 	.word	0x240000ac

0801c748 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801c748:	b510      	push	{r4, lr}
 801c74a:	4604      	mov	r4, r0
 801c74c:	f7ff ff88 	bl	801c660 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c750:	4620      	mov	r0, r4
 801c752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c756:	f7ff bfbd 	b.w	801c6d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c75c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c75c:	b538      	push	{r3, r4, r5, lr}
 801c75e:	4c15      	ldr	r4, [pc, #84]	@ (801c7b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c760:	4605      	mov	r5, r0
 801c762:	7823      	ldrb	r3, [r4, #0]
 801c764:	f3bf 8f5b 	dmb	ish
 801c768:	07da      	lsls	r2, r3, #31
 801c76a:	d40b      	bmi.n	801c784 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c76c:	4620      	mov	r0, r4
 801c76e:	f006 f85a 	bl	8022826 <__cxa_guard_acquire>
 801c772:	b138      	cbz	r0, 801c784 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c774:	4620      	mov	r0, r4
 801c776:	f006 f862 	bl	802283e <__cxa_guard_release>
 801c77a:	4a0f      	ldr	r2, [pc, #60]	@ (801c7b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c77c:	490f      	ldr	r1, [pc, #60]	@ (801c7bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801c77e:	4810      	ldr	r0, [pc, #64]	@ (801c7c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c780:	f006 f84a 	bl	8022818 <__aeabi_atexit>
 801c784:	4c0f      	ldr	r4, [pc, #60]	@ (801c7c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801c786:	7823      	ldrb	r3, [r4, #0]
 801c788:	f3bf 8f5b 	dmb	ish
 801c78c:	07db      	lsls	r3, r3, #31
 801c78e:	d40b      	bmi.n	801c7a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c790:	4620      	mov	r0, r4
 801c792:	f006 f848 	bl	8022826 <__cxa_guard_acquire>
 801c796:	b138      	cbz	r0, 801c7a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c798:	4620      	mov	r0, r4
 801c79a:	f006 f850 	bl	802283e <__cxa_guard_release>
 801c79e:	4a06      	ldr	r2, [pc, #24]	@ (801c7b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c7a0:	4909      	ldr	r1, [pc, #36]	@ (801c7c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801c7a2:	480a      	ldr	r0, [pc, #40]	@ (801c7cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c7a4:	f006 f838 	bl	8022818 <__aeabi_atexit>
 801c7a8:	4b05      	ldr	r3, [pc, #20]	@ (801c7c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c7aa:	626b      	str	r3, [r5, #36]	@ 0x24
 801c7ac:	4b07      	ldr	r3, [pc, #28]	@ (801c7cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c7ae:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c7b0:	bd38      	pop	{r3, r4, r5, pc}
 801c7b2:	bf00      	nop
 801c7b4:	240252dc 	.word	0x240252dc
 801c7b8:	24000000 	.word	0x24000000
 801c7bc:	08019949 	.word	0x08019949
 801c7c0:	240000d0 	.word	0x240000d0
 801c7c4:	240252e0 	.word	0x240252e0
 801c7c8:	08019947 	.word	0x08019947
 801c7cc:	240000d4 	.word	0x240000d4

0801c7d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801c7d0:	b538      	push	{r3, r4, r5, lr}
 801c7d2:	4c15      	ldr	r4, [pc, #84]	@ (801c828 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801c7d4:	4605      	mov	r5, r0
 801c7d6:	7823      	ldrb	r3, [r4, #0]
 801c7d8:	f3bf 8f5b 	dmb	ish
 801c7dc:	07da      	lsls	r2, r3, #31
 801c7de:	d40b      	bmi.n	801c7f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c7e0:	4620      	mov	r0, r4
 801c7e2:	f006 f820 	bl	8022826 <__cxa_guard_acquire>
 801c7e6:	b138      	cbz	r0, 801c7f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c7e8:	4620      	mov	r0, r4
 801c7ea:	f006 f828 	bl	802283e <__cxa_guard_release>
 801c7ee:	4a0f      	ldr	r2, [pc, #60]	@ (801c82c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c7f0:	490f      	ldr	r1, [pc, #60]	@ (801c830 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c7f2:	4810      	ldr	r0, [pc, #64]	@ (801c834 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c7f4:	f006 f810 	bl	8022818 <__aeabi_atexit>
 801c7f8:	4c0f      	ldr	r4, [pc, #60]	@ (801c838 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c7fa:	7823      	ldrb	r3, [r4, #0]
 801c7fc:	f3bf 8f5b 	dmb	ish
 801c800:	07db      	lsls	r3, r3, #31
 801c802:	d40b      	bmi.n	801c81c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c804:	4620      	mov	r0, r4
 801c806:	f006 f80e 	bl	8022826 <__cxa_guard_acquire>
 801c80a:	b138      	cbz	r0, 801c81c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c80c:	4620      	mov	r0, r4
 801c80e:	f006 f816 	bl	802283e <__cxa_guard_release>
 801c812:	4a06      	ldr	r2, [pc, #24]	@ (801c82c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c814:	4909      	ldr	r1, [pc, #36]	@ (801c83c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c816:	480a      	ldr	r0, [pc, #40]	@ (801c840 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c818:	f005 fffe 	bl	8022818 <__aeabi_atexit>
 801c81c:	4b05      	ldr	r3, [pc, #20]	@ (801c834 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c81e:	61eb      	str	r3, [r5, #28]
 801c820:	4b07      	ldr	r3, [pc, #28]	@ (801c840 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c822:	622b      	str	r3, [r5, #32]
 801c824:	bd38      	pop	{r3, r4, r5, pc}
 801c826:	bf00      	nop
 801c828:	240252bc 	.word	0x240252bc
 801c82c:	24000000 	.word	0x24000000
 801c830:	0801994d 	.word	0x0801994d
 801c834:	240000b0 	.word	0x240000b0
 801c838:	240252c0 	.word	0x240252c0
 801c83c:	0801994b 	.word	0x0801994b
 801c840:	240000b4 	.word	0x240000b4

0801c844 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c844:	b510      	push	{r4, lr}
 801c846:	4604      	mov	r4, r0
 801c848:	f7ff ff88 	bl	801c75c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c84c:	4620      	mov	r0, r4
 801c84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c852:	f7ff bfbd 	b.w	801c7d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c858 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801c858:	b538      	push	{r3, r4, r5, lr}
 801c85a:	4c15      	ldr	r4, [pc, #84]	@ (801c8b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801c85c:	4605      	mov	r5, r0
 801c85e:	7823      	ldrb	r3, [r4, #0]
 801c860:	f3bf 8f5b 	dmb	ish
 801c864:	07da      	lsls	r2, r3, #31
 801c866:	d40b      	bmi.n	801c880 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c868:	4620      	mov	r0, r4
 801c86a:	f005 ffdc 	bl	8022826 <__cxa_guard_acquire>
 801c86e:	b138      	cbz	r0, 801c880 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c870:	4620      	mov	r0, r4
 801c872:	f005 ffe4 	bl	802283e <__cxa_guard_release>
 801c876:	4a0f      	ldr	r2, [pc, #60]	@ (801c8b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c878:	490f      	ldr	r1, [pc, #60]	@ (801c8b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801c87a:	4810      	ldr	r0, [pc, #64]	@ (801c8bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c87c:	f005 ffcc 	bl	8022818 <__aeabi_atexit>
 801c880:	4c0f      	ldr	r4, [pc, #60]	@ (801c8c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801c882:	7823      	ldrb	r3, [r4, #0]
 801c884:	f3bf 8f5b 	dmb	ish
 801c888:	07db      	lsls	r3, r3, #31
 801c88a:	d40b      	bmi.n	801c8a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c88c:	4620      	mov	r0, r4
 801c88e:	f005 ffca 	bl	8022826 <__cxa_guard_acquire>
 801c892:	b138      	cbz	r0, 801c8a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c894:	4620      	mov	r0, r4
 801c896:	f005 ffd2 	bl	802283e <__cxa_guard_release>
 801c89a:	4a06      	ldr	r2, [pc, #24]	@ (801c8b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c89c:	4909      	ldr	r1, [pc, #36]	@ (801c8c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801c89e:	480a      	ldr	r0, [pc, #40]	@ (801c8c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c8a0:	f005 ffba 	bl	8022818 <__aeabi_atexit>
 801c8a4:	4b05      	ldr	r3, [pc, #20]	@ (801c8bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c8a6:	636b      	str	r3, [r5, #52]	@ 0x34
 801c8a8:	4b07      	ldr	r3, [pc, #28]	@ (801c8c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c8aa:	63ab      	str	r3, [r5, #56]	@ 0x38
 801c8ac:	bd38      	pop	{r3, r4, r5, pc}
 801c8ae:	bf00      	nop
 801c8b0:	240252c4 	.word	0x240252c4
 801c8b4:	24000000 	.word	0x24000000
 801c8b8:	08019941 	.word	0x08019941
 801c8bc:	240000b8 	.word	0x240000b8
 801c8c0:	240252c8 	.word	0x240252c8
 801c8c4:	0801993f 	.word	0x0801993f
 801c8c8:	240000bc 	.word	0x240000bc

0801c8cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801c8cc:	b538      	push	{r3, r4, r5, lr}
 801c8ce:	4c15      	ldr	r4, [pc, #84]	@ (801c924 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801c8d0:	4605      	mov	r5, r0
 801c8d2:	7823      	ldrb	r3, [r4, #0]
 801c8d4:	f3bf 8f5b 	dmb	ish
 801c8d8:	07da      	lsls	r2, r3, #31
 801c8da:	d40b      	bmi.n	801c8f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c8dc:	4620      	mov	r0, r4
 801c8de:	f005 ffa2 	bl	8022826 <__cxa_guard_acquire>
 801c8e2:	b138      	cbz	r0, 801c8f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c8e4:	4620      	mov	r0, r4
 801c8e6:	f005 ffaa 	bl	802283e <__cxa_guard_release>
 801c8ea:	4a0f      	ldr	r2, [pc, #60]	@ (801c928 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c8ec:	490f      	ldr	r1, [pc, #60]	@ (801c92c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801c8ee:	4810      	ldr	r0, [pc, #64]	@ (801c930 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c8f0:	f005 ff92 	bl	8022818 <__aeabi_atexit>
 801c8f4:	4c0f      	ldr	r4, [pc, #60]	@ (801c934 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801c8f6:	7823      	ldrb	r3, [r4, #0]
 801c8f8:	f3bf 8f5b 	dmb	ish
 801c8fc:	07db      	lsls	r3, r3, #31
 801c8fe:	d40b      	bmi.n	801c918 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c900:	4620      	mov	r0, r4
 801c902:	f005 ff90 	bl	8022826 <__cxa_guard_acquire>
 801c906:	b138      	cbz	r0, 801c918 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c908:	4620      	mov	r0, r4
 801c90a:	f005 ff98 	bl	802283e <__cxa_guard_release>
 801c90e:	4a06      	ldr	r2, [pc, #24]	@ (801c928 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c910:	4909      	ldr	r1, [pc, #36]	@ (801c938 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801c912:	480a      	ldr	r0, [pc, #40]	@ (801c93c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c914:	f005 ff80 	bl	8022818 <__aeabi_atexit>
 801c918:	4b05      	ldr	r3, [pc, #20]	@ (801c930 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c91a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801c91c:	4b07      	ldr	r3, [pc, #28]	@ (801c93c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c91e:	632b      	str	r3, [r5, #48]	@ 0x30
 801c920:	bd38      	pop	{r3, r4, r5, pc}
 801c922:	bf00      	nop
 801c924:	2402529c 	.word	0x2402529c
 801c928:	24000000 	.word	0x24000000
 801c92c:	08019945 	.word	0x08019945
 801c930:	24000090 	.word	0x24000090
 801c934:	240252a0 	.word	0x240252a0
 801c938:	08019943 	.word	0x08019943
 801c93c:	24000094 	.word	0x24000094

0801c940 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801c940:	b510      	push	{r4, lr}
 801c942:	4604      	mov	r4, r0
 801c944:	f7ff ff88 	bl	801c858 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801c948:	4620      	mov	r0, r4
 801c94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c94e:	f7ff bfbd 	b.w	801c8cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801c954 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c954:	b538      	push	{r3, r4, r5, lr}
 801c956:	4c15      	ldr	r4, [pc, #84]	@ (801c9ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c958:	4605      	mov	r5, r0
 801c95a:	7823      	ldrb	r3, [r4, #0]
 801c95c:	f3bf 8f5b 	dmb	ish
 801c960:	07da      	lsls	r2, r3, #31
 801c962:	d40b      	bmi.n	801c97c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c964:	4620      	mov	r0, r4
 801c966:	f005 ff5e 	bl	8022826 <__cxa_guard_acquire>
 801c96a:	b138      	cbz	r0, 801c97c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c96c:	4620      	mov	r0, r4
 801c96e:	f005 ff66 	bl	802283e <__cxa_guard_release>
 801c972:	4a0f      	ldr	r2, [pc, #60]	@ (801c9b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c974:	490f      	ldr	r1, [pc, #60]	@ (801c9b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c976:	4810      	ldr	r0, [pc, #64]	@ (801c9b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c978:	f005 ff4e 	bl	8022818 <__aeabi_atexit>
 801c97c:	4c0f      	ldr	r4, [pc, #60]	@ (801c9bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c97e:	7823      	ldrb	r3, [r4, #0]
 801c980:	f3bf 8f5b 	dmb	ish
 801c984:	07db      	lsls	r3, r3, #31
 801c986:	d40b      	bmi.n	801c9a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c988:	4620      	mov	r0, r4
 801c98a:	f005 ff4c 	bl	8022826 <__cxa_guard_acquire>
 801c98e:	b138      	cbz	r0, 801c9a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c990:	4620      	mov	r0, r4
 801c992:	f005 ff54 	bl	802283e <__cxa_guard_release>
 801c996:	4a06      	ldr	r2, [pc, #24]	@ (801c9b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c998:	4909      	ldr	r1, [pc, #36]	@ (801c9c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c99a:	480a      	ldr	r0, [pc, #40]	@ (801c9c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c99c:	f005 ff3c 	bl	8022818 <__aeabi_atexit>
 801c9a0:	4b05      	ldr	r3, [pc, #20]	@ (801c9b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c9a2:	646b      	str	r3, [r5, #68]	@ 0x44
 801c9a4:	4b07      	ldr	r3, [pc, #28]	@ (801c9c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c9a6:	64ab      	str	r3, [r5, #72]	@ 0x48
 801c9a8:	bd38      	pop	{r3, r4, r5, pc}
 801c9aa:	bf00      	nop
 801c9ac:	240252cc 	.word	0x240252cc
 801c9b0:	24000000 	.word	0x24000000
 801c9b4:	08019939 	.word	0x08019939
 801c9b8:	240000c0 	.word	0x240000c0
 801c9bc:	240252d0 	.word	0x240252d0
 801c9c0:	08019937 	.word	0x08019937
 801c9c4:	240000c4 	.word	0x240000c4

0801c9c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c9c8:	b538      	push	{r3, r4, r5, lr}
 801c9ca:	4c15      	ldr	r4, [pc, #84]	@ (801ca20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c9cc:	4605      	mov	r5, r0
 801c9ce:	7823      	ldrb	r3, [r4, #0]
 801c9d0:	f3bf 8f5b 	dmb	ish
 801c9d4:	07da      	lsls	r2, r3, #31
 801c9d6:	d40b      	bmi.n	801c9f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c9d8:	4620      	mov	r0, r4
 801c9da:	f005 ff24 	bl	8022826 <__cxa_guard_acquire>
 801c9de:	b138      	cbz	r0, 801c9f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c9e0:	4620      	mov	r0, r4
 801c9e2:	f005 ff2c 	bl	802283e <__cxa_guard_release>
 801c9e6:	4a0f      	ldr	r2, [pc, #60]	@ (801ca24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c9e8:	490f      	ldr	r1, [pc, #60]	@ (801ca28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c9ea:	4810      	ldr	r0, [pc, #64]	@ (801ca2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c9ec:	f005 ff14 	bl	8022818 <__aeabi_atexit>
 801c9f0:	4c0f      	ldr	r4, [pc, #60]	@ (801ca30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c9f2:	7823      	ldrb	r3, [r4, #0]
 801c9f4:	f3bf 8f5b 	dmb	ish
 801c9f8:	07db      	lsls	r3, r3, #31
 801c9fa:	d40b      	bmi.n	801ca14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c9fc:	4620      	mov	r0, r4
 801c9fe:	f005 ff12 	bl	8022826 <__cxa_guard_acquire>
 801ca02:	b138      	cbz	r0, 801ca14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ca04:	4620      	mov	r0, r4
 801ca06:	f005 ff1a 	bl	802283e <__cxa_guard_release>
 801ca0a:	4a06      	ldr	r2, [pc, #24]	@ (801ca24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ca0c:	4909      	ldr	r1, [pc, #36]	@ (801ca34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ca0e:	480a      	ldr	r0, [pc, #40]	@ (801ca38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ca10:	f005 ff02 	bl	8022818 <__aeabi_atexit>
 801ca14:	4b05      	ldr	r3, [pc, #20]	@ (801ca2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ca16:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801ca18:	4b07      	ldr	r3, [pc, #28]	@ (801ca38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ca1a:	642b      	str	r3, [r5, #64]	@ 0x40
 801ca1c:	bd38      	pop	{r3, r4, r5, pc}
 801ca1e:	bf00      	nop
 801ca20:	240252ac 	.word	0x240252ac
 801ca24:	24000000 	.word	0x24000000
 801ca28:	0801993d 	.word	0x0801993d
 801ca2c:	240000a0 	.word	0x240000a0
 801ca30:	240252b0 	.word	0x240252b0
 801ca34:	0801993b 	.word	0x0801993b
 801ca38:	240000a4 	.word	0x240000a4

0801ca3c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ca3c:	b510      	push	{r4, lr}
 801ca3e:	4604      	mov	r4, r0
 801ca40:	f7ff ff88 	bl	801c954 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ca44:	4620      	mov	r0, r4
 801ca46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca4a:	f7ff bfbd 	b.w	801c9c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ca50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ca50:	b538      	push	{r3, r4, r5, lr}
 801ca52:	4c15      	ldr	r4, [pc, #84]	@ (801caa8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ca54:	4605      	mov	r5, r0
 801ca56:	7823      	ldrb	r3, [r4, #0]
 801ca58:	f3bf 8f5b 	dmb	ish
 801ca5c:	07da      	lsls	r2, r3, #31
 801ca5e:	d40b      	bmi.n	801ca78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ca60:	4620      	mov	r0, r4
 801ca62:	f005 fee0 	bl	8022826 <__cxa_guard_acquire>
 801ca66:	b138      	cbz	r0, 801ca78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ca68:	4620      	mov	r0, r4
 801ca6a:	f005 fee8 	bl	802283e <__cxa_guard_release>
 801ca6e:	4a0f      	ldr	r2, [pc, #60]	@ (801caac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ca70:	490f      	ldr	r1, [pc, #60]	@ (801cab0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ca72:	4810      	ldr	r0, [pc, #64]	@ (801cab4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ca74:	f005 fed0 	bl	8022818 <__aeabi_atexit>
 801ca78:	4c0f      	ldr	r4, [pc, #60]	@ (801cab8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ca7a:	7823      	ldrb	r3, [r4, #0]
 801ca7c:	f3bf 8f5b 	dmb	ish
 801ca80:	07db      	lsls	r3, r3, #31
 801ca82:	d40b      	bmi.n	801ca9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ca84:	4620      	mov	r0, r4
 801ca86:	f005 fece 	bl	8022826 <__cxa_guard_acquire>
 801ca8a:	b138      	cbz	r0, 801ca9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ca8c:	4620      	mov	r0, r4
 801ca8e:	f005 fed6 	bl	802283e <__cxa_guard_release>
 801ca92:	4a06      	ldr	r2, [pc, #24]	@ (801caac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ca94:	4909      	ldr	r1, [pc, #36]	@ (801cabc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ca96:	480a      	ldr	r0, [pc, #40]	@ (801cac0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ca98:	f005 febe 	bl	8022818 <__aeabi_atexit>
 801ca9c:	4b05      	ldr	r3, [pc, #20]	@ (801cab4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ca9e:	656b      	str	r3, [r5, #84]	@ 0x54
 801caa0:	4b07      	ldr	r3, [pc, #28]	@ (801cac0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801caa2:	65ab      	str	r3, [r5, #88]	@ 0x58
 801caa4:	bd38      	pop	{r3, r4, r5, pc}
 801caa6:	bf00      	nop
 801caa8:	240252a4 	.word	0x240252a4
 801caac:	24000000 	.word	0x24000000
 801cab0:	08019931 	.word	0x08019931
 801cab4:	24000098 	.word	0x24000098
 801cab8:	240252a8 	.word	0x240252a8
 801cabc:	0801992f 	.word	0x0801992f
 801cac0:	2400009c 	.word	0x2400009c

0801cac4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801cac4:	b538      	push	{r3, r4, r5, lr}
 801cac6:	4c15      	ldr	r4, [pc, #84]	@ (801cb1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801cac8:	4605      	mov	r5, r0
 801caca:	7823      	ldrb	r3, [r4, #0]
 801cacc:	f3bf 8f5b 	dmb	ish
 801cad0:	07da      	lsls	r2, r3, #31
 801cad2:	d40b      	bmi.n	801caec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801cad4:	4620      	mov	r0, r4
 801cad6:	f005 fea6 	bl	8022826 <__cxa_guard_acquire>
 801cada:	b138      	cbz	r0, 801caec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801cadc:	4620      	mov	r0, r4
 801cade:	f005 feae 	bl	802283e <__cxa_guard_release>
 801cae2:	4a0f      	ldr	r2, [pc, #60]	@ (801cb20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801cae4:	490f      	ldr	r1, [pc, #60]	@ (801cb24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801cae6:	4810      	ldr	r0, [pc, #64]	@ (801cb28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801cae8:	f005 fe96 	bl	8022818 <__aeabi_atexit>
 801caec:	4c0f      	ldr	r4, [pc, #60]	@ (801cb2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801caee:	7823      	ldrb	r3, [r4, #0]
 801caf0:	f3bf 8f5b 	dmb	ish
 801caf4:	07db      	lsls	r3, r3, #31
 801caf6:	d40b      	bmi.n	801cb10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801caf8:	4620      	mov	r0, r4
 801cafa:	f005 fe94 	bl	8022826 <__cxa_guard_acquire>
 801cafe:	b138      	cbz	r0, 801cb10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801cb00:	4620      	mov	r0, r4
 801cb02:	f005 fe9c 	bl	802283e <__cxa_guard_release>
 801cb06:	4a06      	ldr	r2, [pc, #24]	@ (801cb20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801cb08:	4909      	ldr	r1, [pc, #36]	@ (801cb30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801cb0a:	480a      	ldr	r0, [pc, #40]	@ (801cb34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801cb0c:	f005 fe84 	bl	8022818 <__aeabi_atexit>
 801cb10:	4b05      	ldr	r3, [pc, #20]	@ (801cb28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801cb12:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801cb14:	4b07      	ldr	r3, [pc, #28]	@ (801cb34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801cb16:	652b      	str	r3, [r5, #80]	@ 0x50
 801cb18:	bd38      	pop	{r3, r4, r5, pc}
 801cb1a:	bf00      	nop
 801cb1c:	24025294 	.word	0x24025294
 801cb20:	24000000 	.word	0x24000000
 801cb24:	08019935 	.word	0x08019935
 801cb28:	24000088 	.word	0x24000088
 801cb2c:	24025298 	.word	0x24025298
 801cb30:	08019933 	.word	0x08019933
 801cb34:	2400008c 	.word	0x2400008c

0801cb38 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801cb38:	b510      	push	{r4, lr}
 801cb3a:	4604      	mov	r4, r0
 801cb3c:	f7ff ff88 	bl	801ca50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801cb40:	4620      	mov	r0, r4
 801cb42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb46:	f7ff bfbd 	b.w	801cac4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801cb4a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801cb4a:	b510      	push	{r4, lr}
 801cb4c:	4604      	mov	r4, r0
 801cb4e:	f7ff fff3 	bl	801cb38 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801cb52:	4620      	mov	r0, r4
 801cb54:	f7ff ff72 	bl	801ca3c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801cb58:	4620      	mov	r0, r4
 801cb5a:	f7ff fe73 	bl	801c844 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801cb5e:	4620      	mov	r0, r4
 801cb60:	f7ff fdf2 	bl	801c748 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801cb64:	4620      	mov	r0, r4
 801cb66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb6a:	f7ff bee9 	b.w	801c940 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801cb70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801cb70:	b538      	push	{r3, r4, r5, lr}
 801cb72:	4c0b      	ldr	r4, [pc, #44]	@ (801cba0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801cb74:	4605      	mov	r5, r0
 801cb76:	7823      	ldrb	r3, [r4, #0]
 801cb78:	f3bf 8f5b 	dmb	ish
 801cb7c:	07db      	lsls	r3, r3, #31
 801cb7e:	d40b      	bmi.n	801cb98 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801cb80:	4620      	mov	r0, r4
 801cb82:	f005 fe50 	bl	8022826 <__cxa_guard_acquire>
 801cb86:	b138      	cbz	r0, 801cb98 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801cb88:	4620      	mov	r0, r4
 801cb8a:	f005 fe58 	bl	802283e <__cxa_guard_release>
 801cb8e:	4a05      	ldr	r2, [pc, #20]	@ (801cba4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801cb90:	4905      	ldr	r1, [pc, #20]	@ (801cba8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801cb92:	4806      	ldr	r0, [pc, #24]	@ (801cbac <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801cb94:	f005 fe40 	bl	8022818 <__aeabi_atexit>
 801cb98:	4b04      	ldr	r3, [pc, #16]	@ (801cbac <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801cb9a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801cb9c:	bd38      	pop	{r3, r4, r5, pc}
 801cb9e:	bf00      	nop
 801cba0:	24025288 	.word	0x24025288
 801cba4:	24000000 	.word	0x24000000
 801cba8:	0801992d 	.word	0x0801992d
 801cbac:	24000080 	.word	0x24000080

0801cbb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801cbb0:	b538      	push	{r3, r4, r5, lr}
 801cbb2:	4c0b      	ldr	r4, [pc, #44]	@ (801cbe0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801cbb4:	4605      	mov	r5, r0
 801cbb6:	7823      	ldrb	r3, [r4, #0]
 801cbb8:	f3bf 8f5b 	dmb	ish
 801cbbc:	07db      	lsls	r3, r3, #31
 801cbbe:	d40b      	bmi.n	801cbd8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801cbc0:	4620      	mov	r0, r4
 801cbc2:	f005 fe30 	bl	8022826 <__cxa_guard_acquire>
 801cbc6:	b138      	cbz	r0, 801cbd8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801cbc8:	4620      	mov	r0, r4
 801cbca:	f005 fe38 	bl	802283e <__cxa_guard_release>
 801cbce:	4a05      	ldr	r2, [pc, #20]	@ (801cbe4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801cbd0:	4905      	ldr	r1, [pc, #20]	@ (801cbe8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801cbd2:	4806      	ldr	r0, [pc, #24]	@ (801cbec <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801cbd4:	f005 fe20 	bl	8022818 <__aeabi_atexit>
 801cbd8:	4b04      	ldr	r3, [pc, #16]	@ (801cbec <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801cbda:	662b      	str	r3, [r5, #96]	@ 0x60
 801cbdc:	bd38      	pop	{r3, r4, r5, pc}
 801cbde:	bf00      	nop
 801cbe0:	2402528c 	.word	0x2402528c
 801cbe4:	24000000 	.word	0x24000000
 801cbe8:	0801992b 	.word	0x0801992b
 801cbec:	24000084 	.word	0x24000084

0801cbf0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801cbf0:	b570      	push	{r4, r5, r6, lr}
 801cbf2:	4d0c      	ldr	r5, [pc, #48]	@ (801cc24 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801cbf4:	4606      	mov	r6, r0
 801cbf6:	4c0c      	ldr	r4, [pc, #48]	@ (801cc28 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801cbf8:	782b      	ldrb	r3, [r5, #0]
 801cbfa:	f3bf 8f5b 	dmb	ish
 801cbfe:	f013 0f01 	tst.w	r3, #1
 801cc02:	d10d      	bne.n	801cc20 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801cc04:	4628      	mov	r0, r5
 801cc06:	f005 fe0e 	bl	8022826 <__cxa_guard_acquire>
 801cc0a:	b148      	cbz	r0, 801cc20 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801cc0c:	4b07      	ldr	r3, [pc, #28]	@ (801cc2c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801cc0e:	4628      	mov	r0, r5
 801cc10:	6023      	str	r3, [r4, #0]
 801cc12:	f005 fe14 	bl	802283e <__cxa_guard_release>
 801cc16:	4a06      	ldr	r2, [pc, #24]	@ (801cc30 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801cc18:	4620      	mov	r0, r4
 801cc1a:	4906      	ldr	r1, [pc, #24]	@ (801cc34 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801cc1c:	f005 fdfc 	bl	8022818 <__aeabi_atexit>
 801cc20:	6674      	str	r4, [r6, #100]	@ 0x64
 801cc22:	bd70      	pop	{r4, r5, r6, pc}
 801cc24:	24025290 	.word	0x24025290
 801cc28:	240253e8 	.word	0x240253e8
 801cc2c:	08026dfc 	.word	0x08026dfc
 801cc30:	24000000 	.word	0x24000000
 801cc34:	08019929 	.word	0x08019929

0801cc38 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801cc38:	b510      	push	{r4, lr}
 801cc3a:	4604      	mov	r4, r0
 801cc3c:	f7ff ff98 	bl	801cb70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801cc40:	4620      	mov	r0, r4
 801cc42:	f7ff ffb5 	bl	801cbb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801cc46:	4620      	mov	r0, r4
 801cc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc4c:	f7ff bfd0 	b.w	801cbf0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801cc50 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801cc50:	b570      	push	{r4, r5, r6, lr}
 801cc52:	4d0c      	ldr	r5, [pc, #48]	@ (801cc84 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801cc54:	4606      	mov	r6, r0
 801cc56:	4c0c      	ldr	r4, [pc, #48]	@ (801cc88 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801cc58:	782b      	ldrb	r3, [r5, #0]
 801cc5a:	f3bf 8f5b 	dmb	ish
 801cc5e:	f013 0f01 	tst.w	r3, #1
 801cc62:	d10d      	bne.n	801cc80 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801cc64:	4628      	mov	r0, r5
 801cc66:	f005 fdde 	bl	8022826 <__cxa_guard_acquire>
 801cc6a:	b148      	cbz	r0, 801cc80 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801cc6c:	4b07      	ldr	r3, [pc, #28]	@ (801cc8c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801cc6e:	4628      	mov	r0, r5
 801cc70:	6023      	str	r3, [r4, #0]
 801cc72:	f005 fde4 	bl	802283e <__cxa_guard_release>
 801cc76:	4a06      	ldr	r2, [pc, #24]	@ (801cc90 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801cc78:	4620      	mov	r0, r4
 801cc7a:	4906      	ldr	r1, [pc, #24]	@ (801cc94 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801cc7c:	f005 fdcc 	bl	8022818 <__aeabi_atexit>
 801cc80:	66b4      	str	r4, [r6, #104]	@ 0x68
 801cc82:	bd70      	pop	{r4, r5, r6, pc}
 801cc84:	24025284 	.word	0x24025284
 801cc88:	240252e4 	.word	0x240252e4
 801cc8c:	08026e14 	.word	0x08026e14
 801cc90:	24000000 	.word	0x24000000
 801cc94:	08019927 	.word	0x08019927

0801cc98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc9c:	b087      	sub	sp, #28
 801cc9e:	788d      	ldrb	r5, [r1, #2]
 801cca0:	f891 9000 	ldrb.w	r9, [r1]
 801cca4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801cca8:	9501      	str	r5, [sp, #4]
 801ccaa:	784d      	ldrb	r5, [r1, #1]
 801ccac:	9203      	str	r2, [sp, #12]
 801ccae:	9502      	str	r5, [sp, #8]
 801ccb0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801ccb4:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801ccb8:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801ccbc:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801ccc0:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801ccc4:	fb06 0708 	mla	r7, r6, r8, r0
 801ccc8:	2e00      	cmp	r6, #0
 801ccca:	eb02 0a07 	add.w	sl, r2, r7
 801ccce:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801ccd2:	9d01      	ldr	r5, [sp, #4]
 801ccd4:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801ccd8:	ea45 0509 	orr.w	r5, r5, r9
 801ccdc:	9505      	str	r5, [sp, #20]
 801ccde:	f2c0 80b2 	blt.w	801ce46 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801cce2:	45b3      	cmp	fp, r6
 801cce4:	f340 80af 	ble.w	801ce46 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801cce8:	2800      	cmp	r0, #0
 801ccea:	f2c0 80aa 	blt.w	801ce42 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801ccee:	4580      	cmp	r8, r0
 801ccf0:	f340 80a7 	ble.w	801ce42 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801ccf4:	9a03      	ldr	r2, [sp, #12]
 801ccf6:	5dd7      	ldrb	r7, [r2, r7]
 801ccf8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ccfc:	441f      	add	r7, r3
 801ccfe:	1c42      	adds	r2, r0, #1
 801cd00:	f100 80a4 	bmi.w	801ce4c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801cd04:	4590      	cmp	r8, r2
 801cd06:	f340 80a1 	ble.w	801ce4c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801cd0a:	2c00      	cmp	r4, #0
 801cd0c:	f000 809e 	beq.w	801ce4c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801cd10:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801cd14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd18:	441d      	add	r5, r3
 801cd1a:	3601      	adds	r6, #1
 801cd1c:	f100 809a 	bmi.w	801ce54 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801cd20:	45b3      	cmp	fp, r6
 801cd22:	f340 8097 	ble.w	801ce54 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801cd26:	f1bc 0f00 	cmp.w	ip, #0
 801cd2a:	f000 8093 	beq.w	801ce54 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801cd2e:	2800      	cmp	r0, #0
 801cd30:	f2c0 808e 	blt.w	801ce50 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801cd34:	4580      	cmp	r8, r0
 801cd36:	f340 808b 	ble.w	801ce50 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801cd3a:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801cd3e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cd42:	441e      	add	r6, r3
 801cd44:	3001      	adds	r0, #1
 801cd46:	f100 8088 	bmi.w	801ce5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801cd4a:	4580      	cmp	r8, r0
 801cd4c:	f340 8085 	ble.w	801ce5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801cd50:	2c00      	cmp	r4, #0
 801cd52:	f000 8082 	beq.w	801ce5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801cd56:	44d0      	add	r8, sl
 801cd58:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cd5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd60:	4413      	add	r3, r2
 801cd62:	b2a4      	uxth	r4, r4
 801cd64:	f895 a000 	ldrb.w	sl, [r5]
 801cd68:	fa1f fc8c 	uxth.w	ip, ip
 801cd6c:	fb04 fb0c 	mul.w	fp, r4, ip
 801cd70:	0124      	lsls	r4, r4, #4
 801cd72:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801cd76:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801cd7a:	eba4 040b 	sub.w	r4, r4, fp
 801cd7e:	fa1f f08c 	uxth.w	r0, ip
 801cd82:	b2a2      	uxth	r2, r4
 801cd84:	783c      	ldrb	r4, [r7, #0]
 801cd86:	eba8 0800 	sub.w	r8, r8, r0
 801cd8a:	fa1f fc8e 	uxth.w	ip, lr
 801cd8e:	fb02 fa0a 	mul.w	sl, r2, sl
 801cd92:	ea6f 0e0e 	mvn.w	lr, lr
 801cd96:	fa1f f888 	uxth.w	r8, r8
 801cd9a:	fa5f fe8e 	uxtb.w	lr, lr
 801cd9e:	fb08 aa04 	mla	sl, r8, r4, sl
 801cda2:	7834      	ldrb	r4, [r6, #0]
 801cda4:	fb19 f90e 	smulbb	r9, r9, lr
 801cda8:	fb00 aa04 	mla	sl, r0, r4, sl
 801cdac:	781c      	ldrb	r4, [r3, #0]
 801cdae:	fb0b a404 	mla	r4, fp, r4, sl
 801cdb2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801cdb6:	fb04 990c 	mla	r9, r4, ip, r9
 801cdba:	fa1f f989 	uxth.w	r9, r9
 801cdbe:	f109 0401 	add.w	r4, r9, #1
 801cdc2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801cdc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cdca:	f881 9000 	strb.w	r9, [r1]
 801cdce:	f895 9001 	ldrb.w	r9, [r5, #1]
 801cdd2:	787c      	ldrb	r4, [r7, #1]
 801cdd4:	fb02 f909 	mul.w	r9, r2, r9
 801cdd8:	fb08 9904 	mla	r9, r8, r4, r9
 801cddc:	7874      	ldrb	r4, [r6, #1]
 801cdde:	fb00 9904 	mla	r9, r0, r4, r9
 801cde2:	785c      	ldrb	r4, [r3, #1]
 801cde4:	fb0b 9404 	mla	r4, fp, r4, r9
 801cde8:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801cdec:	9c02      	ldr	r4, [sp, #8]
 801cdee:	fb14 f90e 	smulbb	r9, r4, lr
 801cdf2:	fb0a 940c 	mla	r4, sl, ip, r9
 801cdf6:	b2a4      	uxth	r4, r4
 801cdf8:	f104 0901 	add.w	r9, r4, #1
 801cdfc:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801ce00:	1224      	asrs	r4, r4, #8
 801ce02:	704c      	strb	r4, [r1, #1]
 801ce04:	78ad      	ldrb	r5, [r5, #2]
 801ce06:	78bc      	ldrb	r4, [r7, #2]
 801ce08:	436a      	muls	r2, r5
 801ce0a:	789b      	ldrb	r3, [r3, #2]
 801ce0c:	fb08 2204 	mla	r2, r8, r4, r2
 801ce10:	78b4      	ldrb	r4, [r6, #2]
 801ce12:	fb00 2004 	mla	r0, r0, r4, r2
 801ce16:	fb0b 0b03 	mla	fp, fp, r3, r0
 801ce1a:	9b01      	ldr	r3, [sp, #4]
 801ce1c:	fb13 fe0e 	smulbb	lr, r3, lr
 801ce20:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801ce24:	fb0b ec0c 	mla	ip, fp, ip, lr
 801ce28:	fa1f fc8c 	uxth.w	ip, ip
 801ce2c:	f10c 0e01 	add.w	lr, ip, #1
 801ce30:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ce34:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ce38:	f881 c002 	strb.w	ip, [r1, #2]
 801ce3c:	b007      	add	sp, #28
 801ce3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce42:	af05      	add	r7, sp, #20
 801ce44:	e75b      	b.n	801ccfe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801ce46:	ad05      	add	r5, sp, #20
 801ce48:	462f      	mov	r7, r5
 801ce4a:	e766      	b.n	801cd1a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ce4c:	ad05      	add	r5, sp, #20
 801ce4e:	e764      	b.n	801cd1a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ce50:	ae05      	add	r6, sp, #20
 801ce52:	e777      	b.n	801cd44 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801ce54:	ab05      	add	r3, sp, #20
 801ce56:	461e      	mov	r6, r3
 801ce58:	e783      	b.n	801cd62 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801ce5a:	ab05      	add	r3, sp, #20
 801ce5c:	e781      	b.n	801cd62 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801ce5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce62:	b093      	sub	sp, #76	@ 0x4c
 801ce64:	9210      	str	r2, [sp, #64]	@ 0x40
 801ce66:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ce6a:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801ce6e:	9011      	str	r0, [sp, #68]	@ 0x44
 801ce70:	930e      	str	r3, [sp, #56]	@ 0x38
 801ce72:	6850      	ldr	r0, [r2, #4]
 801ce74:	910d      	str	r1, [sp, #52]	@ 0x34
 801ce76:	6812      	ldr	r2, [r2, #0]
 801ce78:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801ce7c:	fb00 1303 	mla	r3, r0, r3, r1
 801ce80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce84:	18d3      	adds	r3, r2, r3
 801ce86:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce8e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce90:	685c      	ldr	r4, [r3, #4]
 801ce92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce94:	3404      	adds	r4, #4
 801ce96:	43db      	mvns	r3, r3
 801ce98:	b2db      	uxtb	r3, r3
 801ce9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ce9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	dc03      	bgt.n	801ceaa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801cea2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	f340 8250 	ble.w	801d34a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801ceaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ceac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ceb0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ceb4:	1e48      	subs	r0, r1, #1
 801ceb6:	1e55      	subs	r5, r2, #1
 801ceb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	f340 80ee 	ble.w	801d09c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801cec0:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801cec2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cec4:	1436      	asrs	r6, r6, #16
 801cec6:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ceca:	d406      	bmi.n	801ceda <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cecc:	4286      	cmp	r6, r0
 801cece:	da04      	bge.n	801ceda <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	db02      	blt.n	801ceda <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ced4:	42ab      	cmp	r3, r5
 801ced6:	f2c0 80e2 	blt.w	801d09e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ceda:	3601      	adds	r6, #1
 801cedc:	f100 80cf 	bmi.w	801d07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cee0:	42b1      	cmp	r1, r6
 801cee2:	f2c0 80cc 	blt.w	801d07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cee6:	3301      	adds	r3, #1
 801cee8:	f100 80c9 	bmi.w	801d07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ceec:	429a      	cmp	r2, r3
 801ceee:	f2c0 80c6 	blt.w	801d07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cef2:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801cef6:	f1bb 0f00 	cmp.w	fp, #0
 801cefa:	f340 80f1 	ble.w	801d0e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801cefe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cf00:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801cf02:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801cf04:	141d      	asrs	r5, r3, #16
 801cf06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cf08:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cf0c:	68c7      	ldr	r7, [r0, #12]
 801cf0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cf10:	1418      	asrs	r0, r3, #16
 801cf12:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801cf16:	6892      	ldr	r2, [r2, #8]
 801cf18:	f100 8137 	bmi.w	801d18a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cf1c:	f102 3cff 	add.w	ip, r2, #4294967295
 801cf20:	4560      	cmp	r0, ip
 801cf22:	f280 8132 	bge.w	801d18a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cf26:	2d00      	cmp	r5, #0
 801cf28:	f2c0 812f 	blt.w	801d18a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cf2c:	f107 3cff 	add.w	ip, r7, #4294967295
 801cf30:	4565      	cmp	r5, ip
 801cf32:	f280 812a 	bge.w	801d18a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cf36:	b212      	sxth	r2, r2
 801cf38:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801cf3a:	fb05 0002 	mla	r0, r5, r2, r0
 801cf3e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cf40:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cf44:	4405      	add	r5, r0
 801cf46:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cf4a:	eb04 0e0c 	add.w	lr, r4, ip
 801cf4e:	f1b8 0f00 	cmp.w	r8, #0
 801cf52:	f000 810c 	beq.w	801d16e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801cf56:	786f      	ldrb	r7, [r5, #1]
 801cf58:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cf5c:	4427      	add	r7, r4
 801cf5e:	2900      	cmp	r1, #0
 801cf60:	f000 810d 	beq.w	801d17e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801cf64:	18a8      	adds	r0, r5, r2
 801cf66:	5caa      	ldrb	r2, [r5, r2]
 801cf68:	7840      	ldrb	r0, [r0, #1]
 801cf6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cf72:	4422      	add	r2, r4
 801cf74:	4420      	add	r0, r4
 801cf76:	fa1f f388 	uxth.w	r3, r8
 801cf7a:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801cf7e:	b289      	uxth	r1, r1
 801cf80:	f897 c000 	ldrb.w	ip, [r7]
 801cf84:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801cf88:	fb03 f901 	mul.w	r9, r3, r1
 801cf8c:	011b      	lsls	r3, r3, #4
 801cf8e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cf92:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801cf96:	eba3 0309 	sub.w	r3, r3, r9
 801cf9a:	b289      	uxth	r1, r1
 801cf9c:	b29b      	uxth	r3, r3
 801cf9e:	eba8 0801 	sub.w	r8, r8, r1
 801cfa2:	fb03 fc0c 	mul.w	ip, r3, ip
 801cfa6:	fa1f f888 	uxth.w	r8, r8
 801cfaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cfac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cfae:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cfb2:	f892 a000 	ldrb.w	sl, [r2]
 801cfb6:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cfba:	f890 a000 	ldrb.w	sl, [r0]
 801cfbe:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cfc2:	f896 a000 	ldrb.w	sl, [r6]
 801cfc6:	fb1a fa03 	smulbb	sl, sl, r3
 801cfca:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cfce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfd0:	fb0c ac05 	mla	ip, ip, r5, sl
 801cfd4:	fa1f fc8c 	uxth.w	ip, ip
 801cfd8:	f10c 0a01 	add.w	sl, ip, #1
 801cfdc:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801cfe0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cfe4:	f886 a000 	strb.w	sl, [r6]
 801cfe8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801cfec:	f89e a001 	ldrb.w	sl, [lr, #1]
 801cff0:	fb03 fc0c 	mul.w	ip, r3, ip
 801cff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cff6:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cffa:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cffe:	fb01 cc0a 	mla	ip, r1, sl, ip
 801d002:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d006:	fb09 cc0a 	mla	ip, r9, sl, ip
 801d00a:	f896 a001 	ldrb.w	sl, [r6, #1]
 801d00e:	fb1a fa03 	smulbb	sl, sl, r3
 801d012:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d018:	fb0c ac05 	mla	ip, ip, r5, sl
 801d01c:	fa1f fc8c 	uxth.w	ip, ip
 801d020:	f10c 0a01 	add.w	sl, ip, #1
 801d024:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801d028:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d02c:	f886 c001 	strb.w	ip, [r6, #1]
 801d030:	78bf      	ldrb	r7, [r7, #2]
 801d032:	f89e c002 	ldrb.w	ip, [lr, #2]
 801d036:	437b      	muls	r3, r7
 801d038:	fb08 330c 	mla	r3, r8, ip, r3
 801d03c:	f892 c002 	ldrb.w	ip, [r2, #2]
 801d040:	7882      	ldrb	r2, [r0, #2]
 801d042:	fb01 310c 	mla	r1, r1, ip, r3
 801d046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d048:	fb09 1902 	mla	r9, r9, r2, r1
 801d04c:	78b1      	ldrb	r1, [r6, #2]
 801d04e:	fb11 f103 	smulbb	r1, r1, r3
 801d052:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d056:	fb09 1505 	mla	r5, r9, r5, r1
 801d05a:	b2ad      	uxth	r5, r5
 801d05c:	1c6b      	adds	r3, r5, #1
 801d05e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d062:	122d      	asrs	r5, r5, #8
 801d064:	70b5      	strb	r5, [r6, #2]
 801d066:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d068:	3603      	adds	r6, #3
 801d06a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d06c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d070:	4413      	add	r3, r2
 801d072:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d074:	931d      	str	r3, [sp, #116]	@ 0x74
 801d076:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d078:	4413      	add	r3, r2
 801d07a:	931e      	str	r3, [sp, #120]	@ 0x78
 801d07c:	e73b      	b.n	801cef6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d07e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d080:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801d082:	4433      	add	r3, r6
 801d084:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d086:	931d      	str	r3, [sp, #116]	@ 0x74
 801d088:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d08a:	4433      	add	r3, r6
 801d08c:	931e      	str	r3, [sp, #120]	@ 0x78
 801d08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d090:	3b01      	subs	r3, #1
 801d092:	9309      	str	r3, [sp, #36]	@ 0x24
 801d094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d096:	3303      	adds	r3, #3
 801d098:	930a      	str	r3, [sp, #40]	@ 0x28
 801d09a:	e70d      	b.n	801ceb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d09c:	d028      	beq.n	801d0f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801d09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0a0:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801d0a2:	3b01      	subs	r3, #1
 801d0a4:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d0a6:	fb00 5003 	mla	r0, r0, r3, r5
 801d0aa:	1400      	asrs	r0, r0, #16
 801d0ac:	f53f af21 	bmi.w	801cef2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d0b0:	3901      	subs	r1, #1
 801d0b2:	4288      	cmp	r0, r1
 801d0b4:	f6bf af1d 	bge.w	801cef2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d0b8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801d0ba:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d0bc:	fb01 0303 	mla	r3, r1, r3, r0
 801d0c0:	141b      	asrs	r3, r3, #16
 801d0c2:	f53f af16 	bmi.w	801cef2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d0c6:	3a01      	subs	r2, #1
 801d0c8:	4293      	cmp	r3, r2
 801d0ca:	f6bf af12 	bge.w	801cef2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d0ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801d0d4:	1cdf      	adds	r7, r3, #3
 801d0d6:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801d0da:	f1b9 0f00 	cmp.w	r9, #0
 801d0de:	dc73      	bgt.n	801d1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801d0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d0e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0ec:	441a      	add	r2, r3
 801d0ee:	920a      	str	r2, [sp, #40]	@ 0x28
 801d0f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	f340 8129 	ble.w	801d34a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801d0f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d0fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d0fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d102:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d106:	eef0 6a62 	vmov.f32	s13, s5
 801d10a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d10e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d112:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d116:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801d11a:	eef0 6a43 	vmov.f32	s13, s6
 801d11e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d122:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801d126:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d12a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d12e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d132:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d136:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d13a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d13e:	ee12 2a90 	vmov	r2, s5
 801d142:	eef0 2a47 	vmov.f32	s5, s14
 801d146:	fb92 f3f3 	sdiv	r3, r2, r3
 801d14a:	ee13 2a10 	vmov	r2, s6
 801d14e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d150:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d152:	eeb0 3a67 	vmov.f32	s6, s15
 801d156:	fb92 f3f3 	sdiv	r3, r2, r3
 801d15a:	9320      	str	r3, [sp, #128]	@ 0x80
 801d15c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d15e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d160:	3b01      	subs	r3, #1
 801d162:	930d      	str	r3, [sp, #52]	@ 0x34
 801d164:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d166:	bf08      	it	eq
 801d168:	4613      	moveq	r3, r2
 801d16a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d16c:	e696      	b.n	801ce9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d16e:	b149      	cbz	r1, 801d184 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d170:	5caa      	ldrb	r2, [r5, r2]
 801d172:	4670      	mov	r0, lr
 801d174:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d178:	4422      	add	r2, r4
 801d17a:	4677      	mov	r7, lr
 801d17c:	e6fb      	b.n	801cf76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d17e:	4670      	mov	r0, lr
 801d180:	4672      	mov	r2, lr
 801d182:	e6f8      	b.n	801cf76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d184:	4670      	mov	r0, lr
 801d186:	4672      	mov	r2, lr
 801d188:	e7f7      	b.n	801d17a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d18a:	f110 0c01 	adds.w	ip, r0, #1
 801d18e:	f53f af6a 	bmi.w	801d066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d192:	4562      	cmp	r2, ip
 801d194:	f6ff af67 	blt.w	801d066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d198:	f115 0c01 	adds.w	ip, r5, #1
 801d19c:	f53f af63 	bmi.w	801d066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d1a0:	4567      	cmp	r7, ip
 801d1a2:	f6ff af60 	blt.w	801d066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d1a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d1a8:	b23f      	sxth	r7, r7
 801d1aa:	b212      	sxth	r2, r2
 801d1ac:	9002      	str	r0, [sp, #8]
 801d1ae:	9701      	str	r7, [sp, #4]
 801d1b0:	9200      	str	r2, [sp, #0]
 801d1b2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d1b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d1b6:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801d1ba:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801d1be:	4623      	mov	r3, r4
 801d1c0:	4631      	mov	r1, r6
 801d1c2:	f7ff fd69 	bl	801cc98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801d1c6:	e74e      	b.n	801d066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d1c8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d1ca:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d1cc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d1d0:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d1d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d1d4:	1400      	asrs	r0, r0, #16
 801d1d6:	142d      	asrs	r5, r5, #16
 801d1d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d1da:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d1de:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d1e2:	fb02 5000 	mla	r0, r2, r0, r5
 801d1e6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d1e8:	f815 e000 	ldrb.w	lr, [r5, r0]
 801d1ec:	eb05 0c00 	add.w	ip, r5, r0
 801d1f0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d1f4:	eb04 060e 	add.w	r6, r4, lr
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	f000 8097 	beq.w	801d32c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801d1fe:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d206:	4425      	add	r5, r4
 801d208:	2900      	cmp	r1, #0
 801d20a:	f000 8098 	beq.w	801d33e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801d20e:	eb0c 0002 	add.w	r0, ip, r2
 801d212:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d216:	7840      	ldrb	r0, [r0, #1]
 801d218:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d21c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d220:	4422      	add	r2, r4
 801d222:	4420      	add	r0, r4
 801d224:	b29b      	uxth	r3, r3
 801d226:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801d22a:	b289      	uxth	r1, r1
 801d22c:	f895 e000 	ldrb.w	lr, [r5]
 801d230:	3703      	adds	r7, #3
 801d232:	f109 39ff 	add.w	r9, r9, #4294967295
 801d236:	fb03 f801 	mul.w	r8, r3, r1
 801d23a:	011b      	lsls	r3, r3, #4
 801d23c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d240:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801d244:	eba3 0308 	sub.w	r3, r3, r8
 801d248:	b289      	uxth	r1, r1
 801d24a:	b29b      	uxth	r3, r3
 801d24c:	ebac 0c01 	sub.w	ip, ip, r1
 801d250:	fb03 fe0e 	mul.w	lr, r3, lr
 801d254:	fa1f fc8c 	uxth.w	ip, ip
 801d258:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d25a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d25c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d260:	f892 b000 	ldrb.w	fp, [r2]
 801d264:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d268:	f890 b000 	ldrb.w	fp, [r0]
 801d26c:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d270:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801d274:	fb1b fb03 	smulbb	fp, fp, r3
 801d278:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d27e:	fb0e be0a 	mla	lr, lr, sl, fp
 801d282:	fa1f fe8e 	uxth.w	lr, lr
 801d286:	f10e 0b01 	add.w	fp, lr, #1
 801d28a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d28e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d292:	f807 ec06 	strb.w	lr, [r7, #-6]
 801d296:	f895 e001 	ldrb.w	lr, [r5, #1]
 801d29a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d29e:	fb03 fe0e 	mul.w	lr, r3, lr
 801d2a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2a4:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d2a8:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d2ac:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d2b0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d2b4:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d2b8:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801d2bc:	fb1b fb03 	smulbb	fp, fp, r3
 801d2c0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d2c6:	fb0e be0a 	mla	lr, lr, sl, fp
 801d2ca:	fa1f fe8e 	uxth.w	lr, lr
 801d2ce:	f10e 0b01 	add.w	fp, lr, #1
 801d2d2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d2d6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d2da:	f807 ec05 	strb.w	lr, [r7, #-5]
 801d2de:	78ad      	ldrb	r5, [r5, #2]
 801d2e0:	78b6      	ldrb	r6, [r6, #2]
 801d2e2:	436b      	muls	r3, r5
 801d2e4:	7895      	ldrb	r5, [r2, #2]
 801d2e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d2e8:	fb0c 3306 	mla	r3, ip, r6, r3
 801d2ec:	fb01 3305 	mla	r3, r1, r5, r3
 801d2f0:	7885      	ldrb	r5, [r0, #2]
 801d2f2:	fb08 3805 	mla	r8, r8, r5, r3
 801d2f6:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801d2fa:	fb13 f302 	smulbb	r3, r3, r2
 801d2fe:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d302:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d304:	fb08 380a 	mla	r8, r8, sl, r3
 801d308:	fa1f f888 	uxth.w	r8, r8
 801d30c:	f108 0301 	add.w	r3, r8, #1
 801d310:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801d314:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d316:	4413      	add	r3, r2
 801d318:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d31a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d31e:	931d      	str	r3, [sp, #116]	@ 0x74
 801d320:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d322:	f807 8c04 	strb.w	r8, [r7, #-4]
 801d326:	4413      	add	r3, r2
 801d328:	931e      	str	r3, [sp, #120]	@ 0x78
 801d32a:	e6d6      	b.n	801d0da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d32c:	b151      	cbz	r1, 801d344 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801d32e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d332:	4630      	mov	r0, r6
 801d334:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d338:	4422      	add	r2, r4
 801d33a:	4635      	mov	r5, r6
 801d33c:	e772      	b.n	801d224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d33e:	4630      	mov	r0, r6
 801d340:	4632      	mov	r2, r6
 801d342:	e76f      	b.n	801d224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d344:	4630      	mov	r0, r6
 801d346:	4632      	mov	r2, r6
 801d348:	e7f7      	b.n	801d33a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d34a:	b013      	add	sp, #76	@ 0x4c
 801d34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d350 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801d350:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d354:	784c      	ldrb	r4, [r1, #1]
 801d356:	f891 a002 	ldrb.w	sl, [r1, #2]
 801d35a:	0224      	lsls	r4, r4, #8
 801d35c:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801d360:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801d364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d368:	f891 a000 	ldrb.w	sl, [r1]
 801d36c:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801d370:	ea44 040a 	orr.w	r4, r4, sl
 801d374:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801d378:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801d37c:	9401      	str	r4, [sp, #4]
 801d37e:	fb05 c70e 	mla	r7, r5, lr, ip
 801d382:	2d00      	cmp	r5, #0
 801d384:	eb02 0807 	add.w	r8, r2, r7
 801d388:	db72      	blt.n	801d470 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d38a:	45a9      	cmp	r9, r5
 801d38c:	dd70      	ble.n	801d470 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d38e:	f1bc 0f00 	cmp.w	ip, #0
 801d392:	db6b      	blt.n	801d46c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d394:	45e6      	cmp	lr, ip
 801d396:	dd69      	ble.n	801d46c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d398:	5dd7      	ldrb	r7, [r2, r7]
 801d39a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d39e:	441f      	add	r7, r3
 801d3a0:	f11c 0201 	adds.w	r2, ip, #1
 801d3a4:	d467      	bmi.n	801d476 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d3a6:	4596      	cmp	lr, r2
 801d3a8:	dd65      	ble.n	801d476 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d3aa:	2800      	cmp	r0, #0
 801d3ac:	d063      	beq.n	801d476 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d3ae:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d3b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d3b6:	441c      	add	r4, r3
 801d3b8:	3501      	adds	r5, #1
 801d3ba:	d460      	bmi.n	801d47e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d3bc:	45a9      	cmp	r9, r5
 801d3be:	dd5e      	ble.n	801d47e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d3c0:	2e00      	cmp	r6, #0
 801d3c2:	d05c      	beq.n	801d47e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d3c4:	f1bc 0f00 	cmp.w	ip, #0
 801d3c8:	db57      	blt.n	801d47a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d3ca:	45e6      	cmp	lr, ip
 801d3cc:	dd55      	ble.n	801d47a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d3ce:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d3d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d3d6:	441d      	add	r5, r3
 801d3d8:	f11c 0201 	adds.w	r2, ip, #1
 801d3dc:	d452      	bmi.n	801d484 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d3de:	4596      	cmp	lr, r2
 801d3e0:	dd50      	ble.n	801d484 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d3e2:	2800      	cmp	r0, #0
 801d3e4:	d04e      	beq.n	801d484 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d3e6:	44c6      	add	lr, r8
 801d3e8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d3ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3f0:	4413      	add	r3, r2
 801d3f2:	b280      	uxth	r0, r0
 801d3f4:	f897 8000 	ldrb.w	r8, [r7]
 801d3f8:	b2b2      	uxth	r2, r6
 801d3fa:	fb00 f602 	mul.w	r6, r0, r2
 801d3fe:	0100      	lsls	r0, r0, #4
 801d400:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d404:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801d408:	1b80      	subs	r0, r0, r6
 801d40a:	fa1f fc82 	uxth.w	ip, r2
 801d40e:	b282      	uxth	r2, r0
 801d410:	7820      	ldrb	r0, [r4, #0]
 801d412:	ebae 0e0c 	sub.w	lr, lr, ip
 801d416:	4350      	muls	r0, r2
 801d418:	fa1f fe8e 	uxth.w	lr, lr
 801d41c:	fb0e 0808 	mla	r8, lr, r8, r0
 801d420:	7828      	ldrb	r0, [r5, #0]
 801d422:	fb0c 8800 	mla	r8, ip, r0, r8
 801d426:	7818      	ldrb	r0, [r3, #0]
 801d428:	fb06 8000 	mla	r0, r6, r0, r8
 801d42c:	1200      	asrs	r0, r0, #8
 801d42e:	7008      	strb	r0, [r1, #0]
 801d430:	7860      	ldrb	r0, [r4, #1]
 801d432:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d436:	4350      	muls	r0, r2
 801d438:	fb0e 0808 	mla	r8, lr, r8, r0
 801d43c:	7868      	ldrb	r0, [r5, #1]
 801d43e:	fb0c 8800 	mla	r8, ip, r0, r8
 801d442:	7858      	ldrb	r0, [r3, #1]
 801d444:	fb06 8000 	mla	r0, r6, r0, r8
 801d448:	1200      	asrs	r0, r0, #8
 801d44a:	7048      	strb	r0, [r1, #1]
 801d44c:	78a0      	ldrb	r0, [r4, #2]
 801d44e:	78bf      	ldrb	r7, [r7, #2]
 801d450:	4350      	muls	r0, r2
 801d452:	78aa      	ldrb	r2, [r5, #2]
 801d454:	fb0e 0007 	mla	r0, lr, r7, r0
 801d458:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d45c:	789a      	ldrb	r2, [r3, #2]
 801d45e:	fb06 c202 	mla	r2, r6, r2, ip
 801d462:	1212      	asrs	r2, r2, #8
 801d464:	708a      	strb	r2, [r1, #2]
 801d466:	b002      	add	sp, #8
 801d468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d46c:	af01      	add	r7, sp, #4
 801d46e:	e797      	b.n	801d3a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801d470:	ac01      	add	r4, sp, #4
 801d472:	4627      	mov	r7, r4
 801d474:	e7a0      	b.n	801d3b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d476:	ac01      	add	r4, sp, #4
 801d478:	e79e      	b.n	801d3b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d47a:	ad01      	add	r5, sp, #4
 801d47c:	e7ac      	b.n	801d3d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801d47e:	ab01      	add	r3, sp, #4
 801d480:	461d      	mov	r5, r3
 801d482:	e7b6      	b.n	801d3f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801d484:	ab01      	add	r3, sp, #4
 801d486:	e7b4      	b.n	801d3f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801d488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d48c:	b08d      	sub	sp, #52	@ 0x34
 801d48e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d492:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801d496:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d498:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d49a:	9306      	str	r3, [sp, #24]
 801d49c:	6850      	ldr	r0, [r2, #4]
 801d49e:	6812      	ldr	r2, [r2, #0]
 801d4a0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d4a2:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801d4a6:	fb00 1303 	mla	r3, r0, r3, r1
 801d4aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4ae:	18d3      	adds	r3, r2, r3
 801d4b0:	9307      	str	r3, [sp, #28]
 801d4b2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	9308      	str	r3, [sp, #32]
 801d4b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d4ba:	685d      	ldr	r5, [r3, #4]
 801d4bc:	3504      	adds	r5, #4
 801d4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	dc03      	bgt.n	801d4cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	f340 81e6 	ble.w	801d898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d4cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d4ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d4d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d4d6:	1e48      	subs	r0, r1, #1
 801d4d8:	1e56      	subs	r6, r2, #1
 801d4da:	9b06      	ldr	r3, [sp, #24]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	f340 80bd 	ble.w	801d65c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d4e2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d4e4:	1427      	asrs	r7, r4, #16
 801d4e6:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d4ea:	d406      	bmi.n	801d4fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4ec:	4287      	cmp	r7, r0
 801d4ee:	da04      	bge.n	801d4fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	db02      	blt.n	801d4fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4f4:	42b3      	cmp	r3, r6
 801d4f6:	f2c0 80b2 	blt.w	801d65e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801d4fa:	3701      	adds	r7, #1
 801d4fc:	f100 80a1 	bmi.w	801d642 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d500:	42b9      	cmp	r1, r7
 801d502:	f2c0 809e 	blt.w	801d642 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d506:	3301      	adds	r3, #1
 801d508:	f100 809b 	bmi.w	801d642 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d50c:	429a      	cmp	r2, r3
 801d50e:	f2c0 8098 	blt.w	801d642 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d512:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801d516:	f1bb 0f00 	cmp.w	fp, #0
 801d51a:	f340 80bf 	ble.w	801d69c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d51e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d520:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d522:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d524:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d528:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801d52c:	1420      	asrs	r0, r4, #16
 801d52e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d530:	ea4f 4723 	mov.w	r7, r3, asr #16
 801d534:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d538:	6892      	ldr	r2, [r2, #8]
 801d53a:	f100 8103 	bmi.w	801d744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d53e:	f102 3eff 	add.w	lr, r2, #4294967295
 801d542:	4570      	cmp	r0, lr
 801d544:	f280 80fe 	bge.w	801d744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d548:	2f00      	cmp	r7, #0
 801d54a:	f2c0 80fb 	blt.w	801d744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d54e:	f10c 3eff 	add.w	lr, ip, #4294967295
 801d552:	4577      	cmp	r7, lr
 801d554:	f280 80f6 	bge.w	801d744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d558:	b212      	sxth	r2, r2
 801d55a:	fb07 0002 	mla	r0, r7, r2, r0
 801d55e:	9f08      	ldr	r7, [sp, #32]
 801d560:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d564:	eb07 0e00 	add.w	lr, r7, r0
 801d568:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d56c:	eb05 0c08 	add.w	ip, r5, r8
 801d570:	2b00      	cmp	r3, #0
 801d572:	f000 80d8 	beq.w	801d726 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d576:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801d57a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d57e:	442f      	add	r7, r5
 801d580:	2900      	cmp	r1, #0
 801d582:	f000 80d9 	beq.w	801d738 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d586:	eb0e 0002 	add.w	r0, lr, r2
 801d58a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d58e:	7840      	ldrb	r0, [r0, #1]
 801d590:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d594:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d598:	442a      	add	r2, r5
 801d59a:	4428      	add	r0, r5
 801d59c:	b29b      	uxth	r3, r3
 801d59e:	f815 a008 	ldrb.w	sl, [r5, r8]
 801d5a2:	b289      	uxth	r1, r1
 801d5a4:	f897 8000 	ldrb.w	r8, [r7]
 801d5a8:	fb03 f901 	mul.w	r9, r3, r1
 801d5ac:	011b      	lsls	r3, r3, #4
 801d5ae:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d5b2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801d5b6:	eba3 0309 	sub.w	r3, r3, r9
 801d5ba:	b289      	uxth	r1, r1
 801d5bc:	b29b      	uxth	r3, r3
 801d5be:	ebae 0e01 	sub.w	lr, lr, r1
 801d5c2:	fb03 f808 	mul.w	r8, r3, r8
 801d5c6:	fa1f fe8e 	uxth.w	lr, lr
 801d5ca:	fb0e 880a 	mla	r8, lr, sl, r8
 801d5ce:	f892 a000 	ldrb.w	sl, [r2]
 801d5d2:	fb01 880a 	mla	r8, r1, sl, r8
 801d5d6:	f890 a000 	ldrb.w	sl, [r0]
 801d5da:	fb09 880a 	mla	r8, r9, sl, r8
 801d5de:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d5e2:	f886 8000 	strb.w	r8, [r6]
 801d5e6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d5ea:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d5ee:	fb03 f808 	mul.w	r8, r3, r8
 801d5f2:	fb0e 880a 	mla	r8, lr, sl, r8
 801d5f6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d5fa:	fb01 880a 	mla	r8, r1, sl, r8
 801d5fe:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d602:	fb09 880a 	mla	r8, r9, sl, r8
 801d606:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d60a:	f886 8001 	strb.w	r8, [r6, #1]
 801d60e:	78bf      	ldrb	r7, [r7, #2]
 801d610:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d614:	437b      	muls	r3, r7
 801d616:	7892      	ldrb	r2, [r2, #2]
 801d618:	fb0e 330c 	mla	r3, lr, ip, r3
 801d61c:	fb01 3102 	mla	r1, r1, r2, r3
 801d620:	7882      	ldrb	r2, [r0, #2]
 801d622:	fb09 1902 	mla	r9, r9, r2, r1
 801d626:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d62a:	f886 9002 	strb.w	r9, [r6, #2]
 801d62e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d630:	3603      	adds	r6, #3
 801d632:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d634:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d638:	441c      	add	r4, r3
 801d63a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d63c:	4413      	add	r3, r2
 801d63e:	9318      	str	r3, [sp, #96]	@ 0x60
 801d640:	e769      	b.n	801d516 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d642:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d644:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801d646:	441c      	add	r4, r3
 801d648:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d64a:	443b      	add	r3, r7
 801d64c:	9318      	str	r3, [sp, #96]	@ 0x60
 801d64e:	9b06      	ldr	r3, [sp, #24]
 801d650:	3b01      	subs	r3, #1
 801d652:	9306      	str	r3, [sp, #24]
 801d654:	9b07      	ldr	r3, [sp, #28]
 801d656:	3303      	adds	r3, #3
 801d658:	9307      	str	r3, [sp, #28]
 801d65a:	e73e      	b.n	801d4da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d65c:	d026      	beq.n	801d6ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d65e:	9b06      	ldr	r3, [sp, #24]
 801d660:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d662:	3b01      	subs	r3, #1
 801d664:	fb00 4003 	mla	r0, r0, r3, r4
 801d668:	1400      	asrs	r0, r0, #16
 801d66a:	f53f af52 	bmi.w	801d512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d66e:	3901      	subs	r1, #1
 801d670:	4288      	cmp	r0, r1
 801d672:	f6bf af4e 	bge.w	801d512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d676:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d678:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d67a:	fb01 0303 	mla	r3, r1, r3, r0
 801d67e:	141b      	asrs	r3, r3, #16
 801d680:	f53f af47 	bmi.w	801d512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d684:	3a01      	subs	r2, #1
 801d686:	4293      	cmp	r3, r2
 801d688:	f6bf af43 	bge.w	801d512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d68c:	9b07      	ldr	r3, [sp, #28]
 801d68e:	f8dd a018 	ldr.w	sl, [sp, #24]
 801d692:	f103 0803 	add.w	r8, r3, #3
 801d696:	f1ba 0f00 	cmp.w	sl, #0
 801d69a:	dc71      	bgt.n	801d780 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d69c:	9b06      	ldr	r3, [sp, #24]
 801d69e:	9a07      	ldr	r2, [sp, #28]
 801d6a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6a8:	441a      	add	r2, r3
 801d6aa:	9207      	str	r2, [sp, #28]
 801d6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	f340 80f2 	ble.w	801d898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d6b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d6ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6be:	eeb0 6a62 	vmov.f32	s12, s5
 801d6c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d6c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6ce:	ee16 4a10 	vmov	r4, s12
 801d6d2:	eeb0 6a43 	vmov.f32	s12, s6
 801d6d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6da:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801d6de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6f6:	ee12 2a90 	vmov	r2, s5
 801d6fa:	eef0 2a47 	vmov.f32	s5, s14
 801d6fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801d702:	ee13 2a10 	vmov	r2, s6
 801d706:	9319      	str	r3, [sp, #100]	@ 0x64
 801d708:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d70a:	eeb0 3a67 	vmov.f32	s6, s15
 801d70e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d712:	931a      	str	r3, [sp, #104]	@ 0x68
 801d714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d716:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d718:	3b01      	subs	r3, #1
 801d71a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d71c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d71e:	bf08      	it	eq
 801d720:	4613      	moveq	r3, r2
 801d722:	9306      	str	r3, [sp, #24]
 801d724:	e6cb      	b.n	801d4be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d726:	b151      	cbz	r1, 801d73e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d728:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d72c:	4660      	mov	r0, ip
 801d72e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d732:	442a      	add	r2, r5
 801d734:	4667      	mov	r7, ip
 801d736:	e731      	b.n	801d59c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d738:	4660      	mov	r0, ip
 801d73a:	4662      	mov	r2, ip
 801d73c:	e72e      	b.n	801d59c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d73e:	4660      	mov	r0, ip
 801d740:	4662      	mov	r2, ip
 801d742:	e7f7      	b.n	801d734 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801d744:	f110 0e01 	adds.w	lr, r0, #1
 801d748:	f53f af71 	bmi.w	801d62e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d74c:	4572      	cmp	r2, lr
 801d74e:	f6ff af6e 	blt.w	801d62e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d752:	f117 0e01 	adds.w	lr, r7, #1
 801d756:	f53f af6a 	bmi.w	801d62e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d75a:	45f4      	cmp	ip, lr
 801d75c:	f6ff af67 	blt.w	801d62e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d760:	b212      	sxth	r2, r2
 801d762:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d766:	fa0f f38c 	sxth.w	r3, ip
 801d76a:	9200      	str	r2, [sp, #0]
 801d76c:	4631      	mov	r1, r6
 801d76e:	9a08      	ldr	r2, [sp, #32]
 801d770:	9301      	str	r3, [sp, #4]
 801d772:	462b      	mov	r3, r5
 801d774:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801d778:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d77a:	f7ff fde9 	bl	801d350 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801d77e:	e756      	b.n	801d62e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d780:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d782:	1426      	asrs	r6, r4, #16
 801d784:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d786:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d78a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d78e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d790:	1400      	asrs	r0, r0, #16
 801d792:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d796:	fb02 6000 	mla	r0, r2, r0, r6
 801d79a:	9e08      	ldr	r6, [sp, #32]
 801d79c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d7a0:	eb06 0c00 	add.w	ip, r6, r0
 801d7a4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d7a8:	eb05 070e 	add.w	r7, r5, lr
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d064      	beq.n	801d87a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801d7b0:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801d7b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d7b8:	442e      	add	r6, r5
 801d7ba:	2900      	cmp	r1, #0
 801d7bc:	d066      	beq.n	801d88c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801d7be:	eb0c 0002 	add.w	r0, ip, r2
 801d7c2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d7c6:	7840      	ldrb	r0, [r0, #1]
 801d7c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d7cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d7d0:	442a      	add	r2, r5
 801d7d2:	4428      	add	r0, r5
 801d7d4:	b29b      	uxth	r3, r3
 801d7d6:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801d7da:	b289      	uxth	r1, r1
 801d7dc:	f896 e000 	ldrb.w	lr, [r6]
 801d7e0:	f108 0803 	add.w	r8, r8, #3
 801d7e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d7e8:	fb03 f901 	mul.w	r9, r3, r1
 801d7ec:	011b      	lsls	r3, r3, #4
 801d7ee:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d7f2:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801d7f6:	eba3 0309 	sub.w	r3, r3, r9
 801d7fa:	b289      	uxth	r1, r1
 801d7fc:	b29b      	uxth	r3, r3
 801d7fe:	ebac 0c01 	sub.w	ip, ip, r1
 801d802:	fb03 fe0e 	mul.w	lr, r3, lr
 801d806:	fa1f fc8c 	uxth.w	ip, ip
 801d80a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d80e:	f892 b000 	ldrb.w	fp, [r2]
 801d812:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d816:	f890 b000 	ldrb.w	fp, [r0]
 801d81a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d81e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d822:	f808 ec06 	strb.w	lr, [r8, #-6]
 801d826:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d82a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d82e:	fb03 fe0e 	mul.w	lr, r3, lr
 801d832:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d836:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d83a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d83e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d842:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d846:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d84a:	f808 ec05 	strb.w	lr, [r8, #-5]
 801d84e:	78b6      	ldrb	r6, [r6, #2]
 801d850:	78bf      	ldrb	r7, [r7, #2]
 801d852:	4373      	muls	r3, r6
 801d854:	7896      	ldrb	r6, [r2, #2]
 801d856:	7882      	ldrb	r2, [r0, #2]
 801d858:	fb0c 3307 	mla	r3, ip, r7, r3
 801d85c:	fb01 3306 	mla	r3, r1, r6, r3
 801d860:	fb09 3902 	mla	r9, r9, r2, r3
 801d864:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d866:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d868:	441c      	add	r4, r3
 801d86a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d86c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d870:	4413      	add	r3, r2
 801d872:	f808 9c04 	strb.w	r9, [r8, #-4]
 801d876:	9318      	str	r3, [sp, #96]	@ 0x60
 801d878:	e70d      	b.n	801d696 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d87a:	b151      	cbz	r1, 801d892 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801d87c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d880:	4638      	mov	r0, r7
 801d882:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d886:	442a      	add	r2, r5
 801d888:	463e      	mov	r6, r7
 801d88a:	e7a3      	b.n	801d7d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d88c:	4638      	mov	r0, r7
 801d88e:	463a      	mov	r2, r7
 801d890:	e7a0      	b.n	801d7d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d892:	4638      	mov	r0, r7
 801d894:	463a      	mov	r2, r7
 801d896:	e7f7      	b.n	801d888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801d898:	b00d      	add	sp, #52	@ 0x34
 801d89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d89e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801d89e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a2:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801d8a6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801d8aa:	2d00      	cmp	r5, #0
 801d8ac:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801d8b0:	fb05 700c 	mla	r0, r5, ip, r7
 801d8b4:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801d8b8:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801d8bc:	eb02 0800 	add.w	r8, r2, r0
 801d8c0:	f2c0 8118 	blt.w	801daf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d8c4:	45a9      	cmp	r9, r5
 801d8c6:	f340 8115 	ble.w	801daf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d8ca:	2f00      	cmp	r7, #0
 801d8cc:	f2c0 8110 	blt.w	801daf0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d8d0:	45bc      	cmp	ip, r7
 801d8d2:	f340 810d 	ble.w	801daf0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d8d6:	5c12      	ldrb	r2, [r2, r0]
 801d8d8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d8dc:	1c7a      	adds	r2, r7, #1
 801d8de:	f100 810c 	bmi.w	801dafa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d8e2:	4594      	cmp	ip, r2
 801d8e4:	f340 8109 	ble.w	801dafa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d8e8:	2c00      	cmp	r4, #0
 801d8ea:	f000 8108 	beq.w	801dafe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801d8ee:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d8f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d8f6:	3501      	adds	r5, #1
 801d8f8:	f100 8105 	bmi.w	801db06 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d8fc:	45a9      	cmp	r9, r5
 801d8fe:	f340 8102 	ble.w	801db06 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d902:	f1be 0f00 	cmp.w	lr, #0
 801d906:	f000 8101 	beq.w	801db0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801d90a:	2f00      	cmp	r7, #0
 801d90c:	f2c0 80f9 	blt.w	801db02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d910:	45bc      	cmp	ip, r7
 801d912:	f340 80f6 	ble.w	801db02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d916:	f818 200c 	ldrb.w	r2, [r8, ip]
 801d91a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d91e:	3701      	adds	r7, #1
 801d920:	f100 80f7 	bmi.w	801db12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d924:	45bc      	cmp	ip, r7
 801d926:	f340 80f4 	ble.w	801db12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d92a:	2c00      	cmp	r4, #0
 801d92c:	f000 80f3 	beq.w	801db16 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801d930:	44c4      	add	ip, r8
 801d932:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d936:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d93a:	fa1f fc84 	uxth.w	ip, r4
 801d93e:	fa1f f48e 	uxth.w	r4, lr
 801d942:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d946:	fb04 fe0c 	mul.w	lr, r4, ip
 801d94a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d94e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d952:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801d956:	ebac 070e 	sub.w	r7, ip, lr
 801d95a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d95e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d962:	b2a4      	uxth	r4, r4
 801d964:	b2bf      	uxth	r7, r7
 801d966:	1b1b      	subs	r3, r3, r4
 801d968:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d96c:	fb07 fc0a 	mul.w	ip, r7, sl
 801d970:	b29b      	uxth	r3, r3
 801d972:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d976:	9300      	str	r3, [sp, #0]
 801d978:	fb04 cc09 	mla	ip, r4, r9, ip
 801d97c:	fb0e cc08 	mla	ip, lr, r8, ip
 801d980:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d984:	9301      	str	r3, [sp, #4]
 801d986:	2b00      	cmp	r3, #0
 801d988:	f000 80af 	beq.w	801daea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801d98c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801d990:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d994:	fb0b fc0c 	mul.w	ip, fp, ip
 801d998:	fb0b f606 	mul.w	r6, fp, r6
 801d99c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d9a0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d9a4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801d9a8:	44dc      	add	ip, fp
 801d9aa:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801d9ae:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d9b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9b6:	fb0a fb0b 	mul.w	fp, sl, fp
 801d9ba:	fb0a fa00 	mul.w	sl, sl, r0
 801d9be:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801d9c2:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d9c6:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801d9ca:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d9ce:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d9d2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d9d6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d9da:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d9de:	0a36      	lsrs	r6, r6, #8
 801d9e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d9e4:	44dc      	add	ip, fp
 801d9e6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801d9ea:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d9ee:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d9f2:	fb09 fb0b 	mul.w	fp, r9, fp
 801d9f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9fa:	fb09 f905 	mul.w	r9, r9, r5
 801d9fe:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801da02:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801da06:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801da0a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801da0e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801da12:	fb0c fc07 	mul.w	ip, ip, r7
 801da16:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801da1a:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801da1e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801da22:	4458      	add	r0, fp
 801da24:	fb08 f505 	mul.w	r5, r8, r5
 801da28:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801da2c:	fb08 f802 	mul.w	r8, r8, r2
 801da30:	0a00      	lsrs	r0, r0, #8
 801da32:	0a2a      	lsrs	r2, r5, #8
 801da34:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801da38:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801da3c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801da40:	4415      	add	r5, r2
 801da42:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801da46:	0a2d      	lsrs	r5, r5, #8
 801da48:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801da4c:	9a00      	ldr	r2, [sp, #0]
 801da4e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801da52:	fb03 cc02 	mla	ip, r3, r2, ip
 801da56:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801da5a:	9b01      	ldr	r3, [sp, #4]
 801da5c:	fb05 c50e 	mla	r5, r5, lr, ip
 801da60:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801da64:	fb00 5004 	mla	r0, r0, r4, r5
 801da68:	0a00      	lsrs	r0, r0, #8
 801da6a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801da6e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801da72:	4378      	muls	r0, r7
 801da74:	fb02 0006 	mla	r0, r2, r6, r0
 801da78:	fb0e 0e08 	mla	lr, lr, r8, r0
 801da7c:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801da80:	fb04 e000 	mla	r0, r4, r0, lr
 801da84:	0a00      	lsrs	r0, r0, #8
 801da86:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801da8a:	4328      	orrs	r0, r5
 801da8c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801da90:	b2ad      	uxth	r5, r5
 801da92:	b2c4      	uxtb	r4, r0
 801da94:	436b      	muls	r3, r5
 801da96:	fb14 f405 	smulbb	r4, r4, r5
 801da9a:	1c5a      	adds	r2, r3, #1
 801da9c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801daa0:	780b      	ldrb	r3, [r1, #0]
 801daa2:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801daa6:	b2d2      	uxtb	r2, r2
 801daa8:	fb03 4302 	mla	r3, r3, r2, r4
 801daac:	b29b      	uxth	r3, r3
 801daae:	1c5c      	adds	r4, r3, #1
 801dab0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801dab4:	784c      	ldrb	r4, [r1, #1]
 801dab6:	fb14 f402 	smulbb	r4, r4, r2
 801daba:	121b      	asrs	r3, r3, #8
 801dabc:	700b      	strb	r3, [r1, #0]
 801dabe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801dac2:	fb03 4305 	mla	r3, r3, r5, r4
 801dac6:	b29b      	uxth	r3, r3
 801dac8:	1c5c      	adds	r4, r3, #1
 801daca:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801dace:	0c04      	lsrs	r4, r0, #16
 801dad0:	7888      	ldrb	r0, [r1, #2]
 801dad2:	121b      	asrs	r3, r3, #8
 801dad4:	fb10 f002 	smulbb	r0, r0, r2
 801dad8:	704b      	strb	r3, [r1, #1]
 801dada:	fb04 0005 	mla	r0, r4, r5, r0
 801dade:	b280      	uxth	r0, r0
 801dae0:	1c43      	adds	r3, r0, #1
 801dae2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dae6:	1200      	asrs	r0, r0, #8
 801dae8:	7088      	strb	r0, [r1, #2]
 801daea:	b003      	add	sp, #12
 801daec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daf0:	2600      	movs	r6, #0
 801daf2:	e6f3      	b.n	801d8dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801daf4:	2000      	movs	r0, #0
 801daf6:	4606      	mov	r6, r0
 801daf8:	e6fd      	b.n	801d8f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dafa:	2000      	movs	r0, #0
 801dafc:	e6fb      	b.n	801d8f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dafe:	4620      	mov	r0, r4
 801db00:	e6f9      	b.n	801d8f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801db02:	2500      	movs	r5, #0
 801db04:	e70b      	b.n	801d91e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801db06:	2200      	movs	r2, #0
 801db08:	4615      	mov	r5, r2
 801db0a:	e716      	b.n	801d93a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801db0c:	4672      	mov	r2, lr
 801db0e:	4675      	mov	r5, lr
 801db10:	e713      	b.n	801d93a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801db12:	2200      	movs	r2, #0
 801db14:	e711      	b.n	801d93a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801db16:	4622      	mov	r2, r4
 801db18:	e70f      	b.n	801d93a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801db1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db1e:	b09f      	sub	sp, #124	@ 0x7c
 801db20:	921b      	str	r2, [sp, #108]	@ 0x6c
 801db22:	9309      	str	r3, [sp, #36]	@ 0x24
 801db24:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801db26:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801db2a:	901d      	str	r0, [sp, #116]	@ 0x74
 801db2c:	931c      	str	r3, [sp, #112]	@ 0x70
 801db2e:	6850      	ldr	r0, [r2, #4]
 801db30:	9119      	str	r1, [sp, #100]	@ 0x64
 801db32:	6812      	ldr	r2, [r2, #0]
 801db34:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801db36:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801db3a:	fb00 1303 	mla	r3, r0, r3, r1
 801db3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db42:	18d3      	adds	r3, r2, r3
 801db44:	930c      	str	r3, [sp, #48]	@ 0x30
 801db46:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	9312      	str	r3, [sp, #72]	@ 0x48
 801db4c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db4e:	685e      	ldr	r6, [r3, #4]
 801db50:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801db54:	3604      	adds	r6, #4
 801db56:	930d      	str	r3, [sp, #52]	@ 0x34
 801db58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	dc03      	bgt.n	801db66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801db5e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801db60:	2b00      	cmp	r3, #0
 801db62:	f340 8378 	ble.w	801e256 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801db66:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db68:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801db6c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801db70:	1e48      	subs	r0, r1, #1
 801db72:	1e57      	subs	r7, r2, #1
 801db74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db76:	2b00      	cmp	r3, #0
 801db78:	f340 818c 	ble.w	801de94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801db7c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801db7e:	142b      	asrs	r3, r5, #16
 801db80:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801db84:	d406      	bmi.n	801db94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801db86:	4584      	cmp	ip, r0
 801db88:	da04      	bge.n	801db94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	db02      	blt.n	801db94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801db8e:	42bb      	cmp	r3, r7
 801db90:	f2c0 8181 	blt.w	801de96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801db94:	f11c 0c01 	adds.w	ip, ip, #1
 801db98:	f100 816f 	bmi.w	801de7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801db9c:	4561      	cmp	r1, ip
 801db9e:	f2c0 816c 	blt.w	801de7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801dba2:	3301      	adds	r3, #1
 801dba4:	f100 8169 	bmi.w	801de7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801dba8:	429a      	cmp	r2, r3
 801dbaa:	f2c0 8166 	blt.w	801de7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801dbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbb0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801dbb2:	931a      	str	r3, [sp, #104]	@ 0x68
 801dbb4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	f340 818c 	ble.w	801ded4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801dbbc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801dbbe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801dbc2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801dbc6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dbca:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801dbcc:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801dbd0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801dbd2:	141b      	asrs	r3, r3, #16
 801dbd4:	f100 81d0 	bmi.w	801df78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbd8:	f100 38ff 	add.w	r8, r0, #4294967295
 801dbdc:	4543      	cmp	r3, r8
 801dbde:	f280 81cb 	bge.w	801df78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbe2:	f1bc 0f00 	cmp.w	ip, #0
 801dbe6:	f2c0 81c7 	blt.w	801df78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbea:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dbee:	45c4      	cmp	ip, r8
 801dbf0:	f280 81c2 	bge.w	801df78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbf4:	b200      	sxth	r0, r0
 801dbf6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dbf8:	fb0c 3300 	mla	r3, ip, r0, r3
 801dbfc:	eb04 0803 	add.w	r8, r4, r3
 801dc00:	5ce3      	ldrb	r3, [r4, r3]
 801dc02:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dc06:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dc0a:	2a00      	cmp	r2, #0
 801dc0c:	f000 81a9 	beq.w	801df62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801dc10:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dc14:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801dc18:	940e      	str	r4, [sp, #56]	@ 0x38
 801dc1a:	0e24      	lsrs	r4, r4, #24
 801dc1c:	9415      	str	r4, [sp, #84]	@ 0x54
 801dc1e:	b179      	cbz	r1, 801dc40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dc20:	eb08 0c00 	add.w	ip, r8, r0
 801dc24:	f818 0000 	ldrb.w	r0, [r8, r0]
 801dc28:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dc2c:	900a      	str	r0, [sp, #40]	@ 0x28
 801dc2e:	0e00      	lsrs	r0, r0, #24
 801dc30:	9013      	str	r0, [sp, #76]	@ 0x4c
 801dc32:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801dc36:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dc3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801dc3c:	0e00      	lsrs	r0, r0, #24
 801dc3e:	9016      	str	r0, [sp, #88]	@ 0x58
 801dc40:	b292      	uxth	r2, r2
 801dc42:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dc44:	b289      	uxth	r1, r1
 801dc46:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dc48:	fb02 f901 	mul.w	r9, r2, r1
 801dc4c:	0112      	lsls	r2, r2, #4
 801dc4e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dc52:	eba2 0809 	sub.w	r8, r2, r9
 801dc56:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801dc5a:	b289      	uxth	r1, r1
 801dc5c:	fa1f f888 	uxth.w	r8, r8
 801dc60:	1a52      	subs	r2, r2, r1
 801dc62:	fb08 f000 	mul.w	r0, r8, r0
 801dc66:	b292      	uxth	r2, r2
 801dc68:	fb02 000e 	mla	r0, r2, lr, r0
 801dc6c:	fb01 0004 	mla	r0, r1, r4, r0
 801dc70:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dc72:	fb09 0004 	mla	r0, r9, r4, r0
 801dc76:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dc7a:	2800      	cmp	r0, #0
 801dc7c:	f000 80f2 	beq.w	801de64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dc80:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801dc84:	d01b      	beq.n	801dcbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801dc86:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801dc8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dc8e:	fb0e fa0a 	mul.w	sl, lr, sl
 801dc92:	fb0e fe03 	mul.w	lr, lr, r3
 801dc96:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dc9a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801dc9e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801dca2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dca6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dcaa:	4453      	add	r3, sl
 801dcac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dcb0:	0a1b      	lsrs	r3, r3, #8
 801dcb2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dcb6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dcba:	ea43 030c 	orr.w	r3, r3, ip
 801dcbe:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dcc0:	2cff      	cmp	r4, #255	@ 0xff
 801dcc2:	d021      	beq.n	801dd08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801dcc4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dcc6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dcca:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dccc:	fb04 fb0b 	mul.w	fp, r4, fp
 801dcd0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dcd2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dcd6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dcd8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dcdc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dce0:	fb04 fa0a 	mul.w	sl, r4, sl
 801dce4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dce8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dcec:	44de      	add	lr, fp
 801dcee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dcf2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcfa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dcfe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd02:	ea4e 040a 	orr.w	r4, lr, sl
 801dd06:	940e      	str	r4, [sp, #56]	@ 0x38
 801dd08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dd0a:	2cff      	cmp	r4, #255	@ 0xff
 801dd0c:	d021      	beq.n	801dd52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801dd0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd10:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dd14:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dd16:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd1c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dd20:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dd22:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dd26:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd2a:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd2e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd32:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dd36:	44de      	add	lr, fp
 801dd38:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd44:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd48:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd4c:	ea4e 040a 	orr.w	r4, lr, sl
 801dd50:	940a      	str	r4, [sp, #40]	@ 0x28
 801dd52:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd54:	2cff      	cmp	r4, #255	@ 0xff
 801dd56:	d021      	beq.n	801dd9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801dd58:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd5a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dd5e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd60:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd64:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd66:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dd6a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd6c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dd70:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd74:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd78:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd7c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dd80:	44de      	add	lr, fp
 801dd82:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd8e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd92:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd96:	ea4e 040a 	orr.w	r4, lr, sl
 801dd9a:	940f      	str	r4, [sp, #60]	@ 0x3c
 801dd9c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dd9e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801dda2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dda6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ddaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ddac:	fb08 fc0c 	mul.w	ip, r8, ip
 801ddb0:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ddb4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ddb8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ddba:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ddbe:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ddc2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ddc4:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ddc8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801ddcc:	fb08 f80e 	mul.w	r8, r8, lr
 801ddd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ddd4:	fb02 8303 	mla	r3, r2, r3, r8
 801ddd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddda:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ddde:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801dde2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dde4:	fb01 330a 	mla	r3, r1, sl, r3
 801dde8:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801ddec:	fb09 3901 	mla	r9, r9, r1, r3
 801ddf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ddf2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ddf4:	4343      	muls	r3, r0
 801ddf6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ddfa:	1c58      	adds	r0, r3, #1
 801ddfc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801de00:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801de04:	ea4c 0c09 	orr.w	ip, ip, r9
 801de08:	783b      	ldrb	r3, [r7, #0]
 801de0a:	fa5f f28c 	uxtb.w	r2, ip
 801de0e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801de12:	fb12 f201 	smulbb	r2, r2, r1
 801de16:	b2c0      	uxtb	r0, r0
 801de18:	fb03 2300 	mla	r3, r3, r0, r2
 801de1c:	b29b      	uxth	r3, r3
 801de1e:	1c5a      	adds	r2, r3, #1
 801de20:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801de24:	787a      	ldrb	r2, [r7, #1]
 801de26:	fb12 f200 	smulbb	r2, r2, r0
 801de2a:	121b      	asrs	r3, r3, #8
 801de2c:	703b      	strb	r3, [r7, #0]
 801de2e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801de32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801de36:	fb03 2301 	mla	r3, r3, r1, r2
 801de3a:	b29b      	uxth	r3, r3
 801de3c:	1c5a      	adds	r2, r3, #1
 801de3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801de42:	121b      	asrs	r3, r3, #8
 801de44:	707b      	strb	r3, [r7, #1]
 801de46:	78bb      	ldrb	r3, [r7, #2]
 801de48:	fb13 f000 	smulbb	r0, r3, r0
 801de4c:	fb0c 0c01 	mla	ip, ip, r1, r0
 801de50:	fa1f fc8c 	uxth.w	ip, ip
 801de54:	f10c 0301 	add.w	r3, ip, #1
 801de58:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801de5c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801de60:	f887 c002 	strb.w	ip, [r7, #2]
 801de64:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801de66:	3703      	adds	r7, #3
 801de68:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801de6a:	441a      	add	r2, r3
 801de6c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801de6e:	441d      	add	r5, r3
 801de70:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801de72:	9229      	str	r2, [sp, #164]	@ 0xa4
 801de74:	3b01      	subs	r3, #1
 801de76:	931a      	str	r3, [sp, #104]	@ 0x68
 801de78:	e69c      	b.n	801dbb4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801de7a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801de7c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801de7e:	441c      	add	r4, r3
 801de80:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801de82:	441d      	add	r5, r3
 801de84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de86:	9429      	str	r4, [sp, #164]	@ 0xa4
 801de88:	3b01      	subs	r3, #1
 801de8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801de8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de8e:	3303      	adds	r3, #3
 801de90:	930c      	str	r3, [sp, #48]	@ 0x30
 801de92:	e66f      	b.n	801db74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801de94:	d026      	beq.n	801dee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801de96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de98:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801de9a:	3b01      	subs	r3, #1
 801de9c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801de9e:	fb00 4003 	mla	r0, r0, r3, r4
 801dea2:	1400      	asrs	r0, r0, #16
 801dea4:	f53f ae83 	bmi.w	801dbae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dea8:	3901      	subs	r1, #1
 801deaa:	4288      	cmp	r0, r1
 801deac:	f6bf ae7f 	bge.w	801dbae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801deb0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801deb2:	fb01 5303 	mla	r3, r1, r3, r5
 801deb6:	141b      	asrs	r3, r3, #16
 801deb8:	f53f ae79 	bmi.w	801dbae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801debc:	3a01      	subs	r2, #1
 801debe:	4293      	cmp	r3, r2
 801dec0:	f6bf ae75 	bge.w	801dbae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dec4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dec6:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801deca:	f103 0e03 	add.w	lr, r3, #3
 801dece:	f1bb 0f00 	cmp.w	fp, #0
 801ded2:	dc71      	bgt.n	801dfb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ded4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ded6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801deda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dedc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dee0:	4423      	add	r3, r4
 801dee2:	930c      	str	r3, [sp, #48]	@ 0x30
 801dee4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	f340 81b5 	ble.w	801e256 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801deec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801def0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801def2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801def6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801defa:	eef0 6a62 	vmov.f32	s13, s5
 801defe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df02:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df0a:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801df0e:	eef0 6a43 	vmov.f32	s13, s6
 801df12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df16:	ee16 5a90 	vmov	r5, s13
 801df1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df1e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df22:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df32:	ee12 2a90 	vmov	r2, s5
 801df36:	eef0 2a47 	vmov.f32	s5, s14
 801df3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801df3e:	ee13 2a10 	vmov	r2, s6
 801df42:	932b      	str	r3, [sp, #172]	@ 0xac
 801df44:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df46:	eeb0 3a67 	vmov.f32	s6, s15
 801df4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801df4e:	932c      	str	r3, [sp, #176]	@ 0xb0
 801df50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801df54:	3b01      	subs	r3, #1
 801df56:	9319      	str	r3, [sp, #100]	@ 0x64
 801df58:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df5a:	bf08      	it	eq
 801df5c:	4613      	moveq	r3, r2
 801df5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801df60:	e5fa      	b.n	801db58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801df62:	2900      	cmp	r1, #0
 801df64:	f43f ae6c 	beq.w	801dc40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801df68:	f818 0000 	ldrb.w	r0, [r8, r0]
 801df6c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801df70:	900a      	str	r0, [sp, #40]	@ 0x28
 801df72:	0e00      	lsrs	r0, r0, #24
 801df74:	9013      	str	r0, [sp, #76]	@ 0x4c
 801df76:	e663      	b.n	801dc40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801df78:	f113 0801 	adds.w	r8, r3, #1
 801df7c:	f53f af72 	bmi.w	801de64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df80:	4540      	cmp	r0, r8
 801df82:	f6ff af6f 	blt.w	801de64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df86:	f11c 0801 	adds.w	r8, ip, #1
 801df8a:	f53f af6b 	bmi.w	801de64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df8e:	45c6      	cmp	lr, r8
 801df90:	f6ff af68 	blt.w	801de64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df94:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801df96:	b200      	sxth	r0, r0
 801df98:	9302      	str	r3, [sp, #8]
 801df9a:	fa0f f38e 	sxth.w	r3, lr
 801df9e:	9000      	str	r0, [sp, #0]
 801dfa0:	9301      	str	r3, [sp, #4]
 801dfa2:	4633      	mov	r3, r6
 801dfa4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801dfa6:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801dfaa:	e9cd c203 	strd	ip, r2, [sp, #12]
 801dfae:	4639      	mov	r1, r7
 801dfb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dfb2:	f7ff fc74 	bl	801d89e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801dfb6:	e755      	b.n	801de64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dfb8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801dfba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dfbe:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801dfc0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dfc4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801dfc6:	1427      	asrs	r7, r4, #16
 801dfc8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dfca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dfce:	142b      	asrs	r3, r5, #16
 801dfd0:	fb01 7303 	mla	r3, r1, r3, r7
 801dfd4:	18e7      	adds	r7, r4, r3
 801dfd6:	5ce3      	ldrb	r3, [r4, r3]
 801dfd8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dfdc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dfe0:	2a00      	cmp	r2, #0
 801dfe2:	f000 812e 	beq.w	801e242 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801dfe6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801dfea:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801dfee:	9410      	str	r4, [sp, #64]	@ 0x40
 801dff0:	0e24      	lsrs	r4, r4, #24
 801dff2:	9417      	str	r4, [sp, #92]	@ 0x5c
 801dff4:	b170      	cbz	r0, 801e014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801dff6:	eb07 0801 	add.w	r8, r7, r1
 801dffa:	5c79      	ldrb	r1, [r7, r1]
 801dffc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e000:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e002:	0e09      	lsrs	r1, r1, #24
 801e004:	9114      	str	r1, [sp, #80]	@ 0x50
 801e006:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e00a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e00e:	9111      	str	r1, [sp, #68]	@ 0x44
 801e010:	0e09      	lsrs	r1, r1, #24
 801e012:	9118      	str	r1, [sp, #96]	@ 0x60
 801e014:	b292      	uxth	r2, r2
 801e016:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e018:	b280      	uxth	r0, r0
 801e01a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e01c:	fb02 f900 	mul.w	r9, r2, r0
 801e020:	0112      	lsls	r2, r2, #4
 801e022:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e026:	eba2 0809 	sub.w	r8, r2, r9
 801e02a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e02e:	b280      	uxth	r0, r0
 801e030:	fa1f f888 	uxth.w	r8, r8
 801e034:	1a12      	subs	r2, r2, r0
 801e036:	fb08 f101 	mul.w	r1, r8, r1
 801e03a:	b292      	uxth	r2, r2
 801e03c:	fb02 110c 	mla	r1, r2, ip, r1
 801e040:	fb00 1104 	mla	r1, r0, r4, r1
 801e044:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e046:	fb09 1104 	mla	r1, r9, r4, r1
 801e04a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e04e:	2900      	cmp	r1, #0
 801e050:	f000 80ec 	beq.w	801e22c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801e054:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e058:	d019      	beq.n	801e08e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801e05a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e05e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e062:	fb0c fa0a 	mul.w	sl, ip, sl
 801e066:	fb0c fc03 	mul.w	ip, ip, r3
 801e06a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e06e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e072:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e076:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e07a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e07e:	4453      	add	r3, sl
 801e080:	0a3f      	lsrs	r7, r7, #8
 801e082:	0a1b      	lsrs	r3, r3, #8
 801e084:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e088:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e08c:	433b      	orrs	r3, r7
 801e08e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e090:	2cff      	cmp	r4, #255	@ 0xff
 801e092:	d020      	beq.n	801e0d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801e094:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e096:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e09a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e09c:	4367      	muls	r7, r4
 801e09e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e0a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e0a4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0a8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e0aa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e0ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0b2:	fb04 fa0a 	mul.w	sl, r4, sl
 801e0b6:	44bc      	add	ip, r7
 801e0b8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e0bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0c4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0cc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e0d0:	ea4c 040a 	orr.w	r4, ip, sl
 801e0d4:	9410      	str	r4, [sp, #64]	@ 0x40
 801e0d6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0d8:	2cff      	cmp	r4, #255	@ 0xff
 801e0da:	d020      	beq.n	801e11e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801e0dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e0de:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e0e2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0e4:	4367      	muls	r7, r4
 801e0e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e0e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e0ec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0f0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0f2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e0f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0fa:	fb04 fa0a 	mul.w	sl, r4, sl
 801e0fe:	44bc      	add	ip, r7
 801e100:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e104:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e108:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e10c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e110:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e114:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e118:	ea4c 040a 	orr.w	r4, ip, sl
 801e11c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e11e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e120:	2cff      	cmp	r4, #255	@ 0xff
 801e122:	d020      	beq.n	801e166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801e124:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e126:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e12a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e12c:	4367      	muls	r7, r4
 801e12e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e130:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e134:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e138:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e13a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e13e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e142:	fb04 fa0a 	mul.w	sl, r4, sl
 801e146:	44bc      	add	ip, r7
 801e148:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e14c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e150:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e154:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e158:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e15c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e160:	ea4c 040a 	orr.w	r4, ip, sl
 801e164:	9411      	str	r4, [sp, #68]	@ 0x44
 801e166:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e168:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e16c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e170:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e174:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e176:	fb08 f707 	mul.w	r7, r8, r7
 801e17a:	fb02 770c 	mla	r7, r2, ip, r7
 801e17e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e182:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e184:	fb00 770c 	mla	r7, r0, ip, r7
 801e188:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e18c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e18e:	fb09 770c 	mla	r7, r9, ip, r7
 801e192:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e196:	fb08 f80c 	mul.w	r8, r8, ip
 801e19a:	0a3f      	lsrs	r7, r7, #8
 801e19c:	fb02 8303 	mla	r3, r2, r3, r8
 801e1a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e1a2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e1a6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e1aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e1ac:	fb00 330a 	mla	r3, r0, sl, r3
 801e1b0:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801e1b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e1b6:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e1ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e1bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e1c0:	434b      	muls	r3, r1
 801e1c2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e1c6:	1c59      	adds	r1, r3, #1
 801e1c8:	ea47 070c 	orr.w	r7, r7, ip
 801e1cc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e1d0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e1d4:	b2fa      	uxtb	r2, r7
 801e1d6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e1da:	fb12 f200 	smulbb	r2, r2, r0
 801e1de:	b2c9      	uxtb	r1, r1
 801e1e0:	fb03 2301 	mla	r3, r3, r1, r2
 801e1e4:	b29b      	uxth	r3, r3
 801e1e6:	1c5a      	adds	r2, r3, #1
 801e1e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e1ec:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e1f0:	fb12 f201 	smulbb	r2, r2, r1
 801e1f4:	121b      	asrs	r3, r3, #8
 801e1f6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e1fa:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801e1fe:	0c3f      	lsrs	r7, r7, #16
 801e200:	fb03 2300 	mla	r3, r3, r0, r2
 801e204:	b29b      	uxth	r3, r3
 801e206:	1c5a      	adds	r2, r3, #1
 801e208:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e20c:	121b      	asrs	r3, r3, #8
 801e20e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e212:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e216:	fb13 f101 	smulbb	r1, r3, r1
 801e21a:	fb07 1700 	mla	r7, r7, r0, r1
 801e21e:	b2bf      	uxth	r7, r7
 801e220:	1c7b      	adds	r3, r7, #1
 801e222:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e226:	123f      	asrs	r7, r7, #8
 801e228:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e22c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e22e:	f10e 0e03 	add.w	lr, lr, #3
 801e232:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e234:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e238:	441a      	add	r2, r3
 801e23a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e23c:	9229      	str	r2, [sp, #164]	@ 0xa4
 801e23e:	441d      	add	r5, r3
 801e240:	e645      	b.n	801dece <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801e242:	2800      	cmp	r0, #0
 801e244:	f43f aee6 	beq.w	801e014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e248:	5c79      	ldrb	r1, [r7, r1]
 801e24a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e24e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e250:	0e09      	lsrs	r1, r1, #24
 801e252:	9114      	str	r1, [sp, #80]	@ 0x50
 801e254:	e6de      	b.n	801e014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e256:	b01f      	add	sp, #124	@ 0x7c
 801e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e25c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801e25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e260:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801e264:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801e268:	2d00      	cmp	r5, #0
 801e26a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801e26e:	fb05 700e 	mla	r0, r5, lr, r7
 801e272:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801e276:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801e27a:	eb02 0800 	add.w	r8, r2, r0
 801e27e:	f2c0 8105 	blt.w	801e48c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e282:	45a9      	cmp	r9, r5
 801e284:	f340 8102 	ble.w	801e48c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e288:	2f00      	cmp	r7, #0
 801e28a:	f2c0 80fd 	blt.w	801e488 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e28e:	45be      	cmp	lr, r7
 801e290:	f340 80fa 	ble.w	801e488 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e294:	5c12      	ldrb	r2, [r2, r0]
 801e296:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e29a:	1c7a      	adds	r2, r7, #1
 801e29c:	f100 80f9 	bmi.w	801e492 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e2a0:	4596      	cmp	lr, r2
 801e2a2:	f340 80f6 	ble.w	801e492 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e2a6:	2c00      	cmp	r4, #0
 801e2a8:	f000 80f5 	beq.w	801e496 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801e2ac:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e2b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e2b4:	3501      	adds	r5, #1
 801e2b6:	f100 80f2 	bmi.w	801e49e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e2ba:	45a9      	cmp	r9, r5
 801e2bc:	f340 80ef 	ble.w	801e49e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e2c0:	f1bc 0f00 	cmp.w	ip, #0
 801e2c4:	f000 80ee 	beq.w	801e4a4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801e2c8:	2f00      	cmp	r7, #0
 801e2ca:	f2c0 80e6 	blt.w	801e49a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e2ce:	45be      	cmp	lr, r7
 801e2d0:	f340 80e3 	ble.w	801e49a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e2d4:	f818 200e 	ldrb.w	r2, [r8, lr]
 801e2d8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e2dc:	3701      	adds	r7, #1
 801e2de:	f100 80e4 	bmi.w	801e4aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e2e2:	45be      	cmp	lr, r7
 801e2e4:	f340 80e1 	ble.w	801e4aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e2e8:	2c00      	cmp	r4, #0
 801e2ea:	f000 80e0 	beq.w	801e4ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801e2ee:	44c6      	add	lr, r8
 801e2f0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e2f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e2f8:	b2a3      	uxth	r3, r4
 801e2fa:	fa1f fc8c 	uxth.w	ip, ip
 801e2fe:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e302:	fb0c fe03 	mul.w	lr, ip, r3
 801e306:	011b      	lsls	r3, r3, #4
 801e308:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e30c:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801e310:	eba3 070e 	sub.w	r7, r3, lr
 801e314:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801e318:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e31c:	fa1f f48c 	uxth.w	r4, ip
 801e320:	b2bf      	uxth	r7, r7
 801e322:	1b1b      	subs	r3, r3, r4
 801e324:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e328:	fb07 fc0a 	mul.w	ip, r7, sl
 801e32c:	b29b      	uxth	r3, r3
 801e32e:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e332:	9300      	str	r3, [sp, #0]
 801e334:	fb04 cc09 	mla	ip, r4, r9, ip
 801e338:	fb0e cc08 	mla	ip, lr, r8, ip
 801e33c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e340:	9301      	str	r3, [sp, #4]
 801e342:	2b00      	cmp	r3, #0
 801e344:	f000 809d 	beq.w	801e482 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801e348:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801e34c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e350:	fb0b fc0c 	mul.w	ip, fp, ip
 801e354:	fb0b f606 	mul.w	r6, fp, r6
 801e358:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e35c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e360:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801e364:	44dc      	add	ip, fp
 801e366:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801e36a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e36e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e372:	fb0a fb0b 	mul.w	fp, sl, fp
 801e376:	fb0a fa00 	mul.w	sl, sl, r0
 801e37a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801e37e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801e382:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801e386:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e38a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e38e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e392:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801e396:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e39a:	0a36      	lsrs	r6, r6, #8
 801e39c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e3a0:	44dc      	add	ip, fp
 801e3a2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801e3a6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801e3aa:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e3ae:	fb09 fb0b 	mul.w	fp, r9, fp
 801e3b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e3b6:	fb09 f905 	mul.w	r9, r9, r5
 801e3ba:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801e3be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e3c2:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801e3c6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e3ca:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e3ce:	fb0c fc07 	mul.w	ip, ip, r7
 801e3d2:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801e3d6:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801e3da:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e3de:	4458      	add	r0, fp
 801e3e0:	fb08 f505 	mul.w	r5, r8, r5
 801e3e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e3e8:	fb08 f802 	mul.w	r8, r8, r2
 801e3ec:	0a00      	lsrs	r0, r0, #8
 801e3ee:	0a2a      	lsrs	r2, r5, #8
 801e3f0:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801e3f4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e3f8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e3fc:	4415      	add	r5, r2
 801e3fe:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801e402:	0a2d      	lsrs	r5, r5, #8
 801e404:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e408:	9a00      	ldr	r2, [sp, #0]
 801e40a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e40e:	fb03 cc02 	mla	ip, r3, r2, ip
 801e412:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e416:	9b01      	ldr	r3, [sp, #4]
 801e418:	fb05 c50e 	mla	r5, r5, lr, ip
 801e41c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801e420:	43db      	mvns	r3, r3
 801e422:	fb00 5004 	mla	r0, r0, r4, r5
 801e426:	b2db      	uxtb	r3, r3
 801e428:	0a00      	lsrs	r0, r0, #8
 801e42a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801e42e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801e432:	4378      	muls	r0, r7
 801e434:	fb02 0006 	mla	r0, r2, r6, r0
 801e438:	780a      	ldrb	r2, [r1, #0]
 801e43a:	fb0e 0e08 	mla	lr, lr, r8, r0
 801e43e:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801e442:	fb04 e000 	mla	r0, r4, r0, lr
 801e446:	fb02 f403 	mul.w	r4, r2, r3
 801e44a:	0a00      	lsrs	r0, r0, #8
 801e44c:	1c62      	adds	r2, r4, #1
 801e44e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e452:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e456:	4328      	orrs	r0, r5
 801e458:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e45c:	700a      	strb	r2, [r1, #0]
 801e45e:	784a      	ldrb	r2, [r1, #1]
 801e460:	435a      	muls	r2, r3
 801e462:	1c54      	adds	r4, r2, #1
 801e464:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e468:	0a02      	lsrs	r2, r0, #8
 801e46a:	0c00      	lsrs	r0, r0, #16
 801e46c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e470:	704a      	strb	r2, [r1, #1]
 801e472:	788a      	ldrb	r2, [r1, #2]
 801e474:	4353      	muls	r3, r2
 801e476:	1c5a      	adds	r2, r3, #1
 801e478:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e47c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e480:	7088      	strb	r0, [r1, #2]
 801e482:	b003      	add	sp, #12
 801e484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e488:	2600      	movs	r6, #0
 801e48a:	e706      	b.n	801e29a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801e48c:	2000      	movs	r0, #0
 801e48e:	4606      	mov	r6, r0
 801e490:	e710      	b.n	801e2b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e492:	2000      	movs	r0, #0
 801e494:	e70e      	b.n	801e2b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e496:	4620      	mov	r0, r4
 801e498:	e70c      	b.n	801e2b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e49a:	2500      	movs	r5, #0
 801e49c:	e71e      	b.n	801e2dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801e49e:	2200      	movs	r2, #0
 801e4a0:	4615      	mov	r5, r2
 801e4a2:	e729      	b.n	801e2f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e4a4:	4662      	mov	r2, ip
 801e4a6:	4665      	mov	r5, ip
 801e4a8:	e726      	b.n	801e2f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e4aa:	2200      	movs	r2, #0
 801e4ac:	e724      	b.n	801e2f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e4ae:	4622      	mov	r2, r4
 801e4b0:	e722      	b.n	801e2f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801e4b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e4b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4b6:	b09b      	sub	sp, #108	@ 0x6c
 801e4b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e4bc:	9218      	str	r2, [sp, #96]	@ 0x60
 801e4be:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e4c0:	9019      	str	r0, [sp, #100]	@ 0x64
 801e4c2:	9116      	str	r1, [sp, #88]	@ 0x58
 801e4c4:	6850      	ldr	r0, [r2, #4]
 801e4c6:	9307      	str	r3, [sp, #28]
 801e4c8:	6812      	ldr	r2, [r2, #0]
 801e4ca:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801e4cc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801e4d0:	fb00 1303 	mla	r3, r0, r3, r1
 801e4d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e4d8:	18d3      	adds	r3, r2, r3
 801e4da:	930a      	str	r3, [sp, #40]	@ 0x28
 801e4dc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e4e2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4e4:	685e      	ldr	r6, [r3, #4]
 801e4e6:	3604      	adds	r6, #4
 801e4e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	dc03      	bgt.n	801e4f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e4ee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	f340 834f 	ble.w	801eb94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e4f6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e4fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e500:	1e48      	subs	r0, r1, #1
 801e502:	1e57      	subs	r7, r2, #1
 801e504:	9b07      	ldr	r3, [sp, #28]
 801e506:	2b00      	cmp	r3, #0
 801e508:	f340 8178 	ble.w	801e7fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e50c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e50e:	142b      	asrs	r3, r5, #16
 801e510:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e514:	d406      	bmi.n	801e524 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e516:	4584      	cmp	ip, r0
 801e518:	da04      	bge.n	801e524 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	db02      	blt.n	801e524 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e51e:	42bb      	cmp	r3, r7
 801e520:	f2c0 816d 	blt.w	801e7fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e524:	f11c 0c01 	adds.w	ip, ip, #1
 801e528:	f100 815b 	bmi.w	801e7e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e52c:	4561      	cmp	r1, ip
 801e52e:	f2c0 8158 	blt.w	801e7e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e532:	3301      	adds	r3, #1
 801e534:	f100 8155 	bmi.w	801e7e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e538:	429a      	cmp	r2, r3
 801e53a:	f2c0 8152 	blt.w	801e7e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e53e:	9b07      	ldr	r3, [sp, #28]
 801e540:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e542:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e544:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e546:	2b00      	cmp	r3, #0
 801e548:	f340 8178 	ble.w	801e83c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e54c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e54e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e552:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e556:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e55a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e55c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e560:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e562:	141b      	asrs	r3, r3, #16
 801e564:	f100 81ba 	bmi.w	801e8dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e568:	f101 38ff 	add.w	r8, r1, #4294967295
 801e56c:	4543      	cmp	r3, r8
 801e56e:	f280 81b5 	bge.w	801e8dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e572:	f1bc 0f00 	cmp.w	ip, #0
 801e576:	f2c0 81b1 	blt.w	801e8dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e57a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e57e:	45c4      	cmp	ip, r8
 801e580:	f280 81ac 	bge.w	801e8dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e584:	b209      	sxth	r1, r1
 801e586:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e588:	fb0c 3301 	mla	r3, ip, r1, r3
 801e58c:	eb04 0803 	add.w	r8, r4, r3
 801e590:	5ce3      	ldrb	r3, [r4, r3]
 801e592:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e596:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e59a:	2a00      	cmp	r2, #0
 801e59c:	f000 8193 	beq.w	801e8c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801e5a0:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e5a4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e5a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e5aa:	0e24      	lsrs	r4, r4, #24
 801e5ac:	9412      	str	r4, [sp, #72]	@ 0x48
 801e5ae:	b178      	cbz	r0, 801e5d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e5b0:	eb08 0c01 	add.w	ip, r8, r1
 801e5b4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e5b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e5bc:	9108      	str	r1, [sp, #32]
 801e5be:	0e09      	lsrs	r1, r1, #24
 801e5c0:	9110      	str	r1, [sp, #64]	@ 0x40
 801e5c2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e5c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e5ca:	910c      	str	r1, [sp, #48]	@ 0x30
 801e5cc:	0e09      	lsrs	r1, r1, #24
 801e5ce:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e5d0:	b292      	uxth	r2, r2
 801e5d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e5d4:	b280      	uxth	r0, r0
 801e5d6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e5d8:	fb02 f900 	mul.w	r9, r2, r0
 801e5dc:	0112      	lsls	r2, r2, #4
 801e5de:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e5e2:	eba2 0809 	sub.w	r8, r2, r9
 801e5e6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e5ea:	b280      	uxth	r0, r0
 801e5ec:	fa1f f888 	uxth.w	r8, r8
 801e5f0:	1a12      	subs	r2, r2, r0
 801e5f2:	fb08 f101 	mul.w	r1, r8, r1
 801e5f6:	b292      	uxth	r2, r2
 801e5f8:	fb02 110e 	mla	r1, r2, lr, r1
 801e5fc:	fb00 1104 	mla	r1, r0, r4, r1
 801e600:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e602:	fb09 1104 	mla	r1, r9, r4, r1
 801e606:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e60a:	2900      	cmp	r1, #0
 801e60c:	f000 80de 	beq.w	801e7cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e610:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e614:	d01b      	beq.n	801e64e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801e616:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e61a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e61e:	fb0e fa0a 	mul.w	sl, lr, sl
 801e622:	fb0e fe03 	mul.w	lr, lr, r3
 801e626:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e62a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e62e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e632:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e636:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e63a:	4453      	add	r3, sl
 801e63c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e640:	0a1b      	lsrs	r3, r3, #8
 801e642:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e646:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e64a:	ea43 030c 	orr.w	r3, r3, ip
 801e64e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e650:	2cff      	cmp	r4, #255	@ 0xff
 801e652:	d021      	beq.n	801e698 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e654:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e656:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e65a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e65c:	fb04 fb0b 	mul.w	fp, r4, fp
 801e660:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e662:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e666:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e668:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e66c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e670:	fb04 fa0a 	mul.w	sl, r4, sl
 801e674:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e678:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e67c:	44de      	add	lr, fp
 801e67e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e682:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e686:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e68a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e68e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e692:	ea4e 040a 	orr.w	r4, lr, sl
 801e696:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e698:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e69a:	2cff      	cmp	r4, #255	@ 0xff
 801e69c:	d021      	beq.n	801e6e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e69e:	9c08      	ldr	r4, [sp, #32]
 801e6a0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e6a4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e6a6:	fb04 fb0b 	mul.w	fp, r4, fp
 801e6aa:	9c08      	ldr	r4, [sp, #32]
 801e6ac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e6b0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e6b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e6b6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e6ba:	fb04 fa0a 	mul.w	sl, r4, sl
 801e6be:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e6c2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e6c6:	44de      	add	lr, fp
 801e6c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e6cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e6d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e6d4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e6d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e6dc:	ea4e 040a 	orr.w	r4, lr, sl
 801e6e0:	9408      	str	r4, [sp, #32]
 801e6e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e6e4:	2cff      	cmp	r4, #255	@ 0xff
 801e6e6:	d021      	beq.n	801e72c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e6e8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e6ea:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e6ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e6f0:	fb04 fb0b 	mul.w	fp, r4, fp
 801e6f4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e6f6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e6fa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e6fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e700:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e704:	fb04 fa0a 	mul.w	sl, r4, sl
 801e708:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e70c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e710:	44de      	add	lr, fp
 801e712:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e716:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e71a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e71e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e722:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e726:	ea4e 040a 	orr.w	r4, lr, sl
 801e72a:	940c      	str	r4, [sp, #48]	@ 0x30
 801e72c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e72e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e732:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e736:	43c9      	mvns	r1, r1
 801e738:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e73c:	9c08      	ldr	r4, [sp, #32]
 801e73e:	b2c9      	uxtb	r1, r1
 801e740:	fb08 fc0c 	mul.w	ip, r8, ip
 801e744:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e748:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e74c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e74e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e752:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e756:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e758:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e75c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e760:	fb08 f80e 	mul.w	r8, r8, lr
 801e764:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e768:	fb02 8303 	mla	r3, r2, r3, r8
 801e76c:	9a08      	ldr	r2, [sp, #32]
 801e76e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e772:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e776:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e778:	fb00 330a 	mla	r3, r0, sl, r3
 801e77c:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801e780:	fb09 3900 	mla	r9, r9, r0, r3
 801e784:	783b      	ldrb	r3, [r7, #0]
 801e786:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e78a:	fb03 f201 	mul.w	r2, r3, r1
 801e78e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e792:	1c53      	adds	r3, r2, #1
 801e794:	ea4c 0c09 	orr.w	ip, ip, r9
 801e798:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e79c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e7a0:	703b      	strb	r3, [r7, #0]
 801e7a2:	787b      	ldrb	r3, [r7, #1]
 801e7a4:	434b      	muls	r3, r1
 801e7a6:	1c5a      	adds	r2, r3, #1
 801e7a8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e7ac:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e7b0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e7b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e7b8:	707b      	strb	r3, [r7, #1]
 801e7ba:	78bb      	ldrb	r3, [r7, #2]
 801e7bc:	4359      	muls	r1, r3
 801e7be:	1c4b      	adds	r3, r1, #1
 801e7c0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e7c4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e7c8:	f887 c002 	strb.w	ip, [r7, #2]
 801e7cc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e7ce:	3703      	adds	r7, #3
 801e7d0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e7d2:	441a      	add	r2, r3
 801e7d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e7d6:	441d      	add	r5, r3
 801e7d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e7da:	9225      	str	r2, [sp, #148]	@ 0x94
 801e7dc:	3b01      	subs	r3, #1
 801e7de:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e7e0:	e6b0      	b.n	801e544 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e7e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e7e4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e7e6:	441c      	add	r4, r3
 801e7e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e7ea:	441d      	add	r5, r3
 801e7ec:	9b07      	ldr	r3, [sp, #28]
 801e7ee:	9425      	str	r4, [sp, #148]	@ 0x94
 801e7f0:	3b01      	subs	r3, #1
 801e7f2:	9307      	str	r3, [sp, #28]
 801e7f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7f6:	3303      	adds	r3, #3
 801e7f8:	930a      	str	r3, [sp, #40]	@ 0x28
 801e7fa:	e683      	b.n	801e504 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e7fc:	d026      	beq.n	801e84c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801e7fe:	9b07      	ldr	r3, [sp, #28]
 801e800:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e802:	3b01      	subs	r3, #1
 801e804:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e806:	fb00 4003 	mla	r0, r0, r3, r4
 801e80a:	1400      	asrs	r0, r0, #16
 801e80c:	f53f ae97 	bmi.w	801e53e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e810:	3901      	subs	r1, #1
 801e812:	4288      	cmp	r0, r1
 801e814:	f6bf ae93 	bge.w	801e53e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e818:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e81a:	fb01 5303 	mla	r3, r1, r3, r5
 801e81e:	141b      	asrs	r3, r3, #16
 801e820:	f53f ae8d 	bmi.w	801e53e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e824:	3a01      	subs	r2, #1
 801e826:	4293      	cmp	r3, r2
 801e828:	f6bf ae89 	bge.w	801e53e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e82c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e82e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e832:	f103 0e03 	add.w	lr, r3, #3
 801e836:	f1bb 0f00 	cmp.w	fp, #0
 801e83a:	dc6d      	bgt.n	801e918 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801e83c:	9b07      	ldr	r3, [sp, #28]
 801e83e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e844:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e848:	4423      	add	r3, r4
 801e84a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e84c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e84e:	2b00      	cmp	r3, #0
 801e850:	f340 81a0 	ble.w	801eb94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e854:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e858:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e85a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e85e:	eeb0 6a62 	vmov.f32	s12, s5
 801e862:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e866:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e86a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e86e:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801e872:	eeb0 6a43 	vmov.f32	s12, s6
 801e876:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e87a:	ee16 5a10 	vmov	r5, s12
 801e87e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e882:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e886:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e88a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e88e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e892:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e896:	ee12 2a90 	vmov	r2, s5
 801e89a:	eef0 2a47 	vmov.f32	s5, s14
 801e89e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8a2:	ee13 2a10 	vmov	r2, s6
 801e8a6:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e8a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e8aa:	eeb0 3a67 	vmov.f32	s6, s15
 801e8ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8b2:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e8b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e8b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e8b8:	3b01      	subs	r3, #1
 801e8ba:	9316      	str	r3, [sp, #88]	@ 0x58
 801e8bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e8be:	bf08      	it	eq
 801e8c0:	4613      	moveq	r3, r2
 801e8c2:	9307      	str	r3, [sp, #28]
 801e8c4:	e610      	b.n	801e4e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e8c6:	2800      	cmp	r0, #0
 801e8c8:	f43f ae82 	beq.w	801e5d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e8cc:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e8d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e8d4:	9108      	str	r1, [sp, #32]
 801e8d6:	0e09      	lsrs	r1, r1, #24
 801e8d8:	9110      	str	r1, [sp, #64]	@ 0x40
 801e8da:	e679      	b.n	801e5d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e8dc:	f113 0801 	adds.w	r8, r3, #1
 801e8e0:	f53f af74 	bmi.w	801e7cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8e4:	4541      	cmp	r1, r8
 801e8e6:	f6ff af71 	blt.w	801e7cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8ea:	f11c 0801 	adds.w	r8, ip, #1
 801e8ee:	f53f af6d 	bmi.w	801e7cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8f2:	45c6      	cmp	lr, r8
 801e8f4:	f6ff af6a 	blt.w	801e7cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8f8:	b209      	sxth	r1, r1
 801e8fa:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e8fe:	fa0f f38e 	sxth.w	r3, lr
 801e902:	9100      	str	r1, [sp, #0]
 801e904:	4639      	mov	r1, r7
 801e906:	9301      	str	r3, [sp, #4]
 801e908:	4633      	mov	r3, r6
 801e90a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e90e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e910:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801e912:	f7ff fca3 	bl	801e25c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801e916:	e759      	b.n	801e7cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e918:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e91a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e91e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e920:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e924:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e926:	1427      	asrs	r7, r4, #16
 801e928:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e92a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e92e:	142b      	asrs	r3, r5, #16
 801e930:	fb01 7303 	mla	r3, r1, r3, r7
 801e934:	18e7      	adds	r7, r4, r3
 801e936:	5ce3      	ldrb	r3, [r4, r3]
 801e938:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e93c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e940:	2a00      	cmp	r2, #0
 801e942:	f000 811d 	beq.w	801eb80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801e946:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e94a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801e94e:	940d      	str	r4, [sp, #52]	@ 0x34
 801e950:	0e24      	lsrs	r4, r4, #24
 801e952:	9414      	str	r4, [sp, #80]	@ 0x50
 801e954:	b170      	cbz	r0, 801e974 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e956:	eb07 0801 	add.w	r8, r7, r1
 801e95a:	5c79      	ldrb	r1, [r7, r1]
 801e95c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e960:	9109      	str	r1, [sp, #36]	@ 0x24
 801e962:	0e09      	lsrs	r1, r1, #24
 801e964:	9111      	str	r1, [sp, #68]	@ 0x44
 801e966:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e96a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e96e:	910e      	str	r1, [sp, #56]	@ 0x38
 801e970:	0e09      	lsrs	r1, r1, #24
 801e972:	9115      	str	r1, [sp, #84]	@ 0x54
 801e974:	b292      	uxth	r2, r2
 801e976:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e978:	b280      	uxth	r0, r0
 801e97a:	fb02 f900 	mul.w	r9, r2, r0
 801e97e:	0112      	lsls	r2, r2, #4
 801e980:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e984:	eba2 0809 	sub.w	r8, r2, r9
 801e988:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801e98c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e98e:	b280      	uxth	r0, r0
 801e990:	fa1f f888 	uxth.w	r8, r8
 801e994:	1a09      	subs	r1, r1, r0
 801e996:	fb08 f202 	mul.w	r2, r8, r2
 801e99a:	b289      	uxth	r1, r1
 801e99c:	fb01 220c 	mla	r2, r1, ip, r2
 801e9a0:	fb00 2204 	mla	r2, r0, r4, r2
 801e9a4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e9a6:	fb09 2204 	mla	r2, r9, r4, r2
 801e9aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e9ae:	2a00      	cmp	r2, #0
 801e9b0:	f000 80db 	beq.w	801eb6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801e9b4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e9b8:	d019      	beq.n	801e9ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801e9ba:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e9be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e9c2:	fb0c fa0a 	mul.w	sl, ip, sl
 801e9c6:	fb0c fc03 	mul.w	ip, ip, r3
 801e9ca:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e9ce:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e9d2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e9d6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e9da:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e9de:	4453      	add	r3, sl
 801e9e0:	0a3f      	lsrs	r7, r7, #8
 801e9e2:	0a1b      	lsrs	r3, r3, #8
 801e9e4:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e9e8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e9ec:	433b      	orrs	r3, r7
 801e9ee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e9f0:	2cff      	cmp	r4, #255	@ 0xff
 801e9f2:	d020      	beq.n	801ea36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801e9f4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e9f6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e9fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e9fc:	4367      	muls	r7, r4
 801e9fe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ea00:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea04:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ea08:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ea0a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ea0e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea12:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea16:	44bc      	add	ip, r7
 801ea18:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ea1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea20:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea24:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea2c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea30:	ea4c 040a 	orr.w	r4, ip, sl
 801ea34:	940d      	str	r4, [sp, #52]	@ 0x34
 801ea36:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ea38:	2cff      	cmp	r4, #255	@ 0xff
 801ea3a:	d020      	beq.n	801ea7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801ea3c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ea3e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ea42:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ea44:	4367      	muls	r7, r4
 801ea46:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ea48:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea4c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ea50:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ea52:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ea56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea5a:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea5e:	44bc      	add	ip, r7
 801ea60:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ea64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea6c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea74:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea78:	ea4c 040a 	orr.w	r4, ip, sl
 801ea7c:	9409      	str	r4, [sp, #36]	@ 0x24
 801ea7e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea80:	2cff      	cmp	r4, #255	@ 0xff
 801ea82:	d020      	beq.n	801eac6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801ea84:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ea86:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ea8a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea8c:	4367      	muls	r7, r4
 801ea8e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ea90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea94:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ea98:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea9a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ea9e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eaa2:	fb04 fa0a 	mul.w	sl, r4, sl
 801eaa6:	44bc      	add	ip, r7
 801eaa8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801eaac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eab0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eab4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eab8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eabc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eac0:	ea4c 040a 	orr.w	r4, ip, sl
 801eac4:	940e      	str	r4, [sp, #56]	@ 0x38
 801eac6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801eac8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801eacc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ead0:	43d2      	mvns	r2, r2
 801ead2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ead6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ead8:	b2d2      	uxtb	r2, r2
 801eada:	fb08 f707 	mul.w	r7, r8, r7
 801eade:	fb01 770c 	mla	r7, r1, ip, r7
 801eae2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eae6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801eae8:	fb00 770c 	mla	r7, r0, ip, r7
 801eaec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eaf0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801eaf2:	fb09 770c 	mla	r7, r9, ip, r7
 801eaf6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801eafa:	fb08 f80c 	mul.w	r8, r8, ip
 801eafe:	0a3f      	lsrs	r7, r7, #8
 801eb00:	fb01 8303 	mla	r3, r1, r3, r8
 801eb04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801eb06:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801eb0a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801eb0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801eb10:	fb00 330a 	mla	r3, r0, sl, r3
 801eb14:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801eb18:	fb09 3c0c 	mla	ip, r9, ip, r3
 801eb1c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801eb20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb24:	fb03 f102 	mul.w	r1, r3, r2
 801eb28:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801eb2c:	1c4b      	adds	r3, r1, #1
 801eb2e:	ea47 070c 	orr.w	r7, r7, ip
 801eb32:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eb36:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801eb3a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801eb3e:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801eb42:	4353      	muls	r3, r2
 801eb44:	1c59      	adds	r1, r3, #1
 801eb46:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801eb4a:	0a3b      	lsrs	r3, r7, #8
 801eb4c:	0c3f      	lsrs	r7, r7, #16
 801eb4e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eb52:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801eb56:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801eb5a:	435a      	muls	r2, r3
 801eb5c:	1c53      	adds	r3, r2, #1
 801eb5e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801eb62:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801eb66:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801eb6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801eb6c:	f10e 0e03 	add.w	lr, lr, #3
 801eb70:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801eb72:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eb76:	441a      	add	r2, r3
 801eb78:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eb7a:	9225      	str	r2, [sp, #148]	@ 0x94
 801eb7c:	441d      	add	r5, r3
 801eb7e:	e65a      	b.n	801e836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801eb80:	2800      	cmp	r0, #0
 801eb82:	f43f aef7 	beq.w	801e974 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801eb86:	5c79      	ldrb	r1, [r7, r1]
 801eb88:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801eb8c:	9109      	str	r1, [sp, #36]	@ 0x24
 801eb8e:	0e09      	lsrs	r1, r1, #24
 801eb90:	9111      	str	r1, [sp, #68]	@ 0x44
 801eb92:	e6ef      	b.n	801e974 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801eb94:	b01b      	add	sp, #108	@ 0x6c
 801eb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb9a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801eb9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb9e:	b08d      	sub	sp, #52	@ 0x34
 801eba0:	468b      	mov	fp, r1
 801eba2:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801eba6:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801ebaa:	fb0c 5703 	mla	r7, ip, r3, r5
 801ebae:	f1bc 0f00 	cmp.w	ip, #0
 801ebb2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ebb4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ebb8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801ebbc:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801ebc0:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801ebc4:	eb02 0607 	add.w	r6, r2, r7
 801ebc8:	f89b 4000 	ldrb.w	r4, [fp]
 801ebcc:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801ebd0:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801ebd4:	f2c0 80c1 	blt.w	801ed5a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ebd8:	45e6      	cmp	lr, ip
 801ebda:	f340 80be 	ble.w	801ed5a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ebde:	2d00      	cmp	r5, #0
 801ebe0:	f2c0 80b7 	blt.w	801ed52 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ebe4:	42ab      	cmp	r3, r5
 801ebe6:	f340 80b4 	ble.w	801ed52 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ebea:	5dd2      	ldrb	r2, [r2, r7]
 801ebec:	9205      	str	r2, [sp, #20]
 801ebee:	7872      	ldrb	r2, [r6, #1]
 801ebf0:	9206      	str	r2, [sp, #24]
 801ebf2:	78b2      	ldrb	r2, [r6, #2]
 801ebf4:	9207      	str	r2, [sp, #28]
 801ebf6:	1c6a      	adds	r2, r5, #1
 801ebf8:	f100 80b6 	bmi.w	801ed68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ebfc:	4293      	cmp	r3, r2
 801ebfe:	f340 80b3 	ble.w	801ed68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ec02:	f1b8 0f00 	cmp.w	r8, #0
 801ec06:	f000 80af 	beq.w	801ed68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ec0a:	78f2      	ldrb	r2, [r6, #3]
 801ec0c:	9201      	str	r2, [sp, #4]
 801ec0e:	7932      	ldrb	r2, [r6, #4]
 801ec10:	9202      	str	r2, [sp, #8]
 801ec12:	7972      	ldrb	r2, [r6, #5]
 801ec14:	9203      	str	r2, [sp, #12]
 801ec16:	f11c 0c01 	adds.w	ip, ip, #1
 801ec1a:	f100 80ad 	bmi.w	801ed78 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ec1e:	45e6      	cmp	lr, ip
 801ec20:	f340 80aa 	ble.w	801ed78 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ec24:	f1ba 0f00 	cmp.w	sl, #0
 801ec28:	f000 80a6 	beq.w	801ed78 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ec2c:	2d00      	cmp	r5, #0
 801ec2e:	f2c0 809f 	blt.w	801ed70 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ec32:	42ab      	cmp	r3, r5
 801ec34:	f340 809c 	ble.w	801ed70 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ec38:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ec3c:	f816 9002 	ldrb.w	r9, [r6, r2]
 801ec40:	2203      	movs	r2, #3
 801ec42:	fb03 6c02 	mla	ip, r3, r2, r6
 801ec46:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801ec4a:	f89c e002 	ldrb.w	lr, [ip, #2]
 801ec4e:	9704      	str	r7, [sp, #16]
 801ec50:	3501      	adds	r5, #1
 801ec52:	f100 8098 	bmi.w	801ed86 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ec56:	42ab      	cmp	r3, r5
 801ec58:	f340 8095 	ble.w	801ed86 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ec5c:	f1b8 0f00 	cmp.w	r8, #0
 801ec60:	f000 8091 	beq.w	801ed86 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ec64:	f04f 0c03 	mov.w	ip, #3
 801ec68:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801ec6c:	5cb5      	ldrb	r5, [r6, r2]
 801ec6e:	fb03 620c 	mla	r2, r3, ip, r6
 801ec72:	fb03 630c 	mla	r3, r3, ip, r6
 801ec76:	7912      	ldrb	r2, [r2, #4]
 801ec78:	795e      	ldrb	r6, [r3, #5]
 801ec7a:	fa1f f388 	uxth.w	r3, r8
 801ec7e:	fa1f fc8a 	uxth.w	ip, sl
 801ec82:	fb03 f70c 	mul.w	r7, r3, ip
 801ec86:	011b      	lsls	r3, r3, #4
 801ec88:	9708      	str	r7, [sp, #32]
 801ec8a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801ec8e:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801ec92:	1bdb      	subs	r3, r3, r7
 801ec94:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801ec98:	fa1f fc8c 	uxth.w	ip, ip
 801ec9c:	b29b      	uxth	r3, r3
 801ec9e:	9709      	str	r7, [sp, #36]	@ 0x24
 801eca0:	ebaa 0a0c 	sub.w	sl, sl, ip
 801eca4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eca6:	930a      	str	r3, [sp, #40]	@ 0x28
 801eca8:	fa1f fa8a 	uxth.w	sl, sl
 801ecac:	ea6f 0807 	mvn.w	r8, r7
 801ecb0:	9f01      	ldr	r7, [sp, #4]
 801ecb2:	435f      	muls	r7, r3
 801ecb4:	9b05      	ldr	r3, [sp, #20]
 801ecb6:	fa5f f888 	uxtb.w	r8, r8
 801ecba:	fb0a 7703 	mla	r7, sl, r3, r7
 801ecbe:	9b08      	ldr	r3, [sp, #32]
 801ecc0:	fb14 f408 	smulbb	r4, r4, r8
 801ecc4:	fb0c 7709 	mla	r7, ip, r9, r7
 801ecc8:	fb10 f008 	smulbb	r0, r0, r8
 801eccc:	fb11 f108 	smulbb	r1, r1, r8
 801ecd0:	fb03 7705 	mla	r7, r3, r5, r7
 801ecd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecd6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ecda:	fb07 4703 	mla	r7, r7, r3, r4
 801ecde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ece0:	b2bf      	uxth	r7, r7
 801ece2:	1c7c      	adds	r4, r7, #1
 801ece4:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801ece8:	1224      	asrs	r4, r4, #8
 801ecea:	f88b 4000 	strb.w	r4, [fp]
 801ecee:	9c02      	ldr	r4, [sp, #8]
 801ecf0:	435c      	muls	r4, r3
 801ecf2:	9b06      	ldr	r3, [sp, #24]
 801ecf4:	fb0a 4403 	mla	r4, sl, r3, r4
 801ecf8:	9b04      	ldr	r3, [sp, #16]
 801ecfa:	fb0c 4403 	mla	r4, ip, r3, r4
 801ecfe:	9b08      	ldr	r3, [sp, #32]
 801ed00:	fb03 4402 	mla	r4, r3, r2, r4
 801ed04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ed08:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ed0c:	fb04 0403 	mla	r4, r4, r3, r0
 801ed10:	9b03      	ldr	r3, [sp, #12]
 801ed12:	435a      	muls	r2, r3
 801ed14:	b2a4      	uxth	r4, r4
 801ed16:	4613      	mov	r3, r2
 801ed18:	9a07      	ldr	r2, [sp, #28]
 801ed1a:	1c60      	adds	r0, r4, #1
 801ed1c:	fb0a 3a02 	mla	sl, sl, r2, r3
 801ed20:	9b08      	ldr	r3, [sp, #32]
 801ed22:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801ed26:	fb0c ac0e 	mla	ip, ip, lr, sl
 801ed2a:	1224      	asrs	r4, r4, #8
 801ed2c:	fb03 c606 	mla	r6, r3, r6, ip
 801ed30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed32:	f88b 4001 	strb.w	r4, [fp, #1]
 801ed36:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ed3a:	fb06 1103 	mla	r1, r6, r3, r1
 801ed3e:	b289      	uxth	r1, r1
 801ed40:	1c4e      	adds	r6, r1, #1
 801ed42:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801ed46:	1209      	asrs	r1, r1, #8
 801ed48:	f88b 1002 	strb.w	r1, [fp, #2]
 801ed4c:	b00d      	add	sp, #52	@ 0x34
 801ed4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ed56:	9405      	str	r4, [sp, #20]
 801ed58:	e74d      	b.n	801ebf6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801ed5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed5e:	9401      	str	r4, [sp, #4]
 801ed60:	9405      	str	r4, [sp, #20]
 801ed62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ed66:	e756      	b.n	801ec16 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801ed68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed6c:	9401      	str	r4, [sp, #4]
 801ed6e:	e752      	b.n	801ec16 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801ed70:	468e      	mov	lr, r1
 801ed72:	9004      	str	r0, [sp, #16]
 801ed74:	46a1      	mov	r9, r4
 801ed76:	e76b      	b.n	801ec50 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801ed78:	460e      	mov	r6, r1
 801ed7a:	4602      	mov	r2, r0
 801ed7c:	4625      	mov	r5, r4
 801ed7e:	468e      	mov	lr, r1
 801ed80:	9004      	str	r0, [sp, #16]
 801ed82:	46a1      	mov	r9, r4
 801ed84:	e779      	b.n	801ec7a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801ed86:	460e      	mov	r6, r1
 801ed88:	4602      	mov	r2, r0
 801ed8a:	4625      	mov	r5, r4
 801ed8c:	e775      	b.n	801ec7a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801ed8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed92:	b09f      	sub	sp, #124	@ 0x7c
 801ed94:	920e      	str	r2, [sp, #56]	@ 0x38
 801ed96:	9307      	str	r3, [sp, #28]
 801ed98:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801ed9a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801ed9e:	901d      	str	r0, [sp, #116]	@ 0x74
 801eda0:	930c      	str	r3, [sp, #48]	@ 0x30
 801eda2:	6850      	ldr	r0, [r2, #4]
 801eda4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801eda6:	6812      	ldr	r2, [r2, #0]
 801eda8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801edac:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801edb0:	fb00 1303 	mla	r3, r0, r3, r1
 801edb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801edb8:	18d3      	adds	r3, r2, r3
 801edba:	9308      	str	r3, [sp, #32]
 801edbc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801edbe:	681b      	ldr	r3, [r3, #0]
 801edc0:	930a      	str	r3, [sp, #40]	@ 0x28
 801edc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801edc4:	43db      	mvns	r3, r3
 801edc6:	b2db      	uxtb	r3, r3
 801edc8:	9309      	str	r3, [sp, #36]	@ 0x24
 801edca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801edcc:	2b00      	cmp	r3, #0
 801edce:	dc03      	bgt.n	801edd8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801edd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	f340 81f5 	ble.w	801f1c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801edd8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801edda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801edde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ede2:	1e48      	subs	r0, r1, #1
 801ede4:	1e54      	subs	r4, r2, #1
 801ede6:	9b07      	ldr	r3, [sp, #28]
 801ede8:	2b00      	cmp	r3, #0
 801edea:	f340 80d5 	ble.w	801ef98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801edee:	ea5f 452a 	movs.w	r5, sl, asr #16
 801edf2:	ea4f 4328 	mov.w	r3, r8, asr #16
 801edf6:	d406      	bmi.n	801ee06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edf8:	4285      	cmp	r5, r0
 801edfa:	da04      	bge.n	801ee06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	db02      	blt.n	801ee06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ee00:	42a3      	cmp	r3, r4
 801ee02:	f2c0 80ca 	blt.w	801ef9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ee06:	3501      	adds	r5, #1
 801ee08:	f100 80bb 	bmi.w	801ef82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ee0c:	42a9      	cmp	r1, r5
 801ee0e:	f2c0 80b8 	blt.w	801ef82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ee12:	3301      	adds	r3, #1
 801ee14:	f100 80b5 	bmi.w	801ef82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ee18:	429a      	cmp	r2, r3
 801ee1a:	f2c0 80b2 	blt.w	801ef82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ee1e:	9b07      	ldr	r3, [sp, #28]
 801ee20:	9d08      	ldr	r5, [sp, #32]
 801ee22:	930d      	str	r3, [sp, #52]	@ 0x34
 801ee24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	f340 80d6 	ble.w	801efd8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801ee2c:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801ee2e:	ea4f 4428 	mov.w	r4, r8, asr #16
 801ee32:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ee34:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801ee38:	68c6      	ldr	r6, [r0, #12]
 801ee3a:	ea5f 402a 	movs.w	r0, sl, asr #16
 801ee3e:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801ee42:	689b      	ldr	r3, [r3, #8]
 801ee44:	f100 810f 	bmi.w	801f066 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee48:	1e5f      	subs	r7, r3, #1
 801ee4a:	42b8      	cmp	r0, r7
 801ee4c:	f280 810b 	bge.w	801f066 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee50:	2c00      	cmp	r4, #0
 801ee52:	f2c0 8108 	blt.w	801f066 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee56:	1e77      	subs	r7, r6, #1
 801ee58:	42bc      	cmp	r4, r7
 801ee5a:	f280 8104 	bge.w	801f066 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee5e:	b21b      	sxth	r3, r3
 801ee60:	fb04 0003 	mla	r0, r4, r3, r0
 801ee64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ee66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ee6a:	1826      	adds	r6, r4, r0
 801ee6c:	5c24      	ldrb	r4, [r4, r0]
 801ee6e:	78b7      	ldrb	r7, [r6, #2]
 801ee70:	7870      	ldrb	r0, [r6, #1]
 801ee72:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ee74:	7977      	ldrb	r7, [r6, #5]
 801ee76:	f896 e003 	ldrb.w	lr, [r6, #3]
 801ee7a:	f896 c004 	ldrb.w	ip, [r6, #4]
 801ee7e:	9710      	str	r7, [sp, #64]	@ 0x40
 801ee80:	b1c9      	cbz	r1, 801eeb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ee82:	f04f 0b03 	mov.w	fp, #3
 801ee86:	f06f 0904 	mvn.w	r9, #4
 801ee8a:	3605      	adds	r6, #5
 801ee8c:	fb13 930b 	smlabb	r3, r3, fp, r9
 801ee90:	eb06 0b03 	add.w	fp, r6, r3
 801ee94:	5cf3      	ldrb	r3, [r6, r3]
 801ee96:	9311      	str	r3, [sp, #68]	@ 0x44
 801ee98:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801ee9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ee9e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801eea2:	9315      	str	r3, [sp, #84]	@ 0x54
 801eea4:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801eea8:	9312      	str	r3, [sp, #72]	@ 0x48
 801eeaa:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801eeae:	9314      	str	r3, [sp, #80]	@ 0x50
 801eeb0:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801eeb4:	9316      	str	r3, [sp, #88]	@ 0x58
 801eeb6:	b292      	uxth	r2, r2
 801eeb8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801eeba:	b289      	uxth	r1, r1
 801eebc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801eec0:	fb02 f601 	mul.w	r6, r2, r1
 801eec4:	0112      	lsls	r2, r2, #4
 801eec6:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801eeca:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801eece:	1b92      	subs	r2, r2, r6
 801eed0:	b289      	uxth	r1, r1
 801eed2:	b292      	uxth	r2, r2
 801eed4:	eba9 0901 	sub.w	r9, r9, r1
 801eed8:	fb02 fe0e 	mul.w	lr, r2, lr
 801eedc:	fa1f f989 	uxth.w	r9, r9
 801eee0:	fb02 fc0c 	mul.w	ip, r2, ip
 801eee4:	fb09 e404 	mla	r4, r9, r4, lr
 801eee8:	f895 e000 	ldrb.w	lr, [r5]
 801eeec:	fb09 c000 	mla	r0, r9, r0, ip
 801eef0:	fb01 4407 	mla	r4, r1, r7, r4
 801eef4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801eef6:	fb06 4407 	mla	r4, r6, r7, r4
 801eefa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801eefc:	fb1e fe07 	smulbb	lr, lr, r7
 801ef00:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ef04:	fb04 e403 	mla	r4, r4, r3, lr
 801ef08:	b2a4      	uxth	r4, r4
 801ef0a:	f104 0e01 	add.w	lr, r4, #1
 801ef0e:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801ef12:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ef14:	fb01 0004 	mla	r0, r1, r4, r0
 801ef18:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ef1a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ef1e:	fb06 0004 	mla	r0, r6, r4, r0
 801ef22:	786c      	ldrb	r4, [r5, #1]
 801ef24:	f885 e000 	strb.w	lr, [r5]
 801ef28:	fb14 f407 	smulbb	r4, r4, r7
 801ef2c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ef30:	fb00 4003 	mla	r0, r0, r3, r4
 801ef34:	b280      	uxth	r0, r0
 801ef36:	1c44      	adds	r4, r0, #1
 801ef38:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801ef3c:	1200      	asrs	r0, r0, #8
 801ef3e:	7068      	strb	r0, [r5, #1]
 801ef40:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ef42:	4342      	muls	r2, r0
 801ef44:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ef46:	fb09 2200 	mla	r2, r9, r0, r2
 801ef4a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ef4c:	fb01 2100 	mla	r1, r1, r0, r2
 801ef50:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ef52:	fb06 1602 	mla	r6, r6, r2, r1
 801ef56:	78a9      	ldrb	r1, [r5, #2]
 801ef58:	fb11 f107 	smulbb	r1, r1, r7
 801ef5c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ef60:	fb06 1303 	mla	r3, r6, r3, r1
 801ef64:	b29b      	uxth	r3, r3
 801ef66:	1c5e      	adds	r6, r3, #1
 801ef68:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ef6c:	121b      	asrs	r3, r3, #8
 801ef6e:	70ab      	strb	r3, [r5, #2]
 801ef70:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ef72:	3503      	adds	r5, #3
 801ef74:	449a      	add	sl, r3
 801ef76:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ef78:	4498      	add	r8, r3
 801ef7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef7c:	3b01      	subs	r3, #1
 801ef7e:	930d      	str	r3, [sp, #52]	@ 0x34
 801ef80:	e750      	b.n	801ee24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ef82:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ef84:	449a      	add	sl, r3
 801ef86:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ef88:	4498      	add	r8, r3
 801ef8a:	9b07      	ldr	r3, [sp, #28]
 801ef8c:	3b01      	subs	r3, #1
 801ef8e:	9307      	str	r3, [sp, #28]
 801ef90:	9b08      	ldr	r3, [sp, #32]
 801ef92:	3303      	adds	r3, #3
 801ef94:	9308      	str	r3, [sp, #32]
 801ef96:	e726      	b.n	801ede6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ef98:	d026      	beq.n	801efe8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801ef9a:	9b07      	ldr	r3, [sp, #28]
 801ef9c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801ef9e:	3b01      	subs	r3, #1
 801efa0:	fb00 a003 	mla	r0, r0, r3, sl
 801efa4:	1400      	asrs	r0, r0, #16
 801efa6:	f53f af3a 	bmi.w	801ee1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801efaa:	3901      	subs	r1, #1
 801efac:	4288      	cmp	r0, r1
 801efae:	f6bf af36 	bge.w	801ee1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801efb2:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801efb4:	fb01 8303 	mla	r3, r1, r3, r8
 801efb8:	141b      	asrs	r3, r3, #16
 801efba:	f53f af30 	bmi.w	801ee1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801efbe:	3a01      	subs	r2, #1
 801efc0:	4293      	cmp	r3, r2
 801efc2:	f6bf af2c 	bge.w	801ee1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801efc6:	9b08      	ldr	r3, [sp, #32]
 801efc8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801efcc:	1cdd      	adds	r5, r3, #3
 801efce:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801efd2:	f1bc 0f00 	cmp.w	ip, #0
 801efd6:	dc5f      	bgt.n	801f098 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801efd8:	9b07      	ldr	r3, [sp, #28]
 801efda:	9a08      	ldr	r2, [sp, #32]
 801efdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efe0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efe4:	441a      	add	r2, r3
 801efe6:	9208      	str	r2, [sp, #32]
 801efe8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801efea:	2b00      	cmp	r3, #0
 801efec:	f340 80e9 	ble.w	801f1c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801eff0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eff4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eff6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801effa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801effe:	eef0 6a62 	vmov.f32	s13, s5
 801f002:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f006:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f00a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f00e:	ee16 aa90 	vmov	sl, s13
 801f012:	eef0 6a43 	vmov.f32	s13, s6
 801f016:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f01a:	ee16 8a90 	vmov	r8, s13
 801f01e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f022:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f026:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f02a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f02e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f032:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f036:	ee12 2a90 	vmov	r2, s5
 801f03a:	eef0 2a47 	vmov.f32	s5, s14
 801f03e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f042:	ee13 2a10 	vmov	r2, s6
 801f046:	932b      	str	r3, [sp, #172]	@ 0xac
 801f048:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f04a:	eeb0 3a67 	vmov.f32	s6, s15
 801f04e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f052:	932c      	str	r3, [sp, #176]	@ 0xb0
 801f054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f056:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f058:	3b01      	subs	r3, #1
 801f05a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f05c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f05e:	bf08      	it	eq
 801f060:	4613      	moveq	r3, r2
 801f062:	9307      	str	r3, [sp, #28]
 801f064:	e6b1      	b.n	801edca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f066:	1c47      	adds	r7, r0, #1
 801f068:	d482      	bmi.n	801ef70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f06a:	42bb      	cmp	r3, r7
 801f06c:	db80      	blt.n	801ef70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f06e:	1c67      	adds	r7, r4, #1
 801f070:	f53f af7e 	bmi.w	801ef70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f074:	42be      	cmp	r6, r7
 801f076:	f6ff af7b 	blt.w	801ef70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f07a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f07c:	b236      	sxth	r6, r6
 801f07e:	9001      	str	r0, [sp, #4]
 801f080:	b21b      	sxth	r3, r3
 801f082:	9600      	str	r6, [sp, #0]
 801f084:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f086:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801f08a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801f08e:	4629      	mov	r1, r5
 801f090:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f092:	f7ff fd82 	bl	801eb9a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801f096:	e76b      	b.n	801ef70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f098:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801f09a:	ea4f 402a 	mov.w	r0, sl, asr #16
 801f09e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801f0a2:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801f0a6:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801f0aa:	ea4f 4128 	mov.w	r1, r8, asr #16
 801f0ae:	fb07 0101 	mla	r1, r7, r1, r0
 801f0b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f0b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f0b8:	1844      	adds	r4, r0, r1
 801f0ba:	5c40      	ldrb	r0, [r0, r1]
 801f0bc:	78a6      	ldrb	r6, [r4, #2]
 801f0be:	7861      	ldrb	r1, [r4, #1]
 801f0c0:	960f      	str	r6, [sp, #60]	@ 0x3c
 801f0c2:	78e6      	ldrb	r6, [r4, #3]
 801f0c4:	910d      	str	r1, [sp, #52]	@ 0x34
 801f0c6:	9610      	str	r6, [sp, #64]	@ 0x40
 801f0c8:	f894 9004 	ldrb.w	r9, [r4, #4]
 801f0cc:	f894 b005 	ldrb.w	fp, [r4, #5]
 801f0d0:	b192      	cbz	r2, 801f0f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801f0d2:	f06f 0604 	mvn.w	r6, #4
 801f0d6:	2103      	movs	r1, #3
 801f0d8:	3405      	adds	r4, #5
 801f0da:	fb17 6701 	smlabb	r7, r7, r1, r6
 801f0de:	19e6      	adds	r6, r4, r7
 801f0e0:	5de4      	ldrb	r4, [r4, r7]
 801f0e2:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f0e4:	7874      	ldrb	r4, [r6, #1]
 801f0e6:	9419      	str	r4, [sp, #100]	@ 0x64
 801f0e8:	78b4      	ldrb	r4, [r6, #2]
 801f0ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f0ec:	78f4      	ldrb	r4, [r6, #3]
 801f0ee:	9418      	str	r4, [sp, #96]	@ 0x60
 801f0f0:	7934      	ldrb	r4, [r6, #4]
 801f0f2:	941a      	str	r4, [sp, #104]	@ 0x68
 801f0f4:	7974      	ldrb	r4, [r6, #5]
 801f0f6:	941c      	str	r4, [sp, #112]	@ 0x70
 801f0f8:	b29b      	uxth	r3, r3
 801f0fa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f0fc:	b292      	uxth	r2, r2
 801f0fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f100:	3503      	adds	r5, #3
 801f102:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f106:	fb03 f402 	mul.w	r4, r3, r2
 801f10a:	011b      	lsls	r3, r3, #4
 801f10c:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801f110:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801f114:	1b1b      	subs	r3, r3, r4
 801f116:	b292      	uxth	r2, r2
 801f118:	b29b      	uxth	r3, r3
 801f11a:	1ab6      	subs	r6, r6, r2
 801f11c:	435f      	muls	r7, r3
 801f11e:	b2b6      	uxth	r6, r6
 801f120:	fb03 f909 	mul.w	r9, r3, r9
 801f124:	fb03 fb0b 	mul.w	fp, r3, fp
 801f128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f12a:	fb06 7000 	mla	r0, r6, r0, r7
 801f12e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801f130:	fb06 bb03 	mla	fp, r6, r3, fp
 801f134:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f136:	fb02 0007 	mla	r0, r2, r7, r0
 801f13a:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801f13c:	fb02 bb03 	mla	fp, r2, r3, fp
 801f140:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f142:	fb04 0007 	mla	r0, r4, r7, r0
 801f146:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801f14a:	fb17 f701 	smulbb	r7, r7, r1
 801f14e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f152:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f154:	fb00 700e 	mla	r0, r0, lr, r7
 801f158:	fb06 9101 	mla	r1, r6, r1, r9
 801f15c:	b280      	uxth	r0, r0
 801f15e:	1c47      	adds	r7, r0, #1
 801f160:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801f164:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f166:	1200      	asrs	r0, r0, #8
 801f168:	f805 0c06 	strb.w	r0, [r5, #-6]
 801f16c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f16e:	fb02 1100 	mla	r1, r2, r0, r1
 801f172:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801f174:	fb04 1100 	mla	r1, r4, r0, r1
 801f178:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801f17c:	fb04 b403 	mla	r4, r4, r3, fp
 801f180:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801f184:	fb10 f007 	smulbb	r0, r0, r7
 801f188:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f18c:	fb13 f307 	smulbb	r3, r3, r7
 801f190:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f194:	fb01 010e 	mla	r1, r1, lr, r0
 801f198:	fb04 340e 	mla	r4, r4, lr, r3
 801f19c:	b289      	uxth	r1, r1
 801f19e:	b2a4      	uxth	r4, r4
 801f1a0:	1c48      	adds	r0, r1, #1
 801f1a2:	1c63      	adds	r3, r4, #1
 801f1a4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801f1a8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801f1ac:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f1ae:	1209      	asrs	r1, r1, #8
 801f1b0:	1224      	asrs	r4, r4, #8
 801f1b2:	449a      	add	sl, r3
 801f1b4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f1b6:	f805 1c05 	strb.w	r1, [r5, #-5]
 801f1ba:	f805 4c04 	strb.w	r4, [r5, #-4]
 801f1be:	4498      	add	r8, r3
 801f1c0:	e707      	b.n	801efd2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f1c2:	b01f      	add	sp, #124	@ 0x7c
 801f1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f1c8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1cc:	b087      	sub	sp, #28
 801f1ce:	780d      	ldrb	r5, [r1, #0]
 801f1d0:	784c      	ldrb	r4, [r1, #1]
 801f1d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801f1d6:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801f1da:	9004      	str	r0, [sp, #16]
 801f1dc:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801f1e0:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801f1e4:	9005      	str	r0, [sp, #20]
 801f1e6:	fb06 bc03 	mla	ip, r6, r3, fp
 801f1ea:	2e00      	cmp	r6, #0
 801f1ec:	7888      	ldrb	r0, [r1, #2]
 801f1ee:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f1f2:	eb02 090c 	add.w	r9, r2, ip
 801f1f6:	f2c0 8084 	blt.w	801f302 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f1fa:	42b7      	cmp	r7, r6
 801f1fc:	f340 8081 	ble.w	801f302 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f200:	f1bb 0f00 	cmp.w	fp, #0
 801f204:	db79      	blt.n	801f2fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f206:	455b      	cmp	r3, fp
 801f208:	dd77      	ble.n	801f2fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f20a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f20e:	9201      	str	r2, [sp, #4]
 801f210:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f214:	9202      	str	r2, [sp, #8]
 801f216:	f899 2002 	ldrb.w	r2, [r9, #2]
 801f21a:	9203      	str	r2, [sp, #12]
 801f21c:	f11b 0201 	adds.w	r2, fp, #1
 801f220:	d476      	bmi.n	801f310 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f222:	4293      	cmp	r3, r2
 801f224:	dd74      	ble.n	801f310 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f226:	9a04      	ldr	r2, [sp, #16]
 801f228:	2a00      	cmp	r2, #0
 801f22a:	d071      	beq.n	801f310 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f22c:	f899 8003 	ldrb.w	r8, [r9, #3]
 801f230:	f899 c004 	ldrb.w	ip, [r9, #4]
 801f234:	f899 a005 	ldrb.w	sl, [r9, #5]
 801f238:	3601      	adds	r6, #1
 801f23a:	d471      	bmi.n	801f320 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f23c:	42b7      	cmp	r7, r6
 801f23e:	dd6f      	ble.n	801f320 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f240:	9a05      	ldr	r2, [sp, #20]
 801f242:	2a00      	cmp	r2, #0
 801f244:	d06c      	beq.n	801f320 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f246:	f1bb 0f00 	cmp.w	fp, #0
 801f24a:	db65      	blt.n	801f318 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f24c:	455b      	cmp	r3, fp
 801f24e:	dd63      	ble.n	801f318 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f250:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f254:	f819 e002 	ldrb.w	lr, [r9, r2]
 801f258:	2203      	movs	r2, #3
 801f25a:	fb03 9602 	mla	r6, r3, r2, r9
 801f25e:	7877      	ldrb	r7, [r6, #1]
 801f260:	78b6      	ldrb	r6, [r6, #2]
 801f262:	f11b 0b01 	adds.w	fp, fp, #1
 801f266:	d40c      	bmi.n	801f282 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f268:	455b      	cmp	r3, fp
 801f26a:	dd0a      	ble.n	801f282 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f26c:	9a04      	ldr	r2, [sp, #16]
 801f26e:	b142      	cbz	r2, 801f282 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f270:	2203      	movs	r2, #3
 801f272:	fb13 2002 	smlabb	r0, r3, r2, r2
 801f276:	f819 5000 	ldrb.w	r5, [r9, r0]
 801f27a:	fb03 9002 	mla	r0, r3, r2, r9
 801f27e:	7904      	ldrb	r4, [r0, #4]
 801f280:	7940      	ldrb	r0, [r0, #5]
 801f282:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f286:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f28a:	fb03 fb02 	mul.w	fp, r3, r2
 801f28e:	011b      	lsls	r3, r3, #4
 801f290:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801f294:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801f298:	eba3 030b 	sub.w	r3, r3, fp
 801f29c:	b292      	uxth	r2, r2
 801f29e:	b29b      	uxth	r3, r3
 801f2a0:	eba9 0902 	sub.w	r9, r9, r2
 801f2a4:	9304      	str	r3, [sp, #16]
 801f2a6:	fa1f f989 	uxth.w	r9, r9
 801f2aa:	fb03 f808 	mul.w	r8, r3, r8
 801f2ae:	9b01      	ldr	r3, [sp, #4]
 801f2b0:	fb09 8803 	mla	r8, r9, r3, r8
 801f2b4:	9b04      	ldr	r3, [sp, #16]
 801f2b6:	fb03 fc0c 	mul.w	ip, r3, ip
 801f2ba:	9b02      	ldr	r3, [sp, #8]
 801f2bc:	fb02 880e 	mla	r8, r2, lr, r8
 801f2c0:	fb09 cc03 	mla	ip, r9, r3, ip
 801f2c4:	9b04      	ldr	r3, [sp, #16]
 801f2c6:	fb0b 8805 	mla	r8, fp, r5, r8
 801f2ca:	fb02 c707 	mla	r7, r2, r7, ip
 801f2ce:	fb03 f30a 	mul.w	r3, r3, sl
 801f2d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f2d6:	fb0b 7404 	mla	r4, fp, r4, r7
 801f2da:	f881 8000 	strb.w	r8, [r1]
 801f2de:	1224      	asrs	r4, r4, #8
 801f2e0:	704c      	strb	r4, [r1, #1]
 801f2e2:	9c03      	ldr	r4, [sp, #12]
 801f2e4:	fb09 3904 	mla	r9, r9, r4, r3
 801f2e8:	fb02 9206 	mla	r2, r2, r6, r9
 801f2ec:	fb0b 2000 	mla	r0, fp, r0, r2
 801f2f0:	1200      	asrs	r0, r0, #8
 801f2f2:	7088      	strb	r0, [r1, #2]
 801f2f4:	b007      	add	sp, #28
 801f2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2fa:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f2fe:	9501      	str	r5, [sp, #4]
 801f300:	e78c      	b.n	801f21c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801f302:	4682      	mov	sl, r0
 801f304:	46a4      	mov	ip, r4
 801f306:	46a8      	mov	r8, r5
 801f308:	9501      	str	r5, [sp, #4]
 801f30a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f30e:	e793      	b.n	801f238 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f310:	4682      	mov	sl, r0
 801f312:	46a4      	mov	ip, r4
 801f314:	46a8      	mov	r8, r5
 801f316:	e78f      	b.n	801f238 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f318:	4606      	mov	r6, r0
 801f31a:	4627      	mov	r7, r4
 801f31c:	46ae      	mov	lr, r5
 801f31e:	e7a0      	b.n	801f262 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801f320:	4606      	mov	r6, r0
 801f322:	4627      	mov	r7, r4
 801f324:	46ae      	mov	lr, r5
 801f326:	e7ac      	b.n	801f282 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801f328 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f32c:	b09b      	sub	sp, #108	@ 0x6c
 801f32e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f330:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801f332:	9019      	str	r0, [sp, #100]	@ 0x64
 801f334:	9109      	str	r1, [sp, #36]	@ 0x24
 801f336:	6850      	ldr	r0, [r2, #4]
 801f338:	9306      	str	r3, [sp, #24]
 801f33a:	6812      	ldr	r2, [r2, #0]
 801f33c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801f340:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801f344:	fb00 1303 	mla	r3, r0, r3, r1
 801f348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f34c:	18d3      	adds	r3, r2, r3
 801f34e:	9307      	str	r3, [sp, #28]
 801f350:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	9308      	str	r3, [sp, #32]
 801f356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f358:	2b00      	cmp	r3, #0
 801f35a:	dc03      	bgt.n	801f364 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f35c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f35e:	2b00      	cmp	r3, #0
 801f360:	f340 81ab 	ble.w	801f6ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f364:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f366:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f36a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f36e:	1e48      	subs	r0, r1, #1
 801f370:	1e55      	subs	r5, r2, #1
 801f372:	9b06      	ldr	r3, [sp, #24]
 801f374:	2b00      	cmp	r3, #0
 801f376:	f340 80b1 	ble.w	801f4dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f37a:	ea5f 462b 	movs.w	r6, fp, asr #16
 801f37e:	ea4f 4324 	mov.w	r3, r4, asr #16
 801f382:	d406      	bmi.n	801f392 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f384:	4286      	cmp	r6, r0
 801f386:	da04      	bge.n	801f392 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f388:	2b00      	cmp	r3, #0
 801f38a:	db02      	blt.n	801f392 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f38c:	42ab      	cmp	r3, r5
 801f38e:	f2c0 80a6 	blt.w	801f4de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f392:	3601      	adds	r6, #1
 801f394:	f100 8097 	bmi.w	801f4c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f398:	42b1      	cmp	r1, r6
 801f39a:	f2c0 8094 	blt.w	801f4c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f39e:	3301      	adds	r3, #1
 801f3a0:	f100 8091 	bmi.w	801f4c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f3a4:	429a      	cmp	r2, r3
 801f3a6:	f2c0 808e 	blt.w	801f4c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f3aa:	9b06      	ldr	r3, [sp, #24]
 801f3ac:	9e07      	ldr	r6, [sp, #28]
 801f3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801f3b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	f340 80b0 	ble.w	801f518 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f3b8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801f3ba:	1425      	asrs	r5, r4, #16
 801f3bc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f3be:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801f3c2:	68c7      	ldr	r7, [r0, #12]
 801f3c4:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f3c8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f3cc:	689b      	ldr	r3, [r3, #8]
 801f3ce:	f100 80ea 	bmi.w	801f5a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3d2:	f103 3cff 	add.w	ip, r3, #4294967295
 801f3d6:	4560      	cmp	r0, ip
 801f3d8:	f280 80e5 	bge.w	801f5a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3dc:	2d00      	cmp	r5, #0
 801f3de:	f2c0 80e2 	blt.w	801f5a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3e2:	f107 3cff 	add.w	ip, r7, #4294967295
 801f3e6:	4565      	cmp	r5, ip
 801f3e8:	f280 80dd 	bge.w	801f5a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3ec:	b21b      	sxth	r3, r3
 801f3ee:	fb05 0003 	mla	r0, r5, r3, r0
 801f3f2:	9d08      	ldr	r5, [sp, #32]
 801f3f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f3f8:	182f      	adds	r7, r5, r0
 801f3fa:	5c2d      	ldrb	r5, [r5, r0]
 801f3fc:	7878      	ldrb	r0, [r7, #1]
 801f3fe:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f402:	900c      	str	r0, [sp, #48]	@ 0x30
 801f404:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f408:	f897 8004 	ldrb.w	r8, [r7, #4]
 801f40c:	f897 a005 	ldrb.w	sl, [r7, #5]
 801f410:	b1c9      	cbz	r1, 801f446 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f412:	f04f 0c03 	mov.w	ip, #3
 801f416:	f06f 0004 	mvn.w	r0, #4
 801f41a:	3705      	adds	r7, #5
 801f41c:	fb13 030c 	smlabb	r3, r3, ip, r0
 801f420:	eb07 0c03 	add.w	ip, r7, r3
 801f424:	5cfb      	ldrb	r3, [r7, r3]
 801f426:	930d      	str	r3, [sp, #52]	@ 0x34
 801f428:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f42c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f42e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f432:	9311      	str	r3, [sp, #68]	@ 0x44
 801f434:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801f438:	930e      	str	r3, [sp, #56]	@ 0x38
 801f43a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801f43e:	9310      	str	r3, [sp, #64]	@ 0x40
 801f440:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801f444:	9312      	str	r3, [sp, #72]	@ 0x48
 801f446:	b292      	uxth	r2, r2
 801f448:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f44a:	b289      	uxth	r1, r1
 801f44c:	fb02 f301 	mul.w	r3, r2, r1
 801f450:	0112      	lsls	r2, r2, #4
 801f452:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801f456:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801f45a:	1ad2      	subs	r2, r2, r3
 801f45c:	b289      	uxth	r1, r1
 801f45e:	b292      	uxth	r2, r2
 801f460:	1a7f      	subs	r7, r7, r1
 801f462:	fb02 f909 	mul.w	r9, r2, r9
 801f466:	b2bf      	uxth	r7, r7
 801f468:	fb02 f808 	mul.w	r8, r2, r8
 801f46c:	fb02 fa0a 	mul.w	sl, r2, sl
 801f470:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f472:	fb07 9905 	mla	r9, r7, r5, r9
 801f476:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f478:	fb07 8800 	mla	r8, r7, r0, r8
 801f47c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f47e:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f482:	fb01 9905 	mla	r9, r1, r5, r9
 801f486:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801f488:	fb01 8800 	mla	r8, r1, r0, r8
 801f48c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f48e:	fb01 a102 	mla	r1, r1, r2, sl
 801f492:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f494:	fb03 9905 	mla	r9, r3, r5, r9
 801f498:	fb03 8800 	mla	r8, r3, r0, r8
 801f49c:	fb03 1302 	mla	r3, r3, r2, r1
 801f4a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f4a4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f4a8:	121b      	asrs	r3, r3, #8
 801f4aa:	f886 9000 	strb.w	r9, [r6]
 801f4ae:	f886 8001 	strb.w	r8, [r6, #1]
 801f4b2:	70b3      	strb	r3, [r6, #2]
 801f4b4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f4b6:	3603      	adds	r6, #3
 801f4b8:	449b      	add	fp, r3
 801f4ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f4bc:	441c      	add	r4, r3
 801f4be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f4c0:	3b01      	subs	r3, #1
 801f4c2:	930a      	str	r3, [sp, #40]	@ 0x28
 801f4c4:	e774      	b.n	801f3b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f4c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f4c8:	449b      	add	fp, r3
 801f4ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f4cc:	441c      	add	r4, r3
 801f4ce:	9b06      	ldr	r3, [sp, #24]
 801f4d0:	3b01      	subs	r3, #1
 801f4d2:	9306      	str	r3, [sp, #24]
 801f4d4:	9b07      	ldr	r3, [sp, #28]
 801f4d6:	3303      	adds	r3, #3
 801f4d8:	9307      	str	r3, [sp, #28]
 801f4da:	e74a      	b.n	801f372 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f4dc:	d024      	beq.n	801f528 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f4de:	9b06      	ldr	r3, [sp, #24]
 801f4e0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801f4e2:	3b01      	subs	r3, #1
 801f4e4:	fb00 b003 	mla	r0, r0, r3, fp
 801f4e8:	1400      	asrs	r0, r0, #16
 801f4ea:	f53f af5e 	bmi.w	801f3aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4ee:	3901      	subs	r1, #1
 801f4f0:	4288      	cmp	r0, r1
 801f4f2:	f6bf af5a 	bge.w	801f3aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4f6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f4f8:	fb01 4303 	mla	r3, r1, r3, r4
 801f4fc:	141b      	asrs	r3, r3, #16
 801f4fe:	f53f af54 	bmi.w	801f3aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f502:	3a01      	subs	r2, #1
 801f504:	4293      	cmp	r3, r2
 801f506:	f6bf af50 	bge.w	801f3aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f50a:	9b07      	ldr	r3, [sp, #28]
 801f50c:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f510:	1cde      	adds	r6, r3, #3
 801f512:	f1be 0f00 	cmp.w	lr, #0
 801f516:	dc5f      	bgt.n	801f5d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f518:	9b06      	ldr	r3, [sp, #24]
 801f51a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f51e:	9b07      	ldr	r3, [sp, #28]
 801f520:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f524:	4423      	add	r3, r4
 801f526:	9307      	str	r3, [sp, #28]
 801f528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	f340 80c5 	ble.w	801f6ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f534:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f536:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f53a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f53e:	eef0 6a62 	vmov.f32	s13, s5
 801f542:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f546:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f54a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f54e:	ee16 ba90 	vmov	fp, s13
 801f552:	eef0 6a43 	vmov.f32	s13, s6
 801f556:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f55a:	ee16 4a90 	vmov	r4, s13
 801f55e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f562:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f566:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f56a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f56e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f572:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f576:	ee12 2a90 	vmov	r2, s5
 801f57a:	eef0 2a47 	vmov.f32	s5, s14
 801f57e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f582:	ee13 2a10 	vmov	r2, s6
 801f586:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f588:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f58a:	eeb0 3a67 	vmov.f32	s6, s15
 801f58e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f592:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f596:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f598:	3b01      	subs	r3, #1
 801f59a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f59c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f59e:	bf08      	it	eq
 801f5a0:	4613      	moveq	r3, r2
 801f5a2:	9306      	str	r3, [sp, #24]
 801f5a4:	e6d7      	b.n	801f356 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f5a6:	f110 0c01 	adds.w	ip, r0, #1
 801f5aa:	d483      	bmi.n	801f4b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f5ac:	4563      	cmp	r3, ip
 801f5ae:	db81      	blt.n	801f4b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f5b0:	f115 0c01 	adds.w	ip, r5, #1
 801f5b4:	f53f af7e 	bmi.w	801f4b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f5b8:	4567      	cmp	r7, ip
 801f5ba:	f6ff af7b 	blt.w	801f4b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f5be:	b23f      	sxth	r7, r7
 801f5c0:	b21b      	sxth	r3, r3
 801f5c2:	9700      	str	r7, [sp, #0]
 801f5c4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801f5c8:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801f5cc:	9a08      	ldr	r2, [sp, #32]
 801f5ce:	4631      	mov	r1, r6
 801f5d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f5d2:	f7ff fdf9 	bl	801f1c8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f5d6:	e76d      	b.n	801f4b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f5d8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801f5da:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f5de:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f5e2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f5e6:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f5ea:	1421      	asrs	r1, r4, #16
 801f5ec:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5ee:	fb0c 0101 	mla	r1, ip, r1, r0
 801f5f2:	9808      	ldr	r0, [sp, #32]
 801f5f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f5f8:	1845      	adds	r5, r0, r1
 801f5fa:	5c40      	ldrb	r0, [r0, r1]
 801f5fc:	796f      	ldrb	r7, [r5, #5]
 801f5fe:	7869      	ldrb	r1, [r5, #1]
 801f600:	f895 8002 	ldrb.w	r8, [r5, #2]
 801f604:	f895 a003 	ldrb.w	sl, [r5, #3]
 801f608:	f895 9004 	ldrb.w	r9, [r5, #4]
 801f60c:	970c      	str	r7, [sp, #48]	@ 0x30
 801f60e:	b1a2      	cbz	r2, 801f63a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801f610:	2703      	movs	r7, #3
 801f612:	f06f 0304 	mvn.w	r3, #4
 801f616:	3505      	adds	r5, #5
 801f618:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801f61c:	eb05 070c 	add.w	r7, r5, ip
 801f620:	f815 500c 	ldrb.w	r5, [r5, ip]
 801f624:	9513      	str	r5, [sp, #76]	@ 0x4c
 801f626:	787d      	ldrb	r5, [r7, #1]
 801f628:	9515      	str	r5, [sp, #84]	@ 0x54
 801f62a:	78bd      	ldrb	r5, [r7, #2]
 801f62c:	9517      	str	r5, [sp, #92]	@ 0x5c
 801f62e:	78fd      	ldrb	r5, [r7, #3]
 801f630:	9514      	str	r5, [sp, #80]	@ 0x50
 801f632:	793d      	ldrb	r5, [r7, #4]
 801f634:	9516      	str	r5, [sp, #88]	@ 0x58
 801f636:	797d      	ldrb	r5, [r7, #5]
 801f638:	9518      	str	r5, [sp, #96]	@ 0x60
 801f63a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f63e:	b292      	uxth	r2, r2
 801f640:	3603      	adds	r6, #3
 801f642:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f646:	fb03 f502 	mul.w	r5, r3, r2
 801f64a:	011b      	lsls	r3, r3, #4
 801f64c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801f650:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801f654:	1b5b      	subs	r3, r3, r5
 801f656:	b292      	uxth	r2, r2
 801f658:	b29b      	uxth	r3, r3
 801f65a:	1abf      	subs	r7, r7, r2
 801f65c:	fb03 f909 	mul.w	r9, r3, r9
 801f660:	b2bf      	uxth	r7, r7
 801f662:	fb03 fa0a 	mul.w	sl, r3, sl
 801f666:	fb07 9901 	mla	r9, r7, r1, r9
 801f66a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801f66c:	fb07 aa00 	mla	sl, r7, r0, sl
 801f670:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f672:	fb02 9901 	mla	r9, r2, r1, r9
 801f676:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f678:	fb02 aa00 	mla	sl, r2, r0, sl
 801f67c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f67e:	fb05 9901 	mla	r9, r5, r1, r9
 801f682:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f684:	fb05 aa00 	mla	sl, r5, r0, sl
 801f688:	434b      	muls	r3, r1
 801f68a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f68c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f690:	fb07 3308 	mla	r3, r7, r8, r3
 801f694:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f698:	f806 ac06 	strb.w	sl, [r6, #-6]
 801f69c:	fb02 3201 	mla	r2, r2, r1, r3
 801f6a0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f6a2:	f806 9c05 	strb.w	r9, [r6, #-5]
 801f6a6:	fb05 2503 	mla	r5, r5, r3, r2
 801f6aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f6ac:	122d      	asrs	r5, r5, #8
 801f6ae:	449b      	add	fp, r3
 801f6b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f6b2:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f6b6:	441c      	add	r4, r3
 801f6b8:	e72b      	b.n	801f512 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f6ba:	b01b      	add	sp, #108	@ 0x6c
 801f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f6c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6c4:	b087      	sub	sp, #28
 801f6c6:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801f6ca:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801f6ce:	fb05 7003 	mla	r0, r5, r3, r7
 801f6d2:	2d00      	cmp	r5, #0
 801f6d4:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801f6d8:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801f6dc:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f6e0:	f2c0 811f 	blt.w	801f922 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f6e4:	45a8      	cmp	r8, r5
 801f6e6:	f340 811c 	ble.w	801f922 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f6ea:	2f00      	cmp	r7, #0
 801f6ec:	f2c0 8117 	blt.w	801f91e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f6f0:	42bb      	cmp	r3, r7
 801f6f2:	f340 8114 	ble.w	801f91e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f6f6:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f6fa:	1c7a      	adds	r2, r7, #1
 801f6fc:	f100 8114 	bmi.w	801f928 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f700:	4293      	cmp	r3, r2
 801f702:	f340 8111 	ble.w	801f928 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f706:	2c00      	cmp	r4, #0
 801f708:	f000 8110 	beq.w	801f92c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801f70c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f710:	3501      	adds	r5, #1
 801f712:	f100 810f 	bmi.w	801f934 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f716:	45a8      	cmp	r8, r5
 801f718:	f340 810c 	ble.w	801f934 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f71c:	f1be 0f00 	cmp.w	lr, #0
 801f720:	f000 810b 	beq.w	801f93a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801f724:	2f00      	cmp	r7, #0
 801f726:	f2c0 8103 	blt.w	801f930 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f72a:	42bb      	cmp	r3, r7
 801f72c:	f340 8100 	ble.w	801f930 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f730:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f734:	3701      	adds	r7, #1
 801f736:	f100 8103 	bmi.w	801f940 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f73a:	42bb      	cmp	r3, r7
 801f73c:	f340 8100 	ble.w	801f940 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f740:	2c00      	cmp	r4, #0
 801f742:	f000 80ff 	beq.w	801f944 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801f746:	3301      	adds	r3, #1
 801f748:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f74c:	fa1f fc84 	uxth.w	ip, r4
 801f750:	fa1f fe8e 	uxth.w	lr, lr
 801f754:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f758:	fb0c f90e 	mul.w	r9, ip, lr
 801f75c:	0e13      	lsrs	r3, r2, #24
 801f75e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f762:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f766:	9302      	str	r3, [sp, #8]
 801f768:	ebac 0709 	sub.w	r7, ip, r9
 801f76c:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801f770:	fa1f f48e 	uxth.w	r4, lr
 801f774:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801f778:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f77c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f780:	fb0a fe0e 	mul.w	lr, sl, lr
 801f784:	1b1b      	subs	r3, r3, r4
 801f786:	fb0a f606 	mul.w	r6, sl, r6
 801f78a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f78e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f792:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801f796:	b29b      	uxth	r3, r3
 801f798:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f79c:	b2bf      	uxth	r7, r7
 801f79e:	9301      	str	r3, [sp, #4]
 801f7a0:	44e6      	add	lr, ip
 801f7a2:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801f7a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7aa:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f7ae:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801f7b2:	9303      	str	r3, [sp, #12]
 801f7b4:	0a33      	lsrs	r3, r6, #8
 801f7b6:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801f7ba:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f7be:	9304      	str	r3, [sp, #16]
 801f7c0:	fb0b f606 	mul.w	r6, fp, r6
 801f7c4:	fb0b f000 	mul.w	r0, fp, r0
 801f7c8:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f7cc:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f7d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f7d4:	44b6      	add	lr, r6
 801f7d6:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801f7da:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f7de:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801f7e2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801f7e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7ea:	fb08 f606 	mul.w	r6, r8, r6
 801f7ee:	0a03      	lsrs	r3, r0, #8
 801f7f0:	fb08 f505 	mul.w	r5, r8, r5
 801f7f4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f7f8:	0a30      	lsrs	r0, r6, #8
 801f7fa:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f7fe:	9305      	str	r3, [sp, #20]
 801f800:	0e13      	lsrs	r3, r2, #24
 801f802:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f806:	fb0e fe07 	mul.w	lr, lr, r7
 801f80a:	4430      	add	r0, r6
 801f80c:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801f810:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f814:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801f818:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f81c:	0a00      	lsrs	r0, r0, #8
 801f81e:	435e      	muls	r6, r3
 801f820:	0a2d      	lsrs	r5, r5, #8
 801f822:	435a      	muls	r2, r3
 801f824:	9b03      	ldr	r3, [sp, #12]
 801f826:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f82a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f82e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f832:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f836:	44b4      	add	ip, r6
 801f838:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801f83c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f840:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f844:	9e01      	ldr	r6, [sp, #4]
 801f846:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f84a:	fb03 ee06 	mla	lr, r3, r6, lr
 801f84e:	9b04      	ldr	r3, [sp, #16]
 801f850:	0a12      	lsrs	r2, r2, #8
 801f852:	fb0c ee09 	mla	lr, ip, r9, lr
 801f856:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801f85a:	9b05      	ldr	r3, [sp, #20]
 801f85c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f860:	fb00 ee04 	mla	lr, r0, r4, lr
 801f864:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f868:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801f86c:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801f870:	9b01      	ldr	r3, [sp, #4]
 801f872:	fb07 fe0e 	mul.w	lr, r7, lr
 801f876:	fb07 f70b 	mul.w	r7, r7, fp
 801f87a:	fb03 ee06 	mla	lr, r3, r6, lr
 801f87e:	fb03 730a 	mla	r3, r3, sl, r7
 801f882:	fb09 e202 	mla	r2, r9, r2, lr
 801f886:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801f88a:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f88e:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801f892:	fb04 3408 	mla	r4, r4, r8, r3
 801f896:	9b02      	ldr	r3, [sp, #8]
 801f898:	b292      	uxth	r2, r2
 801f89a:	fb09 4903 	mla	r9, r9, r3, r4
 801f89e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f8a2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f8a6:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801f8aa:	fb09 f902 	mul.w	r9, r9, r2
 801f8ae:	ea40 0e0e 	orr.w	lr, r0, lr
 801f8b2:	f109 0301 	add.w	r3, r9, #1
 801f8b6:	fa5f f08e 	uxtb.w	r0, lr
 801f8ba:	fb10 f002 	smulbb	r0, r0, r2
 801f8be:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f8c2:	780b      	ldrb	r3, [r1, #0]
 801f8c4:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801f8c8:	fa5f f989 	uxtb.w	r9, r9
 801f8cc:	fb03 0309 	mla	r3, r3, r9, r0
 801f8d0:	b29b      	uxth	r3, r3
 801f8d2:	1c58      	adds	r0, r3, #1
 801f8d4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f8d8:	7848      	ldrb	r0, [r1, #1]
 801f8da:	fb10 f009 	smulbb	r0, r0, r9
 801f8de:	121b      	asrs	r3, r3, #8
 801f8e0:	700b      	strb	r3, [r1, #0]
 801f8e2:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801f8e6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f8ea:	fb03 0302 	mla	r3, r3, r2, r0
 801f8ee:	b29b      	uxth	r3, r3
 801f8f0:	1c58      	adds	r0, r3, #1
 801f8f2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f8f6:	121b      	asrs	r3, r3, #8
 801f8f8:	704b      	strb	r3, [r1, #1]
 801f8fa:	788b      	ldrb	r3, [r1, #2]
 801f8fc:	fb13 f909 	smulbb	r9, r3, r9
 801f900:	fb0e 9e02 	mla	lr, lr, r2, r9
 801f904:	fa1f fe8e 	uxth.w	lr, lr
 801f908:	f10e 0301 	add.w	r3, lr, #1
 801f90c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801f910:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f914:	f881 e002 	strb.w	lr, [r1, #2]
 801f918:	b007      	add	sp, #28
 801f91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f91e:	2600      	movs	r6, #0
 801f920:	e6eb      	b.n	801f6fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801f922:	2000      	movs	r0, #0
 801f924:	4606      	mov	r6, r0
 801f926:	e6f3      	b.n	801f710 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f928:	2000      	movs	r0, #0
 801f92a:	e6f1      	b.n	801f710 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f92c:	4620      	mov	r0, r4
 801f92e:	e6ef      	b.n	801f710 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f930:	2500      	movs	r5, #0
 801f932:	e6ff      	b.n	801f734 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801f934:	2200      	movs	r2, #0
 801f936:	4615      	mov	r5, r2
 801f938:	e708      	b.n	801f74c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f93a:	4672      	mov	r2, lr
 801f93c:	4675      	mov	r5, lr
 801f93e:	e705      	b.n	801f74c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f940:	2200      	movs	r2, #0
 801f942:	e703      	b.n	801f74c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f944:	4622      	mov	r2, r4
 801f946:	e701      	b.n	801f74c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801f948 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f94c:	b09d      	sub	sp, #116	@ 0x74
 801f94e:	9219      	str	r2, [sp, #100]	@ 0x64
 801f950:	9307      	str	r3, [sp, #28]
 801f952:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801f954:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801f958:	901b      	str	r0, [sp, #108]	@ 0x6c
 801f95a:	931a      	str	r3, [sp, #104]	@ 0x68
 801f95c:	6850      	ldr	r0, [r2, #4]
 801f95e:	9117      	str	r1, [sp, #92]	@ 0x5c
 801f960:	6812      	ldr	r2, [r2, #0]
 801f962:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801f966:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801f96a:	fb00 1303 	mla	r3, r0, r3, r1
 801f96e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f972:	18d3      	adds	r3, r2, r3
 801f974:	930a      	str	r3, [sp, #40]	@ 0x28
 801f976:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f978:	681b      	ldr	r3, [r3, #0]
 801f97a:	9310      	str	r3, [sp, #64]	@ 0x40
 801f97c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801f980:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f984:	2b00      	cmp	r3, #0
 801f986:	dc03      	bgt.n	801f990 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	f340 8368 	ble.w	8020060 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f990:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f992:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f996:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f99a:	1e48      	subs	r0, r1, #1
 801f99c:	1e57      	subs	r7, r2, #1
 801f99e:	9b07      	ldr	r3, [sp, #28]
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	f340 8187 	ble.w	801fcb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801f9a6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f9aa:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f9ae:	d406      	bmi.n	801f9be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f9b0:	4584      	cmp	ip, r0
 801f9b2:	da04      	bge.n	801f9be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f9b4:	2b00      	cmp	r3, #0
 801f9b6:	db02      	blt.n	801f9be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f9b8:	42bb      	cmp	r3, r7
 801f9ba:	f2c0 817c 	blt.w	801fcb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f9be:	f11c 0c01 	adds.w	ip, ip, #1
 801f9c2:	f100 816c 	bmi.w	801fc9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f9c6:	4561      	cmp	r1, ip
 801f9c8:	f2c0 8169 	blt.w	801fc9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f9cc:	3301      	adds	r3, #1
 801f9ce:	f100 8166 	bmi.w	801fc9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f9d2:	429a      	cmp	r2, r3
 801f9d4:	f2c0 8163 	blt.w	801fc9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f9d8:	9b07      	ldr	r3, [sp, #28]
 801f9da:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801f9dc:	9318      	str	r3, [sp, #96]	@ 0x60
 801f9de:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f9e0:	2b00      	cmp	r3, #0
 801f9e2:	f340 8186 	ble.w	801fcf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f9e6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f9e8:	142a      	asrs	r2, r5, #16
 801f9ea:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f9ee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f9f2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f9f6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f9fa:	f100 81cb 	bmi.w	801fd94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f9fe:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fa02:	4542      	cmp	r2, r8
 801fa04:	f280 81c6 	bge.w	801fd94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fa08:	2800      	cmp	r0, #0
 801fa0a:	f2c0 81c3 	blt.w	801fd94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fa0e:	f103 38ff 	add.w	r8, r3, #4294967295
 801fa12:	4540      	cmp	r0, r8
 801fa14:	f280 81be 	bge.w	801fd94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fa18:	fa0f f38e 	sxth.w	r3, lr
 801fa1c:	fb00 2203 	mla	r2, r0, r3, r2
 801fa20:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fa22:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801fa26:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801fa2a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801fa2e:	2900      	cmp	r1, #0
 801fa30:	f000 81a6 	beq.w	801fd80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801fa34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fa38:	900c      	str	r0, [sp, #48]	@ 0x30
 801fa3a:	0e00      	lsrs	r0, r0, #24
 801fa3c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801fa3e:	f1bc 0f00 	cmp.w	ip, #0
 801fa42:	d00f      	beq.n	801fa64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801fa48:	3b01      	subs	r3, #1
 801fa4a:	009b      	lsls	r3, r3, #2
 801fa4c:	3304      	adds	r3, #4
 801fa4e:	eb08 0003 	add.w	r0, r8, r3
 801fa52:	f858 3003 	ldr.w	r3, [r8, r3]
 801fa56:	9308      	str	r3, [sp, #32]
 801fa58:	0e1b      	lsrs	r3, r3, #24
 801fa5a:	9311      	str	r3, [sp, #68]	@ 0x44
 801fa5c:	6843      	ldr	r3, [r0, #4]
 801fa5e:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa60:	0e1b      	lsrs	r3, r3, #24
 801fa62:	9314      	str	r3, [sp, #80]	@ 0x50
 801fa64:	b289      	uxth	r1, r1
 801fa66:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fa68:	fa1f fc8c 	uxth.w	ip, ip
 801fa6c:	0108      	lsls	r0, r1, #4
 801fa6e:	fb01 f90c 	mul.w	r9, r1, ip
 801fa72:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801fa76:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801fa7a:	eba0 0809 	sub.w	r8, r0, r9
 801fa7e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fa80:	fa1f f18c 	uxth.w	r1, ip
 801fa84:	fa1f f888 	uxth.w	r8, r8
 801fa88:	1a5b      	subs	r3, r3, r1
 801fa8a:	fb08 f000 	mul.w	r0, r8, r0
 801fa8e:	b29b      	uxth	r3, r3
 801fa90:	fb03 000e 	mla	r0, r3, lr, r0
 801fa94:	fb01 0004 	mla	r0, r1, r4, r0
 801fa98:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fa9a:	fb09 0004 	mla	r0, r9, r4, r0
 801fa9e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801faa2:	2800      	cmp	r0, #0
 801faa4:	f000 80f2 	beq.w	801fc8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801faa8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801faac:	d01b      	beq.n	801fae6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801faae:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801fab2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fab6:	fb0e fa0a 	mul.w	sl, lr, sl
 801faba:	fb0e fe02 	mul.w	lr, lr, r2
 801fabe:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fac2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fac6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801faca:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801face:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fad2:	4452      	add	r2, sl
 801fad4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fad8:	0a12      	lsrs	r2, r2, #8
 801fada:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801fade:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801fae2:	ea42 020c 	orr.w	r2, r2, ip
 801fae6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fae8:	2cff      	cmp	r4, #255	@ 0xff
 801faea:	d021      	beq.n	801fb30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801faec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801faee:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801faf2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801faf4:	fb04 fb0b 	mul.w	fp, r4, fp
 801faf8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fafa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fafe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fb00:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb04:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb08:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb10:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb14:	44de      	add	lr, fp
 801fb16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb22:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb26:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb2a:	ea4e 040a 	orr.w	r4, lr, sl
 801fb2e:	940c      	str	r4, [sp, #48]	@ 0x30
 801fb30:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb32:	2cff      	cmp	r4, #255	@ 0xff
 801fb34:	d021      	beq.n	801fb7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801fb36:	9c08      	ldr	r4, [sp, #32]
 801fb38:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb3c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb3e:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb42:	9c08      	ldr	r4, [sp, #32]
 801fb44:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb48:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb4a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb4e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb52:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb5a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb5e:	44de      	add	lr, fp
 801fb60:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb6c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb70:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb74:	ea4e 040a 	orr.w	r4, lr, sl
 801fb78:	9408      	str	r4, [sp, #32]
 801fb7a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb7c:	2cff      	cmp	r4, #255	@ 0xff
 801fb7e:	d021      	beq.n	801fbc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fb80:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fb82:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb86:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb88:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb8c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fb8e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb92:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb94:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb98:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb9c:	fb04 fa0a 	mul.w	sl, r4, sl
 801fba0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fba4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fba8:	44de      	add	lr, fp
 801fbaa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fbae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fbb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fbb6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fbba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fbbe:	ea4e 040a 	orr.w	r4, lr, sl
 801fbc2:	940d      	str	r4, [sp, #52]	@ 0x34
 801fbc4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fbc6:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801fbca:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fbce:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fbd2:	9c08      	ldr	r4, [sp, #32]
 801fbd4:	fb08 fc0c 	mul.w	ip, r8, ip
 801fbd8:	fb03 cc0e 	mla	ip, r3, lr, ip
 801fbdc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fbe0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fbe2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fbe6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fbea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fbec:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fbf0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fbf4:	fb08 f80e 	mul.w	r8, r8, lr
 801fbf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbfc:	fb03 8202 	mla	r2, r3, r2, r8
 801fc00:	9b08      	ldr	r3, [sp, #32]
 801fc02:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fc06:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801fc0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fc0c:	fb01 220a 	mla	r2, r1, sl, r2
 801fc10:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801fc14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc16:	fb09 2901 	mla	r9, r9, r1, r2
 801fc1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fc1c:	4343      	muls	r3, r0
 801fc1e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fc22:	1c58      	adds	r0, r3, #1
 801fc24:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801fc28:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fc2c:	783b      	ldrb	r3, [r7, #0]
 801fc2e:	ea4c 0c09 	orr.w	ip, ip, r9
 801fc32:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fc36:	fa5f f28c 	uxtb.w	r2, ip
 801fc3a:	b2c0      	uxtb	r0, r0
 801fc3c:	fb12 f201 	smulbb	r2, r2, r1
 801fc40:	fb03 2300 	mla	r3, r3, r0, r2
 801fc44:	b29b      	uxth	r3, r3
 801fc46:	1c5a      	adds	r2, r3, #1
 801fc48:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc4c:	787a      	ldrb	r2, [r7, #1]
 801fc4e:	fb12 f200 	smulbb	r2, r2, r0
 801fc52:	121b      	asrs	r3, r3, #8
 801fc54:	703b      	strb	r3, [r7, #0]
 801fc56:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fc5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fc5e:	fb03 2301 	mla	r3, r3, r1, r2
 801fc62:	b29b      	uxth	r3, r3
 801fc64:	1c5a      	adds	r2, r3, #1
 801fc66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc6a:	121b      	asrs	r3, r3, #8
 801fc6c:	707b      	strb	r3, [r7, #1]
 801fc6e:	78bb      	ldrb	r3, [r7, #2]
 801fc70:	fb13 f000 	smulbb	r0, r3, r0
 801fc74:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fc78:	fa1f fc8c 	uxth.w	ip, ip
 801fc7c:	f10c 0301 	add.w	r3, ip, #1
 801fc80:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fc84:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fc88:	f887 c002 	strb.w	ip, [r7, #2]
 801fc8c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fc8e:	3703      	adds	r7, #3
 801fc90:	441d      	add	r5, r3
 801fc92:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fc94:	441e      	add	r6, r3
 801fc96:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fc98:	3b01      	subs	r3, #1
 801fc9a:	9318      	str	r3, [sp, #96]	@ 0x60
 801fc9c:	e69f      	b.n	801f9de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc9e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fca0:	441d      	add	r5, r3
 801fca2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fca4:	441e      	add	r6, r3
 801fca6:	9b07      	ldr	r3, [sp, #28]
 801fca8:	3b01      	subs	r3, #1
 801fcaa:	9307      	str	r3, [sp, #28]
 801fcac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fcae:	3303      	adds	r3, #3
 801fcb0:	930a      	str	r3, [sp, #40]	@ 0x28
 801fcb2:	e674      	b.n	801f99e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801fcb4:	d025      	beq.n	801fd02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801fcb6:	9b07      	ldr	r3, [sp, #28]
 801fcb8:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801fcba:	3b01      	subs	r3, #1
 801fcbc:	fb00 5003 	mla	r0, r0, r3, r5
 801fcc0:	1400      	asrs	r0, r0, #16
 801fcc2:	f53f ae89 	bmi.w	801f9d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fcc6:	3901      	subs	r1, #1
 801fcc8:	4288      	cmp	r0, r1
 801fcca:	f6bf ae85 	bge.w	801f9d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fcce:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801fcd0:	fb01 6303 	mla	r3, r1, r3, r6
 801fcd4:	141b      	asrs	r3, r3, #16
 801fcd6:	f53f ae7f 	bmi.w	801f9d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fcda:	3a01      	subs	r2, #1
 801fcdc:	4293      	cmp	r3, r2
 801fcde:	f6bf ae7b 	bge.w	801f9d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fce2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fce4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fce8:	f103 0e03 	add.w	lr, r3, #3
 801fcec:	f1bb 0f00 	cmp.w	fp, #0
 801fcf0:	dc6e      	bgt.n	801fdd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801fcf2:	9b07      	ldr	r3, [sp, #28]
 801fcf4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fcf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fcfa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcfe:	4423      	add	r3, r4
 801fd00:	930a      	str	r3, [sp, #40]	@ 0x28
 801fd02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	f340 81ab 	ble.w	8020060 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801fd0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fd0e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fd10:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd18:	eef0 6a62 	vmov.f32	s13, s5
 801fd1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fd20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd28:	ee16 5a90 	vmov	r5, s13
 801fd2c:	eef0 6a43 	vmov.f32	s13, s6
 801fd30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd34:	ee16 6a90 	vmov	r6, s13
 801fd38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd50:	ee12 2a90 	vmov	r2, s5
 801fd54:	eef0 2a47 	vmov.f32	s5, s14
 801fd58:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd5c:	ee13 2a10 	vmov	r2, s6
 801fd60:	9329      	str	r3, [sp, #164]	@ 0xa4
 801fd62:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fd64:	eeb0 3a67 	vmov.f32	s6, s15
 801fd68:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd6c:	932a      	str	r3, [sp, #168]	@ 0xa8
 801fd6e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fd70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fd72:	3b01      	subs	r3, #1
 801fd74:	9317      	str	r3, [sp, #92]	@ 0x5c
 801fd76:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fd78:	bf08      	it	eq
 801fd7a:	4613      	moveq	r3, r2
 801fd7c:	9307      	str	r3, [sp, #28]
 801fd7e:	e600      	b.n	801f982 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fd80:	f1bc 0f00 	cmp.w	ip, #0
 801fd84:	f43f ae6e 	beq.w	801fa64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fd88:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801fd8c:	9308      	str	r3, [sp, #32]
 801fd8e:	0e1b      	lsrs	r3, r3, #24
 801fd90:	9311      	str	r3, [sp, #68]	@ 0x44
 801fd92:	e667      	b.n	801fa64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fd94:	f112 0801 	adds.w	r8, r2, #1
 801fd98:	f53f af78 	bmi.w	801fc8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd9c:	45c6      	cmp	lr, r8
 801fd9e:	f6ff af75 	blt.w	801fc8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fda2:	f110 0801 	adds.w	r8, r0, #1
 801fda6:	f53f af71 	bmi.w	801fc8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fdaa:	4543      	cmp	r3, r8
 801fdac:	f6ff af6e 	blt.w	801fc8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fdb0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801fdb2:	b21b      	sxth	r3, r3
 801fdb4:	9201      	str	r2, [sp, #4]
 801fdb6:	9300      	str	r3, [sp, #0]
 801fdb8:	fa0f f38e 	sxth.w	r3, lr
 801fdbc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fdbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fdc2:	e9cd c404 	strd	ip, r4, [sp, #16]
 801fdc6:	4639      	mov	r1, r7
 801fdc8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801fdca:	f7ff fc79 	bl	801f6c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801fdce:	e75d      	b.n	801fc8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fdd0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801fdd2:	142f      	asrs	r7, r5, #16
 801fdd4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fdd6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fdda:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801fdde:	1433      	asrs	r3, r6, #16
 801fde0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fde4:	fb02 7303 	mla	r3, r2, r3, r7
 801fde8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801fdec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fdf0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fdf4:	2900      	cmp	r1, #0
 801fdf6:	f000 812a 	beq.w	802004e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801fdfa:	687c      	ldr	r4, [r7, #4]
 801fdfc:	940e      	str	r4, [sp, #56]	@ 0x38
 801fdfe:	0e24      	lsrs	r4, r4, #24
 801fe00:	9415      	str	r4, [sp, #84]	@ 0x54
 801fe02:	b178      	cbz	r0, 801fe24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801fe04:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801fe08:	3a01      	subs	r2, #1
 801fe0a:	0092      	lsls	r2, r2, #2
 801fe0c:	3204      	adds	r2, #4
 801fe0e:	eb07 0802 	add.w	r8, r7, r2
 801fe12:	58ba      	ldr	r2, [r7, r2]
 801fe14:	9209      	str	r2, [sp, #36]	@ 0x24
 801fe16:	0e12      	lsrs	r2, r2, #24
 801fe18:	9212      	str	r2, [sp, #72]	@ 0x48
 801fe1a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801fe1e:	920f      	str	r2, [sp, #60]	@ 0x3c
 801fe20:	0e12      	lsrs	r2, r2, #24
 801fe22:	9216      	str	r2, [sp, #88]	@ 0x58
 801fe24:	b289      	uxth	r1, r1
 801fe26:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fe28:	b280      	uxth	r0, r0
 801fe2a:	fb01 f900 	mul.w	r9, r1, r0
 801fe2e:	0109      	lsls	r1, r1, #4
 801fe30:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fe34:	eba1 0809 	sub.w	r8, r1, r9
 801fe38:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801fe3c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801fe3e:	b280      	uxth	r0, r0
 801fe40:	fa1f f888 	uxth.w	r8, r8
 801fe44:	1a12      	subs	r2, r2, r0
 801fe46:	fb08 f101 	mul.w	r1, r8, r1
 801fe4a:	b292      	uxth	r2, r2
 801fe4c:	fb02 110c 	mla	r1, r2, ip, r1
 801fe50:	fb00 1104 	mla	r1, r0, r4, r1
 801fe54:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fe56:	fb09 1104 	mla	r1, r9, r4, r1
 801fe5a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fe5e:	2900      	cmp	r1, #0
 801fe60:	f000 80ec 	beq.w	802003c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801fe64:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801fe68:	d019      	beq.n	801fe9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801fe6a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fe6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fe72:	fb0c fa0a 	mul.w	sl, ip, sl
 801fe76:	fb0c fc03 	mul.w	ip, ip, r3
 801fe7a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fe7e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fe82:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801fe86:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fe8a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fe8e:	4453      	add	r3, sl
 801fe90:	0a3f      	lsrs	r7, r7, #8
 801fe92:	0a1b      	lsrs	r3, r3, #8
 801fe94:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801fe98:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fe9c:	433b      	orrs	r3, r7
 801fe9e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fea0:	2cff      	cmp	r4, #255	@ 0xff
 801fea2:	d020      	beq.n	801fee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801fea4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fea6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801feaa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801feac:	4367      	muls	r7, r4
 801feae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801feb0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801feb4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801feb8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801feba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801febe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fec2:	fb04 fa0a 	mul.w	sl, r4, sl
 801fec6:	44bc      	add	ip, r7
 801fec8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801fecc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fed0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fed4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fed8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fedc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fee0:	ea4c 040a 	orr.w	r4, ip, sl
 801fee4:	940e      	str	r4, [sp, #56]	@ 0x38
 801fee6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fee8:	2cff      	cmp	r4, #255	@ 0xff
 801feea:	d020      	beq.n	801ff2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801feec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801feee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fef2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fef4:	4367      	muls	r7, r4
 801fef6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801fef8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fefc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ff00:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ff02:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ff06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff0a:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff0e:	44bc      	add	ip, r7
 801ff10:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ff14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff1c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff24:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff28:	ea4c 040a 	orr.w	r4, ip, sl
 801ff2c:	9409      	str	r4, [sp, #36]	@ 0x24
 801ff2e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff30:	2cff      	cmp	r4, #255	@ 0xff
 801ff32:	d020      	beq.n	801ff76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801ff34:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff36:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ff3a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff3c:	4367      	muls	r7, r4
 801ff3e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff40:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff44:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ff48:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff4a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ff4e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff52:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff56:	44bc      	add	ip, r7
 801ff58:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ff5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff60:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff64:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff6c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff70:	ea4c 040a 	orr.w	r4, ip, sl
 801ff74:	940f      	str	r4, [sp, #60]	@ 0x3c
 801ff76:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff78:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801ff7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ff80:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ff84:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ff86:	fb08 f707 	mul.w	r7, r8, r7
 801ff8a:	fb02 770c 	mla	r7, r2, ip, r7
 801ff8e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ff92:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff94:	fb00 770c 	mla	r7, r0, ip, r7
 801ff98:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ff9c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff9e:	fb09 770c 	mla	r7, r9, ip, r7
 801ffa2:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ffa6:	fb08 f80c 	mul.w	r8, r8, ip
 801ffaa:	0a3f      	lsrs	r7, r7, #8
 801ffac:	fb02 8303 	mla	r3, r2, r3, r8
 801ffb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ffb2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ffb6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ffba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ffbc:	fb00 330a 	mla	r3, r0, sl, r3
 801ffc0:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801ffc4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ffc6:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ffca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ffcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffd0:	434b      	muls	r3, r1
 801ffd2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ffd6:	1c59      	adds	r1, r3, #1
 801ffd8:	ea47 070c 	orr.w	r7, r7, ip
 801ffdc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ffe0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ffe4:	b2fa      	uxtb	r2, r7
 801ffe6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ffea:	fb12 f200 	smulbb	r2, r2, r0
 801ffee:	b2c9      	uxtb	r1, r1
 801fff0:	fb03 2301 	mla	r3, r3, r1, r2
 801fff4:	b29b      	uxth	r3, r3
 801fff6:	1c5a      	adds	r2, r3, #1
 801fff8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fffc:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020000:	fb12 f201 	smulbb	r2, r2, r1
 8020004:	121b      	asrs	r3, r3, #8
 8020006:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802000a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802000e:	0c3f      	lsrs	r7, r7, #16
 8020010:	fb03 2300 	mla	r3, r3, r0, r2
 8020014:	b29b      	uxth	r3, r3
 8020016:	1c5a      	adds	r2, r3, #1
 8020018:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802001c:	121b      	asrs	r3, r3, #8
 802001e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020022:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020026:	fb13 f101 	smulbb	r1, r3, r1
 802002a:	fb07 1700 	mla	r7, r7, r0, r1
 802002e:	b2bf      	uxth	r7, r7
 8020030:	1c79      	adds	r1, r7, #1
 8020032:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8020036:	123f      	asrs	r7, r7, #8
 8020038:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802003c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802003e:	f10e 0e03 	add.w	lr, lr, #3
 8020042:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020046:	441d      	add	r5, r3
 8020048:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802004a:	441e      	add	r6, r3
 802004c:	e64e      	b.n	801fcec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 802004e:	2800      	cmp	r0, #0
 8020050:	f43f aee8 	beq.w	801fe24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020054:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8020058:	9209      	str	r2, [sp, #36]	@ 0x24
 802005a:	0e12      	lsrs	r2, r2, #24
 802005c:	9212      	str	r2, [sp, #72]	@ 0x48
 802005e:	e6e1      	b.n	801fe24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020060:	b01d      	add	sp, #116	@ 0x74
 8020062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020066 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8020066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802006a:	b087      	sub	sp, #28
 802006c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8020070:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8020074:	fb05 7003 	mla	r0, r5, r3, r7
 8020078:	2d00      	cmp	r5, #0
 802007a:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 802007e:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8020082:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8020086:	f2c0 810a 	blt.w	802029e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 802008a:	45a8      	cmp	r8, r5
 802008c:	f340 8107 	ble.w	802029e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020090:	2f00      	cmp	r7, #0
 8020092:	f2c0 8102 	blt.w	802029a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8020096:	42bb      	cmp	r3, r7
 8020098:	f340 80ff 	ble.w	802029a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802009c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80200a0:	1c7a      	adds	r2, r7, #1
 80200a2:	f100 80ff 	bmi.w	80202a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80200a6:	4293      	cmp	r3, r2
 80200a8:	f340 80fc 	ble.w	80202a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80200ac:	2c00      	cmp	r4, #0
 80200ae:	f000 80fb 	beq.w	80202a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 80200b2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80200b6:	3501      	adds	r5, #1
 80200b8:	f100 80fa 	bmi.w	80202b0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80200bc:	45a8      	cmp	r8, r5
 80200be:	f340 80f7 	ble.w	80202b0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80200c2:	f1be 0f00 	cmp.w	lr, #0
 80200c6:	f000 80f6 	beq.w	80202b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 80200ca:	2f00      	cmp	r7, #0
 80200cc:	f2c0 80ee 	blt.w	80202ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80200d0:	42bb      	cmp	r3, r7
 80200d2:	f340 80eb 	ble.w	80202ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80200d6:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80200da:	3701      	adds	r7, #1
 80200dc:	f100 80ee 	bmi.w	80202bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80200e0:	42bb      	cmp	r3, r7
 80200e2:	f340 80eb 	ble.w	80202bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80200e6:	2c00      	cmp	r4, #0
 80200e8:	f000 80ea 	beq.w	80202c0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80200ec:	3301      	adds	r3, #1
 80200ee:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80200f2:	fa1f fc84 	uxth.w	ip, r4
 80200f6:	fa1f fe8e 	uxth.w	lr, lr
 80200fa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80200fe:	fb0c f90e 	mul.w	r9, ip, lr
 8020102:	0e13      	lsrs	r3, r2, #24
 8020104:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8020108:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802010c:	9302      	str	r3, [sp, #8]
 802010e:	ebac 0709 	sub.w	r7, ip, r9
 8020112:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8020116:	fa1f f48e 	uxth.w	r4, lr
 802011a:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 802011e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020122:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8020126:	fb0a fe0e 	mul.w	lr, sl, lr
 802012a:	1b1b      	subs	r3, r3, r4
 802012c:	fb0a f606 	mul.w	r6, sl, r6
 8020130:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8020134:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020138:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802013c:	b29b      	uxth	r3, r3
 802013e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020142:	b2bf      	uxth	r7, r7
 8020144:	9301      	str	r3, [sp, #4]
 8020146:	44e6      	add	lr, ip
 8020148:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802014c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020150:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020154:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8020158:	9303      	str	r3, [sp, #12]
 802015a:	0a33      	lsrs	r3, r6, #8
 802015c:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8020160:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020164:	9304      	str	r3, [sp, #16]
 8020166:	fb0b f606 	mul.w	r6, fp, r6
 802016a:	fb0b f000 	mul.w	r0, fp, r0
 802016e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8020172:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8020176:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802017a:	44b6      	add	lr, r6
 802017c:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8020180:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8020184:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8020188:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802018c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020190:	fb08 f606 	mul.w	r6, r8, r6
 8020194:	0a03      	lsrs	r3, r0, #8
 8020196:	fb08 f505 	mul.w	r5, r8, r5
 802019a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802019e:	0a30      	lsrs	r0, r6, #8
 80201a0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80201a4:	9305      	str	r3, [sp, #20]
 80201a6:	0e13      	lsrs	r3, r2, #24
 80201a8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80201ac:	fb0e fe07 	mul.w	lr, lr, r7
 80201b0:	4430      	add	r0, r6
 80201b2:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 80201b6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80201ba:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 80201be:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80201c2:	0a00      	lsrs	r0, r0, #8
 80201c4:	435e      	muls	r6, r3
 80201c6:	0a2d      	lsrs	r5, r5, #8
 80201c8:	435a      	muls	r2, r3
 80201ca:	9b03      	ldr	r3, [sp, #12]
 80201cc:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80201d0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80201d4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80201d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80201dc:	44b4      	add	ip, r6
 80201de:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80201e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201e6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80201ea:	9e01      	ldr	r6, [sp, #4]
 80201ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80201f0:	fb03 ee06 	mla	lr, r3, r6, lr
 80201f4:	9b04      	ldr	r3, [sp, #16]
 80201f6:	0a12      	lsrs	r2, r2, #8
 80201f8:	fb0c ee09 	mla	lr, ip, r9, lr
 80201fc:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8020200:	9b05      	ldr	r3, [sp, #20]
 8020202:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020206:	fb00 ee04 	mla	lr, r0, r4, lr
 802020a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802020e:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8020212:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8020216:	9b01      	ldr	r3, [sp, #4]
 8020218:	fb07 fe0e 	mul.w	lr, r7, lr
 802021c:	fb07 f70b 	mul.w	r7, r7, fp
 8020220:	fb03 ee06 	mla	lr, r3, r6, lr
 8020224:	fb03 730a 	mla	r3, r3, sl, r7
 8020228:	fb09 e202 	mla	r2, r9, r2, lr
 802022c:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8020230:	fb04 2e0e 	mla	lr, r4, lr, r2
 8020234:	fb04 3408 	mla	r4, r4, r8, r3
 8020238:	9b02      	ldr	r3, [sp, #8]
 802023a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802023e:	fb09 4903 	mla	r9, r9, r3, r4
 8020242:	780b      	ldrb	r3, [r1, #0]
 8020244:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8020248:	ea6f 2929 	mvn.w	r9, r9, asr #8
 802024c:	ea40 0e0e 	orr.w	lr, r0, lr
 8020250:	fa5f f989 	uxtb.w	r9, r9
 8020254:	fb03 f209 	mul.w	r2, r3, r9
 8020258:	1c53      	adds	r3, r2, #1
 802025a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802025e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8020262:	700b      	strb	r3, [r1, #0]
 8020264:	784b      	ldrb	r3, [r1, #1]
 8020266:	fb03 f309 	mul.w	r3, r3, r9
 802026a:	1c5a      	adds	r2, r3, #1
 802026c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020270:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020274:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020278:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802027c:	704b      	strb	r3, [r1, #1]
 802027e:	788b      	ldrb	r3, [r1, #2]
 8020280:	fb03 f909 	mul.w	r9, r3, r9
 8020284:	f109 0301 	add.w	r3, r9, #1
 8020288:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802028c:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8020290:	f881 e002 	strb.w	lr, [r1, #2]
 8020294:	b007      	add	sp, #28
 8020296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802029a:	2600      	movs	r6, #0
 802029c:	e700      	b.n	80200a0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 802029e:	2000      	movs	r0, #0
 80202a0:	4606      	mov	r6, r0
 80202a2:	e708      	b.n	80200b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80202a4:	2000      	movs	r0, #0
 80202a6:	e706      	b.n	80200b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80202a8:	4620      	mov	r0, r4
 80202aa:	e704      	b.n	80200b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80202ac:	2500      	movs	r5, #0
 80202ae:	e714      	b.n	80200da <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 80202b0:	2200      	movs	r2, #0
 80202b2:	4615      	mov	r5, r2
 80202b4:	e71d      	b.n	80200f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80202b6:	4672      	mov	r2, lr
 80202b8:	4675      	mov	r5, lr
 80202ba:	e71a      	b.n	80200f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80202bc:	2200      	movs	r2, #0
 80202be:	e718      	b.n	80200f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80202c0:	4622      	mov	r2, r4
 80202c2:	e716      	b.n	80200f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

080202c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202c8:	b099      	sub	sp, #100	@ 0x64
 80202ca:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 80202ce:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80202d0:	9017      	str	r0, [sp, #92]	@ 0x5c
 80202d2:	9306      	str	r3, [sp, #24]
 80202d4:	6850      	ldr	r0, [r2, #4]
 80202d6:	6812      	ldr	r2, [r2, #0]
 80202d8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 80202dc:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 80202e0:	fb00 1303 	mla	r3, r0, r3, r1
 80202e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202e8:	18d3      	adds	r3, r2, r3
 80202ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80202ec:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80202ee:	681b      	ldr	r3, [r3, #0]
 80202f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80202f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	dc03      	bgt.n	8020300 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80202f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	f340 8360 	ble.w	80209c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8020300:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020302:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020306:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802030a:	1e48      	subs	r0, r1, #1
 802030c:	1e57      	subs	r7, r2, #1
 802030e:	9b06      	ldr	r3, [sp, #24]
 8020310:	2b00      	cmp	r3, #0
 8020312:	f340 817b 	ble.w	802060c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8020316:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802031a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802031e:	d406      	bmi.n	802032e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020320:	4584      	cmp	ip, r0
 8020322:	da04      	bge.n	802032e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020324:	2b00      	cmp	r3, #0
 8020326:	db02      	blt.n	802032e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020328:	42bb      	cmp	r3, r7
 802032a:	f2c0 8170 	blt.w	802060e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802032e:	f11c 0c01 	adds.w	ip, ip, #1
 8020332:	f100 8160 	bmi.w	80205f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020336:	4561      	cmp	r1, ip
 8020338:	f2c0 815d 	blt.w	80205f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802033c:	3301      	adds	r3, #1
 802033e:	f100 815a 	bmi.w	80205f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020342:	429a      	cmp	r2, r3
 8020344:	f2c0 8157 	blt.w	80205f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020348:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802034c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802034e:	f1b8 0f00 	cmp.w	r8, #0
 8020352:	f340 8179 	ble.w	8020648 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020356:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8020358:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802035c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802035e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020362:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020366:	142a      	asrs	r2, r5, #16
 8020368:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802036c:	689b      	ldr	r3, [r3, #8]
 802036e:	f100 81be 	bmi.w	80206ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020372:	f103 39ff 	add.w	r9, r3, #4294967295
 8020376:	454a      	cmp	r2, r9
 8020378:	f280 81b9 	bge.w	80206ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802037c:	f1bc 0f00 	cmp.w	ip, #0
 8020380:	f2c0 81b5 	blt.w	80206ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020384:	f10e 39ff 	add.w	r9, lr, #4294967295
 8020388:	45cc      	cmp	ip, r9
 802038a:	f280 81b0 	bge.w	80206ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802038e:	b21b      	sxth	r3, r3
 8020390:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020392:	fb0c 2203 	mla	r2, ip, r3, r2
 8020396:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802039a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802039e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80203a2:	2900      	cmp	r1, #0
 80203a4:	f000 8197 	beq.w	80206d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80203a8:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80203ac:	940a      	str	r4, [sp, #40]	@ 0x28
 80203ae:	0e24      	lsrs	r4, r4, #24
 80203b0:	9411      	str	r4, [sp, #68]	@ 0x44
 80203b2:	b180      	cbz	r0, 80203d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80203b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80203b8:	3b01      	subs	r3, #1
 80203ba:	009b      	lsls	r3, r3, #2
 80203bc:	3304      	adds	r3, #4
 80203be:	eb09 0c03 	add.w	ip, r9, r3
 80203c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80203c6:	9307      	str	r3, [sp, #28]
 80203c8:	0e1b      	lsrs	r3, r3, #24
 80203ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80203cc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80203d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80203d2:	0e1b      	lsrs	r3, r3, #24
 80203d4:	9312      	str	r3, [sp, #72]	@ 0x48
 80203d6:	b289      	uxth	r1, r1
 80203d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80203da:	b280      	uxth	r0, r0
 80203dc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80203de:	fb01 fa00 	mul.w	sl, r1, r0
 80203e2:	0109      	lsls	r1, r1, #4
 80203e4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80203e8:	eba1 090a 	sub.w	r9, r1, sl
 80203ec:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80203f0:	b280      	uxth	r0, r0
 80203f2:	fa1f f989 	uxth.w	r9, r9
 80203f6:	1a09      	subs	r1, r1, r0
 80203f8:	fb09 f303 	mul.w	r3, r9, r3
 80203fc:	b289      	uxth	r1, r1
 80203fe:	fb01 330e 	mla	r3, r1, lr, r3
 8020402:	fb00 3304 	mla	r3, r0, r4, r3
 8020406:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020408:	fb0a 3304 	mla	r3, sl, r4, r3
 802040c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020410:	2b00      	cmp	r3, #0
 8020412:	f000 80e8 	beq.w	80205e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020416:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802041a:	d01b      	beq.n	8020454 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 802041c:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8020420:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020424:	fb0e fb0b 	mul.w	fp, lr, fp
 8020428:	fb0e fe02 	mul.w	lr, lr, r2
 802042c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8020430:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020434:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020438:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802043c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020440:	445a      	add	r2, fp
 8020442:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020446:	0a12      	lsrs	r2, r2, #8
 8020448:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802044c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020450:	ea42 020c 	orr.w	r2, r2, ip
 8020454:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020456:	2cff      	cmp	r4, #255	@ 0xff
 8020458:	d021      	beq.n	802049e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802045a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802045c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020460:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020462:	fb04 fc0c 	mul.w	ip, r4, ip
 8020466:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020468:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802046c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020470:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020472:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020476:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802047a:	fb04 fb0b 	mul.w	fp, r4, fp
 802047e:	44e6      	add	lr, ip
 8020480:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020484:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020488:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802048c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020490:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020494:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020498:	ea4e 040b 	orr.w	r4, lr, fp
 802049c:	940a      	str	r4, [sp, #40]	@ 0x28
 802049e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80204a0:	2cff      	cmp	r4, #255	@ 0xff
 80204a2:	d021      	beq.n	80204e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80204a4:	9c07      	ldr	r4, [sp, #28]
 80204a6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80204aa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80204ac:	fb04 fc0c 	mul.w	ip, r4, ip
 80204b0:	9c07      	ldr	r4, [sp, #28]
 80204b2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80204b6:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80204ba:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80204bc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80204c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204c4:	fb04 fb0b 	mul.w	fp, r4, fp
 80204c8:	44e6      	add	lr, ip
 80204ca:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80204ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204d2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80204d6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204da:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80204de:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80204e2:	ea4e 040b 	orr.w	r4, lr, fp
 80204e6:	9407      	str	r4, [sp, #28]
 80204e8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80204ea:	2cff      	cmp	r4, #255	@ 0xff
 80204ec:	d021      	beq.n	8020532 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80204ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204f0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80204f4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80204f6:	fb04 fc0c 	mul.w	ip, r4, ip
 80204fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204fc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020500:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020504:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020506:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802050a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802050e:	fb04 fb0b 	mul.w	fp, r4, fp
 8020512:	44e6      	add	lr, ip
 8020514:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020518:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802051c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020520:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020524:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020528:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802052c:	ea4e 040b 	orr.w	r4, lr, fp
 8020530:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020532:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020534:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8020538:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802053c:	2bff      	cmp	r3, #255	@ 0xff
 802053e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020542:	9c07      	ldr	r4, [sp, #28]
 8020544:	fb09 fc0c 	mul.w	ip, r9, ip
 8020548:	fb01 cc0e 	mla	ip, r1, lr, ip
 802054c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020550:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020552:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020556:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802055a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802055c:	fb0a cc0e 	mla	ip, sl, lr, ip
 8020560:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020564:	fb09 f90e 	mul.w	r9, r9, lr
 8020568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802056c:	fb01 9202 	mla	r2, r1, r2, r9
 8020570:	9907      	ldr	r1, [sp, #28]
 8020572:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020576:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 802057a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802057c:	fb00 220b 	mla	r2, r0, fp, r2
 8020580:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8020584:	fb0a 2a00 	mla	sl, sl, r0, r2
 8020588:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802058c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020590:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020594:	fa5f f08c 	uxtb.w	r0, ip
 8020598:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802059c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80205a0:	f000 80a2 	beq.w	80206e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80205a4:	43db      	mvns	r3, r3
 80205a6:	783a      	ldrb	r2, [r7, #0]
 80205a8:	f897 a002 	ldrb.w	sl, [r7, #2]
 80205ac:	b2db      	uxtb	r3, r3
 80205ae:	fb02 fe03 	mul.w	lr, r2, r3
 80205b2:	fb0a fa03 	mul.w	sl, sl, r3
 80205b6:	f10e 0201 	add.w	r2, lr, #1
 80205ba:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80205be:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80205c2:	703a      	strb	r2, [r7, #0]
 80205c4:	787a      	ldrb	r2, [r7, #1]
 80205c6:	fb02 f003 	mul.w	r0, r2, r3
 80205ca:	f10a 0301 	add.w	r3, sl, #1
 80205ce:	1c42      	adds	r2, r0, #1
 80205d0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80205d4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80205d8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80205dc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80205e0:	707a      	strb	r2, [r7, #1]
 80205e2:	f887 c002 	strb.w	ip, [r7, #2]
 80205e6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80205e8:	3703      	adds	r7, #3
 80205ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80205ee:	441d      	add	r5, r3
 80205f0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80205f2:	441e      	add	r6, r3
 80205f4:	e6ab      	b.n	802034e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80205f6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80205f8:	441d      	add	r5, r3
 80205fa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80205fc:	441e      	add	r6, r3
 80205fe:	9b06      	ldr	r3, [sp, #24]
 8020600:	3b01      	subs	r3, #1
 8020602:	9306      	str	r3, [sp, #24]
 8020604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020606:	3303      	adds	r3, #3
 8020608:	9309      	str	r3, [sp, #36]	@ 0x24
 802060a:	e680      	b.n	802030e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802060c:	d024      	beq.n	8020658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802060e:	9b06      	ldr	r3, [sp, #24]
 8020610:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8020612:	3b01      	subs	r3, #1
 8020614:	fb00 5003 	mla	r0, r0, r3, r5
 8020618:	1400      	asrs	r0, r0, #16
 802061a:	f53f ae95 	bmi.w	8020348 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802061e:	3901      	subs	r1, #1
 8020620:	4288      	cmp	r0, r1
 8020622:	f6bf ae91 	bge.w	8020348 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020626:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8020628:	fb01 6303 	mla	r3, r1, r3, r6
 802062c:	141b      	asrs	r3, r3, #16
 802062e:	f53f ae8b 	bmi.w	8020348 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020632:	3a01      	subs	r2, #1
 8020634:	4293      	cmp	r3, r2
 8020636:	f6bf ae87 	bge.w	8020348 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802063a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802063c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020640:	1cdf      	adds	r7, r3, #3
 8020642:	f1bb 0f00 	cmp.w	fp, #0
 8020646:	dc6e      	bgt.n	8020726 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8020648:	9b06      	ldr	r3, [sp, #24]
 802064a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802064e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020650:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020654:	4423      	add	r3, r4
 8020656:	9309      	str	r3, [sp, #36]	@ 0x24
 8020658:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802065a:	2b00      	cmp	r3, #0
 802065c:	f340 81b0 	ble.w	80209c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8020660:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020664:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020666:	ee30 0a04 	vadd.f32	s0, s0, s8
 802066a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802066e:	eef0 6a62 	vmov.f32	s13, s5
 8020672:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020676:	ee31 1a05 	vadd.f32	s2, s2, s10
 802067a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802067e:	ee16 5a90 	vmov	r5, s13
 8020682:	eef0 6a43 	vmov.f32	s13, s6
 8020686:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802068a:	ee16 6a90 	vmov	r6, s13
 802068e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020692:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020696:	ee77 2a62 	vsub.f32	s5, s14, s5
 802069a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802069e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80206a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80206a6:	ee12 2a90 	vmov	r2, s5
 80206aa:	eef0 2a47 	vmov.f32	s5, s14
 80206ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80206b2:	ee13 2a10 	vmov	r2, s6
 80206b6:	9325      	str	r3, [sp, #148]	@ 0x94
 80206b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80206ba:	eeb0 3a67 	vmov.f32	s6, s15
 80206be:	fb92 f3f3 	sdiv	r3, r2, r3
 80206c2:	9326      	str	r3, [sp, #152]	@ 0x98
 80206c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80206c6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80206c8:	3b01      	subs	r3, #1
 80206ca:	9315      	str	r3, [sp, #84]	@ 0x54
 80206cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80206ce:	bf08      	it	eq
 80206d0:	4613      	moveq	r3, r2
 80206d2:	9306      	str	r3, [sp, #24]
 80206d4:	e60d      	b.n	80202f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80206d6:	2800      	cmp	r0, #0
 80206d8:	f43f ae7d 	beq.w	80203d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80206dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80206e0:	9307      	str	r3, [sp, #28]
 80206e2:	0e1b      	lsrs	r3, r3, #24
 80206e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80206e6:	e676      	b.n	80203d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80206e8:	7038      	strb	r0, [r7, #0]
 80206ea:	7079      	strb	r1, [r7, #1]
 80206ec:	e779      	b.n	80205e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80206ee:	f112 0901 	adds.w	r9, r2, #1
 80206f2:	f53f af78 	bmi.w	80205e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206f6:	454b      	cmp	r3, r9
 80206f8:	f6ff af75 	blt.w	80205e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206fc:	f11c 0901 	adds.w	r9, ip, #1
 8020700:	f53f af71 	bmi.w	80205e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020704:	45ce      	cmp	lr, r9
 8020706:	f6ff af6e 	blt.w	80205e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802070a:	b21b      	sxth	r3, r3
 802070c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8020710:	fa0f f28e 	sxth.w	r2, lr
 8020714:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8020718:	9200      	str	r2, [sp, #0]
 802071a:	4639      	mov	r1, r7
 802071c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802071e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8020720:	f7ff fca1 	bl	8020066 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8020724:	e75f      	b.n	80205e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020726:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020728:	1429      	asrs	r1, r5, #16
 802072a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802072c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020730:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8020734:	1433      	asrs	r3, r6, #16
 8020736:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802073a:	fb0c 1303 	mla	r3, ip, r3, r1
 802073e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020740:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020744:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020748:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802074c:	2a00      	cmp	r2, #0
 802074e:	f000 8129 	beq.w	80209a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8020752:	684c      	ldr	r4, [r1, #4]
 8020754:	940c      	str	r4, [sp, #48]	@ 0x30
 8020756:	0e24      	lsrs	r4, r4, #24
 8020758:	9413      	str	r4, [sp, #76]	@ 0x4c
 802075a:	b198      	cbz	r0, 8020784 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802075c:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8020760:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020764:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020768:	f10c 0c04 	add.w	ip, ip, #4
 802076c:	eb01 080c 	add.w	r8, r1, ip
 8020770:	f851 100c 	ldr.w	r1, [r1, ip]
 8020774:	9108      	str	r1, [sp, #32]
 8020776:	0e09      	lsrs	r1, r1, #24
 8020778:	9110      	str	r1, [sp, #64]	@ 0x40
 802077a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802077e:	910d      	str	r1, [sp, #52]	@ 0x34
 8020780:	0e09      	lsrs	r1, r1, #24
 8020782:	9114      	str	r1, [sp, #80]	@ 0x50
 8020784:	b292      	uxth	r2, r2
 8020786:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020788:	b280      	uxth	r0, r0
 802078a:	fb02 f900 	mul.w	r9, r2, r0
 802078e:	0112      	lsls	r2, r2, #4
 8020790:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020794:	eba2 0809 	sub.w	r8, r2, r9
 8020798:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802079c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802079e:	b280      	uxth	r0, r0
 80207a0:	fa1f f888 	uxth.w	r8, r8
 80207a4:	1a09      	subs	r1, r1, r0
 80207a6:	fb08 f202 	mul.w	r2, r8, r2
 80207aa:	b289      	uxth	r1, r1
 80207ac:	fb01 220e 	mla	r2, r1, lr, r2
 80207b0:	fb00 2204 	mla	r2, r0, r4, r2
 80207b4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80207b6:	fb09 2204 	mla	r2, r9, r4, r2
 80207ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80207be:	2a00      	cmp	r2, #0
 80207c0:	f000 80e8 	beq.w	8020994 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80207c4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80207c8:	d01b      	beq.n	8020802 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80207ca:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80207ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80207d2:	fb0e fa0a 	mul.w	sl, lr, sl
 80207d6:	fb0e fe03 	mul.w	lr, lr, r3
 80207da:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80207de:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80207e2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80207e6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80207ea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80207ee:	4453      	add	r3, sl
 80207f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207f4:	0a1b      	lsrs	r3, r3, #8
 80207f6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80207fa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80207fe:	ea43 030c 	orr.w	r3, r3, ip
 8020802:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020804:	2cff      	cmp	r4, #255	@ 0xff
 8020806:	d021      	beq.n	802084c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8020808:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802080a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802080e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020810:	fb04 fc0c 	mul.w	ip, r4, ip
 8020814:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020816:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802081a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802081e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020820:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020824:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020828:	fb04 fa0a 	mul.w	sl, r4, sl
 802082c:	44e6      	add	lr, ip
 802082e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020832:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020836:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802083a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802083e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020842:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020846:	ea4e 040a 	orr.w	r4, lr, sl
 802084a:	940c      	str	r4, [sp, #48]	@ 0x30
 802084c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802084e:	2cff      	cmp	r4, #255	@ 0xff
 8020850:	d021      	beq.n	8020896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8020852:	9c08      	ldr	r4, [sp, #32]
 8020854:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020858:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802085a:	fb04 fc0c 	mul.w	ip, r4, ip
 802085e:	9c08      	ldr	r4, [sp, #32]
 8020860:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020864:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020866:	fb04 fa0e 	mul.w	sl, r4, lr
 802086a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802086e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020872:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020876:	44e6      	add	lr, ip
 8020878:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802087c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020880:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020884:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020888:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802088c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020890:	ea4e 040a 	orr.w	r4, lr, sl
 8020894:	9408      	str	r4, [sp, #32]
 8020896:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020898:	2cff      	cmp	r4, #255	@ 0xff
 802089a:	d021      	beq.n	80208e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 802089c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802089e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80208a2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80208a4:	fb04 fc0c 	mul.w	ip, r4, ip
 80208a8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80208aa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80208ae:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80208b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80208b4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80208b8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80208bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80208c0:	44e6      	add	lr, ip
 80208c2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80208c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80208ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80208d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208d6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80208da:	ea4e 040a 	orr.w	r4, lr, sl
 80208de:	940d      	str	r4, [sp, #52]	@ 0x34
 80208e0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80208e2:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80208e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80208ea:	2aff      	cmp	r2, #255	@ 0xff
 80208ec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80208f0:	9c08      	ldr	r4, [sp, #32]
 80208f2:	fb08 fc0c 	mul.w	ip, r8, ip
 80208f6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80208fa:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80208fe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020900:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020904:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020908:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802090a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802090e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020912:	fb08 f80e 	mul.w	r8, r8, lr
 8020916:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802091a:	fb01 8303 	mla	r3, r1, r3, r8
 802091e:	9908      	ldr	r1, [sp, #32]
 8020920:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020924:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8020928:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802092a:	fb00 330a 	mla	r3, r0, sl, r3
 802092e:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8020932:	fb09 3e0e 	mla	lr, r9, lr, r3
 8020936:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802093a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802093e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8020942:	fa5f f08c 	uxtb.w	r0, ip
 8020946:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802094a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802094e:	d032      	beq.n	80209b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8020950:	43d2      	mvns	r2, r2
 8020952:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8020956:	b2d2      	uxtb	r2, r2
 8020958:	fb0e fe02 	mul.w	lr, lr, r2
 802095c:	f10e 0301 	add.w	r3, lr, #1
 8020960:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8020964:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020968:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 802096c:	4350      	muls	r0, r2
 802096e:	f807 3c03 	strb.w	r3, [r7, #-3]
 8020972:	1c43      	adds	r3, r0, #1
 8020974:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020978:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802097c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8020980:	4353      	muls	r3, r2
 8020982:	f807 1c02 	strb.w	r1, [r7, #-2]
 8020986:	1c5a      	adds	r2, r3, #1
 8020988:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802098c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8020990:	f807 cc01 	strb.w	ip, [r7, #-1]
 8020994:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020996:	3703      	adds	r7, #3
 8020998:	f10b 3bff 	add.w	fp, fp, #4294967295
 802099c:	441d      	add	r5, r3
 802099e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80209a0:	441e      	add	r6, r3
 80209a2:	e64e      	b.n	8020642 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80209a4:	2800      	cmp	r0, #0
 80209a6:	f43f aeed 	beq.w	8020784 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80209aa:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80209ae:	9108      	str	r1, [sp, #32]
 80209b0:	0e09      	lsrs	r1, r1, #24
 80209b2:	9110      	str	r1, [sp, #64]	@ 0x40
 80209b4:	e6e6      	b.n	8020784 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80209b6:	f807 0c03 	strb.w	r0, [r7, #-3]
 80209ba:	f807 1c02 	strb.w	r1, [r7, #-2]
 80209be:	e7e7      	b.n	8020990 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80209c0:	b019      	add	sp, #100	@ 0x64
 80209c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080209c8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80209c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209cc:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 80209d0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80209d4:	2c00      	cmp	r4, #0
 80209d6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80209da:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 80209de:	fb00 4e03 	mla	lr, r0, r3, r4
 80209e2:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80209e6:	f2c0 80b8 	blt.w	8020b5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209ea:	45a1      	cmp	r9, r4
 80209ec:	f340 80b5 	ble.w	8020b5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209f0:	2800      	cmp	r0, #0
 80209f2:	f2c0 80b2 	blt.w	8020b5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209f6:	4580      	cmp	r8, r0
 80209f8:	f340 80af 	ble.w	8020b5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209fc:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8020a00:	f01e 0f01 	tst.w	lr, #1
 8020a04:	5d56      	ldrb	r6, [r2, r5]
 8020a06:	bf0c      	ite	eq
 8020a08:	f006 060f 	andeq.w	r6, r6, #15
 8020a0c:	1136      	asrne	r6, r6, #4
 8020a0e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020a12:	b2f6      	uxtb	r6, r6
 8020a14:	f114 0a01 	adds.w	sl, r4, #1
 8020a18:	f100 80a1 	bmi.w	8020b5e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020a1c:	45d1      	cmp	r9, sl
 8020a1e:	f340 809e 	ble.w	8020b5e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020a22:	2800      	cmp	r0, #0
 8020a24:	f2c0 809b 	blt.w	8020b5e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020a28:	4580      	cmp	r8, r0
 8020a2a:	f340 8098 	ble.w	8020b5e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020a2e:	2f00      	cmp	r7, #0
 8020a30:	f000 8097 	beq.w	8020b62 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8020a34:	f10e 0b01 	add.w	fp, lr, #1
 8020a38:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020a3c:	f01b 0f01 	tst.w	fp, #1
 8020a40:	5d55      	ldrb	r5, [r2, r5]
 8020a42:	bf0c      	ite	eq
 8020a44:	f005 050f 	andeq.w	r5, r5, #15
 8020a48:	112d      	asrne	r5, r5, #4
 8020a4a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020a4e:	b2ed      	uxtb	r5, r5
 8020a50:	f1bc 0f00 	cmp.w	ip, #0
 8020a54:	f000 8089 	beq.w	8020b6a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8020a58:	2c00      	cmp	r4, #0
 8020a5a:	f100 0001 	add.w	r0, r0, #1
 8020a5e:	f2c0 8082 	blt.w	8020b66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a62:	45a1      	cmp	r9, r4
 8020a64:	dd7f      	ble.n	8020b66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a66:	2800      	cmp	r0, #0
 8020a68:	db7d      	blt.n	8020b66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a6a:	4580      	cmp	r8, r0
 8020a6c:	dd7b      	ble.n	8020b66 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a6e:	eb03 0b0e 	add.w	fp, r3, lr
 8020a72:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020a76:	f01b 0f01 	tst.w	fp, #1
 8020a7a:	5d14      	ldrb	r4, [r2, r4]
 8020a7c:	bf0c      	ite	eq
 8020a7e:	f004 040f 	andeq.w	r4, r4, #15
 8020a82:	1124      	asrne	r4, r4, #4
 8020a84:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020a88:	b2e4      	uxtb	r4, r4
 8020a8a:	f1ba 0f00 	cmp.w	sl, #0
 8020a8e:	db6f      	blt.n	8020b70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a90:	45d1      	cmp	r9, sl
 8020a92:	dd6d      	ble.n	8020b70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a94:	2800      	cmp	r0, #0
 8020a96:	db6b      	blt.n	8020b70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a98:	4580      	cmp	r8, r0
 8020a9a:	dd69      	ble.n	8020b70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a9c:	2f00      	cmp	r7, #0
 8020a9e:	d069      	beq.n	8020b74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8020aa0:	3301      	adds	r3, #1
 8020aa2:	449e      	add	lr, r3
 8020aa4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020aa8:	f01e 0f01 	tst.w	lr, #1
 8020aac:	5cd0      	ldrb	r0, [r2, r3]
 8020aae:	bf0c      	ite	eq
 8020ab0:	f000 000f 	andeq.w	r0, r0, #15
 8020ab4:	1100      	asrne	r0, r0, #4
 8020ab6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020aba:	b2c3      	uxtb	r3, r0
 8020abc:	b2ba      	uxth	r2, r7
 8020abe:	fa1f fc8c 	uxth.w	ip, ip
 8020ac2:	fb02 f00c 	mul.w	r0, r2, ip
 8020ac6:	0112      	lsls	r2, r2, #4
 8020ac8:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8020acc:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8020ad0:	1a12      	subs	r2, r2, r0
 8020ad2:	fa1f fc8c 	uxth.w	ip, ip
 8020ad6:	b292      	uxth	r2, r2
 8020ad8:	eba7 070c 	sub.w	r7, r7, ip
 8020adc:	436a      	muls	r2, r5
 8020ade:	b2bf      	uxth	r7, r7
 8020ae0:	fb06 2207 	mla	r2, r6, r7, r2
 8020ae4:	fb0c 2404 	mla	r4, ip, r4, r2
 8020ae8:	fb00 4303 	mla	r3, r0, r3, r4
 8020aec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020af0:	b38b      	cbz	r3, 8020b56 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8020af2:	4a21      	ldr	r2, [pc, #132]	@ (8020b78 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8020af4:	6814      	ldr	r4, [r2, #0]
 8020af6:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8020afa:	b2e5      	uxtb	r5, r4
 8020afc:	4353      	muls	r3, r2
 8020afe:	1c5a      	adds	r2, r3, #1
 8020b00:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020b04:	1212      	asrs	r2, r2, #8
 8020b06:	b290      	uxth	r0, r2
 8020b08:	43d2      	mvns	r2, r2
 8020b0a:	fb15 f500 	smulbb	r5, r5, r0
 8020b0e:	b2d3      	uxtb	r3, r2
 8020b10:	780a      	ldrb	r2, [r1, #0]
 8020b12:	fb02 5203 	mla	r2, r2, r3, r5
 8020b16:	b292      	uxth	r2, r2
 8020b18:	1c55      	adds	r5, r2, #1
 8020b1a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020b1e:	784d      	ldrb	r5, [r1, #1]
 8020b20:	fb15 f503 	smulbb	r5, r5, r3
 8020b24:	1212      	asrs	r2, r2, #8
 8020b26:	700a      	strb	r2, [r1, #0]
 8020b28:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020b2c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020b30:	fb02 5200 	mla	r2, r2, r0, r5
 8020b34:	b292      	uxth	r2, r2
 8020b36:	1c55      	adds	r5, r2, #1
 8020b38:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020b3c:	1212      	asrs	r2, r2, #8
 8020b3e:	704a      	strb	r2, [r1, #1]
 8020b40:	788a      	ldrb	r2, [r1, #2]
 8020b42:	fb12 f303 	smulbb	r3, r2, r3
 8020b46:	fb04 3300 	mla	r3, r4, r0, r3
 8020b4a:	b29b      	uxth	r3, r3
 8020b4c:	1c5a      	adds	r2, r3, #1
 8020b4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b52:	121b      	asrs	r3, r3, #8
 8020b54:	708b      	strb	r3, [r1, #2]
 8020b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b5a:	2600      	movs	r6, #0
 8020b5c:	e75a      	b.n	8020a14 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8020b5e:	2500      	movs	r5, #0
 8020b60:	e776      	b.n	8020a50 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020b62:	463d      	mov	r5, r7
 8020b64:	e774      	b.n	8020a50 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020b66:	2400      	movs	r4, #0
 8020b68:	e78f      	b.n	8020a8a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8020b6a:	4663      	mov	r3, ip
 8020b6c:	4664      	mov	r4, ip
 8020b6e:	e7a5      	b.n	8020abc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020b70:	2300      	movs	r3, #0
 8020b72:	e7a3      	b.n	8020abc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020b74:	463b      	mov	r3, r7
 8020b76:	e7a1      	b.n	8020abc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020b78:	24025200 	.word	0x24025200

08020b7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b80:	b097      	sub	sp, #92	@ 0x5c
 8020b82:	9214      	str	r2, [sp, #80]	@ 0x50
 8020b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b86:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020b88:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020b8c:	9015      	str	r0, [sp, #84]	@ 0x54
 8020b8e:	910c      	str	r1, [sp, #48]	@ 0x30
 8020b90:	6850      	ldr	r0, [r2, #4]
 8020b92:	930e      	str	r3, [sp, #56]	@ 0x38
 8020b94:	6812      	ldr	r2, [r2, #0]
 8020b96:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8020b9a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8020b9e:	fb00 1303 	mla	r3, r0, r3, r1
 8020ba2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ba6:	eb02 0a03 	add.w	sl, r2, r3
 8020baa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020bac:	689b      	ldr	r3, [r3, #8]
 8020bae:	3301      	adds	r3, #1
 8020bb0:	f023 0301 	bic.w	r3, r3, #1
 8020bb4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020bb6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020bb8:	681f      	ldr	r7, [r3, #0]
 8020bba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	dc03      	bgt.n	8020bc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020bc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020bc2:	2b00      	cmp	r3, #0
 8020bc4:	f340 8247 	ble.w	8021056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020bc8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020bca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020bce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020bd2:	1e48      	subs	r0, r1, #1
 8020bd4:	f102 3cff 	add.w	ip, r2, #4294967295
 8020bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	f340 80e5 	ble.w	8020daa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020be0:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8020be4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020be8:	d406      	bmi.n	8020bf8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bea:	4586      	cmp	lr, r0
 8020bec:	da04      	bge.n	8020bf8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bee:	2b00      	cmp	r3, #0
 8020bf0:	db02      	blt.n	8020bf8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bf2:	4563      	cmp	r3, ip
 8020bf4:	f2c0 80da 	blt.w	8020dac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020bf8:	f11e 0e01 	adds.w	lr, lr, #1
 8020bfc:	f100 80cb 	bmi.w	8020d96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020c00:	4571      	cmp	r1, lr
 8020c02:	f2c0 80c8 	blt.w	8020d96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020c06:	3301      	adds	r3, #1
 8020c08:	f100 80c5 	bmi.w	8020d96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020c0c:	429a      	cmp	r2, r3
 8020c0e:	f2c0 80c2 	blt.w	8020d96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020c14:	46d0      	mov	r8, sl
 8020c16:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8020c1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8020c1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	f340 80e3 	ble.w	8020dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020c24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020c26:	1430      	asrs	r0, r6, #16
 8020c28:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020c2c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020c30:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020c34:	142b      	asrs	r3, r5, #16
 8020c36:	f100 812e 	bmi.w	8020e96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c3a:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020c3e:	455b      	cmp	r3, fp
 8020c40:	f280 8129 	bge.w	8020e96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c44:	2800      	cmp	r0, #0
 8020c46:	f2c0 8126 	blt.w	8020e96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c4a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020c4e:	4558      	cmp	r0, fp
 8020c50:	f280 8121 	bge.w	8020e96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c54:	fb00 3309 	mla	r3, r0, r9, r3
 8020c58:	0858      	lsrs	r0, r3, #1
 8020c5a:	07dc      	lsls	r4, r3, #31
 8020c5c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020c60:	bf54      	ite	pl
 8020c62:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020c66:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020c6a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020c6e:	fa5f fc8c 	uxtb.w	ip, ip
 8020c72:	2a00      	cmp	r2, #0
 8020c74:	f000 80fe 	beq.w	8020e74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020c78:	1c58      	adds	r0, r3, #1
 8020c7a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020c7e:	07c0      	lsls	r0, r0, #31
 8020c80:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020c84:	bf54      	ite	pl
 8020c86:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020c8a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020c8e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020c92:	fa5f f08e 	uxtb.w	r0, lr
 8020c96:	9010      	str	r0, [sp, #64]	@ 0x40
 8020c98:	b1d9      	cbz	r1, 8020cd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020c9a:	444b      	add	r3, r9
 8020c9c:	0858      	lsrs	r0, r3, #1
 8020c9e:	07dc      	lsls	r4, r3, #31
 8020ca0:	f103 0301 	add.w	r3, r3, #1
 8020ca4:	5c38      	ldrb	r0, [r7, r0]
 8020ca6:	bf54      	ite	pl
 8020ca8:	f000 000f 	andpl.w	r0, r0, #15
 8020cac:	1100      	asrmi	r0, r0, #4
 8020cae:	07dc      	lsls	r4, r3, #31
 8020cb0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020cb4:	b2c0      	uxtb	r0, r0
 8020cb6:	900a      	str	r0, [sp, #40]	@ 0x28
 8020cb8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8020cbc:	f817 e000 	ldrb.w	lr, [r7, r0]
 8020cc0:	bf54      	ite	pl
 8020cc2:	f00e 030f 	andpl.w	r3, lr, #15
 8020cc6:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8020cca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020cce:	b2db      	uxtb	r3, r3
 8020cd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8020cd2:	b292      	uxth	r2, r2
 8020cd4:	b289      	uxth	r1, r1
 8020cd6:	0113      	lsls	r3, r2, #4
 8020cd8:	fb02 f001 	mul.w	r0, r2, r1
 8020cdc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020cde:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8020ce2:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8020ce6:	1a1b      	subs	r3, r3, r0
 8020ce8:	b289      	uxth	r1, r1
 8020cea:	b29b      	uxth	r3, r3
 8020cec:	ebae 0e01 	sub.w	lr, lr, r1
 8020cf0:	4353      	muls	r3, r2
 8020cf2:	fa1f fe8e 	uxth.w	lr, lr
 8020cf6:	fb0c 320e 	mla	r2, ip, lr, r3
 8020cfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020cfc:	fb01 2203 	mla	r2, r1, r3, r2
 8020d00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020d02:	fb00 2203 	mla	r2, r0, r3, r2
 8020d06:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020d0a:	2a00      	cmp	r2, #0
 8020d0c:	d039      	beq.n	8020d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020d0e:	4bc7      	ldr	r3, [pc, #796]	@ (802102c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020d10:	6819      	ldr	r1, [r3, #0]
 8020d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d14:	fa5f fc81 	uxtb.w	ip, r1
 8020d18:	435a      	muls	r2, r3
 8020d1a:	1c53      	adds	r3, r2, #1
 8020d1c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020d20:	1212      	asrs	r2, r2, #8
 8020d22:	b290      	uxth	r0, r2
 8020d24:	43d2      	mvns	r2, r2
 8020d26:	fb1c fc00 	smulbb	ip, ip, r0
 8020d2a:	b2d3      	uxtb	r3, r2
 8020d2c:	f898 2000 	ldrb.w	r2, [r8]
 8020d30:	fb02 c203 	mla	r2, r2, r3, ip
 8020d34:	b292      	uxth	r2, r2
 8020d36:	f102 0c01 	add.w	ip, r2, #1
 8020d3a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020d3e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020d42:	fb1c fc03 	smulbb	ip, ip, r3
 8020d46:	1212      	asrs	r2, r2, #8
 8020d48:	f888 2000 	strb.w	r2, [r8]
 8020d4c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020d50:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020d54:	fb02 c200 	mla	r2, r2, r0, ip
 8020d58:	b292      	uxth	r2, r2
 8020d5a:	f102 0c01 	add.w	ip, r2, #1
 8020d5e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020d62:	1212      	asrs	r2, r2, #8
 8020d64:	f888 2001 	strb.w	r2, [r8, #1]
 8020d68:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020d6c:	fb12 f303 	smulbb	r3, r2, r3
 8020d70:	fb01 3300 	mla	r3, r1, r0, r3
 8020d74:	b29b      	uxth	r3, r3
 8020d76:	1c5a      	adds	r2, r3, #1
 8020d78:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d7c:	121b      	asrs	r3, r3, #8
 8020d7e:	f888 3002 	strb.w	r3, [r8, #2]
 8020d82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020d84:	f108 0803 	add.w	r8, r8, #3
 8020d88:	441d      	add	r5, r3
 8020d8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020d8c:	441e      	add	r6, r3
 8020d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d90:	3b01      	subs	r3, #1
 8020d92:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d94:	e742      	b.n	8020c1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020d96:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020d98:	f10a 0a03 	add.w	sl, sl, #3
 8020d9c:	441d      	add	r5, r3
 8020d9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020da0:	441e      	add	r6, r3
 8020da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020da4:	3b01      	subs	r3, #1
 8020da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8020da8:	e716      	b.n	8020bd8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020daa:	d024      	beq.n	8020df6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020dae:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8020db0:	3b01      	subs	r3, #1
 8020db2:	fb00 5003 	mla	r0, r0, r3, r5
 8020db6:	1400      	asrs	r0, r0, #16
 8020db8:	f53f af2b 	bmi.w	8020c12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020dbc:	3901      	subs	r1, #1
 8020dbe:	4288      	cmp	r0, r1
 8020dc0:	f6bf af27 	bge.w	8020c12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020dc4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8020dc6:	fb01 6303 	mla	r3, r1, r3, r6
 8020dca:	141b      	asrs	r3, r3, #16
 8020dcc:	f53f af21 	bmi.w	8020c12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020dd0:	3a01      	subs	r2, #1
 8020dd2:	4293      	cmp	r3, r2
 8020dd4:	f6bf af1d 	bge.w	8020c12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020dd8:	f10a 0e03 	add.w	lr, sl, #3
 8020ddc:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8020de0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8020de4:	f1b8 0f00 	cmp.w	r8, #0
 8020de8:	dc76      	bgt.n	8020ed8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8020dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020dec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020df0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020df4:	44a2      	add	sl, r4
 8020df6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	f340 812c 	ble.w	8021056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020e02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020e04:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e0c:	eef0 6a62 	vmov.f32	s13, s5
 8020e10:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020e14:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e1c:	ee16 5a90 	vmov	r5, s13
 8020e20:	eef0 6a43 	vmov.f32	s13, s6
 8020e24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e28:	ee16 6a90 	vmov	r6, s13
 8020e2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e30:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e44:	ee12 2a90 	vmov	r2, s5
 8020e48:	eef0 2a47 	vmov.f32	s5, s14
 8020e4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e50:	ee13 2a10 	vmov	r2, s6
 8020e54:	9323      	str	r3, [sp, #140]	@ 0x8c
 8020e56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020e58:	eeb0 3a67 	vmov.f32	s6, s15
 8020e5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e60:	9324      	str	r3, [sp, #144]	@ 0x90
 8020e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020e64:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020e66:	3b01      	subs	r3, #1
 8020e68:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020e6c:	bf08      	it	eq
 8020e6e:	4613      	moveq	r3, r2
 8020e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e72:	e6a2      	b.n	8020bba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020e74:	2900      	cmp	r1, #0
 8020e76:	f43f af2c 	beq.w	8020cd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020e7a:	eb09 0003 	add.w	r0, r9, r3
 8020e7e:	0843      	lsrs	r3, r0, #1
 8020e80:	07c0      	lsls	r0, r0, #31
 8020e82:	5cfb      	ldrb	r3, [r7, r3]
 8020e84:	bf54      	ite	pl
 8020e86:	f003 030f 	andpl.w	r3, r3, #15
 8020e8a:	111b      	asrmi	r3, r3, #4
 8020e8c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020e90:	b2db      	uxtb	r3, r3
 8020e92:	930a      	str	r3, [sp, #40]	@ 0x28
 8020e94:	e71d      	b.n	8020cd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020e96:	f113 0b01 	adds.w	fp, r3, #1
 8020e9a:	f53f af72 	bmi.w	8020d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e9e:	45dc      	cmp	ip, fp
 8020ea0:	f6ff af6f 	blt.w	8020d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020ea4:	f110 0b01 	adds.w	fp, r0, #1
 8020ea8:	f53f af6b 	bmi.w	8020d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020eac:	45de      	cmp	lr, fp
 8020eae:	f6ff af68 	blt.w	8020d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020eb2:	9302      	str	r3, [sp, #8]
 8020eb4:	fa0f f38e 	sxth.w	r3, lr
 8020eb8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020eba:	9301      	str	r3, [sp, #4]
 8020ebc:	fa0f f38c 	sxth.w	r3, ip
 8020ec0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020ec4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020ec8:	9300      	str	r3, [sp, #0]
 8020eca:	463a      	mov	r2, r7
 8020ecc:	464b      	mov	r3, r9
 8020ece:	4641      	mov	r1, r8
 8020ed0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020ed2:	f7ff fd79 	bl	80209c8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8020ed6:	e754      	b.n	8020d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020ed8:	142a      	asrs	r2, r5, #16
 8020eda:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020ede:	1433      	asrs	r3, r6, #16
 8020ee0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020ee4:	fb09 2303 	mla	r3, r9, r3, r2
 8020ee8:	085a      	lsrs	r2, r3, #1
 8020eea:	07dc      	lsls	r4, r3, #31
 8020eec:	5cba      	ldrb	r2, [r7, r2]
 8020eee:	bf54      	ite	pl
 8020ef0:	f002 020f 	andpl.w	r2, r2, #15
 8020ef4:	1112      	asrmi	r2, r2, #4
 8020ef6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020efa:	b2d2      	uxtb	r2, r2
 8020efc:	2900      	cmp	r1, #0
 8020efe:	f000 8097 	beq.w	8021030 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020f02:	f103 0b01 	add.w	fp, r3, #1
 8020f06:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8020f0a:	f01b 0f01 	tst.w	fp, #1
 8020f0e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020f12:	bf0c      	ite	eq
 8020f14:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020f18:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020f1c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020f20:	fa5f f48c 	uxtb.w	r4, ip
 8020f24:	9412      	str	r4, [sp, #72]	@ 0x48
 8020f26:	b300      	cbz	r0, 8020f6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020f28:	444b      	add	r3, r9
 8020f2a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020f2e:	07dc      	lsls	r4, r3, #31
 8020f30:	f103 0301 	add.w	r3, r3, #1
 8020f34:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020f38:	bf54      	ite	pl
 8020f3a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020f3e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020f42:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020f46:	fa5f f48c 	uxtb.w	r4, ip
 8020f4a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020f4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020f50:	07dc      	lsls	r4, r3, #31
 8020f52:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020f56:	bf54      	ite	pl
 8020f58:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020f5c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020f60:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020f64:	fa5f f38c 	uxtb.w	r3, ip
 8020f68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020f6a:	b289      	uxth	r1, r1
 8020f6c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020f6e:	b280      	uxth	r0, r0
 8020f70:	fb01 f300 	mul.w	r3, r1, r0
 8020f74:	0109      	lsls	r1, r1, #4
 8020f76:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8020f7a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8020f7e:	1ac9      	subs	r1, r1, r3
 8020f80:	b280      	uxth	r0, r0
 8020f82:	b289      	uxth	r1, r1
 8020f84:	ebac 0c00 	sub.w	ip, ip, r0
 8020f88:	4361      	muls	r1, r4
 8020f8a:	fa1f fc8c 	uxth.w	ip, ip
 8020f8e:	fb02 120c 	mla	r2, r2, ip, r1
 8020f92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f94:	fb00 2001 	mla	r0, r0, r1, r2
 8020f98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020f9a:	fb03 0302 	mla	r3, r3, r2, r0
 8020f9e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	d039      	beq.n	802101a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020fa6:	4a21      	ldr	r2, [pc, #132]	@ (802102c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020fa8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020fac:	6810      	ldr	r0, [r2, #0]
 8020fae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020fb0:	fa5f fc80 	uxtb.w	ip, r0
 8020fb4:	4353      	muls	r3, r2
 8020fb6:	1c5a      	adds	r2, r3, #1
 8020fb8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020fbc:	121b      	asrs	r3, r3, #8
 8020fbe:	b29a      	uxth	r2, r3
 8020fc0:	43db      	mvns	r3, r3
 8020fc2:	fb1c fc02 	smulbb	ip, ip, r2
 8020fc6:	b2db      	uxtb	r3, r3
 8020fc8:	fb01 c103 	mla	r1, r1, r3, ip
 8020fcc:	b289      	uxth	r1, r1
 8020fce:	f101 0c01 	add.w	ip, r1, #1
 8020fd2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020fd6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8020fda:	fb1c fc03 	smulbb	ip, ip, r3
 8020fde:	1209      	asrs	r1, r1, #8
 8020fe0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020fe4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020fe8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020fec:	fb01 c102 	mla	r1, r1, r2, ip
 8020ff0:	b289      	uxth	r1, r1
 8020ff2:	f101 0c01 	add.w	ip, r1, #1
 8020ff6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020ffa:	1209      	asrs	r1, r1, #8
 8020ffc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021000:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8021004:	fb11 f303 	smulbb	r3, r1, r3
 8021008:	fb00 3002 	mla	r0, r0, r2, r3
 802100c:	b280      	uxth	r0, r0
 802100e:	1c42      	adds	r2, r0, #1
 8021010:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021014:	1200      	asrs	r0, r0, #8
 8021016:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802101a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802101c:	f10e 0e03 	add.w	lr, lr, #3
 8021020:	f108 38ff 	add.w	r8, r8, #4294967295
 8021024:	441d      	add	r5, r3
 8021026:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021028:	441e      	add	r6, r3
 802102a:	e6db      	b.n	8020de4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802102c:	24025200 	.word	0x24025200
 8021030:	2800      	cmp	r0, #0
 8021032:	d09a      	beq.n	8020f6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021034:	444b      	add	r3, r9
 8021036:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802103a:	07db      	lsls	r3, r3, #31
 802103c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021040:	bf54      	ite	pl
 8021042:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021046:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802104a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802104e:	fa5f f38c 	uxtb.w	r3, ip
 8021052:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021054:	e789      	b.n	8020f6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021056:	b017      	add	sp, #92	@ 0x5c
 8021058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802105c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 802105c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021060:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8021064:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021068:	2d00      	cmp	r5, #0
 802106a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802106e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8021072:	fb04 5e03 	mla	lr, r4, r3, r5
 8021076:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802107a:	f2c0 80b1 	blt.w	80211e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802107e:	45a9      	cmp	r9, r5
 8021080:	f340 80ae 	ble.w	80211e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021084:	2c00      	cmp	r4, #0
 8021086:	f2c0 80ab 	blt.w	80211e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802108a:	45a0      	cmp	r8, r4
 802108c:	f340 80a8 	ble.w	80211e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021090:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8021094:	f01e 0f01 	tst.w	lr, #1
 8021098:	5d97      	ldrb	r7, [r2, r6]
 802109a:	bf0c      	ite	eq
 802109c:	f007 070f 	andeq.w	r7, r7, #15
 80210a0:	113f      	asrne	r7, r7, #4
 80210a2:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 80210a6:	b2ff      	uxtb	r7, r7
 80210a8:	f115 0a01 	adds.w	sl, r5, #1
 80210ac:	f100 809a 	bmi.w	80211e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80210b0:	45d1      	cmp	r9, sl
 80210b2:	f340 8097 	ble.w	80211e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80210b6:	2c00      	cmp	r4, #0
 80210b8:	f2c0 8094 	blt.w	80211e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80210bc:	45a0      	cmp	r8, r4
 80210be:	f340 8091 	ble.w	80211e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80210c2:	2800      	cmp	r0, #0
 80210c4:	f000 8090 	beq.w	80211e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 80210c8:	f10e 0b01 	add.w	fp, lr, #1
 80210cc:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80210d0:	f01b 0f01 	tst.w	fp, #1
 80210d4:	5d96      	ldrb	r6, [r2, r6]
 80210d6:	bf0c      	ite	eq
 80210d8:	f006 060f 	andeq.w	r6, r6, #15
 80210dc:	1136      	asrne	r6, r6, #4
 80210de:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80210e2:	b2f6      	uxtb	r6, r6
 80210e4:	f1bc 0f00 	cmp.w	ip, #0
 80210e8:	f000 8082 	beq.w	80211f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80210ec:	2d00      	cmp	r5, #0
 80210ee:	f104 0401 	add.w	r4, r4, #1
 80210f2:	db7b      	blt.n	80211ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210f4:	45a9      	cmp	r9, r5
 80210f6:	dd79      	ble.n	80211ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210f8:	2c00      	cmp	r4, #0
 80210fa:	db77      	blt.n	80211ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210fc:	45a0      	cmp	r8, r4
 80210fe:	dd75      	ble.n	80211ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021100:	eb03 0b0e 	add.w	fp, r3, lr
 8021104:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8021108:	f01b 0f01 	tst.w	fp, #1
 802110c:	5d55      	ldrb	r5, [r2, r5]
 802110e:	bf0c      	ite	eq
 8021110:	f005 050f 	andeq.w	r5, r5, #15
 8021114:	112d      	asrne	r5, r5, #4
 8021116:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802111a:	b2ed      	uxtb	r5, r5
 802111c:	f1ba 0f00 	cmp.w	sl, #0
 8021120:	db69      	blt.n	80211f6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021122:	45d1      	cmp	r9, sl
 8021124:	dd67      	ble.n	80211f6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021126:	2c00      	cmp	r4, #0
 8021128:	db65      	blt.n	80211f6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802112a:	45a0      	cmp	r8, r4
 802112c:	dd63      	ble.n	80211f6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802112e:	2800      	cmp	r0, #0
 8021130:	d063      	beq.n	80211fa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8021132:	3301      	adds	r3, #1
 8021134:	449e      	add	lr, r3
 8021136:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802113a:	f01e 0f01 	tst.w	lr, #1
 802113e:	5cd4      	ldrb	r4, [r2, r3]
 8021140:	bf0c      	ite	eq
 8021142:	f004 040f 	andeq.w	r4, r4, #15
 8021146:	1124      	asrne	r4, r4, #4
 8021148:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802114c:	b2e3      	uxtb	r3, r4
 802114e:	b282      	uxth	r2, r0
 8021150:	fa1f fc8c 	uxth.w	ip, ip
 8021154:	fb02 f40c 	mul.w	r4, r2, ip
 8021158:	0112      	lsls	r2, r2, #4
 802115a:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 802115e:	fa1f f08c 	uxth.w	r0, ip
 8021162:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8021166:	1b12      	subs	r2, r2, r4
 8021168:	ebac 0c00 	sub.w	ip, ip, r0
 802116c:	b292      	uxth	r2, r2
 802116e:	fa1f fc8c 	uxth.w	ip, ip
 8021172:	4372      	muls	r2, r6
 8021174:	fb07 220c 	mla	r2, r7, ip, r2
 8021178:	fb00 2005 	mla	r0, r0, r5, r2
 802117c:	fb04 0303 	mla	r3, r4, r3, r0
 8021180:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021184:	b353      	cbz	r3, 80211dc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8021186:	4a1e      	ldr	r2, [pc, #120]	@ (8021200 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8021188:	7808      	ldrb	r0, [r1, #0]
 802118a:	6814      	ldr	r4, [r2, #0]
 802118c:	b29a      	uxth	r2, r3
 802118e:	43db      	mvns	r3, r3
 8021190:	b2e5      	uxtb	r5, r4
 8021192:	b2db      	uxtb	r3, r3
 8021194:	fb15 f502 	smulbb	r5, r5, r2
 8021198:	fb00 5003 	mla	r0, r0, r3, r5
 802119c:	b280      	uxth	r0, r0
 802119e:	1c45      	adds	r5, r0, #1
 80211a0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80211a4:	784d      	ldrb	r5, [r1, #1]
 80211a6:	fb15 f503 	smulbb	r5, r5, r3
 80211aa:	1200      	asrs	r0, r0, #8
 80211ac:	7008      	strb	r0, [r1, #0]
 80211ae:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80211b2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80211b6:	fb00 5002 	mla	r0, r0, r2, r5
 80211ba:	b280      	uxth	r0, r0
 80211bc:	1c45      	adds	r5, r0, #1
 80211be:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80211c2:	1200      	asrs	r0, r0, #8
 80211c4:	7048      	strb	r0, [r1, #1]
 80211c6:	7888      	ldrb	r0, [r1, #2]
 80211c8:	fb10 f303 	smulbb	r3, r0, r3
 80211cc:	fb04 3202 	mla	r2, r4, r2, r3
 80211d0:	b292      	uxth	r2, r2
 80211d2:	1c53      	adds	r3, r2, #1
 80211d4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80211d8:	1212      	asrs	r2, r2, #8
 80211da:	708a      	strb	r2, [r1, #2]
 80211dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211e0:	2700      	movs	r7, #0
 80211e2:	e761      	b.n	80210a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80211e4:	2600      	movs	r6, #0
 80211e6:	e77d      	b.n	80210e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80211e8:	4606      	mov	r6, r0
 80211ea:	e77b      	b.n	80210e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80211ec:	2500      	movs	r5, #0
 80211ee:	e795      	b.n	802111c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80211f0:	4663      	mov	r3, ip
 80211f2:	4665      	mov	r5, ip
 80211f4:	e7ab      	b.n	802114e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80211f6:	2300      	movs	r3, #0
 80211f8:	e7a9      	b.n	802114e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80211fa:	4603      	mov	r3, r0
 80211fc:	e7a7      	b.n	802114e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80211fe:	bf00      	nop
 8021200:	24025200 	.word	0x24025200

08021204 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021208:	b093      	sub	sp, #76	@ 0x4c
 802120a:	461c      	mov	r4, r3
 802120c:	920c      	str	r2, [sp, #48]	@ 0x30
 802120e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021210:	9011      	str	r0, [sp, #68]	@ 0x44
 8021212:	9107      	str	r1, [sp, #28]
 8021214:	6850      	ldr	r0, [r2, #4]
 8021216:	6812      	ldr	r2, [r2, #0]
 8021218:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802121c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8021220:	fb00 1303 	mla	r3, r0, r3, r1
 8021224:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021228:	eb02 0b03 	add.w	fp, r2, r3
 802122c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802122e:	689b      	ldr	r3, [r3, #8]
 8021230:	3301      	adds	r3, #1
 8021232:	f023 0301 	bic.w	r3, r3, #1
 8021236:	9309      	str	r3, [sp, #36]	@ 0x24
 8021238:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802123a:	f8d3 8000 	ldr.w	r8, [r3]
 802123e:	9b07      	ldr	r3, [sp, #28]
 8021240:	2b00      	cmp	r3, #0
 8021242:	dc03      	bgt.n	802124c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021244:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021246:	2b00      	cmp	r3, #0
 8021248:	f340 822b 	ble.w	80216a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802124c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802124e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021252:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021256:	1e48      	subs	r0, r1, #1
 8021258:	1e57      	subs	r7, r2, #1
 802125a:	2c00      	cmp	r4, #0
 802125c:	f340 80d7 	ble.w	802140e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021260:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021264:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021268:	d406      	bmi.n	8021278 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802126a:	4584      	cmp	ip, r0
 802126c:	da04      	bge.n	8021278 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802126e:	2b00      	cmp	r3, #0
 8021270:	db02      	blt.n	8021278 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021272:	42bb      	cmp	r3, r7
 8021274:	f2c0 80cc 	blt.w	8021410 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021278:	f11c 0c01 	adds.w	ip, ip, #1
 802127c:	f100 80bf 	bmi.w	80213fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021280:	4561      	cmp	r1, ip
 8021282:	f2c0 80bc 	blt.w	80213fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021286:	3301      	adds	r3, #1
 8021288:	f100 80b9 	bmi.w	80213fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802128c:	429a      	cmp	r2, r3
 802128e:	f2c0 80b6 	blt.w	80213fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021292:	46a2      	mov	sl, r4
 8021294:	465f      	mov	r7, fp
 8021296:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802129a:	f1ba 0f00 	cmp.w	sl, #0
 802129e:	f340 80d4 	ble.w	802144a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80212a2:	f3c5 3303 	ubfx	r3, r5, #12, #4
 80212a6:	1430      	asrs	r0, r6, #16
 80212a8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80212ac:	9308      	str	r3, [sp, #32]
 80212ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80212b0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80212b4:	142b      	asrs	r3, r5, #16
 80212b6:	f100 8124 	bmi.w	8021502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80212ba:	f10c 32ff 	add.w	r2, ip, #4294967295
 80212be:	4293      	cmp	r3, r2
 80212c0:	f280 811f 	bge.w	8021502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80212c4:	2800      	cmp	r0, #0
 80212c6:	f2c0 811c 	blt.w	8021502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80212ca:	f10e 32ff 	add.w	r2, lr, #4294967295
 80212ce:	4290      	cmp	r0, r2
 80212d0:	f280 8117 	bge.w	8021502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80212d4:	fb00 3309 	mla	r3, r0, r9, r3
 80212d8:	0858      	lsrs	r0, r3, #1
 80212da:	07da      	lsls	r2, r3, #31
 80212dc:	9a08      	ldr	r2, [sp, #32]
 80212de:	f818 c000 	ldrb.w	ip, [r8, r0]
 80212e2:	bf54      	ite	pl
 80212e4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80212e8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80212ec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80212f0:	fa5f fc8c 	uxtb.w	ip, ip
 80212f4:	2a00      	cmp	r2, #0
 80212f6:	f000 80ed 	beq.w	80214d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80212fa:	1c58      	adds	r0, r3, #1
 80212fc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021300:	07c0      	lsls	r0, r0, #31
 8021302:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8021306:	bf54      	ite	pl
 8021308:	f00e 0e0f 	andpl.w	lr, lr, #15
 802130c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021310:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021314:	fa5f fe8e 	uxtb.w	lr, lr
 8021318:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802131c:	b1c9      	cbz	r1, 8021352 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802131e:	444b      	add	r3, r9
 8021320:	0858      	lsrs	r0, r3, #1
 8021322:	07da      	lsls	r2, r3, #31
 8021324:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021328:	bf54      	ite	pl
 802132a:	f000 000f 	andpl.w	r0, r0, #15
 802132e:	1100      	asrmi	r0, r0, #4
 8021330:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021334:	b2c0      	uxtb	r0, r0
 8021336:	900a      	str	r0, [sp, #40]	@ 0x28
 8021338:	1c58      	adds	r0, r3, #1
 802133a:	0843      	lsrs	r3, r0, #1
 802133c:	07c2      	lsls	r2, r0, #31
 802133e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8021342:	bf54      	ite	pl
 8021344:	f003 030f 	andpl.w	r3, r3, #15
 8021348:	111b      	asrmi	r3, r3, #4
 802134a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802134e:	b2db      	uxtb	r3, r3
 8021350:	930e      	str	r3, [sp, #56]	@ 0x38
 8021352:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021356:	b289      	uxth	r1, r1
 8021358:	fb02 f301 	mul.w	r3, r2, r1
 802135c:	0112      	lsls	r2, r2, #4
 802135e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021362:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8021366:	1ad2      	subs	r2, r2, r3
 8021368:	b289      	uxth	r1, r1
 802136a:	b292      	uxth	r2, r2
 802136c:	1a40      	subs	r0, r0, r1
 802136e:	fa1f fe80 	uxth.w	lr, r0
 8021372:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021374:	4342      	muls	r2, r0
 8021376:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802137a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802137c:	fb01 c102 	mla	r1, r1, r2, ip
 8021380:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021382:	fb03 1302 	mla	r3, r3, r2, r1
 8021386:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802138a:	b383      	cbz	r3, 80213ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802138c:	4ac6      	ldr	r2, [pc, #792]	@ (80216a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802138e:	2bff      	cmp	r3, #255	@ 0xff
 8021390:	6812      	ldr	r2, [r2, #0]
 8021392:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8021396:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802139a:	b2d2      	uxtb	r2, r2
 802139c:	f000 80ac 	beq.w	80214f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80213a0:	b299      	uxth	r1, r3
 80213a2:	43db      	mvns	r3, r3
 80213a4:	f897 c000 	ldrb.w	ip, [r7]
 80213a8:	fb12 f201 	smulbb	r2, r2, r1
 80213ac:	b2db      	uxtb	r3, r3
 80213ae:	fb10 f001 	smulbb	r0, r0, r1
 80213b2:	fb0c 2203 	mla	r2, ip, r3, r2
 80213b6:	fb1e f101 	smulbb	r1, lr, r1
 80213ba:	b292      	uxth	r2, r2
 80213bc:	f102 0c01 	add.w	ip, r2, #1
 80213c0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80213c4:	1212      	asrs	r2, r2, #8
 80213c6:	703a      	strb	r2, [r7, #0]
 80213c8:	787a      	ldrb	r2, [r7, #1]
 80213ca:	fb02 0003 	mla	r0, r2, r3, r0
 80213ce:	b280      	uxth	r0, r0
 80213d0:	1c42      	adds	r2, r0, #1
 80213d2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80213d6:	78ba      	ldrb	r2, [r7, #2]
 80213d8:	fb02 1303 	mla	r3, r2, r3, r1
 80213dc:	1200      	asrs	r0, r0, #8
 80213de:	b29b      	uxth	r3, r3
 80213e0:	7078      	strb	r0, [r7, #1]
 80213e2:	f103 0e01 	add.w	lr, r3, #1
 80213e6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80213ea:	121b      	asrs	r3, r3, #8
 80213ec:	70bb      	strb	r3, [r7, #2]
 80213ee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80213f0:	3703      	adds	r7, #3
 80213f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80213f6:	441d      	add	r5, r3
 80213f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80213fa:	441e      	add	r6, r3
 80213fc:	e74d      	b.n	802129a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80213fe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021400:	3c01      	subs	r4, #1
 8021402:	f10b 0b03 	add.w	fp, fp, #3
 8021406:	441d      	add	r5, r3
 8021408:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802140a:	441e      	add	r6, r3
 802140c:	e725      	b.n	802125a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802140e:	d021      	beq.n	8021454 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021410:	1e63      	subs	r3, r4, #1
 8021412:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8021414:	fb00 5003 	mla	r0, r0, r3, r5
 8021418:	1400      	asrs	r0, r0, #16
 802141a:	f53f af3a 	bmi.w	8021292 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802141e:	3901      	subs	r1, #1
 8021420:	4288      	cmp	r0, r1
 8021422:	f6bf af36 	bge.w	8021292 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021426:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8021428:	fb01 6303 	mla	r3, r1, r3, r6
 802142c:	141b      	asrs	r3, r3, #16
 802142e:	f53f af30 	bmi.w	8021292 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021432:	3a01      	subs	r2, #1
 8021434:	4293      	cmp	r3, r2
 8021436:	f6bf af2c 	bge.w	8021292 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802143a:	f10b 0c03 	add.w	ip, fp, #3
 802143e:	46a6      	mov	lr, r4
 8021440:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021444:	f1be 0f00 	cmp.w	lr, #0
 8021448:	dc79      	bgt.n	802153e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802144a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802144e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021452:	44a3      	add	fp, r4
 8021454:	9b07      	ldr	r3, [sp, #28]
 8021456:	2b00      	cmp	r3, #0
 8021458:	f340 8123 	ble.w	80216a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802145c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021460:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021462:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021466:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802146a:	eef0 6a62 	vmov.f32	s13, s5
 802146e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021472:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021476:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802147a:	ee16 5a90 	vmov	r5, s13
 802147e:	eef0 6a43 	vmov.f32	s13, s6
 8021482:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021486:	ee16 6a90 	vmov	r6, s13
 802148a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802148e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021492:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021496:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802149a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802149e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80214a2:	ee12 2a90 	vmov	r2, s5
 80214a6:	eef0 2a47 	vmov.f32	s5, s14
 80214aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80214ae:	ee13 2a10 	vmov	r2, s6
 80214b2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80214b4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80214b6:	eeb0 3a67 	vmov.f32	s6, s15
 80214ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80214be:	9320      	str	r3, [sp, #128]	@ 0x80
 80214c0:	9b07      	ldr	r3, [sp, #28]
 80214c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80214c4:	3b01      	subs	r3, #1
 80214c6:	9307      	str	r3, [sp, #28]
 80214c8:	bf08      	it	eq
 80214ca:	4614      	moveq	r4, r2
 80214cc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80214ce:	bf18      	it	ne
 80214d0:	461c      	movne	r4, r3
 80214d2:	e6b4      	b.n	802123e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80214d4:	2900      	cmp	r1, #0
 80214d6:	f43f af3c 	beq.w	8021352 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80214da:	eb09 0003 	add.w	r0, r9, r3
 80214de:	0843      	lsrs	r3, r0, #1
 80214e0:	07c0      	lsls	r0, r0, #31
 80214e2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80214e6:	bf54      	ite	pl
 80214e8:	f003 030f 	andpl.w	r3, r3, #15
 80214ec:	111b      	asrmi	r3, r3, #4
 80214ee:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80214f2:	b2db      	uxtb	r3, r3
 80214f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80214f6:	e72c      	b.n	8021352 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80214f8:	703a      	strb	r2, [r7, #0]
 80214fa:	7078      	strb	r0, [r7, #1]
 80214fc:	f887 e002 	strb.w	lr, [r7, #2]
 8021500:	e775      	b.n	80213ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021502:	1c5a      	adds	r2, r3, #1
 8021504:	f53f af73 	bmi.w	80213ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021508:	4594      	cmp	ip, r2
 802150a:	f6ff af70 	blt.w	80213ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802150e:	1c42      	adds	r2, r0, #1
 8021510:	f53f af6d 	bmi.w	80213ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021514:	4596      	cmp	lr, r2
 8021516:	f6ff af6a 	blt.w	80213ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802151a:	9302      	str	r3, [sp, #8]
 802151c:	fa0f f38e 	sxth.w	r3, lr
 8021520:	9a08      	ldr	r2, [sp, #32]
 8021522:	9301      	str	r3, [sp, #4]
 8021524:	fa0f f38c 	sxth.w	r3, ip
 8021528:	9105      	str	r1, [sp, #20]
 802152a:	4639      	mov	r1, r7
 802152c:	9300      	str	r3, [sp, #0]
 802152e:	464b      	mov	r3, r9
 8021530:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021534:	4642      	mov	r2, r8
 8021536:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021538:	f7ff fd90 	bl	802105c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 802153c:	e757      	b.n	80213ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802153e:	142a      	asrs	r2, r5, #16
 8021540:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021544:	1433      	asrs	r3, r6, #16
 8021546:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802154a:	fb09 2303 	mla	r3, r9, r3, r2
 802154e:	085a      	lsrs	r2, r3, #1
 8021550:	07d9      	lsls	r1, r3, #31
 8021552:	f818 2002 	ldrb.w	r2, [r8, r2]
 8021556:	bf54      	ite	pl
 8021558:	f002 020f 	andpl.w	r2, r2, #15
 802155c:	1112      	asrmi	r2, r2, #4
 802155e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021562:	b2d2      	uxtb	r2, r2
 8021564:	2800      	cmp	r0, #0
 8021566:	f000 8085 	beq.w	8021674 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802156a:	f103 0a01 	add.w	sl, r3, #1
 802156e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8021572:	f01a 0f01 	tst.w	sl, #1
 8021576:	f818 1001 	ldrb.w	r1, [r8, r1]
 802157a:	bf0c      	ite	eq
 802157c:	f001 010f 	andeq.w	r1, r1, #15
 8021580:	1109      	asrne	r1, r1, #4
 8021582:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021586:	b2c9      	uxtb	r1, r1
 8021588:	910f      	str	r1, [sp, #60]	@ 0x3c
 802158a:	b1df      	cbz	r7, 80215c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802158c:	444b      	add	r3, r9
 802158e:	0859      	lsrs	r1, r3, #1
 8021590:	f013 0f01 	tst.w	r3, #1
 8021594:	f103 0301 	add.w	r3, r3, #1
 8021598:	f818 1001 	ldrb.w	r1, [r8, r1]
 802159c:	bf0c      	ite	eq
 802159e:	f001 010f 	andeq.w	r1, r1, #15
 80215a2:	1109      	asrne	r1, r1, #4
 80215a4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80215a8:	b2c9      	uxtb	r1, r1
 80215aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80215ac:	0859      	lsrs	r1, r3, #1
 80215ae:	07db      	lsls	r3, r3, #31
 80215b0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80215b4:	bf54      	ite	pl
 80215b6:	f001 010f 	andpl.w	r1, r1, #15
 80215ba:	1109      	asrmi	r1, r1, #4
 80215bc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80215c0:	b2c9      	uxtb	r1, r1
 80215c2:	9110      	str	r1, [sp, #64]	@ 0x40
 80215c4:	b280      	uxth	r0, r0
 80215c6:	b2bf      	uxth	r7, r7
 80215c8:	fb00 f307 	mul.w	r3, r0, r7
 80215cc:	0100      	lsls	r0, r0, #4
 80215ce:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80215d2:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80215d6:	1ac0      	subs	r0, r0, r3
 80215d8:	b2bf      	uxth	r7, r7
 80215da:	b280      	uxth	r0, r0
 80215dc:	1bc9      	subs	r1, r1, r7
 80215de:	fa1f fa81 	uxth.w	sl, r1
 80215e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80215e4:	4348      	muls	r0, r1
 80215e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80215e8:	fb02 020a 	mla	r2, r2, sl, r0
 80215ec:	fb07 2701 	mla	r7, r7, r1, r2
 80215f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80215f2:	fb03 7302 	mla	r3, r3, r2, r7
 80215f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215fa:	b393      	cbz	r3, 8021662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80215fc:	4a2a      	ldr	r2, [pc, #168]	@ (80216a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80215fe:	2bff      	cmp	r3, #255	@ 0xff
 8021600:	6811      	ldr	r1, [r2, #0]
 8021602:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8021606:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802160a:	b2c9      	uxtb	r1, r1
 802160c:	d042      	beq.n	8021694 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802160e:	b298      	uxth	r0, r3
 8021610:	43db      	mvns	r3, r3
 8021612:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8021616:	fb11 f100 	smulbb	r1, r1, r0
 802161a:	b2db      	uxtb	r3, r3
 802161c:	fb17 f700 	smulbb	r7, r7, r0
 8021620:	fb02 1103 	mla	r1, r2, r3, r1
 8021624:	fb1a f000 	smulbb	r0, sl, r0
 8021628:	b289      	uxth	r1, r1
 802162a:	1c4a      	adds	r2, r1, #1
 802162c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021630:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8021634:	fb02 7703 	mla	r7, r2, r3, r7
 8021638:	1209      	asrs	r1, r1, #8
 802163a:	b2bf      	uxth	r7, r7
 802163c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021640:	1c7a      	adds	r2, r7, #1
 8021642:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021646:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802164a:	fb02 0303 	mla	r3, r2, r3, r0
 802164e:	123f      	asrs	r7, r7, #8
 8021650:	b29b      	uxth	r3, r3
 8021652:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021656:	1c5a      	adds	r2, r3, #1
 8021658:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802165c:	121b      	asrs	r3, r3, #8
 802165e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8021662:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021664:	f10c 0c03 	add.w	ip, ip, #3
 8021668:	f10e 3eff 	add.w	lr, lr, #4294967295
 802166c:	441d      	add	r5, r3
 802166e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021670:	441e      	add	r6, r3
 8021672:	e6e7      	b.n	8021444 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8021674:	2f00      	cmp	r7, #0
 8021676:	d0a5      	beq.n	80215c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021678:	444b      	add	r3, r9
 802167a:	0859      	lsrs	r1, r3, #1
 802167c:	07db      	lsls	r3, r3, #31
 802167e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021682:	bf54      	ite	pl
 8021684:	f001 010f 	andpl.w	r1, r1, #15
 8021688:	1109      	asrmi	r1, r1, #4
 802168a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802168e:	b2c9      	uxtb	r1, r1
 8021690:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021692:	e797      	b.n	80215c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021694:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021698:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802169c:	f80c ac01 	strb.w	sl, [ip, #-1]
 80216a0:	e7df      	b.n	8021662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80216a2:	b013      	add	sp, #76	@ 0x4c
 80216a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216a8:	24025200 	.word	0x24025200

080216ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 80216ac:	b530      	push	{r4, r5, lr}
 80216ae:	b29d      	uxth	r5, r3
 80216b0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80216b4:	780c      	ldrb	r4, [r1, #0]
 80216b6:	b298      	uxth	r0, r3
 80216b8:	7813      	ldrb	r3, [r2, #0]
 80216ba:	fb14 f405 	smulbb	r4, r4, r5
 80216be:	fb13 f300 	smulbb	r3, r3, r0
 80216c2:	441c      	add	r4, r3
 80216c4:	b2a4      	uxth	r4, r4
 80216c6:	1c63      	adds	r3, r4, #1
 80216c8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80216cc:	7853      	ldrb	r3, [r2, #1]
 80216ce:	fb13 f300 	smulbb	r3, r3, r0
 80216d2:	1224      	asrs	r4, r4, #8
 80216d4:	7014      	strb	r4, [r2, #0]
 80216d6:	784c      	ldrb	r4, [r1, #1]
 80216d8:	fb14 f405 	smulbb	r4, r4, r5
 80216dc:	441c      	add	r4, r3
 80216de:	b2a4      	uxth	r4, r4
 80216e0:	1c63      	adds	r3, r4, #1
 80216e2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80216e6:	1224      	asrs	r4, r4, #8
 80216e8:	7054      	strb	r4, [r2, #1]
 80216ea:	788b      	ldrb	r3, [r1, #2]
 80216ec:	7891      	ldrb	r1, [r2, #2]
 80216ee:	fb13 f305 	smulbb	r3, r3, r5
 80216f2:	fb11 f000 	smulbb	r0, r1, r0
 80216f6:	4403      	add	r3, r0
 80216f8:	b29b      	uxth	r3, r3
 80216fa:	1c59      	adds	r1, r3, #1
 80216fc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021700:	121b      	asrs	r3, r3, #8
 8021702:	7093      	strb	r3, [r2, #2]
 8021704:	bd30      	pop	{r4, r5, pc}
	...

08021708 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802170c:	461c      	mov	r4, r3
 802170e:	b08b      	sub	sp, #44	@ 0x2c
 8021710:	460e      	mov	r6, r1
 8021712:	4615      	mov	r5, r2
 8021714:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021716:	4682      	mov	sl, r0
 8021718:	6861      	ldr	r1, [r4, #4]
 802171a:	aa06      	add	r2, sp, #24
 802171c:	6820      	ldr	r0, [r4, #0]
 802171e:	2702      	movs	r7, #2
 8021720:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8021724:	3504      	adds	r5, #4
 8021726:	c203      	stmia	r2!, {r0, r1}
 8021728:	6818      	ldr	r0, [r3, #0]
 802172a:	aa08      	add	r2, sp, #32
 802172c:	6859      	ldr	r1, [r3, #4]
 802172e:	c203      	stmia	r2!, {r0, r1}
 8021730:	a806      	add	r0, sp, #24
 8021732:	f7f2 fb01 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021736:	4621      	mov	r1, r4
 8021738:	a808      	add	r0, sp, #32
 802173a:	f7f2 fb25 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802173e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021742:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8021746:	f002 0301 	and.w	r3, r2, #1
 802174a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802174e:	9302      	str	r3, [sp, #8]
 8021750:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021754:	f003 0101 	and.w	r1, r3, #1
 8021758:	9101      	str	r1, [sp, #4]
 802175a:	9801      	ldr	r0, [sp, #4]
 802175c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8021760:	4403      	add	r3, r0
 8021762:	fb01 2303 	mla	r3, r1, r3, r2
 8021766:	fb93 f3f7 	sdiv	r3, r3, r7
 802176a:	441e      	add	r6, r3
 802176c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8021770:	441a      	add	r2, r3
 8021772:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8021776:	4419      	add	r1, r3
 8021778:	4b70      	ldr	r3, [pc, #448]	@ (802193c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 802177a:	f8ad 2020 	strh.w	r2, [sp, #32]
 802177e:	6818      	ldr	r0, [r3, #0]
 8021780:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8021784:	6803      	ldr	r3, [r0, #0]
 8021786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021788:	4798      	blx	r3
 802178a:	4a6d      	ldr	r2, [pc, #436]	@ (8021940 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 802178c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021790:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021794:	8813      	ldrh	r3, [r2, #0]
 8021796:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802179a:	fb03 1404 	mla	r4, r3, r4, r1
 802179e:	4611      	mov	r1, r2
 80217a0:	fb0b f303 	mul.w	r3, fp, r3
 80217a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80217a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217ac:	4404      	add	r4, r0
 80217ae:	4423      	add	r3, r4
 80217b0:	d073      	beq.n	802189a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80217b2:	9705      	str	r7, [sp, #20]
 80217b4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80217b8:	9b03      	ldr	r3, [sp, #12]
 80217ba:	429c      	cmp	r4, r3
 80217bc:	f080 80b5 	bcs.w	802192a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80217c0:	9b02      	ldr	r3, [sp, #8]
 80217c2:	b35b      	cbz	r3, 802181c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 80217c4:	7831      	ldrb	r1, [r6, #0]
 80217c6:	4622      	mov	r2, r4
 80217c8:	1c77      	adds	r7, r6, #1
 80217ca:	3403      	adds	r4, #3
 80217cc:	f001 010f 	and.w	r1, r1, #15
 80217d0:	f108 3bff 	add.w	fp, r8, #4294967295
 80217d4:	464b      	mov	r3, r9
 80217d6:	4650      	mov	r0, sl
 80217d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217dc:	4429      	add	r1, r5
 80217de:	f7ff ff65 	bl	80216ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80217e2:	f1bb 0f01 	cmp.w	fp, #1
 80217e6:	dd1c      	ble.n	8021822 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 80217e8:	7839      	ldrb	r1, [r7, #0]
 80217ea:	4622      	mov	r2, r4
 80217ec:	464b      	mov	r3, r9
 80217ee:	4650      	mov	r0, sl
 80217f0:	0909      	lsrs	r1, r1, #4
 80217f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80217f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217fa:	4429      	add	r1, r5
 80217fc:	f7ff ff56 	bl	80216ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021800:	f817 1b01 	ldrb.w	r1, [r7], #1
 8021804:	1ce2      	adds	r2, r4, #3
 8021806:	464b      	mov	r3, r9
 8021808:	f001 010f 	and.w	r1, r1, #15
 802180c:	4650      	mov	r0, sl
 802180e:	3406      	adds	r4, #6
 8021810:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021814:	4429      	add	r1, r5
 8021816:	f7ff ff49 	bl	80216ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802181a:	e7e2      	b.n	80217e2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802181c:	4637      	mov	r7, r6
 802181e:	46c3      	mov	fp, r8
 8021820:	e7df      	b.n	80217e2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8021822:	d10a      	bne.n	802183a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8021824:	7839      	ldrb	r1, [r7, #0]
 8021826:	4622      	mov	r2, r4
 8021828:	3403      	adds	r4, #3
 802182a:	464b      	mov	r3, r9
 802182c:	0909      	lsrs	r1, r1, #4
 802182e:	4650      	mov	r0, sl
 8021830:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021834:	4429      	add	r1, r5
 8021836:	f7ff ff39 	bl	80216ac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802183a:	9b04      	ldr	r3, [sp, #16]
 802183c:	9a01      	ldr	r2, [sp, #4]
 802183e:	881b      	ldrh	r3, [r3, #0]
 8021840:	eba3 0308 	sub.w	r3, r3, r8
 8021844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021848:	441c      	add	r4, r3
 802184a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802184e:	4413      	add	r3, r2
 8021850:	9a05      	ldr	r2, [sp, #20]
 8021852:	fb93 f3f2 	sdiv	r3, r3, r2
 8021856:	441e      	add	r6, r3
 8021858:	e7ae      	b.n	80217b8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 802185a:	4632      	mov	r2, r6
 802185c:	46c4      	mov	ip, r8
 802185e:	e037      	b.n	80218d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8021860:	d10e      	bne.n	8021880 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8021862:	7812      	ldrb	r2, [r2, #0]
 8021864:	3003      	adds	r0, #3
 8021866:	0912      	lsrs	r2, r2, #4
 8021868:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802186c:	18ac      	adds	r4, r5, r2
 802186e:	5caa      	ldrb	r2, [r5, r2]
 8021870:	f800 2c03 	strb.w	r2, [r0, #-3]
 8021874:	7862      	ldrb	r2, [r4, #1]
 8021876:	f800 2c02 	strb.w	r2, [r0, #-2]
 802187a:	78a2      	ldrb	r2, [r4, #2]
 802187c:	f800 2c01 	strb.w	r2, [r0, #-1]
 8021880:	880c      	ldrh	r4, [r1, #0]
 8021882:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8021886:	eba4 0408 	sub.w	r4, r4, r8
 802188a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802188e:	4404      	add	r4, r0
 8021890:	9801      	ldr	r0, [sp, #4]
 8021892:	4402      	add	r2, r0
 8021894:	fb92 f2f7 	sdiv	r2, r2, r7
 8021898:	4416      	add	r6, r2
 802189a:	429c      	cmp	r4, r3
 802189c:	d245      	bcs.n	802192a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802189e:	9a02      	ldr	r2, [sp, #8]
 80218a0:	2a00      	cmp	r2, #0
 80218a2:	d0da      	beq.n	802185a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 80218a4:	7830      	ldrb	r0, [r6, #0]
 80218a6:	1c72      	adds	r2, r6, #1
 80218a8:	3403      	adds	r4, #3
 80218aa:	f000 000f 	and.w	r0, r0, #15
 80218ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80218b2:	eb05 0c00 	add.w	ip, r5, r0
 80218b6:	5c28      	ldrb	r0, [r5, r0]
 80218b8:	f804 0c03 	strb.w	r0, [r4, #-3]
 80218bc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80218c0:	f804 0c02 	strb.w	r0, [r4, #-2]
 80218c4:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80218c8:	f108 3cff 	add.w	ip, r8, #4294967295
 80218cc:	f804 0c01 	strb.w	r0, [r4, #-1]
 80218d0:	f1bc 0f01 	cmp.w	ip, #1
 80218d4:	4620      	mov	r0, r4
 80218d6:	f104 0406 	add.w	r4, r4, #6
 80218da:	ddc1      	ble.n	8021860 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80218dc:	7810      	ldrb	r0, [r2, #0]
 80218de:	f1ac 0c02 	sub.w	ip, ip, #2
 80218e2:	0900      	lsrs	r0, r0, #4
 80218e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80218e8:	eb05 0e00 	add.w	lr, r5, r0
 80218ec:	5c28      	ldrb	r0, [r5, r0]
 80218ee:	f804 0c06 	strb.w	r0, [r4, #-6]
 80218f2:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80218f6:	f804 0c05 	strb.w	r0, [r4, #-5]
 80218fa:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80218fe:	f804 0c04 	strb.w	r0, [r4, #-4]
 8021902:	f812 0b01 	ldrb.w	r0, [r2], #1
 8021906:	f000 000f 	and.w	r0, r0, #15
 802190a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802190e:	eb05 0e00 	add.w	lr, r5, r0
 8021912:	5c28      	ldrb	r0, [r5, r0]
 8021914:	f804 0c03 	strb.w	r0, [r4, #-3]
 8021918:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802191c:	f804 0c02 	strb.w	r0, [r4, #-2]
 8021920:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8021924:	f804 0c01 	strb.w	r0, [r4, #-1]
 8021928:	e7d2      	b.n	80218d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802192a:	4b04      	ldr	r3, [pc, #16]	@ (802193c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 802192c:	6818      	ldr	r0, [r3, #0]
 802192e:	6803      	ldr	r3, [r0, #0]
 8021930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021932:	4798      	blx	r3
 8021934:	b00b      	add	sp, #44	@ 0x2c
 8021936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802193a:	bf00      	nop
 802193c:	240251f0 	.word	0x240251f0
 8021940:	240251ea 	.word	0x240251ea

08021944 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8021944:	b530      	push	{r4, r5, lr}
 8021946:	f89d 000c 	ldrb.w	r0, [sp, #12]
 802194a:	780d      	ldrb	r5, [r1, #0]
 802194c:	28ff      	cmp	r0, #255	@ 0xff
 802194e:	d107      	bne.n	8021960 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8021950:	2bff      	cmp	r3, #255	@ 0xff
 8021952:	d105      	bne.n	8021960 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8021954:	7015      	strb	r5, [r2, #0]
 8021956:	784b      	ldrb	r3, [r1, #1]
 8021958:	7053      	strb	r3, [r2, #1]
 802195a:	788b      	ldrb	r3, [r1, #2]
 802195c:	7093      	strb	r3, [r2, #2]
 802195e:	bd30      	pop	{r4, r5, pc}
 8021960:	fb10 f003 	smulbb	r0, r0, r3
 8021964:	b283      	uxth	r3, r0
 8021966:	1c58      	adds	r0, r3, #1
 8021968:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802196c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021970:	b284      	uxth	r4, r0
 8021972:	43c0      	mvns	r0, r0
 8021974:	fb15 f504 	smulbb	r5, r5, r4
 8021978:	b2c3      	uxtb	r3, r0
 802197a:	7810      	ldrb	r0, [r2, #0]
 802197c:	fb00 5003 	mla	r0, r0, r3, r5
 8021980:	b280      	uxth	r0, r0
 8021982:	1c45      	adds	r5, r0, #1
 8021984:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021988:	7855      	ldrb	r5, [r2, #1]
 802198a:	fb15 f503 	smulbb	r5, r5, r3
 802198e:	1200      	asrs	r0, r0, #8
 8021990:	7010      	strb	r0, [r2, #0]
 8021992:	7848      	ldrb	r0, [r1, #1]
 8021994:	fb00 5004 	mla	r0, r0, r4, r5
 8021998:	b280      	uxth	r0, r0
 802199a:	1c45      	adds	r5, r0, #1
 802199c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80219a0:	1200      	asrs	r0, r0, #8
 80219a2:	7050      	strb	r0, [r2, #1]
 80219a4:	7888      	ldrb	r0, [r1, #2]
 80219a6:	7891      	ldrb	r1, [r2, #2]
 80219a8:	fb11 f303 	smulbb	r3, r1, r3
 80219ac:	fb00 3304 	mla	r3, r0, r4, r3
 80219b0:	b29b      	uxth	r3, r3
 80219b2:	1c59      	adds	r1, r3, #1
 80219b4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80219b8:	121b      	asrs	r3, r3, #8
 80219ba:	e7cf      	b.n	802195c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

080219bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80219bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219c0:	461d      	mov	r5, r3
 80219c2:	b08f      	sub	sp, #60	@ 0x3c
 80219c4:	460c      	mov	r4, r1
 80219c6:	4616      	mov	r6, r2
 80219c8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80219ca:	4680      	mov	r8, r0
 80219cc:	6869      	ldr	r1, [r5, #4]
 80219ce:	aa0a      	add	r2, sp, #40	@ 0x28
 80219d0:	6828      	ldr	r0, [r5, #0]
 80219d2:	3604      	adds	r6, #4
 80219d4:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 80219d8:	4f57      	ldr	r7, [pc, #348]	@ (8021b38 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 80219da:	c203      	stmia	r2!, {r0, r1}
 80219dc:	6818      	ldr	r0, [r3, #0]
 80219de:	aa0c      	add	r2, sp, #48	@ 0x30
 80219e0:	6859      	ldr	r1, [r3, #4]
 80219e2:	c203      	stmia	r2!, {r0, r1}
 80219e4:	a80a      	add	r0, sp, #40	@ 0x28
 80219e6:	f7f2 f9a7 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219ea:	4629      	mov	r1, r5
 80219ec:	a80c      	add	r0, sp, #48	@ 0x30
 80219ee:	2502      	movs	r5, #2
 80219f0:	f7f2 f9ca 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219f4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80219f8:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 80219fc:	f002 0301 	and.w	r3, r2, #1
 8021a00:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8021a04:	9304      	str	r3, [sp, #16]
 8021a06:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021a0a:	f003 0101 	and.w	r1, r3, #1
 8021a0e:	9103      	str	r1, [sp, #12]
 8021a10:	9803      	ldr	r0, [sp, #12]
 8021a12:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8021a16:	4403      	add	r3, r0
 8021a18:	6838      	ldr	r0, [r7, #0]
 8021a1a:	fb01 2303 	mla	r3, r1, r3, r2
 8021a1e:	fb93 f3f5 	sdiv	r3, r3, r5
 8021a22:	18e5      	adds	r5, r4, r3
 8021a24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021a28:	441a      	add	r2, r3
 8021a2a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021a2e:	4419      	add	r1, r3
 8021a30:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8021a34:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8021a38:	6803      	ldr	r3, [r0, #0]
 8021a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021a3c:	4798      	blx	r3
 8021a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8021b3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8021a40:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8021a44:	8813      	ldrh	r3, [r2, #0]
 8021a46:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8021a4a:	9207      	str	r2, [sp, #28]
 8021a4c:	fb03 1404 	mla	r4, r3, r4, r1
 8021a50:	fb0a f303 	mul.w	r3, sl, r3
 8021a54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021a58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021a5c:	4404      	add	r4, r0
 8021a5e:	18e3      	adds	r3, r4, r3
 8021a60:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8021a64:	9b05      	ldr	r3, [sp, #20]
 8021a66:	429c      	cmp	r4, r3
 8021a68:	d25d      	bcs.n	8021b26 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8021a6a:	9b04      	ldr	r3, [sp, #16]
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	d037      	beq.n	8021ae0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8021a70:	782b      	ldrb	r3, [r5, #0]
 8021a72:	1c6f      	adds	r7, r5, #1
 8021a74:	f003 030f 	and.w	r3, r3, #15
 8021a78:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a7e:	0e1b      	lsrs	r3, r3, #24
 8021a80:	d006      	beq.n	8021a90 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8021a82:	9300      	str	r3, [sp, #0]
 8021a84:	4622      	mov	r2, r4
 8021a86:	464b      	mov	r3, r9
 8021a88:	a909      	add	r1, sp, #36	@ 0x24
 8021a8a:	4640      	mov	r0, r8
 8021a8c:	f7ff ff5a 	bl	8021944 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021a90:	3403      	adds	r4, #3
 8021a92:	f10b 3aff 	add.w	sl, fp, #4294967295
 8021a96:	f1ba 0f01 	cmp.w	sl, #1
 8021a9a:	dd24      	ble.n	8021ae6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8021a9c:	783b      	ldrb	r3, [r7, #0]
 8021a9e:	091b      	lsrs	r3, r3, #4
 8021aa0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021aa4:	9308      	str	r3, [sp, #32]
 8021aa6:	0e1b      	lsrs	r3, r3, #24
 8021aa8:	d006      	beq.n	8021ab8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8021aaa:	9300      	str	r3, [sp, #0]
 8021aac:	4622      	mov	r2, r4
 8021aae:	464b      	mov	r3, r9
 8021ab0:	a908      	add	r1, sp, #32
 8021ab2:	4640      	mov	r0, r8
 8021ab4:	f7ff ff46 	bl	8021944 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021ab8:	f817 3b01 	ldrb.w	r3, [r7], #1
 8021abc:	f003 030f 	and.w	r3, r3, #15
 8021ac0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ac6:	0e1b      	lsrs	r3, r3, #24
 8021ac8:	d006      	beq.n	8021ad8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8021aca:	9300      	str	r3, [sp, #0]
 8021acc:	1ce2      	adds	r2, r4, #3
 8021ace:	464b      	mov	r3, r9
 8021ad0:	a909      	add	r1, sp, #36	@ 0x24
 8021ad2:	4640      	mov	r0, r8
 8021ad4:	f7ff ff36 	bl	8021944 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021ad8:	3406      	adds	r4, #6
 8021ada:	f1aa 0a02 	sub.w	sl, sl, #2
 8021ade:	e7da      	b.n	8021a96 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8021ae0:	462f      	mov	r7, r5
 8021ae2:	46da      	mov	sl, fp
 8021ae4:	e7d7      	b.n	8021a96 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8021ae6:	d10e      	bne.n	8021b06 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8021ae8:	783b      	ldrb	r3, [r7, #0]
 8021aea:	091b      	lsrs	r3, r3, #4
 8021aec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8021af2:	0e1b      	lsrs	r3, r3, #24
 8021af4:	d006      	beq.n	8021b04 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8021af6:	9300      	str	r3, [sp, #0]
 8021af8:	4622      	mov	r2, r4
 8021afa:	464b      	mov	r3, r9
 8021afc:	a909      	add	r1, sp, #36	@ 0x24
 8021afe:	4640      	mov	r0, r8
 8021b00:	f7ff ff20 	bl	8021944 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021b04:	3403      	adds	r4, #3
 8021b06:	9b07      	ldr	r3, [sp, #28]
 8021b08:	9a03      	ldr	r2, [sp, #12]
 8021b0a:	881b      	ldrh	r3, [r3, #0]
 8021b0c:	eba3 030b 	sub.w	r3, r3, fp
 8021b10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b14:	441c      	add	r4, r3
 8021b16:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021b1a:	4413      	add	r3, r2
 8021b1c:	2202      	movs	r2, #2
 8021b1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8021b22:	441d      	add	r5, r3
 8021b24:	e79e      	b.n	8021a64 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8021b26:	9b06      	ldr	r3, [sp, #24]
 8021b28:	6818      	ldr	r0, [r3, #0]
 8021b2a:	6803      	ldr	r3, [r0, #0]
 8021b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b2e:	4798      	blx	r3
 8021b30:	b00f      	add	sp, #60	@ 0x3c
 8021b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b36:	bf00      	nop
 8021b38:	240251f0 	.word	0x240251f0
 8021b3c:	240251ea 	.word	0x240251ea

08021b40 <CRC_Lock>:
 8021b40:	4a2d      	ldr	r2, [pc, #180]	@ (8021bf8 <CRC_Lock+0xb8>)
 8021b42:	b530      	push	{r4, r5, lr}
 8021b44:	6813      	ldr	r3, [r2, #0]
 8021b46:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8021b4a:	f023 0301 	bic.w	r3, r3, #1
 8021b4e:	6013      	str	r3, [r2, #0]
 8021b50:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8021b54:	4b29      	ldr	r3, [pc, #164]	@ (8021bfc <CRC_Lock+0xbc>)
 8021b56:	681c      	ldr	r4, [r3, #0]
 8021b58:	4014      	ands	r4, r2
 8021b5a:	42ac      	cmp	r4, r5
 8021b5c:	d005      	beq.n	8021b6a <CRC_Lock+0x2a>
 8021b5e:	681c      	ldr	r4, [r3, #0]
 8021b60:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8021b64:	4014      	ands	r4, r2
 8021b66:	42ac      	cmp	r4, r5
 8021b68:	d125      	bne.n	8021bb6 <CRC_Lock+0x76>
 8021b6a:	4b25      	ldr	r3, [pc, #148]	@ (8021c00 <CRC_Lock+0xc0>)
 8021b6c:	681b      	ldr	r3, [r3, #0]
 8021b6e:	2b00      	cmp	r3, #0
 8021b70:	d139      	bne.n	8021be6 <CRC_Lock+0xa6>
 8021b72:	4b24      	ldr	r3, [pc, #144]	@ (8021c04 <CRC_Lock+0xc4>)
 8021b74:	681a      	ldr	r2, [r3, #0]
 8021b76:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021b7a:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8021b7e:	d00d      	beq.n	8021b9c <CRC_Lock+0x5c>
 8021b80:	681a      	ldr	r2, [r3, #0]
 8021b82:	f240 4483 	movw	r4, #1155	@ 0x483
 8021b86:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021b8a:	42a2      	cmp	r2, r4
 8021b8c:	d006      	beq.n	8021b9c <CRC_Lock+0x5c>
 8021b8e:	681b      	ldr	r3, [r3, #0]
 8021b90:	f240 4285 	movw	r2, #1157	@ 0x485
 8021b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021b98:	4293      	cmp	r3, r2
 8021b9a:	d124      	bne.n	8021be6 <CRC_Lock+0xa6>
 8021b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8021c08 <CRC_Lock+0xc8>)
 8021b9e:	2201      	movs	r2, #1
 8021ba0:	601a      	str	r2, [r3, #0]
 8021ba2:	681a      	ldr	r2, [r3, #0]
 8021ba4:	2a00      	cmp	r2, #0
 8021ba6:	d1fc      	bne.n	8021ba2 <CRC_Lock+0x62>
 8021ba8:	4b18      	ldr	r3, [pc, #96]	@ (8021c0c <CRC_Lock+0xcc>)
 8021baa:	6018      	str	r0, [r3, #0]
 8021bac:	6818      	ldr	r0, [r3, #0]
 8021bae:	1a43      	subs	r3, r0, r1
 8021bb0:	4258      	negs	r0, r3
 8021bb2:	4158      	adcs	r0, r3
 8021bb4:	e00e      	b.n	8021bd4 <CRC_Lock+0x94>
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	4013      	ands	r3, r2
 8021bba:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8021bbe:	4293      	cmp	r3, r2
 8021bc0:	d111      	bne.n	8021be6 <CRC_Lock+0xa6>
 8021bc2:	4b13      	ldr	r3, [pc, #76]	@ (8021c10 <CRC_Lock+0xd0>)
 8021bc4:	f240 4286 	movw	r2, #1158	@ 0x486
 8021bc8:	681b      	ldr	r3, [r3, #0]
 8021bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021bce:	4293      	cmp	r3, r2
 8021bd0:	d001      	beq.n	8021bd6 <CRC_Lock+0x96>
 8021bd2:	2000      	movs	r0, #0
 8021bd4:	bd30      	pop	{r4, r5, pc}
 8021bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8021c14 <CRC_Lock+0xd4>)
 8021bd8:	2201      	movs	r2, #1
 8021bda:	601a      	str	r2, [r3, #0]
 8021bdc:	681a      	ldr	r2, [r3, #0]
 8021bde:	2a00      	cmp	r2, #0
 8021be0:	d1fc      	bne.n	8021bdc <CRC_Lock+0x9c>
 8021be2:	4b0d      	ldr	r3, [pc, #52]	@ (8021c18 <CRC_Lock+0xd8>)
 8021be4:	e7e1      	b.n	8021baa <CRC_Lock+0x6a>
 8021be6:	4b0d      	ldr	r3, [pc, #52]	@ (8021c1c <CRC_Lock+0xdc>)
 8021be8:	2201      	movs	r2, #1
 8021bea:	601a      	str	r2, [r3, #0]
 8021bec:	681a      	ldr	r2, [r3, #0]
 8021bee:	2a00      	cmp	r2, #0
 8021bf0:	d1fc      	bne.n	8021bec <CRC_Lock+0xac>
 8021bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8021c20 <CRC_Lock+0xe0>)
 8021bf4:	e7d9      	b.n	8021baa <CRC_Lock+0x6a>
 8021bf6:	bf00      	nop
 8021bf8:	e0002000 	.word	0xe0002000
 8021bfc:	e000ed00 	.word	0xe000ed00
 8021c00:	e0042000 	.word	0xe0042000
 8021c04:	5c001000 	.word	0x5c001000
 8021c08:	58024c08 	.word	0x58024c08
 8021c0c:	58024c00 	.word	0x58024c00
 8021c10:	46008ff0 	.word	0x46008ff0
 8021c14:	46024c08 	.word	0x46024c08
 8021c18:	46024c00 	.word	0x46024c00
 8021c1c:	40023008 	.word	0x40023008
 8021c20:	40023000 	.word	0x40023000

08021c24 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021c24:	6101      	str	r1, [r0, #16]
 8021c26:	4770      	bx	lr

08021c28 <_ZN8touchgfx8Gestures4tickEv>:
 8021c28:	7b83      	ldrb	r3, [r0, #14]
 8021c2a:	b14b      	cbz	r3, 8021c40 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021c2c:	8903      	ldrh	r3, [r0, #8]
 8021c2e:	3301      	adds	r3, #1
 8021c30:	b29b      	uxth	r3, r3
 8021c32:	2b07      	cmp	r3, #7
 8021c34:	8103      	strh	r3, [r0, #8]
 8021c36:	bf81      	itttt	hi
 8021c38:	2300      	movhi	r3, #0
 8021c3a:	8143      	strhhi	r3, [r0, #10]
 8021c3c:	8183      	strhhi	r3, [r0, #12]
 8021c3e:	7383      	strbhi	r3, [r0, #14]
 8021c40:	4770      	bx	lr
	...

08021c44 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021c44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021c48:	4698      	mov	r8, r3
 8021c4a:	8883      	ldrh	r3, [r0, #4]
 8021c4c:	4604      	mov	r4, r0
 8021c4e:	4617      	mov	r7, r2
 8021c50:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021c54:	eba8 0303 	sub.w	r3, r8, r3
 8021c58:	4a19      	ldr	r2, [pc, #100]	@ (8021cc0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8021c5a:	460e      	mov	r6, r1
 8021c5c:	b21b      	sxth	r3, r3
 8021c5e:	88c1      	ldrh	r1, [r0, #6]
 8021c60:	9200      	str	r2, [sp, #0]
 8021c62:	2000      	movs	r0, #0
 8021c64:	2b00      	cmp	r3, #0
 8021c66:	8aa2      	ldrh	r2, [r4, #20]
 8021c68:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8021c6c:	bfb8      	it	lt
 8021c6e:	425b      	neglt	r3, r3
 8021c70:	f88d 0004 	strb.w	r0, [sp, #4]
 8021c74:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021c78:	b21b      	sxth	r3, r3
 8021c7a:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021c7e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021c82:	4293      	cmp	r3, r2
 8021c84:	dc07      	bgt.n	8021c96 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8021c86:	1a69      	subs	r1, r5, r1
 8021c88:	b209      	sxth	r1, r1
 8021c8a:	2900      	cmp	r1, #0
 8021c8c:	bfb8      	it	lt
 8021c8e:	4249      	neglt	r1, r1
 8021c90:	b209      	sxth	r1, r1
 8021c92:	428a      	cmp	r2, r1
 8021c94:	da10      	bge.n	8021cb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8021c96:	6920      	ldr	r0, [r4, #16]
 8021c98:	4669      	mov	r1, sp
 8021c9a:	eba8 0606 	sub.w	r6, r8, r6
 8021c9e:	1bef      	subs	r7, r5, r7
 8021ca0:	6803      	ldr	r3, [r0, #0]
 8021ca2:	685b      	ldr	r3, [r3, #4]
 8021ca4:	4798      	blx	r3
 8021ca6:	2300      	movs	r3, #0
 8021ca8:	2001      	movs	r0, #1
 8021caa:	8166      	strh	r6, [r4, #10]
 8021cac:	8123      	strh	r3, [r4, #8]
 8021cae:	81a7      	strh	r7, [r4, #12]
 8021cb0:	f8a4 8004 	strh.w	r8, [r4, #4]
 8021cb4:	80e5      	strh	r5, [r4, #6]
 8021cb6:	73a0      	strb	r0, [r4, #14]
 8021cb8:	b004      	add	sp, #16
 8021cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021cbe:	bf00      	nop
 8021cc0:	08026d70 	.word	0x08026d70

08021cc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8021cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021cc6:	461e      	mov	r6, r3
 8021cc8:	1e4b      	subs	r3, r1, #1
 8021cca:	b085      	sub	sp, #20
 8021ccc:	4604      	mov	r4, r0
 8021cce:	2b01      	cmp	r3, #1
 8021cd0:	460d      	mov	r5, r1
 8021cd2:	4617      	mov	r7, r2
 8021cd4:	d84b      	bhi.n	8021d6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8021cd6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021cda:	1cd3      	adds	r3, r2, #3
 8021cdc:	b29b      	uxth	r3, r3
 8021cde:	2b06      	cmp	r3, #6
 8021ce0:	d916      	bls.n	8021d10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8021ce2:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8021d84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021ce6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021cea:	f8cd c004 	str.w	ip, [sp, #4]
 8021cee:	f04f 0c00 	mov.w	ip, #0
 8021cf2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021cf6:	6900      	ldr	r0, [r0, #16]
 8021cf8:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021cfc:	a901      	add	r1, sp, #4
 8021cfe:	f88d c008 	strb.w	ip, [sp, #8]
 8021d02:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021d06:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021d0a:	6803      	ldr	r3, [r0, #0]
 8021d0c:	689b      	ldr	r3, [r3, #8]
 8021d0e:	4798      	blx	r3
 8021d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021d14:	1cd3      	adds	r3, r2, #3
 8021d16:	b29b      	uxth	r3, r3
 8021d18:	2b06      	cmp	r3, #6
 8021d1a:	d916      	bls.n	8021d4a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021d1c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8021d84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021d20:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021d24:	f8cd c004 	str.w	ip, [sp, #4]
 8021d28:	f04f 0c01 	mov.w	ip, #1
 8021d2c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021d30:	6920      	ldr	r0, [r4, #16]
 8021d32:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021d36:	a901      	add	r1, sp, #4
 8021d38:	f88d c008 	strb.w	ip, [sp, #8]
 8021d3c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021d40:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021d44:	6803      	ldr	r3, [r0, #0]
 8021d46:	689b      	ldr	r3, [r3, #8]
 8021d48:	4798      	blx	r3
 8021d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8021d80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021d4c:	a901      	add	r1, sp, #4
 8021d4e:	6920      	ldr	r0, [r4, #16]
 8021d50:	9301      	str	r3, [sp, #4]
 8021d52:	2300      	movs	r3, #0
 8021d54:	f88d 5008 	strb.w	r5, [sp, #8]
 8021d58:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021d5c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021d60:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021d64:	6803      	ldr	r3, [r0, #0]
 8021d66:	681b      	ldr	r3, [r3, #0]
 8021d68:	4798      	blx	r3
 8021d6a:	b005      	add	sp, #20
 8021d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d6e:	2900      	cmp	r1, #0
 8021d70:	d1eb      	bne.n	8021d4a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021d72:	80a2      	strh	r2, [r4, #4]
 8021d74:	80c6      	strh	r6, [r0, #6]
 8021d76:	60a1      	str	r1, [r4, #8]
 8021d78:	81a1      	strh	r1, [r4, #12]
 8021d7a:	73a1      	strb	r1, [r4, #14]
 8021d7c:	e7e5      	b.n	8021d4a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021d7e:	bf00      	nop
 8021d80:	08026d5c 	.word	0x08026d5c
 8021d84:	08026d84 	.word	0x08026d84

08021d88 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8021d88:	10c9      	asrs	r1, r1, #3
 8021d8a:	2900      	cmp	r1, #0
 8021d8c:	bfb8      	it	lt
 8021d8e:	4249      	neglt	r1, r1
 8021d90:	2801      	cmp	r0, #1
 8021d92:	d108      	bne.n	8021da6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021d94:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8021d98:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8021d9c:	4601      	mov	r1, r0
 8021d9e:	dd02      	ble.n	8021da6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021da0:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8021da4:	4770      	bx	lr
 8021da6:	29ff      	cmp	r1, #255	@ 0xff
 8021da8:	bfa8      	it	ge
 8021daa:	21ff      	movge	r1, #255	@ 0xff
 8021dac:	4608      	mov	r0, r1
 8021dae:	4770      	bx	lr

08021db0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021db0:	b410      	push	{r4}
 8021db2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8021db6:	429c      	cmp	r4, r3
 8021db8:	d803      	bhi.n	8021dc2 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8021dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021dbe:	f7f0 bac5 	b.w	801234c <_ZN8touchgfx7Outline6lineToEii>
 8021dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021dc6:	4770      	bx	lr

08021dc8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8021dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dcc:	b08b      	sub	sp, #44	@ 0x2c
 8021dce:	4606      	mov	r6, r0
 8021dd0:	468a      	mov	sl, r1
 8021dd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021dd6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8021dda:	9308      	str	r3, [sp, #32]
 8021ddc:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8021de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8021de2:	f7f0 fc1e 	bl	8012622 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8021de6:	68b5      	ldr	r5, [r6, #8]
 8021de8:	4604      	mov	r4, r0
 8021dea:	2d00      	cmp	r5, #0
 8021dec:	d044      	beq.n	8021e78 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021dee:	6873      	ldr	r3, [r6, #4]
 8021df0:	42ab      	cmp	r3, r5
 8021df2:	d33d      	bcc.n	8021e70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8021df4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021df8:	f04f 0800 	mov.w	r8, #0
 8021dfc:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8021e00:	eb02 0b03 	add.w	fp, r2, r3
 8021e04:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021e08:	fb02 1203 	mla	r2, r2, r3, r1
 8021e0c:	9205      	str	r2, [sp, #20]
 8021e0e:	1e6a      	subs	r2, r5, #1
 8021e10:	9204      	str	r2, [sp, #16]
 8021e12:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8021e16:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021e1a:	454b      	cmp	r3, r9
 8021e1c:	463a      	mov	r2, r7
 8021e1e:	d008      	beq.n	8021e32 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8021e20:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8021e24:	eb03 0b09 	add.w	fp, r3, r9
 8021e28:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8021e2c:	fb03 1309 	mla	r3, r3, r9, r1
 8021e30:	9305      	str	r3, [sp, #20]
 8021e32:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8021e36:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8021e3a:	4498      	add	r8, r3
 8021e3c:	9b04      	ldr	r3, [sp, #16]
 8021e3e:	3b01      	subs	r3, #1
 8021e40:	9304      	str	r3, [sp, #16]
 8021e42:	9b04      	ldr	r3, [sp, #16]
 8021e44:	3301      	adds	r3, #1
 8021e46:	d015      	beq.n	8021e74 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8021e48:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8021e4c:	42bb      	cmp	r3, r7
 8021e4e:	d117      	bne.n	8021e80 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8021e50:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8021e54:	9b04      	ldr	r3, [sp, #16]
 8021e56:	4548      	cmp	r0, r9
 8021e58:	f103 33ff 	add.w	r3, r3, #4294967295
 8021e5c:	d17d      	bne.n	8021f5a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8021e5e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8021e62:	4401      	add	r1, r0
 8021e64:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021e68:	4480      	add	r8, r0
 8021e6a:	e7e9      	b.n	8021e40 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8021e6c:	461f      	mov	r7, r3
 8021e6e:	e042      	b.n	8021ef6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8021e70:	2000      	movs	r0, #0
 8021e72:	e002      	b.n	8021e7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8021e74:	2900      	cmp	r1, #0
 8021e76:	d16d      	bne.n	8021f54 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8021e78:	2001      	movs	r0, #1
 8021e7a:	b00b      	add	sp, #44	@ 0x2c
 8021e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e80:	b379      	cbz	r1, 8021ee2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8021e82:	2f00      	cmp	r7, #0
 8021e84:	db29      	blt.n	8021eda <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021e86:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8021e8a:	42bb      	cmp	r3, r7
 8021e8c:	dd25      	ble.n	8021eda <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021e8e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8021e92:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8021e96:	f7ff ff77 	bl	8021d88 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8021e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e9c:	fb10 f003 	smulbb	r0, r0, r3
 8021ea0:	b280      	uxth	r0, r0
 8021ea2:	1c41      	adds	r1, r0, #1
 8021ea4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021ea8:	1209      	asrs	r1, r1, #8
 8021eaa:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8021eae:	d014      	beq.n	8021eda <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021eb0:	b2c9      	uxtb	r1, r1
 8021eb2:	9808      	ldr	r0, [sp, #32]
 8021eb4:	b2ba      	uxth	r2, r7
 8021eb6:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021eb8:	9102      	str	r1, [sp, #8]
 8021eba:	2101      	movs	r1, #1
 8021ebc:	4413      	add	r3, r2
 8021ebe:	4402      	add	r2, r0
 8021ec0:	9101      	str	r1, [sp, #4]
 8021ec2:	fa0f f18b 	sxth.w	r1, fp
 8021ec6:	f8da 0000 	ldr.w	r0, [sl]
 8021eca:	b21b      	sxth	r3, r3
 8021ecc:	9100      	str	r1, [sp, #0]
 8021ece:	b212      	sxth	r2, r2
 8021ed0:	6941      	ldr	r1, [r0, #20]
 8021ed2:	4650      	mov	r0, sl
 8021ed4:	460d      	mov	r5, r1
 8021ed6:	9905      	ldr	r1, [sp, #20]
 8021ed8:	47a8      	blx	r5
 8021eda:	9b04      	ldr	r3, [sp, #16]
 8021edc:	1c7a      	adds	r2, r7, #1
 8021ede:	3301      	adds	r3, #1
 8021ee0:	d0ca      	beq.n	8021e78 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021ee2:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021ee6:	1abb      	subs	r3, r7, r2
 8021ee8:	2b00      	cmp	r3, #0
 8021eea:	dd31      	ble.n	8021f50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021eec:	2a00      	cmp	r2, #0
 8021eee:	dabd      	bge.n	8021e6c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8021ef0:	2f00      	cmp	r7, #0
 8021ef2:	dd2d      	ble.n	8021f50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021ef4:	2200      	movs	r2, #0
 8021ef6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8021efa:	19d1      	adds	r1, r2, r7
 8021efc:	4299      	cmp	r1, r3
 8021efe:	db02      	blt.n	8021f06 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8021f00:	1a9f      	subs	r7, r3, r2
 8021f02:	2f00      	cmp	r7, #0
 8021f04:	dd24      	ble.n	8021f50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021f06:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8021f0a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8021f0e:	f7ff ff3b 	bl	8021d88 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8021f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021f14:	fb10 f003 	smulbb	r0, r0, r3
 8021f18:	b280      	uxth	r0, r0
 8021f1a:	1c41      	adds	r1, r0, #1
 8021f1c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021f20:	1209      	asrs	r1, r1, #8
 8021f22:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8021f26:	d013      	beq.n	8021f50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021f28:	b292      	uxth	r2, r2
 8021f2a:	9808      	ldr	r0, [sp, #32]
 8021f2c:	b2c9      	uxtb	r1, r1
 8021f2e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021f30:	b23f      	sxth	r7, r7
 8021f32:	4413      	add	r3, r2
 8021f34:	9102      	str	r1, [sp, #8]
 8021f36:	4402      	add	r2, r0
 8021f38:	fa0f f18b 	sxth.w	r1, fp
 8021f3c:	f8da 0000 	ldr.w	r0, [sl]
 8021f40:	b21b      	sxth	r3, r3
 8021f42:	9100      	str	r1, [sp, #0]
 8021f44:	b212      	sxth	r2, r2
 8021f46:	9701      	str	r7, [sp, #4]
 8021f48:	9905      	ldr	r1, [sp, #20]
 8021f4a:	6947      	ldr	r7, [r0, #20]
 8021f4c:	4650      	mov	r0, sl
 8021f4e:	47b8      	blx	r7
 8021f50:	464b      	mov	r3, r9
 8021f52:	e75e      	b.n	8021e12 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8021f54:	2f00      	cmp	r7, #0
 8021f56:	da96      	bge.n	8021e86 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8021f58:	e78e      	b.n	8021e78 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021f5a:	2900      	cmp	r1, #0
 8021f5c:	d0f8      	beq.n	8021f50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021f5e:	e790      	b.n	8021e82 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08021f60 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8021f60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021f64:	461e      	mov	r6, r3
 8021f66:	4b36      	ldr	r3, [pc, #216]	@ (8022040 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8021f68:	2500      	movs	r5, #0
 8021f6a:	f100 0814 	add.w	r8, r0, #20
 8021f6e:	4604      	mov	r4, r0
 8021f70:	4617      	mov	r7, r2
 8021f72:	e9c0 3100 	strd	r3, r1, [r0]
 8021f76:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8021f7a:	8185      	strh	r5, [r0, #12]
 8021f7c:	8103      	strh	r3, [r0, #8]
 8021f7e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8021f82:	81c5      	strh	r5, [r0, #14]
 8021f84:	7283      	strb	r3, [r0, #10]
 8021f86:	8205      	strh	r5, [r0, #16]
 8021f88:	8245      	strh	r5, [r0, #18]
 8021f8a:	4640      	mov	r0, r8
 8021f8c:	f7ef fd24 	bl	80119d8 <_ZN8touchgfx7OutlineC1Ev>
 8021f90:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8021f94:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8021f98:	466b      	mov	r3, sp
 8021f9a:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8021f9e:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8021fa2:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8021fa6:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8021faa:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8021fae:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8021fb2:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8021fb6:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8021fba:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8021fbe:	6830      	ldr	r0, [r6, #0]
 8021fc0:	6871      	ldr	r1, [r6, #4]
 8021fc2:	8872      	ldrh	r2, [r6, #2]
 8021fc4:	8835      	ldrh	r5, [r6, #0]
 8021fc6:	c303      	stmia	r3!, {r0, r1}
 8021fc8:	887b      	ldrh	r3, [r7, #2]
 8021fca:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8021fce:	4413      	add	r3, r2
 8021fd0:	883a      	ldrh	r2, [r7, #0]
 8021fd2:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8021fd6:	442a      	add	r2, r5
 8021fd8:	81e3      	strh	r3, [r4, #14]
 8021fda:	8220      	strh	r0, [r4, #16]
 8021fdc:	4668      	mov	r0, sp
 8021fde:	81a2      	strh	r2, [r4, #12]
 8021fe0:	8261      	strh	r1, [r4, #18]
 8021fe2:	4639      	mov	r1, r7
 8021fe4:	f7f1 fed0 	bl	8013d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021fe8:	f104 000c 	add.w	r0, r4, #12
 8021fec:	f7f1 fea4 	bl	8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ff0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021ff4:	f8bd 2000 	ldrh.w	r2, [sp]
 8021ff8:	4640      	mov	r0, r8
 8021ffa:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8021ffe:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8022002:	f7ef fccd 	bl	80119a0 <_ZN8touchgfx7Outline5resetEv>
 8022006:	f9bd 3000 	ldrsh.w	r3, [sp]
 802200a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802200e:	4620      	mov	r0, r4
 8022010:	015b      	lsls	r3, r3, #5
 8022012:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8022014:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8022018:	015b      	lsls	r3, r3, #5
 802201a:	6523      	str	r3, [r4, #80]	@ 0x50
 802201c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8022020:	015b      	lsls	r3, r3, #5
 8022022:	6563      	str	r3, [r4, #84]	@ 0x54
 8022024:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8022028:	015b      	lsls	r3, r3, #5
 802202a:	65a3      	str	r3, [r4, #88]	@ 0x58
 802202c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8022030:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8022034:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8022038:	b002      	add	sp, #8
 802203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802203e:	bf00      	nop
 8022040:	08027014 	.word	0x08027014

08022044 <_ZN8touchgfx6Canvas5closeEv>:
 8022044:	b538      	push	{r3, r4, r5, lr}
 8022046:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802204a:	4604      	mov	r4, r0
 802204c:	b193      	cbz	r3, 8022074 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802204e:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8022052:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8022056:	4213      	tst	r3, r2
 8022058:	d10c      	bne.n	8022074 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802205a:	f100 0514 	add.w	r5, r0, #20
 802205e:	b123      	cbz	r3, 802206a <_ZN8touchgfx6Canvas5closeEv+0x26>
 8022060:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8022064:	4628      	mov	r0, r5
 8022066:	f7ff fea3 	bl	8021db0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802206a:	4628      	mov	r0, r5
 802206c:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8022070:	f7ff fe9e 	bl	8021db0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022074:	2300      	movs	r3, #0
 8022076:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802207a:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802207e:	4298      	cmp	r0, r3
 8022080:	bf34      	ite	cc
 8022082:	2000      	movcc	r0, #0
 8022084:	2001      	movcs	r0, #1
 8022086:	bd38      	pop	{r3, r4, r5, pc}

08022088 <_ZN8touchgfx6Canvas6renderEh>:
 8022088:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802208c:	7a85      	ldrb	r5, [r0, #10]
 802208e:	4604      	mov	r4, r0
 8022090:	4369      	muls	r1, r5
 8022092:	1c4d      	adds	r5, r1, #1
 8022094:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022098:	122d      	asrs	r5, r5, #8
 802209a:	f000 8098 	beq.w	80221ce <_ZN8touchgfx6Canvas6renderEh+0x146>
 802209e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	f000 8093 	beq.w	80221ce <_ZN8touchgfx6Canvas6renderEh+0x146>
 80220a8:	f7ff ffcc 	bl	8022044 <_ZN8touchgfx6Canvas5closeEv>
 80220ac:	4607      	mov	r7, r0
 80220ae:	2800      	cmp	r0, #0
 80220b0:	d045      	beq.n	802213e <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80220b2:	6860      	ldr	r0, [r4, #4]
 80220b4:	4e47      	ldr	r6, [pc, #284]	@ (80221d4 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 80220b6:	6803      	ldr	r3, [r0, #0]
 80220b8:	6837      	ldr	r7, [r6, #0]
 80220ba:	689b      	ldr	r3, [r3, #8]
 80220bc:	4798      	blx	r3
 80220be:	4601      	mov	r1, r0
 80220c0:	4638      	mov	r0, r7
 80220c2:	f7ed fcbd 	bl	800fa40 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80220c6:	4607      	mov	r7, r0
 80220c8:	f7e1 fe24 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 80220cc:	6803      	ldr	r3, [r0, #0]
 80220ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220d0:	4798      	blx	r3
 80220d2:	4680      	mov	r8, r0
 80220d4:	f7e1 fe1e 	bl	8003d14 <_ZN8touchgfx3HAL3lcdEv>
 80220d8:	6803      	ldr	r3, [r0, #0]
 80220da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80220dc:	4798      	blx	r3
 80220de:	280b      	cmp	r0, #11
 80220e0:	d85a      	bhi.n	8022198 <_ZN8touchgfx6Canvas6renderEh+0x110>
 80220e2:	e8df f000 	tbb	[pc, r0]
 80220e6:	5b50      	.short	0x5b50
 80220e8:	3059066b 	.word	0x3059066b
 80220ec:	64646440 	.word	0x64646440
 80220f0:	6464      	.short	0x6464
 80220f2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80220f6:	2208      	movs	r2, #8
 80220f8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80220fc:	fb91 f2f2 	sdiv	r2, r1, r2
 8022100:	fb08 2303 	mla	r3, r8, r3, r2
 8022104:	441f      	add	r7, r3
 8022106:	424b      	negs	r3, r1
 8022108:	f001 0107 	and.w	r1, r1, #7
 802210c:	f003 0307 	and.w	r3, r3, #7
 8022110:	bf58      	it	pl
 8022112:	4259      	negpl	r1, r3
 8022114:	b2c9      	uxtb	r1, r1
 8022116:	b2ed      	uxtb	r5, r5
 8022118:	463a      	mov	r2, r7
 802211a:	fa0f f388 	sxth.w	r3, r8
 802211e:	f104 0014 	add.w	r0, r4, #20
 8022122:	e9cd 1500 	strd	r1, r5, [sp]
 8022126:	6861      	ldr	r1, [r4, #4]
 8022128:	f7ff fe4e 	bl	8021dc8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802212c:	4607      	mov	r7, r0
 802212e:	6860      	ldr	r0, [r4, #4]
 8022130:	6803      	ldr	r3, [r0, #0]
 8022132:	691b      	ldr	r3, [r3, #16]
 8022134:	4798      	blx	r3
 8022136:	6830      	ldr	r0, [r6, #0]
 8022138:	6803      	ldr	r3, [r0, #0]
 802213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802213c:	4798      	blx	r3
 802213e:	4638      	mov	r0, r7
 8022140:	b002      	add	sp, #8
 8022142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022146:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802214a:	2204      	movs	r2, #4
 802214c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022150:	fb91 f2f2 	sdiv	r2, r1, r2
 8022154:	fb08 2303 	mla	r3, r8, r3, r2
 8022158:	441f      	add	r7, r3
 802215a:	424b      	negs	r3, r1
 802215c:	f001 0103 	and.w	r1, r1, #3
 8022160:	f003 0303 	and.w	r3, r3, #3
 8022164:	e7d4      	b.n	8022110 <_ZN8touchgfx6Canvas6renderEh+0x88>
 8022166:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802216a:	2202      	movs	r2, #2
 802216c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022170:	2900      	cmp	r1, #0
 8022172:	fb91 f2f2 	sdiv	r2, r1, r2
 8022176:	f001 0101 	and.w	r1, r1, #1
 802217a:	fb08 2303 	mla	r3, r8, r3, r2
 802217e:	bfb8      	it	lt
 8022180:	4249      	neglt	r1, r1
 8022182:	441f      	add	r7, r3
 8022184:	e7c6      	b.n	8022114 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8022186:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802218a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802218e:	fb08 f303 	mul.w	r3, r8, r3
 8022192:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8022196:	441f      	add	r7, r3
 8022198:	2100      	movs	r1, #0
 802219a:	e7bc      	b.n	8022116 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802219c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80221a0:	2103      	movs	r1, #3
 80221a2:	fb08 f203 	mul.w	r2, r8, r3
 80221a6:	89a3      	ldrh	r3, [r4, #12]
 80221a8:	fb13 2301 	smlabb	r3, r3, r1, r2
 80221ac:	e7f3      	b.n	8022196 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80221ae:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80221b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80221b6:	fb08 2303 	mla	r3, r8, r3, r2
 80221ba:	e7ec      	b.n	8022196 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80221bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80221c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80221c4:	fb08 f303 	mul.w	r3, r8, r3
 80221c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80221cc:	e7e3      	b.n	8022196 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80221ce:	2701      	movs	r7, #1
 80221d0:	e7b5      	b.n	802213e <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80221d2:	bf00      	nop
 80221d4:	240251f0 	.word	0x240251f0

080221d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80221d8:	4b06      	ldr	r3, [pc, #24]	@ (80221f4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 80221da:	b510      	push	{r4, lr}
 80221dc:	781b      	ldrb	r3, [r3, #0]
 80221de:	2b01      	cmp	r3, #1
 80221e0:	d107      	bne.n	80221f2 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 80221e2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80221e6:	680b      	ldr	r3, [r1, #0]
 80221e8:	6814      	ldr	r4, [r2, #0]
 80221ea:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80221ee:	6013      	str	r3, [r2, #0]
 80221f0:	600c      	str	r4, [r1, #0]
 80221f2:	bd10      	pop	{r4, pc}
 80221f4:	240251e8 	.word	0x240251e8

080221f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80221f8:	b513      	push	{r0, r1, r4, lr}
 80221fa:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80221fe:	4604      	mov	r4, r0
 8022200:	e9cd 2100 	strd	r2, r1, [sp]
 8022204:	b9a3      	cbnz	r3, 8022230 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8022206:	466a      	mov	r2, sp
 8022208:	a901      	add	r1, sp, #4
 802220a:	4620      	mov	r0, r4
 802220c:	f7ff ffe4 	bl	80221d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022210:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8022212:	9901      	ldr	r1, [sp, #4]
 8022214:	9a00      	ldr	r2, [sp, #0]
 8022216:	1ac9      	subs	r1, r1, r3
 8022218:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802221a:	1ad2      	subs	r2, r2, r3
 802221c:	9101      	str	r1, [sp, #4]
 802221e:	2a00      	cmp	r2, #0
 8022220:	9200      	str	r2, [sp, #0]
 8022222:	da0b      	bge.n	802223c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8022224:	2301      	movs	r3, #1
 8022226:	2900      	cmp	r1, #0
 8022228:	da0e      	bge.n	8022248 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802222a:	f043 0304 	orr.w	r3, r3, #4
 802222e:	e013      	b.n	8022258 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8022230:	f7ff ff08 	bl	8022044 <_ZN8touchgfx6Canvas5closeEv>
 8022234:	2800      	cmp	r0, #0
 8022236:	d1e6      	bne.n	8022206 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8022238:	b002      	add	sp, #8
 802223a:	bd10      	pop	{r4, pc}
 802223c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802223e:	429a      	cmp	r2, r3
 8022240:	bfac      	ite	ge
 8022242:	2302      	movge	r3, #2
 8022244:	2300      	movlt	r3, #0
 8022246:	e7ee      	b.n	8022226 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8022248:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802224a:	4281      	cmp	r1, r0
 802224c:	bfac      	ite	ge
 802224e:	2008      	movge	r0, #8
 8022250:	2000      	movlt	r0, #0
 8022252:	4318      	orrs	r0, r3
 8022254:	b2c3      	uxtb	r3, r0
 8022256:	b158      	cbz	r0, 8022270 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8022258:	2200      	movs	r2, #0
 802225a:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802225e:	9901      	ldr	r1, [sp, #4]
 8022260:	9a00      	ldr	r2, [sp, #0]
 8022262:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8022264:	6722      	str	r2, [r4, #112]	@ 0x70
 8022266:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802226a:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802226e:	e7e3      	b.n	8022238 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8022270:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8022274:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8022278:	4298      	cmp	r0, r3
 802227a:	d803      	bhi.n	8022284 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802227c:	f104 0014 	add.w	r0, r4, #20
 8022280:	f7f0 f87e 	bl	8012380 <_ZN8touchgfx7Outline6moveToEii>
 8022284:	2301      	movs	r3, #1
 8022286:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802228a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802228e:	2300      	movs	r3, #0
 8022290:	e7e5      	b.n	802225e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08022292 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8022292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022294:	ab02      	add	r3, sp, #8
 8022296:	4604      	mov	r4, r0
 8022298:	9101      	str	r1, [sp, #4]
 802229a:	a901      	add	r1, sp, #4
 802229c:	f843 2d08 	str.w	r2, [r3, #-8]!
 80222a0:	461a      	mov	r2, r3
 80222a2:	f7ff ff99 	bl	80221d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80222a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80222a8:	9901      	ldr	r1, [sp, #4]
 80222aa:	9a00      	ldr	r2, [sp, #0]
 80222ac:	1ac9      	subs	r1, r1, r3
 80222ae:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80222b0:	1ad2      	subs	r2, r2, r3
 80222b2:	9101      	str	r1, [sp, #4]
 80222b4:	2a00      	cmp	r2, #0
 80222b6:	9200      	str	r2, [sp, #0]
 80222b8:	db1c      	blt.n	80222f4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80222ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80222bc:	429a      	cmp	r2, r3
 80222be:	bfac      	ite	ge
 80222c0:	2002      	movge	r0, #2
 80222c2:	2000      	movlt	r0, #0
 80222c4:	2900      	cmp	r1, #0
 80222c6:	db17      	blt.n	80222f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80222c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80222ca:	4299      	cmp	r1, r3
 80222cc:	bfac      	ite	ge
 80222ce:	2308      	movge	r3, #8
 80222d0:	2300      	movlt	r3, #0
 80222d2:	4303      	orrs	r3, r0
 80222d4:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 80222d8:	b2dd      	uxtb	r5, r3
 80222da:	b978      	cbnz	r0, 80222fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80222dc:	f104 0014 	add.w	r0, r4, #20
 80222e0:	f7ff fd66 	bl	8021db0 <_ZN8touchgfx10Rasterizer6lineToEii>
 80222e4:	9b01      	ldr	r3, [sp, #4]
 80222e6:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 80222ea:	6623      	str	r3, [r4, #96]	@ 0x60
 80222ec:	9b00      	ldr	r3, [sp, #0]
 80222ee:	6663      	str	r3, [r4, #100]	@ 0x64
 80222f0:	b002      	add	sp, #8
 80222f2:	bd70      	pop	{r4, r5, r6, pc}
 80222f4:	2001      	movs	r0, #1
 80222f6:	e7e5      	b.n	80222c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80222f8:	2304      	movs	r3, #4
 80222fa:	e7ea      	b.n	80222d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80222fc:	b113      	cbz	r3, 8022304 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80222fe:	ea10 0305 	ands.w	r3, r0, r5
 8022302:	d11c      	bne.n	802233e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8022304:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8022308:	f104 0614 	add.w	r6, r4, #20
 802230c:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8022310:	b98b      	cbnz	r3, 8022336 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8022312:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8022316:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802231a:	4298      	cmp	r0, r3
 802231c:	d802      	bhi.n	8022324 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802231e:	4630      	mov	r0, r6
 8022320:	f7f0 f82e 	bl	8012380 <_ZN8touchgfx7Outline6moveToEii>
 8022324:	2301      	movs	r3, #1
 8022326:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802232a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802232e:	4630      	mov	r0, r6
 8022330:	e9dd 2100 	ldrd	r2, r1, [sp]
 8022334:	e7d4      	b.n	80222e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8022336:	4630      	mov	r0, r6
 8022338:	f7ff fd3a 	bl	8021db0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802233c:	e7f7      	b.n	802232e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802233e:	461d      	mov	r5, r3
 8022340:	e7d0      	b.n	80222e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08022344 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8022344:	b538      	push	{r3, r4, r5, lr}
 8022346:	ed2d 8b10 	vpush	{d8-d15}
 802234a:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802234e:	4605      	mov	r5, r0
 8022350:	eeb0 ca40 	vmov.f32	s24, s0
 8022354:	460c      	mov	r4, r1
 8022356:	eef0 ca60 	vmov.f32	s25, s1
 802235a:	ed9f ba57 	vldr	s22, [pc, #348]	@ 80224b8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802235e:	eeb0 da41 	vmov.f32	s26, s2
 8022362:	eef0 da61 	vmov.f32	s27, s3
 8022366:	eeb0 ea42 	vmov.f32	s28, s4
 802236a:	eef0 ea62 	vmov.f32	s29, s5
 802236e:	eef0 aa6b 	vmov.f32	s21, s23
 8022372:	2c08      	cmp	r4, #8
 8022374:	d86e      	bhi.n	8022454 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8022376:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802237a:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802237e:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8022382:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8022386:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802238a:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802238e:	ee7c faad 	vadd.f32	s31, s25, s27
 8022392:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022396:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802239a:	ee3d aaae 	vadd.f32	s20, s27, s29
 802239e:	ee2f fa2b 	vmul.f32	s30, s30, s23
 80223a2:	ee6f faab 	vmul.f32	s31, s31, s23
 80223a6:	ee69 9aab 	vmul.f32	s19, s19, s23
 80223aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80223ae:	ee2a aa2b 	vmul.f32	s20, s20, s23
 80223b2:	ee7f 8a29 	vadd.f32	s17, s30, s19
 80223b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223ba:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 80223be:	ee68 8aab 	vmul.f32	s17, s17, s23
 80223c2:	bf48      	it	mi
 80223c4:	eef1 7a67 	vnegmi.f32	s15, s15
 80223c8:	ee29 9a2b 	vmul.f32	s18, s18, s23
 80223cc:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 80223d0:	eef4 7acb 	vcmpe.f32	s15, s22
 80223d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223d8:	dd3f      	ble.n	802245a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 80223da:	ee27 7a07 	vmul.f32	s14, s14, s14
 80223de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80223e2:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80223e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80223ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80223ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223f2:	d847      	bhi.n	8022484 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80223f4:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 80223f8:	ee3e 0aed 	vsub.f32	s0, s29, s27
 80223fc:	f000 fa39 	bl	8022872 <atan2f>
 8022400:	eeb0 8a40 	vmov.f32	s16, s0
 8022404:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8022408:	ee3d 0aec 	vsub.f32	s0, s27, s25
 802240c:	f000 fa31 	bl	8022872 <atan2f>
 8022410:	ee38 0a40 	vsub.f32	s0, s16, s0
 8022414:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80224bc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8022418:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022420:	bf48      	it	mi
 8022422:	eeb1 0a40 	vnegmi.f32	s0, s0
 8022426:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802242e:	bfa4      	itt	ge
 8022430:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 80224c0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8022434:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8022438:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80224c4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802243c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022444:	d51e      	bpl.n	8022484 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8022446:	eef0 0a49 	vmov.f32	s1, s18
 802244a:	4628      	mov	r0, r5
 802244c:	eeb0 0a68 	vmov.f32	s0, s17
 8022450:	f7ee f9fc 	bl	801084c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8022454:	ecbd 8b10 	vpop	{d8-d15}
 8022458:	bd38      	pop	{r3, r4, r5, pc}
 802245a:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802245e:	eeb0 7a68 	vmov.f32	s14, s17
 8022462:	eef0 6a49 	vmov.f32	s13, s18
 8022466:	eea7 7aea 	vfms.f32	s14, s15, s21
 802246a:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802246e:	eee7 6aea 	vfms.f32	s13, s15, s21
 8022472:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8022476:	eee7 7a07 	vfma.f32	s15, s14, s14
 802247a:	eef4 7ac6 	vcmpe.f32	s15, s12
 802247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022482:	d9e0      	bls.n	8022446 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8022484:	3401      	adds	r4, #1
 8022486:	eef0 0a6c 	vmov.f32	s1, s25
 802248a:	eeb0 0a4c 	vmov.f32	s0, s24
 802248e:	4628      	mov	r0, r5
 8022490:	4621      	mov	r1, r4
 8022492:	eef0 2a49 	vmov.f32	s5, s18
 8022496:	eeb0 2a68 	vmov.f32	s4, s17
 802249a:	eef0 1a6f 	vmov.f32	s3, s31
 802249e:	eeb0 1a4f 	vmov.f32	s2, s30
 80224a2:	f7ff ff4f 	bl	8022344 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80224a6:	eef0 da4a 	vmov.f32	s27, s20
 80224aa:	eeb0 da69 	vmov.f32	s26, s19
 80224ae:	eef0 ca49 	vmov.f32	s25, s18
 80224b2:	eeb0 ca68 	vmov.f32	s24, s17
 80224b6:	e75c      	b.n	8022372 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 80224b8:	2edbe6ff 	.word	0x2edbe6ff
 80224bc:	40490fdb 	.word	0x40490fdb
 80224c0:	40c90fdb 	.word	0x40c90fdb
 80224c4:	3dcccccd 	.word	0x3dcccccd

080224c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 80224c8:	b530      	push	{r4, r5, lr}
 80224ca:	ed2d 8b10 	vpush	{d8-d15}
 80224ce:	eef0 8a40 	vmov.f32	s17, s0
 80224d2:	b085      	sub	sp, #20
 80224d4:	eef0 9a60 	vmov.f32	s19, s1
 80224d8:	4604      	mov	r4, r0
 80224da:	eef0 fa41 	vmov.f32	s31, s2
 80224de:	460d      	mov	r5, r1
 80224e0:	eeb0 fa61 	vmov.f32	s30, s3
 80224e4:	eef0 ba42 	vmov.f32	s23, s4
 80224e8:	eeb0 ca62 	vmov.f32	s24, s5
 80224ec:	eef0 aa43 	vmov.f32	s21, s6
 80224f0:	eeb0 ba63 	vmov.f32	s22, s7
 80224f4:	2d08      	cmp	r5, #8
 80224f6:	f200 8113 	bhi.w	8022720 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 80224fa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80224fe:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8022502:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8022506:	ee38 daaf 	vadd.f32	s26, s17, s31
 802250a:	ee26 6a27 	vmul.f32	s12, s12, s15
 802250e:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8022512:	ee2d da27 	vmul.f32	s26, s26, s15
 8022516:	ed8d 6a01 	vstr	s12, [sp, #4]
 802251a:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802251e:	ee6c caa7 	vmul.f32	s25, s25, s15
 8022522:	eeb0 ea4d 	vmov.f32	s28, s26
 8022526:	ee79 da8f 	vadd.f32	s27, s19, s30
 802252a:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802252e:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8022532:	ee66 6a27 	vmul.f32	s13, s12, s15
 8022536:	ee6d daa7 	vmul.f32	s27, s27, s15
 802253a:	edcd 6a03 	vstr	s13, [sp, #12]
 802253e:	eef0 6a6c 	vmov.f32	s13, s25
 8022542:	eef0 ea6d 	vmov.f32	s29, s27
 8022546:	ee2e ea27 	vmul.f32	s28, s28, s15
 802254a:	eee7 6a27 	vfma.f32	s13, s14, s15
 802254e:	eee7 ea27 	vfma.f32	s29, s14, s15
 8022552:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8022556:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802255a:	eef0 6a67 	vmov.f32	s13, s15
 802255e:	ed8d 7a02 	vstr	s14, [sp, #8]
 8022562:	ed9d 7a03 	vldr	s14, [sp, #12]
 8022566:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802256a:	ed9d 7a02 	vldr	s14, [sp, #8]
 802256e:	ee3e aa87 	vadd.f32	s20, s29, s14
 8022572:	ee29 9a27 	vmul.f32	s18, s18, s15
 8022576:	ee2a aa27 	vmul.f32	s20, s20, s15
 802257a:	2d00      	cmp	r5, #0
 802257c:	f000 810b 	beq.w	8022796 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022580:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8022584:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80227dc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8022588:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802258c:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8022590:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8022594:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8022598:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802259c:	eea6 7a27 	vfma.f32	s14, s12, s15
 80225a0:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 80225a4:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 80225a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80225ac:	eea5 6a27 	vfma.f32	s12, s10, s15
 80225b0:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 80225b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225b8:	bf48      	it	mi
 80225ba:	eeb1 7a47 	vnegmi.f32	s14, s14
 80225be:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80225c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225c6:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80225ca:	bf48      	it	mi
 80225cc:	eeb1 6a46 	vnegmi.f32	s12, s12
 80225d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225d4:	f340 80a8 	ble.w	8022728 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 80225d8:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80225dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225e0:	dd5a      	ble.n	8022698 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80225e2:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80225e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80225ea:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80225ee:	ee27 7a07 	vmul.f32	s14, s14, s14
 80225f2:	ee65 7a85 	vmul.f32	s15, s11, s10
 80225f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80225fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225fe:	f200 80ca 	bhi.w	8022796 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022602:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022606:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802260a:	f000 f932 	bl	8022872 <atan2f>
 802260e:	eeb0 8a40 	vmov.f32	s16, s0
 8022612:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8022616:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802261a:	f000 f92a 	bl	8022872 <atan2f>
 802261e:	ee38 fa40 	vsub.f32	s30, s16, s0
 8022622:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8022626:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802262a:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022632:	bf48      	it	mi
 8022634:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8022638:	f000 f91b 	bl	8022872 <atan2f>
 802263c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8022640:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80227e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022644:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802264c:	eeb4 fae7 	vcmpe.f32	s30, s15
 8022650:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80227e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022654:	bf48      	it	mi
 8022656:	eeb1 0a40 	vnegmi.f32	s0, s0
 802265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802265e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022662:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80227e4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8022666:	bfa4      	itt	ge
 8022668:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 80227e8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802266c:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8022670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022674:	bfa4      	itt	ge
 8022676:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 80227e8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802267a:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802267e:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8022682:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802268a:	f140 8084 	bpl.w	8022796 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802268e:	eef0 0a4a 	vmov.f32	s1, s20
 8022692:	eeb0 0a49 	vmov.f32	s0, s18
 8022696:	e040      	b.n	802271a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8022698:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802269c:	ee27 7a07 	vmul.f32	s14, s14, s14
 80226a0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80226a4:	ee67 7a85 	vmul.f32	s15, s15, s10
 80226a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80226ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226b0:	d871      	bhi.n	8022796 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80226b2:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80226b6:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80226ba:	f000 f8da 	bl	8022872 <atan2f>
 80226be:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80226c2:	eeb0 8a40 	vmov.f32	s16, s0
 80226c6:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80226ca:	f000 f8d2 	bl	8022872 <atan2f>
 80226ce:	ee38 0a40 	vsub.f32	s0, s16, s0
 80226d2:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80227e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80226d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80226da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226de:	bf48      	it	mi
 80226e0:	eeb1 0a40 	vnegmi.f32	s0, s0
 80226e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80226e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226ec:	bfa4      	itt	ge
 80226ee:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 80227e8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80226f2:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80226f6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80227e4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80226fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80226fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022702:	d548      	bpl.n	8022796 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022704:	eef0 0a4f 	vmov.f32	s1, s30
 8022708:	4620      	mov	r0, r4
 802270a:	eeb0 0a6f 	vmov.f32	s0, s31
 802270e:	f7ee f89d 	bl	801084c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8022712:	eef0 0a4c 	vmov.f32	s1, s24
 8022716:	eeb0 0a6b 	vmov.f32	s0, s23
 802271a:	4620      	mov	r0, r4
 802271c:	f7ee f896 	bl	801084c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8022720:	b005      	add	sp, #20
 8022722:	ecbd 8b10 	vpop	{d8-d15}
 8022726:	bd30      	pop	{r4, r5, pc}
 8022728:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80227dc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802272c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8022730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022734:	dd19      	ble.n	802276a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8022736:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802273a:	ee26 7a06 	vmul.f32	s14, s12, s12
 802273e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8022742:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802274e:	d822      	bhi.n	8022796 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022750:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8022754:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8022758:	f000 f88b 	bl	8022872 <atan2f>
 802275c:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022760:	eeb0 8a40 	vmov.f32	s16, s0
 8022764:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022768:	e7af      	b.n	80226ca <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802276a:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802276e:	eeb0 7a49 	vmov.f32	s14, s18
 8022772:	eeb0 6a4a 	vmov.f32	s12, s20
 8022776:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802277a:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802277e:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8022782:	ee66 7a06 	vmul.f32	s15, s12, s12
 8022786:	eee7 7a07 	vfma.f32	s15, s14, s14
 802278a:	eef4 7ac5 	vcmpe.f32	s15, s10
 802278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022792:	f67f af7c 	bls.w	802268e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8022796:	3501      	adds	r5, #1
 8022798:	eef0 0a69 	vmov.f32	s1, s19
 802279c:	eeb0 0a68 	vmov.f32	s0, s17
 80227a0:	4620      	mov	r0, r4
 80227a2:	4629      	mov	r1, r5
 80227a4:	eef0 3a4a 	vmov.f32	s7, s20
 80227a8:	eeb0 3a49 	vmov.f32	s6, s18
 80227ac:	eef0 2a6e 	vmov.f32	s5, s29
 80227b0:	eeb0 2a4e 	vmov.f32	s4, s28
 80227b4:	eef0 1a6d 	vmov.f32	s3, s27
 80227b8:	eeb0 1a4d 	vmov.f32	s2, s26
 80227bc:	f7ff fe84 	bl	80224c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80227c0:	eeb0 ca6c 	vmov.f32	s24, s25
 80227c4:	eddd ba01 	vldr	s23, [sp, #4]
 80227c8:	eef0 9a4a 	vmov.f32	s19, s20
 80227cc:	ed9d fa02 	vldr	s30, [sp, #8]
 80227d0:	eef0 8a49 	vmov.f32	s17, s18
 80227d4:	eddd fa03 	vldr	s31, [sp, #12]
 80227d8:	e68c      	b.n	80224f4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 80227da:	bf00      	nop
 80227dc:	2edbe6ff 	.word	0x2edbe6ff
 80227e0:	40490fdb 	.word	0x40490fdb
 80227e4:	3dcccccd 	.word	0x3dcccccd
 80227e8:	40c90fdb 	.word	0x40c90fdb

080227ec <_ZN8touchgfx6CanvasD1Ev>:
 80227ec:	4b04      	ldr	r3, [pc, #16]	@ (8022800 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80227ee:	b510      	push	{r4, lr}
 80227f0:	4604      	mov	r4, r0
 80227f2:	f840 3b14 	str.w	r3, [r0], #20
 80227f6:	f7ef f8cb 	bl	8011990 <_ZN8touchgfx7OutlineD1Ev>
 80227fa:	4620      	mov	r0, r4
 80227fc:	bd10      	pop	{r4, pc}
 80227fe:	bf00      	nop
 8022800:	08027014 	.word	0x08027014

08022804 <_ZN8touchgfx6CanvasD0Ev>:
 8022804:	b510      	push	{r4, lr}
 8022806:	4604      	mov	r4, r0
 8022808:	f7ff fff0 	bl	80227ec <_ZN8touchgfx6CanvasD1Ev>
 802280c:	2174      	movs	r1, #116	@ 0x74
 802280e:	4620      	mov	r0, r4
 8022810:	f000 f807 	bl	8022822 <_ZdlPvj>
 8022814:	4620      	mov	r0, r4
 8022816:	bd10      	pop	{r4, pc}

08022818 <__aeabi_atexit>:
 8022818:	460b      	mov	r3, r1
 802281a:	4601      	mov	r1, r0
 802281c:	4618      	mov	r0, r3
 802281e:	f000 bc59 	b.w	80230d4 <__cxa_atexit>

08022822 <_ZdlPvj>:
 8022822:	f000 b812 	b.w	802284a <_ZdlPv>

08022826 <__cxa_guard_acquire>:
 8022826:	6802      	ldr	r2, [r0, #0]
 8022828:	07d2      	lsls	r2, r2, #31
 802282a:	4603      	mov	r3, r0
 802282c:	d405      	bmi.n	802283a <__cxa_guard_acquire+0x14>
 802282e:	7842      	ldrb	r2, [r0, #1]
 8022830:	b102      	cbz	r2, 8022834 <__cxa_guard_acquire+0xe>
 8022832:	deff      	udf	#255	@ 0xff
 8022834:	2001      	movs	r0, #1
 8022836:	7058      	strb	r0, [r3, #1]
 8022838:	4770      	bx	lr
 802283a:	2000      	movs	r0, #0
 802283c:	4770      	bx	lr

0802283e <__cxa_guard_release>:
 802283e:	2301      	movs	r3, #1
 8022840:	6003      	str	r3, [r0, #0]
 8022842:	4770      	bx	lr

08022844 <__cxa_pure_virtual>:
 8022844:	b508      	push	{r3, lr}
 8022846:	f000 f80f 	bl	8022868 <_ZSt9terminatev>

0802284a <_ZdlPv>:
 802284a:	f000 bb8d 	b.w	8022f68 <free>

0802284e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802284e:	b508      	push	{r3, lr}
 8022850:	4780      	blx	r0
 8022852:	f000 fb56 	bl	8022f02 <abort>
	...

08022858 <_ZSt13get_terminatev>:
 8022858:	4b02      	ldr	r3, [pc, #8]	@ (8022864 <_ZSt13get_terminatev+0xc>)
 802285a:	6818      	ldr	r0, [r3, #0]
 802285c:	f3bf 8f5b 	dmb	ish
 8022860:	4770      	bx	lr
 8022862:	bf00      	nop
 8022864:	240000d8 	.word	0x240000d8

08022868 <_ZSt9terminatev>:
 8022868:	b508      	push	{r3, lr}
 802286a:	f7ff fff5 	bl	8022858 <_ZSt13get_terminatev>
 802286e:	f7ff ffee 	bl	802284e <_ZN10__cxxabiv111__terminateEPFvvE>

08022872 <atan2f>:
 8022872:	f000 b9cd 	b.w	8022c10 <__ieee754_atan2f>
	...

08022878 <sqrtf>:
 8022878:	b508      	push	{r3, lr}
 802287a:	ed2d 8b02 	vpush	{d8}
 802287e:	eeb0 8a40 	vmov.f32	s16, s0
 8022882:	f000 f9c2 	bl	8022c0a <__ieee754_sqrtf>
 8022886:	eeb4 8a48 	vcmp.f32	s16, s16
 802288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802288e:	d60c      	bvs.n	80228aa <sqrtf+0x32>
 8022890:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80228b0 <sqrtf+0x38>
 8022894:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8022898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802289c:	d505      	bpl.n	80228aa <sqrtf+0x32>
 802289e:	f000 fe87 	bl	80235b0 <__errno>
 80228a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80228a6:	2321      	movs	r3, #33	@ 0x21
 80228a8:	6003      	str	r3, [r0, #0]
 80228aa:	ecbd 8b02 	vpop	{d8}
 80228ae:	bd08      	pop	{r3, pc}
 80228b0:	00000000 	.word	0x00000000

080228b4 <sinf_poly>:
 80228b4:	07cb      	lsls	r3, r1, #31
 80228b6:	d412      	bmi.n	80228de <sinf_poly+0x2a>
 80228b8:	ee21 5b00 	vmul.f64	d5, d1, d0
 80228bc:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80228c0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80228c4:	eea6 7b01 	vfma.f64	d7, d6, d1
 80228c8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80228cc:	ee21 1b05 	vmul.f64	d1, d1, d5
 80228d0:	eea6 0b05 	vfma.f64	d0, d6, d5
 80228d4:	eea7 0b01 	vfma.f64	d0, d7, d1
 80228d8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80228dc:	4770      	bx	lr
 80228de:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80228e2:	ee21 5b01 	vmul.f64	d5, d1, d1
 80228e6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80228ea:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80228ee:	eea1 7b06 	vfma.f64	d7, d1, d6
 80228f2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80228f6:	eea1 0b06 	vfma.f64	d0, d1, d6
 80228fa:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80228fe:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022902:	eea5 0b06 	vfma.f64	d0, d5, d6
 8022906:	e7e5      	b.n	80228d4 <sinf_poly+0x20>

08022908 <sinf>:
 8022908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802290a:	ee10 4a10 	vmov	r4, s0
 802290e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8022912:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8022916:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802291a:	eef0 7a40 	vmov.f32	s15, s0
 802291e:	d218      	bcs.n	8022952 <sinf+0x4a>
 8022920:	ee26 1b06 	vmul.f64	d1, d6, d6
 8022924:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8022928:	d20a      	bcs.n	8022940 <sinf+0x38>
 802292a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 802292e:	d103      	bne.n	8022938 <sinf+0x30>
 8022930:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8022934:	ed8d 1a01 	vstr	s2, [sp, #4]
 8022938:	eeb0 0a67 	vmov.f32	s0, s15
 802293c:	b003      	add	sp, #12
 802293e:	bd30      	pop	{r4, r5, pc}
 8022940:	483b      	ldr	r0, [pc, #236]	@ (8022a30 <sinf+0x128>)
 8022942:	eeb0 0b46 	vmov.f64	d0, d6
 8022946:	2100      	movs	r1, #0
 8022948:	b003      	add	sp, #12
 802294a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802294e:	f7ff bfb1 	b.w	80228b4 <sinf_poly>
 8022952:	f240 422e 	movw	r2, #1070	@ 0x42e
 8022956:	4293      	cmp	r3, r2
 8022958:	d824      	bhi.n	80229a4 <sinf+0x9c>
 802295a:	4b35      	ldr	r3, [pc, #212]	@ (8022a30 <sinf+0x128>)
 802295c:	ed93 7b08 	vldr	d7, [r3, #32]
 8022960:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022964:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8022968:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802296c:	ee17 1a90 	vmov	r1, s15
 8022970:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8022974:	1609      	asrs	r1, r1, #24
 8022976:	ee07 1a90 	vmov	s15, r1
 802297a:	f001 0203 	and.w	r2, r1, #3
 802297e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022982:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8022986:	ed92 0b00 	vldr	d0, [r2]
 802298a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802298e:	f011 0f02 	tst.w	r1, #2
 8022992:	eea5 6b47 	vfms.f64	d6, d5, d7
 8022996:	bf08      	it	eq
 8022998:	4618      	moveq	r0, r3
 802299a:	ee26 1b06 	vmul.f64	d1, d6, d6
 802299e:	ee20 0b06 	vmul.f64	d0, d0, d6
 80229a2:	e7d1      	b.n	8022948 <sinf+0x40>
 80229a4:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80229a8:	d237      	bcs.n	8022a1a <sinf+0x112>
 80229aa:	4922      	ldr	r1, [pc, #136]	@ (8022a34 <sinf+0x12c>)
 80229ac:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80229b0:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80229b4:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80229b8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80229bc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80229c0:	6a10      	ldr	r0, [r2, #32]
 80229c2:	6912      	ldr	r2, [r2, #16]
 80229c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80229c8:	40ab      	lsls	r3, r5
 80229ca:	fba0 5003 	umull	r5, r0, r0, r3
 80229ce:	4359      	muls	r1, r3
 80229d0:	fbe3 0102 	umlal	r0, r1, r3, r2
 80229d4:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80229d8:	0f9d      	lsrs	r5, r3, #30
 80229da:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80229de:	1ac9      	subs	r1, r1, r3
 80229e0:	f7dd fe5c 	bl	800069c <__aeabi_l2d>
 80229e4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80229e8:	4b11      	ldr	r3, [pc, #68]	@ (8022a30 <sinf+0x128>)
 80229ea:	f004 0203 	and.w	r2, r4, #3
 80229ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80229f2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8022a28 <sinf+0x120>
 80229f6:	ed92 0b00 	vldr	d0, [r2]
 80229fa:	ec41 0b17 	vmov	d7, r0, r1
 80229fe:	f014 0f02 	tst.w	r4, #2
 8022a02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a06:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022a0a:	4629      	mov	r1, r5
 8022a0c:	bf08      	it	eq
 8022a0e:	4618      	moveq	r0, r3
 8022a10:	ee27 1b07 	vmul.f64	d1, d7, d7
 8022a14:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022a18:	e796      	b.n	8022948 <sinf+0x40>
 8022a1a:	b003      	add	sp, #12
 8022a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022a20:	f000 b8e4 	b.w	8022bec <__math_invalidf>
 8022a24:	f3af 8000 	nop.w
 8022a28:	54442d18 	.word	0x54442d18
 8022a2c:	3c1921fb 	.word	0x3c1921fb
 8022a30:	08027080 	.word	0x08027080
 8022a34:	08027020 	.word	0x08027020

08022a38 <sinf_poly>:
 8022a38:	07cb      	lsls	r3, r1, #31
 8022a3a:	d412      	bmi.n	8022a62 <sinf_poly+0x2a>
 8022a3c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8022a40:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8022a44:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8022a48:	eea6 7b01 	vfma.f64	d7, d6, d1
 8022a4c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8022a50:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022a54:	eea6 0b05 	vfma.f64	d0, d6, d5
 8022a58:	eea7 0b01 	vfma.f64	d0, d7, d1
 8022a5c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022a60:	4770      	bx	lr
 8022a62:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8022a66:	ee21 5b01 	vmul.f64	d5, d1, d1
 8022a6a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8022a6e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8022a72:	eea1 7b06 	vfma.f64	d7, d1, d6
 8022a76:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8022a7a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8022a7e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8022a82:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022a86:	eea5 0b06 	vfma.f64	d0, d5, d6
 8022a8a:	e7e5      	b.n	8022a58 <sinf_poly+0x20>
 8022a8c:	0000      	movs	r0, r0
	...

08022a90 <cosf>:
 8022a90:	b538      	push	{r3, r4, r5, lr}
 8022a92:	ee10 4a10 	vmov	r4, s0
 8022a96:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8022a9a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8022a9e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8022aa2:	d21f      	bcs.n	8022ae4 <cosf+0x54>
 8022aa4:	ee27 7b07 	vmul.f64	d7, d7, d7
 8022aa8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8022aac:	f0c0 8082 	bcc.w	8022bb4 <cosf+0x124>
 8022ab0:	ee27 4b07 	vmul.f64	d4, d7, d7
 8022ab4:	4b44      	ldr	r3, [pc, #272]	@ (8022bc8 <cosf+0x138>)
 8022ab6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8022aba:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8022abe:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8022ac2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022ac6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8022aca:	eea7 0b05 	vfma.f64	d0, d7, d5
 8022ace:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8022ad2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022ad6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8022ada:	eea6 0b07 	vfma.f64	d0, d6, d7
 8022ade:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022ae2:	bd38      	pop	{r3, r4, r5, pc}
 8022ae4:	f240 422e 	movw	r2, #1070	@ 0x42e
 8022ae8:	4293      	cmp	r3, r2
 8022aea:	d829      	bhi.n	8022b40 <cosf+0xb0>
 8022aec:	4b36      	ldr	r3, [pc, #216]	@ (8022bc8 <cosf+0x138>)
 8022aee:	ed93 6b08 	vldr	d6, [r3, #32]
 8022af2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8022af6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8022afa:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022afe:	ee16 1a90 	vmov	r1, s13
 8022b02:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8022b06:	1609      	asrs	r1, r1, #24
 8022b08:	ee06 1a90 	vmov	s13, r1
 8022b0c:	f001 0203 	and.w	r2, r1, #3
 8022b10:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022b14:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8022b18:	ed92 0b00 	vldr	d0, [r2]
 8022b1c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8022b20:	f011 0f02 	tst.w	r1, #2
 8022b24:	f081 0101 	eor.w	r1, r1, #1
 8022b28:	eea5 7b46 	vfms.f64	d7, d5, d6
 8022b2c:	bf08      	it	eq
 8022b2e:	4618      	moveq	r0, r3
 8022b30:	ee27 1b07 	vmul.f64	d1, d7, d7
 8022b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022b38:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022b3c:	f7ff bf7c 	b.w	8022a38 <sinf_poly>
 8022b40:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8022b44:	d232      	bcs.n	8022bac <cosf+0x11c>
 8022b46:	4921      	ldr	r1, [pc, #132]	@ (8022bcc <cosf+0x13c>)
 8022b48:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8022b4c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8022b50:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8022b54:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8022b58:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8022b5c:	6a10      	ldr	r0, [r2, #32]
 8022b5e:	6912      	ldr	r2, [r2, #16]
 8022b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8022b64:	40ab      	lsls	r3, r5
 8022b66:	fba0 5003 	umull	r5, r0, r0, r3
 8022b6a:	4359      	muls	r1, r3
 8022b6c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8022b70:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8022b74:	0f9d      	lsrs	r5, r3, #30
 8022b76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8022b7a:	1ac9      	subs	r1, r1, r3
 8022b7c:	f7dd fd8e 	bl	800069c <__aeabi_l2d>
 8022b80:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8022b84:	4b10      	ldr	r3, [pc, #64]	@ (8022bc8 <cosf+0x138>)
 8022b86:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8022bc0 <cosf+0x130>
 8022b8a:	ec41 0b17 	vmov	d7, r0, r1
 8022b8e:	f004 0203 	and.w	r2, r4, #3
 8022b92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022b96:	ed92 0b00 	vldr	d0, [r2]
 8022b9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022b9e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022ba2:	f014 0f02 	tst.w	r4, #2
 8022ba6:	f085 0101 	eor.w	r1, r5, #1
 8022baa:	e7bf      	b.n	8022b2c <cosf+0x9c>
 8022bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022bb0:	f000 b81c 	b.w	8022bec <__math_invalidf>
 8022bb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8022bb8:	e793      	b.n	8022ae2 <cosf+0x52>
 8022bba:	bf00      	nop
 8022bbc:	f3af 8000 	nop.w
 8022bc0:	54442d18 	.word	0x54442d18
 8022bc4:	3c1921fb 	.word	0x3c1921fb
 8022bc8:	08027080 	.word	0x08027080
 8022bcc:	08027020 	.word	0x08027020

08022bd0 <with_errnof>:
 8022bd0:	b510      	push	{r4, lr}
 8022bd2:	ed2d 8b02 	vpush	{d8}
 8022bd6:	eeb0 8a40 	vmov.f32	s16, s0
 8022bda:	4604      	mov	r4, r0
 8022bdc:	f000 fce8 	bl	80235b0 <__errno>
 8022be0:	eeb0 0a48 	vmov.f32	s0, s16
 8022be4:	ecbd 8b02 	vpop	{d8}
 8022be8:	6004      	str	r4, [r0, #0]
 8022bea:	bd10      	pop	{r4, pc}

08022bec <__math_invalidf>:
 8022bec:	eef0 7a40 	vmov.f32	s15, s0
 8022bf0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8022bf4:	eef4 7a67 	vcmp.f32	s15, s15
 8022bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bfc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8022c00:	d602      	bvs.n	8022c08 <__math_invalidf+0x1c>
 8022c02:	2021      	movs	r0, #33	@ 0x21
 8022c04:	f7ff bfe4 	b.w	8022bd0 <with_errnof>
 8022c08:	4770      	bx	lr

08022c0a <__ieee754_sqrtf>:
 8022c0a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8022c0e:	4770      	bx	lr

08022c10 <__ieee754_atan2f>:
 8022c10:	ee10 2a90 	vmov	r2, s1
 8022c14:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8022c18:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022c1c:	b510      	push	{r4, lr}
 8022c1e:	eef0 7a40 	vmov.f32	s15, s0
 8022c22:	d806      	bhi.n	8022c32 <__ieee754_atan2f+0x22>
 8022c24:	ee10 0a10 	vmov	r0, s0
 8022c28:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8022c2c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022c30:	d904      	bls.n	8022c3c <__ieee754_atan2f+0x2c>
 8022c32:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8022c36:	eeb0 0a67 	vmov.f32	s0, s15
 8022c3a:	bd10      	pop	{r4, pc}
 8022c3c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8022c40:	d103      	bne.n	8022c4a <__ieee754_atan2f+0x3a>
 8022c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022c46:	f000 b881 	b.w	8022d4c <atanf>
 8022c4a:	1794      	asrs	r4, r2, #30
 8022c4c:	f004 0402 	and.w	r4, r4, #2
 8022c50:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8022c54:	b93b      	cbnz	r3, 8022c66 <__ieee754_atan2f+0x56>
 8022c56:	2c02      	cmp	r4, #2
 8022c58:	d05c      	beq.n	8022d14 <__ieee754_atan2f+0x104>
 8022c5a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8022d28 <__ieee754_atan2f+0x118>
 8022c5e:	2c03      	cmp	r4, #3
 8022c60:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8022c64:	e7e7      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022c66:	b939      	cbnz	r1, 8022c78 <__ieee754_atan2f+0x68>
 8022c68:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8022d2c <__ieee754_atan2f+0x11c>
 8022c6c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8022d30 <__ieee754_atan2f+0x120>
 8022c70:	2800      	cmp	r0, #0
 8022c72:	fe67 7a27 	vselge.f32	s15, s14, s15
 8022c76:	e7de      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022c78:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022c7c:	d110      	bne.n	8022ca0 <__ieee754_atan2f+0x90>
 8022c7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022c82:	f104 34ff 	add.w	r4, r4, #4294967295
 8022c86:	d107      	bne.n	8022c98 <__ieee754_atan2f+0x88>
 8022c88:	2c02      	cmp	r4, #2
 8022c8a:	d846      	bhi.n	8022d1a <__ieee754_atan2f+0x10a>
 8022c8c:	4b29      	ldr	r3, [pc, #164]	@ (8022d34 <__ieee754_atan2f+0x124>)
 8022c8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022c92:	edd3 7a00 	vldr	s15, [r3]
 8022c96:	e7ce      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022c98:	2c02      	cmp	r4, #2
 8022c9a:	d841      	bhi.n	8022d20 <__ieee754_atan2f+0x110>
 8022c9c:	4b26      	ldr	r3, [pc, #152]	@ (8022d38 <__ieee754_atan2f+0x128>)
 8022c9e:	e7f6      	b.n	8022c8e <__ieee754_atan2f+0x7e>
 8022ca0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022ca4:	d0e0      	beq.n	8022c68 <__ieee754_atan2f+0x58>
 8022ca6:	1a5b      	subs	r3, r3, r1
 8022ca8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8022cac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022cb0:	da1a      	bge.n	8022ce8 <__ieee754_atan2f+0xd8>
 8022cb2:	2a00      	cmp	r2, #0
 8022cb4:	da01      	bge.n	8022cba <__ieee754_atan2f+0xaa>
 8022cb6:	313c      	adds	r1, #60	@ 0x3c
 8022cb8:	db19      	blt.n	8022cee <__ieee754_atan2f+0xde>
 8022cba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8022cbe:	f000 f919 	bl	8022ef4 <fabsf>
 8022cc2:	f000 f843 	bl	8022d4c <atanf>
 8022cc6:	eef0 7a40 	vmov.f32	s15, s0
 8022cca:	2c01      	cmp	r4, #1
 8022ccc:	d012      	beq.n	8022cf4 <__ieee754_atan2f+0xe4>
 8022cce:	2c02      	cmp	r4, #2
 8022cd0:	d017      	beq.n	8022d02 <__ieee754_atan2f+0xf2>
 8022cd2:	2c00      	cmp	r4, #0
 8022cd4:	d0af      	beq.n	8022c36 <__ieee754_atan2f+0x26>
 8022cd6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8022d3c <__ieee754_atan2f+0x12c>
 8022cda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022cde:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8022d40 <__ieee754_atan2f+0x130>
 8022ce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022ce6:	e7a6      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022ce8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8022d30 <__ieee754_atan2f+0x120>
 8022cec:	e7ed      	b.n	8022cca <__ieee754_atan2f+0xba>
 8022cee:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8022d44 <__ieee754_atan2f+0x134>
 8022cf2:	e7ea      	b.n	8022cca <__ieee754_atan2f+0xba>
 8022cf4:	ee17 3a90 	vmov	r3, s15
 8022cf8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8022cfc:	ee07 3a90 	vmov	s15, r3
 8022d00:	e799      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d02:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8022d3c <__ieee754_atan2f+0x12c>
 8022d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022d0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8022d40 <__ieee754_atan2f+0x130>
 8022d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022d12:	e790      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d14:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8022d40 <__ieee754_atan2f+0x130>
 8022d18:	e78d      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d1a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8022d48 <__ieee754_atan2f+0x138>
 8022d1e:	e78a      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d20:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8022d44 <__ieee754_atan2f+0x134>
 8022d24:	e787      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d26:	bf00      	nop
 8022d28:	c0490fdb 	.word	0xc0490fdb
 8022d2c:	bfc90fdb 	.word	0xbfc90fdb
 8022d30:	3fc90fdb 	.word	0x3fc90fdb
 8022d34:	0802716c 	.word	0x0802716c
 8022d38:	08027160 	.word	0x08027160
 8022d3c:	33bbbd2e 	.word	0x33bbbd2e
 8022d40:	40490fdb 	.word	0x40490fdb
 8022d44:	00000000 	.word	0x00000000
 8022d48:	3f490fdb 	.word	0x3f490fdb

08022d4c <atanf>:
 8022d4c:	b538      	push	{r3, r4, r5, lr}
 8022d4e:	ee10 5a10 	vmov	r5, s0
 8022d52:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8022d56:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8022d5a:	eef0 7a40 	vmov.f32	s15, s0
 8022d5e:	d30f      	bcc.n	8022d80 <atanf+0x34>
 8022d60:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8022d64:	d904      	bls.n	8022d70 <atanf+0x24>
 8022d66:	ee70 7a00 	vadd.f32	s15, s0, s0
 8022d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8022d6e:	bd38      	pop	{r3, r4, r5, pc}
 8022d70:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8022ea8 <atanf+0x15c>
 8022d74:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8022eac <atanf+0x160>
 8022d78:	2d00      	cmp	r5, #0
 8022d7a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8022d7e:	e7f4      	b.n	8022d6a <atanf+0x1e>
 8022d80:	4b4b      	ldr	r3, [pc, #300]	@ (8022eb0 <atanf+0x164>)
 8022d82:	429c      	cmp	r4, r3
 8022d84:	d810      	bhi.n	8022da8 <atanf+0x5c>
 8022d86:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8022d8a:	d20a      	bcs.n	8022da2 <atanf+0x56>
 8022d8c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8022eb4 <atanf+0x168>
 8022d90:	ee30 7a07 	vadd.f32	s14, s0, s14
 8022d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022d98:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8022d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022da0:	dce3      	bgt.n	8022d6a <atanf+0x1e>
 8022da2:	f04f 33ff 	mov.w	r3, #4294967295
 8022da6:	e013      	b.n	8022dd0 <atanf+0x84>
 8022da8:	f000 f8a4 	bl	8022ef4 <fabsf>
 8022dac:	4b42      	ldr	r3, [pc, #264]	@ (8022eb8 <atanf+0x16c>)
 8022dae:	429c      	cmp	r4, r3
 8022db0:	d84f      	bhi.n	8022e52 <atanf+0x106>
 8022db2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8022db6:	429c      	cmp	r4, r3
 8022db8:	d841      	bhi.n	8022e3e <atanf+0xf2>
 8022dba:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8022dbe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8022dc2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022dcc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022dd0:	1c5a      	adds	r2, r3, #1
 8022dd2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8022dd6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8022ebc <atanf+0x170>
 8022dda:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8022ec0 <atanf+0x174>
 8022dde:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8022ec4 <atanf+0x178>
 8022de2:	ee66 6a06 	vmul.f32	s13, s12, s12
 8022de6:	eee6 5a87 	vfma.f32	s11, s13, s14
 8022dea:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8022ec8 <atanf+0x17c>
 8022dee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022df2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8022ecc <atanf+0x180>
 8022df6:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022dfa:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8022ed0 <atanf+0x184>
 8022dfe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022e02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8022ed4 <atanf+0x188>
 8022e06:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022e0a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8022ed8 <atanf+0x18c>
 8022e0e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8022e12:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8022edc <atanf+0x190>
 8022e16:	eea5 7a26 	vfma.f32	s14, s10, s13
 8022e1a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8022ee0 <atanf+0x194>
 8022e1e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8022e22:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8022ee4 <atanf+0x198>
 8022e26:	eea5 7a26 	vfma.f32	s14, s10, s13
 8022e2a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022e2e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8022e32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8022e36:	d121      	bne.n	8022e7c <atanf+0x130>
 8022e38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022e3c:	e795      	b.n	8022d6a <atanf+0x1e>
 8022e3e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8022e42:	ee30 7a67 	vsub.f32	s14, s0, s15
 8022e46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022e4a:	2301      	movs	r3, #1
 8022e4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e50:	e7be      	b.n	8022dd0 <atanf+0x84>
 8022e52:	4b25      	ldr	r3, [pc, #148]	@ (8022ee8 <atanf+0x19c>)
 8022e54:	429c      	cmp	r4, r3
 8022e56:	d80b      	bhi.n	8022e70 <atanf+0x124>
 8022e58:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8022e5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022e60:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022e64:	2302      	movs	r3, #2
 8022e66:	ee70 6a67 	vsub.f32	s13, s0, s15
 8022e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022e6e:	e7af      	b.n	8022dd0 <atanf+0x84>
 8022e70:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8022e74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e78:	2303      	movs	r3, #3
 8022e7a:	e7a9      	b.n	8022dd0 <atanf+0x84>
 8022e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8022eec <atanf+0x1a0>)
 8022e7e:	491c      	ldr	r1, [pc, #112]	@ (8022ef0 <atanf+0x1a4>)
 8022e80:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022e84:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022e88:	edd3 6a00 	vldr	s13, [r3]
 8022e8c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8022e90:	2d00      	cmp	r5, #0
 8022e92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022e96:	edd2 7a00 	vldr	s15, [r2]
 8022e9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022e9e:	bfb8      	it	lt
 8022ea0:	eef1 7a67 	vneglt.f32	s15, s15
 8022ea4:	e761      	b.n	8022d6a <atanf+0x1e>
 8022ea6:	bf00      	nop
 8022ea8:	bfc90fdb 	.word	0xbfc90fdb
 8022eac:	3fc90fdb 	.word	0x3fc90fdb
 8022eb0:	3edfffff 	.word	0x3edfffff
 8022eb4:	7149f2ca 	.word	0x7149f2ca
 8022eb8:	3f97ffff 	.word	0x3f97ffff
 8022ebc:	3c8569d7 	.word	0x3c8569d7
 8022ec0:	3d4bda59 	.word	0x3d4bda59
 8022ec4:	bd6ef16b 	.word	0xbd6ef16b
 8022ec8:	3d886b35 	.word	0x3d886b35
 8022ecc:	3dba2e6e 	.word	0x3dba2e6e
 8022ed0:	3e124925 	.word	0x3e124925
 8022ed4:	3eaaaaab 	.word	0x3eaaaaab
 8022ed8:	bd15a221 	.word	0xbd15a221
 8022edc:	bd9d8795 	.word	0xbd9d8795
 8022ee0:	bde38e38 	.word	0xbde38e38
 8022ee4:	be4ccccd 	.word	0xbe4ccccd
 8022ee8:	401bffff 	.word	0x401bffff
 8022eec:	08027188 	.word	0x08027188
 8022ef0:	08027178 	.word	0x08027178

08022ef4 <fabsf>:
 8022ef4:	ee10 3a10 	vmov	r3, s0
 8022ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022efc:	ee00 3a10 	vmov	s0, r3
 8022f00:	4770      	bx	lr

08022f02 <abort>:
 8022f02:	b508      	push	{r3, lr}
 8022f04:	2006      	movs	r0, #6
 8022f06:	f000 fae1 	bl	80234cc <raise>
 8022f0a:	2001      	movs	r0, #1
 8022f0c:	f7de fc3a 	bl	8001784 <_exit>

08022f10 <__assert_func>:
 8022f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022f12:	4614      	mov	r4, r2
 8022f14:	461a      	mov	r2, r3
 8022f16:	4b09      	ldr	r3, [pc, #36]	@ (8022f3c <__assert_func+0x2c>)
 8022f18:	681b      	ldr	r3, [r3, #0]
 8022f1a:	4605      	mov	r5, r0
 8022f1c:	68d8      	ldr	r0, [r3, #12]
 8022f1e:	b14c      	cbz	r4, 8022f34 <__assert_func+0x24>
 8022f20:	4b07      	ldr	r3, [pc, #28]	@ (8022f40 <__assert_func+0x30>)
 8022f22:	9100      	str	r1, [sp, #0]
 8022f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022f28:	4906      	ldr	r1, [pc, #24]	@ (8022f44 <__assert_func+0x34>)
 8022f2a:	462b      	mov	r3, r5
 8022f2c:	f000 f984 	bl	8023238 <fiprintf>
 8022f30:	f7ff ffe7 	bl	8022f02 <abort>
 8022f34:	4b04      	ldr	r3, [pc, #16]	@ (8022f48 <__assert_func+0x38>)
 8022f36:	461c      	mov	r4, r3
 8022f38:	e7f3      	b.n	8022f22 <__assert_func+0x12>
 8022f3a:	bf00      	nop
 8022f3c:	240000e8 	.word	0x240000e8
 8022f40:	08025e1c 	.word	0x08025e1c
 8022f44:	08025e29 	.word	0x08025e29
 8022f48:	08025e57 	.word	0x08025e57

08022f4c <atexit>:
 8022f4c:	2300      	movs	r3, #0
 8022f4e:	4601      	mov	r1, r0
 8022f50:	461a      	mov	r2, r3
 8022f52:	4618      	mov	r0, r3
 8022f54:	f000 bb68 	b.w	8023628 <__register_exitproc>

08022f58 <malloc>:
 8022f58:	4b02      	ldr	r3, [pc, #8]	@ (8022f64 <malloc+0xc>)
 8022f5a:	4601      	mov	r1, r0
 8022f5c:	6818      	ldr	r0, [r3, #0]
 8022f5e:	f000 b82d 	b.w	8022fbc <_malloc_r>
 8022f62:	bf00      	nop
 8022f64:	240000e8 	.word	0x240000e8

08022f68 <free>:
 8022f68:	4b02      	ldr	r3, [pc, #8]	@ (8022f74 <free+0xc>)
 8022f6a:	4601      	mov	r1, r0
 8022f6c:	6818      	ldr	r0, [r3, #0]
 8022f6e:	f000 bbb7 	b.w	80236e0 <_free_r>
 8022f72:	bf00      	nop
 8022f74:	240000e8 	.word	0x240000e8

08022f78 <sbrk_aligned>:
 8022f78:	b570      	push	{r4, r5, r6, lr}
 8022f7a:	4e0f      	ldr	r6, [pc, #60]	@ (8022fb8 <sbrk_aligned+0x40>)
 8022f7c:	460c      	mov	r4, r1
 8022f7e:	6831      	ldr	r1, [r6, #0]
 8022f80:	4605      	mov	r5, r0
 8022f82:	b911      	cbnz	r1, 8022f8a <sbrk_aligned+0x12>
 8022f84:	f000 faf2 	bl	802356c <_sbrk_r>
 8022f88:	6030      	str	r0, [r6, #0]
 8022f8a:	4621      	mov	r1, r4
 8022f8c:	4628      	mov	r0, r5
 8022f8e:	f000 faed 	bl	802356c <_sbrk_r>
 8022f92:	1c43      	adds	r3, r0, #1
 8022f94:	d103      	bne.n	8022f9e <sbrk_aligned+0x26>
 8022f96:	f04f 34ff 	mov.w	r4, #4294967295
 8022f9a:	4620      	mov	r0, r4
 8022f9c:	bd70      	pop	{r4, r5, r6, pc}
 8022f9e:	1cc4      	adds	r4, r0, #3
 8022fa0:	f024 0403 	bic.w	r4, r4, #3
 8022fa4:	42a0      	cmp	r0, r4
 8022fa6:	d0f8      	beq.n	8022f9a <sbrk_aligned+0x22>
 8022fa8:	1a21      	subs	r1, r4, r0
 8022faa:	4628      	mov	r0, r5
 8022fac:	f000 fade 	bl	802356c <_sbrk_r>
 8022fb0:	3001      	adds	r0, #1
 8022fb2:	d1f2      	bne.n	8022f9a <sbrk_aligned+0x22>
 8022fb4:	e7ef      	b.n	8022f96 <sbrk_aligned+0x1e>
 8022fb6:	bf00      	nop
 8022fb8:	24025c2c 	.word	0x24025c2c

08022fbc <_malloc_r>:
 8022fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022fc0:	1ccd      	adds	r5, r1, #3
 8022fc2:	f025 0503 	bic.w	r5, r5, #3
 8022fc6:	3508      	adds	r5, #8
 8022fc8:	2d0c      	cmp	r5, #12
 8022fca:	bf38      	it	cc
 8022fcc:	250c      	movcc	r5, #12
 8022fce:	2d00      	cmp	r5, #0
 8022fd0:	4606      	mov	r6, r0
 8022fd2:	db01      	blt.n	8022fd8 <_malloc_r+0x1c>
 8022fd4:	42a9      	cmp	r1, r5
 8022fd6:	d904      	bls.n	8022fe2 <_malloc_r+0x26>
 8022fd8:	230c      	movs	r3, #12
 8022fda:	6033      	str	r3, [r6, #0]
 8022fdc:	2000      	movs	r0, #0
 8022fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022fe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80230b8 <_malloc_r+0xfc>
 8022fe6:	f000 f869 	bl	80230bc <__malloc_lock>
 8022fea:	f8d8 3000 	ldr.w	r3, [r8]
 8022fee:	461c      	mov	r4, r3
 8022ff0:	bb44      	cbnz	r4, 8023044 <_malloc_r+0x88>
 8022ff2:	4629      	mov	r1, r5
 8022ff4:	4630      	mov	r0, r6
 8022ff6:	f7ff ffbf 	bl	8022f78 <sbrk_aligned>
 8022ffa:	1c43      	adds	r3, r0, #1
 8022ffc:	4604      	mov	r4, r0
 8022ffe:	d158      	bne.n	80230b2 <_malloc_r+0xf6>
 8023000:	f8d8 4000 	ldr.w	r4, [r8]
 8023004:	4627      	mov	r7, r4
 8023006:	2f00      	cmp	r7, #0
 8023008:	d143      	bne.n	8023092 <_malloc_r+0xd6>
 802300a:	2c00      	cmp	r4, #0
 802300c:	d04b      	beq.n	80230a6 <_malloc_r+0xea>
 802300e:	6823      	ldr	r3, [r4, #0]
 8023010:	4639      	mov	r1, r7
 8023012:	4630      	mov	r0, r6
 8023014:	eb04 0903 	add.w	r9, r4, r3
 8023018:	f000 faa8 	bl	802356c <_sbrk_r>
 802301c:	4581      	cmp	r9, r0
 802301e:	d142      	bne.n	80230a6 <_malloc_r+0xea>
 8023020:	6821      	ldr	r1, [r4, #0]
 8023022:	1a6d      	subs	r5, r5, r1
 8023024:	4629      	mov	r1, r5
 8023026:	4630      	mov	r0, r6
 8023028:	f7ff ffa6 	bl	8022f78 <sbrk_aligned>
 802302c:	3001      	adds	r0, #1
 802302e:	d03a      	beq.n	80230a6 <_malloc_r+0xea>
 8023030:	6823      	ldr	r3, [r4, #0]
 8023032:	442b      	add	r3, r5
 8023034:	6023      	str	r3, [r4, #0]
 8023036:	f8d8 3000 	ldr.w	r3, [r8]
 802303a:	685a      	ldr	r2, [r3, #4]
 802303c:	bb62      	cbnz	r2, 8023098 <_malloc_r+0xdc>
 802303e:	f8c8 7000 	str.w	r7, [r8]
 8023042:	e00f      	b.n	8023064 <_malloc_r+0xa8>
 8023044:	6822      	ldr	r2, [r4, #0]
 8023046:	1b52      	subs	r2, r2, r5
 8023048:	d420      	bmi.n	802308c <_malloc_r+0xd0>
 802304a:	2a0b      	cmp	r2, #11
 802304c:	d917      	bls.n	802307e <_malloc_r+0xc2>
 802304e:	1961      	adds	r1, r4, r5
 8023050:	42a3      	cmp	r3, r4
 8023052:	6025      	str	r5, [r4, #0]
 8023054:	bf18      	it	ne
 8023056:	6059      	strne	r1, [r3, #4]
 8023058:	6863      	ldr	r3, [r4, #4]
 802305a:	bf08      	it	eq
 802305c:	f8c8 1000 	streq.w	r1, [r8]
 8023060:	5162      	str	r2, [r4, r5]
 8023062:	604b      	str	r3, [r1, #4]
 8023064:	4630      	mov	r0, r6
 8023066:	f000 f82f 	bl	80230c8 <__malloc_unlock>
 802306a:	f104 000b 	add.w	r0, r4, #11
 802306e:	1d23      	adds	r3, r4, #4
 8023070:	f020 0007 	bic.w	r0, r0, #7
 8023074:	1ac2      	subs	r2, r0, r3
 8023076:	bf1c      	itt	ne
 8023078:	1a1b      	subne	r3, r3, r0
 802307a:	50a3      	strne	r3, [r4, r2]
 802307c:	e7af      	b.n	8022fde <_malloc_r+0x22>
 802307e:	6862      	ldr	r2, [r4, #4]
 8023080:	42a3      	cmp	r3, r4
 8023082:	bf0c      	ite	eq
 8023084:	f8c8 2000 	streq.w	r2, [r8]
 8023088:	605a      	strne	r2, [r3, #4]
 802308a:	e7eb      	b.n	8023064 <_malloc_r+0xa8>
 802308c:	4623      	mov	r3, r4
 802308e:	6864      	ldr	r4, [r4, #4]
 8023090:	e7ae      	b.n	8022ff0 <_malloc_r+0x34>
 8023092:	463c      	mov	r4, r7
 8023094:	687f      	ldr	r7, [r7, #4]
 8023096:	e7b6      	b.n	8023006 <_malloc_r+0x4a>
 8023098:	461a      	mov	r2, r3
 802309a:	685b      	ldr	r3, [r3, #4]
 802309c:	42a3      	cmp	r3, r4
 802309e:	d1fb      	bne.n	8023098 <_malloc_r+0xdc>
 80230a0:	2300      	movs	r3, #0
 80230a2:	6053      	str	r3, [r2, #4]
 80230a4:	e7de      	b.n	8023064 <_malloc_r+0xa8>
 80230a6:	230c      	movs	r3, #12
 80230a8:	6033      	str	r3, [r6, #0]
 80230aa:	4630      	mov	r0, r6
 80230ac:	f000 f80c 	bl	80230c8 <__malloc_unlock>
 80230b0:	e794      	b.n	8022fdc <_malloc_r+0x20>
 80230b2:	6005      	str	r5, [r0, #0]
 80230b4:	e7d6      	b.n	8023064 <_malloc_r+0xa8>
 80230b6:	bf00      	nop
 80230b8:	24025c30 	.word	0x24025c30

080230bc <__malloc_lock>:
 80230bc:	4801      	ldr	r0, [pc, #4]	@ (80230c4 <__malloc_lock+0x8>)
 80230be:	f000 baa2 	b.w	8023606 <__retarget_lock_acquire_recursive>
 80230c2:	bf00      	nop
 80230c4:	24025d74 	.word	0x24025d74

080230c8 <__malloc_unlock>:
 80230c8:	4801      	ldr	r0, [pc, #4]	@ (80230d0 <__malloc_unlock+0x8>)
 80230ca:	f000 ba9d 	b.w	8023608 <__retarget_lock_release_recursive>
 80230ce:	bf00      	nop
 80230d0:	24025d74 	.word	0x24025d74

080230d4 <__cxa_atexit>:
 80230d4:	b510      	push	{r4, lr}
 80230d6:	4604      	mov	r4, r0
 80230d8:	4804      	ldr	r0, [pc, #16]	@ (80230ec <__cxa_atexit+0x18>)
 80230da:	4613      	mov	r3, r2
 80230dc:	b120      	cbz	r0, 80230e8 <__cxa_atexit+0x14>
 80230de:	460a      	mov	r2, r1
 80230e0:	2002      	movs	r0, #2
 80230e2:	4621      	mov	r1, r4
 80230e4:	f000 faa0 	bl	8023628 <__register_exitproc>
 80230e8:	bd10      	pop	{r4, pc}
 80230ea:	bf00      	nop
 80230ec:	08023629 	.word	0x08023629

080230f0 <std>:
 80230f0:	2300      	movs	r3, #0
 80230f2:	b510      	push	{r4, lr}
 80230f4:	4604      	mov	r4, r0
 80230f6:	e9c0 3300 	strd	r3, r3, [r0]
 80230fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80230fe:	6083      	str	r3, [r0, #8]
 8023100:	8181      	strh	r1, [r0, #12]
 8023102:	6643      	str	r3, [r0, #100]	@ 0x64
 8023104:	81c2      	strh	r2, [r0, #14]
 8023106:	6183      	str	r3, [r0, #24]
 8023108:	4619      	mov	r1, r3
 802310a:	2208      	movs	r2, #8
 802310c:	305c      	adds	r0, #92	@ 0x5c
 802310e:	f000 f99b 	bl	8023448 <memset>
 8023112:	4b0d      	ldr	r3, [pc, #52]	@ (8023148 <std+0x58>)
 8023114:	6263      	str	r3, [r4, #36]	@ 0x24
 8023116:	4b0d      	ldr	r3, [pc, #52]	@ (802314c <std+0x5c>)
 8023118:	62a3      	str	r3, [r4, #40]	@ 0x28
 802311a:	4b0d      	ldr	r3, [pc, #52]	@ (8023150 <std+0x60>)
 802311c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802311e:	4b0d      	ldr	r3, [pc, #52]	@ (8023154 <std+0x64>)
 8023120:	6323      	str	r3, [r4, #48]	@ 0x30
 8023122:	4b0d      	ldr	r3, [pc, #52]	@ (8023158 <std+0x68>)
 8023124:	6224      	str	r4, [r4, #32]
 8023126:	429c      	cmp	r4, r3
 8023128:	d006      	beq.n	8023138 <std+0x48>
 802312a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802312e:	4294      	cmp	r4, r2
 8023130:	d002      	beq.n	8023138 <std+0x48>
 8023132:	33d0      	adds	r3, #208	@ 0xd0
 8023134:	429c      	cmp	r4, r3
 8023136:	d105      	bne.n	8023144 <std+0x54>
 8023138:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023140:	f000 ba60 	b.w	8023604 <__retarget_lock_init_recursive>
 8023144:	bd10      	pop	{r4, pc}
 8023146:	bf00      	nop
 8023148:	08023299 	.word	0x08023299
 802314c:	080232bb 	.word	0x080232bb
 8023150:	080232f3 	.word	0x080232f3
 8023154:	08023317 	.word	0x08023317
 8023158:	24025c34 	.word	0x24025c34

0802315c <stdio_exit_handler>:
 802315c:	4a02      	ldr	r2, [pc, #8]	@ (8023168 <stdio_exit_handler+0xc>)
 802315e:	4903      	ldr	r1, [pc, #12]	@ (802316c <stdio_exit_handler+0x10>)
 8023160:	4803      	ldr	r0, [pc, #12]	@ (8023170 <stdio_exit_handler+0x14>)
 8023162:	f000 b87b 	b.w	802325c <_fwalk_sglue>
 8023166:	bf00      	nop
 8023168:	240000dc 	.word	0x240000dc
 802316c:	08023e19 	.word	0x08023e19
 8023170:	240000ec 	.word	0x240000ec

08023174 <cleanup_stdio>:
 8023174:	6841      	ldr	r1, [r0, #4]
 8023176:	4b0c      	ldr	r3, [pc, #48]	@ (80231a8 <cleanup_stdio+0x34>)
 8023178:	4299      	cmp	r1, r3
 802317a:	b510      	push	{r4, lr}
 802317c:	4604      	mov	r4, r0
 802317e:	d001      	beq.n	8023184 <cleanup_stdio+0x10>
 8023180:	f000 fe4a 	bl	8023e18 <_fflush_r>
 8023184:	68a1      	ldr	r1, [r4, #8]
 8023186:	4b09      	ldr	r3, [pc, #36]	@ (80231ac <cleanup_stdio+0x38>)
 8023188:	4299      	cmp	r1, r3
 802318a:	d002      	beq.n	8023192 <cleanup_stdio+0x1e>
 802318c:	4620      	mov	r0, r4
 802318e:	f000 fe43 	bl	8023e18 <_fflush_r>
 8023192:	68e1      	ldr	r1, [r4, #12]
 8023194:	4b06      	ldr	r3, [pc, #24]	@ (80231b0 <cleanup_stdio+0x3c>)
 8023196:	4299      	cmp	r1, r3
 8023198:	d004      	beq.n	80231a4 <cleanup_stdio+0x30>
 802319a:	4620      	mov	r0, r4
 802319c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231a0:	f000 be3a 	b.w	8023e18 <_fflush_r>
 80231a4:	bd10      	pop	{r4, pc}
 80231a6:	bf00      	nop
 80231a8:	24025c34 	.word	0x24025c34
 80231ac:	24025c9c 	.word	0x24025c9c
 80231b0:	24025d04 	.word	0x24025d04

080231b4 <global_stdio_init.part.0>:
 80231b4:	b510      	push	{r4, lr}
 80231b6:	4b0b      	ldr	r3, [pc, #44]	@ (80231e4 <global_stdio_init.part.0+0x30>)
 80231b8:	4c0b      	ldr	r4, [pc, #44]	@ (80231e8 <global_stdio_init.part.0+0x34>)
 80231ba:	4a0c      	ldr	r2, [pc, #48]	@ (80231ec <global_stdio_init.part.0+0x38>)
 80231bc:	601a      	str	r2, [r3, #0]
 80231be:	4620      	mov	r0, r4
 80231c0:	2200      	movs	r2, #0
 80231c2:	2104      	movs	r1, #4
 80231c4:	f7ff ff94 	bl	80230f0 <std>
 80231c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80231cc:	2201      	movs	r2, #1
 80231ce:	2109      	movs	r1, #9
 80231d0:	f7ff ff8e 	bl	80230f0 <std>
 80231d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80231d8:	2202      	movs	r2, #2
 80231da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231de:	2112      	movs	r1, #18
 80231e0:	f7ff bf86 	b.w	80230f0 <std>
 80231e4:	24025d6c 	.word	0x24025d6c
 80231e8:	24025c34 	.word	0x24025c34
 80231ec:	0802315d 	.word	0x0802315d

080231f0 <__sfp_lock_acquire>:
 80231f0:	4801      	ldr	r0, [pc, #4]	@ (80231f8 <__sfp_lock_acquire+0x8>)
 80231f2:	f000 ba08 	b.w	8023606 <__retarget_lock_acquire_recursive>
 80231f6:	bf00      	nop
 80231f8:	24025d76 	.word	0x24025d76

080231fc <__sfp_lock_release>:
 80231fc:	4801      	ldr	r0, [pc, #4]	@ (8023204 <__sfp_lock_release+0x8>)
 80231fe:	f000 ba03 	b.w	8023608 <__retarget_lock_release_recursive>
 8023202:	bf00      	nop
 8023204:	24025d76 	.word	0x24025d76

08023208 <__sinit>:
 8023208:	b510      	push	{r4, lr}
 802320a:	4604      	mov	r4, r0
 802320c:	f7ff fff0 	bl	80231f0 <__sfp_lock_acquire>
 8023210:	6a23      	ldr	r3, [r4, #32]
 8023212:	b11b      	cbz	r3, 802321c <__sinit+0x14>
 8023214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023218:	f7ff bff0 	b.w	80231fc <__sfp_lock_release>
 802321c:	4b04      	ldr	r3, [pc, #16]	@ (8023230 <__sinit+0x28>)
 802321e:	6223      	str	r3, [r4, #32]
 8023220:	4b04      	ldr	r3, [pc, #16]	@ (8023234 <__sinit+0x2c>)
 8023222:	681b      	ldr	r3, [r3, #0]
 8023224:	2b00      	cmp	r3, #0
 8023226:	d1f5      	bne.n	8023214 <__sinit+0xc>
 8023228:	f7ff ffc4 	bl	80231b4 <global_stdio_init.part.0>
 802322c:	e7f2      	b.n	8023214 <__sinit+0xc>
 802322e:	bf00      	nop
 8023230:	08023175 	.word	0x08023175
 8023234:	24025d6c 	.word	0x24025d6c

08023238 <fiprintf>:
 8023238:	b40e      	push	{r1, r2, r3}
 802323a:	b503      	push	{r0, r1, lr}
 802323c:	4601      	mov	r1, r0
 802323e:	ab03      	add	r3, sp, #12
 8023240:	4805      	ldr	r0, [pc, #20]	@ (8023258 <fiprintf+0x20>)
 8023242:	f853 2b04 	ldr.w	r2, [r3], #4
 8023246:	6800      	ldr	r0, [r0, #0]
 8023248:	9301      	str	r3, [sp, #4]
 802324a:	f000 fabd 	bl	80237c8 <_vfiprintf_r>
 802324e:	b002      	add	sp, #8
 8023250:	f85d eb04 	ldr.w	lr, [sp], #4
 8023254:	b003      	add	sp, #12
 8023256:	4770      	bx	lr
 8023258:	240000e8 	.word	0x240000e8

0802325c <_fwalk_sglue>:
 802325c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023260:	4607      	mov	r7, r0
 8023262:	4688      	mov	r8, r1
 8023264:	4614      	mov	r4, r2
 8023266:	2600      	movs	r6, #0
 8023268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802326c:	f1b9 0901 	subs.w	r9, r9, #1
 8023270:	d505      	bpl.n	802327e <_fwalk_sglue+0x22>
 8023272:	6824      	ldr	r4, [r4, #0]
 8023274:	2c00      	cmp	r4, #0
 8023276:	d1f7      	bne.n	8023268 <_fwalk_sglue+0xc>
 8023278:	4630      	mov	r0, r6
 802327a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802327e:	89ab      	ldrh	r3, [r5, #12]
 8023280:	2b01      	cmp	r3, #1
 8023282:	d907      	bls.n	8023294 <_fwalk_sglue+0x38>
 8023284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023288:	3301      	adds	r3, #1
 802328a:	d003      	beq.n	8023294 <_fwalk_sglue+0x38>
 802328c:	4629      	mov	r1, r5
 802328e:	4638      	mov	r0, r7
 8023290:	47c0      	blx	r8
 8023292:	4306      	orrs	r6, r0
 8023294:	3568      	adds	r5, #104	@ 0x68
 8023296:	e7e9      	b.n	802326c <_fwalk_sglue+0x10>

08023298 <__sread>:
 8023298:	b510      	push	{r4, lr}
 802329a:	460c      	mov	r4, r1
 802329c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232a0:	f000 f93e 	bl	8023520 <_read_r>
 80232a4:	2800      	cmp	r0, #0
 80232a6:	bfab      	itete	ge
 80232a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80232aa:	89a3      	ldrhlt	r3, [r4, #12]
 80232ac:	181b      	addge	r3, r3, r0
 80232ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80232b2:	bfac      	ite	ge
 80232b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80232b6:	81a3      	strhlt	r3, [r4, #12]
 80232b8:	bd10      	pop	{r4, pc}

080232ba <__swrite>:
 80232ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232be:	461f      	mov	r7, r3
 80232c0:	898b      	ldrh	r3, [r1, #12]
 80232c2:	05db      	lsls	r3, r3, #23
 80232c4:	4605      	mov	r5, r0
 80232c6:	460c      	mov	r4, r1
 80232c8:	4616      	mov	r6, r2
 80232ca:	d505      	bpl.n	80232d8 <__swrite+0x1e>
 80232cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232d0:	2302      	movs	r3, #2
 80232d2:	2200      	movs	r2, #0
 80232d4:	f000 f912 	bl	80234fc <_lseek_r>
 80232d8:	89a3      	ldrh	r3, [r4, #12]
 80232da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80232de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80232e2:	81a3      	strh	r3, [r4, #12]
 80232e4:	4632      	mov	r2, r6
 80232e6:	463b      	mov	r3, r7
 80232e8:	4628      	mov	r0, r5
 80232ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80232ee:	f000 b94d 	b.w	802358c <_write_r>

080232f2 <__sseek>:
 80232f2:	b510      	push	{r4, lr}
 80232f4:	460c      	mov	r4, r1
 80232f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232fa:	f000 f8ff 	bl	80234fc <_lseek_r>
 80232fe:	1c43      	adds	r3, r0, #1
 8023300:	89a3      	ldrh	r3, [r4, #12]
 8023302:	bf15      	itete	ne
 8023304:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802330a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802330e:	81a3      	strheq	r3, [r4, #12]
 8023310:	bf18      	it	ne
 8023312:	81a3      	strhne	r3, [r4, #12]
 8023314:	bd10      	pop	{r4, pc}

08023316 <__sclose>:
 8023316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802331a:	f000 b8df 	b.w	80234dc <_close_r>

0802331e <__swbuf_r>:
 802331e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023320:	460e      	mov	r6, r1
 8023322:	4614      	mov	r4, r2
 8023324:	4605      	mov	r5, r0
 8023326:	b118      	cbz	r0, 8023330 <__swbuf_r+0x12>
 8023328:	6a03      	ldr	r3, [r0, #32]
 802332a:	b90b      	cbnz	r3, 8023330 <__swbuf_r+0x12>
 802332c:	f7ff ff6c 	bl	8023208 <__sinit>
 8023330:	69a3      	ldr	r3, [r4, #24]
 8023332:	60a3      	str	r3, [r4, #8]
 8023334:	89a3      	ldrh	r3, [r4, #12]
 8023336:	071a      	lsls	r2, r3, #28
 8023338:	d501      	bpl.n	802333e <__swbuf_r+0x20>
 802333a:	6923      	ldr	r3, [r4, #16]
 802333c:	b943      	cbnz	r3, 8023350 <__swbuf_r+0x32>
 802333e:	4621      	mov	r1, r4
 8023340:	4628      	mov	r0, r5
 8023342:	f000 f82b 	bl	802339c <__swsetup_r>
 8023346:	b118      	cbz	r0, 8023350 <__swbuf_r+0x32>
 8023348:	f04f 37ff 	mov.w	r7, #4294967295
 802334c:	4638      	mov	r0, r7
 802334e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023350:	6823      	ldr	r3, [r4, #0]
 8023352:	6922      	ldr	r2, [r4, #16]
 8023354:	1a98      	subs	r0, r3, r2
 8023356:	6963      	ldr	r3, [r4, #20]
 8023358:	b2f6      	uxtb	r6, r6
 802335a:	4283      	cmp	r3, r0
 802335c:	4637      	mov	r7, r6
 802335e:	dc05      	bgt.n	802336c <__swbuf_r+0x4e>
 8023360:	4621      	mov	r1, r4
 8023362:	4628      	mov	r0, r5
 8023364:	f000 fd58 	bl	8023e18 <_fflush_r>
 8023368:	2800      	cmp	r0, #0
 802336a:	d1ed      	bne.n	8023348 <__swbuf_r+0x2a>
 802336c:	68a3      	ldr	r3, [r4, #8]
 802336e:	3b01      	subs	r3, #1
 8023370:	60a3      	str	r3, [r4, #8]
 8023372:	6823      	ldr	r3, [r4, #0]
 8023374:	1c5a      	adds	r2, r3, #1
 8023376:	6022      	str	r2, [r4, #0]
 8023378:	701e      	strb	r6, [r3, #0]
 802337a:	6962      	ldr	r2, [r4, #20]
 802337c:	1c43      	adds	r3, r0, #1
 802337e:	429a      	cmp	r2, r3
 8023380:	d004      	beq.n	802338c <__swbuf_r+0x6e>
 8023382:	89a3      	ldrh	r3, [r4, #12]
 8023384:	07db      	lsls	r3, r3, #31
 8023386:	d5e1      	bpl.n	802334c <__swbuf_r+0x2e>
 8023388:	2e0a      	cmp	r6, #10
 802338a:	d1df      	bne.n	802334c <__swbuf_r+0x2e>
 802338c:	4621      	mov	r1, r4
 802338e:	4628      	mov	r0, r5
 8023390:	f000 fd42 	bl	8023e18 <_fflush_r>
 8023394:	2800      	cmp	r0, #0
 8023396:	d0d9      	beq.n	802334c <__swbuf_r+0x2e>
 8023398:	e7d6      	b.n	8023348 <__swbuf_r+0x2a>
	...

0802339c <__swsetup_r>:
 802339c:	b538      	push	{r3, r4, r5, lr}
 802339e:	4b29      	ldr	r3, [pc, #164]	@ (8023444 <__swsetup_r+0xa8>)
 80233a0:	4605      	mov	r5, r0
 80233a2:	6818      	ldr	r0, [r3, #0]
 80233a4:	460c      	mov	r4, r1
 80233a6:	b118      	cbz	r0, 80233b0 <__swsetup_r+0x14>
 80233a8:	6a03      	ldr	r3, [r0, #32]
 80233aa:	b90b      	cbnz	r3, 80233b0 <__swsetup_r+0x14>
 80233ac:	f7ff ff2c 	bl	8023208 <__sinit>
 80233b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80233b4:	0719      	lsls	r1, r3, #28
 80233b6:	d422      	bmi.n	80233fe <__swsetup_r+0x62>
 80233b8:	06da      	lsls	r2, r3, #27
 80233ba:	d407      	bmi.n	80233cc <__swsetup_r+0x30>
 80233bc:	2209      	movs	r2, #9
 80233be:	602a      	str	r2, [r5, #0]
 80233c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80233c4:	81a3      	strh	r3, [r4, #12]
 80233c6:	f04f 30ff 	mov.w	r0, #4294967295
 80233ca:	e033      	b.n	8023434 <__swsetup_r+0x98>
 80233cc:	0758      	lsls	r0, r3, #29
 80233ce:	d512      	bpl.n	80233f6 <__swsetup_r+0x5a>
 80233d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80233d2:	b141      	cbz	r1, 80233e6 <__swsetup_r+0x4a>
 80233d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80233d8:	4299      	cmp	r1, r3
 80233da:	d002      	beq.n	80233e2 <__swsetup_r+0x46>
 80233dc:	4628      	mov	r0, r5
 80233de:	f000 f97f 	bl	80236e0 <_free_r>
 80233e2:	2300      	movs	r3, #0
 80233e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80233e6:	89a3      	ldrh	r3, [r4, #12]
 80233e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80233ec:	81a3      	strh	r3, [r4, #12]
 80233ee:	2300      	movs	r3, #0
 80233f0:	6063      	str	r3, [r4, #4]
 80233f2:	6923      	ldr	r3, [r4, #16]
 80233f4:	6023      	str	r3, [r4, #0]
 80233f6:	89a3      	ldrh	r3, [r4, #12]
 80233f8:	f043 0308 	orr.w	r3, r3, #8
 80233fc:	81a3      	strh	r3, [r4, #12]
 80233fe:	6923      	ldr	r3, [r4, #16]
 8023400:	b94b      	cbnz	r3, 8023416 <__swsetup_r+0x7a>
 8023402:	89a3      	ldrh	r3, [r4, #12]
 8023404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802340c:	d003      	beq.n	8023416 <__swsetup_r+0x7a>
 802340e:	4621      	mov	r1, r4
 8023410:	4628      	mov	r0, r5
 8023412:	f000 fd4f 	bl	8023eb4 <__smakebuf_r>
 8023416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802341a:	f013 0201 	ands.w	r2, r3, #1
 802341e:	d00a      	beq.n	8023436 <__swsetup_r+0x9a>
 8023420:	2200      	movs	r2, #0
 8023422:	60a2      	str	r2, [r4, #8]
 8023424:	6962      	ldr	r2, [r4, #20]
 8023426:	4252      	negs	r2, r2
 8023428:	61a2      	str	r2, [r4, #24]
 802342a:	6922      	ldr	r2, [r4, #16]
 802342c:	b942      	cbnz	r2, 8023440 <__swsetup_r+0xa4>
 802342e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8023432:	d1c5      	bne.n	80233c0 <__swsetup_r+0x24>
 8023434:	bd38      	pop	{r3, r4, r5, pc}
 8023436:	0799      	lsls	r1, r3, #30
 8023438:	bf58      	it	pl
 802343a:	6962      	ldrpl	r2, [r4, #20]
 802343c:	60a2      	str	r2, [r4, #8]
 802343e:	e7f4      	b.n	802342a <__swsetup_r+0x8e>
 8023440:	2000      	movs	r0, #0
 8023442:	e7f7      	b.n	8023434 <__swsetup_r+0x98>
 8023444:	240000e8 	.word	0x240000e8

08023448 <memset>:
 8023448:	4402      	add	r2, r0
 802344a:	4603      	mov	r3, r0
 802344c:	4293      	cmp	r3, r2
 802344e:	d100      	bne.n	8023452 <memset+0xa>
 8023450:	4770      	bx	lr
 8023452:	f803 1b01 	strb.w	r1, [r3], #1
 8023456:	e7f9      	b.n	802344c <memset+0x4>

08023458 <strncmp>:
 8023458:	b510      	push	{r4, lr}
 802345a:	b16a      	cbz	r2, 8023478 <strncmp+0x20>
 802345c:	3901      	subs	r1, #1
 802345e:	1884      	adds	r4, r0, r2
 8023460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023464:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023468:	429a      	cmp	r2, r3
 802346a:	d103      	bne.n	8023474 <strncmp+0x1c>
 802346c:	42a0      	cmp	r0, r4
 802346e:	d001      	beq.n	8023474 <strncmp+0x1c>
 8023470:	2a00      	cmp	r2, #0
 8023472:	d1f5      	bne.n	8023460 <strncmp+0x8>
 8023474:	1ad0      	subs	r0, r2, r3
 8023476:	bd10      	pop	{r4, pc}
 8023478:	4610      	mov	r0, r2
 802347a:	e7fc      	b.n	8023476 <strncmp+0x1e>

0802347c <_raise_r>:
 802347c:	291f      	cmp	r1, #31
 802347e:	b538      	push	{r3, r4, r5, lr}
 8023480:	4605      	mov	r5, r0
 8023482:	460c      	mov	r4, r1
 8023484:	d904      	bls.n	8023490 <_raise_r+0x14>
 8023486:	2316      	movs	r3, #22
 8023488:	6003      	str	r3, [r0, #0]
 802348a:	f04f 30ff 	mov.w	r0, #4294967295
 802348e:	bd38      	pop	{r3, r4, r5, pc}
 8023490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023492:	b112      	cbz	r2, 802349a <_raise_r+0x1e>
 8023494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023498:	b94b      	cbnz	r3, 80234ae <_raise_r+0x32>
 802349a:	4628      	mov	r0, r5
 802349c:	f000 f864 	bl	8023568 <_getpid_r>
 80234a0:	4622      	mov	r2, r4
 80234a2:	4601      	mov	r1, r0
 80234a4:	4628      	mov	r0, r5
 80234a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80234aa:	f000 b84b 	b.w	8023544 <_kill_r>
 80234ae:	2b01      	cmp	r3, #1
 80234b0:	d00a      	beq.n	80234c8 <_raise_r+0x4c>
 80234b2:	1c59      	adds	r1, r3, #1
 80234b4:	d103      	bne.n	80234be <_raise_r+0x42>
 80234b6:	2316      	movs	r3, #22
 80234b8:	6003      	str	r3, [r0, #0]
 80234ba:	2001      	movs	r0, #1
 80234bc:	e7e7      	b.n	802348e <_raise_r+0x12>
 80234be:	2100      	movs	r1, #0
 80234c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80234c4:	4620      	mov	r0, r4
 80234c6:	4798      	blx	r3
 80234c8:	2000      	movs	r0, #0
 80234ca:	e7e0      	b.n	802348e <_raise_r+0x12>

080234cc <raise>:
 80234cc:	4b02      	ldr	r3, [pc, #8]	@ (80234d8 <raise+0xc>)
 80234ce:	4601      	mov	r1, r0
 80234d0:	6818      	ldr	r0, [r3, #0]
 80234d2:	f7ff bfd3 	b.w	802347c <_raise_r>
 80234d6:	bf00      	nop
 80234d8:	240000e8 	.word	0x240000e8

080234dc <_close_r>:
 80234dc:	b538      	push	{r3, r4, r5, lr}
 80234de:	4d06      	ldr	r5, [pc, #24]	@ (80234f8 <_close_r+0x1c>)
 80234e0:	2300      	movs	r3, #0
 80234e2:	4604      	mov	r4, r0
 80234e4:	4608      	mov	r0, r1
 80234e6:	602b      	str	r3, [r5, #0]
 80234e8:	f7de f96e 	bl	80017c8 <_close>
 80234ec:	1c43      	adds	r3, r0, #1
 80234ee:	d102      	bne.n	80234f6 <_close_r+0x1a>
 80234f0:	682b      	ldr	r3, [r5, #0]
 80234f2:	b103      	cbz	r3, 80234f6 <_close_r+0x1a>
 80234f4:	6023      	str	r3, [r4, #0]
 80234f6:	bd38      	pop	{r3, r4, r5, pc}
 80234f8:	24025d70 	.word	0x24025d70

080234fc <_lseek_r>:
 80234fc:	b538      	push	{r3, r4, r5, lr}
 80234fe:	4d07      	ldr	r5, [pc, #28]	@ (802351c <_lseek_r+0x20>)
 8023500:	4604      	mov	r4, r0
 8023502:	4608      	mov	r0, r1
 8023504:	4611      	mov	r1, r2
 8023506:	2200      	movs	r2, #0
 8023508:	602a      	str	r2, [r5, #0]
 802350a:	461a      	mov	r2, r3
 802350c:	f7de f966 	bl	80017dc <_lseek>
 8023510:	1c43      	adds	r3, r0, #1
 8023512:	d102      	bne.n	802351a <_lseek_r+0x1e>
 8023514:	682b      	ldr	r3, [r5, #0]
 8023516:	b103      	cbz	r3, 802351a <_lseek_r+0x1e>
 8023518:	6023      	str	r3, [r4, #0]
 802351a:	bd38      	pop	{r3, r4, r5, pc}
 802351c:	24025d70 	.word	0x24025d70

08023520 <_read_r>:
 8023520:	b538      	push	{r3, r4, r5, lr}
 8023522:	4d07      	ldr	r5, [pc, #28]	@ (8023540 <_read_r+0x20>)
 8023524:	4604      	mov	r4, r0
 8023526:	4608      	mov	r0, r1
 8023528:	4611      	mov	r1, r2
 802352a:	2200      	movs	r2, #0
 802352c:	602a      	str	r2, [r5, #0]
 802352e:	461a      	mov	r2, r3
 8023530:	f7de f92e 	bl	8001790 <_read>
 8023534:	1c43      	adds	r3, r0, #1
 8023536:	d102      	bne.n	802353e <_read_r+0x1e>
 8023538:	682b      	ldr	r3, [r5, #0]
 802353a:	b103      	cbz	r3, 802353e <_read_r+0x1e>
 802353c:	6023      	str	r3, [r4, #0]
 802353e:	bd38      	pop	{r3, r4, r5, pc}
 8023540:	24025d70 	.word	0x24025d70

08023544 <_kill_r>:
 8023544:	b538      	push	{r3, r4, r5, lr}
 8023546:	4d07      	ldr	r5, [pc, #28]	@ (8023564 <_kill_r+0x20>)
 8023548:	2300      	movs	r3, #0
 802354a:	4604      	mov	r4, r0
 802354c:	4608      	mov	r0, r1
 802354e:	4611      	mov	r1, r2
 8023550:	602b      	str	r3, [r5, #0]
 8023552:	f7de f90f 	bl	8001774 <_kill>
 8023556:	1c43      	adds	r3, r0, #1
 8023558:	d102      	bne.n	8023560 <_kill_r+0x1c>
 802355a:	682b      	ldr	r3, [r5, #0]
 802355c:	b103      	cbz	r3, 8023560 <_kill_r+0x1c>
 802355e:	6023      	str	r3, [r4, #0]
 8023560:	bd38      	pop	{r3, r4, r5, pc}
 8023562:	bf00      	nop
 8023564:	24025d70 	.word	0x24025d70

08023568 <_getpid_r>:
 8023568:	f7de b902 	b.w	8001770 <_getpid>

0802356c <_sbrk_r>:
 802356c:	b538      	push	{r3, r4, r5, lr}
 802356e:	4d06      	ldr	r5, [pc, #24]	@ (8023588 <_sbrk_r+0x1c>)
 8023570:	2300      	movs	r3, #0
 8023572:	4604      	mov	r4, r0
 8023574:	4608      	mov	r0, r1
 8023576:	602b      	str	r3, [r5, #0]
 8023578:	f7de f932 	bl	80017e0 <_sbrk>
 802357c:	1c43      	adds	r3, r0, #1
 802357e:	d102      	bne.n	8023586 <_sbrk_r+0x1a>
 8023580:	682b      	ldr	r3, [r5, #0]
 8023582:	b103      	cbz	r3, 8023586 <_sbrk_r+0x1a>
 8023584:	6023      	str	r3, [r4, #0]
 8023586:	bd38      	pop	{r3, r4, r5, pc}
 8023588:	24025d70 	.word	0x24025d70

0802358c <_write_r>:
 802358c:	b538      	push	{r3, r4, r5, lr}
 802358e:	4d07      	ldr	r5, [pc, #28]	@ (80235ac <_write_r+0x20>)
 8023590:	4604      	mov	r4, r0
 8023592:	4608      	mov	r0, r1
 8023594:	4611      	mov	r1, r2
 8023596:	2200      	movs	r2, #0
 8023598:	602a      	str	r2, [r5, #0]
 802359a:	461a      	mov	r2, r3
 802359c:	f7de f906 	bl	80017ac <_write>
 80235a0:	1c43      	adds	r3, r0, #1
 80235a2:	d102      	bne.n	80235aa <_write_r+0x1e>
 80235a4:	682b      	ldr	r3, [r5, #0]
 80235a6:	b103      	cbz	r3, 80235aa <_write_r+0x1e>
 80235a8:	6023      	str	r3, [r4, #0]
 80235aa:	bd38      	pop	{r3, r4, r5, pc}
 80235ac:	24025d70 	.word	0x24025d70

080235b0 <__errno>:
 80235b0:	4b01      	ldr	r3, [pc, #4]	@ (80235b8 <__errno+0x8>)
 80235b2:	6818      	ldr	r0, [r3, #0]
 80235b4:	4770      	bx	lr
 80235b6:	bf00      	nop
 80235b8:	240000e8 	.word	0x240000e8

080235bc <__libc_init_array>:
 80235bc:	b570      	push	{r4, r5, r6, lr}
 80235be:	4d0d      	ldr	r5, [pc, #52]	@ (80235f4 <__libc_init_array+0x38>)
 80235c0:	4c0d      	ldr	r4, [pc, #52]	@ (80235f8 <__libc_init_array+0x3c>)
 80235c2:	1b64      	subs	r4, r4, r5
 80235c4:	10a4      	asrs	r4, r4, #2
 80235c6:	2600      	movs	r6, #0
 80235c8:	42a6      	cmp	r6, r4
 80235ca:	d109      	bne.n	80235e0 <__libc_init_array+0x24>
 80235cc:	4d0b      	ldr	r5, [pc, #44]	@ (80235fc <__libc_init_array+0x40>)
 80235ce:	4c0c      	ldr	r4, [pc, #48]	@ (8023600 <__libc_init_array+0x44>)
 80235d0:	f000 fcce 	bl	8023f70 <_init>
 80235d4:	1b64      	subs	r4, r4, r5
 80235d6:	10a4      	asrs	r4, r4, #2
 80235d8:	2600      	movs	r6, #0
 80235da:	42a6      	cmp	r6, r4
 80235dc:	d105      	bne.n	80235ea <__libc_init_array+0x2e>
 80235de:	bd70      	pop	{r4, r5, r6, pc}
 80235e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80235e4:	4798      	blx	r3
 80235e6:	3601      	adds	r6, #1
 80235e8:	e7ee      	b.n	80235c8 <__libc_init_array+0xc>
 80235ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80235ee:	4798      	blx	r3
 80235f0:	3601      	adds	r6, #1
 80235f2:	e7f2      	b.n	80235da <__libc_init_array+0x1e>
 80235f4:	080294c0 	.word	0x080294c0
 80235f8:	080294c0 	.word	0x080294c0
 80235fc:	080294c0 	.word	0x080294c0
 8023600:	080294dc 	.word	0x080294dc

08023604 <__retarget_lock_init_recursive>:
 8023604:	4770      	bx	lr

08023606 <__retarget_lock_acquire_recursive>:
 8023606:	4770      	bx	lr

08023608 <__retarget_lock_release_recursive>:
 8023608:	4770      	bx	lr

0802360a <memcpy>:
 802360a:	440a      	add	r2, r1
 802360c:	4291      	cmp	r1, r2
 802360e:	f100 33ff 	add.w	r3, r0, #4294967295
 8023612:	d100      	bne.n	8023616 <memcpy+0xc>
 8023614:	4770      	bx	lr
 8023616:	b510      	push	{r4, lr}
 8023618:	f811 4b01 	ldrb.w	r4, [r1], #1
 802361c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023620:	4291      	cmp	r1, r2
 8023622:	d1f9      	bne.n	8023618 <memcpy+0xe>
 8023624:	bd10      	pop	{r4, pc}
	...

08023628 <__register_exitproc>:
 8023628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802362c:	4d27      	ldr	r5, [pc, #156]	@ (80236cc <__register_exitproc+0xa4>)
 802362e:	4607      	mov	r7, r0
 8023630:	6828      	ldr	r0, [r5, #0]
 8023632:	4691      	mov	r9, r2
 8023634:	460e      	mov	r6, r1
 8023636:	4698      	mov	r8, r3
 8023638:	f7ff ffe5 	bl	8023606 <__retarget_lock_acquire_recursive>
 802363c:	4a24      	ldr	r2, [pc, #144]	@ (80236d0 <__register_exitproc+0xa8>)
 802363e:	6814      	ldr	r4, [r2, #0]
 8023640:	b93c      	cbnz	r4, 8023652 <__register_exitproc+0x2a>
 8023642:	4b24      	ldr	r3, [pc, #144]	@ (80236d4 <__register_exitproc+0xac>)
 8023644:	6013      	str	r3, [r2, #0]
 8023646:	4a24      	ldr	r2, [pc, #144]	@ (80236d8 <__register_exitproc+0xb0>)
 8023648:	b112      	cbz	r2, 8023650 <__register_exitproc+0x28>
 802364a:	6812      	ldr	r2, [r2, #0]
 802364c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8023650:	4c20      	ldr	r4, [pc, #128]	@ (80236d4 <__register_exitproc+0xac>)
 8023652:	6863      	ldr	r3, [r4, #4]
 8023654:	2b1f      	cmp	r3, #31
 8023656:	dd06      	ble.n	8023666 <__register_exitproc+0x3e>
 8023658:	6828      	ldr	r0, [r5, #0]
 802365a:	f7ff ffd5 	bl	8023608 <__retarget_lock_release_recursive>
 802365e:	f04f 30ff 	mov.w	r0, #4294967295
 8023662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023666:	b32f      	cbz	r7, 80236b4 <__register_exitproc+0x8c>
 8023668:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802366c:	b968      	cbnz	r0, 802368a <__register_exitproc+0x62>
 802366e:	4b1b      	ldr	r3, [pc, #108]	@ (80236dc <__register_exitproc+0xb4>)
 8023670:	2b00      	cmp	r3, #0
 8023672:	d0f1      	beq.n	8023658 <__register_exitproc+0x30>
 8023674:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8023678:	f7ff fc6e 	bl	8022f58 <malloc>
 802367c:	2800      	cmp	r0, #0
 802367e:	d0eb      	beq.n	8023658 <__register_exitproc+0x30>
 8023680:	2300      	movs	r3, #0
 8023682:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8023686:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802368a:	6863      	ldr	r3, [r4, #4]
 802368c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023690:	2201      	movs	r2, #1
 8023692:	409a      	lsls	r2, r3
 8023694:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023698:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802369c:	4313      	orrs	r3, r2
 802369e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80236a2:	2f02      	cmp	r7, #2
 80236a4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80236a8:	bf02      	ittt	eq
 80236aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80236ae:	4313      	orreq	r3, r2
 80236b0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80236b4:	6863      	ldr	r3, [r4, #4]
 80236b6:	6828      	ldr	r0, [r5, #0]
 80236b8:	1c5a      	adds	r2, r3, #1
 80236ba:	3302      	adds	r3, #2
 80236bc:	6062      	str	r2, [r4, #4]
 80236be:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80236c2:	f7ff ffa1 	bl	8023608 <__retarget_lock_release_recursive>
 80236c6:	2000      	movs	r0, #0
 80236c8:	e7cb      	b.n	8023662 <__register_exitproc+0x3a>
 80236ca:	bf00      	nop
 80236cc:	24000138 	.word	0x24000138
 80236d0:	24025e04 	.word	0x24025e04
 80236d4:	24025d78 	.word	0x24025d78
 80236d8:	08027198 	.word	0x08027198
 80236dc:	08022f59 	.word	0x08022f59

080236e0 <_free_r>:
 80236e0:	b538      	push	{r3, r4, r5, lr}
 80236e2:	4605      	mov	r5, r0
 80236e4:	2900      	cmp	r1, #0
 80236e6:	d041      	beq.n	802376c <_free_r+0x8c>
 80236e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80236ec:	1f0c      	subs	r4, r1, #4
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	bfb8      	it	lt
 80236f2:	18e4      	addlt	r4, r4, r3
 80236f4:	f7ff fce2 	bl	80230bc <__malloc_lock>
 80236f8:	4a1d      	ldr	r2, [pc, #116]	@ (8023770 <_free_r+0x90>)
 80236fa:	6813      	ldr	r3, [r2, #0]
 80236fc:	b933      	cbnz	r3, 802370c <_free_r+0x2c>
 80236fe:	6063      	str	r3, [r4, #4]
 8023700:	6014      	str	r4, [r2, #0]
 8023702:	4628      	mov	r0, r5
 8023704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023708:	f7ff bcde 	b.w	80230c8 <__malloc_unlock>
 802370c:	42a3      	cmp	r3, r4
 802370e:	d908      	bls.n	8023722 <_free_r+0x42>
 8023710:	6820      	ldr	r0, [r4, #0]
 8023712:	1821      	adds	r1, r4, r0
 8023714:	428b      	cmp	r3, r1
 8023716:	bf01      	itttt	eq
 8023718:	6819      	ldreq	r1, [r3, #0]
 802371a:	685b      	ldreq	r3, [r3, #4]
 802371c:	1809      	addeq	r1, r1, r0
 802371e:	6021      	streq	r1, [r4, #0]
 8023720:	e7ed      	b.n	80236fe <_free_r+0x1e>
 8023722:	461a      	mov	r2, r3
 8023724:	685b      	ldr	r3, [r3, #4]
 8023726:	b10b      	cbz	r3, 802372c <_free_r+0x4c>
 8023728:	42a3      	cmp	r3, r4
 802372a:	d9fa      	bls.n	8023722 <_free_r+0x42>
 802372c:	6811      	ldr	r1, [r2, #0]
 802372e:	1850      	adds	r0, r2, r1
 8023730:	42a0      	cmp	r0, r4
 8023732:	d10b      	bne.n	802374c <_free_r+0x6c>
 8023734:	6820      	ldr	r0, [r4, #0]
 8023736:	4401      	add	r1, r0
 8023738:	1850      	adds	r0, r2, r1
 802373a:	4283      	cmp	r3, r0
 802373c:	6011      	str	r1, [r2, #0]
 802373e:	d1e0      	bne.n	8023702 <_free_r+0x22>
 8023740:	6818      	ldr	r0, [r3, #0]
 8023742:	685b      	ldr	r3, [r3, #4]
 8023744:	6053      	str	r3, [r2, #4]
 8023746:	4408      	add	r0, r1
 8023748:	6010      	str	r0, [r2, #0]
 802374a:	e7da      	b.n	8023702 <_free_r+0x22>
 802374c:	d902      	bls.n	8023754 <_free_r+0x74>
 802374e:	230c      	movs	r3, #12
 8023750:	602b      	str	r3, [r5, #0]
 8023752:	e7d6      	b.n	8023702 <_free_r+0x22>
 8023754:	6820      	ldr	r0, [r4, #0]
 8023756:	1821      	adds	r1, r4, r0
 8023758:	428b      	cmp	r3, r1
 802375a:	bf04      	itt	eq
 802375c:	6819      	ldreq	r1, [r3, #0]
 802375e:	685b      	ldreq	r3, [r3, #4]
 8023760:	6063      	str	r3, [r4, #4]
 8023762:	bf04      	itt	eq
 8023764:	1809      	addeq	r1, r1, r0
 8023766:	6021      	streq	r1, [r4, #0]
 8023768:	6054      	str	r4, [r2, #4]
 802376a:	e7ca      	b.n	8023702 <_free_r+0x22>
 802376c:	bd38      	pop	{r3, r4, r5, pc}
 802376e:	bf00      	nop
 8023770:	24025c30 	.word	0x24025c30

08023774 <__sfputc_r>:
 8023774:	6893      	ldr	r3, [r2, #8]
 8023776:	3b01      	subs	r3, #1
 8023778:	2b00      	cmp	r3, #0
 802377a:	b410      	push	{r4}
 802377c:	6093      	str	r3, [r2, #8]
 802377e:	da08      	bge.n	8023792 <__sfputc_r+0x1e>
 8023780:	6994      	ldr	r4, [r2, #24]
 8023782:	42a3      	cmp	r3, r4
 8023784:	db01      	blt.n	802378a <__sfputc_r+0x16>
 8023786:	290a      	cmp	r1, #10
 8023788:	d103      	bne.n	8023792 <__sfputc_r+0x1e>
 802378a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802378e:	f7ff bdc6 	b.w	802331e <__swbuf_r>
 8023792:	6813      	ldr	r3, [r2, #0]
 8023794:	1c58      	adds	r0, r3, #1
 8023796:	6010      	str	r0, [r2, #0]
 8023798:	7019      	strb	r1, [r3, #0]
 802379a:	4608      	mov	r0, r1
 802379c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237a0:	4770      	bx	lr

080237a2 <__sfputs_r>:
 80237a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237a4:	4606      	mov	r6, r0
 80237a6:	460f      	mov	r7, r1
 80237a8:	4614      	mov	r4, r2
 80237aa:	18d5      	adds	r5, r2, r3
 80237ac:	42ac      	cmp	r4, r5
 80237ae:	d101      	bne.n	80237b4 <__sfputs_r+0x12>
 80237b0:	2000      	movs	r0, #0
 80237b2:	e007      	b.n	80237c4 <__sfputs_r+0x22>
 80237b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80237b8:	463a      	mov	r2, r7
 80237ba:	4630      	mov	r0, r6
 80237bc:	f7ff ffda 	bl	8023774 <__sfputc_r>
 80237c0:	1c43      	adds	r3, r0, #1
 80237c2:	d1f3      	bne.n	80237ac <__sfputs_r+0xa>
 80237c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080237c8 <_vfiprintf_r>:
 80237c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237cc:	460d      	mov	r5, r1
 80237ce:	b09d      	sub	sp, #116	@ 0x74
 80237d0:	4614      	mov	r4, r2
 80237d2:	4698      	mov	r8, r3
 80237d4:	4606      	mov	r6, r0
 80237d6:	b118      	cbz	r0, 80237e0 <_vfiprintf_r+0x18>
 80237d8:	6a03      	ldr	r3, [r0, #32]
 80237da:	b90b      	cbnz	r3, 80237e0 <_vfiprintf_r+0x18>
 80237dc:	f7ff fd14 	bl	8023208 <__sinit>
 80237e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80237e2:	07d9      	lsls	r1, r3, #31
 80237e4:	d405      	bmi.n	80237f2 <_vfiprintf_r+0x2a>
 80237e6:	89ab      	ldrh	r3, [r5, #12]
 80237e8:	059a      	lsls	r2, r3, #22
 80237ea:	d402      	bmi.n	80237f2 <_vfiprintf_r+0x2a>
 80237ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80237ee:	f7ff ff0a 	bl	8023606 <__retarget_lock_acquire_recursive>
 80237f2:	89ab      	ldrh	r3, [r5, #12]
 80237f4:	071b      	lsls	r3, r3, #28
 80237f6:	d501      	bpl.n	80237fc <_vfiprintf_r+0x34>
 80237f8:	692b      	ldr	r3, [r5, #16]
 80237fa:	b99b      	cbnz	r3, 8023824 <_vfiprintf_r+0x5c>
 80237fc:	4629      	mov	r1, r5
 80237fe:	4630      	mov	r0, r6
 8023800:	f7ff fdcc 	bl	802339c <__swsetup_r>
 8023804:	b170      	cbz	r0, 8023824 <_vfiprintf_r+0x5c>
 8023806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023808:	07dc      	lsls	r4, r3, #31
 802380a:	d504      	bpl.n	8023816 <_vfiprintf_r+0x4e>
 802380c:	f04f 30ff 	mov.w	r0, #4294967295
 8023810:	b01d      	add	sp, #116	@ 0x74
 8023812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023816:	89ab      	ldrh	r3, [r5, #12]
 8023818:	0598      	lsls	r0, r3, #22
 802381a:	d4f7      	bmi.n	802380c <_vfiprintf_r+0x44>
 802381c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802381e:	f7ff fef3 	bl	8023608 <__retarget_lock_release_recursive>
 8023822:	e7f3      	b.n	802380c <_vfiprintf_r+0x44>
 8023824:	2300      	movs	r3, #0
 8023826:	9309      	str	r3, [sp, #36]	@ 0x24
 8023828:	2320      	movs	r3, #32
 802382a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802382e:	f8cd 800c 	str.w	r8, [sp, #12]
 8023832:	2330      	movs	r3, #48	@ 0x30
 8023834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80239e4 <_vfiprintf_r+0x21c>
 8023838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802383c:	f04f 0901 	mov.w	r9, #1
 8023840:	4623      	mov	r3, r4
 8023842:	469a      	mov	sl, r3
 8023844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023848:	b10a      	cbz	r2, 802384e <_vfiprintf_r+0x86>
 802384a:	2a25      	cmp	r2, #37	@ 0x25
 802384c:	d1f9      	bne.n	8023842 <_vfiprintf_r+0x7a>
 802384e:	ebba 0b04 	subs.w	fp, sl, r4
 8023852:	d00b      	beq.n	802386c <_vfiprintf_r+0xa4>
 8023854:	465b      	mov	r3, fp
 8023856:	4622      	mov	r2, r4
 8023858:	4629      	mov	r1, r5
 802385a:	4630      	mov	r0, r6
 802385c:	f7ff ffa1 	bl	80237a2 <__sfputs_r>
 8023860:	3001      	adds	r0, #1
 8023862:	f000 80a7 	beq.w	80239b4 <_vfiprintf_r+0x1ec>
 8023866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023868:	445a      	add	r2, fp
 802386a:	9209      	str	r2, [sp, #36]	@ 0x24
 802386c:	f89a 3000 	ldrb.w	r3, [sl]
 8023870:	2b00      	cmp	r3, #0
 8023872:	f000 809f 	beq.w	80239b4 <_vfiprintf_r+0x1ec>
 8023876:	2300      	movs	r3, #0
 8023878:	f04f 32ff 	mov.w	r2, #4294967295
 802387c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023880:	f10a 0a01 	add.w	sl, sl, #1
 8023884:	9304      	str	r3, [sp, #16]
 8023886:	9307      	str	r3, [sp, #28]
 8023888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802388c:	931a      	str	r3, [sp, #104]	@ 0x68
 802388e:	4654      	mov	r4, sl
 8023890:	2205      	movs	r2, #5
 8023892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023896:	4853      	ldr	r0, [pc, #332]	@ (80239e4 <_vfiprintf_r+0x21c>)
 8023898:	f7dc fd22 	bl	80002e0 <memchr>
 802389c:	9a04      	ldr	r2, [sp, #16]
 802389e:	b9d8      	cbnz	r0, 80238d8 <_vfiprintf_r+0x110>
 80238a0:	06d1      	lsls	r1, r2, #27
 80238a2:	bf44      	itt	mi
 80238a4:	2320      	movmi	r3, #32
 80238a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80238aa:	0713      	lsls	r3, r2, #28
 80238ac:	bf44      	itt	mi
 80238ae:	232b      	movmi	r3, #43	@ 0x2b
 80238b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80238b4:	f89a 3000 	ldrb.w	r3, [sl]
 80238b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80238ba:	d015      	beq.n	80238e8 <_vfiprintf_r+0x120>
 80238bc:	9a07      	ldr	r2, [sp, #28]
 80238be:	4654      	mov	r4, sl
 80238c0:	2000      	movs	r0, #0
 80238c2:	f04f 0c0a 	mov.w	ip, #10
 80238c6:	4621      	mov	r1, r4
 80238c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80238cc:	3b30      	subs	r3, #48	@ 0x30
 80238ce:	2b09      	cmp	r3, #9
 80238d0:	d94b      	bls.n	802396a <_vfiprintf_r+0x1a2>
 80238d2:	b1b0      	cbz	r0, 8023902 <_vfiprintf_r+0x13a>
 80238d4:	9207      	str	r2, [sp, #28]
 80238d6:	e014      	b.n	8023902 <_vfiprintf_r+0x13a>
 80238d8:	eba0 0308 	sub.w	r3, r0, r8
 80238dc:	fa09 f303 	lsl.w	r3, r9, r3
 80238e0:	4313      	orrs	r3, r2
 80238e2:	9304      	str	r3, [sp, #16]
 80238e4:	46a2      	mov	sl, r4
 80238e6:	e7d2      	b.n	802388e <_vfiprintf_r+0xc6>
 80238e8:	9b03      	ldr	r3, [sp, #12]
 80238ea:	1d19      	adds	r1, r3, #4
 80238ec:	681b      	ldr	r3, [r3, #0]
 80238ee:	9103      	str	r1, [sp, #12]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	bfbb      	ittet	lt
 80238f4:	425b      	neglt	r3, r3
 80238f6:	f042 0202 	orrlt.w	r2, r2, #2
 80238fa:	9307      	strge	r3, [sp, #28]
 80238fc:	9307      	strlt	r3, [sp, #28]
 80238fe:	bfb8      	it	lt
 8023900:	9204      	strlt	r2, [sp, #16]
 8023902:	7823      	ldrb	r3, [r4, #0]
 8023904:	2b2e      	cmp	r3, #46	@ 0x2e
 8023906:	d10a      	bne.n	802391e <_vfiprintf_r+0x156>
 8023908:	7863      	ldrb	r3, [r4, #1]
 802390a:	2b2a      	cmp	r3, #42	@ 0x2a
 802390c:	d132      	bne.n	8023974 <_vfiprintf_r+0x1ac>
 802390e:	9b03      	ldr	r3, [sp, #12]
 8023910:	1d1a      	adds	r2, r3, #4
 8023912:	681b      	ldr	r3, [r3, #0]
 8023914:	9203      	str	r2, [sp, #12]
 8023916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802391a:	3402      	adds	r4, #2
 802391c:	9305      	str	r3, [sp, #20]
 802391e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80239f4 <_vfiprintf_r+0x22c>
 8023922:	7821      	ldrb	r1, [r4, #0]
 8023924:	2203      	movs	r2, #3
 8023926:	4650      	mov	r0, sl
 8023928:	f7dc fcda 	bl	80002e0 <memchr>
 802392c:	b138      	cbz	r0, 802393e <_vfiprintf_r+0x176>
 802392e:	9b04      	ldr	r3, [sp, #16]
 8023930:	eba0 000a 	sub.w	r0, r0, sl
 8023934:	2240      	movs	r2, #64	@ 0x40
 8023936:	4082      	lsls	r2, r0
 8023938:	4313      	orrs	r3, r2
 802393a:	3401      	adds	r4, #1
 802393c:	9304      	str	r3, [sp, #16]
 802393e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023942:	4829      	ldr	r0, [pc, #164]	@ (80239e8 <_vfiprintf_r+0x220>)
 8023944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023948:	2206      	movs	r2, #6
 802394a:	f7dc fcc9 	bl	80002e0 <memchr>
 802394e:	2800      	cmp	r0, #0
 8023950:	d03f      	beq.n	80239d2 <_vfiprintf_r+0x20a>
 8023952:	4b26      	ldr	r3, [pc, #152]	@ (80239ec <_vfiprintf_r+0x224>)
 8023954:	bb1b      	cbnz	r3, 802399e <_vfiprintf_r+0x1d6>
 8023956:	9b03      	ldr	r3, [sp, #12]
 8023958:	3307      	adds	r3, #7
 802395a:	f023 0307 	bic.w	r3, r3, #7
 802395e:	3308      	adds	r3, #8
 8023960:	9303      	str	r3, [sp, #12]
 8023962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023964:	443b      	add	r3, r7
 8023966:	9309      	str	r3, [sp, #36]	@ 0x24
 8023968:	e76a      	b.n	8023840 <_vfiprintf_r+0x78>
 802396a:	fb0c 3202 	mla	r2, ip, r2, r3
 802396e:	460c      	mov	r4, r1
 8023970:	2001      	movs	r0, #1
 8023972:	e7a8      	b.n	80238c6 <_vfiprintf_r+0xfe>
 8023974:	2300      	movs	r3, #0
 8023976:	3401      	adds	r4, #1
 8023978:	9305      	str	r3, [sp, #20]
 802397a:	4619      	mov	r1, r3
 802397c:	f04f 0c0a 	mov.w	ip, #10
 8023980:	4620      	mov	r0, r4
 8023982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023986:	3a30      	subs	r2, #48	@ 0x30
 8023988:	2a09      	cmp	r2, #9
 802398a:	d903      	bls.n	8023994 <_vfiprintf_r+0x1cc>
 802398c:	2b00      	cmp	r3, #0
 802398e:	d0c6      	beq.n	802391e <_vfiprintf_r+0x156>
 8023990:	9105      	str	r1, [sp, #20]
 8023992:	e7c4      	b.n	802391e <_vfiprintf_r+0x156>
 8023994:	fb0c 2101 	mla	r1, ip, r1, r2
 8023998:	4604      	mov	r4, r0
 802399a:	2301      	movs	r3, #1
 802399c:	e7f0      	b.n	8023980 <_vfiprintf_r+0x1b8>
 802399e:	ab03      	add	r3, sp, #12
 80239a0:	9300      	str	r3, [sp, #0]
 80239a2:	462a      	mov	r2, r5
 80239a4:	4b12      	ldr	r3, [pc, #72]	@ (80239f0 <_vfiprintf_r+0x228>)
 80239a6:	a904      	add	r1, sp, #16
 80239a8:	4630      	mov	r0, r6
 80239aa:	f3af 8000 	nop.w
 80239ae:	4607      	mov	r7, r0
 80239b0:	1c78      	adds	r0, r7, #1
 80239b2:	d1d6      	bne.n	8023962 <_vfiprintf_r+0x19a>
 80239b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80239b6:	07d9      	lsls	r1, r3, #31
 80239b8:	d405      	bmi.n	80239c6 <_vfiprintf_r+0x1fe>
 80239ba:	89ab      	ldrh	r3, [r5, #12]
 80239bc:	059a      	lsls	r2, r3, #22
 80239be:	d402      	bmi.n	80239c6 <_vfiprintf_r+0x1fe>
 80239c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80239c2:	f7ff fe21 	bl	8023608 <__retarget_lock_release_recursive>
 80239c6:	89ab      	ldrh	r3, [r5, #12]
 80239c8:	065b      	lsls	r3, r3, #25
 80239ca:	f53f af1f 	bmi.w	802380c <_vfiprintf_r+0x44>
 80239ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80239d0:	e71e      	b.n	8023810 <_vfiprintf_r+0x48>
 80239d2:	ab03      	add	r3, sp, #12
 80239d4:	9300      	str	r3, [sp, #0]
 80239d6:	462a      	mov	r2, r5
 80239d8:	4b05      	ldr	r3, [pc, #20]	@ (80239f0 <_vfiprintf_r+0x228>)
 80239da:	a904      	add	r1, sp, #16
 80239dc:	4630      	mov	r0, r6
 80239de:	f000 f879 	bl	8023ad4 <_printf_i>
 80239e2:	e7e4      	b.n	80239ae <_vfiprintf_r+0x1e6>
 80239e4:	08025e58 	.word	0x08025e58
 80239e8:	08025e62 	.word	0x08025e62
 80239ec:	00000000 	.word	0x00000000
 80239f0:	080237a3 	.word	0x080237a3
 80239f4:	08025e5e 	.word	0x08025e5e

080239f8 <_printf_common>:
 80239f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80239fc:	4616      	mov	r6, r2
 80239fe:	4698      	mov	r8, r3
 8023a00:	688a      	ldr	r2, [r1, #8]
 8023a02:	690b      	ldr	r3, [r1, #16]
 8023a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023a08:	4293      	cmp	r3, r2
 8023a0a:	bfb8      	it	lt
 8023a0c:	4613      	movlt	r3, r2
 8023a0e:	6033      	str	r3, [r6, #0]
 8023a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023a14:	4607      	mov	r7, r0
 8023a16:	460c      	mov	r4, r1
 8023a18:	b10a      	cbz	r2, 8023a1e <_printf_common+0x26>
 8023a1a:	3301      	adds	r3, #1
 8023a1c:	6033      	str	r3, [r6, #0]
 8023a1e:	6823      	ldr	r3, [r4, #0]
 8023a20:	0699      	lsls	r1, r3, #26
 8023a22:	bf42      	ittt	mi
 8023a24:	6833      	ldrmi	r3, [r6, #0]
 8023a26:	3302      	addmi	r3, #2
 8023a28:	6033      	strmi	r3, [r6, #0]
 8023a2a:	6825      	ldr	r5, [r4, #0]
 8023a2c:	f015 0506 	ands.w	r5, r5, #6
 8023a30:	d106      	bne.n	8023a40 <_printf_common+0x48>
 8023a32:	f104 0a19 	add.w	sl, r4, #25
 8023a36:	68e3      	ldr	r3, [r4, #12]
 8023a38:	6832      	ldr	r2, [r6, #0]
 8023a3a:	1a9b      	subs	r3, r3, r2
 8023a3c:	42ab      	cmp	r3, r5
 8023a3e:	dc26      	bgt.n	8023a8e <_printf_common+0x96>
 8023a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023a44:	6822      	ldr	r2, [r4, #0]
 8023a46:	3b00      	subs	r3, #0
 8023a48:	bf18      	it	ne
 8023a4a:	2301      	movne	r3, #1
 8023a4c:	0692      	lsls	r2, r2, #26
 8023a4e:	d42b      	bmi.n	8023aa8 <_printf_common+0xb0>
 8023a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023a54:	4641      	mov	r1, r8
 8023a56:	4638      	mov	r0, r7
 8023a58:	47c8      	blx	r9
 8023a5a:	3001      	adds	r0, #1
 8023a5c:	d01e      	beq.n	8023a9c <_printf_common+0xa4>
 8023a5e:	6823      	ldr	r3, [r4, #0]
 8023a60:	6922      	ldr	r2, [r4, #16]
 8023a62:	f003 0306 	and.w	r3, r3, #6
 8023a66:	2b04      	cmp	r3, #4
 8023a68:	bf02      	ittt	eq
 8023a6a:	68e5      	ldreq	r5, [r4, #12]
 8023a6c:	6833      	ldreq	r3, [r6, #0]
 8023a6e:	1aed      	subeq	r5, r5, r3
 8023a70:	68a3      	ldr	r3, [r4, #8]
 8023a72:	bf0c      	ite	eq
 8023a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023a78:	2500      	movne	r5, #0
 8023a7a:	4293      	cmp	r3, r2
 8023a7c:	bfc4      	itt	gt
 8023a7e:	1a9b      	subgt	r3, r3, r2
 8023a80:	18ed      	addgt	r5, r5, r3
 8023a82:	2600      	movs	r6, #0
 8023a84:	341a      	adds	r4, #26
 8023a86:	42b5      	cmp	r5, r6
 8023a88:	d11a      	bne.n	8023ac0 <_printf_common+0xc8>
 8023a8a:	2000      	movs	r0, #0
 8023a8c:	e008      	b.n	8023aa0 <_printf_common+0xa8>
 8023a8e:	2301      	movs	r3, #1
 8023a90:	4652      	mov	r2, sl
 8023a92:	4641      	mov	r1, r8
 8023a94:	4638      	mov	r0, r7
 8023a96:	47c8      	blx	r9
 8023a98:	3001      	adds	r0, #1
 8023a9a:	d103      	bne.n	8023aa4 <_printf_common+0xac>
 8023a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8023aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023aa4:	3501      	adds	r5, #1
 8023aa6:	e7c6      	b.n	8023a36 <_printf_common+0x3e>
 8023aa8:	18e1      	adds	r1, r4, r3
 8023aaa:	1c5a      	adds	r2, r3, #1
 8023aac:	2030      	movs	r0, #48	@ 0x30
 8023aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023ab2:	4422      	add	r2, r4
 8023ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023abc:	3302      	adds	r3, #2
 8023abe:	e7c7      	b.n	8023a50 <_printf_common+0x58>
 8023ac0:	2301      	movs	r3, #1
 8023ac2:	4622      	mov	r2, r4
 8023ac4:	4641      	mov	r1, r8
 8023ac6:	4638      	mov	r0, r7
 8023ac8:	47c8      	blx	r9
 8023aca:	3001      	adds	r0, #1
 8023acc:	d0e6      	beq.n	8023a9c <_printf_common+0xa4>
 8023ace:	3601      	adds	r6, #1
 8023ad0:	e7d9      	b.n	8023a86 <_printf_common+0x8e>
	...

08023ad4 <_printf_i>:
 8023ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023ad8:	7e0f      	ldrb	r7, [r1, #24]
 8023ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023adc:	2f78      	cmp	r7, #120	@ 0x78
 8023ade:	4691      	mov	r9, r2
 8023ae0:	4680      	mov	r8, r0
 8023ae2:	460c      	mov	r4, r1
 8023ae4:	469a      	mov	sl, r3
 8023ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023aea:	d807      	bhi.n	8023afc <_printf_i+0x28>
 8023aec:	2f62      	cmp	r7, #98	@ 0x62
 8023aee:	d80a      	bhi.n	8023b06 <_printf_i+0x32>
 8023af0:	2f00      	cmp	r7, #0
 8023af2:	f000 80d1 	beq.w	8023c98 <_printf_i+0x1c4>
 8023af6:	2f58      	cmp	r7, #88	@ 0x58
 8023af8:	f000 80b8 	beq.w	8023c6c <_printf_i+0x198>
 8023afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023b04:	e03a      	b.n	8023b7c <_printf_i+0xa8>
 8023b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023b0a:	2b15      	cmp	r3, #21
 8023b0c:	d8f6      	bhi.n	8023afc <_printf_i+0x28>
 8023b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8023b14 <_printf_i+0x40>)
 8023b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023b14:	08023b6d 	.word	0x08023b6d
 8023b18:	08023b81 	.word	0x08023b81
 8023b1c:	08023afd 	.word	0x08023afd
 8023b20:	08023afd 	.word	0x08023afd
 8023b24:	08023afd 	.word	0x08023afd
 8023b28:	08023afd 	.word	0x08023afd
 8023b2c:	08023b81 	.word	0x08023b81
 8023b30:	08023afd 	.word	0x08023afd
 8023b34:	08023afd 	.word	0x08023afd
 8023b38:	08023afd 	.word	0x08023afd
 8023b3c:	08023afd 	.word	0x08023afd
 8023b40:	08023c7f 	.word	0x08023c7f
 8023b44:	08023bab 	.word	0x08023bab
 8023b48:	08023c39 	.word	0x08023c39
 8023b4c:	08023afd 	.word	0x08023afd
 8023b50:	08023afd 	.word	0x08023afd
 8023b54:	08023ca1 	.word	0x08023ca1
 8023b58:	08023afd 	.word	0x08023afd
 8023b5c:	08023bab 	.word	0x08023bab
 8023b60:	08023afd 	.word	0x08023afd
 8023b64:	08023afd 	.word	0x08023afd
 8023b68:	08023c41 	.word	0x08023c41
 8023b6c:	6833      	ldr	r3, [r6, #0]
 8023b6e:	1d1a      	adds	r2, r3, #4
 8023b70:	681b      	ldr	r3, [r3, #0]
 8023b72:	6032      	str	r2, [r6, #0]
 8023b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023b7c:	2301      	movs	r3, #1
 8023b7e:	e09c      	b.n	8023cba <_printf_i+0x1e6>
 8023b80:	6833      	ldr	r3, [r6, #0]
 8023b82:	6820      	ldr	r0, [r4, #0]
 8023b84:	1d19      	adds	r1, r3, #4
 8023b86:	6031      	str	r1, [r6, #0]
 8023b88:	0606      	lsls	r6, r0, #24
 8023b8a:	d501      	bpl.n	8023b90 <_printf_i+0xbc>
 8023b8c:	681d      	ldr	r5, [r3, #0]
 8023b8e:	e003      	b.n	8023b98 <_printf_i+0xc4>
 8023b90:	0645      	lsls	r5, r0, #25
 8023b92:	d5fb      	bpl.n	8023b8c <_printf_i+0xb8>
 8023b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023b98:	2d00      	cmp	r5, #0
 8023b9a:	da03      	bge.n	8023ba4 <_printf_i+0xd0>
 8023b9c:	232d      	movs	r3, #45	@ 0x2d
 8023b9e:	426d      	negs	r5, r5
 8023ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023ba4:	4858      	ldr	r0, [pc, #352]	@ (8023d08 <_printf_i+0x234>)
 8023ba6:	230a      	movs	r3, #10
 8023ba8:	e011      	b.n	8023bce <_printf_i+0xfa>
 8023baa:	6821      	ldr	r1, [r4, #0]
 8023bac:	6833      	ldr	r3, [r6, #0]
 8023bae:	0608      	lsls	r0, r1, #24
 8023bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8023bb4:	d402      	bmi.n	8023bbc <_printf_i+0xe8>
 8023bb6:	0649      	lsls	r1, r1, #25
 8023bb8:	bf48      	it	mi
 8023bba:	b2ad      	uxthmi	r5, r5
 8023bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8023bbe:	4852      	ldr	r0, [pc, #328]	@ (8023d08 <_printf_i+0x234>)
 8023bc0:	6033      	str	r3, [r6, #0]
 8023bc2:	bf14      	ite	ne
 8023bc4:	230a      	movne	r3, #10
 8023bc6:	2308      	moveq	r3, #8
 8023bc8:	2100      	movs	r1, #0
 8023bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023bce:	6866      	ldr	r6, [r4, #4]
 8023bd0:	60a6      	str	r6, [r4, #8]
 8023bd2:	2e00      	cmp	r6, #0
 8023bd4:	db05      	blt.n	8023be2 <_printf_i+0x10e>
 8023bd6:	6821      	ldr	r1, [r4, #0]
 8023bd8:	432e      	orrs	r6, r5
 8023bda:	f021 0104 	bic.w	r1, r1, #4
 8023bde:	6021      	str	r1, [r4, #0]
 8023be0:	d04b      	beq.n	8023c7a <_printf_i+0x1a6>
 8023be2:	4616      	mov	r6, r2
 8023be4:	fbb5 f1f3 	udiv	r1, r5, r3
 8023be8:	fb03 5711 	mls	r7, r3, r1, r5
 8023bec:	5dc7      	ldrb	r7, [r0, r7]
 8023bee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023bf2:	462f      	mov	r7, r5
 8023bf4:	42bb      	cmp	r3, r7
 8023bf6:	460d      	mov	r5, r1
 8023bf8:	d9f4      	bls.n	8023be4 <_printf_i+0x110>
 8023bfa:	2b08      	cmp	r3, #8
 8023bfc:	d10b      	bne.n	8023c16 <_printf_i+0x142>
 8023bfe:	6823      	ldr	r3, [r4, #0]
 8023c00:	07df      	lsls	r7, r3, #31
 8023c02:	d508      	bpl.n	8023c16 <_printf_i+0x142>
 8023c04:	6923      	ldr	r3, [r4, #16]
 8023c06:	6861      	ldr	r1, [r4, #4]
 8023c08:	4299      	cmp	r1, r3
 8023c0a:	bfde      	ittt	le
 8023c0c:	2330      	movle	r3, #48	@ 0x30
 8023c0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023c12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023c16:	1b92      	subs	r2, r2, r6
 8023c18:	6122      	str	r2, [r4, #16]
 8023c1a:	f8cd a000 	str.w	sl, [sp]
 8023c1e:	464b      	mov	r3, r9
 8023c20:	aa03      	add	r2, sp, #12
 8023c22:	4621      	mov	r1, r4
 8023c24:	4640      	mov	r0, r8
 8023c26:	f7ff fee7 	bl	80239f8 <_printf_common>
 8023c2a:	3001      	adds	r0, #1
 8023c2c:	d14a      	bne.n	8023cc4 <_printf_i+0x1f0>
 8023c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8023c32:	b004      	add	sp, #16
 8023c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c38:	6823      	ldr	r3, [r4, #0]
 8023c3a:	f043 0320 	orr.w	r3, r3, #32
 8023c3e:	6023      	str	r3, [r4, #0]
 8023c40:	4832      	ldr	r0, [pc, #200]	@ (8023d0c <_printf_i+0x238>)
 8023c42:	2778      	movs	r7, #120	@ 0x78
 8023c44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023c48:	6823      	ldr	r3, [r4, #0]
 8023c4a:	6831      	ldr	r1, [r6, #0]
 8023c4c:	061f      	lsls	r7, r3, #24
 8023c4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8023c52:	d402      	bmi.n	8023c5a <_printf_i+0x186>
 8023c54:	065f      	lsls	r7, r3, #25
 8023c56:	bf48      	it	mi
 8023c58:	b2ad      	uxthmi	r5, r5
 8023c5a:	6031      	str	r1, [r6, #0]
 8023c5c:	07d9      	lsls	r1, r3, #31
 8023c5e:	bf44      	itt	mi
 8023c60:	f043 0320 	orrmi.w	r3, r3, #32
 8023c64:	6023      	strmi	r3, [r4, #0]
 8023c66:	b11d      	cbz	r5, 8023c70 <_printf_i+0x19c>
 8023c68:	2310      	movs	r3, #16
 8023c6a:	e7ad      	b.n	8023bc8 <_printf_i+0xf4>
 8023c6c:	4826      	ldr	r0, [pc, #152]	@ (8023d08 <_printf_i+0x234>)
 8023c6e:	e7e9      	b.n	8023c44 <_printf_i+0x170>
 8023c70:	6823      	ldr	r3, [r4, #0]
 8023c72:	f023 0320 	bic.w	r3, r3, #32
 8023c76:	6023      	str	r3, [r4, #0]
 8023c78:	e7f6      	b.n	8023c68 <_printf_i+0x194>
 8023c7a:	4616      	mov	r6, r2
 8023c7c:	e7bd      	b.n	8023bfa <_printf_i+0x126>
 8023c7e:	6833      	ldr	r3, [r6, #0]
 8023c80:	6825      	ldr	r5, [r4, #0]
 8023c82:	6961      	ldr	r1, [r4, #20]
 8023c84:	1d18      	adds	r0, r3, #4
 8023c86:	6030      	str	r0, [r6, #0]
 8023c88:	062e      	lsls	r6, r5, #24
 8023c8a:	681b      	ldr	r3, [r3, #0]
 8023c8c:	d501      	bpl.n	8023c92 <_printf_i+0x1be>
 8023c8e:	6019      	str	r1, [r3, #0]
 8023c90:	e002      	b.n	8023c98 <_printf_i+0x1c4>
 8023c92:	0668      	lsls	r0, r5, #25
 8023c94:	d5fb      	bpl.n	8023c8e <_printf_i+0x1ba>
 8023c96:	8019      	strh	r1, [r3, #0]
 8023c98:	2300      	movs	r3, #0
 8023c9a:	6123      	str	r3, [r4, #16]
 8023c9c:	4616      	mov	r6, r2
 8023c9e:	e7bc      	b.n	8023c1a <_printf_i+0x146>
 8023ca0:	6833      	ldr	r3, [r6, #0]
 8023ca2:	1d1a      	adds	r2, r3, #4
 8023ca4:	6032      	str	r2, [r6, #0]
 8023ca6:	681e      	ldr	r6, [r3, #0]
 8023ca8:	6862      	ldr	r2, [r4, #4]
 8023caa:	2100      	movs	r1, #0
 8023cac:	4630      	mov	r0, r6
 8023cae:	f7dc fb17 	bl	80002e0 <memchr>
 8023cb2:	b108      	cbz	r0, 8023cb8 <_printf_i+0x1e4>
 8023cb4:	1b80      	subs	r0, r0, r6
 8023cb6:	6060      	str	r0, [r4, #4]
 8023cb8:	6863      	ldr	r3, [r4, #4]
 8023cba:	6123      	str	r3, [r4, #16]
 8023cbc:	2300      	movs	r3, #0
 8023cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023cc2:	e7aa      	b.n	8023c1a <_printf_i+0x146>
 8023cc4:	6923      	ldr	r3, [r4, #16]
 8023cc6:	4632      	mov	r2, r6
 8023cc8:	4649      	mov	r1, r9
 8023cca:	4640      	mov	r0, r8
 8023ccc:	47d0      	blx	sl
 8023cce:	3001      	adds	r0, #1
 8023cd0:	d0ad      	beq.n	8023c2e <_printf_i+0x15a>
 8023cd2:	6823      	ldr	r3, [r4, #0]
 8023cd4:	079b      	lsls	r3, r3, #30
 8023cd6:	d413      	bmi.n	8023d00 <_printf_i+0x22c>
 8023cd8:	68e0      	ldr	r0, [r4, #12]
 8023cda:	9b03      	ldr	r3, [sp, #12]
 8023cdc:	4298      	cmp	r0, r3
 8023cde:	bfb8      	it	lt
 8023ce0:	4618      	movlt	r0, r3
 8023ce2:	e7a6      	b.n	8023c32 <_printf_i+0x15e>
 8023ce4:	2301      	movs	r3, #1
 8023ce6:	4632      	mov	r2, r6
 8023ce8:	4649      	mov	r1, r9
 8023cea:	4640      	mov	r0, r8
 8023cec:	47d0      	blx	sl
 8023cee:	3001      	adds	r0, #1
 8023cf0:	d09d      	beq.n	8023c2e <_printf_i+0x15a>
 8023cf2:	3501      	adds	r5, #1
 8023cf4:	68e3      	ldr	r3, [r4, #12]
 8023cf6:	9903      	ldr	r1, [sp, #12]
 8023cf8:	1a5b      	subs	r3, r3, r1
 8023cfa:	42ab      	cmp	r3, r5
 8023cfc:	dcf2      	bgt.n	8023ce4 <_printf_i+0x210>
 8023cfe:	e7eb      	b.n	8023cd8 <_printf_i+0x204>
 8023d00:	2500      	movs	r5, #0
 8023d02:	f104 0619 	add.w	r6, r4, #25
 8023d06:	e7f5      	b.n	8023cf4 <_printf_i+0x220>
 8023d08:	08025e69 	.word	0x08025e69
 8023d0c:	08025e7a 	.word	0x08025e7a

08023d10 <__sflush_r>:
 8023d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d18:	0716      	lsls	r6, r2, #28
 8023d1a:	4605      	mov	r5, r0
 8023d1c:	460c      	mov	r4, r1
 8023d1e:	d454      	bmi.n	8023dca <__sflush_r+0xba>
 8023d20:	684b      	ldr	r3, [r1, #4]
 8023d22:	2b00      	cmp	r3, #0
 8023d24:	dc02      	bgt.n	8023d2c <__sflush_r+0x1c>
 8023d26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023d28:	2b00      	cmp	r3, #0
 8023d2a:	dd48      	ble.n	8023dbe <__sflush_r+0xae>
 8023d2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023d2e:	2e00      	cmp	r6, #0
 8023d30:	d045      	beq.n	8023dbe <__sflush_r+0xae>
 8023d32:	2300      	movs	r3, #0
 8023d34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023d38:	682f      	ldr	r7, [r5, #0]
 8023d3a:	6a21      	ldr	r1, [r4, #32]
 8023d3c:	602b      	str	r3, [r5, #0]
 8023d3e:	d030      	beq.n	8023da2 <__sflush_r+0x92>
 8023d40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023d42:	89a3      	ldrh	r3, [r4, #12]
 8023d44:	0759      	lsls	r1, r3, #29
 8023d46:	d505      	bpl.n	8023d54 <__sflush_r+0x44>
 8023d48:	6863      	ldr	r3, [r4, #4]
 8023d4a:	1ad2      	subs	r2, r2, r3
 8023d4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023d4e:	b10b      	cbz	r3, 8023d54 <__sflush_r+0x44>
 8023d50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023d52:	1ad2      	subs	r2, r2, r3
 8023d54:	2300      	movs	r3, #0
 8023d56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023d58:	6a21      	ldr	r1, [r4, #32]
 8023d5a:	4628      	mov	r0, r5
 8023d5c:	47b0      	blx	r6
 8023d5e:	1c43      	adds	r3, r0, #1
 8023d60:	89a3      	ldrh	r3, [r4, #12]
 8023d62:	d106      	bne.n	8023d72 <__sflush_r+0x62>
 8023d64:	6829      	ldr	r1, [r5, #0]
 8023d66:	291d      	cmp	r1, #29
 8023d68:	d82b      	bhi.n	8023dc2 <__sflush_r+0xb2>
 8023d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8023e14 <__sflush_r+0x104>)
 8023d6c:	40ca      	lsrs	r2, r1
 8023d6e:	07d6      	lsls	r6, r2, #31
 8023d70:	d527      	bpl.n	8023dc2 <__sflush_r+0xb2>
 8023d72:	2200      	movs	r2, #0
 8023d74:	6062      	str	r2, [r4, #4]
 8023d76:	04d9      	lsls	r1, r3, #19
 8023d78:	6922      	ldr	r2, [r4, #16]
 8023d7a:	6022      	str	r2, [r4, #0]
 8023d7c:	d504      	bpl.n	8023d88 <__sflush_r+0x78>
 8023d7e:	1c42      	adds	r2, r0, #1
 8023d80:	d101      	bne.n	8023d86 <__sflush_r+0x76>
 8023d82:	682b      	ldr	r3, [r5, #0]
 8023d84:	b903      	cbnz	r3, 8023d88 <__sflush_r+0x78>
 8023d86:	6560      	str	r0, [r4, #84]	@ 0x54
 8023d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023d8a:	602f      	str	r7, [r5, #0]
 8023d8c:	b1b9      	cbz	r1, 8023dbe <__sflush_r+0xae>
 8023d8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023d92:	4299      	cmp	r1, r3
 8023d94:	d002      	beq.n	8023d9c <__sflush_r+0x8c>
 8023d96:	4628      	mov	r0, r5
 8023d98:	f7ff fca2 	bl	80236e0 <_free_r>
 8023d9c:	2300      	movs	r3, #0
 8023d9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023da0:	e00d      	b.n	8023dbe <__sflush_r+0xae>
 8023da2:	2301      	movs	r3, #1
 8023da4:	4628      	mov	r0, r5
 8023da6:	47b0      	blx	r6
 8023da8:	4602      	mov	r2, r0
 8023daa:	1c50      	adds	r0, r2, #1
 8023dac:	d1c9      	bne.n	8023d42 <__sflush_r+0x32>
 8023dae:	682b      	ldr	r3, [r5, #0]
 8023db0:	2b00      	cmp	r3, #0
 8023db2:	d0c6      	beq.n	8023d42 <__sflush_r+0x32>
 8023db4:	2b1d      	cmp	r3, #29
 8023db6:	d001      	beq.n	8023dbc <__sflush_r+0xac>
 8023db8:	2b16      	cmp	r3, #22
 8023dba:	d11e      	bne.n	8023dfa <__sflush_r+0xea>
 8023dbc:	602f      	str	r7, [r5, #0]
 8023dbe:	2000      	movs	r0, #0
 8023dc0:	e022      	b.n	8023e08 <__sflush_r+0xf8>
 8023dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023dc6:	b21b      	sxth	r3, r3
 8023dc8:	e01b      	b.n	8023e02 <__sflush_r+0xf2>
 8023dca:	690f      	ldr	r7, [r1, #16]
 8023dcc:	2f00      	cmp	r7, #0
 8023dce:	d0f6      	beq.n	8023dbe <__sflush_r+0xae>
 8023dd0:	0793      	lsls	r3, r2, #30
 8023dd2:	680e      	ldr	r6, [r1, #0]
 8023dd4:	bf08      	it	eq
 8023dd6:	694b      	ldreq	r3, [r1, #20]
 8023dd8:	600f      	str	r7, [r1, #0]
 8023dda:	bf18      	it	ne
 8023ddc:	2300      	movne	r3, #0
 8023dde:	eba6 0807 	sub.w	r8, r6, r7
 8023de2:	608b      	str	r3, [r1, #8]
 8023de4:	f1b8 0f00 	cmp.w	r8, #0
 8023de8:	dde9      	ble.n	8023dbe <__sflush_r+0xae>
 8023dea:	6a21      	ldr	r1, [r4, #32]
 8023dec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023dee:	4643      	mov	r3, r8
 8023df0:	463a      	mov	r2, r7
 8023df2:	4628      	mov	r0, r5
 8023df4:	47b0      	blx	r6
 8023df6:	2800      	cmp	r0, #0
 8023df8:	dc08      	bgt.n	8023e0c <__sflush_r+0xfc>
 8023dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e02:	81a3      	strh	r3, [r4, #12]
 8023e04:	f04f 30ff 	mov.w	r0, #4294967295
 8023e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e0c:	4407      	add	r7, r0
 8023e0e:	eba8 0800 	sub.w	r8, r8, r0
 8023e12:	e7e7      	b.n	8023de4 <__sflush_r+0xd4>
 8023e14:	20400001 	.word	0x20400001

08023e18 <_fflush_r>:
 8023e18:	b538      	push	{r3, r4, r5, lr}
 8023e1a:	690b      	ldr	r3, [r1, #16]
 8023e1c:	4605      	mov	r5, r0
 8023e1e:	460c      	mov	r4, r1
 8023e20:	b913      	cbnz	r3, 8023e28 <_fflush_r+0x10>
 8023e22:	2500      	movs	r5, #0
 8023e24:	4628      	mov	r0, r5
 8023e26:	bd38      	pop	{r3, r4, r5, pc}
 8023e28:	b118      	cbz	r0, 8023e32 <_fflush_r+0x1a>
 8023e2a:	6a03      	ldr	r3, [r0, #32]
 8023e2c:	b90b      	cbnz	r3, 8023e32 <_fflush_r+0x1a>
 8023e2e:	f7ff f9eb 	bl	8023208 <__sinit>
 8023e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023e36:	2b00      	cmp	r3, #0
 8023e38:	d0f3      	beq.n	8023e22 <_fflush_r+0xa>
 8023e3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023e3c:	07d0      	lsls	r0, r2, #31
 8023e3e:	d404      	bmi.n	8023e4a <_fflush_r+0x32>
 8023e40:	0599      	lsls	r1, r3, #22
 8023e42:	d402      	bmi.n	8023e4a <_fflush_r+0x32>
 8023e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023e46:	f7ff fbde 	bl	8023606 <__retarget_lock_acquire_recursive>
 8023e4a:	4628      	mov	r0, r5
 8023e4c:	4621      	mov	r1, r4
 8023e4e:	f7ff ff5f 	bl	8023d10 <__sflush_r>
 8023e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023e54:	07da      	lsls	r2, r3, #31
 8023e56:	4605      	mov	r5, r0
 8023e58:	d4e4      	bmi.n	8023e24 <_fflush_r+0xc>
 8023e5a:	89a3      	ldrh	r3, [r4, #12]
 8023e5c:	059b      	lsls	r3, r3, #22
 8023e5e:	d4e1      	bmi.n	8023e24 <_fflush_r+0xc>
 8023e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023e62:	f7ff fbd1 	bl	8023608 <__retarget_lock_release_recursive>
 8023e66:	e7dd      	b.n	8023e24 <_fflush_r+0xc>

08023e68 <__swhatbuf_r>:
 8023e68:	b570      	push	{r4, r5, r6, lr}
 8023e6a:	460c      	mov	r4, r1
 8023e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023e70:	2900      	cmp	r1, #0
 8023e72:	b096      	sub	sp, #88	@ 0x58
 8023e74:	4615      	mov	r5, r2
 8023e76:	461e      	mov	r6, r3
 8023e78:	da0d      	bge.n	8023e96 <__swhatbuf_r+0x2e>
 8023e7a:	89a3      	ldrh	r3, [r4, #12]
 8023e7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023e80:	f04f 0100 	mov.w	r1, #0
 8023e84:	bf14      	ite	ne
 8023e86:	2340      	movne	r3, #64	@ 0x40
 8023e88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023e8c:	2000      	movs	r0, #0
 8023e8e:	6031      	str	r1, [r6, #0]
 8023e90:	602b      	str	r3, [r5, #0]
 8023e92:	b016      	add	sp, #88	@ 0x58
 8023e94:	bd70      	pop	{r4, r5, r6, pc}
 8023e96:	466a      	mov	r2, sp
 8023e98:	f000 f848 	bl	8023f2c <_fstat_r>
 8023e9c:	2800      	cmp	r0, #0
 8023e9e:	dbec      	blt.n	8023e7a <__swhatbuf_r+0x12>
 8023ea0:	9901      	ldr	r1, [sp, #4]
 8023ea2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023ea6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023eaa:	4259      	negs	r1, r3
 8023eac:	4159      	adcs	r1, r3
 8023eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023eb2:	e7eb      	b.n	8023e8c <__swhatbuf_r+0x24>

08023eb4 <__smakebuf_r>:
 8023eb4:	898b      	ldrh	r3, [r1, #12]
 8023eb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023eb8:	079d      	lsls	r5, r3, #30
 8023eba:	4606      	mov	r6, r0
 8023ebc:	460c      	mov	r4, r1
 8023ebe:	d507      	bpl.n	8023ed0 <__smakebuf_r+0x1c>
 8023ec0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023ec4:	6023      	str	r3, [r4, #0]
 8023ec6:	6123      	str	r3, [r4, #16]
 8023ec8:	2301      	movs	r3, #1
 8023eca:	6163      	str	r3, [r4, #20]
 8023ecc:	b003      	add	sp, #12
 8023ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ed0:	ab01      	add	r3, sp, #4
 8023ed2:	466a      	mov	r2, sp
 8023ed4:	f7ff ffc8 	bl	8023e68 <__swhatbuf_r>
 8023ed8:	9f00      	ldr	r7, [sp, #0]
 8023eda:	4605      	mov	r5, r0
 8023edc:	4639      	mov	r1, r7
 8023ede:	4630      	mov	r0, r6
 8023ee0:	f7ff f86c 	bl	8022fbc <_malloc_r>
 8023ee4:	b948      	cbnz	r0, 8023efa <__smakebuf_r+0x46>
 8023ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023eea:	059a      	lsls	r2, r3, #22
 8023eec:	d4ee      	bmi.n	8023ecc <__smakebuf_r+0x18>
 8023eee:	f023 0303 	bic.w	r3, r3, #3
 8023ef2:	f043 0302 	orr.w	r3, r3, #2
 8023ef6:	81a3      	strh	r3, [r4, #12]
 8023ef8:	e7e2      	b.n	8023ec0 <__smakebuf_r+0xc>
 8023efa:	89a3      	ldrh	r3, [r4, #12]
 8023efc:	6020      	str	r0, [r4, #0]
 8023efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023f02:	81a3      	strh	r3, [r4, #12]
 8023f04:	9b01      	ldr	r3, [sp, #4]
 8023f06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023f0a:	b15b      	cbz	r3, 8023f24 <__smakebuf_r+0x70>
 8023f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f10:	4630      	mov	r0, r6
 8023f12:	f000 f81d 	bl	8023f50 <_isatty_r>
 8023f16:	b128      	cbz	r0, 8023f24 <__smakebuf_r+0x70>
 8023f18:	89a3      	ldrh	r3, [r4, #12]
 8023f1a:	f023 0303 	bic.w	r3, r3, #3
 8023f1e:	f043 0301 	orr.w	r3, r3, #1
 8023f22:	81a3      	strh	r3, [r4, #12]
 8023f24:	89a3      	ldrh	r3, [r4, #12]
 8023f26:	431d      	orrs	r5, r3
 8023f28:	81a5      	strh	r5, [r4, #12]
 8023f2a:	e7cf      	b.n	8023ecc <__smakebuf_r+0x18>

08023f2c <_fstat_r>:
 8023f2c:	b538      	push	{r3, r4, r5, lr}
 8023f2e:	4d07      	ldr	r5, [pc, #28]	@ (8023f4c <_fstat_r+0x20>)
 8023f30:	2300      	movs	r3, #0
 8023f32:	4604      	mov	r4, r0
 8023f34:	4608      	mov	r0, r1
 8023f36:	4611      	mov	r1, r2
 8023f38:	602b      	str	r3, [r5, #0]
 8023f3a:	f7dd fc48 	bl	80017ce <_fstat>
 8023f3e:	1c43      	adds	r3, r0, #1
 8023f40:	d102      	bne.n	8023f48 <_fstat_r+0x1c>
 8023f42:	682b      	ldr	r3, [r5, #0]
 8023f44:	b103      	cbz	r3, 8023f48 <_fstat_r+0x1c>
 8023f46:	6023      	str	r3, [r4, #0]
 8023f48:	bd38      	pop	{r3, r4, r5, pc}
 8023f4a:	bf00      	nop
 8023f4c:	24025d70 	.word	0x24025d70

08023f50 <_isatty_r>:
 8023f50:	b538      	push	{r3, r4, r5, lr}
 8023f52:	4d06      	ldr	r5, [pc, #24]	@ (8023f6c <_isatty_r+0x1c>)
 8023f54:	2300      	movs	r3, #0
 8023f56:	4604      	mov	r4, r0
 8023f58:	4608      	mov	r0, r1
 8023f5a:	602b      	str	r3, [r5, #0]
 8023f5c:	f7dd fc3c 	bl	80017d8 <_isatty>
 8023f60:	1c43      	adds	r3, r0, #1
 8023f62:	d102      	bne.n	8023f6a <_isatty_r+0x1a>
 8023f64:	682b      	ldr	r3, [r5, #0]
 8023f66:	b103      	cbz	r3, 8023f6a <_isatty_r+0x1a>
 8023f68:	6023      	str	r3, [r4, #0]
 8023f6a:	bd38      	pop	{r3, r4, r5, pc}
 8023f6c:	24025d70 	.word	0x24025d70

08023f70 <_init>:
 8023f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f72:	bf00      	nop
 8023f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f76:	bc08      	pop	{r3}
 8023f78:	469e      	mov	lr, r3
 8023f7a:	4770      	bx	lr

08023f7c <_fini>:
 8023f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f7e:	bf00      	nop
 8023f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f82:	bc08      	pop	{r3}
 8023f84:	469e      	mov	lr, r3
 8023f86:	4770      	bx	lr
